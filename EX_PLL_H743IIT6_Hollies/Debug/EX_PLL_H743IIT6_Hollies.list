
EX_PLL_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  08012658  08012658  00022658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013298  08013298  00023298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801329c  0801329c  0002329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002d0  24000000  080132a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f58  240002d0  08013570  000302d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000500  24002228  08013570  00032228  2**0
                  ALLOC
  8 ._D3_Area     00000002  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.attributes 0000002e  00000000  00000000  00040002  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029902  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005a0c  00000000  00000000  000699ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c68  00000000  00000000  0006f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001546  00000000  00000000  00071060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ebab  00000000  00000000  000725a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029ba1  00000000  00000000  000b1151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001797a2  00000000  00000000  000dacf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000084cc  00000000  00000000  00254494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0025c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  0025c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0025cbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801263c 	.word	0x0801263c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	0801263c 	.word	0x0801263c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b30      	ldr	r3, [pc, #192]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003b6:	4a31      	ldr	r2, [pc, #196]	; (800047c <MX_ADC1_Init+0xec>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ce:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003da:	4b27      	ldr	r3, [pc, #156]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003dc:	2201      	movs	r2, #1
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b24      	ldr	r3, [pc, #144]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b21      	ldr	r3, [pc, #132]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000404:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800040c:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_ADC1_Init+0xe8>)
 800040e:	2200      	movs	r2, #0
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000414:	4818      	ldr	r0, [pc, #96]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000416:	f001 fa33 	bl	8001880 <HAL_ADC_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000420:	f000 fc78 	bl	8000d14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000428:	f107 031c 	add.w	r3, r7, #28
 800042c:	4619      	mov	r1, r3
 800042e:	4812      	ldr	r0, [pc, #72]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000430:	f002 fa4a 	bl	80028c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800043a:	f000 fc6b 	bl	8000d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_ADC1_Init+0xf0>)
 8000440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000442:	2306      	movs	r3, #6
 8000444:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000446:	2306      	movs	r3, #6
 8000448:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800044a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800044e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000450:	2304      	movs	r3, #4
 8000452:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	4619      	mov	r1, r3
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000462:	f001 fc91 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800046c:	f000 fc52 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	3728      	adds	r7, #40	; 0x28
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	240002ec 	.word	0x240002ec
 800047c:	40022000 	.word	0x40022000
 8000480:	0c900008 	.word	0x0c900008

08000484 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b0ba      	sub	sp, #232	; 0xe8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	22c0      	movs	r2, #192	; 0xc0
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f00f ffd6 	bl	8010456 <memset>
  if(adcHandle->Instance==ADC1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a45      	ldr	r2, [pc, #276]	; (80005c4 <HAL_ADC_MspInit+0x140>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	f040 8082 	bne.w	80005ba <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004ba:	f04f 0300 	mov.w	r3, #0
 80004be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004c2:	2319      	movs	r3, #25
 80004c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004c6:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80004ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80004cc:	2307      	movs	r3, #7
 80004ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004d0:	2302      	movs	r3, #2
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004d4:	2302      	movs	r3, #2
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004d8:	2300      	movs	r3, #0
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004dc:	2300      	movs	r3, #0
 80004de:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004e4:	2300      	movs	r3, #0
 80004e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4618      	mov	r0, r3
 80004f0:	f007 fc3a 	bl	8007d68 <HAL_RCCEx_PeriphCLKConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80004fa:	f000 fc0b 	bl	8000d14 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <HAL_ADC_MspInit+0x144>)
 8000500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000504:	4a30      	ldr	r2, [pc, #192]	; (80005c8 <HAL_ADC_MspInit+0x144>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800050e:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <HAL_ADC_MspInit+0x144>)
 8000510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <HAL_ADC_MspInit+0x144>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000522:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <HAL_ADC_MspInit+0x144>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <HAL_ADC_MspInit+0x144>)
 800052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800053a:	2340      	movs	r3, #64	; 0x40
 800053c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000540:	2303      	movs	r3, #3
 8000542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000550:	4619      	mov	r1, r3
 8000552:	481e      	ldr	r0, [pc, #120]	; (80005cc <HAL_ADC_MspInit+0x148>)
 8000554:	f004 ff10 	bl	8005378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <HAL_ADC_MspInit+0x150>)
 800055c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 8000560:	2209      	movs	r2, #9
 8000562:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 8000572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000576:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 800057a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800057e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 8000582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000586:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 800058a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 8000592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000596:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 80005a0:	f002 fe12 	bl	80031c8 <HAL_DMA_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80005aa:	f000 fbb3 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 80005b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_ADC_MspInit+0x14c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ba:	bf00      	nop
 80005bc:	37e8      	adds	r7, #232	; 0xe8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000
 80005c8:	58024400 	.word	0x58024400
 80005cc:	58020000 	.word	0x58020000
 80005d0:	24000350 	.word	0x24000350
 80005d4:	40020028 	.word	0x40020028

080005d8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2224      	movs	r2, #36	; 0x24
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00f ff36 	bl	8010456 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_DAC1_Init+0x5c>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_DAC1_Init+0x60>)
 80005ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <MX_DAC1_Init+0x5c>)
 80005f2:	f002 fba3 	bl	8002d3c <HAL_DAC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005fc:	f000 fb8a 	bl	8000d14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <MX_DAC1_Init+0x5c>)
 800061c:	f002 fc8c 	bl	8002f38 <HAL_DAC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 fb75 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	; 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	240003c8 	.word	0x240003c8
 8000638:	40007400 	.word	0x40007400

0800063c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <HAL_DAC_MspInit+0x90>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d131      	bne.n	80006c2 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_DAC_MspInit+0x94>)
 8000660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <HAL_DAC_MspInit+0x94>)
 8000666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800066a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_DAC_MspInit+0x94>)
 8000670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_DAC_MspInit+0x94>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000682:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_DAC_MspInit+0x94>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_DAC_MspInit+0x94>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800069a:	2310      	movs	r3, #16
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <HAL_DAC_MspInit+0x98>)
 80006ae:	f004 fe63 	bl	8005378 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	210f      	movs	r1, #15
 80006b6:	2036      	movs	r0, #54	; 0x36
 80006b8:	f002 fa9c 	bl	8002bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006bc:	2036      	movs	r0, #54	; 0x36
 80006be:	f002 fab3 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40007400 	.word	0x40007400
 80006d0:	58024400 	.word	0x58024400
 80006d4:	58020000 	.word	0x58020000

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_DMA_Init+0x3c>)
 80006e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <MX_DMA_Init+0x3c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_DMA_Init+0x3c>)
 80006f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	200c      	movs	r0, #12
 8000702:	f002 fa77 	bl	8002bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000706:	200c      	movs	r0, #12
 8000708:	f002 fa8e 	bl	8002c28 <HAL_NVIC_EnableIRQ>

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58024400 	.word	0x58024400

08000718 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <MX_GPIO_Init+0xbc>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <MX_GPIO_Init+0xbc>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_GPIO_Init+0xbc>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <MX_GPIO_Init+0xbc>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <MX_GPIO_Init+0xbc>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <MX_GPIO_Init+0xbc>)
 8000790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0xc0>)
 80007ac:	f004 ff94 	bl	80056d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b0:	2301      	movs	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_GPIO_Init+0xc0>)
 80007c8:	f004 fdd6 	bl	8005378 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58022000 	.word	0x58022000

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0ae      	sub	sp, #184	; 0xb8
 80007e0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007e2:	f000 f9c3 	bl	8000b6c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007e6:	4b7f      	ldr	r3, [pc, #508]	; (80009e4 <main+0x208>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d11b      	bne.n	800082a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007fe:	4b79      	ldr	r3, [pc, #484]	; (80009e4 <main+0x208>)
 8000800:	2200      	movs	r2, #0
 8000802:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000806:	f3bf 8f4f 	dsb	sy
}
 800080a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800080c:	f3bf 8f6f 	isb	sy
}
 8000810:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000812:	4b74      	ldr	r3, [pc, #464]	; (80009e4 <main+0x208>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a73      	ldr	r2, [pc, #460]	; (80009e4 <main+0x208>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800081e:	f3bf 8f4f 	dsb	sy
}
 8000822:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000824:	f3bf 8f6f 	isb	sy
}
 8000828:	e000      	b.n	800082c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800082a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800082c:	4b6d      	ldr	r3, [pc, #436]	; (80009e4 <main+0x208>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000834:	2b00      	cmp	r3, #0
 8000836:	d143      	bne.n	80008c0 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000838:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <main+0x208>)
 800083a:	2200      	movs	r2, #0
 800083c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000840:	f3bf 8f4f 	dsb	sy
}
 8000844:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <main+0x208>)
 8000848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800084c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000854:	0b5b      	lsrs	r3, r3, #13
 8000856:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800085a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800085e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800086c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000876:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000878:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800087c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800087e:	4959      	ldr	r1, [pc, #356]	; (80009e4 <main+0x208>)
 8000880:	4313      	orrs	r3, r2
 8000882:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1eb      	bne.n	800086c <main+0x90>
    } while(sets-- != 0U);
 8000894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000898:	1e5a      	subs	r2, r3, #1
 800089a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1dd      	bne.n	800085e <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 80008a2:	f3bf 8f4f 	dsb	sy
}
 80008a6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008a8:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <main+0x208>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <main+0x208>)
 80008ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
}
 80008b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ba:	f3bf 8f6f 	isb	sy
}
 80008be:	e000      	b.n	80008c2 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008c0:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fd69 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f8a3 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f7ff ff25 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ce:	f7ff ff03 	bl	80006d8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80008d2:	f00e f9db 	bl	800ec8c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80008d6:	f7ff fd5b 	bl	8000390 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008da:	f7ff fe7d 	bl	80005d8 <MX_DAC1_Init>
  MX_TIM1_Init();
 80008de:	f000 fc51 	bl	8001184 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008e2:	f000 fca3 	bl	800122c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//    float sinVol                = 0;
    signal_1        = (pll_Signal *)malloc(sizeof(pll_Signal));
 80008e6:	2054      	movs	r0, #84	; 0x54
 80008e8:	f00e ffa0 	bl	800f82c <malloc>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <main+0x20c>)
 80008f2:	601a      	str	r2, [r3, #0]
    signal_config_1 = (pll_Config *)malloc(sizeof(pll_Config));
 80008f4:	2020      	movs	r0, #32
 80008f6:	f00e ff99 	bl	800f82c <malloc>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <main+0x210>)
 8000900:	601a      	str	r2, [r3, #0]
    uint8_t buf[128] = {0};
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	227c      	movs	r2, #124	; 0x7c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f00f fda1 	bl	8010456 <memset>
    pll_Init(signal_1, signal_config_1, 50, 20000);
 8000914:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <main+0x20c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a34      	ldr	r2, [pc, #208]	; (80009ec <main+0x210>)
 800091a:	6811      	ldr	r1, [r2, #0]
 800091c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000920:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80009f0 <main+0x214>
 8000924:	4618      	mov	r0, r3
 8000926:	f00d ff59 	bl	800e7dc <pll_Init>
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 800092a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	4830      	ldr	r0, [pc, #192]	; (80009f4 <main+0x218>)
 8000934:	f002 fad0 	bl	8002ed8 <HAL_DAC_SetValue>
  	HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8000938:	2100      	movs	r1, #0
 800093a:	482e      	ldr	r0, [pc, #184]	; (80009f4 <main+0x218>)
 800093c:	f002 fa20 	bl	8002d80 <HAL_DAC_Start>

//  	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
//  	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	492d      	ldr	r1, [pc, #180]	; (80009f8 <main+0x21c>)
 8000944:	482d      	ldr	r0, [pc, #180]	; (80009fc <main+0x220>)
 8000946:	f001 f93d 	bl	8001bc4 <HAL_ADC_Start_DMA>

    HAL_Delay(2000);
 800094a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800094e:	f000 fd7f 	bl	8001450 <HAL_Delay>

    HAL_TIM_Base_Start_IT(&htim2);
 8000952:	482b      	ldr	r0, [pc, #172]	; (8000a00 <main+0x224>)
 8000954:	f009 ff5e 	bl	800a814 <HAL_TIM_Base_Start_IT>
//            sinVol += 50.0f * signal_config_1->Ts * 2 * PI;
//        signal_1->u_0 = 6.28 * arm_sin_f32(sinVol);
//        // 锁相�?????????
//        pll_Control(signal_1, signal_config_1, &x);
//        // 虚拟串口输出日志
        sprintf((char *)buf, "x1=0,theta= %f,u0= %.3f, sogi_d= %.3f, sogi_q= %.3f, park_q= %.3f, park_d= %.3f, \n", signal_1->theta, signal_1->u_0, signal_1->sogi_d_0, signal_1->sogi_q_0 / 382 * 3, signal_1->park_q, signal_1->park_d); //
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <main+0x20c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000960:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <main+0x20c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	edd3 7a00 	vldr	s15, [r3]
 800096c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <main+0x20c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	edd3 6a03 	vldr	s13, [r3, #12]
 8000978:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x20c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	ed93 5a06 	vldr	s10, [r3, #24]
 8000984:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8000a04 <main+0x228>
 8000988:	eec5 5a24 	vdiv.f32	s11, s10, s9
 800098c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8000990:	ee65 5a85 	vmul.f32	s11, s11, s10
 8000994:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <main+0x20c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 80009a0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <main+0x20c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	edd3 3a09 	vldr	s7, [r3, #36]	; 0x24
 80009ac:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80009b0:	1d38      	adds	r0, r7, #4
 80009b2:	ed8d 3b08 	vstr	d3, [sp, #32]
 80009b6:	ed8d 4b06 	vstr	d4, [sp, #24]
 80009ba:	ed8d 5b04 	vstr	d5, [sp, #16]
 80009be:	ed8d 6b02 	vstr	d6, [sp, #8]
 80009c2:	ed8d 7b00 	vstr	d7, [sp]
 80009c6:	ec53 2b12 	vmov	r2, r3, d2
 80009ca:	490f      	ldr	r1, [pc, #60]	; (8000a08 <main+0x22c>)
 80009cc:	f00f fce0 	bl	8010390 <siprintf>
        CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00e fa19 	bl	800ee0c <CDC_Transmit_FS>
        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80009da:	2101      	movs	r1, #1
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <main+0x230>)
 80009de:	f004 fe94 	bl	800570a <HAL_GPIO_TogglePin>
        sprintf((char *)buf, "x1=0,theta= %f,u0= %.3f, sogi_d= %.3f, sogi_q= %.3f, park_q= %.3f, park_d= %.3f, \n", signal_1->theta, signal_1->u_0, signal_1->sogi_d_0, signal_1->sogi_q_0 / 382 * 3, signal_1->park_q, signal_1->park_d); //
 80009e2:	e7b9      	b.n	8000958 <main+0x17c>
 80009e4:	e000ed00 	.word	0xe000ed00
 80009e8:	240003dc 	.word	0x240003dc
 80009ec:	240003e0 	.word	0x240003e0
 80009f0:	42480000 	.word	0x42480000
 80009f4:	240003c8 	.word	0x240003c8
 80009f8:	38000000 	.word	0x38000000
 80009fc:	240002ec 	.word	0x240002ec
 8000a00:	24000480 	.word	0x24000480
 8000a04:	43bf0000 	.word	0x43bf0000
 8000a08:	08012658 	.word	0x08012658
 8000a0c:	58022000 	.word	0x58022000

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	; 0x78
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1a:	224c      	movs	r2, #76	; 0x4c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f00f fd19 	bl	8010456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00f fd12 	bl	8010456 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f006 f93c 	bl	8006cb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <SystemClock_Config+0x150>)
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <SystemClock_Config+0x150>)
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a48:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <SystemClock_Config+0x150>)
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b44      	ldr	r3, [pc, #272]	; (8000b64 <SystemClock_Config+0x154>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a43      	ldr	r2, [pc, #268]	; (8000b64 <SystemClock_Config+0x154>)
 8000a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <SystemClock_Config+0x154>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6a:	bf00      	nop
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <SystemClock_Config+0x154>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a78:	d1f8      	bne.n	8000a6c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <SystemClock_Config+0x158>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a80:	4a39      	ldr	r2, [pc, #228]	; (8000b68 <SystemClock_Config+0x158>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a8a:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <SystemClock_Config+0x158>)
 8000a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <SystemClock_Config+0x154>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <SystemClock_Config+0x154>)
 8000aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <SystemClock_Config+0x154>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <SystemClock_Config+0x150>)
 8000ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab6:	4a2a      	ldr	r2, [pc, #168]	; (8000b60 <SystemClock_Config+0x150>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <SystemClock_Config+0x150>)
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aca:	bf00      	nop
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0x154>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad8:	d1f8      	bne.n	8000acc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000aec:	2305      	movs	r3, #5
 8000aee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000af0:	23c0      	movs	r3, #192	; 0xc0
 8000af2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000af8:	2314      	movs	r3, #20
 8000afa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b00:	2308      	movs	r3, #8
 8000b02:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 f917 	bl	8006d44 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b1c:	f000 f8fa 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	233f      	movs	r3, #63	; 0x3f
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2303      	movs	r3, #3
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2104      	movs	r1, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fd55 	bl	80075f8 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b54:	f000 f8de 	bl	8000d14 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3778      	adds	r7, #120	; 0x78
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58000400 	.word	0x58000400
 8000b64:	58024800 	.word	0x58024800
 8000b68:	58024400 	.word	0x58024400

08000b6c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b7e:	f002 f861 	bl	8002c44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b82:	2301      	movs	r3, #1
 8000b84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b8a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000b8e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b90:	2312      	movs	r3, #18
 8000b92:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 f87e 	bl	8002cb4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000bbc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000bc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 f86f 	bl	8002cb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f002 f84c 	bl	8002c74 <HAL_MPU_Enable>

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0000      	movs	r0, r0
	...

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a3c      	ldr	r2, [pc, #240]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfa:	f000 fc09 	bl	8001410 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c06:	d166      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0xee>
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dd1d      	ble.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c26:	f3bf 8f4f 	dsb	sy
}
 8000c2a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c2c:	4a30      	ldr	r2, [pc, #192]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3320      	adds	r3, #32
 8000c38:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b20      	subs	r3, #32
 8000c3e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dcf2      	bgt.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
}
 8000c4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4c:	f3bf 8f6f 	isb	sy
}
 8000c50:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000c52:	bf00      	nop
  {
	SCB_InvalidateDCache_by_Addr((uint32_t*)adcBuf, sizeof(adcBuf));
	 signal_1->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.4;
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c60:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000cf4 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000c64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c68:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000cf8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c74:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000ce0 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c84:	edc3 7a00 	vstr	s15, [r3]
	// 锁相�?????????
	pll_Control(signal_1, signal_config_1, &x);
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c8e:	6811      	ldr	r1, [r2, #0]
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00d fe88 	bl	800e9a8 <pll_Control>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048*arm_sin_f32(signal_1->theta + PI / 2)+2048);
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000ca0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000d08 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cac:	f00e fd2e 	bl	800f70c <arm_sin_f32>
 8000cb0:	eef0 7a40 	vmov.f32	s15, s0
 8000cb4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000d0c <HAL_TIM_PeriodElapsedCallback+0x124>
 8000cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000d0c <HAL_TIM_PeriodElapsedCallback+0x124>
 8000cc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cc8:	ee17 3a90 	vmov	r3, s15
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000cd2:	f002 f901 	bl	8002ed8 <HAL_DAC_SetValue>

  }
  /* USER CODE END Callback 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	66666666 	.word	0x66666666
 8000ce4:	3ff66666 	.word	0x3ff66666
 8000ce8:	40001000 	.word	0x40001000
 8000cec:	38000000 	.word	0x38000000
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	40533333 	.word	0x40533333
 8000cf8:	47800000 	.word	0x47800000
 8000cfc:	240003dc 	.word	0x240003dc
 8000d00:	240003e0 	.word	0x240003e0
 8000d04:	24000000 	.word	0x24000000
 8000d08:	3fc90fdb 	.word	0x3fc90fdb
 8000d0c:	45000000 	.word	0x45000000
 8000d10:	240003c8 	.word	0x240003c8

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x30>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024400 	.word	0x58024400

08000d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	; 0x40
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	d827      	bhi.n	8000db2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d62:	2200      	movs	r2, #0
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	2036      	movs	r0, #54	; 0x36
 8000d68:	f001 ff44 	bl	8002bf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d6c:	2036      	movs	r0, #54	; 0x36
 8000d6e:	f001 ff5b 	bl	8002c28 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d72:	4a29      	ldr	r2, [pc, #164]	; (8000e18 <HAL_InitTick+0xc4>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <HAL_InitTick+0xc8>)
 8000d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7e:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <HAL_InitTick+0xc8>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_InitTick+0xc8>)
 8000d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d96:	f107 0210 	add.w	r2, r7, #16
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 ff9f 	bl	8007ce4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d106      	bne.n	8000dbe <HAL_InitTick+0x6a>
 8000db0:	e001      	b.n	8000db6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e02b      	b.n	8000e0e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000db6:	f006 ff7f 	bl	8007cb8 <HAL_RCC_GetPCLK1Freq>
 8000dba:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dbe:	f006 ff7b 	bl	8007cb8 <HAL_RCC_GetPCLK1Freq>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_InitTick+0xcc>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	0c9b      	lsrs	r3, r3, #18
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_InitTick+0xd0>)
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <HAL_InitTick+0xd4>)
 8000dda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_InitTick+0xd0>)
 8000dde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000de4:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <HAL_InitTick+0xd0>)
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_InitTick+0xd0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_InitTick+0xd0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <HAL_InitTick+0xd0>)
 8000df8:	f009 fcb4 	bl	800a764 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_InitTick+0xd0>)
 8000e04:	f009 fd06 	bl	800a814 <HAL_TIM_Base_Start_IT>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	e000      	b.n	8000e0e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3740      	adds	r7, #64	; 0x40
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2400000c 	.word	0x2400000c
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	431bde83 	.word	0x431bde83
 8000e24:	240003e4 	.word	0x240003e4
 8000e28:	40001000 	.word	0x40001000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <DMA1_Stream1_IRQHandler+0x10>)
 8000e8a:	f002 ff63 	bl	8003d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24000350 	.word	0x24000350

08000e98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIM2_IRQHandler+0x10>)
 8000e9e:	f009 fd31 	bl	800a904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000480 	.word	0x24000480

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <TIM6_DAC_IRQHandler+0x20>)
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <TIM6_DAC_IRQHandler+0x20>)
 8000ebc:	f001 ffb2 	bl	8002e24 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <TIM6_DAC_IRQHandler+0x24>)
 8000ec2:	f009 fd1f 	bl	800a904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	240003c8 	.word	0x240003c8
 8000ed0:	240003e4 	.word	0x240003e4

08000ed4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <OTG_FS_IRQHandler+0x10>)
 8000eda:	f004 fd89 	bl	80059f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	240019b0 	.word	0x240019b0

08000ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f02:	f00f fb0b 	bl	801051c <__errno>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2216      	movs	r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f2a:	e7fe      	b.n	8000f2a <_exit+0x12>

08000f2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e00a      	b.n	8000f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f3e:	f3af 8000 	nop.w
 8000f42:	4601      	mov	r1, r0
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf0      	blt.n	8000f3e <_read+0x12>
  }

  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e009      	b.n	8000f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf1      	blt.n	8000f78 <_write+0x12>
  }
  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_close>:

int _close(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:

int _isatty(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f00f fa70 	bl	801051c <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	24080000 	.word	0x24080000
 8001068:	00000400 	.word	0x00000400
 800106c:	24000430 	.word	0x24000430
 8001070:	24002228 	.word	0x24002228

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <SystemInit+0xe4>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a36      	ldr	r2, [pc, #216]	; (8001158 <SystemInit+0xe4>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001088:	4b34      	ldr	r3, [pc, #208]	; (800115c <SystemInit+0xe8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	2b06      	cmp	r3, #6
 8001092:	d807      	bhi.n	80010a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <SystemInit+0xe8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 030f 	bic.w	r3, r3, #15
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <SystemInit+0xe8>)
 800109e:	f043 0307 	orr.w	r3, r3, #7
 80010a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <SystemInit+0xec>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <SystemInit+0xec>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemInit+0xec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <SystemInit+0xec>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4929      	ldr	r1, [pc, #164]	; (8001160 <SystemInit+0xec>)
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemInit+0xf0>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <SystemInit+0xe8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <SystemInit+0xe8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <SystemInit+0xe8>)
 80010d8:	f043 0307 	orr.w	r3, r3, #7
 80010dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <SystemInit+0xec>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <SystemInit+0xec>)
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <SystemInit+0xf4>)
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <SystemInit+0xec>)
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <SystemInit+0xf8>)
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <SystemInit+0xec>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <SystemInit+0xfc>)
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <SystemInit+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <SystemInit+0xec>)
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <SystemInit+0xfc>)
 800110c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <SystemInit+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <SystemInit+0xec>)
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <SystemInit+0xfc>)
 8001118:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <SystemInit+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <SystemInit+0xec>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <SystemInit+0xec>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <SystemInit+0xec>)
 800112e:	2200      	movs	r2, #0
 8001130:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <SystemInit+0x100>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <SystemInit+0x104>)
 8001138:	4013      	ands	r3, r2
 800113a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800113e:	d202      	bcs.n	8001146 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <SystemInit+0x108>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <SystemInit+0x10c>)
 8001148:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800114c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	52002000 	.word	0x52002000
 8001160:	58024400 	.word	0x58024400
 8001164:	eaf6ed7f 	.word	0xeaf6ed7f
 8001168:	02020200 	.word	0x02020200
 800116c:	01ff0000 	.word	0x01ff0000
 8001170:	01010280 	.word	0x01010280
 8001174:	5c001000 	.word	0x5c001000
 8001178:	ffff0000 	.word	0xffff0000
 800117c:	51008108 	.word	0x51008108
 8001180:	52004000 	.word	0x52004000

08001184 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <MX_TIM1_Init+0xa4>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ce:	4815      	ldr	r0, [pc, #84]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011d0:	f009 fac8 	bl	800a764 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011da:	f7ff fd9b 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <MX_TIM1_Init+0xa0>)
 80011ec:	f009 fcaa 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011f6:	f7ff fd8d 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM1_Init+0xa0>)
 800120c:	f009 fef2 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001216:	f7ff fd7d 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000434 	.word	0x24000434
 8001228:	40010000 	.word	0x40010000

0800122c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <MX_TIM2_Init+0x98>)
 800124c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001250:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_TIM2_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_TIM2_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_TIM2_Init+0x98>)
 8001260:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001264:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_TIM2_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_TIM2_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001272:	4814      	ldr	r0, [pc, #80]	; (80012c4 <MX_TIM2_Init+0x98>)
 8001274:	f009 fa76 	bl	800a764 <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800127e:	f7ff fd49 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_TIM2_Init+0x98>)
 8001290:	f009 fc58 	bl	800ab44 <HAL_TIM_ConfigClockSource>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800129a:	f7ff fd3b 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_TIM2_Init+0x98>)
 80012ac:	f009 fea2 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012b6:	f7ff fd2d 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24000480 	.word	0x24000480

080012c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_TIM_Base_MspInit+0x74>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10f      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012f8:	e01b      	b.n	8001332 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001302:	d116      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 8001306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 8001316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2101      	movs	r1, #1
 8001326:	201c      	movs	r0, #28
 8001328:	f001 fc64 	bl	8002bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f001 fc7b 	bl	8002c28 <HAL_NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000
 8001340:	58024400 	.word	0x58024400

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff fe94 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f00f f8d9 	bl	8010528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fa31 	bl	80007dc <main>
  bx  lr
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001380:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001384:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001388:	080132a0 	.word	0x080132a0
  ldr r2, =_sbss
 800138c:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001390:	24002228 	.word	0x24002228

08001394 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC3_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139e:	2003      	movs	r0, #3
 80013a0:	f001 fc1d 	bl	8002bde <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a4:	f006 fade 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_Init+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <HAL_Init+0x6c>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_Init+0x6c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_Init+0x70>)
 80013da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_Init+0x74>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff fcb6 	bl	8000d54 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e002      	b.n	80013f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f2:	f7ff fc95 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400
 8001404:	080126f4 	.word	0x080126f4
 8001408:	24000008 	.word	0x24000008
 800140c:	24000004 	.word	0x24000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	24000010 	.word	0x24000010
 8001434:	240004cc 	.word	0x240004cc

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	240004cc 	.word	0x240004cc

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	24000010 	.word	0x24000010

08001498 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetREVID+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0c1b      	lsrs	r3, r3, #16
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	5c001000 	.word	0x5c001000

080014b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3360      	adds	r3, #96	; 0x60
 800152a:	461a      	mov	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	430b      	orrs	r3, r1
 8001546:	431a      	orrs	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	431a      	orrs	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	611a      	str	r2, [r3, #16]
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800158a:	b480      	push	{r7}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3360      	adds	r3, #96	; 0x60
 800159a:	461a      	mov	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]
  }
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b087      	sub	sp, #28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3330      	adds	r3, #48	; 0x30
 80015f6:	461a      	mov	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	4413      	add	r3, r2
 8001604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	211f      	movs	r1, #31
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0e9b      	lsrs	r3, r3, #26
 800161e:	f003 011f 	and.w	r1, r3, #31
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f023 0203 	bic.w	r2, r3, #3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3314      	adds	r3, #20
 8001674:	461a      	mov	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	0e5b      	lsrs	r3, r3, #25
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0d1b      	lsrs	r3, r3, #20
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	2107      	movs	r1, #7
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	401a      	ands	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	0d1b      	lsrs	r3, r3, #20
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016ae:	bf00      	nop
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016d4:	43db      	mvns	r3, r3
 80016d6:	401a      	ands	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0318 	and.w	r3, r3, #24
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016e0:	40d9      	lsrs	r1, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	400b      	ands	r3, r1
 80016e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016ea:	431a      	orrs	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	000fffff 	.word	0x000fffff

08001704 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 031f 	and.w	r3, r3, #31
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <LL_ADC_DisableDeepPowerDown+0x20>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6093      	str	r3, [r2, #8]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	5fffffc0 	.word	0x5fffffc0

08001744 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001758:	d101      	bne.n	800175e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <LL_ADC_EnableInternalRegulator+0x24>)
 800177a:	4013      	ands	r3, r2
 800177c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	6fffffc0 	.word	0x6fffffc0

08001794 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017a8:	d101      	bne.n	80017ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <LL_ADC_Enable+0x24>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	7fffffc0 	.word	0x7fffffc0

080017e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <LL_ADC_IsEnabled+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_ADC_IsEnabled+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <LL_ADC_REG_StartConversion+0x24>)
 800181a:	4013      	ands	r3, r2
 800181c:	f043 0204 	orr.w	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	7fffffc0 	.word	0x7fffffc0

08001834 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b04      	cmp	r3, #4
 8001846:	d101      	bne.n	800184c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b08      	cmp	r3, #8
 800186c:	d101      	bne.n	8001872 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e18f      	b.n	8001bba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7fe fdeb 	bl	8000484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff3f 	bl	8001744 <LL_ADC_IsDeepPowerDownEnabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff25 	bl	8001720 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff5a 	bl	8001794 <LL_ADC_IsInternalRegulatorEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d114      	bne.n	8001910 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff3e 	bl	800176c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018f0:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <HAL_ADC_Init+0x290>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	4a87      	ldr	r2, [pc, #540]	; (8001b14 <HAL_ADC_Init+0x294>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	3301      	adds	r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001902:	e002      	b.n	800190a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3b01      	subs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f9      	bne.n	8001904 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff3d 	bl	8001794 <LL_ADC_IsInternalRegulatorEnabled>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f043 0210 	orr.w	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff77 	bl	8001834 <LL_ADC_REG_IsConversionOngoing>
 8001946:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 8129 	bne.w	8001ba8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 8125 	bne.w	8001ba8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001966:	f043 0202 	orr.w	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff36 	bl	80017e4 <LL_ADC_IsEnabled>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d136      	bne.n	80019ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a65      	ldr	r2, [pc, #404]	; (8001b18 <HAL_ADC_Init+0x298>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_ADC_Init+0x112>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a63      	ldr	r2, [pc, #396]	; (8001b1c <HAL_ADC_Init+0x29c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10e      	bne.n	80019b0 <HAL_ADC_Init+0x130>
 8001992:	4861      	ldr	r0, [pc, #388]	; (8001b18 <HAL_ADC_Init+0x298>)
 8001994:	f7ff ff26 	bl	80017e4 <LL_ADC_IsEnabled>
 8001998:	4604      	mov	r4, r0
 800199a:	4860      	ldr	r0, [pc, #384]	; (8001b1c <HAL_ADC_Init+0x29c>)
 800199c:	f7ff ff22 	bl	80017e4 <LL_ADC_IsEnabled>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4323      	orrs	r3, r4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	e008      	b.n	80019c2 <HAL_ADC_Init+0x142>
 80019b0:	485b      	ldr	r0, [pc, #364]	; (8001b20 <HAL_ADC_Init+0x2a0>)
 80019b2:	f7ff ff17 	bl	80017e4 <LL_ADC_IsEnabled>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_ADC_Init+0x298>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d004      	beq.n	80019da <HAL_ADC_Init+0x15a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a51      	ldr	r2, [pc, #324]	; (8001b1c <HAL_ADC_Init+0x29c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Init+0x15e>
 80019da:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_ADC_Init+0x2a4>)
 80019dc:	e000      	b.n	80019e0 <HAL_ADC_Init+0x160>
 80019de:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <HAL_ADC_Init+0x2a8>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7ff fd62 	bl	80014b0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019ec:	f7ff fd54 	bl	8001498 <HAL_GetREVID>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d914      	bls.n	8001a24 <HAL_ADC_Init+0x1a4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d110      	bne.n	8001a24 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7d5b      	ldrb	r3, [r3, #21]
 8001a06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7f1b      	ldrb	r3, [r3, #28]
 8001a18:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a1a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a1c:	f043 030c 	orr.w	r3, r3, #12
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e00d      	b.n	8001a40 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7d5b      	ldrb	r3, [r3, #21]
 8001a28:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a2e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a34:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7f1b      	ldrb	r3, [r3, #28]
 8001a3a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7f1b      	ldrb	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	045b      	lsls	r3, r3, #17
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_ADC_Init+0x2ac>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	69b9      	ldr	r1, [r7, #24]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fed2 	bl	8001834 <LL_ADC_REG_IsConversionOngoing>
 8001a90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fedf 	bl	800185a <LL_ADC_INJ_IsConversionOngoing>
 8001a9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d15f      	bne.n	8001b64 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d15c      	bne.n	8001b64 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7d1b      	ldrb	r3, [r3, #20]
 8001aae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_ADC_Init+0x2b0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d130      	bne.n	8001b38 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_ADC_Init+0x2b4>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aea:	3a01      	subs	r2, #1
 8001aec:	0411      	lsls	r1, r2, #16
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001afe:	430a      	orrs	r2, r1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	611a      	str	r2, [r3, #16]
 8001b0c:	e01c      	b.n	8001b48 <HAL_ADC_Init+0x2c8>
 8001b0e:	bf00      	nop
 8001b10:	24000004 	.word	0x24000004
 8001b14:	053e2d63 	.word	0x053e2d63
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40022100 	.word	0x40022100
 8001b20:	58026000 	.word	0x58026000
 8001b24:	40022300 	.word	0x40022300
 8001b28:	58026300 	.word	0x58026300
 8001b2c:	fff0c003 	.word	0xfff0c003
 8001b30:	ffffbffc 	.word	0xffffbffc
 8001b34:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fd80 	bl	8002664 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10c      	bne.n	8001b86 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f023 010f 	bic.w	r1, r3, #15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	e007      	b.n	8001b96 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 020f 	bic.w	r2, r2, #15
 8001b94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ba6:	e007      	b.n	8001bb8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	f043 0210 	orr.w	r2, r3, #16
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop

08001bc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_ADC_Start_DMA+0x168>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_ADC_Start_DMA+0x20>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <HAL_ADC_Start_DMA+0x16c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_Start_DMA+0x24>
 8001be4:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_ADC_Start_DMA+0x170>)
 8001be6:	e000      	b.n	8001bea <HAL_ADC_Start_DMA+0x26>
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_ADC_Start_DMA+0x174>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fd8a 	bl	8001704 <LL_ADC_GetMultimode>
 8001bf0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fe1c 	bl	8001834 <LL_ADC_REG_IsConversionOngoing>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 808c 	bne.w	8001d1c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Start_DMA+0x4e>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e087      	b.n	8001d22 <HAL_ADC_Start_DMA+0x15e>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d002      	beq.n	8001c2c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	d170      	bne.n	8001d0e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 fbfb 	bl	8002428 <ADC_Enable>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d163      	bne.n	8001d04 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_ADC_Start_DMA+0x178>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a37      	ldr	r2, [pc, #220]	; (8001d30 <HAL_ADC_Start_DMA+0x16c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d002      	beq.n	8001c5c <HAL_ADC_Start_DMA+0x98>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e000      	b.n	8001c5e <HAL_ADC_Start_DMA+0x9a>
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_ADC_Start_DMA+0x168>)
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d002      	beq.n	8001c6c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f023 0206 	bic.w	r2, r3, #6
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_ADC_Start_DMA+0x17c>)
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <HAL_ADC_Start_DMA+0x180>)
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_ADC_Start_DMA+0x184>)
 8001cae:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	221c      	movs	r2, #28
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0210 	orr.w	r2, r2, #16
 8001cce:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f7ff fcaf 	bl	800163e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3340      	adds	r3, #64	; 0x40
 8001cea:	4619      	mov	r1, r3
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f001 fdc6 	bl	8003880 <HAL_DMA_Start_IT>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fd85 	bl	800180c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d02:	e00d      	b.n	8001d20 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d0c:	e008      	b.n	8001d20 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40022100 	.word	0x40022100
 8001d34:	40022300 	.word	0x40022300
 8001d38:	58026300 	.word	0x58026300
 8001d3c:	fffff0fe 	.word	0xfffff0fe
 8001d40:	0800253d 	.word	0x0800253d
 8001d44:	08002615 	.word	0x08002615
 8001d48:	08002631 	.word	0x08002631

08001d4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b0a1      	sub	sp, #132	; 0x84
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a9d      	ldr	r2, [pc, #628]	; (8002018 <HAL_ADC_ConfigChannel+0x290>)
 8001da2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x2a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e321      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x66e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fd38 	bl	8001834 <LL_ADC_REG_IsConversionOngoing>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 8306 	bne.w	80023d8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x62>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2201      	movs	r2, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	e016      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x90>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e003      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2201      	movs	r2, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	69d1      	ldr	r1, [r2, #28]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff fbd7 	bl	80015e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fcf9 	bl	8001834 <LL_ADC_REG_IsConversionOngoing>
 8001e42:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd06 	bl	800185a <LL_ADC_INJ_IsConversionOngoing>
 8001e4e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80b3 	bne.w	8001fbe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80af 	bne.w	8001fbe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff fbf9 	bl	8001664 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e72:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_ADC_ConfigChannel+0x294>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x110>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	e01d      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x14c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x136>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	e00a      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x14c>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d027      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eec:	f7ff fb14 	bl	8001518 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6919      	ldr	r1, [r3, #16]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7e5b      	ldrb	r3, [r3, #25]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x17e>
 8001f00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f04:	e000      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x180>
 8001f06:	2300      	movs	r3, #0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff fb3e 	bl	800158a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	7e1b      	ldrb	r3, [r3, #24]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x19c>
 8001f1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x19e>
 8001f24:	2300      	movs	r3, #0
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7ff fb16 	bl	8001558 <LL_ADC_SetDataRightShift>
 8001f2c:	e047      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	069b      	lsls	r3, r3, #26
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d107      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f50:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	069b      	lsls	r3, r3, #26
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d107      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f74:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f98:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	069b      	lsls	r3, r3, #26
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d107      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fbc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fc0e 	bl	80017e4 <LL_ADC_IsEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 820d 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f7ff fb6d 	bl	80016bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_ADC_ConfigChannel+0x290>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	f040 8133 	bne.w	8002254 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d110      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x298>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	3301      	adds	r3, #1
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2b09      	cmp	r3, #9
 800200c:	bf94      	ite	ls
 800200e:	2301      	movls	r3, #1
 8002010:	2300      	movhi	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e01e      	b.n	8002054 <HAL_ADC_ConfigChannel+0x2cc>
 8002016:	bf00      	nop
 8002018:	47ff0000 	.word	0x47ff0000
 800201c:	5c001000 	.word	0x5c001000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b09      	cmp	r3, #9
 800204c:	bf94      	ite	ls
 800204e:	2301      	movls	r3, #1
 8002050:	2300      	movhi	r3, #0
 8002052:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002054:	2b00      	cmp	r3, #0
 8002056:	d079      	beq.n	800214c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x2ec>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	3301      	adds	r3, #1
 800206c:	069b      	lsls	r3, r3, #26
 800206e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002072:	e015      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x318>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e003      	b.n	8002098 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3301      	adds	r3, #1
 800209a:	069b      	lsls	r3, r3, #26
 800209c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x338>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	e017      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x368>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x38e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	051b      	lsls	r3, r3, #20
 8002114:	e018      	b.n	8002148 <HAL_ADC_ConfigChannel+0x3c0>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002148:	430b      	orrs	r3, r1
 800214a:	e07e      	b.n	800224a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x3e0>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	069b      	lsls	r3, r3, #26
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	e015      	b.n	8002194 <HAL_ADC_ConfigChannel+0x40c>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x42c>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	e017      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x45c>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	61bb      	str	r3, [r7, #24]
  return result;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	ea42 0103 	orr.w	r1, r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10d      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x488>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	3b1e      	subs	r3, #30
 8002208:	051b      	lsls	r3, r3, #20
 800220a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220e:	e01b      	b.n	8002248 <HAL_ADC_ConfigChannel+0x4c0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	60fb      	str	r3, [r7, #12]
  return result;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e003      	b.n	8002234 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	3b1e      	subs	r3, #30
 8002242:	051b      	lsls	r3, r3, #20
 8002244:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002248:	430b      	orrs	r3, r1
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	6892      	ldr	r2, [r2, #8]
 800224e:	4619      	mov	r1, r3
 8002250:	f7ff fa08 	bl	8001664 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f280 80c6 	bge.w	80023ea <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x4ea>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x4ee>
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 8002274:	e000      	b.n	8002278 <HAL_ADC_ConfigChannel+0x4f0>
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f93f 	bl	80014fc <LL_ADC_GetCommonPathInternalCh>
 800227e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x50c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10e      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x52a>
 8002294:	485a      	ldr	r0, [pc, #360]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002296:	f7ff faa5 	bl	80017e4 <LL_ADC_IsEnabled>
 800229a:	4604      	mov	r4, r0
 800229c:	4859      	ldr	r0, [pc, #356]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 800229e:	f7ff faa1 	bl	80017e4 <LL_ADC_IsEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4323      	orrs	r3, r4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e008      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x53c>
 80022b2:	4857      	ldr	r0, [pc, #348]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 80022b4:	f7ff fa96 	bl	80017e4 <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d07d      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_ADC_ConfigChannel+0x68c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d130      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x5ac>
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d12b      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 8081 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a44      	ldr	r2, [pc, #272]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x574>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a43      	ldr	r2, [pc, #268]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x578>
 80022fc:	4a42      	ldr	r2, [pc, #264]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 80022fe:	e000      	b.n	8002302 <HAL_ADC_ConfigChannel+0x57a>
 8002300:	4a42      	ldr	r2, [pc, #264]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f7ff f8e3 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_ADC_ConfigChannel+0x690>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	4a41      	ldr	r2, [pc, #260]	; (800241c <HAL_ADC_ConfigChannel+0x694>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002324:	e002      	b.n	800232c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002332:	e05a      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a39      	ldr	r2, [pc, #228]	; (8002420 <HAL_ADC_ConfigChannel+0x698>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11e      	bne.n	800237c <HAL_ADC_ConfigChannel+0x5f4>
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d119      	bne.n	800237c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a30      	ldr	r2, [pc, #192]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d14b      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x5de>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x5e2>
 8002366:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 8002368:	e000      	b.n	800236c <HAL_ADC_ConfigChannel+0x5e4>
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7ff f8ae 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800237a:	e036      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_ADC_ConfigChannel+0x69c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d131      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
 8002386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12c      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_ADC_ConfigChannel+0x688>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d127      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_ADC_ConfigChannel+0x678>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x626>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <HAL_ADC_ConfigChannel+0x67c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x62a>
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_ADC_ConfigChannel+0x680>)
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x62c>
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_ADC_ConfigChannel+0x684>)
 80023b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7ff f88a 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
 80023c2:	e012      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023d6:	e008      	b.n	80023ea <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3784      	adds	r7, #132	; 0x84
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000
 8002404:	40022100 	.word	0x40022100
 8002408:	40022300 	.word	0x40022300
 800240c:	58026300 	.word	0x58026300
 8002410:	58026000 	.word	0x58026000
 8002414:	cb840000 	.word	0xcb840000
 8002418:	24000004 	.word	0x24000004
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	c7520000 	.word	0xc7520000
 8002424:	cfb80000 	.word	0xcfb80000

08002428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f9d5 	bl	80017e4 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d16e      	bne.n	800251e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <ADC_Enable+0x100>)
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e05a      	b.n	8002520 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f9a4 	bl	80017bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002474:	f7fe ffe0 	bl	8001438 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <ADC_Enable+0x104>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <ADC_Enable+0x66>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <ADC_Enable+0x108>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <ADC_Enable+0x6a>
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <ADC_Enable+0x10c>)
 8002490:	e000      	b.n	8002494 <ADC_Enable+0x6c>
 8002492:	4b29      	ldr	r3, [pc, #164]	; (8002538 <ADC_Enable+0x110>)
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f935 	bl	8001704 <LL_ADC_GetMultimode>
 800249a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a23      	ldr	r2, [pc, #140]	; (8002530 <ADC_Enable+0x108>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d002      	beq.n	80024ac <ADC_Enable+0x84>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e000      	b.n	80024ae <ADC_Enable+0x86>
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <ADC_Enable+0x104>)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02c      	beq.n	8002510 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d130      	bne.n	800251e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024bc:	e028      	b.n	8002510 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f98e 	bl	80017e4 <LL_ADC_IsEnabled>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f972 	bl	80017bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024d8:	f7fe ffae 	bl	8001438 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d914      	bls.n	8002510 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00d      	beq.n	8002510 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d1cf      	bne.n	80024be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	8000003f 	.word	0x8000003f
 800252c:	40022000 	.word	0x40022000
 8002530:	40022100 	.word	0x40022100
 8002534:	40022300 	.word	0x40022300
 8002538:	58026300 	.word	0x58026300

0800253c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d14b      	bne.n	80025ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d021      	beq.n	80025b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f823 	bl	80015c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d12b      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
 80025b2:	e018      	b.n	80025e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d111      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fbb0 	bl	8001d4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025ec:	e00e      	b.n	800260c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fbba 	bl	8001d74 <HAL_ADC_ErrorCallback>
}
 8002600:	e004      	b.n	800260c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff fb9c 	bl	8001d60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fb8c 	bl	8001d74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7a      	ldr	r2, [pc, #488]	; (800285c <ADC_ConfigureBoostMode+0x1f8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <ADC_ConfigureBoostMode+0x1c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a79      	ldr	r2, [pc, #484]	; (8002860 <ADC_ConfigureBoostMode+0x1fc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d109      	bne.n	8002694 <ADC_ConfigureBoostMode+0x30>
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <ADC_ConfigureBoostMode+0x200>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e008      	b.n	80026a6 <ADC_ConfigureBoostMode+0x42>
 8002694:	4b74      	ldr	r3, [pc, #464]	; (8002868 <ADC_ConfigureBoostMode+0x204>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01c      	beq.n	80026e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026aa:	f005 fad5 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 80026ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b8:	d010      	beq.n	80026dc <ADC_ConfigureBoostMode+0x78>
 80026ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026be:	d873      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x144>
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d002      	beq.n	80026cc <ADC_ConfigureBoostMode+0x68>
 80026c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ca:	d16d      	bne.n	80027a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	60fb      	str	r3, [r7, #12]
        break;
 80026da:	e068      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	60fb      	str	r3, [r7, #12]
        break;
 80026e2:	e064      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	f006 fd46 	bl	800917c <HAL_RCCEx_GetPeriphCLKFreq>
 80026f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026fa:	d051      	beq.n	80027a0 <ADC_ConfigureBoostMode+0x13c>
 80026fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002700:	d854      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002702:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002706:	d047      	beq.n	8002798 <ADC_ConfigureBoostMode+0x134>
 8002708:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800270c:	d84e      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800270e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002712:	d03d      	beq.n	8002790 <ADC_ConfigureBoostMode+0x12c>
 8002714:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002718:	d848      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271e:	d033      	beq.n	8002788 <ADC_ConfigureBoostMode+0x124>
 8002720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002724:	d842      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002726:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800272a:	d029      	beq.n	8002780 <ADC_ConfigureBoostMode+0x11c>
 800272c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002730:	d83c      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002732:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002736:	d01a      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002738:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800273c:	d836      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800273e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002742:	d014      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002744:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002748:	d830      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 800274a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274e:	d00e      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002754:	d82a      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002756:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800275a:	d008      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 800275c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002760:	d824      	bhi.n	80027ac <ADC_ConfigureBoostMode+0x148>
 8002762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002766:	d002      	beq.n	800276e <ADC_ConfigureBoostMode+0x10a>
 8002768:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800276c:	d11e      	bne.n	80027ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0c9b      	lsrs	r3, r3, #18
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	60fb      	str	r3, [r7, #12]
        break;
 800277e:	e016      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
        break;
 8002786:	e012      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	60fb      	str	r3, [r7, #12]
        break;
 800278e:	e00e      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	60fb      	str	r3, [r7, #12]
        break;
 8002796:	e00a      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	09db      	lsrs	r3, r3, #7
 800279c:	60fb      	str	r3, [r7, #12]
        break;
 800279e:	e006      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
        break;
 80027a6:	e002      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027ae:	f7fe fe73 	bl	8001498 <HAL_GetREVID>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d815      	bhi.n	80027e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a2b      	ldr	r2, [pc, #172]	; (800286c <ADC_ConfigureBoostMode+0x208>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d908      	bls.n	80027d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027d4:	e03e      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e4:	609a      	str	r2, [r3, #8]
}
 80027e6:	e035      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <ADC_ConfigureBoostMode+0x20c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d808      	bhi.n	8002808 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	e025      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <ADC_ConfigureBoostMode+0x210>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d80a      	bhi.n	8002826 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	e016      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <ADC_ConfigureBoostMode+0x214>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d80a      	bhi.n	8002844 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	609a      	str	r2, [r3, #8]
}
 8002842:	e007      	b.n	8002854 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40022000 	.word	0x40022000
 8002860:	40022100 	.word	0x40022100
 8002864:	40022300 	.word	0x40022300
 8002868:	58026300 	.word	0x58026300
 800286c:	01312d00 	.word	0x01312d00
 8002870:	005f5e10 	.word	0x005f5e10
 8002874:	00bebc20 	.word	0x00bebc20
 8002878:	017d7840 	.word	0x017d7840

0800287c <LL_ADC_IsEnabled>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <LL_ADC_IsEnabled+0x18>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LL_ADC_IsEnabled+0x1a>
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d101      	bne.n	80028ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b09f      	sub	sp, #124	; 0x7c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0be      	b.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d102      	bne.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002900:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	e001      	b.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e09d      	b.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ffb9 	bl	80028a2 <LL_ADC_REG_IsConversionOngoing>
 8002930:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ffb3 	bl	80028a2 <LL_ADC_REG_IsConversionOngoing>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d17f      	bne.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	2b00      	cmp	r3, #0
 8002946:	d17c      	bne.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800295c:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800295e:	e000      	b.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002960:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002962:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d039      	beq.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10e      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002992:	4836      	ldr	r0, [pc, #216]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002994:	f7ff ff72 	bl	800287c <LL_ADC_IsEnabled>
 8002998:	4604      	mov	r4, r0
 800299a:	4835      	ldr	r0, [pc, #212]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800299c:	f7ff ff6e 	bl	800287c <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4323      	orrs	r3, r4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e008      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80029b0:	4832      	ldr	r0, [pc, #200]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80029b2:	f7ff ff63 	bl	800287c <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d047      	beq.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	6811      	ldr	r1, [r2, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029de:	e03a      	b.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80029e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10e      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a00:	481a      	ldr	r0, [pc, #104]	; (8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a02:	f7ff ff3b 	bl	800287c <LL_ADC_IsEnabled>
 8002a06:	4604      	mov	r4, r0
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a0a:	f7ff ff37 	bl	800287c <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4323      	orrs	r3, r4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e008      	b.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a1e:	4817      	ldr	r0, [pc, #92]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a20:	f7ff ff2c 	bl	800287c <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d010      	beq.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a3e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a40:	e009      	b.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a54:	e000      	b.n	8002a58 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	377c      	adds	r7, #124	; 0x7c
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40022100 	.word	0x40022100
 8002a74:	40022300 	.word	0x40022300
 8002a78:	58026300 	.word	0x58026300
 8002a7c:	58026000 	.word	0x58026000
 8002a80:	fffff0e0 	.word	0xfffff0e0

08002a84 <__NVIC_SetPriorityGrouping>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	05fa0000 	.word	0x05fa0000

08002acc <__NVIC_GetPriorityGrouping>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff4c 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c02:	f7ff ff63 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	6978      	ldr	r0, [r7, #20]
 8002c0e:	f7ff ffb3 	bl	8002b78 <NVIC_EncodePriority>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff82 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff56 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002c48:	f3bf 8f5f 	dmb	sy
}
 8002c4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_MPU_Disable+0x28>)
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_MPU_Disable+0x28>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_MPU_Disable+0x2c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	605a      	str	r2, [r3, #4]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	e000ed90 	.word	0xe000ed90

08002c74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <HAL_MPU_Enable+0x38>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_MPU_Enable+0x3c>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_MPU_Enable+0x3c>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c92:	f3bf 8f4f 	dsb	sy
}
 8002c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c98:	f3bf 8f6f 	isb	sy
}
 8002c9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed90 	.word	0xe000ed90
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	785a      	ldrb	r2, [r3, #1]
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_MPU_ConfigRegion+0x84>)
 8002cc2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d029      	beq.n	8002d20 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002ccc:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <HAL_MPU_ConfigRegion+0x84>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7b1b      	ldrb	r3, [r3, #12]
 8002cd8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7adb      	ldrb	r3, [r3, #11]
 8002cde:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ce0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7a9b      	ldrb	r3, [r3, #10]
 8002ce6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ce8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7b5b      	ldrb	r3, [r3, #13]
 8002cee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7b9b      	ldrb	r3, [r3, #14]
 8002cf6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cf8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7bdb      	ldrb	r3, [r3, #15]
 8002cfe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7a5b      	ldrb	r3, [r3, #9]
 8002d06:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7a1b      	ldrb	r3, [r3, #8]
 8002d0e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d10:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d1a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d1c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d1e:	e005      	b.n	8002d2c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_MPU_ConfigRegion+0x84>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_MPU_ConfigRegion+0x84>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed90 	.word	0xe000ed90

08002d3c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e014      	b.n	8002d78 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	791b      	ldrb	r3, [r3, #4]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fc6c 	bl	800063c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	795b      	ldrb	r3, [r3, #5]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_DAC_Start+0x16>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e040      	b.n	8002e18 <HAL_DAC_Start+0x98>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10f      	bne.n	8002de0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d11d      	bne.n	8002e0a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e014      	b.n	8002e0a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2102      	movs	r1, #2
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d107      	bne.n	8002e0a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0202 	orr.w	r2, r2, #2
 8002e08:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3a:	d120      	bne.n	8002e7e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	d118      	bne.n	8002e7e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e76:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f852 	bl	8002f22 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d120      	bne.n	8002ed0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9c:	d118      	bne.n	8002ed0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f043 0202 	orr.w	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f972 	bl	80031b4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3308      	adds	r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e004      	b.n	8002f0c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3314      	adds	r3, #20
 8002f0a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	795b      	ldrb	r3, [r3, #5]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_DAC_ConfigChannel+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e12a      	b.n	80031a6 <HAL_DAC_ConfigChannel+0x26e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	f040 8081 	bne.w	8003068 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f66:	f7fe fa67 	bl	8001438 <HAL_GetTick>
 8002f6a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d140      	bne.n	8002ff4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f72:	e018      	b.n	8002fa6 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f74:	f7fe fa60 	bl	8001438 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d911      	bls.n	8002fa6 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f88:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_DAC_ConfigChannel+0x278>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f043 0208 	orr.w	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0ff      	b.n	80031a6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fac:	4b80      	ldr	r3, [pc, #512]	; (80031b0 <HAL_DAC_ConfigChannel+0x278>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1df      	bne.n	8002f74 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7fe fa4b 	bl	8001450 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	6992      	ldr	r2, [r2, #24]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc4:	e023      	b.n	800300e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fc6:	f7fe fa37 	bl	8001438 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d90f      	bls.n	8002ff4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0a      	bge.n	8002ff4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f043 0208 	orr.w	r2, r3, #8
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2203      	movs	r2, #3
 8002fee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0d8      	b.n	80031a6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	dbe3      	blt.n	8002fc6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7fe fa26 	bl	8001450 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	6992      	ldr	r2, [r2, #24]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	ea02 0103 	and.w	r1, r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	21ff      	movs	r1, #255	; 0xff
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	ea02 0103 	and.w	r1, r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d11d      	bne.n	80030ac <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	221f      	movs	r2, #31
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4013      	ands	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2207      	movs	r2, #7
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4013      	ands	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e00f      	b.n	80030f6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d102      	bne.n	80030e4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e008      	b.n	80030f6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030ec:	2301      	movs	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	e001      	b.n	80030f6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4313      	orrs	r3, r2
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43da      	mvns	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	400a      	ands	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4013      	ands	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	22c0      	movs	r2, #192	; 0xc0
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	400a      	ands	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20008000 	.word	0x20008000

080031b4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7fe f932 	bl	8001438 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e316      	b.n	800380e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a66      	ldr	r2, [pc, #408]	; (8003380 <HAL_DMA_Init+0x1b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_DMA_Init+0x1bc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a63      	ldr	r2, [pc, #396]	; (8003388 <HAL_DMA_Init+0x1c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a62      	ldr	r2, [pc, #392]	; (800338c <HAL_DMA_Init+0x1c4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a60      	ldr	r2, [pc, #384]	; (8003390 <HAL_DMA_Init+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5f      	ldr	r2, [pc, #380]	; (8003394 <HAL_DMA_Init+0x1cc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a5d      	ldr	r2, [pc, #372]	; (8003398 <HAL_DMA_Init+0x1d0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5c      	ldr	r2, [pc, #368]	; (800339c <HAL_DMA_Init+0x1d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <HAL_DMA_Init+0x1d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a59      	ldr	r2, [pc, #356]	; (80033a4 <HAL_DMA_Init+0x1dc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_DMA_Init+0x1e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_DMA_Init+0x1e4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a54      	ldr	r2, [pc, #336]	; (80033b0 <HAL_DMA_Init+0x1e8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a53      	ldr	r2, [pc, #332]	; (80033b4 <HAL_DMA_Init+0x1ec>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a51      	ldr	r2, [pc, #324]	; (80033b8 <HAL_DMA_Init+0x1f0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Init+0xb8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a50      	ldr	r2, [pc, #320]	; (80033bc <HAL_DMA_Init+0x1f4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Init+0xbc>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_DMA_Init+0xbe>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 813b 	beq.w	8003502 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a37      	ldr	r2, [pc, #220]	; (8003380 <HAL_DMA_Init+0x1b8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a36      	ldr	r2, [pc, #216]	; (8003384 <HAL_DMA_Init+0x1bc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a34      	ldr	r2, [pc, #208]	; (8003388 <HAL_DMA_Init+0x1c0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a33      	ldr	r2, [pc, #204]	; (800338c <HAL_DMA_Init+0x1c4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_DMA_Init+0x1c8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a30      	ldr	r2, [pc, #192]	; (8003394 <HAL_DMA_Init+0x1cc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <HAL_DMA_Init+0x1d0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_DMA_Init+0x1d4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <HAL_DMA_Init+0x1d8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_Init+0x174>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_DMA_Init+0x1dc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_Init+0x174>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <HAL_DMA_Init+0x1e0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_Init+0x174>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_DMA_Init+0x1e4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_Init+0x174>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <HAL_DMA_Init+0x1e8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_Init+0x174>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_DMA_Init+0x1ec>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_Init+0x174>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_DMA_Init+0x1f0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_Init+0x174>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <HAL_DMA_Init+0x1f4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <HAL_DMA_Init+0x186>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e007      	b.n	800335e <HAL_DMA_Init+0x196>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800335e:	e02f      	b.n	80033c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003360:	f7fe f86a 	bl	8001438 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b05      	cmp	r3, #5
 800336c:	d928      	bls.n	80033c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2203      	movs	r2, #3
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e246      	b.n	800380e <HAL_DMA_Init+0x646>
 8003380:	40020010 	.word	0x40020010
 8003384:	40020028 	.word	0x40020028
 8003388:	40020040 	.word	0x40020040
 800338c:	40020058 	.word	0x40020058
 8003390:	40020070 	.word	0x40020070
 8003394:	40020088 	.word	0x40020088
 8003398:	400200a0 	.word	0x400200a0
 800339c:	400200b8 	.word	0x400200b8
 80033a0:	40020410 	.word	0x40020410
 80033a4:	40020428 	.word	0x40020428
 80033a8:	40020440 	.word	0x40020440
 80033ac:	40020458 	.word	0x40020458
 80033b0:	40020470 	.word	0x40020470
 80033b4:	40020488 	.word	0x40020488
 80033b8:	400204a0 	.word	0x400204a0
 80033bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1c8      	bne.n	8003360 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4b83      	ldr	r3, [pc, #524]	; (80035e8 <HAL_DMA_Init+0x420>)
 80033da:	4013      	ands	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b04      	cmp	r3, #4
 8003412:	d107      	bne.n	8003424 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4313      	orrs	r3, r2
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003424:	4b71      	ldr	r3, [pc, #452]	; (80035ec <HAL_DMA_Init+0x424>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_DMA_Init+0x428>)
 800342a:	4013      	ands	r3, r2
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d328      	bcc.n	8003484 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b28      	cmp	r3, #40	; 0x28
 8003438:	d903      	bls.n	8003442 <HAL_DMA_Init+0x27a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b2e      	cmp	r3, #46	; 0x2e
 8003440:	d917      	bls.n	8003472 <HAL_DMA_Init+0x2aa>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b3e      	cmp	r3, #62	; 0x3e
 8003448:	d903      	bls.n	8003452 <HAL_DMA_Init+0x28a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b42      	cmp	r3, #66	; 0x42
 8003450:	d90f      	bls.n	8003472 <HAL_DMA_Init+0x2aa>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b46      	cmp	r3, #70	; 0x46
 8003458:	d903      	bls.n	8003462 <HAL_DMA_Init+0x29a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b48      	cmp	r3, #72	; 0x48
 8003460:	d907      	bls.n	8003472 <HAL_DMA_Init+0x2aa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b4e      	cmp	r3, #78	; 0x4e
 8003468:	d905      	bls.n	8003476 <HAL_DMA_Init+0x2ae>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b52      	cmp	r3, #82	; 0x52
 8003470:	d801      	bhi.n	8003476 <HAL_DMA_Init+0x2ae>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_DMA_Init+0x2b0>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003482:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d117      	bne.n	80034de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f001 fdcf 	bl	8005064 <DMA_CheckFifoParam>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2240      	movs	r2, #64	; 0x40
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e197      	b.n	800380e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f001 fd0a 	bl	8004f00 <DMA_CalcBaseAndBitshift>
 80034ec:	4603      	mov	r3, r0
 80034ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	223f      	movs	r2, #63	; 0x3f
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e0cd      	b.n	800369e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <HAL_DMA_Init+0x42c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a39      	ldr	r2, [pc, #228]	; (80035f8 <HAL_DMA_Init+0x430>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_DMA_Init+0x434>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a36      	ldr	r2, [pc, #216]	; (8003600 <HAL_DMA_Init+0x438>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a35      	ldr	r2, [pc, #212]	; (8003604 <HAL_DMA_Init+0x43c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a33      	ldr	r2, [pc, #204]	; (8003608 <HAL_DMA_Init+0x440>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a32      	ldr	r2, [pc, #200]	; (800360c <HAL_DMA_Init+0x444>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_Init+0x38a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a30      	ldr	r2, [pc, #192]	; (8003610 <HAL_DMA_Init+0x448>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Init+0x38e>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_DMA_Init+0x390>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8097 	beq.w	800368c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <HAL_DMA_Init+0x42c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d021      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_DMA_Init+0x430>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01c      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a21      	ldr	r2, [pc, #132]	; (80035fc <HAL_DMA_Init+0x434>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d017      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_DMA_Init+0x438>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d012      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_DMA_Init+0x43c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_DMA_Init+0x440>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d008      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_DMA_Init+0x444>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <HAL_DMA_Init+0x3e4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_DMA_Init+0x448>)
 80035aa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_DMA_Init+0x44c>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d021      	beq.n	8003618 <HAL_DMA_Init+0x450>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d102      	bne.n	80035e2 <HAL_DMA_Init+0x41a>
 80035dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035e0:	e01b      	b.n	800361a <HAL_DMA_Init+0x452>
 80035e2:	2300      	movs	r3, #0
 80035e4:	e019      	b.n	800361a <HAL_DMA_Init+0x452>
 80035e6:	bf00      	nop
 80035e8:	fe10803f 	.word	0xfe10803f
 80035ec:	5c001000 	.word	0x5c001000
 80035f0:	ffff0000 	.word	0xffff0000
 80035f4:	58025408 	.word	0x58025408
 80035f8:	5802541c 	.word	0x5802541c
 80035fc:	58025430 	.word	0x58025430
 8003600:	58025444 	.word	0x58025444
 8003604:	58025458 	.word	0x58025458
 8003608:	5802546c 	.word	0x5802546c
 800360c:	58025480 	.word	0x58025480
 8003610:	58025494 	.word	0x58025494
 8003614:	fffe000f 	.word	0xfffe000f
 8003618:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003648:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b6e      	ldr	r3, [pc, #440]	; (8003818 <HAL_DMA_Init+0x650>)
 8003660:	4413      	add	r3, r2
 8003662:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_DMA_Init+0x654>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f001 fc45 	bl	8004f00 <DMA_CalcBaseAndBitshift>
 8003676:	4603      	mov	r3, r0
 8003678:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	e008      	b.n	800369e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0b7      	b.n	800380e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5f      	ldr	r2, [pc, #380]	; (8003820 <HAL_DMA_Init+0x658>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d072      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_DMA_Init+0x65c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d06d      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a5c      	ldr	r2, [pc, #368]	; (8003828 <HAL_DMA_Init+0x660>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d068      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a5a      	ldr	r2, [pc, #360]	; (800382c <HAL_DMA_Init+0x664>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d063      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a59      	ldr	r2, [pc, #356]	; (8003830 <HAL_DMA_Init+0x668>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d05e      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_DMA_Init+0x66c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d059      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_DMA_Init+0x670>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d054      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a54      	ldr	r2, [pc, #336]	; (800383c <HAL_DMA_Init+0x674>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d04f      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a53      	ldr	r2, [pc, #332]	; (8003840 <HAL_DMA_Init+0x678>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a51      	ldr	r2, [pc, #324]	; (8003844 <HAL_DMA_Init+0x67c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a50      	ldr	r2, [pc, #320]	; (8003848 <HAL_DMA_Init+0x680>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4e      	ldr	r2, [pc, #312]	; (800384c <HAL_DMA_Init+0x684>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <HAL_DMA_Init+0x688>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4b      	ldr	r2, [pc, #300]	; (8003854 <HAL_DMA_Init+0x68c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_DMA_Init+0x690>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a48      	ldr	r2, [pc, #288]	; (800385c <HAL_DMA_Init+0x694>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a47      	ldr	r2, [pc, #284]	; (8003860 <HAL_DMA_Init+0x698>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_DMA_Init+0x69c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a44      	ldr	r2, [pc, #272]	; (8003868 <HAL_DMA_Init+0x6a0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a42      	ldr	r2, [pc, #264]	; (800386c <HAL_DMA_Init+0x6a4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a41      	ldr	r2, [pc, #260]	; (8003870 <HAL_DMA_Init+0x6a8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3f      	ldr	r2, [pc, #252]	; (8003874 <HAL_DMA_Init+0x6ac>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3e      	ldr	r2, [pc, #248]	; (8003878 <HAL_DMA_Init+0x6b0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_Init+0x5c6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3c      	ldr	r2, [pc, #240]	; (800387c <HAL_DMA_Init+0x6b4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_DMA_Init+0x5ca>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_DMA_Init+0x5cc>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d032      	beq.n	80037fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f001 fcdf 	bl	800515c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b80      	cmp	r3, #128	; 0x80
 80037a4:	d102      	bne.n	80037ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <HAL_DMA_Init+0x624>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d80c      	bhi.n	80037ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f001 fd5c 	bl	8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	e008      	b.n	80037fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	a7fdabf8 	.word	0xa7fdabf8
 800381c:	cccccccd 	.word	0xcccccccd
 8003820:	40020010 	.word	0x40020010
 8003824:	40020028 	.word	0x40020028
 8003828:	40020040 	.word	0x40020040
 800382c:	40020058 	.word	0x40020058
 8003830:	40020070 	.word	0x40020070
 8003834:	40020088 	.word	0x40020088
 8003838:	400200a0 	.word	0x400200a0
 800383c:	400200b8 	.word	0x400200b8
 8003840:	40020410 	.word	0x40020410
 8003844:	40020428 	.word	0x40020428
 8003848:	40020440 	.word	0x40020440
 800384c:	40020458 	.word	0x40020458
 8003850:	40020470 	.word	0x40020470
 8003854:	40020488 	.word	0x40020488
 8003858:	400204a0 	.word	0x400204a0
 800385c:	400204b8 	.word	0x400204b8
 8003860:	58025408 	.word	0x58025408
 8003864:	5802541c 	.word	0x5802541c
 8003868:	58025430 	.word	0x58025430
 800386c:	58025444 	.word	0x58025444
 8003870:	58025458 	.word	0x58025458
 8003874:	5802546c 	.word	0x5802546c
 8003878:	58025480 	.word	0x58025480
 800387c:	58025494 	.word	0x58025494

08003880 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e226      	b.n	8003cea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_DMA_Start_IT+0x2a>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e21f      	b.n	8003cea <HAL_DMA_Start_IT+0x46a>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 820a 	bne.w	8003cd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a68      	ldr	r2, [pc, #416]	; (8003a74 <HAL_DMA_Start_IT+0x1f4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d04a      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	; (8003a78 <HAL_DMA_Start_IT+0x1f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d045      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a65      	ldr	r2, [pc, #404]	; (8003a7c <HAL_DMA_Start_IT+0x1fc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d040      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a63      	ldr	r2, [pc, #396]	; (8003a80 <HAL_DMA_Start_IT+0x200>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d03b      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <HAL_DMA_Start_IT+0x204>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d036      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a60      	ldr	r2, [pc, #384]	; (8003a88 <HAL_DMA_Start_IT+0x208>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d031      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5f      	ldr	r2, [pc, #380]	; (8003a8c <HAL_DMA_Start_IT+0x20c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d02c      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	; (8003a90 <HAL_DMA_Start_IT+0x210>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d027      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	; (8003a94 <HAL_DMA_Start_IT+0x214>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d022      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <HAL_DMA_Start_IT+0x218>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01d      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a59      	ldr	r2, [pc, #356]	; (8003a9c <HAL_DMA_Start_IT+0x21c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d018      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a57      	ldr	r2, [pc, #348]	; (8003aa0 <HAL_DMA_Start_IT+0x220>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	; (8003aa4 <HAL_DMA_Start_IT+0x224>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a54      	ldr	r2, [pc, #336]	; (8003aa8 <HAL_DMA_Start_IT+0x228>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a53      	ldr	r2, [pc, #332]	; (8003aac <HAL_DMA_Start_IT+0x22c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_DMA_Start_IT+0xee>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a51      	ldr	r2, [pc, #324]	; (8003ab0 <HAL_DMA_Start_IT+0x230>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <HAL_DMA_Start_IT+0x100>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e007      	b.n	8003990 <HAL_DMA_Start_IT+0x110>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f001 f906 	bl	8004ba8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <HAL_DMA_Start_IT+0x1f4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04a      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <HAL_DMA_Start_IT+0x1f8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d045      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a31      	ldr	r2, [pc, #196]	; (8003a7c <HAL_DMA_Start_IT+0x1fc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d040      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_DMA_Start_IT+0x200>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_DMA_Start_IT+0x204>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d036      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_DMA_Start_IT+0x208>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d031      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <HAL_DMA_Start_IT+0x20c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02c      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_DMA_Start_IT+0x210>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d027      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_DMA_Start_IT+0x214>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_DMA_Start_IT+0x218>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <HAL_DMA_Start_IT+0x21c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <HAL_DMA_Start_IT+0x220>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_DMA_Start_IT+0x224>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_DMA_Start_IT+0x228>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_DMA_Start_IT+0x22c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_Start_IT+0x1bc>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_DMA_Start_IT+0x230>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_DMA_Start_IT+0x1c0>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_DMA_Start_IT+0x1c2>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d036      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 021e 	bic.w	r2, r3, #30
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0216 	orr.w	r2, r2, #22
 8003a58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03e      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0208 	orr.w	r2, r2, #8
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e035      	b.n	8003ae0 <HAL_DMA_Start_IT+0x260>
 8003a74:	40020010 	.word	0x40020010
 8003a78:	40020028 	.word	0x40020028
 8003a7c:	40020040 	.word	0x40020040
 8003a80:	40020058 	.word	0x40020058
 8003a84:	40020070 	.word	0x40020070
 8003a88:	40020088 	.word	0x40020088
 8003a8c:	400200a0 	.word	0x400200a0
 8003a90:	400200b8 	.word	0x400200b8
 8003a94:	40020410 	.word	0x40020410
 8003a98:	40020428 	.word	0x40020428
 8003a9c:	40020440 	.word	0x40020440
 8003aa0:	40020458 	.word	0x40020458
 8003aa4:	40020470 	.word	0x40020470
 8003aa8:	40020488 	.word	0x40020488
 8003aac:	400204a0 	.word	0x400204a0
 8003ab0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 020e 	bic.w	r2, r3, #14
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 020a 	orr.w	r2, r2, #10
 8003ac6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0204 	orr.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a83      	ldr	r2, [pc, #524]	; (8003cf4 <HAL_DMA_Start_IT+0x474>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d072      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a82      	ldr	r2, [pc, #520]	; (8003cf8 <HAL_DMA_Start_IT+0x478>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d06d      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a80      	ldr	r2, [pc, #512]	; (8003cfc <HAL_DMA_Start_IT+0x47c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d068      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7f      	ldr	r2, [pc, #508]	; (8003d00 <HAL_DMA_Start_IT+0x480>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d063      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7d      	ldr	r2, [pc, #500]	; (8003d04 <HAL_DMA_Start_IT+0x484>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d05e      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7c      	ldr	r2, [pc, #496]	; (8003d08 <HAL_DMA_Start_IT+0x488>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d059      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7a      	ldr	r2, [pc, #488]	; (8003d0c <HAL_DMA_Start_IT+0x48c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d054      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a79      	ldr	r2, [pc, #484]	; (8003d10 <HAL_DMA_Start_IT+0x490>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d04f      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a77      	ldr	r2, [pc, #476]	; (8003d14 <HAL_DMA_Start_IT+0x494>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d04a      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a76      	ldr	r2, [pc, #472]	; (8003d18 <HAL_DMA_Start_IT+0x498>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d045      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a74      	ldr	r2, [pc, #464]	; (8003d1c <HAL_DMA_Start_IT+0x49c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d040      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a73      	ldr	r2, [pc, #460]	; (8003d20 <HAL_DMA_Start_IT+0x4a0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d03b      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a71      	ldr	r2, [pc, #452]	; (8003d24 <HAL_DMA_Start_IT+0x4a4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d036      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a70      	ldr	r2, [pc, #448]	; (8003d28 <HAL_DMA_Start_IT+0x4a8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d031      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6e      	ldr	r2, [pc, #440]	; (8003d2c <HAL_DMA_Start_IT+0x4ac>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02c      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6d      	ldr	r2, [pc, #436]	; (8003d30 <HAL_DMA_Start_IT+0x4b0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d027      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6b      	ldr	r2, [pc, #428]	; (8003d34 <HAL_DMA_Start_IT+0x4b4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d022      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6a      	ldr	r2, [pc, #424]	; (8003d38 <HAL_DMA_Start_IT+0x4b8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01d      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a68      	ldr	r2, [pc, #416]	; (8003d3c <HAL_DMA_Start_IT+0x4bc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a67      	ldr	r2, [pc, #412]	; (8003d40 <HAL_DMA_Start_IT+0x4c0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a65      	ldr	r2, [pc, #404]	; (8003d44 <HAL_DMA_Start_IT+0x4c4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a64      	ldr	r2, [pc, #400]	; (8003d48 <HAL_DMA_Start_IT+0x4c8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a62      	ldr	r2, [pc, #392]	; (8003d4c <HAL_DMA_Start_IT+0x4cc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x350>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a61      	ldr	r2, [pc, #388]	; (8003d50 <HAL_DMA_Start_IT+0x4d0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_DMA_Start_IT+0x354>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_Start_IT+0x356>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01a      	beq.n	8003c10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a37      	ldr	r2, [pc, #220]	; (8003cf4 <HAL_DMA_Start_IT+0x474>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d04a      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a36      	ldr	r2, [pc, #216]	; (8003cf8 <HAL_DMA_Start_IT+0x478>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d045      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <HAL_DMA_Start_IT+0x47c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d040      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a33      	ldr	r2, [pc, #204]	; (8003d00 <HAL_DMA_Start_IT+0x480>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d03b      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <HAL_DMA_Start_IT+0x484>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d036      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a30      	ldr	r2, [pc, #192]	; (8003d08 <HAL_DMA_Start_IT+0x488>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d031      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <HAL_DMA_Start_IT+0x48c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02c      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <HAL_DMA_Start_IT+0x490>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d027      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_DMA_Start_IT+0x494>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d022      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <HAL_DMA_Start_IT+0x498>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d01d      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_DMA_Start_IT+0x49c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <HAL_DMA_Start_IT+0x4a0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <HAL_DMA_Start_IT+0x4a4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <HAL_DMA_Start_IT+0x4a8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_DMA_Start_IT+0x4ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x430>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <HAL_DMA_Start_IT+0x4b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <HAL_DMA_Start_IT+0x442>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e012      	b.n	8003ce8 <HAL_DMA_Start_IT+0x468>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e009      	b.n	8003ce8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	40020028 	.word	0x40020028
 8003cfc:	40020040 	.word	0x40020040
 8003d00:	40020058 	.word	0x40020058
 8003d04:	40020070 	.word	0x40020070
 8003d08:	40020088 	.word	0x40020088
 8003d0c:	400200a0 	.word	0x400200a0
 8003d10:	400200b8 	.word	0x400200b8
 8003d14:	40020410 	.word	0x40020410
 8003d18:	40020428 	.word	0x40020428
 8003d1c:	40020440 	.word	0x40020440
 8003d20:	40020458 	.word	0x40020458
 8003d24:	40020470 	.word	0x40020470
 8003d28:	40020488 	.word	0x40020488
 8003d2c:	400204a0 	.word	0x400204a0
 8003d30:	400204b8 	.word	0x400204b8
 8003d34:	58025408 	.word	0x58025408
 8003d38:	5802541c 	.word	0x5802541c
 8003d3c:	58025430 	.word	0x58025430
 8003d40:	58025444 	.word	0x58025444
 8003d44:	58025458 	.word	0x58025458
 8003d48:	5802546c 	.word	0x5802546c
 8003d4c:	58025480 	.word	0x58025480
 8003d50:	58025494 	.word	0x58025494

08003d54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d60:	4b67      	ldr	r3, [pc, #412]	; (8003f00 <HAL_DMA_IRQHandler+0x1ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a67      	ldr	r2, [pc, #412]	; (8003f04 <HAL_DMA_IRQHandler+0x1b0>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0a9b      	lsrs	r3, r3, #10
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5f      	ldr	r2, [pc, #380]	; (8003f08 <HAL_DMA_IRQHandler+0x1b4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04a      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5d      	ldr	r2, [pc, #372]	; (8003f0c <HAL_DMA_IRQHandler+0x1b8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d045      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5c      	ldr	r2, [pc, #368]	; (8003f10 <HAL_DMA_IRQHandler+0x1bc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a5a      	ldr	r2, [pc, #360]	; (8003f14 <HAL_DMA_IRQHandler+0x1c0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a59      	ldr	r2, [pc, #356]	; (8003f18 <HAL_DMA_IRQHandler+0x1c4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d036      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a57      	ldr	r2, [pc, #348]	; (8003f1c <HAL_DMA_IRQHandler+0x1c8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d031      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a56      	ldr	r2, [pc, #344]	; (8003f20 <HAL_DMA_IRQHandler+0x1cc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d02c      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a54      	ldr	r2, [pc, #336]	; (8003f24 <HAL_DMA_IRQHandler+0x1d0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d027      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a53      	ldr	r2, [pc, #332]	; (8003f28 <HAL_DMA_IRQHandler+0x1d4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a51      	ldr	r2, [pc, #324]	; (8003f2c <HAL_DMA_IRQHandler+0x1d8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a50      	ldr	r2, [pc, #320]	; (8003f30 <HAL_DMA_IRQHandler+0x1dc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4e      	ldr	r2, [pc, #312]	; (8003f34 <HAL_DMA_IRQHandler+0x1e0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4d      	ldr	r2, [pc, #308]	; (8003f38 <HAL_DMA_IRQHandler+0x1e4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_DMA_IRQHandler+0x1e8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4a      	ldr	r2, [pc, #296]	; (8003f40 <HAL_DMA_IRQHandler+0x1ec>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xd2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a48      	ldr	r2, [pc, #288]	; (8003f44 <HAL_DMA_IRQHandler+0x1f0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_DMA_IRQHandler+0xd6>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_DMA_IRQHandler+0xd8>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 842b 	beq.w	8004688 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80a2 	beq.w	8003f8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2e      	ldr	r2, [pc, #184]	; (8003f08 <HAL_DMA_IRQHandler+0x1b4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04a      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_DMA_IRQHandler+0x1b8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d045      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2b      	ldr	r2, [pc, #172]	; (8003f10 <HAL_DMA_IRQHandler+0x1bc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d040      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <HAL_DMA_IRQHandler+0x1c0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d03b      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <HAL_DMA_IRQHandler+0x1c4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d036      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <HAL_DMA_IRQHandler+0x1c8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d031      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <HAL_DMA_IRQHandler+0x1cc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <HAL_DMA_IRQHandler+0x1d0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d027      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <HAL_DMA_IRQHandler+0x1d4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <HAL_DMA_IRQHandler+0x1d8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <HAL_DMA_IRQHandler+0x1dc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <HAL_DMA_IRQHandler+0x1e0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_DMA_IRQHandler+0x1e4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_DMA_IRQHandler+0x1e8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <HAL_DMA_IRQHandler+0x1ec>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x194>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_DMA_IRQHandler+0x1f0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d12f      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x1f4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	e02e      	b.n	8003f5c <HAL_DMA_IRQHandler+0x208>
 8003efe:	bf00      	nop
 8003f00:	24000004 	.word	0x24000004
 8003f04:	1b4e81b5 	.word	0x1b4e81b5
 8003f08:	40020010 	.word	0x40020010
 8003f0c:	40020028 	.word	0x40020028
 8003f10:	40020040 	.word	0x40020040
 8003f14:	40020058 	.word	0x40020058
 8003f18:	40020070 	.word	0x40020070
 8003f1c:	40020088 	.word	0x40020088
 8003f20:	400200a0 	.word	0x400200a0
 8003f24:	400200b8 	.word	0x400200b8
 8003f28:	40020410 	.word	0x40020410
 8003f2c:	40020428 	.word	0x40020428
 8003f30:	40020440 	.word	0x40020440
 8003f34:	40020458 	.word	0x40020458
 8003f38:	40020470 	.word	0x40020470
 8003f3c:	40020488 	.word	0x40020488
 8003f40:	400204a0 	.word	0x400204a0
 8003f44:	400204b8 	.word	0x400204b8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2208      	movs	r2, #8
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d06e      	beq.n	8004080 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a69      	ldr	r2, [pc, #420]	; (800414c <HAL_DMA_IRQHandler+0x3f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a67      	ldr	r2, [pc, #412]	; (8004150 <HAL_DMA_IRQHandler+0x3fc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a66      	ldr	r2, [pc, #408]	; (8004154 <HAL_DMA_IRQHandler+0x400>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a64      	ldr	r2, [pc, #400]	; (8004158 <HAL_DMA_IRQHandler+0x404>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a63      	ldr	r2, [pc, #396]	; (800415c <HAL_DMA_IRQHandler+0x408>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a61      	ldr	r2, [pc, #388]	; (8004160 <HAL_DMA_IRQHandler+0x40c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a60      	ldr	r2, [pc, #384]	; (8004164 <HAL_DMA_IRQHandler+0x410>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5e      	ldr	r2, [pc, #376]	; (8004168 <HAL_DMA_IRQHandler+0x414>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5d      	ldr	r2, [pc, #372]	; (800416c <HAL_DMA_IRQHandler+0x418>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5b      	ldr	r2, [pc, #364]	; (8004170 <HAL_DMA_IRQHandler+0x41c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5a      	ldr	r2, [pc, #360]	; (8004174 <HAL_DMA_IRQHandler+0x420>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_DMA_IRQHandler+0x424>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a57      	ldr	r2, [pc, #348]	; (800417c <HAL_DMA_IRQHandler+0x428>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a55      	ldr	r2, [pc, #340]	; (8004180 <HAL_DMA_IRQHandler+0x42c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a54      	ldr	r2, [pc, #336]	; (8004184 <HAL_DMA_IRQHandler+0x430>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0x2ee>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a52      	ldr	r2, [pc, #328]	; (8004188 <HAL_DMA_IRQHandler+0x434>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10a      	bne.n	8004058 <HAL_DMA_IRQHandler+0x304>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e003      	b.n	8004060 <HAL_DMA_IRQHandler+0x30c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f043 0202 	orr.w	r2, r3, #2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2204      	movs	r2, #4
 800408a:	409a      	lsls	r2, r3
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 808f 	beq.w	80041b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2c      	ldr	r2, [pc, #176]	; (800414c <HAL_DMA_IRQHandler+0x3f8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d04a      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2a      	ldr	r2, [pc, #168]	; (8004150 <HAL_DMA_IRQHandler+0x3fc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d045      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a29      	ldr	r2, [pc, #164]	; (8004154 <HAL_DMA_IRQHandler+0x400>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d040      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <HAL_DMA_IRQHandler+0x404>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d03b      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a26      	ldr	r2, [pc, #152]	; (800415c <HAL_DMA_IRQHandler+0x408>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d036      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <HAL_DMA_IRQHandler+0x40c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d031      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_DMA_IRQHandler+0x410>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d02c      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_DMA_IRQHandler+0x414>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d027      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a20      	ldr	r2, [pc, #128]	; (800416c <HAL_DMA_IRQHandler+0x418>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d022      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_DMA_IRQHandler+0x41c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01d      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_DMA_IRQHandler+0x420>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d018      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_DMA_IRQHandler+0x424>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_DMA_IRQHandler+0x428>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_DMA_IRQHandler+0x42c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_DMA_IRQHandler+0x430>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_DMA_IRQHandler+0x3e2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a15      	ldr	r2, [pc, #84]	; (8004188 <HAL_DMA_IRQHandler+0x434>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d12a      	bne.n	800418c <HAL_DMA_IRQHandler+0x438>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e023      	b.n	8004194 <HAL_DMA_IRQHandler+0x440>
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2204      	movs	r2, #4
 80041a2:	409a      	lsls	r2, r3
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2210      	movs	r2, #16
 80041be:	409a      	lsls	r2, r3
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80a6 	beq.w	8004316 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a85      	ldr	r2, [pc, #532]	; (80043e4 <HAL_DMA_IRQHandler+0x690>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d04a      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a83      	ldr	r2, [pc, #524]	; (80043e8 <HAL_DMA_IRQHandler+0x694>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d045      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a82      	ldr	r2, [pc, #520]	; (80043ec <HAL_DMA_IRQHandler+0x698>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d040      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a80      	ldr	r2, [pc, #512]	; (80043f0 <HAL_DMA_IRQHandler+0x69c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d03b      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7f      	ldr	r2, [pc, #508]	; (80043f4 <HAL_DMA_IRQHandler+0x6a0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d036      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a7d      	ldr	r2, [pc, #500]	; (80043f8 <HAL_DMA_IRQHandler+0x6a4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d031      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7c      	ldr	r2, [pc, #496]	; (80043fc <HAL_DMA_IRQHandler+0x6a8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d02c      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a7a      	ldr	r2, [pc, #488]	; (8004400 <HAL_DMA_IRQHandler+0x6ac>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d027      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a79      	ldr	r2, [pc, #484]	; (8004404 <HAL_DMA_IRQHandler+0x6b0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_DMA_IRQHandler+0x6b4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01d      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a76      	ldr	r2, [pc, #472]	; (800440c <HAL_DMA_IRQHandler+0x6b8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a74      	ldr	r2, [pc, #464]	; (8004410 <HAL_DMA_IRQHandler+0x6bc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a73      	ldr	r2, [pc, #460]	; (8004414 <HAL_DMA_IRQHandler+0x6c0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a71      	ldr	r2, [pc, #452]	; (8004418 <HAL_DMA_IRQHandler+0x6c4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a70      	ldr	r2, [pc, #448]	; (800441c <HAL_DMA_IRQHandler+0x6c8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_DMA_IRQHandler+0x516>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6e      	ldr	r2, [pc, #440]	; (8004420 <HAL_DMA_IRQHandler+0x6cc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10a      	bne.n	8004280 <HAL_DMA_IRQHandler+0x52c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e009      	b.n	8004294 <HAL_DMA_IRQHandler+0x540>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d03e      	beq.n	8004316 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2210      	movs	r2, #16
 80042a2:	409a      	lsls	r2, r3
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d018      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d108      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d024      	beq.n	8004316 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
 80042d4:	e01f      	b.n	8004316 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01b      	beq.n	8004316 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
 80042e6:	e016      	b.n	8004316 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0208 	bic.w	r2, r2, #8
 8004304:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2220      	movs	r2, #32
 8004320:	409a      	lsls	r2, r3
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8110 	beq.w	800454c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <HAL_DMA_IRQHandler+0x690>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d04a      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <HAL_DMA_IRQHandler+0x694>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d045      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a29      	ldr	r2, [pc, #164]	; (80043ec <HAL_DMA_IRQHandler+0x698>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d040      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <HAL_DMA_IRQHandler+0x69c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d03b      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_DMA_IRQHandler+0x6a0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d036      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_DMA_IRQHandler+0x6a4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d031      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <HAL_DMA_IRQHandler+0x6a8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_DMA_IRQHandler+0x6ac>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d027      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_DMA_IRQHandler+0x6b0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d022      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_DMA_IRQHandler+0x6b4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d01d      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_DMA_IRQHandler+0x6b8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <HAL_DMA_IRQHandler+0x6bc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_DMA_IRQHandler+0x6c0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_DMA_IRQHandler+0x6c4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a17      	ldr	r2, [pc, #92]	; (800441c <HAL_DMA_IRQHandler+0x6c8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_DMA_IRQHandler+0x678>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_DMA_IRQHandler+0x6cc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d12b      	bne.n	8004424 <HAL_DMA_IRQHandler+0x6d0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e02a      	b.n	8004438 <HAL_DMA_IRQHandler+0x6e4>
 80043e2:	bf00      	nop
 80043e4:	40020010 	.word	0x40020010
 80043e8:	40020028 	.word	0x40020028
 80043ec:	40020040 	.word	0x40020040
 80043f0:	40020058 	.word	0x40020058
 80043f4:	40020070 	.word	0x40020070
 80043f8:	40020088 	.word	0x40020088
 80043fc:	400200a0 	.word	0x400200a0
 8004400:	400200b8 	.word	0x400200b8
 8004404:	40020410 	.word	0x40020410
 8004408:	40020428 	.word	0x40020428
 800440c:	40020440 	.word	0x40020440
 8004410:	40020458 	.word	0x40020458
 8004414:	40020470 	.word	0x40020470
 8004418:	40020488 	.word	0x40020488
 800441c:	400204a0 	.word	0x400204a0
 8004420:	400204b8 	.word	0x400204b8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8087 	beq.w	800454c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2220      	movs	r2, #32
 8004448:	409a      	lsls	r2, r3
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b04      	cmp	r3, #4
 8004458:	d139      	bne.n	80044ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0216 	bic.w	r2, r2, #22
 8004468:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004478:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <HAL_DMA_IRQHandler+0x736>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0208 	bic.w	r2, r2, #8
 8004498:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	223f      	movs	r2, #63	; 0x3f
 80044a4:	409a      	lsls	r2, r3
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 834a 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
          }
          return;
 80044cc:	e344      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02c      	beq.n	800454c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
 80044fa:	e027      	b.n	800454c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d023      	beq.n	800454c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
 800450c:	e01e      	b.n	800454c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10f      	bne.n	800453c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0210 	bic.w	r2, r2, #16
 800452a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8306 	beq.w	8004b62 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8088 	beq.w	8004674 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2204      	movs	r2, #4
 8004568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7a      	ldr	r2, [pc, #488]	; (800475c <HAL_DMA_IRQHandler+0xa08>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d04a      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a79      	ldr	r2, [pc, #484]	; (8004760 <HAL_DMA_IRQHandler+0xa0c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d045      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a77      	ldr	r2, [pc, #476]	; (8004764 <HAL_DMA_IRQHandler+0xa10>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d040      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_DMA_IRQHandler+0xa14>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d03b      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a74      	ldr	r2, [pc, #464]	; (800476c <HAL_DMA_IRQHandler+0xa18>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d036      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a73      	ldr	r2, [pc, #460]	; (8004770 <HAL_DMA_IRQHandler+0xa1c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d031      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a71      	ldr	r2, [pc, #452]	; (8004774 <HAL_DMA_IRQHandler+0xa20>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02c      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a70      	ldr	r2, [pc, #448]	; (8004778 <HAL_DMA_IRQHandler+0xa24>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d027      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6e      	ldr	r2, [pc, #440]	; (800477c <HAL_DMA_IRQHandler+0xa28>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6d      	ldr	r2, [pc, #436]	; (8004780 <HAL_DMA_IRQHandler+0xa2c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01d      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6b      	ldr	r2, [pc, #428]	; (8004784 <HAL_DMA_IRQHandler+0xa30>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6a      	ldr	r2, [pc, #424]	; (8004788 <HAL_DMA_IRQHandler+0xa34>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a68      	ldr	r2, [pc, #416]	; (800478c <HAL_DMA_IRQHandler+0xa38>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a67      	ldr	r2, [pc, #412]	; (8004790 <HAL_DMA_IRQHandler+0xa3c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	; (8004794 <HAL_DMA_IRQHandler+0xa40>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_DMA_IRQHandler+0x8b8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a64      	ldr	r2, [pc, #400]	; (8004798 <HAL_DMA_IRQHandler+0xa44>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d108      	bne.n	800461e <HAL_DMA_IRQHandler+0x8ca>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e007      	b.n	800462e <HAL_DMA_IRQHandler+0x8da>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	429a      	cmp	r2, r3
 8004638:	d307      	bcc.n	800464a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f2      	bne.n	800462e <HAL_DMA_IRQHandler+0x8da>
 8004648:	e000      	b.n	800464c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800464a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004662:	e003      	b.n	800466c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8272 	beq.w	8004b62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
 8004686:	e26c      	b.n	8004b62 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_DMA_IRQHandler+0xa48>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d022      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a42      	ldr	r2, [pc, #264]	; (80047a0 <HAL_DMA_IRQHandler+0xa4c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d01d      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <HAL_DMA_IRQHandler+0xa50>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d018      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <HAL_DMA_IRQHandler+0xa54>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <HAL_DMA_IRQHandler+0xa58>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3c      	ldr	r2, [pc, #240]	; (80047b0 <HAL_DMA_IRQHandler+0xa5c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <HAL_DMA_IRQHandler+0xa60>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x984>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a39      	ldr	r2, [pc, #228]	; (80047b8 <HAL_DMA_IRQHandler+0xa64>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_IRQHandler+0x988>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_DMA_IRQHandler+0x98a>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 823f 	beq.w	8004b62 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2204      	movs	r2, #4
 80046f6:	409a      	lsls	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80cd 	beq.w	800489c <HAL_DMA_IRQHandler+0xb48>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80c7 	beq.w	800489c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2204      	movs	r2, #4
 8004718:	409a      	lsls	r2, r3
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d049      	beq.n	80047bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8210 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004744:	e20a      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8206 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004758:	e200      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe08>
 800475a:	bf00      	nop
 800475c:	40020010 	.word	0x40020010
 8004760:	40020028 	.word	0x40020028
 8004764:	40020040 	.word	0x40020040
 8004768:	40020058 	.word	0x40020058
 800476c:	40020070 	.word	0x40020070
 8004770:	40020088 	.word	0x40020088
 8004774:	400200a0 	.word	0x400200a0
 8004778:	400200b8 	.word	0x400200b8
 800477c:	40020410 	.word	0x40020410
 8004780:	40020428 	.word	0x40020428
 8004784:	40020440 	.word	0x40020440
 8004788:	40020458 	.word	0x40020458
 800478c:	40020470 	.word	0x40020470
 8004790:	40020488 	.word	0x40020488
 8004794:	400204a0 	.word	0x400204a0
 8004798:	400204b8 	.word	0x400204b8
 800479c:	58025408 	.word	0x58025408
 80047a0:	5802541c 	.word	0x5802541c
 80047a4:	58025430 	.word	0x58025430
 80047a8:	58025444 	.word	0x58025444
 80047ac:	58025458 	.word	0x58025458
 80047b0:	5802546c 	.word	0x5802546c
 80047b4:	58025480 	.word	0x58025480
 80047b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d160      	bne.n	8004888 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7f      	ldr	r2, [pc, #508]	; (80049c8 <HAL_DMA_IRQHandler+0xc74>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7d      	ldr	r2, [pc, #500]	; (80049cc <HAL_DMA_IRQHandler+0xc78>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_DMA_IRQHandler+0xc7c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7a      	ldr	r2, [pc, #488]	; (80049d4 <HAL_DMA_IRQHandler+0xc80>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	; (80049d8 <HAL_DMA_IRQHandler+0xc84>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a77      	ldr	r2, [pc, #476]	; (80049dc <HAL_DMA_IRQHandler+0xc88>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a76      	ldr	r2, [pc, #472]	; (80049e0 <HAL_DMA_IRQHandler+0xc8c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a74      	ldr	r2, [pc, #464]	; (80049e4 <HAL_DMA_IRQHandler+0xc90>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a73      	ldr	r2, [pc, #460]	; (80049e8 <HAL_DMA_IRQHandler+0xc94>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a71      	ldr	r2, [pc, #452]	; (80049ec <HAL_DMA_IRQHandler+0xc98>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a70      	ldr	r2, [pc, #448]	; (80049f0 <HAL_DMA_IRQHandler+0xc9c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6e      	ldr	r2, [pc, #440]	; (80049f4 <HAL_DMA_IRQHandler+0xca0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6d      	ldr	r2, [pc, #436]	; (80049f8 <HAL_DMA_IRQHandler+0xca4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a6b      	ldr	r2, [pc, #428]	; (80049fc <HAL_DMA_IRQHandler+0xca8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6a      	ldr	r2, [pc, #424]	; (8004a00 <HAL_DMA_IRQHandler+0xcac>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_DMA_IRQHandler+0xb12>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a68      	ldr	r2, [pc, #416]	; (8004a04 <HAL_DMA_IRQHandler+0xcb0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <HAL_DMA_IRQHandler+0xb24>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0208 	bic.w	r2, r2, #8
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e007      	b.n	8004888 <HAL_DMA_IRQHandler+0xb34>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0204 	bic.w	r2, r2, #4
 8004886:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8165 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489a:	e15f      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2202      	movs	r2, #2
 80048a6:	409a      	lsls	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80c5 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xce8>
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80bf 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2202      	movs	r2, #2
 80048c8:	409a      	lsls	r2, r3
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 813a 	beq.w	8004b60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f4:	e134      	b.n	8004b60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8130 	beq.w	8004b60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004908:	e12a      	b.n	8004b60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	f040 8089 	bne.w	8004a28 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <HAL_DMA_IRQHandler+0xc74>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d04a      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <HAL_DMA_IRQHandler+0xc78>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d045      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <HAL_DMA_IRQHandler+0xc7c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d040      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_DMA_IRQHandler+0xc80>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d03b      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <HAL_DMA_IRQHandler+0xc84>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d036      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_DMA_IRQHandler+0xc88>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_DMA_IRQHandler+0xc8c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_DMA_IRQHandler+0xc90>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d027      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_DMA_IRQHandler+0xc94>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_DMA_IRQHandler+0xc98>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_DMA_IRQHandler+0xc9c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_DMA_IRQHandler+0xca0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_DMA_IRQHandler+0xca4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <HAL_DMA_IRQHandler+0xca8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <HAL_DMA_IRQHandler+0xcac>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xc62>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_DMA_IRQHandler+0xcb0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d128      	bne.n	8004a08 <HAL_DMA_IRQHandler+0xcb4>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0214 	bic.w	r2, r2, #20
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e027      	b.n	8004a18 <HAL_DMA_IRQHandler+0xcc4>
 80049c8:	40020010 	.word	0x40020010
 80049cc:	40020028 	.word	0x40020028
 80049d0:	40020040 	.word	0x40020040
 80049d4:	40020058 	.word	0x40020058
 80049d8:	40020070 	.word	0x40020070
 80049dc:	40020088 	.word	0x40020088
 80049e0:	400200a0 	.word	0x400200a0
 80049e4:	400200b8 	.word	0x400200b8
 80049e8:	40020410 	.word	0x40020410
 80049ec:	40020428 	.word	0x40020428
 80049f0:	40020440 	.word	0x40020440
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020470 	.word	0x40020470
 80049fc:	40020488 	.word	0x40020488
 8004a00:	400204a0 	.word	0x400204a0
 8004a04:	400204b8 	.word	0x400204b8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 020a 	bic.w	r2, r2, #10
 8004a16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8097 	beq.w	8004b60 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3a:	e091      	b.n	8004b60 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2208      	movs	r2, #8
 8004a46:	409a      	lsls	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8088 	beq.w	8004b62 <HAL_DMA_IRQHandler+0xe0e>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8082 	beq.w	8004b62 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a41      	ldr	r2, [pc, #260]	; (8004b68 <HAL_DMA_IRQHandler+0xe14>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d04a      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <HAL_DMA_IRQHandler+0xe18>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d045      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3e      	ldr	r2, [pc, #248]	; (8004b70 <HAL_DMA_IRQHandler+0xe1c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d040      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3c      	ldr	r2, [pc, #240]	; (8004b74 <HAL_DMA_IRQHandler+0xe20>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d03b      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3b      	ldr	r2, [pc, #236]	; (8004b78 <HAL_DMA_IRQHandler+0xe24>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d036      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a39      	ldr	r2, [pc, #228]	; (8004b7c <HAL_DMA_IRQHandler+0xe28>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d031      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a38      	ldr	r2, [pc, #224]	; (8004b80 <HAL_DMA_IRQHandler+0xe2c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d02c      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a36      	ldr	r2, [pc, #216]	; (8004b84 <HAL_DMA_IRQHandler+0xe30>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d027      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a35      	ldr	r2, [pc, #212]	; (8004b88 <HAL_DMA_IRQHandler+0xe34>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a33      	ldr	r2, [pc, #204]	; (8004b8c <HAL_DMA_IRQHandler+0xe38>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01d      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a32      	ldr	r2, [pc, #200]	; (8004b90 <HAL_DMA_IRQHandler+0xe3c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a30      	ldr	r2, [pc, #192]	; (8004b94 <HAL_DMA_IRQHandler+0xe40>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <HAL_DMA_IRQHandler+0xe44>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2d      	ldr	r2, [pc, #180]	; (8004b9c <HAL_DMA_IRQHandler+0xe48>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <HAL_DMA_IRQHandler+0xe4c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_DMA_IRQHandler+0xdaa>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <HAL_DMA_IRQHandler+0xe50>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d108      	bne.n	8004b10 <HAL_DMA_IRQHandler+0xdbc>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 021c 	bic.w	r2, r2, #28
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e007      	b.n	8004b20 <HAL_DMA_IRQHandler+0xdcc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 020e 	bic.w	r2, r2, #14
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2201      	movs	r2, #1
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e004      	b.n	8004b62 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b62:	3728      	adds	r7, #40	; 0x28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40020010 	.word	0x40020010
 8004b6c:	40020028 	.word	0x40020028
 8004b70:	40020040 	.word	0x40020040
 8004b74:	40020058 	.word	0x40020058
 8004b78:	40020070 	.word	0x40020070
 8004b7c:	40020088 	.word	0x40020088
 8004b80:	400200a0 	.word	0x400200a0
 8004b84:	400200b8 	.word	0x400200b8
 8004b88:	40020410 	.word	0x40020410
 8004b8c:	40020428 	.word	0x40020428
 8004b90:	40020440 	.word	0x40020440
 8004b94:	40020458 	.word	0x40020458
 8004b98:	40020470 	.word	0x40020470
 8004b9c:	40020488 	.word	0x40020488
 8004ba0:	400204a0 	.word	0x400204a0
 8004ba4:	400204b8 	.word	0x400204b8

08004ba8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7f      	ldr	r2, [pc, #508]	; (8004dc4 <DMA_SetConfig+0x21c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d072      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a7d      	ldr	r2, [pc, #500]	; (8004dc8 <DMA_SetConfig+0x220>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d06d      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7c      	ldr	r2, [pc, #496]	; (8004dcc <DMA_SetConfig+0x224>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d068      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a7a      	ldr	r2, [pc, #488]	; (8004dd0 <DMA_SetConfig+0x228>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d063      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a79      	ldr	r2, [pc, #484]	; (8004dd4 <DMA_SetConfig+0x22c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d05e      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a77      	ldr	r2, [pc, #476]	; (8004dd8 <DMA_SetConfig+0x230>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d059      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a76      	ldr	r2, [pc, #472]	; (8004ddc <DMA_SetConfig+0x234>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d054      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a74      	ldr	r2, [pc, #464]	; (8004de0 <DMA_SetConfig+0x238>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d04f      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <DMA_SetConfig+0x23c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d04a      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a71      	ldr	r2, [pc, #452]	; (8004de8 <DMA_SetConfig+0x240>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d045      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a70      	ldr	r2, [pc, #448]	; (8004dec <DMA_SetConfig+0x244>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d040      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <DMA_SetConfig+0x248>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d03b      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	; (8004df4 <DMA_SetConfig+0x24c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d036      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6b      	ldr	r2, [pc, #428]	; (8004df8 <DMA_SetConfig+0x250>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d031      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6a      	ldr	r2, [pc, #424]	; (8004dfc <DMA_SetConfig+0x254>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d02c      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <DMA_SetConfig+0x258>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d027      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <DMA_SetConfig+0x25c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d022      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <DMA_SetConfig+0x260>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a64      	ldr	r2, [pc, #400]	; (8004e0c <DMA_SetConfig+0x264>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a62      	ldr	r2, [pc, #392]	; (8004e10 <DMA_SetConfig+0x268>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a61      	ldr	r2, [pc, #388]	; (8004e14 <DMA_SetConfig+0x26c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5f      	ldr	r2, [pc, #380]	; (8004e18 <DMA_SetConfig+0x270>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a5e      	ldr	r2, [pc, #376]	; (8004e1c <DMA_SetConfig+0x274>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <DMA_SetConfig+0x10a>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a5c      	ldr	r2, [pc, #368]	; (8004e20 <DMA_SetConfig+0x278>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <DMA_SetConfig+0x10e>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <DMA_SetConfig+0x110>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004cd6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a39      	ldr	r2, [pc, #228]	; (8004dc4 <DMA_SetConfig+0x21c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04a      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <DMA_SetConfig+0x220>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d045      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a36      	ldr	r2, [pc, #216]	; (8004dcc <DMA_SetConfig+0x224>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d040      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <DMA_SetConfig+0x228>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d03b      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a33      	ldr	r2, [pc, #204]	; (8004dd4 <DMA_SetConfig+0x22c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d036      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <DMA_SetConfig+0x230>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d031      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <DMA_SetConfig+0x234>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <DMA_SetConfig+0x238>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d027      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	; (8004de4 <DMA_SetConfig+0x23c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <DMA_SetConfig+0x240>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d01d      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <DMA_SetConfig+0x244>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <DMA_SetConfig+0x248>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <DMA_SetConfig+0x24c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <DMA_SetConfig+0x250>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <DMA_SetConfig+0x254>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <DMA_SetConfig+0x1d0>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <DMA_SetConfig+0x258>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <DMA_SetConfig+0x1d4>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <DMA_SetConfig+0x1d6>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d059      	beq.n	8004e36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	223f      	movs	r2, #63	; 0x3f
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d138      	bne.n	8004e24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dc2:	e086      	b.n	8004ed2 <DMA_SetConfig+0x32a>
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]
}
 8004e34:	e04d      	b.n	8004ed2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <DMA_SetConfig+0x338>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <DMA_SetConfig+0x33c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a26      	ldr	r2, [pc, #152]	; (8004ee8 <DMA_SetConfig+0x340>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a24      	ldr	r2, [pc, #144]	; (8004eec <DMA_SetConfig+0x344>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a23      	ldr	r2, [pc, #140]	; (8004ef0 <DMA_SetConfig+0x348>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <DMA_SetConfig+0x34c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <DMA_SetConfig+0x350>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <DMA_SetConfig+0x2de>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <DMA_SetConfig+0x354>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <DMA_SetConfig+0x2e2>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <DMA_SetConfig+0x2e4>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d108      	bne.n	8004ec2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	60da      	str	r2, [r3, #12]
}
 8004ec0:	e007      	b.n	8004ed2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	58025408 	.word	0x58025408
 8004ee4:	5802541c 	.word	0x5802541c
 8004ee8:	58025430 	.word	0x58025430
 8004eec:	58025444 	.word	0x58025444
 8004ef0:	58025458 	.word	0x58025458
 8004ef4:	5802546c 	.word	0x5802546c
 8004ef8:	58025480 	.word	0x58025480
 8004efc:	58025494 	.word	0x58025494

08004f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a42      	ldr	r2, [pc, #264]	; (8005018 <DMA_CalcBaseAndBitshift+0x118>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04a      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a41      	ldr	r2, [pc, #260]	; (800501c <DMA_CalcBaseAndBitshift+0x11c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d045      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3f      	ldr	r2, [pc, #252]	; (8005020 <DMA_CalcBaseAndBitshift+0x120>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3e      	ldr	r2, [pc, #248]	; (8005024 <DMA_CalcBaseAndBitshift+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3c      	ldr	r2, [pc, #240]	; (8005028 <DMA_CalcBaseAndBitshift+0x128>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d036      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3b      	ldr	r2, [pc, #236]	; (800502c <DMA_CalcBaseAndBitshift+0x12c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d031      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a39      	ldr	r2, [pc, #228]	; (8005030 <DMA_CalcBaseAndBitshift+0x130>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02c      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a38      	ldr	r2, [pc, #224]	; (8005034 <DMA_CalcBaseAndBitshift+0x134>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d027      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a36      	ldr	r2, [pc, #216]	; (8005038 <DMA_CalcBaseAndBitshift+0x138>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a35      	ldr	r2, [pc, #212]	; (800503c <DMA_CalcBaseAndBitshift+0x13c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a33      	ldr	r2, [pc, #204]	; (8005040 <DMA_CalcBaseAndBitshift+0x140>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a32      	ldr	r2, [pc, #200]	; (8005044 <DMA_CalcBaseAndBitshift+0x144>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a30      	ldr	r2, [pc, #192]	; (8005048 <DMA_CalcBaseAndBitshift+0x148>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2f      	ldr	r2, [pc, #188]	; (800504c <DMA_CalcBaseAndBitshift+0x14c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <DMA_CalcBaseAndBitshift+0x150>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <DMA_CalcBaseAndBitshift+0x154>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <DMA_CalcBaseAndBitshift+0xac>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <DMA_CalcBaseAndBitshift+0xae>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d024      	beq.n	8004ffc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3b10      	subs	r3, #16
 8004fba:	4a27      	ldr	r2, [pc, #156]	; (8005058 <DMA_CalcBaseAndBitshift+0x158>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	4a24      	ldr	r2, [pc, #144]	; (800505c <DMA_CalcBaseAndBitshift+0x15c>)
 8004fcc:	5cd3      	ldrb	r3, [r2, r3]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d908      	bls.n	8004fec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <DMA_CalcBaseAndBitshift+0x160>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	659a      	str	r2, [r3, #88]	; 0x58
 8004fea:	e00d      	b.n	8005008 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <DMA_CalcBaseAndBitshift+0x160>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffa:	e005      	b.n	8005008 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8
 8005058:	aaaaaaab 	.word	0xaaaaaaab
 800505c:	08012704 	.word	0x08012704
 8005060:	fffffc00 	.word	0xfffffc00

08005064 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d120      	bne.n	80050ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	2b03      	cmp	r3, #3
 800507e:	d858      	bhi.n	8005132 <DMA_CheckFifoParam+0xce>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <DMA_CheckFifoParam+0x24>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	08005099 	.word	0x08005099
 800508c:	080050ab 	.word	0x080050ab
 8005090:	08005099 	.word	0x08005099
 8005094:	08005133 	.word	0x08005133
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d048      	beq.n	8005136 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050a8:	e045      	b.n	8005136 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050b2:	d142      	bne.n	800513a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b8:	e03f      	b.n	800513a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c2:	d123      	bne.n	800510c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d838      	bhi.n	800513e <DMA_CheckFifoParam+0xda>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <DMA_CheckFifoParam+0x70>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050eb 	.word	0x080050eb
 80050dc:	080050e5 	.word	0x080050e5
 80050e0:	080050fd 	.word	0x080050fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
        break;
 80050e8:	e030      	b.n	800514c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d025      	beq.n	8005142 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050fa:	e022      	b.n	8005142 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005104:	d11f      	bne.n	8005146 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800510a:	e01c      	b.n	8005146 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	2b02      	cmp	r3, #2
 8005112:	d902      	bls.n	800511a <DMA_CheckFifoParam+0xb6>
 8005114:	2b03      	cmp	r3, #3
 8005116:	d003      	beq.n	8005120 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005118:	e018      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	73fb      	strb	r3, [r7, #15]
        break;
 800511e:	e015      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
    break;
 8005130:	e00b      	b.n	800514a <DMA_CheckFifoParam+0xe6>
        break;
 8005132:	bf00      	nop
 8005134:	e00a      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        break;
 8005136:	bf00      	nop
 8005138:	e008      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        break;
 800513a:	bf00      	nop
 800513c:	e006      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        break;
 800513e:	bf00      	nop
 8005140:	e004      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <DMA_CheckFifoParam+0xe8>
    break;
 800514a:	bf00      	nop
    }
  }

  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop

0800515c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a38      	ldr	r2, [pc, #224]	; (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a36      	ldr	r2, [pc, #216]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a35      	ldr	r2, [pc, #212]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a33      	ldr	r2, [pc, #204]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a32      	ldr	r2, [pc, #200]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a30      	ldr	r2, [pc, #192]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2d      	ldr	r2, [pc, #180]	; (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01a      	beq.n	80051fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	3b08      	subs	r3, #8
 80051cc:	4a28      	ldr	r2, [pc, #160]	; (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4b26      	ldr	r3, [pc, #152]	; (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a24      	ldr	r2, [pc, #144]	; (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051f8:	e024      	b.n	8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	3b10      	subs	r3, #16
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d806      	bhi.n	8005222 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d902      	bls.n	8005222 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3308      	adds	r3, #8
 8005220:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a16      	ldr	r2, [pc, #88]	; (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005234:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	2201      	movs	r2, #1
 800523e:	409a      	lsls	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	58025408 	.word	0x58025408
 8005254:	5802541c 	.word	0x5802541c
 8005258:	58025430 	.word	0x58025430
 800525c:	58025444 	.word	0x58025444
 8005260:	58025458 	.word	0x58025458
 8005264:	5802546c 	.word	0x5802546c
 8005268:	58025480 	.word	0x58025480
 800526c:	58025494 	.word	0x58025494
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	16009600 	.word	0x16009600
 8005278:	58025880 	.word	0x58025880
 800527c:	aaaaaaab 	.word	0xaaaaaaab
 8005280:	400204b8 	.word	0x400204b8
 8005284:	4002040f 	.word	0x4002040f
 8005288:	10008200 	.word	0x10008200
 800528c:	40020880 	.word	0x40020880

08005290 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d04a      	beq.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d847      	bhi.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a25      	ldr	r2, [pc, #148]	; (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a24      	ldr	r2, [pc, #144]	; (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01d      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a22      	ldr	r2, [pc, #136]	; (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a21      	ldr	r2, [pc, #132]	; (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005300:	2300      	movs	r3, #0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4b17      	ldr	r3, [pc, #92]	; (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005318:	671a      	str	r2, [r3, #112]	; 0x70
 800531a:	e009      	b.n	8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a11      	ldr	r2, [pc, #68]	; (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800532e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	2201      	movs	r2, #1
 8005336:	409a      	lsls	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	58025408 	.word	0x58025408
 800534c:	5802541c 	.word	0x5802541c
 8005350:	58025430 	.word	0x58025430
 8005354:	58025444 	.word	0x58025444
 8005358:	58025458 	.word	0x58025458
 800535c:	5802546c 	.word	0x5802546c
 8005360:	58025480 	.word	0x58025480
 8005364:	58025494 	.word	0x58025494
 8005368:	1600963f 	.word	0x1600963f
 800536c:	58025940 	.word	0x58025940
 8005370:	1000823f 	.word	0x1000823f
 8005374:	40020940 	.word	0x40020940

08005378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005378:	b480      	push	{r7}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005386:	4b89      	ldr	r3, [pc, #548]	; (80055ac <HAL_GPIO_Init+0x234>)
 8005388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800538a:	e194      	b.n	80056b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2101      	movs	r1, #1
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 8186 	beq.w	80056b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d005      	beq.n	80053bc <HAL_GPIO_Init+0x44>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d130      	bne.n	800541e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	2203      	movs	r2, #3
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053f2:	2201      	movs	r2, #1
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0201 	and.w	r2, r3, #1
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4313      	orrs	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b03      	cmp	r3, #3
 8005428:	d017      	beq.n	800545a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d123      	bne.n	80054ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	08da      	lsrs	r2, r3, #3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3208      	adds	r2, #8
 800546e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	220f      	movs	r2, #15
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43db      	mvns	r3, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4313      	orrs	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	08da      	lsrs	r2, r3, #3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3208      	adds	r2, #8
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2203      	movs	r2, #3
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0203 	and.w	r2, r3, #3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80e0 	beq.w	80056b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f0:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_GPIO_Init+0x238>)
 80054f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054f6:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <HAL_GPIO_Init+0x238>)
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <HAL_GPIO_Init+0x238>)
 8005502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800550e:	4a29      	ldr	r2, [pc, #164]	; (80055b4 <HAL_GPIO_Init+0x23c>)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	3302      	adds	r3, #2
 8005516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <HAL_GPIO_Init+0x240>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d052      	beq.n	80055e0 <HAL_GPIO_Init+0x268>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1f      	ldr	r2, [pc, #124]	; (80055bc <HAL_GPIO_Init+0x244>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_GPIO_Init+0x22e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_GPIO_Init+0x248>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d02b      	beq.n	80055a2 <HAL_GPIO_Init+0x22a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <HAL_GPIO_Init+0x24c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d025      	beq.n	800559e <HAL_GPIO_Init+0x226>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <HAL_GPIO_Init+0x250>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <HAL_GPIO_Init+0x222>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_GPIO_Init+0x254>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d019      	beq.n	8005596 <HAL_GPIO_Init+0x21e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <HAL_GPIO_Init+0x258>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_GPIO_Init+0x21a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <HAL_GPIO_Init+0x25c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00d      	beq.n	800558e <HAL_GPIO_Init+0x216>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_GPIO_Init+0x260>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <HAL_GPIO_Init+0x212>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a17      	ldr	r2, [pc, #92]	; (80055dc <HAL_GPIO_Init+0x264>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_GPIO_Init+0x20e>
 8005582:	2309      	movs	r3, #9
 8005584:	e02d      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 8005586:	230a      	movs	r3, #10
 8005588:	e02b      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800558a:	2308      	movs	r3, #8
 800558c:	e029      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800558e:	2307      	movs	r3, #7
 8005590:	e027      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 8005592:	2306      	movs	r3, #6
 8005594:	e025      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 8005596:	2305      	movs	r3, #5
 8005598:	e023      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800559a:	2304      	movs	r3, #4
 800559c:	e021      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 800559e:	2303      	movs	r3, #3
 80055a0:	e01f      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e01d      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e01b      	b.n	80055e2 <HAL_GPIO_Init+0x26a>
 80055aa:	bf00      	nop
 80055ac:	58000080 	.word	0x58000080
 80055b0:	58024400 	.word	0x58024400
 80055b4:	58000400 	.word	0x58000400
 80055b8:	58020000 	.word	0x58020000
 80055bc:	58020400 	.word	0x58020400
 80055c0:	58020800 	.word	0x58020800
 80055c4:	58020c00 	.word	0x58020c00
 80055c8:	58021000 	.word	0x58021000
 80055cc:	58021400 	.word	0x58021400
 80055d0:	58021800 	.word	0x58021800
 80055d4:	58021c00 	.word	0x58021c00
 80055d8:	58022000 	.word	0x58022000
 80055dc:	58022400 	.word	0x58022400
 80055e0:	2300      	movs	r3, #0
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	f002 0203 	and.w	r2, r2, #3
 80055e8:	0092      	lsls	r2, r2, #2
 80055ea:	4093      	lsls	r3, r2
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055f2:	4938      	ldr	r1, [pc, #224]	; (80056d4 <HAL_GPIO_Init+0x35c>)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800562e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f ae63 	bne.w	800538c <HAL_GPIO_Init+0x14>
  }
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	3724      	adds	r7, #36	; 0x24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	58000400 	.word	0x58000400

080056d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
 80056e4:	4613      	mov	r3, r2
 80056e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056e8:	787b      	ldrb	r3, [r7, #1]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056ee:	887a      	ldrh	r2, [r7, #2]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80056f4:	e003      	b.n	80056fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	041a      	lsls	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	619a      	str	r2, [r3, #24]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4013      	ands	r3, r2
 8005722:	041a      	lsls	r2, r3, #16
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43d9      	mvns	r1, r3
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	400b      	ands	r3, r1
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	619a      	str	r2, [r3, #24]
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800573e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005740:	b08f      	sub	sp, #60	; 0x3c
 8005742:	af0a      	add	r7, sp, #40	; 0x28
 8005744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e116      	b.n	800597e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f009 fc96 	bl	800f09c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2203      	movs	r2, #3
 8005774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f005 fdfd 	bl	800b38e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	687e      	ldr	r6, [r7, #4]
 800579c:	466d      	mov	r5, sp
 800579e:	f106 0410 	add.w	r4, r6, #16
 80057a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80057b2:	1d33      	adds	r3, r6, #4
 80057b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057b6:	6838      	ldr	r0, [r7, #0]
 80057b8:	f005 fcc8 	bl	800b14c <USB_CoreInit>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0d7      	b.n	800597e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f005 fdeb 	bl	800b3b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e04a      	b.n	8005876 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057e0:	7bfa      	ldrb	r2, [r7, #15]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	333d      	adds	r3, #61	; 0x3d
 80057f0:	2201      	movs	r2, #1
 80057f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057f4:	7bfa      	ldrb	r2, [r7, #15]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	333c      	adds	r3, #60	; 0x3c
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005808:	7bfa      	ldrb	r2, [r7, #15]
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	b298      	uxth	r0, r3
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	3356      	adds	r3, #86	; 0x56
 800581c:	4602      	mov	r2, r0
 800581e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	3340      	adds	r3, #64	; 0x40
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005834:	7bfa      	ldrb	r2, [r7, #15]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	3344      	adds	r3, #68	; 0x44
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	3348      	adds	r3, #72	; 0x48
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	334c      	adds	r3, #76	; 0x4c
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	3301      	adds	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
 8005876:	7bfa      	ldrb	r2, [r7, #15]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d3af      	bcc.n	80057e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e044      	b.n	8005910 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800589c:	7bfa      	ldrb	r2, [r7, #15]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80058ae:	7bfa      	ldrb	r2, [r7, #15]
 80058b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058b2:	7bfa      	ldrb	r2, [r7, #15]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058c8:	7bfa      	ldrb	r2, [r7, #15]
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058de:	7bfa      	ldrb	r2, [r7, #15]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	3301      	adds	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	429a      	cmp	r2, r3
 8005918:	d3b5      	bcc.n	8005886 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	687e      	ldr	r6, [r7, #4]
 8005922:	466d      	mov	r5, sp
 8005924:	f106 0410 	add.w	r4, r6, #16
 8005928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800592a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800592c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800592e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005934:	e885 0003 	stmia.w	r5, {r0, r1}
 8005938:	1d33      	adds	r3, r6, #4
 800593a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800593c:	6838      	ldr	r0, [r7, #0]
 800593e:	f005 fd83 	bl	800b448 <USB_DevInit>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e014      	b.n	800597e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f96f 	bl	8006c50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f006 fdc5 	bl	800c506 <USB_DevDisconnect>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005986 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_PCD_Start+0x1c>
 800599e:	2302      	movs	r3, #2
 80059a0:	e022      	b.n	80059e8 <HAL_PCD_Start+0x62>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f005 fccc 	bl	800b36c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f006 fd73 	bl	800c4c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b08d      	sub	sp, #52	; 0x34
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f006 fe31 	bl	800c66e <USB_GetMode>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 84b7 	bne.w	8006382 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f006 fd95 	bl	800c548 <USB_ReadInterrupts>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 84ad 	beq.w	8006380 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f006 fd82 	bl	800c548 <USB_ReadInterrupts>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d107      	bne.n	8005a5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 0202 	and.w	r2, r2, #2
 8005a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f006 fd70 	bl	800c548 <USB_ReadInterrupts>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b10      	cmp	r3, #16
 8005a70:	d161      	bne.n	8005b36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0210 	bic.w	r2, r2, #16
 8005a80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f003 020f 	and.w	r2, r3, #15
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	0c5b      	lsrs	r3, r3, #17
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d124      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d035      	beq.n	8005b26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	6a38      	ldr	r0, [r7, #32]
 8005ace:	f006 fba7 	bl	800c220 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ade:	441a      	add	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005af0:	441a      	add	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	615a      	str	r2, [r3, #20]
 8005af6:	e016      	b.n	8005b26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	0c5b      	lsrs	r3, r3, #17
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	d110      	bne.n	8005b26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6a38      	ldr	r0, [r7, #32]
 8005b10:	f006 fb86 	bl	800c220 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b20:	441a      	add	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0210 	orr.w	r2, r2, #16
 8005b34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f006 fd04 	bl	800c548 <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b4a:	f040 80a7 	bne.w	8005c9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f006 fd09 	bl	800c56e <USB_ReadDevAllOutEpInterrupt>
 8005b5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005b5e:	e099      	b.n	8005c94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 808e 	beq.w	8005c88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f006 fd2d 	bl	800c5d6 <USB_ReadDevOutEPInterrupt>
 8005b7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00c      	beq.n	8005ba2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	2301      	movs	r3, #1
 8005b98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fed1 	bl	8006944 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00c      	beq.n	8005bc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2308      	movs	r3, #8
 8005bbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 ffa7 	bl	8006b14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2310      	movs	r3, #16
 8005be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d030      	beq.n	8005c4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d109      	bne.n	8005c0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	4613      	mov	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3304      	adds	r3, #4
 8005c20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	78db      	ldrb	r3, [r3, #3]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d108      	bne.n	8005c3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f009 fb56 	bl	800f2e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	2320      	movs	r3, #32
 8005c68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f47f af62 	bne.w	8005b60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f006 fc51 	bl	800c548 <USB_ReadInterrupts>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cb0:	f040 80db 	bne.w	8005e6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f006 fc72 	bl	800c5a2 <USB_ReadDevAllInEpInterrupt>
 8005cbe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005cc4:	e0cd      	b.n	8005e62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80c2 	beq.w	8005e56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f006 fc98 	bl	800c612 <USB_ReadDevInEPInterrupt>
 8005ce2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d057      	beq.n	8005d9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0e:	4013      	ands	r3, r2
 8005d10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2301      	movs	r3, #1
 8005d22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d132      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	3348      	adds	r3, #72	; 0x48
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4403      	add	r3, r0
 8005d4c:	3344      	adds	r3, #68	; 0x44
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4419      	add	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4403      	add	r3, r0
 8005d60:	3348      	adds	r3, #72	; 0x48
 8005d62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d113      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x3a2>
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	334c      	adds	r3, #76	; 0x4c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d108      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	f006 fca1 	bl	800c6d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f009 fa20 	bl	800f1de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	461a      	mov	r2, r3
 8005db6:	2308      	movs	r3, #8
 8005db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2310      	movs	r3, #16
 8005dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	461a      	mov	r2, r3
 8005dee:	2340      	movs	r3, #64	; 0x40
 8005df0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d023      	beq.n	8005e44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dfe:	6a38      	ldr	r0, [r7, #32]
 8005e00:	f005 fc80 	bl	800b704 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	3338      	adds	r3, #56	; 0x38
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	3304      	adds	r3, #4
 8005e16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	78db      	ldrb	r3, [r3, #3]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d108      	bne.n	8005e32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f009 fa6d 	bl	800f30c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2302      	movs	r3, #2
 8005e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fcea 	bl	800682a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	3301      	adds	r3, #1
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f47f af2e 	bne.w	8005cc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f006 fb6a 	bl	800c548 <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7e:	d122      	bne.n	8005ec6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d108      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fef5 	bl	8006c98 <HAL_PCDEx_LPM_Callback>
 8005eae:	e002      	b.n	8005eb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f009 fa0b 	bl	800f2cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f006 fb3c 	bl	800c548 <USB_ReadInterrupts>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eda:	d112      	bne.n	8005f02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d102      	bne.n	8005ef2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f009 f9c7 	bl	800f280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f006 fb1e 	bl	800c548 <USB_ReadInterrupts>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f16:	d121      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005f26:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d111      	bne.n	8005f56 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	089b      	lsrs	r3, r3, #2
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fea2 	bl	8006c98 <HAL_PCDEx_LPM_Callback>
 8005f54:	e002      	b.n	8005f5c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f009 f992 	bl	800f280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f006 faf1 	bl	800c548 <USB_ReadInterrupts>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	f040 80b7 	bne.w	80060e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2110      	movs	r1, #16
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f005 fbb8 	bl	800b704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f94:	2300      	movs	r3, #0
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f98:	e046      	b.n	8006028 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fe0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006020:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	3301      	adds	r3, #1
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	d3b3      	bcc.n	8005f9a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006040:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006044:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605e:	f043 030b 	orr.w	r3, r3, #11
 8006062:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006074:	f043 030b 	orr.w	r3, r3, #11
 8006078:	6453      	str	r3, [r2, #68]	; 0x44
 800607a:	e015      	b.n	80060a8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	4619      	mov	r1, r3
 800608c:	f242 032b 	movw	r3, #8235	; 0x202b
 8006090:	4313      	orrs	r3, r2
 8006092:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a2:	f043 030b 	orr.w	r3, r3, #11
 80060a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060cc:	461a      	mov	r2, r3
 80060ce:	f006 fb01 	bl	800c6d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80060e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f006 fa2e 	bl	800c548 <USB_ReadInterrupts>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f6:	d124      	bne.n	8006142 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f006 fac5 	bl	800c68c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f005 fb79 	bl	800b7fe <USB_GetDevSpeed>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681c      	ldr	r4, [r3, #0]
 8006118:	f001 fd9e 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 800611c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	4620      	mov	r0, r4
 8006128:	f005 f87e 	bl	800b228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f009 f87e 	bl	800f22e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006140:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f006 f9fe 	bl	800c548 <USB_ReadInterrupts>
 800614c:	4603      	mov	r3, r0
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b08      	cmp	r3, #8
 8006154:	d10a      	bne.n	800616c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f009 f85b 	bl	800f212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f002 0208 	and.w	r2, r2, #8
 800616a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f006 f9e9 	bl	800c548 <USB_ReadInterrupts>
 8006176:	4603      	mov	r3, r0
 8006178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617c:	2b80      	cmp	r3, #128	; 0x80
 800617e:	d122      	bne.n	80061c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800618c:	2301      	movs	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
 8006190:	e014      	b.n	80061bc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d105      	bne.n	80061b6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fb09 	bl	80067c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	3301      	adds	r3, #1
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d3e5      	bcc.n	8006192 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f006 f9bc 	bl	800c548 <USB_ReadInterrupts>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061da:	d13b      	bne.n	8006254 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061dc:	2301      	movs	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
 80061e0:	e02b      	b.n	800623a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3340      	adds	r3, #64	; 0x40
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d115      	bne.n	8006234 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006208:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800620a:	2b00      	cmp	r3, #0
 800620c:	da12      	bge.n	8006234 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	4613      	mov	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	333f      	adds	r3, #63	; 0x3f
 800621e:	2201      	movs	r2, #1
 8006220:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 faca 	bl	80067c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	3301      	adds	r3, #1
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	429a      	cmp	r2, r3
 8006242:	d3ce      	bcc.n	80061e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f006 f975 	bl	800c548 <USB_ReadInterrupts>
 800625e:	4603      	mov	r3, r0
 8006260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006268:	d155      	bne.n	8006316 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800626a:	2301      	movs	r3, #1
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
 800626e:	e045      	b.n	80062fc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d12e      	bne.n	80062f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006298:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800629a:	2b00      	cmp	r3, #0
 800629c:	da2b      	bge.n	80062f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80062aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d121      	bne.n	80062f6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80062c4:	2201      	movs	r2, #1
 80062c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062f2:	6053      	str	r3, [r2, #4]
            break;
 80062f4:	e007      	b.n	8006306 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	3301      	adds	r3, #1
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	429a      	cmp	r2, r3
 8006304:	d3b4      	bcc.n	8006270 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f006 f914 	bl	800c548 <USB_ReadInterrupts>
 8006320:	4603      	mov	r3, r0
 8006322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632a:	d10a      	bne.n	8006342 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f008 ffff 	bl	800f330 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f006 f8fe 	bl	800c548 <USB_ReadInterrupts>
 800634c:	4603      	mov	r3, r0
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b04      	cmp	r3, #4
 8006354:	d115      	bne.n	8006382 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f008 ffef 	bl	800f34c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	e000      	b.n	8006382 <HAL_PCD_IRQHandler+0x992>
      return;
 8006380:	bf00      	nop
    }
  }
}
 8006382:	3734      	adds	r7, #52	; 0x34
 8006384:	46bd      	mov	sp, r7
 8006386:	bd90      	pop	{r4, r7, pc}

08006388 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_PCD_SetAddress+0x1a>
 800639e:	2302      	movs	r3, #2
 80063a0:	e013      	b.n	80063ca <HAL_PCD_SetAddress+0x42>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	78fa      	ldrb	r2, [r7, #3]
 80063ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	78fa      	ldrb	r2, [r7, #3]
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f006 f85c 	bl	800c478 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	4608      	mov	r0, r1
 80063dc:	4611      	mov	r1, r2
 80063de:	461a      	mov	r2, r3
 80063e0:	4603      	mov	r3, r0
 80063e2:	70fb      	strb	r3, [r7, #3]
 80063e4:	460b      	mov	r3, r1
 80063e6:	803b      	strh	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da0f      	bge.n	8006418 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3338      	adds	r3, #56	; 0x38
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	705a      	strb	r2, [r3, #1]
 8006416:	e00f      	b.n	8006438 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	f003 020f 	and.w	r2, r3, #15
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	3304      	adds	r3, #4
 8006430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	b2da      	uxtb	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006444:	883a      	ldrh	r2, [r7, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	78ba      	ldrb	r2, [r7, #2]
 800644e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006462:	78bb      	ldrb	r3, [r7, #2]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d102      	bne.n	800646e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_PCD_EP_Open+0xaa>
 8006478:	2302      	movs	r3, #2
 800647a:	e00e      	b.n	800649a <HAL_PCD_EP_Open+0xc8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	4618      	mov	r0, r3
 800648c:	f005 f9dc 	bl	800b848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006498:	7afb      	ldrb	r3, [r7, #11]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da0f      	bge.n	80064d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	4613      	mov	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	3338      	adds	r3, #56	; 0x38
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	3304      	adds	r3, #4
 80064cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	705a      	strb	r2, [r3, #1]
 80064d4:	e00f      	b.n	80064f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	4613      	mov	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	3304      	adds	r3, #4
 80064ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_PCD_EP_Close+0x6e>
 800650c:	2302      	movs	r3, #2
 800650e:	e00e      	b.n	800652e <HAL_PCD_EP_Close+0x8c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	4618      	mov	r0, r3
 8006520:	f005 fa1a 	bl	800b958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	460b      	mov	r3, r1
 8006544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	3304      	adds	r3, #4
 800655e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2200      	movs	r2, #0
 8006570:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006578:	7afb      	ldrb	r3, [r7, #11]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	b2da      	uxtb	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d102      	bne.n	8006592 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	6979      	ldr	r1, [r7, #20]
 80065a0:	f005 fab6 	bl	800bb10 <USB_EPStartXfer>

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80065d0:	681b      	ldr	r3, [r3, #0]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b086      	sub	sp, #24
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	460b      	mov	r3, r1
 80065ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	f003 020f 	and.w	r2, r3, #15
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	3338      	adds	r3, #56	; 0x38
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	3304      	adds	r3, #4
 8006604:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2200      	movs	r2, #0
 8006616:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2201      	movs	r2, #1
 800661c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800661e:	7afb      	ldrb	r3, [r7, #11]
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	b2da      	uxtb	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d102      	bne.n	8006638 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	6979      	ldr	r1, [r7, #20]
 8006646:	f005 fa63 	bl	800bb10 <USB_EPStartXfer>

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	d901      	bls.n	8006672 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e050      	b.n	8006714 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da0f      	bge.n	800669a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	f003 020f 	and.w	r2, r3, #15
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	3338      	adds	r3, #56	; 0x38
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4413      	add	r3, r2
 800668e:	3304      	adds	r3, #4
 8006690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	705a      	strb	r2, [r3, #1]
 8006698:	e00d      	b.n	80066b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	4613      	mov	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4413      	add	r3, r2
 80066ac:	3304      	adds	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_PCD_EP_SetStall+0x82>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e01e      	b.n	8006714 <HAL_PCD_EP_SetStall+0xc0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68f9      	ldr	r1, [r7, #12]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f005 fdf3 	bl	800c2d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	b2d9      	uxtb	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006704:	461a      	mov	r2, r3
 8006706:	f005 ffe5 	bl	800c6d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	f003 020f 	and.w	r2, r3, #15
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d901      	bls.n	800673a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e042      	b.n	80067c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800673a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800673e:	2b00      	cmp	r3, #0
 8006740:	da0f      	bge.n	8006762 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	4613      	mov	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	3338      	adds	r3, #56	; 0x38
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4413      	add	r3, r2
 8006756:	3304      	adds	r3, #4
 8006758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	705a      	strb	r2, [r3, #1]
 8006760:	e00f      	b.n	8006782 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	b2da      	uxtb	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_PCD_EP_ClrStall+0x86>
 800679e:	2302      	movs	r3, #2
 80067a0:	e00e      	b.n	80067c0 <HAL_PCD_EP_ClrStall+0xa4>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f005 fdfb 	bl	800c3ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80067d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	da0c      	bge.n	80067f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f003 020f 	and.w	r2, r3, #15
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	3338      	adds	r3, #56	; 0x38
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e00c      	b.n	8006810 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	f003 020f 	and.w	r2, r3, #15
 80067fc:	4613      	mov	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4413      	add	r3, r2
 800680c:	3304      	adds	r3, #4
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	4618      	mov	r0, r3
 8006818:	f005 fc1a 	bl	800c050 <USB_EPStopXfer>
 800681c:	4603      	mov	r3, r0
 800681e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006820:	7afb      	ldrb	r3, [r7, #11]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b08a      	sub	sp, #40	; 0x28
 800682e:	af02      	add	r7, sp, #8
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	3338      	adds	r3, #56	; 0x38
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	3304      	adds	r3, #4
 8006850:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	429a      	cmp	r2, r3
 800685c:	d901      	bls.n	8006862 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e06c      	b.n	800693c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	429a      	cmp	r2, r3
 8006876:	d902      	bls.n	800687e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3303      	adds	r3, #3
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006886:	e02b      	b.n	80068e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	429a      	cmp	r2, r3
 800689c:	d902      	bls.n	80068a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3303      	adds	r3, #3
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68d9      	ldr	r1, [r3, #12]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4603      	mov	r3, r0
 80068c2:	6978      	ldr	r0, [r7, #20]
 80068c4:	f005 fc6e 	bl	800c1a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	441a      	add	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	441a      	add	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d809      	bhi.n	800690a <PCD_WriteEmptyTxFifo+0xe0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068fe:	429a      	cmp	r2, r3
 8006900:	d203      	bcs.n	800690a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1be      	bne.n	8006888 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	429a      	cmp	r2, r3
 8006914:	d811      	bhi.n	800693a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	2201      	movs	r2, #1
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	43db      	mvns	r3, r3
 8006930:	6939      	ldr	r1, [r7, #16]
 8006932:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006936:	4013      	ands	r3, r2
 8006938:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	333c      	adds	r3, #60	; 0x3c
 800695c:	3304      	adds	r3, #4
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d17b      	bne.n	8006a72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d015      	beq.n	80069b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4a61      	ldr	r2, [pc, #388]	; (8006b0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	f240 80b9 	bls.w	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80b3 	beq.w	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	461a      	mov	r2, r3
 80069a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ac:	6093      	str	r3, [r2, #8]
 80069ae:	e0a7      	b.n	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	461a      	mov	r2, r3
 80069c8:	2320      	movs	r3, #32
 80069ca:	6093      	str	r3, [r2, #8]
 80069cc:	e098      	b.n	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 8093 	bne.w	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	4a4b      	ldr	r2, [pc, #300]	; (8006b0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d90f      	bls.n	8006a02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f8:	461a      	mov	r2, r3
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	6093      	str	r3, [r2, #8]
 8006a00:	e07e      	b.n	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	0159      	lsls	r1, r3, #5
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	440b      	add	r3, r1
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d114      	bne.n	8006a64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2101      	movs	r1, #1
 8006a50:	f005 fe40 	bl	800c6d4 <USB_EP0_OutStart>
 8006a54:	e006      	b.n	8006a64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	441a      	add	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f008 fb9c 	bl	800f1a8 <HAL_PCD_DataOutStageCallback>
 8006a70:	e046      	b.n	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d124      	bne.n	8006ac4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a96:	6093      	str	r3, [r2, #8]
 8006a98:	e032      	b.n	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	2320      	movs	r3, #32
 8006ab4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f008 fb73 	bl	800f1a8 <HAL_PCD_DataOutStageCallback>
 8006ac2:	e01d      	b.n	8006b00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d114      	bne.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d108      	bne.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006aec:	461a      	mov	r2, r3
 8006aee:	2100      	movs	r1, #0
 8006af0:	f005 fdf0 	bl	800c6d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f008 fb54 	bl	800f1a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	4f54300a 	.word	0x4f54300a
 8006b10:	4f54310a 	.word	0x4f54310a

08006b14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	333c      	adds	r3, #60	; 0x3c
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d90e      	bls.n	8006b68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	461a      	mov	r2, r3
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f008 fb0b 	bl	800f184 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d90c      	bls.n	8006b90 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d108      	bne.n	8006b90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	f005 fda2 	bl	800c6d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	4f54300a 	.word	0x4f54300a

08006ba0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
 8006bac:	4613      	mov	r3, r2
 8006bae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bbe:	883b      	ldrh	r3, [r7, #0]
 8006bc0:	0419      	lsls	r1, r3, #16
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28
 8006bcc:	e028      	b.n	8006c20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	e00d      	b.n	8006bfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	3340      	adds	r3, #64	; 0x40
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d3ec      	bcc.n	8006be2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c08:	883b      	ldrh	r3, [r7, #0]
 8006c0a:	0418      	lsls	r0, r3, #16
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4302      	orrs	r2, r0
 8006c18:	3340      	adds	r3, #64	; 0x40
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_PCDEx_ActivateLPM+0x44>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	10000003 	.word	0x10000003

08006c98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d00a      	beq.n	8006cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cc4:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d001      	beq.n	8006cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e01f      	b.n	8006d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e01d      	b.n	8006d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cda:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f023 0207 	bic.w	r2, r3, #7
 8006ce2:	490f      	ldr	r1, [pc, #60]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cea:	f7fa fba5 	bl	8001438 <HAL_GetTick>
 8006cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cf0:	e009      	b.n	8006d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cf2:	f7fa fba1 	bl	8001438 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d00:	d901      	bls.n	8006d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e007      	b.n	8006d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <HAL_PWREx_ConfigSupply+0x70>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d12:	d1ee      	bne.n	8006cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	58024800 	.word	0x58024800

08006d24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d32:	60d3      	str	r3, [r2, #12]
}
 8006d34:	bf00      	nop
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	58024800 	.word	0x58024800

08006d44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	; 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f000 bc48 	b.w	80075e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8088 	beq.w	8006e76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d66:	4b99      	ldr	r3, [pc, #612]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d70:	4b96      	ldr	r3, [pc, #600]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d007      	beq.n	8006d8c <HAL_RCC_OscConfig+0x48>
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2b18      	cmp	r3, #24
 8006d80:	d111      	bne.n	8006da6 <HAL_RCC_OscConfig+0x62>
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d10c      	bne.n	8006da6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d8c:	4b8f      	ldr	r3, [pc, #572]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d06d      	beq.n	8006e74 <HAL_RCC_OscConfig+0x130>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d169      	bne.n	8006e74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f000 bc21 	b.w	80075e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dae:	d106      	bne.n	8006dbe <HAL_RCC_OscConfig+0x7a>
 8006db0:	4b86      	ldr	r3, [pc, #536]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a85      	ldr	r2, [pc, #532]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	e02e      	b.n	8006e1c <HAL_RCC_OscConfig+0xd8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCC_OscConfig+0x9c>
 8006dc6:	4b81      	ldr	r3, [pc, #516]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a80      	ldr	r2, [pc, #512]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	4b7e      	ldr	r3, [pc, #504]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a7d      	ldr	r2, [pc, #500]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e01d      	b.n	8006e1c <HAL_RCC_OscConfig+0xd8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de8:	d10c      	bne.n	8006e04 <HAL_RCC_OscConfig+0xc0>
 8006dea:	4b78      	ldr	r3, [pc, #480]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a77      	ldr	r2, [pc, #476]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	4b75      	ldr	r3, [pc, #468]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a74      	ldr	r2, [pc, #464]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e00b      	b.n	8006e1c <HAL_RCC_OscConfig+0xd8>
 8006e04:	4b71      	ldr	r3, [pc, #452]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a70      	ldr	r2, [pc, #448]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	4b6e      	ldr	r3, [pc, #440]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6d      	ldr	r2, [pc, #436]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d013      	beq.n	8006e4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fa fb08 	bl	8001438 <HAL_GetTick>
 8006e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fa fb04 	bl	8001438 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e3d4      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e3e:	4b63      	ldr	r3, [pc, #396]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0xe8>
 8006e4a:	e014      	b.n	8006e76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fa faf4 	bl	8001438 <HAL_GetTick>
 8006e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e54:	f7fa faf0 	bl	8001438 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b64      	cmp	r3, #100	; 0x64
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e3c0      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e66:	4b59      	ldr	r3, [pc, #356]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x110>
 8006e72:	e000      	b.n	8006e76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80ca 	beq.w	8007018 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e84:	4b51      	ldr	r3, [pc, #324]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e8e:	4b4f      	ldr	r3, [pc, #316]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_RCC_OscConfig+0x166>
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	2b18      	cmp	r3, #24
 8006e9e:	d156      	bne.n	8006f4e <HAL_RCC_OscConfig+0x20a>
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d151      	bne.n	8006f4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eaa:	4b48      	ldr	r3, [pc, #288]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x17e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e392      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ec2:	4b42      	ldr	r3, [pc, #264]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 0219 	bic.w	r2, r3, #25
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	493f      	ldr	r1, [pc, #252]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed4:	f7fa fab0 	bl	8001438 <HAL_GetTick>
 8006ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006edc:	f7fa faac 	bl	8001438 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e37c      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eee:	4b37      	ldr	r3, [pc, #220]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efa:	f7fa facd 	bl	8001498 <HAL_GetREVID>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d817      	bhi.n	8006f38 <HAL_RCC_OscConfig+0x1f4>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	d108      	bne.n	8006f22 <HAL_RCC_OscConfig+0x1de>
 8006f10:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f18:	4a2c      	ldr	r2, [pc, #176]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f20:	e07a      	b.n	8007018 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f22:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	031b      	lsls	r3, r3, #12
 8006f30:	4926      	ldr	r1, [pc, #152]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f36:	e06f      	b.n	8007018 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f38:	4b24      	ldr	r3, [pc, #144]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	061b      	lsls	r3, r3, #24
 8006f46:	4921      	ldr	r1, [pc, #132]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f4c:	e064      	b.n	8007018 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d047      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f56:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 0219 	bic.w	r2, r3, #25
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	491a      	ldr	r1, [pc, #104]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fa fa66 	bl	8001438 <HAL_GetTick>
 8006f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f70:	f7fa fa62 	bl	8001438 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e332      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8e:	f7fa fa83 	bl	8001498 <HAL_GetREVID>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d819      	bhi.n	8006fd0 <HAL_RCC_OscConfig+0x28c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d108      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x272>
 8006fa4:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006fac:	4a07      	ldr	r2, [pc, #28]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb2:	6053      	str	r3, [r2, #4]
 8006fb4:	e030      	b.n	8007018 <HAL_RCC_OscConfig+0x2d4>
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	031b      	lsls	r3, r3, #12
 8006fc4:	4901      	ldr	r1, [pc, #4]	; (8006fcc <HAL_RCC_OscConfig+0x288>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	604b      	str	r3, [r1, #4]
 8006fca:	e025      	b.n	8007018 <HAL_RCC_OscConfig+0x2d4>
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	4b9a      	ldr	r3, [pc, #616]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	4997      	ldr	r1, [pc, #604]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	604b      	str	r3, [r1, #4]
 8006fe4:	e018      	b.n	8007018 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fe6:	4b95      	ldr	r3, [pc, #596]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a94      	ldr	r2, [pc, #592]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff2:	f7fa fa21 	bl	8001438 <HAL_GetTick>
 8006ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ffa:	f7fa fa1d 	bl	8001438 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e2ed      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800700c:	4b8b      	ldr	r3, [pc, #556]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f0      	bne.n	8006ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80a9 	beq.w	8007178 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007026:	4b85      	ldr	r3, [pc, #532]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800702e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007030:	4b82      	ldr	r3, [pc, #520]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b08      	cmp	r3, #8
 800703a:	d007      	beq.n	800704c <HAL_RCC_OscConfig+0x308>
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b18      	cmp	r3, #24
 8007040:	d13a      	bne.n	80070b8 <HAL_RCC_OscConfig+0x374>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	2b01      	cmp	r3, #1
 800704a:	d135      	bne.n	80070b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800704c:	4b7b      	ldr	r3, [pc, #492]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_RCC_OscConfig+0x320>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	2b80      	cmp	r3, #128	; 0x80
 800705e:	d001      	beq.n	8007064 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e2c1      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007064:	f7fa fa18 	bl	8001498 <HAL_GetREVID>
 8007068:	4603      	mov	r3, r0
 800706a:	f241 0203 	movw	r2, #4099	; 0x1003
 800706e:	4293      	cmp	r3, r2
 8007070:	d817      	bhi.n	80070a2 <HAL_RCC_OscConfig+0x35e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	2b20      	cmp	r3, #32
 8007078:	d108      	bne.n	800708c <HAL_RCC_OscConfig+0x348>
 800707a:	4b70      	ldr	r3, [pc, #448]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007082:	4a6e      	ldr	r2, [pc, #440]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007088:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800708a:	e075      	b.n	8007178 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800708c:	4b6b      	ldr	r3, [pc, #428]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	069b      	lsls	r3, r3, #26
 800709a:	4968      	ldr	r1, [pc, #416]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070a0:	e06a      	b.n	8007178 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070a2:	4b66      	ldr	r3, [pc, #408]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	061b      	lsls	r3, r3, #24
 80070b0:	4962      	ldr	r1, [pc, #392]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070b6:	e05f      	b.n	8007178 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d042      	beq.n	8007146 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80070c0:	4b5e      	ldr	r3, [pc, #376]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5d      	ldr	r2, [pc, #372]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80070c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070cc:	f7fa f9b4 	bl	8001438 <HAL_GetTick>
 80070d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070d4:	f7fa f9b0 	bl	8001438 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e280      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070e6:	4b55      	ldr	r3, [pc, #340]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f0      	beq.n	80070d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070f2:	f7fa f9d1 	bl	8001498 <HAL_GetREVID>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d817      	bhi.n	8007130 <HAL_RCC_OscConfig+0x3ec>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	2b20      	cmp	r3, #32
 8007106:	d108      	bne.n	800711a <HAL_RCC_OscConfig+0x3d6>
 8007108:	4b4c      	ldr	r3, [pc, #304]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007110:	4a4a      	ldr	r2, [pc, #296]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007116:	6053      	str	r3, [r2, #4]
 8007118:	e02e      	b.n	8007178 <HAL_RCC_OscConfig+0x434>
 800711a:	4b48      	ldr	r3, [pc, #288]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	069b      	lsls	r3, r3, #26
 8007128:	4944      	ldr	r1, [pc, #272]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800712a:	4313      	orrs	r3, r2
 800712c:	604b      	str	r3, [r1, #4]
 800712e:	e023      	b.n	8007178 <HAL_RCC_OscConfig+0x434>
 8007130:	4b42      	ldr	r3, [pc, #264]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	493f      	ldr	r1, [pc, #252]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007140:	4313      	orrs	r3, r2
 8007142:	60cb      	str	r3, [r1, #12]
 8007144:	e018      	b.n	8007178 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007146:	4b3d      	ldr	r3, [pc, #244]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a3c      	ldr	r2, [pc, #240]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800714c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007152:	f7fa f971 	bl	8001438 <HAL_GetTick>
 8007156:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800715a:	f7fa f96d 	bl	8001438 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e23d      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800716c:	4b33      	ldr	r3, [pc, #204]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f0      	bne.n	800715a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d036      	beq.n	80071f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d019      	beq.n	80071c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800718c:	4b2b      	ldr	r3, [pc, #172]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800718e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007190:	4a2a      	ldr	r2, [pc, #168]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007198:	f7fa f94e 	bl	8001438 <HAL_GetTick>
 800719c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071a0:	f7fa f94a 	bl	8001438 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e21a      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071b2:	4b22      	ldr	r3, [pc, #136]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80071b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <HAL_RCC_OscConfig+0x45c>
 80071be:	e018      	b.n	80071f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c0:	4b1e      	ldr	r3, [pc, #120]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80071c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071cc:	f7fa f934 	bl	8001438 <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d4:	f7fa f930 	bl	8001438 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e200      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071e6:	4b15      	ldr	r3, [pc, #84]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 80071e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d039      	beq.n	8007272 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01c      	beq.n	8007240 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a0c      	ldr	r2, [pc, #48]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800720c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007210:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007212:	f7fa f911 	bl	8001438 <HAL_GetTick>
 8007216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800721a:	f7fa f90d 	bl	8001438 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e1dd      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800722c:	4b03      	ldr	r3, [pc, #12]	; (800723c <HAL_RCC_OscConfig+0x4f8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x4d6>
 8007238:	e01b      	b.n	8007272 <HAL_RCC_OscConfig+0x52e>
 800723a:	bf00      	nop
 800723c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007240:	4b9b      	ldr	r3, [pc, #620]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a9a      	ldr	r2, [pc, #616]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800724c:	f7fa f8f4 	bl	8001438 <HAL_GetTick>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007254:	f7fa f8f0 	bl	8001438 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e1c0      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007266:	4b92      	ldr	r3, [pc, #584]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8081 	beq.w	8007382 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007280:	4b8c      	ldr	r3, [pc, #560]	; (80074b4 <HAL_RCC_OscConfig+0x770>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a8b      	ldr	r2, [pc, #556]	; (80074b4 <HAL_RCC_OscConfig+0x770>)
 8007286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800728c:	f7fa f8d4 	bl	8001438 <HAL_GetTick>
 8007290:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007294:	f7fa f8d0 	bl	8001438 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e1a0      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072a6:	4b83      	ldr	r3, [pc, #524]	; (80074b4 <HAL_RCC_OscConfig+0x770>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d106      	bne.n	80072c8 <HAL_RCC_OscConfig+0x584>
 80072ba:	4b7d      	ldr	r3, [pc, #500]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a7c      	ldr	r2, [pc, #496]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
 80072c6:	e02d      	b.n	8007324 <HAL_RCC_OscConfig+0x5e0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <HAL_RCC_OscConfig+0x5a6>
 80072d0:	4b77      	ldr	r3, [pc, #476]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	4a76      	ldr	r2, [pc, #472]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072d6:	f023 0301 	bic.w	r3, r3, #1
 80072da:	6713      	str	r3, [r2, #112]	; 0x70
 80072dc:	4b74      	ldr	r3, [pc, #464]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	4a73      	ldr	r2, [pc, #460]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072e2:	f023 0304 	bic.w	r3, r3, #4
 80072e6:	6713      	str	r3, [r2, #112]	; 0x70
 80072e8:	e01c      	b.n	8007324 <HAL_RCC_OscConfig+0x5e0>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	d10c      	bne.n	800730c <HAL_RCC_OscConfig+0x5c8>
 80072f2:	4b6f      	ldr	r3, [pc, #444]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	4a6e      	ldr	r2, [pc, #440]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80072f8:	f043 0304 	orr.w	r3, r3, #4
 80072fc:	6713      	str	r3, [r2, #112]	; 0x70
 80072fe:	4b6c      	ldr	r3, [pc, #432]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	4a6b      	ldr	r2, [pc, #428]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6713      	str	r3, [r2, #112]	; 0x70
 800730a:	e00b      	b.n	8007324 <HAL_RCC_OscConfig+0x5e0>
 800730c:	4b68      	ldr	r3, [pc, #416]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	4a67      	ldr	r2, [pc, #412]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	6713      	str	r3, [r2, #112]	; 0x70
 8007318:	4b65      	ldr	r3, [pc, #404]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731c:	4a64      	ldr	r2, [pc, #400]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800731e:	f023 0304 	bic.w	r3, r3, #4
 8007322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d015      	beq.n	8007358 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fa f884 	bl	8001438 <HAL_GetTick>
 8007330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fa f880 	bl	8001438 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e14e      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800734a:	4b59      	ldr	r3, [pc, #356]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0ee      	beq.n	8007334 <HAL_RCC_OscConfig+0x5f0>
 8007356:	e014      	b.n	8007382 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007358:	f7fa f86e 	bl	8001438 <HAL_GetTick>
 800735c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800735e:	e00a      	b.n	8007376 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007360:	f7fa f86a 	bl	8001438 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e138      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007376:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1ee      	bne.n	8007360 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 812d 	beq.w	80075e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800738c:	4b48      	ldr	r3, [pc, #288]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007394:	2b18      	cmp	r3, #24
 8007396:	f000 80bd 	beq.w	8007514 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b02      	cmp	r3, #2
 80073a0:	f040 809e 	bne.w	80074e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a4:	4b42      	ldr	r3, [pc, #264]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a41      	ldr	r2, [pc, #260]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80073aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7fa f842 	bl	8001438 <HAL_GetTick>
 80073b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b8:	f7fa f83e 	bl	8001438 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e10e      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ca:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073d6:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80073d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073da:	4b37      	ldr	r3, [pc, #220]	; (80074b8 <HAL_RCC_OscConfig+0x774>)
 80073dc:	4013      	ands	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073e6:	0112      	lsls	r2, r2, #4
 80073e8:	430a      	orrs	r2, r1
 80073ea:	4931      	ldr	r1, [pc, #196]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	628b      	str	r3, [r1, #40]	; 0x28
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	3b01      	subs	r3, #1
 80073f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	3b01      	subs	r3, #1
 8007400:	025b      	lsls	r3, r3, #9
 8007402:	b29b      	uxth	r3, r3
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	3b01      	subs	r3, #1
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007418:	3b01      	subs	r3, #1
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007420:	4923      	ldr	r1, [pc, #140]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007422:	4313      	orrs	r3, r2
 8007424:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007426:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	4a21      	ldr	r2, [pc, #132]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800742c:	f023 0301 	bic.w	r3, r3, #1
 8007430:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007432:	4b1f      	ldr	r3, [pc, #124]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <HAL_RCC_OscConfig+0x778>)
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800743e:	00d2      	lsls	r2, r2, #3
 8007440:	491b      	ldr	r1, [pc, #108]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007442:	4313      	orrs	r3, r2
 8007444:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007446:	4b1a      	ldr	r3, [pc, #104]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	f023 020c 	bic.w	r2, r3, #12
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4917      	ldr	r1, [pc, #92]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007454:	4313      	orrs	r3, r2
 8007456:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007458:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	f023 0202 	bic.w	r2, r3, #2
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007464:	4912      	ldr	r1, [pc, #72]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	4a10      	ldr	r2, [pc, #64]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007474:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007476:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800747c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007482:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800748c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800748e:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 8007494:	f043 0301 	orr.w	r3, r3, #1
 8007498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <HAL_RCC_OscConfig+0x76c>)
 80074a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a6:	f7f9 ffc7 	bl	8001438 <HAL_GetTick>
 80074aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074ac:	e011      	b.n	80074d2 <HAL_RCC_OscConfig+0x78e>
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400
 80074b4:	58024800 	.word	0x58024800
 80074b8:	fffffc0c 	.word	0xfffffc0c
 80074bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c0:	f7f9 ffba 	bl	8001438 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e08a      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074d2:	4b47      	ldr	r3, [pc, #284]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f0      	beq.n	80074c0 <HAL_RCC_OscConfig+0x77c>
 80074de:	e082      	b.n	80075e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e0:	4b43      	ldr	r3, [pc, #268]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a42      	ldr	r2, [pc, #264]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80074e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7f9 ffa4 	bl	8001438 <HAL_GetTick>
 80074f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f4:	f7f9 ffa0 	bl	8001438 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e070      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007506:	4b3a      	ldr	r3, [pc, #232]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f0      	bne.n	80074f4 <HAL_RCC_OscConfig+0x7b0>
 8007512:	e068      	b.n	80075e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007514:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800751a:	4b35      	ldr	r3, [pc, #212]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b01      	cmp	r3, #1
 8007526:	d031      	beq.n	800758c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f003 0203 	and.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007532:	429a      	cmp	r2, r3
 8007534:	d12a      	bne.n	800758c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007542:	429a      	cmp	r2, r3
 8007544:	d122      	bne.n	800758c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007552:	429a      	cmp	r2, r3
 8007554:	d11a      	bne.n	800758c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007562:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d111      	bne.n	800758c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	0c1b      	lsrs	r3, r3, #16
 800756c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d108      	bne.n	800758c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e02b      	b.n	80075e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007590:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	08db      	lsrs	r3, r3, #3
 8007596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800759a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d01f      	beq.n	80075e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80075a6:	4b12      	ldr	r3, [pc, #72]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	4a11      	ldr	r2, [pc, #68]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075b2:	f7f9 ff41 	bl	8001438 <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80075b8:	bf00      	nop
 80075ba:	f7f9 ff3d 	bl	8001438 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d0f9      	beq.n	80075ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075c6:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80075c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ca:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <HAL_RCC_OscConfig+0x8b0>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075d2:	00d2      	lsls	r2, r2, #3
 80075d4:	4906      	ldr	r1, [pc, #24]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <HAL_RCC_OscConfig+0x8ac>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3730      	adds	r7, #48	; 0x30
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	58024400 	.word	0x58024400
 80075f4:	ffff0007 	.word	0xffff0007

080075f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e19c      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800760c:	4b8a      	ldr	r3, [pc, #552]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d910      	bls.n	800763c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b87      	ldr	r3, [pc, #540]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f023 020f 	bic.w	r2, r3, #15
 8007622:	4985      	ldr	r1, [pc, #532]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b83      	ldr	r3, [pc, #524]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e184      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	4b7b      	ldr	r3, [pc, #492]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007654:	429a      	cmp	r2, r3
 8007656:	d908      	bls.n	800766a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007658:	4b78      	ldr	r3, [pc, #480]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	4975      	ldr	r1, [pc, #468]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007666:	4313      	orrs	r3, r2
 8007668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d010      	beq.n	8007698 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	4b70      	ldr	r3, [pc, #448]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007682:	429a      	cmp	r2, r3
 8007684:	d908      	bls.n	8007698 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007686:	4b6d      	ldr	r3, [pc, #436]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	496a      	ldr	r1, [pc, #424]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007694:	4313      	orrs	r3, r2
 8007696:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	4b64      	ldr	r3, [pc, #400]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d908      	bls.n	80076c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076b4:	4b61      	ldr	r3, [pc, #388]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	495e      	ldr	r1, [pc, #376]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d010      	beq.n	80076f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	4b59      	ldr	r3, [pc, #356]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076de:	429a      	cmp	r2, r3
 80076e0:	d908      	bls.n	80076f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076e2:	4b56      	ldr	r3, [pc, #344]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	4953      	ldr	r1, [pc, #332]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d010      	beq.n	8007722 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	4b4d      	ldr	r3, [pc, #308]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	429a      	cmp	r2, r3
 800770e:	d908      	bls.n	8007722 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007710:	4b4a      	ldr	r3, [pc, #296]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f023 020f 	bic.w	r2, r3, #15
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	4947      	ldr	r1, [pc, #284]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800771e:	4313      	orrs	r3, r2
 8007720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d055      	beq.n	80077da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800772e:	4b43      	ldr	r3, [pc, #268]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	4940      	ldr	r1, [pc, #256]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800773c:	4313      	orrs	r3, r2
 800773e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d107      	bne.n	8007758 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007748:	4b3c      	ldr	r3, [pc, #240]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d121      	bne.n	8007798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e0f6      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b03      	cmp	r3, #3
 800775e:	d107      	bne.n	8007770 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007760:	4b36      	ldr	r3, [pc, #216]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d115      	bne.n	8007798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0ea      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d107      	bne.n	8007788 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007778:	4b30      	ldr	r3, [pc, #192]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007780:	2b00      	cmp	r3, #0
 8007782:	d109      	bne.n	8007798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0de      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007788:	4b2c      	ldr	r3, [pc, #176]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0d6      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007798:	4b28      	ldr	r3, [pc, #160]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f023 0207 	bic.w	r2, r3, #7
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	4925      	ldr	r1, [pc, #148]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077aa:	f7f9 fe45 	bl	8001438 <HAL_GetTick>
 80077ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b0:	e00a      	b.n	80077c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b2:	f7f9 fe41 	bl	8001438 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e0be      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c8:	4b1c      	ldr	r3, [pc, #112]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d1eb      	bne.n	80077b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d010      	beq.n	8007808 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d208      	bcs.n	8007808 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f6:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f023 020f 	bic.w	r2, r3, #15
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	490e      	ldr	r1, [pc, #56]	; (800783c <HAL_RCC_ClockConfig+0x244>)
 8007804:	4313      	orrs	r3, r2
 8007806:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007808:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d214      	bcs.n	8007840 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f023 020f 	bic.w	r2, r3, #15
 800781e:	4906      	ldr	r1, [pc, #24]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	4313      	orrs	r3, r2
 8007824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007826:	4b04      	ldr	r3, [pc, #16]	; (8007838 <HAL_RCC_ClockConfig+0x240>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d005      	beq.n	8007840 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e086      	b.n	8007946 <HAL_RCC_ClockConfig+0x34e>
 8007838:	52002000 	.word	0x52002000
 800783c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d010      	beq.n	800786e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	4b3f      	ldr	r3, [pc, #252]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007858:	429a      	cmp	r2, r3
 800785a:	d208      	bcs.n	800786e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800785c:	4b3c      	ldr	r3, [pc, #240]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	4939      	ldr	r1, [pc, #228]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 800786a:	4313      	orrs	r3, r2
 800786c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d010      	beq.n	800789c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	4b34      	ldr	r3, [pc, #208]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007886:	429a      	cmp	r2, r3
 8007888:	d208      	bcs.n	800789c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	492e      	ldr	r1, [pc, #184]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 8007898:	4313      	orrs	r3, r2
 800789a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	4b28      	ldr	r3, [pc, #160]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 80078ae:	69db      	ldr	r3, [r3, #28]
 80078b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d208      	bcs.n	80078ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078b8:	4b25      	ldr	r3, [pc, #148]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	4922      	ldr	r1, [pc, #136]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d010      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69da      	ldr	r2, [r3, #28]
 80078da:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d208      	bcs.n	80078f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4917      	ldr	r1, [pc, #92]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078f8:	f000 f834 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 80078fc:	4602      	mov	r2, r0
 80078fe:	4b14      	ldr	r3, [pc, #80]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	4912      	ldr	r1, [pc, #72]	; (8007954 <HAL_RCC_ClockConfig+0x35c>)
 800790a:	5ccb      	ldrb	r3, [r1, r3]
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007916:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <HAL_RCC_ClockConfig+0x358>)
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <HAL_RCC_ClockConfig+0x35c>)
 8007920:	5cd3      	ldrb	r3, [r2, r3]
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <HAL_RCC_ClockConfig+0x360>)
 800792e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007930:	4a0a      	ldr	r2, [pc, #40]	; (800795c <HAL_RCC_ClockConfig+0x364>)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <HAL_RCC_ClockConfig+0x368>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f7f9 fa0a 	bl	8000d54 <HAL_InitTick>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
 8007954:	080126f4 	.word	0x080126f4
 8007958:	24000008 	.word	0x24000008
 800795c:	24000004 	.word	0x24000004
 8007960:	2400000c 	.word	0x2400000c

08007964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007964:	b480      	push	{r7}
 8007966:	b089      	sub	sp, #36	; 0x24
 8007968:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800796a:	4bb3      	ldr	r3, [pc, #716]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007972:	2b18      	cmp	r3, #24
 8007974:	f200 8155 	bhi.w	8007c22 <HAL_RCC_GetSysClockFreq+0x2be>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <HAL_RCC_GetSysClockFreq+0x1c>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	080079e5 	.word	0x080079e5
 8007984:	08007c23 	.word	0x08007c23
 8007988:	08007c23 	.word	0x08007c23
 800798c:	08007c23 	.word	0x08007c23
 8007990:	08007c23 	.word	0x08007c23
 8007994:	08007c23 	.word	0x08007c23
 8007998:	08007c23 	.word	0x08007c23
 800799c:	08007c23 	.word	0x08007c23
 80079a0:	08007a0b 	.word	0x08007a0b
 80079a4:	08007c23 	.word	0x08007c23
 80079a8:	08007c23 	.word	0x08007c23
 80079ac:	08007c23 	.word	0x08007c23
 80079b0:	08007c23 	.word	0x08007c23
 80079b4:	08007c23 	.word	0x08007c23
 80079b8:	08007c23 	.word	0x08007c23
 80079bc:	08007c23 	.word	0x08007c23
 80079c0:	08007a11 	.word	0x08007a11
 80079c4:	08007c23 	.word	0x08007c23
 80079c8:	08007c23 	.word	0x08007c23
 80079cc:	08007c23 	.word	0x08007c23
 80079d0:	08007c23 	.word	0x08007c23
 80079d4:	08007c23 	.word	0x08007c23
 80079d8:	08007c23 	.word	0x08007c23
 80079dc:	08007c23 	.word	0x08007c23
 80079e0:	08007a17 	.word	0x08007a17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e4:	4b94      	ldr	r3, [pc, #592]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079f0:	4b91      	ldr	r3, [pc, #580]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	4a90      	ldr	r2, [pc, #576]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a02:	e111      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a04:	4b8d      	ldr	r3, [pc, #564]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a06:	61bb      	str	r3, [r7, #24]
      break;
 8007a08:	e10e      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007a0a:	4b8d      	ldr	r3, [pc, #564]	; (8007c40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a0c:	61bb      	str	r3, [r7, #24]
      break;
 8007a0e:	e10b      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007a10:	4b8c      	ldr	r3, [pc, #560]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a12:	61bb      	str	r3, [r7, #24]
      break;
 8007a14:	e108      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a16:	4b88      	ldr	r3, [pc, #544]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a20:	4b85      	ldr	r3, [pc, #532]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	091b      	lsrs	r3, r3, #4
 8007a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a2c:	4b82      	ldr	r3, [pc, #520]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a36:	4b80      	ldr	r3, [pc, #512]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	08db      	lsrs	r3, r3, #3
 8007a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	fb02 f303 	mul.w	r3, r2, r3
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80e1 	beq.w	8007c1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	f000 8083 	beq.w	8007b68 <HAL_RCC_GetSysClockFreq+0x204>
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	f200 80a1 	bhi.w	8007bac <HAL_RCC_GetSysClockFreq+0x248>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_RCC_GetSysClockFreq+0x114>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d056      	beq.n	8007b24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a76:	e099      	b.n	8007bac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a78:	4b6f      	ldr	r3, [pc, #444]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d02d      	beq.n	8007ae0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a84:	4b6c      	ldr	r3, [pc, #432]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	08db      	lsrs	r3, r3, #3
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	4a6b      	ldr	r2, [pc, #428]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
 8007a94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aae:	4b62      	ldr	r3, [pc, #392]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ac2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ada:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007ade:	e087      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b51      	ldr	r3, [pc, #324]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b22:	e065      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b40      	ldr	r3, [pc, #256]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b66:	e043      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	4b2f      	ldr	r3, [pc, #188]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007baa:	e021      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbe:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	0a5b      	lsrs	r3, r3, #9
 8007bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c14:	ee17 3a90 	vmov	r3, s15
 8007c18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c1a:	e005      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
      break;
 8007c20:	e002      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c24:	61bb      	str	r3, [r7, #24]
      break;
 8007c26:	bf00      	nop
  }

  return sysclockfreq;
 8007c28:	69bb      	ldr	r3, [r7, #24]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3724      	adds	r7, #36	; 0x24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	03d09000 	.word	0x03d09000
 8007c40:	003d0900 	.word	0x003d0900
 8007c44:	017d7840 	.word	0x017d7840
 8007c48:	46000000 	.word	0x46000000
 8007c4c:	4c742400 	.word	0x4c742400
 8007c50:	4a742400 	.word	0x4a742400
 8007c54:	4bbebc20 	.word	0x4bbebc20

08007c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c5e:	f7ff fe81 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4b10      	ldr	r3, [pc, #64]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	0a1b      	lsrs	r3, r3, #8
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	490f      	ldr	r1, [pc, #60]	; (8007cac <HAL_RCC_GetHCLKFreq+0x54>)
 8007c70:	5ccb      	ldrb	r3, [r1, r3]
 8007c72:	f003 031f 	and.w	r3, r3, #31
 8007c76:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	4a09      	ldr	r2, [pc, #36]	; (8007cac <HAL_RCC_GetHCLKFreq+0x54>)
 8007c86:	5cd3      	ldrb	r3, [r2, r3]
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c92:	4a07      	ldr	r2, [pc, #28]	; (8007cb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c96:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c9c:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	080126f4 	.word	0x080126f4
 8007cb0:	24000008 	.word	0x24000008
 8007cb4:	24000004 	.word	0x24000004

08007cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cbc:	f7ff ffcc 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	091b      	lsrs	r3, r3, #4
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cce:	5ccb      	ldrb	r3, [r1, r3]
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	080126f4 	.word	0x080126f4

08007ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	223f      	movs	r2, #63	; 0x3f
 8007cf2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cf4:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	f003 0207 	and.w	r2, r3, #7
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d0c:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d24:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HAL_RCC_GetClockConfig+0x7c>)
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <HAL_RCC_GetClockConfig+0x80>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 020f 	and.w	r2, r3, #15
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	58024400 	.word	0x58024400
 8007d64:	52002000 	.word	0x52002000

08007d68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d6c:	b0ca      	sub	sp, #296	; 0x128
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	ea54 0305 	orrs.w	r3, r4, r5
 8007d92:	d049      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d9e:	d02f      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007da0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007da4:	d828      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007daa:	d01a      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007db0:	d822      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dba:	d007      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dbc:	e01c      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4bb8      	ldr	r3, [pc, #736]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4ab7      	ldr	r2, [pc, #732]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dca:	e01a      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	2102      	movs	r1, #2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f002 fb61 	bl	800a49c <RCCEx_PLL2_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007de0:	e00f      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de6:	3328      	adds	r3, #40	; 0x28
 8007de8:	2102      	movs	r1, #2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f002 fc08 	bl	800a600 <RCCEx_PLL3_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007df6:	e004      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dfe:	e000      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e0a:	4ba5      	ldr	r3, [pc, #660]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e18:	4aa1      	ldr	r2, [pc, #644]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	6513      	str	r3, [r2, #80]	; 0x50
 8007e1e:	e003      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007e34:	f04f 0900 	mov.w	r9, #0
 8007e38:	ea58 0309 	orrs.w	r3, r8, r9
 8007e3c:	d047      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d82a      	bhi.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e65 	.word	0x08007e65
 8007e54:	08007e73 	.word	0x08007e73
 8007e58:	08007e89 	.word	0x08007e89
 8007e5c:	08007ea7 	.word	0x08007ea7
 8007e60:	08007ea7 	.word	0x08007ea7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e64:	4b8e      	ldr	r3, [pc, #568]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a8d      	ldr	r2, [pc, #564]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e70:	e01a      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e76:	3308      	adds	r3, #8
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 fb0e 	bl	800a49c <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e86:	e00f      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8c:	3328      	adds	r3, #40	; 0x28
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fbb5 	bl	800a600 <RCCEx_PLL3_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e9c:	e004      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ea4:	e000      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eb0:	4b7b      	ldr	r3, [pc, #492]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	f023 0107 	bic.w	r1, r3, #7
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	4a78      	ldr	r2, [pc, #480]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6513      	str	r3, [r2, #80]	; 0x50
 8007ec4:	e003      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007eda:	f04f 0b00 	mov.w	fp, #0
 8007ede:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ee2:	d04c      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eee:	d030      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef4:	d829      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ef8:	d02d      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007efa:	2bc0      	cmp	r3, #192	; 0xc0
 8007efc:	d825      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007efe:	2b80      	cmp	r3, #128	; 0x80
 8007f00:	d018      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d821      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007f0a:	2b40      	cmp	r3, #64	; 0x40
 8007f0c:	d007      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007f0e:	e01c      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f10:	4b63      	ldr	r3, [pc, #396]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	4a62      	ldr	r2, [pc, #392]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f1c:	e01c      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f22:	3308      	adds	r3, #8
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f002 fab8 	bl	800a49c <RCCEx_PLL2_Config>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f32:	e011      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f38:	3328      	adds	r3, #40	; 0x28
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fb5f 	bl	800a600 <RCCEx_PLL3_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f48:	e006      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f50:	e002      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f52:	bf00      	nop
 8007f54:	e000      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f60:	4b4f      	ldr	r3, [pc, #316]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f64:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6e:	4a4c      	ldr	r2, [pc, #304]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f70:	430b      	orrs	r3, r1
 8007f72:	6513      	str	r3, [r2, #80]	; 0x50
 8007f74:	e003      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007f8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	d053      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007faa:	d035      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fb0:	d82e      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fb6:	d031      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007fb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fbc:	d828      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fc2:	d01a      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fc8:	d822      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fd2:	d007      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007fd4:	e01c      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd6:	4b32      	ldr	r3, [pc, #200]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	4a31      	ldr	r2, [pc, #196]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fe2:	e01c      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	3308      	adds	r3, #8
 8007fea:	2100      	movs	r1, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f002 fa55 	bl	800a49c <RCCEx_PLL2_Config>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ff8:	e011      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffe:	3328      	adds	r3, #40	; 0x28
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f002 fafc 	bl	800a600 <RCCEx_PLL3_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800800e:	e006      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008016:	e002      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008018:	bf00      	nop
 800801a:	e000      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800801c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008026:	4b1e      	ldr	r3, [pc, #120]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008036:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008038:	430b      	orrs	r3, r1
 800803a:	6593      	str	r3, [r2, #88]	; 0x58
 800803c:	e003      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008052:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008056:	2300      	movs	r3, #0
 8008058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800805c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d056      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800806e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008072:	d038      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008078:	d831      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800807a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800807e:	d034      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008084:	d82b      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800808a:	d01d      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800808c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008090:	d825      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d006      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800809a:	d00a      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800809c:	e01f      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800809e:	bf00      	nop
 80080a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a4:	4ba2      	ldr	r3, [pc, #648]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4aa1      	ldr	r2, [pc, #644]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080b0:	e01c      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b6:	3308      	adds	r3, #8
 80080b8:	2100      	movs	r1, #0
 80080ba:	4618      	mov	r0, r3
 80080bc:	f002 f9ee 	bl	800a49c <RCCEx_PLL2_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080c6:	e011      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080cc:	3328      	adds	r3, #40	; 0x28
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f002 fa95 	bl	800a600 <RCCEx_PLL3_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080dc:	e006      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080e4:	e002      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080f4:	4b8e      	ldr	r3, [pc, #568]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008100:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008104:	4a8a      	ldr	r2, [pc, #552]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008106:	430b      	orrs	r3, r1
 8008108:	6593      	str	r3, [r2, #88]	; 0x58
 800810a:	e003      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008124:	2300      	movs	r3, #0
 8008126:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800812a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800812e:	460b      	mov	r3, r1
 8008130:	4313      	orrs	r3, r2
 8008132:	d03a      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813a:	2b30      	cmp	r3, #48	; 0x30
 800813c:	d01f      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800813e:	2b30      	cmp	r3, #48	; 0x30
 8008140:	d819      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008142:	2b20      	cmp	r3, #32
 8008144:	d00c      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008146:	2b20      	cmp	r3, #32
 8008148:	d815      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d019      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800814e:	2b10      	cmp	r3, #16
 8008150:	d111      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008152:	4b77      	ldr	r3, [pc, #476]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	4a76      	ldr	r2, [pc, #472]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800815c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800815e:	e011      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008164:	3308      	adds	r3, #8
 8008166:	2102      	movs	r1, #2
 8008168:	4618      	mov	r0, r3
 800816a:	f002 f997 	bl	800a49c <RCCEx_PLL2_Config>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008174:	e006      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800817c:	e002      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800817e:	bf00      	nop
 8008180:	e000      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800818c:	4b68      	ldr	r3, [pc, #416]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800818e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008190:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819a:	4a65      	ldr	r2, [pc, #404]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800819c:	430b      	orrs	r3, r1
 800819e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081a0:	e003      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80081b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081ba:	2300      	movs	r3, #0
 80081bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d051      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d4:	d035      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80081d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081da:	d82e      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081e0:	d031      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80081e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081e6:	d828      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ec:	d01a      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f2:	d822      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80081f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fc:	d007      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80081fe:	e01c      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008200:	4b4b      	ldr	r3, [pc, #300]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	4a4a      	ldr	r2, [pc, #296]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800820a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800820c:	e01c      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008212:	3308      	adds	r3, #8
 8008214:	2100      	movs	r1, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f002 f940 	bl	800a49c <RCCEx_PLL2_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008222:	e011      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008228:	3328      	adds	r3, #40	; 0x28
 800822a:	2100      	movs	r1, #0
 800822c:	4618      	mov	r0, r3
 800822e:	f002 f9e7 	bl	800a600 <RCCEx_PLL3_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008238:	e006      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008250:	4b37      	ldr	r3, [pc, #220]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008254:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825e:	4a34      	ldr	r2, [pc, #208]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008260:	430b      	orrs	r3, r1
 8008262:	6513      	str	r3, [r2, #80]	; 0x50
 8008264:	e003      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800826a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800826e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800827a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800827e:	2300      	movs	r3, #0
 8008280:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008284:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008288:	460b      	mov	r3, r1
 800828a:	4313      	orrs	r3, r2
 800828c:	d056      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008298:	d033      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800829a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800829e:	d82c      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082a4:	d02f      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80082a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082aa:	d826      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082b0:	d02b      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80082b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082b6:	d820      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082bc:	d012      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80082be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c2:	d81a      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d022      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082cc:	d115      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d2:	3308      	adds	r3, #8
 80082d4:	2101      	movs	r1, #1
 80082d6:	4618      	mov	r0, r3
 80082d8:	f002 f8e0 	bl	800a49c <RCCEx_PLL2_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082e2:	e015      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e8:	3328      	adds	r3, #40	; 0x28
 80082ea:	2101      	movs	r1, #1
 80082ec:	4618      	mov	r0, r3
 80082ee:	f002 f987 	bl	800a600 <RCCEx_PLL3_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082f8:	e00a      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008300:	e006      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008302:	bf00      	nop
 8008304:	e004      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008306:	bf00      	nop
 8008308:	e002      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800830e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10d      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008326:	4a02      	ldr	r2, [pc, #8]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008328:	430b      	orrs	r3, r1
 800832a:	6513      	str	r3, [r2, #80]	; 0x50
 800832c:	e006      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800832e:	bf00      	nop
 8008330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800833c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800834c:	2300      	movs	r3, #0
 800834e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008352:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008356:	460b      	mov	r3, r1
 8008358:	4313      	orrs	r3, r2
 800835a:	d055      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008368:	d033      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800836a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800836e:	d82c      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008374:	d02f      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837a:	d826      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800837c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008380:	d02b      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008386:	d820      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800838c:	d012      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800838e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008392:	d81a      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d022      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800839c:	d115      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a2:	3308      	adds	r3, #8
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f002 f878 	bl	800a49c <RCCEx_PLL2_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083b2:	e015      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b8:	3328      	adds	r3, #40	; 0x28
 80083ba:	2101      	movs	r1, #1
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 f91f 	bl	800a600 <RCCEx_PLL3_Config>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083c8:	e00a      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083d0:	e006      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083d2:	bf00      	nop
 80083d4:	e004      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083d6:	bf00      	nop
 80083d8:	e002      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083da:	bf00      	nop
 80083dc:	e000      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083e8:	4ba3      	ldr	r3, [pc, #652]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083f8:	4a9f      	ldr	r2, [pc, #636]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083fa:	430b      	orrs	r3, r1
 80083fc:	6593      	str	r3, [r2, #88]	; 0x58
 80083fe:	e003      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008418:	2300      	movs	r3, #0
 800841a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800841e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008422:	460b      	mov	r3, r1
 8008424:	4313      	orrs	r3, r2
 8008426:	d037      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008432:	d00e      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008438:	d816      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d018      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800843e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008442:	d111      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008444:	4b8c      	ldr	r3, [pc, #560]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	4a8b      	ldr	r2, [pc, #556]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800844a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800844e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008450:	e00f      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008456:	3308      	adds	r3, #8
 8008458:	2101      	movs	r1, #1
 800845a:	4618      	mov	r0, r3
 800845c:	f002 f81e 	bl	800a49c <RCCEx_PLL2_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800847a:	4b7f      	ldr	r3, [pc, #508]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800847c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008488:	4a7b      	ldr	r2, [pc, #492]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848a:	430b      	orrs	r3, r1
 800848c:	6513      	str	r3, [r2, #80]	; 0x50
 800848e:	e003      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80084a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4313      	orrs	r3, r2
 80084b6:	d039      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d81c      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	08008505 	.word	0x08008505
 80084cc:	080084d9 	.word	0x080084d9
 80084d0:	080084e7 	.word	0x080084e7
 80084d4:	08008505 	.word	0x08008505
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084d8:	4b67      	ldr	r3, [pc, #412]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	4a66      	ldr	r2, [pc, #408]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084e4:	e00f      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ea:	3308      	adds	r3, #8
 80084ec:	2102      	movs	r1, #2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 ffd4 	bl	800a49c <RCCEx_PLL2_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084fa:	e004      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008502:	e000      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800850e:	4b5a      	ldr	r3, [pc, #360]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	f023 0103 	bic.w	r1, r3, #3
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851c:	4a56      	ldr	r2, [pc, #344]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800851e:	430b      	orrs	r3, r1
 8008520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008522:	e003      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800853c:	2300      	movs	r3, #0
 800853e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008542:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008546:	460b      	mov	r3, r1
 8008548:	4313      	orrs	r3, r2
 800854a:	f000 809f 	beq.w	800868c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800854e:	4b4b      	ldr	r3, [pc, #300]	; (800867c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a4a      	ldr	r2, [pc, #296]	; (800867c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800855a:	f7f8 ff6d 	bl	8001438 <HAL_GetTick>
 800855e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008562:	e00b      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008564:	f7f8 ff68 	bl	8001438 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b64      	cmp	r3, #100	; 0x64
 8008572:	d903      	bls.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800857a:	e005      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800857c:	4b3f      	ldr	r3, [pc, #252]	; (800867c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0ed      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800858c:	2b00      	cmp	r3, #0
 800858e:	d179      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008590:	4b39      	ldr	r3, [pc, #228]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008598:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800859c:	4053      	eors	r3, r2
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d015      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085a6:	4b34      	ldr	r3, [pc, #208]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085b2:	4b31      	ldr	r3, [pc, #196]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b6:	4a30      	ldr	r2, [pc, #192]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085be:	4b2e      	ldr	r3, [pc, #184]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	4a2d      	ldr	r2, [pc, #180]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085ca:	4a2b      	ldr	r2, [pc, #172]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80085d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	d118      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e0:	f7f8 ff2a 	bl	8001438 <HAL_GetTick>
 80085e4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085e8:	e00d      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ea:	f7f8 ff25 	bl	8001438 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085f4:	1ad2      	subs	r2, r2, r3
 80085f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d903      	bls.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008604:	e005      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008606:	4b1c      	ldr	r3, [pc, #112]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0eb      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008616:	2b00      	cmp	r3, #0
 8008618:	d129      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800861a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800862a:	d10e      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800862c:	4b12      	ldr	r3, [pc, #72]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800863c:	091a      	lsrs	r2, r3, #4
 800863e:	4b10      	ldr	r3, [pc, #64]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008640:	4013      	ands	r3, r2
 8008642:	4a0d      	ldr	r2, [pc, #52]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008644:	430b      	orrs	r3, r1
 8008646:	6113      	str	r3, [r2, #16]
 8008648:	e005      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008650:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008654:	6113      	str	r3, [r2, #16]
 8008656:	4b08      	ldr	r3, [pc, #32]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008658:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008666:	4a04      	ldr	r2, [pc, #16]	; (8008678 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008668:	430b      	orrs	r3, r1
 800866a:	6713      	str	r3, [r2, #112]	; 0x70
 800866c:	e00e      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008676:	e009      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008678:	58024400 	.word	0x58024400
 800867c:	58024800 	.word	0x58024800
 8008680:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800868c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f002 0301 	and.w	r3, r2, #1
 8008698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800869c:	2300      	movs	r3, #0
 800869e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f000 8089 	beq.w	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b4:	2b28      	cmp	r3, #40	; 0x28
 80086b6:	d86b      	bhi.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	08008799 	.word	0x08008799
 80086c4:	08008791 	.word	0x08008791
 80086c8:	08008791 	.word	0x08008791
 80086cc:	08008791 	.word	0x08008791
 80086d0:	08008791 	.word	0x08008791
 80086d4:	08008791 	.word	0x08008791
 80086d8:	08008791 	.word	0x08008791
 80086dc:	08008791 	.word	0x08008791
 80086e0:	08008765 	.word	0x08008765
 80086e4:	08008791 	.word	0x08008791
 80086e8:	08008791 	.word	0x08008791
 80086ec:	08008791 	.word	0x08008791
 80086f0:	08008791 	.word	0x08008791
 80086f4:	08008791 	.word	0x08008791
 80086f8:	08008791 	.word	0x08008791
 80086fc:	08008791 	.word	0x08008791
 8008700:	0800877b 	.word	0x0800877b
 8008704:	08008791 	.word	0x08008791
 8008708:	08008791 	.word	0x08008791
 800870c:	08008791 	.word	0x08008791
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008791 	.word	0x08008791
 8008720:	08008799 	.word	0x08008799
 8008724:	08008791 	.word	0x08008791
 8008728:	08008791 	.word	0x08008791
 800872c:	08008791 	.word	0x08008791
 8008730:	08008791 	.word	0x08008791
 8008734:	08008791 	.word	0x08008791
 8008738:	08008791 	.word	0x08008791
 800873c:	08008791 	.word	0x08008791
 8008740:	08008799 	.word	0x08008799
 8008744:	08008791 	.word	0x08008791
 8008748:	08008791 	.word	0x08008791
 800874c:	08008791 	.word	0x08008791
 8008750:	08008791 	.word	0x08008791
 8008754:	08008791 	.word	0x08008791
 8008758:	08008791 	.word	0x08008791
 800875c:	08008791 	.word	0x08008791
 8008760:	08008799 	.word	0x08008799
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008768:	3308      	adds	r3, #8
 800876a:	2101      	movs	r1, #1
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fe95 	bl	800a49c <RCCEx_PLL2_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008778:	e00f      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877e:	3328      	adds	r3, #40	; 0x28
 8008780:	2101      	movs	r1, #1
 8008782:	4618      	mov	r0, r3
 8008784:	f001 ff3c 	bl	800a600 <RCCEx_PLL3_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800878e:	e004      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008796:	e000      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800879a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087a2:	4bbf      	ldr	r3, [pc, #764]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b0:	4abb      	ldr	r2, [pc, #748]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087b2:	430b      	orrs	r3, r1
 80087b4:	6553      	str	r3, [r2, #84]	; 0x54
 80087b6:	e003      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f002 0302 	and.w	r3, r2, #2
 80087cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087d0:	2300      	movs	r3, #0
 80087d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80087da:	460b      	mov	r3, r1
 80087dc:	4313      	orrs	r3, r2
 80087de:	d041      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d824      	bhi.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	0800883d 	.word	0x0800883d
 80087f4:	08008809 	.word	0x08008809
 80087f8:	0800881f 	.word	0x0800881f
 80087fc:	0800883d 	.word	0x0800883d
 8008800:	0800883d 	.word	0x0800883d
 8008804:	0800883d 	.word	0x0800883d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880c:	3308      	adds	r3, #8
 800880e:	2101      	movs	r1, #1
 8008810:	4618      	mov	r0, r3
 8008812:	f001 fe43 	bl	800a49c <RCCEx_PLL2_Config>
 8008816:	4603      	mov	r3, r0
 8008818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800881c:	e00f      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	3328      	adds	r3, #40	; 0x28
 8008824:	2101      	movs	r1, #1
 8008826:	4618      	mov	r0, r3
 8008828:	f001 feea 	bl	800a600 <RCCEx_PLL3_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008832:	e004      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800883a:	e000      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800883c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008846:	4b96      	ldr	r3, [pc, #600]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	f023 0107 	bic.w	r1, r3, #7
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008854:	4a92      	ldr	r2, [pc, #584]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008856:	430b      	orrs	r3, r1
 8008858:	6553      	str	r3, [r2, #84]	; 0x54
 800885a:	e003      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f002 0304 	and.w	r3, r2, #4
 8008870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008874:	2300      	movs	r3, #0
 8008876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800887a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800887e:	460b      	mov	r3, r1
 8008880:	4313      	orrs	r3, r2
 8008882:	d044      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800888c:	2b05      	cmp	r3, #5
 800888e:	d825      	bhi.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088e5 	.word	0x080088e5
 800889c:	080088b1 	.word	0x080088b1
 80088a0:	080088c7 	.word	0x080088c7
 80088a4:	080088e5 	.word	0x080088e5
 80088a8:	080088e5 	.word	0x080088e5
 80088ac:	080088e5 	.word	0x080088e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b4:	3308      	adds	r3, #8
 80088b6:	2101      	movs	r1, #1
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fdef 	bl	800a49c <RCCEx_PLL2_Config>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088c4:	e00f      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ca:	3328      	adds	r3, #40	; 0x28
 80088cc:	2101      	movs	r1, #1
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 fe96 	bl	800a600 <RCCEx_PLL3_Config>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088da:	e004      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088e2:	e000      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80088e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10b      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088ee:	4b6c      	ldr	r3, [pc, #432]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	f023 0107 	bic.w	r1, r3, #7
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088fe:	4a68      	ldr	r2, [pc, #416]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008900:	430b      	orrs	r3, r1
 8008902:	6593      	str	r3, [r2, #88]	; 0x58
 8008904:	e003      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800890a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f002 0320 	and.w	r3, r2, #32
 800891a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800891e:	2300      	movs	r3, #0
 8008920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008928:	460b      	mov	r3, r1
 800892a:	4313      	orrs	r3, r2
 800892c:	d055      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800893a:	d033      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800893c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008940:	d82c      	bhi.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008946:	d02f      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800894c:	d826      	bhi.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800894e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008952:	d02b      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008958:	d820      	bhi.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800895a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800895e:	d012      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008964:	d81a      	bhi.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d022      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800896a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800896e:	d115      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008974:	3308      	adds	r3, #8
 8008976:	2100      	movs	r1, #0
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fd8f 	bl	800a49c <RCCEx_PLL2_Config>
 800897e:	4603      	mov	r3, r0
 8008980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008984:	e015      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898a:	3328      	adds	r3, #40	; 0x28
 800898c:	2102      	movs	r1, #2
 800898e:	4618      	mov	r0, r3
 8008990:	f001 fe36 	bl	800a600 <RCCEx_PLL3_Config>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800899a:	e00a      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089a2:	e006      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089a4:	bf00      	nop
 80089a6:	e004      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089a8:	bf00      	nop
 80089aa:	e002      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089ac:	bf00      	nop
 80089ae:	e000      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10b      	bne.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ba:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ca:	4a35      	ldr	r2, [pc, #212]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6553      	str	r3, [r2, #84]	; 0x54
 80089d0:	e003      	b.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80089e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089ea:	2300      	movs	r3, #0
 80089ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4313      	orrs	r3, r2
 80089f8:	d058      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a06:	d033      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a0c:	d82c      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a12:	d02f      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a18:	d826      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a1e:	d02b      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a24:	d820      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2a:	d012      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a30:	d81a      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d022      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a3a:	d115      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a40:	3308      	adds	r3, #8
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 fd29 	bl	800a49c <RCCEx_PLL2_Config>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a50:	e015      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a56:	3328      	adds	r3, #40	; 0x28
 8008a58:	2102      	movs	r1, #2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 fdd0 	bl	800a600 <RCCEx_PLL3_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a66:	e00a      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a6e:	e006      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a70:	bf00      	nop
 8008a72:	e004      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a74:	bf00      	nop
 8008a76:	e002      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a78:	bf00      	nop
 8008a7a:	e000      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10e      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a86:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a96:	4a02      	ldr	r2, [pc, #8]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a9c:	e006      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ac2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	d055      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ad4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ad8:	d033      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ada:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ade:	d82c      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae4:	d02f      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aea:	d826      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008aec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008af0:	d02b      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008af2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008af6:	d820      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008afc:	d012      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b02:	d81a      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d022      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b0c:	d115      	bne.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b12:	3308      	adds	r3, #8
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fcc0 	bl	800a49c <RCCEx_PLL2_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b22:	e015      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	3328      	adds	r3, #40	; 0x28
 8008b2a:	2102      	movs	r1, #2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fd67 	bl	800a600 <RCCEx_PLL3_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b38:	e00a      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b40:	e006      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b42:	bf00      	nop
 8008b44:	e004      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b58:	4ba1      	ldr	r3, [pc, #644]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b68:	4a9d      	ldr	r2, [pc, #628]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b6e:	e003      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f002 0308 	and.w	r3, r2, #8
 8008b84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008b92:	460b      	mov	r3, r1
 8008b94:	4313      	orrs	r3, r2
 8008b96:	d01e      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008baa:	3328      	adds	r3, #40	; 0x28
 8008bac:	2102      	movs	r1, #2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 fd26 	bl	800a600 <RCCEx_PLL3_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008bc0:	4b87      	ldr	r3, [pc, #540]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd0:	4a83      	ldr	r2, [pc, #524]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f002 0310 	and.w	r3, r2, #16
 8008be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008be6:	2300      	movs	r3, #0
 8008be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008bec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	d01e      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c02:	d10c      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c08:	3328      	adds	r3, #40	; 0x28
 8008c0a:	2102      	movs	r1, #2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 fcf7 	bl	800a600 <RCCEx_PLL3_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c1e:	4b70      	ldr	r3, [pc, #448]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c2e:	4a6c      	ldr	r2, [pc, #432]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c30:	430b      	orrs	r3, r1
 8008c32:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d03e      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c60:	d022      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c66:	d81b      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c70:	d00b      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008c72:	e015      	b.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c78:	3308      	adds	r3, #8
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 fc0d 	bl	800a49c <RCCEx_PLL2_Config>
 8008c82:	4603      	mov	r3, r0
 8008c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c88:	e00f      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8e:	3328      	adds	r3, #40	; 0x28
 8008c90:	2102      	movs	r1, #2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f001 fcb4 	bl	800a600 <RCCEx_PLL3_Config>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c9e:	e004      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ca6:	e000      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10b      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cb2:	4b4b      	ldr	r3, [pc, #300]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cc2:	4a47      	ldr	r2, [pc, #284]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8008cc8:	e003      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008cde:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ce4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d03b      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cfa:	d01f      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d00:	d818      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d06:	d003      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d0c:	d007      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008d0e:	e011      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d10:	4b33      	ldr	r3, [pc, #204]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a32      	ldr	r2, [pc, #200]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d1c:	e00f      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d22:	3328      	adds	r3, #40	; 0x28
 8008d24:	2101      	movs	r1, #1
 8008d26:	4618      	mov	r0, r3
 8008d28:	f001 fc6a 	bl	800a600 <RCCEx_PLL3_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d32:	e004      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d3a:	e000      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d46:	4b26      	ldr	r3, [pc, #152]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d56:	4a22      	ldr	r2, [pc, #136]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	6553      	str	r3, [r2, #84]	; 0x54
 8008d5c:	e003      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d72:	673b      	str	r3, [r7, #112]	; 0x70
 8008d74:	2300      	movs	r3, #0
 8008d76:	677b      	str	r3, [r7, #116]	; 0x74
 8008d78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	d034      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d90:	d007      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008d92:	e011      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008da0:	e00e      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da6:	3308      	adds	r3, #8
 8008da8:	2102      	movs	r1, #2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 fb76 	bl	800a49c <RCCEx_PLL2_Config>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008db6:	e003      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd6:	4a02      	ldr	r2, [pc, #8]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ddc:	e006      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008df8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008e02:	460b      	mov	r3, r1
 8008e04:	4313      	orrs	r3, r2
 8008e06:	d00c      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0c:	3328      	adds	r3, #40	; 0x28
 8008e0e:	2102      	movs	r1, #2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 fbf5 	bl	800a600 <RCCEx_PLL3_Config>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e30:	2300      	movs	r3, #0
 8008e32:	667b      	str	r3, [r7, #100]	; 0x64
 8008e34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d038      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e4a:	d018      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e50:	d811      	bhi.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e56:	d014      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5c:	d80b      	bhi.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d011      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e66:	d106      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e68:	4bc3      	ldr	r3, [pc, #780]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	4ac2      	ldr	r2, [pc, #776]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e74:	e008      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e7c:	e004      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e7e:	bf00      	nop
 8008e80:	e002      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e82:	bf00      	nop
 8008e84:	e000      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e90:	4bb9      	ldr	r3, [pc, #740]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea0:	4ab5      	ldr	r2, [pc, #724]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	6553      	str	r3, [r2, #84]	; 0x54
 8008ea6:	e003      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ec2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	d009      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ecc:	4baa      	ldr	r3, [pc, #680]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eda:	4aa7      	ldr	r2, [pc, #668]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008edc:	430b      	orrs	r3, r1
 8008ede:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008eec:	653b      	str	r3, [r7, #80]	; 0x50
 8008eee:	2300      	movs	r3, #0
 8008ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ef2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	d00a      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008efc:	4b9e      	ldr	r3, [pc, #632]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008f0c:	4a9a      	ldr	r2, [pc, #616]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f20:	2300      	movs	r3, #0
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	d009      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f2e:	4b92      	ldr	r3, [pc, #584]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f32:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3c:	4a8e      	ldr	r2, [pc, #568]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f50:	2300      	movs	r3, #0
 8008f52:	647b      	str	r3, [r7, #68]	; 0x44
 8008f54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	d00e      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f5e:	4b86      	ldr	r3, [pc, #536]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	4a85      	ldr	r2, [pc, #532]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f68:	6113      	str	r3, [r2, #16]
 8008f6a:	4b83      	ldr	r3, [pc, #524]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f6c:	6919      	ldr	r1, [r3, #16]
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008f76:	4a80      	ldr	r2, [pc, #512]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008f92:	460b      	mov	r3, r1
 8008f94:	4313      	orrs	r3, r2
 8008f96:	d009      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f98:	4b77      	ldr	r3, [pc, #476]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	4a74      	ldr	r2, [pc, #464]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8008fba:	2300      	movs	r3, #0
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	d00a      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fc8:	4b6b      	ldr	r3, [pc, #428]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fcc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fd8:	4a67      	ldr	r2, [pc, #412]	; (8009178 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	d011      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffe:	3308      	adds	r3, #8
 8009000:	2100      	movs	r1, #0
 8009002:	4618      	mov	r0, r3
 8009004:	f001 fa4a 	bl	800a49c <RCCEx_PLL2_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800900e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800901a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	2100      	movs	r1, #0
 8009028:	6239      	str	r1, [r7, #32]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
 8009030:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009034:	460b      	mov	r3, r1
 8009036:	4313      	orrs	r3, r2
 8009038:	d011      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800903a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903e:	3308      	adds	r3, #8
 8009040:	2101      	movs	r1, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f001 fa2a 	bl	800a49c <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800904e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800905a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	2100      	movs	r1, #0
 8009068:	61b9      	str	r1, [r7, #24]
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009074:	460b      	mov	r3, r1
 8009076:	4313      	orrs	r3, r2
 8009078:	d011      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907e:	3308      	adds	r3, #8
 8009080:	2102      	movs	r1, #2
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fa0a 	bl	800a49c <RCCEx_PLL2_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800908e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800909a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	2100      	movs	r1, #0
 80090a8:	6139      	str	r1, [r7, #16]
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090b4:	460b      	mov	r3, r1
 80090b6:	4313      	orrs	r3, r2
 80090b8:	d011      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090be:	3328      	adds	r3, #40	; 0x28
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 fa9c 	bl	800a600 <RCCEx_PLL3_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80090ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	2100      	movs	r1, #0
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	f003 0310 	and.w	r3, r3, #16
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090f4:	460b      	mov	r3, r1
 80090f6:	4313      	orrs	r3, r2
 80090f8:	d011      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fe:	3328      	adds	r3, #40	; 0x28
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fa7c 	bl	800a600 <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800910e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800911a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800911e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	2100      	movs	r1, #0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009134:	460b      	mov	r3, r1
 8009136:	4313      	orrs	r3, r2
 8009138:	d011      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913e:	3328      	adds	r3, #40	; 0x28
 8009140:	2102      	movs	r1, #2
 8009142:	4618      	mov	r0, r3
 8009144:	f001 fa5c 	bl	800a600 <RCCEx_PLL3_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800914e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800915a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800915e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	e000      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
}
 800916c:	4618      	mov	r0, r3
 800916e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009172:	46bd      	mov	sp, r7
 8009174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009178:	58024400 	.word	0x58024400

0800917c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b090      	sub	sp, #64	; 0x40
 8009180:	af00      	add	r7, sp, #0
 8009182:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800918e:	430b      	orrs	r3, r1
 8009190:	f040 8094 	bne.w	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009194:	4b9e      	ldr	r3, [pc, #632]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	f200 8087 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80091a6:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	080091c1 	.word	0x080091c1
 80091b0:	080091e9 	.word	0x080091e9
 80091b4:	08009211 	.word	0x08009211
 80091b8:	080092ad 	.word	0x080092ad
 80091bc:	08009239 	.word	0x08009239
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091c0:	4b93      	ldr	r3, [pc, #588]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091cc:	d108      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091d2:	4618      	mov	r0, r3
 80091d4:	f001 f810 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091dc:	f000 bd45 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e4:	f000 bd41 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091e8:	4b89      	ldr	r3, [pc, #548]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091f4:	d108      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091f6:	f107 0318 	add.w	r3, r7, #24
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fd54 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009204:	f000 bd31 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800920c:	f000 bd2d 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009210:	4b7f      	ldr	r3, [pc, #508]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800921c:	d108      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800921e:	f107 030c 	add.w	r3, r7, #12
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fe94 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800922c:	f000 bd1d 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009234:	f000 bd19 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009238:	4b75      	ldr	r3, [pc, #468]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800923a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800923c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009240:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009242:	4b73      	ldr	r3, [pc, #460]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b04      	cmp	r3, #4
 800924c:	d10c      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009254:	4b6e      	ldr	r3, [pc, #440]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	4a6d      	ldr	r2, [pc, #436]	; (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009260:	fa22 f303 	lsr.w	r3, r2, r3
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009266:	e01f      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009268:	4b69      	ldr	r3, [pc, #420]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009274:	d106      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800927c:	d102      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800927e:	4b66      	ldr	r3, [pc, #408]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009282:	e011      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009284:	4b62      	ldr	r3, [pc, #392]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009290:	d106      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009298:	d102      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800929a:	4b60      	ldr	r3, [pc, #384]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929e:	e003      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092a4:	f000 bce1 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092a8:	f000 bcdf 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092ac:	4b5c      	ldr	r3, [pc, #368]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80092ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b0:	f000 bcdb 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b8:	f000 bcd7 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80092bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80092c4:	430b      	orrs	r3, r1
 80092c6:	f040 80ad 	bne.w	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80092ca:	4b51      	ldr	r3, [pc, #324]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80092d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092da:	d056      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e2:	f200 8090 	bhi.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	2bc0      	cmp	r3, #192	; 0xc0
 80092ea:	f000 8088 	beq.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	2bc0      	cmp	r3, #192	; 0xc0
 80092f2:	f200 8088 	bhi.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	2b80      	cmp	r3, #128	; 0x80
 80092fa:	d032      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	2b80      	cmp	r3, #128	; 0x80
 8009300:	f200 8081 	bhi.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b40      	cmp	r3, #64	; 0x40
 800930e:	d014      	beq.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009310:	e079      	b.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009312:	4b3f      	ldr	r3, [pc, #252]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800931e:	d108      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009324:	4618      	mov	r0, r3
 8009326:	f000 ff67 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800932e:	f000 bc9c 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009336:	f000 bc98 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800933a:	4b35      	ldr	r3, [pc, #212]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009346:	d108      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009348:	f107 0318 	add.w	r3, r7, #24
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fcab 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009356:	f000 bc88 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800935e:	f000 bc84 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009362:	4b2b      	ldr	r3, [pc, #172]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800936a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800936e:	d108      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009370:	f107 030c 	add.w	r3, r7, #12
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fdeb 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937e:	f000 bc74 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009386:	f000 bc70 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800938a:	4b21      	ldr	r3, [pc, #132]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800938c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009392:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009394:	4b1e      	ldr	r3, [pc, #120]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b04      	cmp	r3, #4
 800939e:	d10c      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a6:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	08db      	lsrs	r3, r3, #3
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	4a18      	ldr	r2, [pc, #96]	; (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b8:	e01f      	b.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093ba:	4b15      	ldr	r3, [pc, #84]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c6:	d106      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80093c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ce:	d102      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d4:	e011      	b.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093d6:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093e2:	d106      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ea:	d102      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093ec:	4b0b      	ldr	r3, [pc, #44]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093f0:	e003      	b.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093f6:	f000 bc38 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093fa:	f000 bc36 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093fe:	4b08      	ldr	r3, [pc, #32]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009402:	f000 bc32 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800940a:	f000 bc2e 	b.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800940e:	bf00      	nop
 8009410:	58024400 	.word	0x58024400
 8009414:	03d09000 	.word	0x03d09000
 8009418:	003d0900 	.word	0x003d0900
 800941c:	017d7840 	.word	0x017d7840
 8009420:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009428:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800942c:	430b      	orrs	r3, r1
 800942e:	f040 809c 	bne.w	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009432:	4b9e      	ldr	r3, [pc, #632]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009436:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800943a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009442:	d054      	beq.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800944a:	f200 808b 	bhi.w	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009454:	f000 8083 	beq.w	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800945e:	f200 8081 	bhi.w	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009468:	d02f      	beq.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009470:	d878      	bhi.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	2b00      	cmp	r3, #0
 8009476:	d004      	beq.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800947e:	d012      	beq.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009480:	e070      	b.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009482:	4b8a      	ldr	r3, [pc, #552]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800948a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800948e:	d107      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009494:	4618      	mov	r0, r3
 8009496:	f000 feaf 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949e:	e3e4      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a4:	e3e1      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a6:	4b81      	ldr	r3, [pc, #516]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b2:	d107      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b4:	f107 0318 	add.w	r3, r7, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fbf5 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c2:	e3d2      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c8:	e3cf      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ca:	4b78      	ldr	r3, [pc, #480]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d6:	d107      	bne.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d8:	f107 030c 	add.w	r3, r7, #12
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fd37 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094e6:	e3c0      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ec:	e3bd      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094ee:	4b6f      	ldr	r3, [pc, #444]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094f8:	4b6c      	ldr	r3, [pc, #432]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b04      	cmp	r3, #4
 8009502:	d10c      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800950a:	4b68      	ldr	r3, [pc, #416]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	4a66      	ldr	r2, [pc, #408]	; (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009516:	fa22 f303 	lsr.w	r3, r2, r3
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951c:	e01e      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800951e:	4b63      	ldr	r3, [pc, #396]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952a:	d106      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800952c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009532:	d102      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009534:	4b5f      	ldr	r3, [pc, #380]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009538:	e010      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800953a:	4b5c      	ldr	r3, [pc, #368]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009546:	d106      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009550:	4b59      	ldr	r3, [pc, #356]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009554:	e002      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800955a:	e386      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800955c:	e385      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800955e:	4b57      	ldr	r3, [pc, #348]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009562:	e382      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009568:	e37f      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800956a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009572:	430b      	orrs	r3, r1
 8009574:	f040 80a7 	bne.w	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009578:	4b4c      	ldr	r3, [pc, #304]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800957a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009580:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009588:	d055      	beq.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009590:	f200 8096 	bhi.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800959a:	f000 8084 	beq.w	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095a4:	f200 808c 	bhi.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ae:	d030      	beq.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095b6:	f200 8083 	bhi.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d004      	beq.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095c6:	d012      	beq.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80095c8:	e07a      	b.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095ca:	4b38      	ldr	r3, [pc, #224]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095d6:	d107      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fe0b 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e6:	e340      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ec:	e33d      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095ee:	4b2f      	ldr	r3, [pc, #188]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095fa:	d107      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fc:	f107 0318 	add.w	r3, r7, #24
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fb51 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960a:	e32e      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009610:	e32b      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009612:	4b26      	ldr	r3, [pc, #152]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800961a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961e:	d107      	bne.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fc93 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800962e:	e31c      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009634:	e319      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009636:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800963e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009640:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b04      	cmp	r3, #4
 800964a:	d10c      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800964c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964e:	2b00      	cmp	r3, #0
 8009650:	d109      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009652:	4b16      	ldr	r3, [pc, #88]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	08db      	lsrs	r3, r3, #3
 8009658:	f003 0303 	and.w	r3, r3, #3
 800965c:	4a14      	ldr	r2, [pc, #80]	; (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800965e:	fa22 f303 	lsr.w	r3, r2, r3
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009664:	e01e      	b.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009666:	4b11      	ldr	r3, [pc, #68]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009672:	d106      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967a:	d102      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009680:	e010      	b.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800968a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800968e:	d106      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009696:	d102      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009698:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800969c:	e002      	b.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80096a2:	e2e2      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096a4:	e2e1      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096a6:	4b05      	ldr	r3, [pc, #20]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80096a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096aa:	e2de      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096ac:	58024400 	.word	0x58024400
 80096b0:	03d09000 	.word	0x03d09000
 80096b4:	003d0900 	.word	0x003d0900
 80096b8:	017d7840 	.word	0x017d7840
 80096bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c4:	e2d1      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ca:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80096ce:	430b      	orrs	r3, r1
 80096d0:	f040 809c 	bne.w	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80096d4:	4b93      	ldr	r3, [pc, #588]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80096dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e4:	d054      	beq.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ec:	f200 808b 	bhi.w	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096f6:	f000 8083 	beq.w	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009700:	f200 8081 	bhi.w	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970a:	d02f      	beq.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009712:	d878      	bhi.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009720:	d012      	beq.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009722:	e070      	b.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009724:	4b7f      	ldr	r3, [pc, #508]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009730:	d107      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fd5e 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009740:	e293      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009746:	e290      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009748:	4b76      	ldr	r3, [pc, #472]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009754:	d107      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009756:	f107 0318 	add.w	r3, r7, #24
 800975a:	4618      	mov	r0, r3
 800975c:	f000 faa4 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009764:	e281      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976a:	e27e      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800976c:	4b6d      	ldr	r3, [pc, #436]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009778:	d107      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800977a:	f107 030c 	add.w	r3, r7, #12
 800977e:	4618      	mov	r0, r3
 8009780:	f000 fbe6 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009788:	e26f      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800978e:	e26c      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009790:	4b64      	ldr	r3, [pc, #400]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009798:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800979a:	4b62      	ldr	r3, [pc, #392]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d10c      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80097a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ac:	4b5d      	ldr	r3, [pc, #372]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	08db      	lsrs	r3, r3, #3
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	4a5c      	ldr	r2, [pc, #368]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80097b8:	fa22 f303 	lsr.w	r3, r2, r3
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097be:	e01e      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097c0:	4b58      	ldr	r3, [pc, #352]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097cc:	d106      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097d4:	d102      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097d6:	4b55      	ldr	r3, [pc, #340]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097da:	e010      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097dc:	4b51      	ldr	r3, [pc, #324]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e8:	d106      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f0:	d102      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097f2:	4b4f      	ldr	r3, [pc, #316]	; (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f6:	e002      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80097fc:	e235      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097fe:	e234      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009800:	4b4c      	ldr	r3, [pc, #304]	; (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009804:	e231      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800980a:	e22e      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800980c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009810:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009814:	430b      	orrs	r3, r1
 8009816:	f040 808f 	bne.w	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800981a:	4b42      	ldr	r3, [pc, #264]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800981c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009822:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800982a:	d06b      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009832:	d874      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800983a:	d056      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009842:	d86c      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800984a:	d03b      	beq.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009852:	d864      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800985a:	d021      	beq.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009862:	d85c      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009870:	d004      	beq.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009872:	e054      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009874:	f7fe fa20 	bl	8007cb8 <HAL_RCC_GetPCLK1Freq>
 8009878:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800987a:	e1f6      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800987c:	4b29      	ldr	r3, [pc, #164]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009888:	d107      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988a:	f107 0318 	add.w	r3, r7, #24
 800988e:	4618      	mov	r0, r3
 8009890:	f000 fa0a 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009898:	e1e7      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800989e:	e1e4      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098a0:	4b20      	ldr	r3, [pc, #128]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ac:	d107      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ae:	f107 030c 	add.w	r3, r7, #12
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fb4c 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098bc:	e1d5      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c2:	e1d2      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098c4:	4b17      	ldr	r3, [pc, #92]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d109      	bne.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098d0:	4b14      	ldr	r3, [pc, #80]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	08db      	lsrs	r3, r3, #3
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	4a13      	ldr	r2, [pc, #76]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80098dc:	fa22 f303 	lsr.w	r3, r2, r3
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e2:	e1c2      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098e8:	e1bf      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098ea:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f6:	d102      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fc:	e1b5      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009902:	e1b2      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009910:	d102      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009912:	4b07      	ldr	r3, [pc, #28]	; (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009916:	e1a8      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800991c:	e1a5      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009922:	e1a2      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009924:	58024400 	.word	0x58024400
 8009928:	03d09000 	.word	0x03d09000
 800992c:	003d0900 	.word	0x003d0900
 8009930:	017d7840 	.word	0x017d7840
 8009934:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800993c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009940:	430b      	orrs	r3, r1
 8009942:	d173      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009944:	4b9c      	ldr	r3, [pc, #624]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800994c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009954:	d02f      	beq.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800995c:	d863      	bhi.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996a:	d012      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800996c:	e05b      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800996e:	4b92      	ldr	r3, [pc, #584]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800997a:	d107      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800997c:	f107 0318 	add.w	r3, r7, #24
 8009980:	4618      	mov	r0, r3
 8009982:	f000 f991 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800998a:	e16e      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009990:	e16b      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009992:	4b89      	ldr	r3, [pc, #548]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800999a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800999e:	d107      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099a0:	f107 030c 	add.w	r3, r7, #12
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fad3 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ae:	e15c      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099b4:	e159      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099b6:	4b80      	ldr	r3, [pc, #512]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099c0:	4b7d      	ldr	r3, [pc, #500]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d10c      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80099cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099d2:	4b79      	ldr	r3, [pc, #484]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	08db      	lsrs	r3, r3, #3
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	4a77      	ldr	r2, [pc, #476]	; (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80099de:	fa22 f303 	lsr.w	r3, r2, r3
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099e4:	e01e      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099e6:	4b74      	ldr	r3, [pc, #464]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f2:	d106      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80099f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099fa:	d102      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099fc:	4b70      	ldr	r3, [pc, #448]	; (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a00:	e010      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a02:	4b6d      	ldr	r3, [pc, #436]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a0e:	d106      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a16:	d102      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a18:	4b6a      	ldr	r3, [pc, #424]	; (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a1c:	e002      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a22:	e122      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a24:	e121      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a2a:	e11e      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a30:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009a34:	430b      	orrs	r3, r1
 8009a36:	d133      	bne.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a38:	4b5f      	ldr	r3, [pc, #380]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4e:	d012      	beq.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009a50:	e023      	b.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a52:	4b59      	ldr	r3, [pc, #356]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a5e:	d107      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 fbc7 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a6e:	e0fc      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a74:	e0f9      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a76:	4b50      	ldr	r3, [pc, #320]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a82:	d107      	bne.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a84:	f107 0318 	add.w	r3, r7, #24
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f90d 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a92:	e0ea      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a98:	e0e7      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a9e:	e0e4      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	f040 808d 	bne.w	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009aae:	4b42      	ldr	r3, [pc, #264]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009ab6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009abe:	d06b      	beq.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ac6:	d874      	bhi.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ace:	d056      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad6:	d86c      	bhi.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ade:	d03b      	beq.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ae6:	d864      	bhi.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aee:	d021      	beq.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af6:	d85c      	bhi.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d004      	beq.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b04:	d004      	beq.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009b06:	e054      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009b08:	f000 f8b8 	bl	8009c7c <HAL_RCCEx_GetD3PCLK1Freq>
 8009b0c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b0e:	e0ac      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b10:	4b29      	ldr	r3, [pc, #164]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b1c:	d107      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1e:	f107 0318 	add.w	r3, r7, #24
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f8c0 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b2c:	e09d      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b32:	e09a      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b34:	4b20      	ldr	r3, [pc, #128]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b40:	d107      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b42:	f107 030c 	add.w	r3, r7, #12
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fa02 	bl	8009f50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b50:	e08b      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b56:	e088      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d109      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b64:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	08db      	lsrs	r3, r3, #3
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	4a13      	ldr	r2, [pc, #76]	; (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009b70:	fa22 f303 	lsr.w	r3, r2, r3
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b76:	e078      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b7c:	e075      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8a:	d102      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b90:	e06b      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b96:	e068      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba4:	d102      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009baa:	e05e      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb0:	e05b      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb6:	e058      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bb8:	58024400 	.word	0x58024400
 8009bbc:	03d09000 	.word	0x03d09000
 8009bc0:	003d0900 	.word	0x003d0900
 8009bc4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bcc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	d148      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009bd4:	4b27      	ldr	r3, [pc, #156]	; (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bdc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009be4:	d02a      	beq.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bec:	d838      	bhi.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bfa:	d00d      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009bfc:	e030      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bfe:	4b1d      	ldr	r3, [pc, #116]	; (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c0a:	d102      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009c0c:	4b1a      	ldr	r3, [pc, #104]	; (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c10:	e02b      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c16:	e028      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c18:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c24:	d107      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fae4 	bl	800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c34:	e019      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c3a:	e016      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c3c:	4b0d      	ldr	r3, [pc, #52]	; (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c48:	d107      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c4a:	f107 0318 	add.w	r3, r7, #24
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 f82a 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c58:	e007      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c5e:	e004      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c64:	e001      	b.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3740      	adds	r7, #64	; 0x40
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	58024400 	.word	0x58024400
 8009c78:	017d7840 	.word	0x017d7840

08009c7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c80:	f7fd ffea 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8009c84:	4602      	mov	r2, r0
 8009c86:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	091b      	lsrs	r3, r3, #4
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	4904      	ldr	r1, [pc, #16]	; (8009ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c92:	5ccb      	ldrb	r3, [r1, r3]
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	080126f4 	.word	0x080126f4

08009ca8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b089      	sub	sp, #36	; 0x24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cb0:	4ba1      	ldr	r3, [pc, #644]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009cba:	4b9f      	ldr	r3, [pc, #636]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	0b1b      	lsrs	r3, r3, #12
 8009cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cc6:	4b9c      	ldr	r3, [pc, #624]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	091b      	lsrs	r3, r3, #4
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009cd2:	4b99      	ldr	r3, [pc, #612]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd6:	08db      	lsrs	r3, r3, #3
 8009cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	fb02 f303 	mul.w	r3, r2, r3
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8111 	beq.w	8009f18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	f000 8083 	beq.w	8009e04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	f200 80a1 	bhi.w	8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d056      	beq.n	8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d12:	e099      	b.n	8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d14:	4b88      	ldr	r3, [pc, #544]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0320 	and.w	r3, r3, #32
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02d      	beq.n	8009d7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d20:	4b85      	ldr	r3, [pc, #532]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	08db      	lsrs	r3, r3, #3
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	4a84      	ldr	r2, [pc, #528]	; (8009f3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4a:	4b7b      	ldr	r3, [pc, #492]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d7a:	e087      	b.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b6a      	ldr	r3, [pc, #424]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dbe:	e065      	b.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd2:	4b59      	ldr	r3, [pc, #356]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e02:	e043      	b.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b48      	ldr	r3, [pc, #288]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e46:	e021      	b.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5a:	4b37      	ldr	r3, [pc, #220]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e8c:	4b2a      	ldr	r3, [pc, #168]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	0a5b      	lsrs	r3, r3, #9
 8009e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb2:	ee17 2a90 	vmov	r2, s15
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009eba:	4b1f      	ldr	r3, [pc, #124]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebe:	0c1b      	lsrs	r3, r3, #16
 8009ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec4:	ee07 3a90 	vmov	s15, r3
 8009ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee0:	ee17 2a90 	vmov	r2, s15
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eec:	0e1b      	lsrs	r3, r3, #24
 8009eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f0e:	ee17 2a90 	vmov	r2, s15
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f16:	e008      	b.n	8009f2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	609a      	str	r2, [r3, #8]
}
 8009f2a:	bf00      	nop
 8009f2c:	3724      	adds	r7, #36	; 0x24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	03d09000 	.word	0x03d09000
 8009f40:	46000000 	.word	0x46000000
 8009f44:	4c742400 	.word	0x4c742400
 8009f48:	4a742400 	.word	0x4a742400
 8009f4c:	4bbebc20 	.word	0x4bbebc20

08009f50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b089      	sub	sp, #36	; 0x24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f58:	4ba1      	ldr	r3, [pc, #644]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0303 	and.w	r3, r3, #3
 8009f60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f62:	4b9f      	ldr	r3, [pc, #636]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f66:	0d1b      	lsrs	r3, r3, #20
 8009f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f6e:	4b9c      	ldr	r3, [pc, #624]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f7a:	4b99      	ldr	r3, [pc, #612]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7e:	08db      	lsrs	r3, r3, #3
 8009f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	fb02 f303 	mul.w	r3, r2, r3
 8009f8a:	ee07 3a90 	vmov	s15, r3
 8009f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8111 	beq.w	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	f000 8083 	beq.w	800a0ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	f200 80a1 	bhi.w	800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d056      	beq.n	800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fba:	e099      	b.n	800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fbc:	4b88      	ldr	r3, [pc, #544]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0320 	and.w	r3, r3, #32
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d02d      	beq.n	800a024 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fc8:	4b85      	ldr	r3, [pc, #532]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	08db      	lsrs	r3, r3, #3
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	4a84      	ldr	r2, [pc, #528]	; (800a1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff2:	4b7b      	ldr	r3, [pc, #492]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a002:	ed97 6a03 	vldr	s12, [r7, #12]
 800a006:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a022:	e087      	b.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a036:	4b6a      	ldr	r3, [pc, #424]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a046:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a066:	e065      	b.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a07a:	4b59      	ldr	r3, [pc, #356]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0aa:	e043      	b.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	4b48      	ldr	r3, [pc, #288]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ee:	e021      	b.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a102:	4b37      	ldr	r3, [pc, #220]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a112:	ed97 6a03 	vldr	s12, [r7, #12]
 800a116:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a132:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a134:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a138:	0a5b      	lsrs	r3, r3, #9
 800a13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a14a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a14e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a15a:	ee17 2a90 	vmov	r2, s15
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a162:	4b1f      	ldr	r3, [pc, #124]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	0c1b      	lsrs	r3, r3, #16
 800a168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16c:	ee07 3a90 	vmov	s15, r3
 800a170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a17c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a188:	ee17 2a90 	vmov	r2, s15
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a190:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a194:	0e1b      	lsrs	r3, r3, #24
 800a196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1b6:	ee17 2a90 	vmov	r2, s15
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1be:	e008      	b.n	800a1d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]
}
 800a1d2:	bf00      	nop
 800a1d4:	3724      	adds	r7, #36	; 0x24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	58024400 	.word	0x58024400
 800a1e4:	03d09000 	.word	0x03d09000
 800a1e8:	46000000 	.word	0x46000000
 800a1ec:	4c742400 	.word	0x4c742400
 800a1f0:	4a742400 	.word	0x4a742400
 800a1f4:	4bbebc20 	.word	0x4bbebc20

0800a1f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b089      	sub	sp, #36	; 0x24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a200:	4ba0      	ldr	r3, [pc, #640]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a204:	f003 0303 	and.w	r3, r3, #3
 800a208:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a20a:	4b9e      	ldr	r3, [pc, #632]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20e:	091b      	lsrs	r3, r3, #4
 800a210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a214:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a216:	4b9b      	ldr	r3, [pc, #620]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a220:	4b98      	ldr	r3, [pc, #608]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a224:	08db      	lsrs	r3, r3, #3
 800a226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	fb02 f303 	mul.w	r3, r2, r3
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a238:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f000 8111 	beq.w	800a466 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b02      	cmp	r3, #2
 800a248:	f000 8083 	beq.w	800a352 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	f200 80a1 	bhi.w	800a396 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d056      	beq.n	800a30e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a260:	e099      	b.n	800a396 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a262:	4b88      	ldr	r3, [pc, #544]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d02d      	beq.n	800a2ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a26e:	4b85      	ldr	r3, [pc, #532]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	08db      	lsrs	r3, r3, #3
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	4a83      	ldr	r2, [pc, #524]	; (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a27a:	fa22 f303 	lsr.w	r3, r2, r3
 800a27e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	ee07 3a90 	vmov	s15, r3
 800a286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a298:	4b7a      	ldr	r3, [pc, #488]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a0:	ee07 3a90 	vmov	s15, r3
 800a2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2c8:	e087      	b.n	800a3da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2dc:	4b69      	ldr	r3, [pc, #420]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a30c:	e065      	b.n	800a3da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a318:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a494 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a31c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a320:	4b58      	ldr	r3, [pc, #352]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a330:	ed97 6a03 	vldr	s12, [r7, #12]
 800a334:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a340:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a350:	e043      	b.n	800a3da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	ee07 3a90 	vmov	s15, r3
 800a358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a498 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a364:	4b47      	ldr	r3, [pc, #284]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a374:	ed97 6a03 	vldr	s12, [r7, #12]
 800a378:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a37c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a394:	e021      	b.n	800a3da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a3a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a8:	4b36      	ldr	r3, [pc, #216]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a3da:	4b2a      	ldr	r3, [pc, #168]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	0a5b      	lsrs	r3, r3, #9
 800a3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e4:	ee07 3a90 	vmov	s15, r3
 800a3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a400:	ee17 2a90 	vmov	r2, s15
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a408:	4b1e      	ldr	r3, [pc, #120]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40c:	0c1b      	lsrs	r3, r3, #16
 800a40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a41e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a422:	edd7 6a07 	vldr	s13, [r7, #28]
 800a426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a42a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a42e:	ee17 2a90 	vmov	r2, s15
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a436:	4b13      	ldr	r3, [pc, #76]	; (800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43a:	0e1b      	lsrs	r3, r3, #24
 800a43c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a44c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a450:	edd7 6a07 	vldr	s13, [r7, #28]
 800a454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a45c:	ee17 2a90 	vmov	r2, s15
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a464:	e008      	b.n	800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	609a      	str	r2, [r3, #8]
}
 800a478:	bf00      	nop
 800a47a:	3724      	adds	r7, #36	; 0x24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	58024400 	.word	0x58024400
 800a488:	03d09000 	.word	0x03d09000
 800a48c:	46000000 	.word	0x46000000
 800a490:	4c742400 	.word	0x4c742400
 800a494:	4a742400 	.word	0x4a742400
 800a498:	4bbebc20 	.word	0x4bbebc20

0800a49c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4aa:	4b53      	ldr	r3, [pc, #332]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d101      	bne.n	800a4ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e099      	b.n	800a5ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4ba:	4b4f      	ldr	r3, [pc, #316]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a4e      	ldr	r2, [pc, #312]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a4c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a4c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4c6:	f7f6 ffb7 	bl	8001438 <HAL_GetTick>
 800a4ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4cc:	e008      	b.n	800a4e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4ce:	f7f6 ffb3 	bl	8001438 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d901      	bls.n	800a4e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e086      	b.n	800a5ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4e0:	4b45      	ldr	r3, [pc, #276]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f0      	bne.n	800a4ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4ec:	4b42      	ldr	r3, [pc, #264]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	031b      	lsls	r3, r3, #12
 800a4fa:	493f      	ldr	r1, [pc, #252]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	628b      	str	r3, [r1, #40]	; 0x28
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	3b01      	subs	r3, #1
 800a506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	3b01      	subs	r3, #1
 800a510:	025b      	lsls	r3, r3, #9
 800a512:	b29b      	uxth	r3, r3
 800a514:	431a      	orrs	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	041b      	lsls	r3, r3, #16
 800a51e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a522:	431a      	orrs	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	3b01      	subs	r3, #1
 800a52a:	061b      	lsls	r3, r3, #24
 800a52c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a530:	4931      	ldr	r1, [pc, #196]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a532:	4313      	orrs	r3, r2
 800a534:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a536:	4b30      	ldr	r3, [pc, #192]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	492d      	ldr	r1, [pc, #180]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a544:	4313      	orrs	r3, r2
 800a546:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a548:	4b2b      	ldr	r3, [pc, #172]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	f023 0220 	bic.w	r2, r3, #32
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	4928      	ldr	r1, [pc, #160]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a556:	4313      	orrs	r3, r2
 800a558:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a55a:	4b27      	ldr	r3, [pc, #156]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	4a26      	ldr	r2, [pc, #152]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a560:	f023 0310 	bic.w	r3, r3, #16
 800a564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a566:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a56a:	4b24      	ldr	r3, [pc, #144]	; (800a5fc <RCCEx_PLL2_Config+0x160>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	69d2      	ldr	r2, [r2, #28]
 800a572:	00d2      	lsls	r2, r2, #3
 800a574:	4920      	ldr	r1, [pc, #128]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a576:	4313      	orrs	r3, r2
 800a578:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a57a:	4b1f      	ldr	r3, [pc, #124]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57e:	4a1e      	ldr	r2, [pc, #120]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a580:	f043 0310 	orr.w	r3, r3, #16
 800a584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a58c:	4b1a      	ldr	r3, [pc, #104]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a590:	4a19      	ldr	r2, [pc, #100]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a596:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a598:	e00f      	b.n	800a5ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d106      	bne.n	800a5ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5a0:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	4a14      	ldr	r2, [pc, #80]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a5ac:	e005      	b.n	800a5ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b2:	4a11      	ldr	r2, [pc, #68]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a0e      	ldr	r2, [pc, #56]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5c6:	f7f6 ff37 	bl	8001438 <HAL_GetTick>
 800a5ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5cc:	e008      	b.n	800a5e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5ce:	f7f6 ff33 	bl	8001438 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d901      	bls.n	800a5e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e006      	b.n	800a5ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5e0:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <RCCEx_PLL2_Config+0x15c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0f0      	beq.n	800a5ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	ffff0007 	.word	0xffff0007

0800a600 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a60e:	4b53      	ldr	r3, [pc, #332]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b03      	cmp	r3, #3
 800a618:	d101      	bne.n	800a61e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e099      	b.n	800a752 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a61e:	4b4f      	ldr	r3, [pc, #316]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a4e      	ldr	r2, [pc, #312]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a62a:	f7f6 ff05 	bl	8001438 <HAL_GetTick>
 800a62e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a630:	e008      	b.n	800a644 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a632:	f7f6 ff01 	bl	8001438 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d901      	bls.n	800a644 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e086      	b.n	800a752 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a644:	4b45      	ldr	r3, [pc, #276]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1f0      	bne.n	800a632 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a650:	4b42      	ldr	r3, [pc, #264]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	051b      	lsls	r3, r3, #20
 800a65e:	493f      	ldr	r1, [pc, #252]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a660:	4313      	orrs	r3, r2
 800a662:	628b      	str	r3, [r1, #40]	; 0x28
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	3b01      	subs	r3, #1
 800a674:	025b      	lsls	r3, r3, #9
 800a676:	b29b      	uxth	r3, r3
 800a678:	431a      	orrs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	3b01      	subs	r3, #1
 800a680:	041b      	lsls	r3, r3, #16
 800a682:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a686:	431a      	orrs	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	061b      	lsls	r3, r3, #24
 800a690:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a694:	4931      	ldr	r1, [pc, #196]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a696:	4313      	orrs	r3, r2
 800a698:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a69a:	4b30      	ldr	r3, [pc, #192]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	492d      	ldr	r1, [pc, #180]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6ac:	4b2b      	ldr	r3, [pc, #172]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	4928      	ldr	r1, [pc, #160]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6be:	4b27      	ldr	r3, [pc, #156]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c2:	4a26      	ldr	r2, [pc, #152]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6ca:	4b24      	ldr	r3, [pc, #144]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6ce:	4b24      	ldr	r3, [pc, #144]	; (800a760 <RCCEx_PLL3_Config+0x160>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	69d2      	ldr	r2, [r2, #28]
 800a6d6:	00d2      	lsls	r2, r2, #3
 800a6d8:	4920      	ldr	r1, [pc, #128]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6de:	4b1f      	ldr	r3, [pc, #124]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	4a1e      	ldr	r2, [pc, #120]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d106      	bne.n	800a6fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a6f0:	4b1a      	ldr	r3, [pc, #104]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	4a19      	ldr	r2, [pc, #100]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a6f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6fc:	e00f      	b.n	800a71e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d106      	bne.n	800a712 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a704:	4b15      	ldr	r3, [pc, #84]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	4a14      	ldr	r2, [pc, #80]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a70a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a70e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a710:	e005      	b.n	800a71e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a712:	4b12      	ldr	r3, [pc, #72]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	4a11      	ldr	r2, [pc, #68]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a71c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a71e:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a0e      	ldr	r2, [pc, #56]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a72a:	f7f6 fe85 	bl	8001438 <HAL_GetTick>
 800a72e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a730:	e008      	b.n	800a744 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a732:	f7f6 fe81 	bl	8001438 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e006      	b.n	800a752 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <RCCEx_PLL3_Config+0x15c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0f0      	beq.n	800a732 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	58024400 	.word	0x58024400
 800a760:	ffff0007 	.word	0xffff0007

0800a764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e049      	b.n	800a80a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d106      	bne.n	800a790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7f6 fd9c 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3304      	adds	r3, #4
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f000 faee 	bl	800ad84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b01      	cmp	r3, #1
 800a826:	d001      	beq.n	800a82c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e054      	b.n	800a8d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68da      	ldr	r2, [r3, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0201 	orr.w	r2, r2, #1
 800a842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a26      	ldr	r2, [pc, #152]	; (800a8e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d022      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a856:	d01d      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a22      	ldr	r2, [pc, #136]	; (800a8e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d018      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a21      	ldr	r2, [pc, #132]	; (800a8ec <HAL_TIM_Base_Start_IT+0xd8>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d013      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a1f      	ldr	r2, [pc, #124]	; (800a8f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d00e      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a1e      	ldr	r2, [pc, #120]	; (800a8f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d009      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1c      	ldr	r2, [pc, #112]	; (800a8f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d004      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a1b      	ldr	r2, [pc, #108]	; (800a8fc <HAL_TIM_Base_Start_IT+0xe8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d115      	bne.n	800a8c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	4b19      	ldr	r3, [pc, #100]	; (800a900 <HAL_TIM_Base_Start_IT+0xec>)
 800a89c:	4013      	ands	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b06      	cmp	r3, #6
 800a8a4:	d015      	beq.n	800a8d2 <HAL_TIM_Base_Start_IT+0xbe>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ac:	d011      	beq.n	800a8d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f042 0201 	orr.w	r2, r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8be:	e008      	b.n	800a8d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	e000      	b.n	800a8d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	40010000 	.word	0x40010000
 800a8e8:	40000400 	.word	0x40000400
 800a8ec:	40000800 	.word	0x40000800
 800a8f0:	40000c00 	.word	0x40000c00
 800a8f4:	40010400 	.word	0x40010400
 800a8f8:	40001800 	.word	0x40001800
 800a8fc:	40014000 	.word	0x40014000
 800a900:	00010007 	.word	0x00010007

0800a904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b02      	cmp	r3, #2
 800a918:	d122      	bne.n	800a960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b02      	cmp	r3, #2
 800a926:	d11b      	bne.n	800a960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0202 	mvn.w	r2, #2
 800a930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f9fe 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a94c:	e005      	b.n	800a95a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f9f0 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fa01 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f003 0304 	and.w	r3, r3, #4
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d122      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f003 0304 	and.w	r3, r3, #4
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d11b      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0204 	mvn.w	r2, #4
 800a984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2202      	movs	r2, #2
 800a98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f9d4 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a9a0:	e005      	b.n	800a9ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f9c6 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f9d7 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0308 	and.w	r3, r3, #8
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d122      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d11b      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0208 	mvn.w	r2, #8
 800a9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f003 0303 	and.w	r3, r3, #3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f9aa 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800a9f4:	e005      	b.n	800aa02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f99c 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f9ad 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f003 0310 	and.w	r3, r3, #16
 800aa12:	2b10      	cmp	r3, #16
 800aa14:	d122      	bne.n	800aa5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f003 0310 	and.w	r3, r3, #16
 800aa20:	2b10      	cmp	r3, #16
 800aa22:	d11b      	bne.n	800aa5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0210 	mvn.w	r2, #16
 800aa2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2208      	movs	r2, #8
 800aa32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f980 	bl	800ad48 <HAL_TIM_IC_CaptureCallback>
 800aa48:	e005      	b.n	800aa56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f972 	bl	800ad34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f983 	bl	800ad5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10e      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d107      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f06f 0201 	mvn.w	r2, #1
 800aa80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7f6 f8b0 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d10e      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa0:	2b80      	cmp	r3, #128	; 0x80
 800aaa2:	d107      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aaac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fb38 	bl	800b124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac2:	d10e      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aace:	2b80      	cmp	r3, #128	; 0x80
 800aad0:	d107      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fb2b 	bl	800b138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaec:	2b40      	cmp	r3, #64	; 0x40
 800aaee:	d10e      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aafa:	2b40      	cmp	r3, #64	; 0x40
 800aafc:	d107      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f931 	bl	800ad70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b20      	cmp	r3, #32
 800ab1a:	d10e      	bne.n	800ab3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f003 0320 	and.w	r3, r3, #32
 800ab26:	2b20      	cmp	r3, #32
 800ab28:	d107      	bne.n	800ab3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f06f 0220 	mvn.w	r2, #32
 800ab32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 faeb 	bl	800b110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIM_ConfigClockSource+0x1c>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0dc      	b.n	800ad1a <HAL_TIM_ConfigClockSource+0x1d6>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	4b6a      	ldr	r3, [pc, #424]	; (800ad24 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a64      	ldr	r2, [pc, #400]	; (800ad28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	f000 80a9 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ab9c:	4a62      	ldr	r2, [pc, #392]	; (800ad28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	f200 80ae 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800aba4:	4a61      	ldr	r2, [pc, #388]	; (800ad2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	f000 80a1 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abac:	4a5f      	ldr	r2, [pc, #380]	; (800ad2c <HAL_TIM_ConfigClockSource+0x1e8>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	f200 80a6 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abb4:	4a5e      	ldr	r2, [pc, #376]	; (800ad30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f000 8099 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abbc:	4a5c      	ldr	r2, [pc, #368]	; (800ad30 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	f200 809e 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abc8:	f000 8091 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abd0:	f200 8096 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abd8:	f000 8089 	beq.w	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800abdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe0:	f200 808e 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe8:	d03e      	beq.n	800ac68 <HAL_TIM_ConfigClockSource+0x124>
 800abea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abee:	f200 8087 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800abf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf6:	f000 8086 	beq.w	800ad06 <HAL_TIM_ConfigClockSource+0x1c2>
 800abfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfe:	d87f      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac00:	2b70      	cmp	r3, #112	; 0x70
 800ac02:	d01a      	beq.n	800ac3a <HAL_TIM_ConfigClockSource+0xf6>
 800ac04:	2b70      	cmp	r3, #112	; 0x70
 800ac06:	d87b      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac08:	2b60      	cmp	r3, #96	; 0x60
 800ac0a:	d050      	beq.n	800acae <HAL_TIM_ConfigClockSource+0x16a>
 800ac0c:	2b60      	cmp	r3, #96	; 0x60
 800ac0e:	d877      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac10:	2b50      	cmp	r3, #80	; 0x50
 800ac12:	d03c      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x14a>
 800ac14:	2b50      	cmp	r3, #80	; 0x50
 800ac16:	d873      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d058      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x18a>
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	d86f      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac20:	2b30      	cmp	r3, #48	; 0x30
 800ac22:	d064      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d86b      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d060      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac2c:	2b20      	cmp	r3, #32
 800ac2e:	d867      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d05c      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac34:	2b10      	cmp	r3, #16
 800ac36:	d05a      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x1aa>
 800ac38:	e062      	b.n	800ad00 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac4a:	f000 f9b3 	bl	800afb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	609a      	str	r2, [r3, #8]
      break;
 800ac66:	e04f      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac78:	f000 f99c 	bl	800afb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac8a:	609a      	str	r2, [r3, #8]
      break;
 800ac8c:	e03c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f000 f90c 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2150      	movs	r1, #80	; 0x50
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 f966 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800acac:	e02c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800acba:	461a      	mov	r2, r3
 800acbc:	f000 f92b 	bl	800af16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2160      	movs	r1, #96	; 0x60
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f956 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800accc:	e01c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acda:	461a      	mov	r2, r3
 800acdc:	f000 f8ec 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2140      	movs	r1, #64	; 0x40
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 f946 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800acec:	e00c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4619      	mov	r1, r3
 800acf8:	4610      	mov	r0, r2
 800acfa:	f000 f93d 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800acfe:	e003      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	73fb      	strb	r3, [r7, #15]
      break;
 800ad04:	e000      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	ffceff88 	.word	0xffceff88
 800ad28:	00100040 	.word	0x00100040
 800ad2c:	00100030 	.word	0x00100030
 800ad30:	00100020 	.word	0x00100020

0800ad34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a40      	ldr	r2, [pc, #256]	; (800ae98 <TIM_Base_SetConfig+0x114>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada2:	d00f      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a3d      	ldr	r2, [pc, #244]	; (800ae9c <TIM_Base_SetConfig+0x118>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00b      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a3c      	ldr	r2, [pc, #240]	; (800aea0 <TIM_Base_SetConfig+0x11c>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d007      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a3b      	ldr	r2, [pc, #236]	; (800aea4 <TIM_Base_SetConfig+0x120>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_Base_SetConfig+0x40>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a3a      	ldr	r2, [pc, #232]	; (800aea8 <TIM_Base_SetConfig+0x124>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d108      	bne.n	800add6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	4313      	orrs	r3, r2
 800add4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a2f      	ldr	r2, [pc, #188]	; (800ae98 <TIM_Base_SetConfig+0x114>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d01f      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade4:	d01b      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a2c      	ldr	r2, [pc, #176]	; (800ae9c <TIM_Base_SetConfig+0x118>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d017      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a2b      	ldr	r2, [pc, #172]	; (800aea0 <TIM_Base_SetConfig+0x11c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d013      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a2a      	ldr	r2, [pc, #168]	; (800aea4 <TIM_Base_SetConfig+0x120>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00f      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a29      	ldr	r2, [pc, #164]	; (800aea8 <TIM_Base_SetConfig+0x124>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d00b      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a28      	ldr	r2, [pc, #160]	; (800aeac <TIM_Base_SetConfig+0x128>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d007      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a27      	ldr	r2, [pc, #156]	; (800aeb0 <TIM_Base_SetConfig+0x12c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d003      	beq.n	800ae1e <TIM_Base_SetConfig+0x9a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a26      	ldr	r2, [pc, #152]	; (800aeb4 <TIM_Base_SetConfig+0x130>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d108      	bne.n	800ae30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a10      	ldr	r2, [pc, #64]	; (800ae98 <TIM_Base_SetConfig+0x114>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d00f      	beq.n	800ae7c <TIM_Base_SetConfig+0xf8>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a12      	ldr	r2, [pc, #72]	; (800aea8 <TIM_Base_SetConfig+0x124>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00b      	beq.n	800ae7c <TIM_Base_SetConfig+0xf8>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a11      	ldr	r2, [pc, #68]	; (800aeac <TIM_Base_SetConfig+0x128>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d007      	beq.n	800ae7c <TIM_Base_SetConfig+0xf8>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a10      	ldr	r2, [pc, #64]	; (800aeb0 <TIM_Base_SetConfig+0x12c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_Base_SetConfig+0xf8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a0f      	ldr	r2, [pc, #60]	; (800aeb4 <TIM_Base_SetConfig+0x130>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d103      	bne.n	800ae84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	691a      	ldr	r2, [r3, #16]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	615a      	str	r2, [r3, #20]
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40000400 	.word	0x40000400
 800aea0:	40000800 	.word	0x40000800
 800aea4:	40000c00 	.word	0x40000c00
 800aea8:	40010400 	.word	0x40010400
 800aeac:	40014000 	.word	0x40014000
 800aeb0:	40014400 	.word	0x40014400
 800aeb4:	40014800 	.word	0x40014800

0800aeb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0201 	bic.w	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f023 030a 	bic.w	r3, r3, #10
 800aef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af16:	b480      	push	{r7}
 800af18:	b087      	sub	sp, #28
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0210 	bic.w	r2, r3, #16
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	031b      	lsls	r3, r3, #12
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	4313      	orrs	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	621a      	str	r2, [r3, #32]
}
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4b09      	ldr	r3, [pc, #36]	; (800afb0 <TIM_ITRx_SetConfig+0x38>)
 800af8c:	4013      	ands	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	f043 0307 	orr.w	r3, r3, #7
 800af9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	609a      	str	r2, [r3, #8]
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	ffcfff8f 	.word	0xffcfff8f

0800afb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b087      	sub	sp, #28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	021a      	lsls	r2, r3, #8
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	431a      	orrs	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	4313      	orrs	r3, r2
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	4313      	orrs	r3, r2
 800afe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	609a      	str	r2, [r3, #8]
}
 800afe8:	bf00      	nop
 800afea:	371c      	adds	r7, #28
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b004:	2b01      	cmp	r3, #1
 800b006:	d101      	bne.n	800b00c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b008:	2302      	movs	r3, #2
 800b00a:	e06d      	b.n	800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a30      	ldr	r2, [pc, #192]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d004      	beq.n	800b040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a2f      	ldr	r2, [pc, #188]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d108      	bne.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a20      	ldr	r2, [pc, #128]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d022      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07e:	d01d      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a1d      	ldr	r2, [pc, #116]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d018      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a1c      	ldr	r2, [pc, #112]	; (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d013      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a1a      	ldr	r2, [pc, #104]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d00e      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a15      	ldr	r2, [pc, #84]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d009      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a16      	ldr	r2, [pc, #88]	; (800b108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d004      	beq.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a15      	ldr	r2, [pc, #84]	; (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d10c      	bne.n	800b0d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	40010000 	.word	0x40010000
 800b0f8:	40010400 	.word	0x40010400
 800b0fc:	40000400 	.word	0x40000400
 800b100:	40000800 	.word	0x40000800
 800b104:	40000c00 	.word	0x40000c00
 800b108:	40001800 	.word	0x40001800
 800b10c:	40014000 	.word	0x40014000

0800b110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b14c:	b084      	sub	sp, #16
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	f107 001c 	add.w	r0, r7, #28
 800b15a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	2b01      	cmp	r3, #1
 800b162:	d120      	bne.n	800b1a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	4b2a      	ldr	r3, [pc, #168]	; (800b220 <USB_CoreInit+0xd4>)
 800b176:	4013      	ands	r3, r2
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d105      	bne.n	800b19a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 faf8 	bl	800c790 <USB_CoreReset>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e01a      	b.n	800b1dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 faec 	bl	800c790 <USB_CoreReset>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d106      	bne.n	800b1d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b1ce:	e005      	b.n	800b1dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d116      	bne.n	800b210 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b1f0:	4b0c      	ldr	r3, [pc, #48]	; (800b224 <USB_CoreInit+0xd8>)
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	f043 0206 	orr.w	r2, r3, #6
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f043 0220 	orr.w	r2, r3, #32
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b21c:	b004      	add	sp, #16
 800b21e:	4770      	bx	lr
 800b220:	ffbdffbf 	.word	0xffbdffbf
 800b224:	03ee0000 	.word	0x03ee0000

0800b228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	4613      	mov	r3, r2
 800b234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d165      	bne.n	800b308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	4a41      	ldr	r2, [pc, #260]	; (800b344 <USB_SetTurnaroundTime+0x11c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d906      	bls.n	800b252 <USB_SetTurnaroundTime+0x2a>
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	4a40      	ldr	r2, [pc, #256]	; (800b348 <USB_SetTurnaroundTime+0x120>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d202      	bcs.n	800b252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b24c:	230f      	movs	r3, #15
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e062      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4a3c      	ldr	r2, [pc, #240]	; (800b348 <USB_SetTurnaroundTime+0x120>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d306      	bcc.n	800b268 <USB_SetTurnaroundTime+0x40>
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4a3b      	ldr	r2, [pc, #236]	; (800b34c <USB_SetTurnaroundTime+0x124>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d202      	bcs.n	800b268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b262:	230e      	movs	r3, #14
 800b264:	617b      	str	r3, [r7, #20]
 800b266:	e057      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	4a38      	ldr	r2, [pc, #224]	; (800b34c <USB_SetTurnaroundTime+0x124>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d306      	bcc.n	800b27e <USB_SetTurnaroundTime+0x56>
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	4a37      	ldr	r2, [pc, #220]	; (800b350 <USB_SetTurnaroundTime+0x128>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d202      	bcs.n	800b27e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b278:	230d      	movs	r3, #13
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	e04c      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	4a33      	ldr	r2, [pc, #204]	; (800b350 <USB_SetTurnaroundTime+0x128>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d306      	bcc.n	800b294 <USB_SetTurnaroundTime+0x6c>
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	4a32      	ldr	r2, [pc, #200]	; (800b354 <USB_SetTurnaroundTime+0x12c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d802      	bhi.n	800b294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b28e:	230c      	movs	r3, #12
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	e041      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	4a2f      	ldr	r2, [pc, #188]	; (800b354 <USB_SetTurnaroundTime+0x12c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d906      	bls.n	800b2aa <USB_SetTurnaroundTime+0x82>
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4a2e      	ldr	r2, [pc, #184]	; (800b358 <USB_SetTurnaroundTime+0x130>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d802      	bhi.n	800b2aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b2a4:	230b      	movs	r3, #11
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	e036      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	4a2a      	ldr	r2, [pc, #168]	; (800b358 <USB_SetTurnaroundTime+0x130>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d906      	bls.n	800b2c0 <USB_SetTurnaroundTime+0x98>
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	4a29      	ldr	r2, [pc, #164]	; (800b35c <USB_SetTurnaroundTime+0x134>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d802      	bhi.n	800b2c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b2ba:	230a      	movs	r3, #10
 800b2bc:	617b      	str	r3, [r7, #20]
 800b2be:	e02b      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	4a26      	ldr	r2, [pc, #152]	; (800b35c <USB_SetTurnaroundTime+0x134>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d906      	bls.n	800b2d6 <USB_SetTurnaroundTime+0xae>
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	4a25      	ldr	r2, [pc, #148]	; (800b360 <USB_SetTurnaroundTime+0x138>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d202      	bcs.n	800b2d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b2d0:	2309      	movs	r3, #9
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	e020      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	4a21      	ldr	r2, [pc, #132]	; (800b360 <USB_SetTurnaroundTime+0x138>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d306      	bcc.n	800b2ec <USB_SetTurnaroundTime+0xc4>
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	4a20      	ldr	r2, [pc, #128]	; (800b364 <USB_SetTurnaroundTime+0x13c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d802      	bhi.n	800b2ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2e6:	2308      	movs	r3, #8
 800b2e8:	617b      	str	r3, [r7, #20]
 800b2ea:	e015      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <USB_SetTurnaroundTime+0x13c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d906      	bls.n	800b302 <USB_SetTurnaroundTime+0xda>
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4a1c      	ldr	r2, [pc, #112]	; (800b368 <USB_SetTurnaroundTime+0x140>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d202      	bcs.n	800b302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b2fc:	2307      	movs	r3, #7
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e00a      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b302:	2306      	movs	r3, #6
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	e007      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b30e:	2309      	movs	r3, #9
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	e001      	b.n	800b318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b314:	2309      	movs	r3, #9
 800b316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	029b      	lsls	r3, r3, #10
 800b32c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b330:	431a      	orrs	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	371c      	adds	r7, #28
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	00d8acbf 	.word	0x00d8acbf
 800b348:	00e4e1c0 	.word	0x00e4e1c0
 800b34c:	00f42400 	.word	0x00f42400
 800b350:	01067380 	.word	0x01067380
 800b354:	011a499f 	.word	0x011a499f
 800b358:	01312cff 	.word	0x01312cff
 800b35c:	014ca43f 	.word	0x014ca43f
 800b360:	016e3600 	.word	0x016e3600
 800b364:	01a6ab1f 	.word	0x01a6ab1f
 800b368:	01e84800 	.word	0x01e84800

0800b36c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f043 0201 	orr.w	r2, r3, #1
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f023 0201 	bic.w	r2, r3, #1
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d115      	bne.n	800b3fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b3de:	2001      	movs	r0, #1
 800b3e0:	f7f6 f836 	bl	8001450 <HAL_Delay>
      ms++;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f001 f93f 	bl	800c66e <USB_GetMode>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d01e      	beq.n	800b434 <USB_SetCurrentMode+0x84>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b31      	cmp	r3, #49	; 0x31
 800b3fa:	d9f0      	bls.n	800b3de <USB_SetCurrentMode+0x2e>
 800b3fc:	e01a      	b.n	800b434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d115      	bne.n	800b430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b410:	2001      	movs	r0, #1
 800b412:	f7f6 f81d 	bl	8001450 <HAL_Delay>
      ms++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 f926 	bl	800c66e <USB_GetMode>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <USB_SetCurrentMode+0x84>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b31      	cmp	r3, #49	; 0x31
 800b42c:	d9f0      	bls.n	800b410 <USB_SetCurrentMode+0x60>
 800b42e:	e001      	b.n	800b434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e005      	b.n	800b440 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b32      	cmp	r3, #50	; 0x32
 800b438:	d101      	bne.n	800b43e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b448:	b084      	sub	sp, #16
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b086      	sub	sp, #24
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b462:	2300      	movs	r3, #0
 800b464:	613b      	str	r3, [r7, #16]
 800b466:	e009      	b.n	800b47c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	3340      	adds	r3, #64	; 0x40
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	2200      	movs	r2, #0
 800b474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	3301      	adds	r3, #1
 800b47a:	613b      	str	r3, [r7, #16]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b0e      	cmp	r3, #14
 800b480:	d9f2      	bls.n	800b468 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11c      	bne.n	800b4c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b496:	f043 0302 	orr.w	r3, r3, #2
 800b49a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	e005      	b.n	800b4ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	680b      	ldr	r3, [r1, #0]
 800b4ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d10c      	bne.n	800b50e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d104      	bne.n	800b504 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f965 	bl	800b7cc <USB_SetDevSpeed>
 800b502:	e008      	b.n	800b516 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b504:	2101      	movs	r1, #1
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f960 	bl	800b7cc <USB_SetDevSpeed>
 800b50c:	e003      	b.n	800b516 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b50e:	2103      	movs	r1, #3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f95b 	bl	800b7cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b516:	2110      	movs	r1, #16
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f8f3 	bl	800b704 <USB_FlushTxFifo>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f91f 	bl	800b76c <USB_FlushRxFifo>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53e:	461a      	mov	r2, r3
 800b540:	2300      	movs	r3, #0
 800b542:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54a:	461a      	mov	r2, r3
 800b54c:	2300      	movs	r3, #0
 800b54e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b556:	461a      	mov	r2, r3
 800b558:	2300      	movs	r3, #0
 800b55a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b55c:	2300      	movs	r3, #0
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	e043      	b.n	800b5ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	015a      	lsls	r2, r3, #5
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b578:	d118      	bne.n	800b5ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10a      	bne.n	800b596 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b58c:	461a      	mov	r2, r3
 800b58e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	e013      	b.n	800b5be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	e008      	b.n	800b5be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	613b      	str	r3, [r7, #16]
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d3b7      	bcc.n	800b562 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	613b      	str	r3, [r7, #16]
 800b5f6:	e043      	b.n	800b680 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b60a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b60e:	d118      	bne.n	800b642 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b622:	461a      	mov	r2, r3
 800b624:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b628:	6013      	str	r3, [r2, #0]
 800b62a:	e013      	b.n	800b654 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	015a      	lsls	r2, r3, #5
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b638:	461a      	mov	r2, r3
 800b63a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	e008      	b.n	800b654 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64e:	461a      	mov	r2, r3
 800b650:	2300      	movs	r3, #0
 800b652:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b660:	461a      	mov	r2, r3
 800b662:	2300      	movs	r3, #0
 800b664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	015a      	lsls	r2, r3, #5
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	4413      	add	r3, r2
 800b66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b672:	461a      	mov	r2, r3
 800b674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	3301      	adds	r3, #1
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	429a      	cmp	r2, r3
 800b686:	d3b7      	bcc.n	800b5f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b69a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b6a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d105      	bne.n	800b6bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	f043 0210 	orr.w	r2, r3, #16
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	699a      	ldr	r2, [r3, #24]
 800b6c0:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <USB_DevInit+0x2b4>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	f043 0208 	orr.w	r2, r3, #8
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d105      	bne.n	800b6ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699a      	ldr	r2, [r3, #24]
 800b6e4:	4b06      	ldr	r3, [pc, #24]	; (800b700 <USB_DevInit+0x2b8>)
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6f8:	b004      	add	sp, #16
 800b6fa:	4770      	bx	lr
 800b6fc:	803c3800 	.word	0x803c3800
 800b700:	40000004 	.word	0x40000004

0800b704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3301      	adds	r3, #1
 800b716:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	4a13      	ldr	r2, [pc, #76]	; (800b768 <USB_FlushTxFifo+0x64>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d901      	bls.n	800b724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e01b      	b.n	800b75c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	daf2      	bge.n	800b712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	019b      	lsls	r3, r3, #6
 800b734:	f043 0220 	orr.w	r2, r3, #32
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	3301      	adds	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	4a08      	ldr	r2, [pc, #32]	; (800b768 <USB_FlushTxFifo+0x64>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d901      	bls.n	800b74e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e006      	b.n	800b75c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b20      	cmp	r3, #32
 800b758:	d0f0      	beq.n	800b73c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	00030d40 	.word	0x00030d40

0800b76c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4a11      	ldr	r2, [pc, #68]	; (800b7c8 <USB_FlushRxFifo+0x5c>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d901      	bls.n	800b78a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e018      	b.n	800b7bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	daf2      	bge.n	800b778 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2210      	movs	r2, #16
 800b79a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	4a08      	ldr	r2, [pc, #32]	; (800b7c8 <USB_FlushRxFifo+0x5c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d901      	bls.n	800b7ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e006      	b.n	800b7bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	f003 0310 	and.w	r3, r3, #16
 800b7b6:	2b10      	cmp	r3, #16
 800b7b8:	d0f0      	beq.n	800b79c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	00030d40 	.word	0x00030d40

0800b7cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	68f9      	ldr	r1, [r7, #12]
 800b7e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b087      	sub	sp, #28
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f003 0306 	and.w	r3, r3, #6
 800b816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
 800b822:	e00a      	b.n	800b83a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d002      	beq.n	800b830 <USB_GetDevSpeed+0x32>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2b06      	cmp	r3, #6
 800b82e:	d102      	bne.n	800b836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b830:	2302      	movs	r3, #2
 800b832:	75fb      	strb	r3, [r7, #23]
 800b834:	e001      	b.n	800b83a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b836:	230f      	movs	r3, #15
 800b838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	785b      	ldrb	r3, [r3, #1]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d139      	bne.n	800b8d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b86a:	69da      	ldr	r2, [r3, #28]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 030f 	and.w	r3, r3, #15
 800b874:	2101      	movs	r1, #1
 800b876:	fa01 f303 	lsl.w	r3, r1, r3
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	68f9      	ldr	r1, [r7, #12]
 800b87e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b882:	4313      	orrs	r3, r2
 800b884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d153      	bne.n	800b944 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	791b      	ldrb	r3, [r3, #4]
 800b8b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	059b      	lsls	r3, r3, #22
 800b8be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8c0:	431a      	orrs	r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	0159      	lsls	r1, r3, #5
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	440b      	add	r3, r1
 800b8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4b20      	ldr	r3, [pc, #128]	; (800b954 <USB_ActivateEndpoint+0x10c>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	600b      	str	r3, [r1, #0]
 800b8d6:	e035      	b.n	800b944 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8de:	69da      	ldr	r2, [r3, #28]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	f003 030f 	and.w	r3, r3, #15
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ee:	041b      	lsls	r3, r3, #16
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d119      	bne.n	800b944 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	015a      	lsls	r2, r3, #5
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	4413      	add	r3, r2
 800b918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	791b      	ldrb	r3, [r3, #4]
 800b92a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b92c:	430b      	orrs	r3, r1
 800b92e:	431a      	orrs	r2, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	0159      	lsls	r1, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	440b      	add	r3, r1
 800b938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93c:	4619      	mov	r1, r3
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <USB_ActivateEndpoint+0x10c>)
 800b940:	4313      	orrs	r3, r2
 800b942:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	10008000 	.word	0x10008000

0800b958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d161      	bne.n	800ba38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	015a      	lsls	r2, r3, #5
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b98a:	d11f      	bne.n	800b9cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	0151      	lsls	r1, r2, #5
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	440a      	add	r2, r1
 800b9a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b9aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	015a      	lsls	r2, r3, #5
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	0151      	lsls	r1, r2, #5
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	440a      	add	r2, r1
 800b9c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	f003 030f 	and.w	r3, r3, #15
 800b9dc:	2101      	movs	r1, #1
 800b9de:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	43db      	mvns	r3, r3
 800b9e6:	68f9      	ldr	r1, [r7, #12]
 800b9e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f6:	69da      	ldr	r2, [r3, #28]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	f003 030f 	and.w	r3, r3, #15
 800ba00:	2101      	movs	r1, #1
 800ba02:	fa01 f303 	lsl.w	r3, r1, r3
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	43db      	mvns	r3, r3
 800ba0a:	68f9      	ldr	r1, [r7, #12]
 800ba0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba10:	4013      	ands	r3, r2
 800ba12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	015a      	lsls	r2, r3, #5
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	0159      	lsls	r1, r3, #5
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	440b      	add	r3, r1
 800ba2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4b35      	ldr	r3, [pc, #212]	; (800bb08 <USB_DeactivateEndpoint+0x1b0>)
 800ba32:	4013      	ands	r3, r2
 800ba34:	600b      	str	r3, [r1, #0]
 800ba36:	e060      	b.n	800bafa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba4e:	d11f      	bne.n	800ba90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	0151      	lsls	r1, r2, #5
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	440a      	add	r2, r1
 800ba66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	0151      	lsls	r1, r2, #5
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	440a      	add	r2, r1
 800ba86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	f003 030f 	and.w	r3, r3, #15
 800baa0:	2101      	movs	r1, #1
 800baa2:	fa01 f303 	lsl.w	r3, r1, r3
 800baa6:	041b      	lsls	r3, r3, #16
 800baa8:	43db      	mvns	r3, r3
 800baaa:	68f9      	ldr	r1, [r7, #12]
 800baac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bab0:	4013      	ands	r3, r2
 800bab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baba:	69da      	ldr	r2, [r3, #28]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	f003 030f 	and.w	r3, r3, #15
 800bac4:	2101      	movs	r1, #1
 800bac6:	fa01 f303 	lsl.w	r3, r1, r3
 800baca:	041b      	lsls	r3, r3, #16
 800bacc:	43db      	mvns	r3, r3
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bad4:	4013      	ands	r3, r2
 800bad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	0159      	lsls	r1, r3, #5
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	440b      	add	r3, r1
 800baee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf2:	4619      	mov	r1, r3
 800baf4:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <USB_DeactivateEndpoint+0x1b4>)
 800baf6:	4013      	ands	r3, r2
 800baf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	ec337800 	.word	0xec337800
 800bb0c:	eff37800 	.word	0xeff37800

0800bb10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08a      	sub	sp, #40	; 0x28
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	f040 8181 	bne.w	800be34 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d132      	bne.n	800bba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	015a      	lsls	r2, r3, #5
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	4413      	add	r3, r2
 800bb42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb46:	691a      	ldr	r2, [r3, #16]
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	0159      	lsls	r1, r3, #5
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	440b      	add	r3, r1
 800bb50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb54:	4619      	mov	r1, r3
 800bb56:	4ba5      	ldr	r3, [pc, #660]	; (800bdec <USB_EPStartXfer+0x2dc>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	015a      	lsls	r2, r3, #5
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	4413      	add	r3, r2
 800bb84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	0159      	lsls	r1, r3, #5
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	440b      	add	r3, r1
 800bb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb96:	4619      	mov	r1, r3
 800bb98:	4b95      	ldr	r3, [pc, #596]	; (800bdf0 <USB_EPStartXfer+0x2e0>)
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	610b      	str	r3, [r1, #16]
 800bb9e:	e092      	b.n	800bcc6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbac:	691a      	ldr	r2, [r3, #16]
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	0159      	lsls	r1, r3, #5
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	440b      	add	r3, r1
 800bbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4b8c      	ldr	r3, [pc, #560]	; (800bdf0 <USB_EPStartXfer+0x2e0>)
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	0159      	lsls	r1, r3, #5
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	440b      	add	r3, r1
 800bbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4b83      	ldr	r3, [pc, #524]	; (800bdec <USB_EPStartXfer+0x2dc>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d11a      	bne.n	800bc20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	691a      	ldr	r2, [r3, #16]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d903      	bls.n	800bbfe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	689a      	ldr	r2, [r3, #8]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	015a      	lsls	r2, r3, #5
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	0151      	lsls	r1, r2, #5
 800bc10:	69fa      	ldr	r2, [r7, #28]
 800bc12:	440a      	add	r2, r1
 800bc14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc1c:	6113      	str	r3, [r2, #16]
 800bc1e:	e01b      	b.n	800bc58 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6919      	ldr	r1, [r3, #16]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	440b      	add	r3, r1
 800bc38:	1e59      	subs	r1, r3, #1
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc42:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bc44:	4b6b      	ldr	r3, [pc, #428]	; (800bdf4 <USB_EPStartXfer+0x2e4>)
 800bc46:	400b      	ands	r3, r1
 800bc48:	69b9      	ldr	r1, [r7, #24]
 800bc4a:	0148      	lsls	r0, r1, #5
 800bc4c:	69f9      	ldr	r1, [r7, #28]
 800bc4e:	4401      	add	r1, r0
 800bc50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc54:	4313      	orrs	r3, r2
 800bc56:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc64:	691a      	ldr	r2, [r3, #16]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc6e:	69b9      	ldr	r1, [r7, #24]
 800bc70:	0148      	lsls	r0, r1, #5
 800bc72:	69f9      	ldr	r1, [r7, #28]
 800bc74:	4401      	add	r1, r0
 800bc76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	791b      	ldrb	r3, [r3, #4]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d11f      	bne.n	800bcc6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	0151      	lsls	r1, r2, #5
 800bc98:	69fa      	ldr	r2, [r7, #28]
 800bc9a:	440a      	add	r2, r1
 800bc9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bca0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bca4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	015a      	lsls	r2, r3, #5
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	0151      	lsls	r1, r2, #5
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	440a      	add	r2, r1
 800bcbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d14b      	bne.n	800bd64 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce0:	461a      	mov	r2, r3
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	791b      	ldrb	r3, [r3, #4]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d128      	bne.n	800bd42 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d110      	bne.n	800bd22 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69ba      	ldr	r2, [r7, #24]
 800bd10:	0151      	lsls	r1, r2, #5
 800bd12:	69fa      	ldr	r2, [r7, #28]
 800bd14:	440a      	add	r2, r1
 800bd16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	e00f      	b.n	800bd42 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	015a      	lsls	r2, r3, #5
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	4413      	add	r3, r2
 800bd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	0151      	lsls	r1, r2, #5
 800bd34:	69fa      	ldr	r2, [r7, #28]
 800bd36:	440a      	add	r2, r1
 800bd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	0151      	lsls	r1, r2, #5
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	440a      	add	r2, r1
 800bd58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	e16a      	b.n	800c03a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	0151      	lsls	r1, r2, #5
 800bd76:	69fa      	ldr	r2, [r7, #28]
 800bd78:	440a      	add	r2, r1
 800bd7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	791b      	ldrb	r3, [r3, #4]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d015      	beq.n	800bdb8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f000 8152 	beq.w	800c03a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	2101      	movs	r1, #1
 800bda8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdac:	69f9      	ldr	r1, [r7, #28]
 800bdae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	634b      	str	r3, [r1, #52]	; 0x34
 800bdb6:	e140      	b.n	800c03a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d117      	bne.n	800bdf8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	0151      	lsls	r1, r2, #5
 800bdda:	69fa      	ldr	r2, [r7, #28]
 800bddc:	440a      	add	r2, r1
 800bdde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bde2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	e016      	b.n	800be18 <USB_EPStartXfer+0x308>
 800bdea:	bf00      	nop
 800bdec:	e007ffff 	.word	0xe007ffff
 800bdf0:	fff80000 	.word	0xfff80000
 800bdf4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	0151      	lsls	r1, r2, #5
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	440a      	add	r2, r1
 800be0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be16:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	68d9      	ldr	r1, [r3, #12]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	781a      	ldrb	r2, [r3, #0]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	b298      	uxth	r0, r3
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	4603      	mov	r3, r0
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f9b9 	bl	800c1a4 <USB_WritePacket>
 800be32:	e102      	b.n	800c03a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be40:	691a      	ldr	r2, [r3, #16]
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	0159      	lsls	r1, r3, #5
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	440b      	add	r3, r1
 800be4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4e:	4619      	mov	r1, r3
 800be50:	4b7c      	ldr	r3, [pc, #496]	; (800c044 <USB_EPStartXfer+0x534>)
 800be52:	4013      	ands	r3, r2
 800be54:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	015a      	lsls	r2, r3, #5
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	4413      	add	r3, r2
 800be5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be62:	691a      	ldr	r2, [r3, #16]
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	0159      	lsls	r1, r3, #5
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	440b      	add	r3, r1
 800be6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be70:	4619      	mov	r1, r3
 800be72:	4b75      	ldr	r3, [pc, #468]	; (800c048 <USB_EPStartXfer+0x538>)
 800be74:	4013      	ands	r3, r2
 800be76:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d12f      	bne.n	800bede <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	689a      	ldr	r2, [r3, #8]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	689a      	ldr	r2, [r3, #8]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	6a1b      	ldr	r3, [r3, #32]
 800bea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beac:	69b9      	ldr	r1, [r7, #24]
 800beae:	0148      	lsls	r0, r1, #5
 800beb0:	69f9      	ldr	r1, [r7, #28]
 800beb2:	4401      	add	r1, r0
 800beb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800beb8:	4313      	orrs	r3, r2
 800beba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	0151      	lsls	r1, r2, #5
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	440a      	add	r2, r1
 800bed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beda:	6113      	str	r3, [r2, #16]
 800bedc:	e05f      	b.n	800bf9e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d123      	bne.n	800bf2e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	691a      	ldr	r2, [r3, #16]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800befc:	69b9      	ldr	r1, [r7, #24]
 800befe:	0148      	lsls	r0, r1, #5
 800bf00:	69f9      	ldr	r1, [r7, #28]
 800bf02:	4401      	add	r1, r0
 800bf04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	0151      	lsls	r1, r2, #5
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	440a      	add	r2, r1
 800bf22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf2a:	6113      	str	r3, [r2, #16]
 800bf2c:	e037      	b.n	800bf9e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	691a      	ldr	r2, [r3, #16]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	4413      	add	r3, r2
 800bf38:	1e5a      	subs	r2, r3, #1
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf42:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	8afa      	ldrh	r2, [r7, #22]
 800bf4a:	fb03 f202 	mul.w	r2, r3, r2
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf5e:	691a      	ldr	r2, [r3, #16]
 800bf60:	8afb      	ldrh	r3, [r7, #22]
 800bf62:	04d9      	lsls	r1, r3, #19
 800bf64:	4b39      	ldr	r3, [pc, #228]	; (800c04c <USB_EPStartXfer+0x53c>)
 800bf66:	400b      	ands	r3, r1
 800bf68:	69b9      	ldr	r1, [r7, #24]
 800bf6a:	0148      	lsls	r0, r1, #5
 800bf6c:	69f9      	ldr	r1, [r7, #28]
 800bf6e:	4401      	add	r1, r0
 800bf70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf74:	4313      	orrs	r3, r2
 800bf76:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf84:	691a      	ldr	r2, [r3, #16]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf8e:	69b9      	ldr	r1, [r7, #24]
 800bf90:	0148      	lsls	r0, r1, #5
 800bf92:	69f9      	ldr	r1, [r7, #28]
 800bf94:	4401      	add	r1, r0
 800bf96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d10d      	bne.n	800bfc0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d009      	beq.n	800bfc0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	68d9      	ldr	r1, [r3, #12]
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	460a      	mov	r2, r1
 800bfbe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d128      	bne.n	800c01a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d110      	bne.n	800bffa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	0151      	lsls	r1, r2, #5
 800bfea:	69fa      	ldr	r2, [r7, #28]
 800bfec:	440a      	add	r2, r1
 800bfee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	e00f      	b.n	800c01a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c018:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	015a      	lsls	r2, r3, #5
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4413      	add	r3, r2
 800c022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	0151      	lsls	r1, r2, #5
 800c02c:	69fa      	ldr	r2, [r7, #28]
 800c02e:	440a      	add	r2, r1
 800c030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3720      	adds	r7, #32
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	fff80000 	.word	0xfff80000
 800c048:	e007ffff 	.word	0xe007ffff
 800c04c:	1ff80000 	.word	0x1ff80000

0800c050 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d14a      	bne.n	800c104 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c086:	f040 8086 	bne.w	800c196 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	7812      	ldrb	r2, [r2, #0]
 800c09e:	0151      	lsls	r1, r2, #5
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	440a      	add	r2, r1
 800c0a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	7812      	ldrb	r2, [r2, #0]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d902      	bls.n	800c0e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	75fb      	strb	r3, [r7, #23]
          break;
 800c0e6:	e056      	b.n	800c196 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c100:	d0e7      	beq.n	800c0d2 <USB_EPStopXfer+0x82>
 800c102:	e048      	b.n	800c196 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c11c:	d13b      	bne.n	800c196 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	015a      	lsls	r2, r3, #5
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	4413      	add	r3, r2
 800c128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	7812      	ldrb	r2, [r2, #0]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	440a      	add	r2, r1
 800c138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c13c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c140:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	7812      	ldrb	r2, [r2, #0]
 800c156:	0151      	lsls	r1, r2, #5
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	440a      	add	r2, r1
 800c15c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3301      	adds	r3, #1
 800c16a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c172:	4293      	cmp	r3, r2
 800c174:	d902      	bls.n	800c17c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	75fb      	strb	r3, [r7, #23]
          break;
 800c17a:	e00c      	b.n	800c196 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c194:	d0e7      	beq.n	800c166 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	371c      	adds	r7, #28
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b089      	sub	sp, #36	; 0x24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	71fb      	strb	r3, [r7, #7]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c1c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d123      	bne.n	800c212 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c1ca:	88bb      	ldrh	r3, [r7, #4]
 800c1cc:	3303      	adds	r3, #3
 800c1ce:	089b      	lsrs	r3, r3, #2
 800c1d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	61bb      	str	r3, [r7, #24]
 800c1d6:	e018      	b.n	800c20a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c1d8:	79fb      	ldrb	r3, [r7, #7]
 800c1da:	031a      	lsls	r2, r3, #12
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	3301      	adds	r3, #1
 800c202:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	3301      	adds	r3, #1
 800c208:	61bb      	str	r3, [r7, #24]
 800c20a:	69ba      	ldr	r2, [r7, #24]
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d3e2      	bcc.n	800c1d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3724      	adds	r7, #36	; 0x24
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c220:	b480      	push	{r7}
 800c222:	b08b      	sub	sp, #44	; 0x2c
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	4613      	mov	r3, r2
 800c22c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c236:	88fb      	ldrh	r3, [r7, #6]
 800c238:	089b      	lsrs	r3, r3, #2
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c23e:	88fb      	ldrh	r3, [r7, #6]
 800c240:	f003 0303 	and.w	r3, r3, #3
 800c244:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c246:	2300      	movs	r3, #0
 800c248:	623b      	str	r3, [r7, #32]
 800c24a:	e014      	b.n	800c276 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	601a      	str	r2, [r3, #0]
    pDest++;
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	3301      	adds	r3, #1
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	3301      	adds	r3, #1
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	3301      	adds	r3, #1
 800c268:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	3301      	adds	r3, #1
 800c26e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	3301      	adds	r3, #1
 800c274:	623b      	str	r3, [r7, #32]
 800c276:	6a3a      	ldr	r2, [r7, #32]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d3e6      	bcc.n	800c24c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c27e:	8bfb      	ldrh	r3, [r7, #30]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d01e      	beq.n	800c2c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c284:	2300      	movs	r3, #0
 800c286:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c28e:	461a      	mov	r2, r3
 800c290:	f107 0310 	add.w	r3, r7, #16
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	701a      	strb	r2, [r3, #0]
      i++;
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	623b      	str	r3, [r7, #32]
      pDest++;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c2b6:	8bfb      	ldrh	r3, [r7, #30]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c2bc:	8bfb      	ldrh	r3, [r7, #30]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1ea      	bne.n	800c298 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	372c      	adds	r7, #44	; 0x2c
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	785b      	ldrb	r3, [r3, #1]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d12c      	bne.n	800c346 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	db12      	blt.n	800c324 <USB_EPSetStall+0x54>
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00f      	beq.n	800c324 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	0151      	lsls	r1, r2, #5
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	440a      	add	r2, r1
 800c31a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c322:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	0151      	lsls	r1, r2, #5
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	440a      	add	r2, r1
 800c33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c33e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	e02b      	b.n	800c39e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	db12      	blt.n	800c37e <USB_EPSetStall+0xae>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00f      	beq.n	800c37e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	015a      	lsls	r2, r3, #5
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4413      	add	r3, r2
 800c366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	0151      	lsls	r1, r2, #5
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	440a      	add	r2, r1
 800c374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c37c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	0151      	lsls	r1, r2, #5
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	440a      	add	r2, r1
 800c394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c39c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d128      	bne.n	800c41a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	0151      	lsls	r1, r2, #5
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	440a      	add	r2, r1
 800c3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	791b      	ldrb	r3, [r3, #4]
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d003      	beq.n	800c3f8 <USB_EPClearStall+0x4c>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	791b      	ldrb	r3, [r3, #4]
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d138      	bne.n	800c46a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	0151      	lsls	r1, r2, #5
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	440a      	add	r2, r1
 800c40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	e027      	b.n	800c46a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	0151      	lsls	r1, r2, #5
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	440a      	add	r2, r1
 800c430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c438:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	791b      	ldrb	r3, [r3, #4]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d003      	beq.n	800c44a <USB_EPClearStall+0x9e>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	791b      	ldrb	r3, [r3, #4]
 800c446:	2b02      	cmp	r3, #2
 800c448:	d10f      	bne.n	800c46a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c468:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c496:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c49a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c4ac:	68f9      	ldr	r1, [r7, #12]
 800c4ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4de:	f023 0303 	bic.w	r3, r3, #3
 800c4e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4f2:	f023 0302 	bic.w	r3, r3, #2
 800c4f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c506:	b480      	push	{r7}
 800c508:	b085      	sub	sp, #20
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c520:	f023 0303 	bic.w	r3, r3, #3
 800c524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c534:	f043 0302 	orr.w	r3, r3, #2
 800c538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	4013      	ands	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c560:	68fb      	ldr	r3, [r7, #12]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c56e:	b480      	push	{r7}
 800c570:	b085      	sub	sp, #20
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	4013      	ands	r3, r2
 800c590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	0c1b      	lsrs	r3, r3, #16
}
 800c596:	4618      	mov	r0, r3
 800c598:	3714      	adds	r7, #20
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b085      	sub	sp, #20
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b4:	699b      	ldr	r3, [r3, #24]
 800c5b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	b29b      	uxth	r3, r3
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c5e6:	78fb      	ldrb	r3, [r7, #3]
 800c5e8:	015a      	lsls	r2, r3, #5
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	4013      	ands	r3, r2
 800c602:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c604:	68bb      	ldr	r3, [r7, #8]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c612:	b480      	push	{r7}
 800c614:	b087      	sub	sp, #28
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	460b      	mov	r3, r1
 800c61c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c634:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c636:	78fb      	ldrb	r3, [r7, #3]
 800c638:	f003 030f 	and.w	r3, r3, #15
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	fa22 f303 	lsr.w	r3, r2, r3
 800c642:	01db      	lsls	r3, r3, #7
 800c644:	b2db      	uxtb	r3, r3
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	4313      	orrs	r3, r2
 800c64a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	4413      	add	r3, r2
 800c654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	4013      	ands	r3, r2
 800c65e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c660:	68bb      	ldr	r3, [r7, #8]
}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	695b      	ldr	r3, [r3, #20]
 800c67a:	f003 0301 	and.w	r3, r3, #1
}
 800c67e:	4618      	mov	r0, r3
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
	...

0800c68c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <USB_ActivateSetup+0x44>)
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	fffff800 	.word	0xfffff800

0800c6d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	333c      	adds	r3, #60	; 0x3c
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	4a26      	ldr	r2, [pc, #152]	; (800c78c <USB_EP0_OutStart+0xb8>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d90a      	bls.n	800c70e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c708:	d101      	bne.n	800c70e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e037      	b.n	800c77e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c714:	461a      	mov	r2, r3
 800c716:	2300      	movs	r3, #0
 800c718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c72c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c73c:	f043 0318 	orr.w	r3, r3, #24
 800c740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c750:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c754:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c756:	7afb      	ldrb	r3, [r7, #11]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d10f      	bne.n	800c77c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c776:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c77a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	371c      	adds	r7, #28
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	4f54300a 	.word	0x4f54300a

0800c790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	4a13      	ldr	r2, [pc, #76]	; (800c7f4 <USB_CoreReset+0x64>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d901      	bls.n	800c7ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e01b      	b.n	800c7e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	daf2      	bge.n	800c79c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f043 0201 	orr.w	r2, r3, #1
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4a09      	ldr	r2, [pc, #36]	; (800c7f4 <USB_CoreReset+0x64>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d901      	bls.n	800c7d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	e006      	b.n	800c7e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d0f0      	beq.n	800c7c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	00030d40 	.word	0x00030d40

0800c7f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	460b      	mov	r3, r1
 800c802:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c804:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c808:	f002 ff3c 	bl	800f684 <USBD_static_malloc>
 800c80c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d109      	bne.n	800c828 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	32b0      	adds	r2, #176	; 0xb0
 800c81e:	2100      	movs	r1, #0
 800c820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c824:	2302      	movs	r3, #2
 800c826:	e0d4      	b.n	800c9d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c828:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c82c:	2100      	movs	r1, #0
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f003 fe11 	bl	8010456 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	32b0      	adds	r2, #176	; 0xb0
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	32b0      	adds	r2, #176	; 0xb0
 800c84e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7c1b      	ldrb	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d138      	bne.n	800c8d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c860:	4b5e      	ldr	r3, [pc, #376]	; (800c9dc <USBD_CDC_Init+0x1e4>)
 800c862:	7819      	ldrb	r1, [r3, #0]
 800c864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c868:	2202      	movs	r2, #2
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f002 fde7 	bl	800f43e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c870:	4b5a      	ldr	r3, [pc, #360]	; (800c9dc <USBD_CDC_Init+0x1e4>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f003 020f 	and.w	r2, r3, #15
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	4613      	mov	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	3324      	adds	r3, #36	; 0x24
 800c886:	2201      	movs	r2, #1
 800c888:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c88a:	4b55      	ldr	r3, [pc, #340]	; (800c9e0 <USBD_CDC_Init+0x1e8>)
 800c88c:	7819      	ldrb	r1, [r3, #0]
 800c88e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c892:	2202      	movs	r2, #2
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f002 fdd2 	bl	800f43e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c89a:	4b51      	ldr	r3, [pc, #324]	; (800c9e0 <USBD_CDC_Init+0x1e8>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	f003 020f 	and.w	r2, r3, #15
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c8b6:	4b4b      	ldr	r3, [pc, #300]	; (800c9e4 <USBD_CDC_Init+0x1ec>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	f003 020f 	and.w	r2, r3, #15
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	440b      	add	r3, r1
 800c8ca:	3326      	adds	r3, #38	; 0x26
 800c8cc:	2210      	movs	r2, #16
 800c8ce:	801a      	strh	r2, [r3, #0]
 800c8d0:	e035      	b.n	800c93e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8d2:	4b42      	ldr	r3, [pc, #264]	; (800c9dc <USBD_CDC_Init+0x1e4>)
 800c8d4:	7819      	ldrb	r1, [r3, #0]
 800c8d6:	2340      	movs	r3, #64	; 0x40
 800c8d8:	2202      	movs	r2, #2
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f002 fdaf 	bl	800f43e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c8e0:	4b3e      	ldr	r3, [pc, #248]	; (800c9dc <USBD_CDC_Init+0x1e4>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	f003 020f 	and.w	r2, r3, #15
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3324      	adds	r3, #36	; 0x24
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c8fa:	4b39      	ldr	r3, [pc, #228]	; (800c9e0 <USBD_CDC_Init+0x1e8>)
 800c8fc:	7819      	ldrb	r1, [r3, #0]
 800c8fe:	2340      	movs	r3, #64	; 0x40
 800c900:	2202      	movs	r2, #2
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f002 fd9b 	bl	800f43e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c908:	4b35      	ldr	r3, [pc, #212]	; (800c9e0 <USBD_CDC_Init+0x1e8>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	f003 020f 	and.w	r2, r3, #15
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	4613      	mov	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	440b      	add	r3, r1
 800c91c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c920:	2201      	movs	r2, #1
 800c922:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c924:	4b2f      	ldr	r3, [pc, #188]	; (800c9e4 <USBD_CDC_Init+0x1ec>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	f003 020f 	and.w	r2, r3, #15
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	440b      	add	r3, r1
 800c938:	3326      	adds	r3, #38	; 0x26
 800c93a:	2210      	movs	r2, #16
 800c93c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c93e:	4b29      	ldr	r3, [pc, #164]	; (800c9e4 <USBD_CDC_Init+0x1ec>)
 800c940:	7819      	ldrb	r1, [r3, #0]
 800c942:	2308      	movs	r3, #8
 800c944:	2203      	movs	r2, #3
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f002 fd79 	bl	800f43e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c94c:	4b25      	ldr	r3, [pc, #148]	; (800c9e4 <USBD_CDC_Init+0x1ec>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	f003 020f 	and.w	r2, r3, #15
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	4613      	mov	r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	4413      	add	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	440b      	add	r3, r1
 800c960:	3324      	adds	r3, #36	; 0x24
 800c962:	2201      	movs	r2, #1
 800c964:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	33b0      	adds	r3, #176	; 0xb0
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c99c:	2302      	movs	r3, #2
 800c99e:	e018      	b.n	800c9d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	7c1b      	ldrb	r3, [r3, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9a8:	4b0d      	ldr	r3, [pc, #52]	; (800c9e0 <USBD_CDC_Init+0x1e8>)
 800c9aa:	7819      	ldrb	r1, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f002 fe30 	bl	800f61c <USBD_LL_PrepareReceive>
 800c9bc:	e008      	b.n	800c9d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9be:	4b08      	ldr	r3, [pc, #32]	; (800c9e0 <USBD_CDC_Init+0x1e8>)
 800c9c0:	7819      	ldrb	r1, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9c8:	2340      	movs	r3, #64	; 0x40
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f002 fe26 	bl	800f61c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	2400009b 	.word	0x2400009b
 800c9e0:	2400009c 	.word	0x2400009c
 800c9e4:	2400009d 	.word	0x2400009d

0800c9e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c9f4:	4b3a      	ldr	r3, [pc, #232]	; (800cae0 <USBD_CDC_DeInit+0xf8>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f002 fd45 	bl	800f48a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ca00:	4b37      	ldr	r3, [pc, #220]	; (800cae0 <USBD_CDC_DeInit+0xf8>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	f003 020f 	and.w	r2, r3, #15
 800ca08:	6879      	ldr	r1, [r7, #4]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	440b      	add	r3, r1
 800ca14:	3324      	adds	r3, #36	; 0x24
 800ca16:	2200      	movs	r2, #0
 800ca18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ca1a:	4b32      	ldr	r3, [pc, #200]	; (800cae4 <USBD_CDC_DeInit+0xfc>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f002 fd32 	bl	800f48a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ca26:	4b2f      	ldr	r3, [pc, #188]	; (800cae4 <USBD_CDC_DeInit+0xfc>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	f003 020f 	and.w	r2, r3, #15
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	4613      	mov	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	440b      	add	r3, r1
 800ca3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca3e:	2200      	movs	r2, #0
 800ca40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ca42:	4b29      	ldr	r3, [pc, #164]	; (800cae8 <USBD_CDC_DeInit+0x100>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f002 fd1e 	bl	800f48a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ca4e:	4b26      	ldr	r3, [pc, #152]	; (800cae8 <USBD_CDC_DeInit+0x100>)
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	f003 020f 	and.w	r2, r3, #15
 800ca56:	6879      	ldr	r1, [r7, #4]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	440b      	add	r3, r1
 800ca62:	3324      	adds	r3, #36	; 0x24
 800ca64:	2200      	movs	r2, #0
 800ca66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ca68:	4b1f      	ldr	r3, [pc, #124]	; (800cae8 <USBD_CDC_DeInit+0x100>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	f003 020f 	and.w	r2, r3, #15
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	4613      	mov	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	440b      	add	r3, r1
 800ca7c:	3326      	adds	r3, #38	; 0x26
 800ca7e:	2200      	movs	r2, #0
 800ca80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	32b0      	adds	r2, #176	; 0xb0
 800ca8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d01f      	beq.n	800cad4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	33b0      	adds	r3, #176	; 0xb0
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	32b0      	adds	r2, #176	; 0xb0
 800cab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f002 fdf2 	bl	800f6a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	32b0      	adds	r2, #176	; 0xb0
 800cac6:	2100      	movs	r1, #0
 800cac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	2400009b 	.word	0x2400009b
 800cae4:	2400009c 	.word	0x2400009c
 800cae8:	2400009d 	.word	0x2400009d

0800caec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	32b0      	adds	r2, #176	; 0xb0
 800cb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d101      	bne.n	800cb1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cb18:	2303      	movs	r3, #3
 800cb1a:	e0bf      	b.n	800cc9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d050      	beq.n	800cbca <USBD_CDC_Setup+0xde>
 800cb28:	2b20      	cmp	r3, #32
 800cb2a:	f040 80af 	bne.w	800cc8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	88db      	ldrh	r3, [r3, #6]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d03a      	beq.n	800cbac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	b25b      	sxtb	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	da1b      	bge.n	800cb78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	33b0      	adds	r3, #176	; 0xb0
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cb56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	88d2      	ldrh	r2, [r2, #6]
 800cb5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	88db      	ldrh	r3, [r3, #6]
 800cb62:	2b07      	cmp	r3, #7
 800cb64:	bf28      	it	cs
 800cb66:	2307      	movcs	r3, #7
 800cb68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	89fa      	ldrh	r2, [r7, #14]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f001 fdb3 	bl	800e6dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cb76:	e090      	b.n	800cc9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	785a      	ldrb	r2, [r3, #1]
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	88db      	ldrh	r3, [r3, #6]
 800cb86:	2b3f      	cmp	r3, #63	; 0x3f
 800cb88:	d803      	bhi.n	800cb92 <USBD_CDC_Setup+0xa6>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	88db      	ldrh	r3, [r3, #6]
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	e000      	b.n	800cb94 <USBD_CDC_Setup+0xa8>
 800cb92:	2240      	movs	r2, #64	; 0x40
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cb9a:	6939      	ldr	r1, [r7, #16]
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cba2:	461a      	mov	r2, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f001 fdc5 	bl	800e734 <USBD_CtlPrepareRx>
      break;
 800cbaa:	e076      	b.n	800cc9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	33b0      	adds	r3, #176	; 0xb0
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	7850      	ldrb	r0, [r2, #1]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	4798      	blx	r3
      break;
 800cbc8:	e067      	b.n	800cc9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	2b0b      	cmp	r3, #11
 800cbd0:	d851      	bhi.n	800cc76 <USBD_CDC_Setup+0x18a>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <USBD_CDC_Setup+0xec>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cc09 	.word	0x0800cc09
 800cbdc:	0800cc85 	.word	0x0800cc85
 800cbe0:	0800cc77 	.word	0x0800cc77
 800cbe4:	0800cc77 	.word	0x0800cc77
 800cbe8:	0800cc77 	.word	0x0800cc77
 800cbec:	0800cc77 	.word	0x0800cc77
 800cbf0:	0800cc77 	.word	0x0800cc77
 800cbf4:	0800cc77 	.word	0x0800cc77
 800cbf8:	0800cc77 	.word	0x0800cc77
 800cbfc:	0800cc77 	.word	0x0800cc77
 800cc00:	0800cc33 	.word	0x0800cc33
 800cc04:	0800cc5d 	.word	0x0800cc5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d107      	bne.n	800cc24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cc14:	f107 030a 	add.w	r3, r7, #10
 800cc18:	2202      	movs	r2, #2
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f001 fd5d 	bl	800e6dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc22:	e032      	b.n	800cc8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f001 fce7 	bl	800e5fa <USBD_CtlError>
            ret = USBD_FAIL;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	75fb      	strb	r3, [r7, #23]
          break;
 800cc30:	e02b      	b.n	800cc8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d107      	bne.n	800cc4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc3e:	f107 030d 	add.w	r3, r7, #13
 800cc42:	2201      	movs	r2, #1
 800cc44:	4619      	mov	r1, r3
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 fd48 	bl	800e6dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc4c:	e01d      	b.n	800cc8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f001 fcd2 	bl	800e5fa <USBD_CtlError>
            ret = USBD_FAIL;
 800cc56:	2303      	movs	r3, #3
 800cc58:	75fb      	strb	r3, [r7, #23]
          break;
 800cc5a:	e016      	b.n	800cc8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d00f      	beq.n	800cc88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f001 fcc5 	bl	800e5fa <USBD_CtlError>
            ret = USBD_FAIL;
 800cc70:	2303      	movs	r3, #3
 800cc72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cc74:	e008      	b.n	800cc88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 fcbe 	bl	800e5fa <USBD_CtlError>
          ret = USBD_FAIL;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	75fb      	strb	r3, [r7, #23]
          break;
 800cc82:	e002      	b.n	800cc8a <USBD_CDC_Setup+0x19e>
          break;
 800cc84:	bf00      	nop
 800cc86:	e008      	b.n	800cc9a <USBD_CDC_Setup+0x1ae>
          break;
 800cc88:	bf00      	nop
      }
      break;
 800cc8a:	e006      	b.n	800cc9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f001 fcb3 	bl	800e5fa <USBD_CtlError>
      ret = USBD_FAIL;
 800cc94:	2303      	movs	r3, #3
 800cc96:	75fb      	strb	r3, [r7, #23]
      break;
 800cc98:	bf00      	nop
  }

  return (uint8_t)ret;
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3718      	adds	r7, #24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	32b0      	adds	r2, #176	; 0xb0
 800ccc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e065      	b.n	800cd9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	32b0      	adds	r2, #176	; 0xb0
 800ccd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccdc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	f003 020f 	and.w	r2, r3, #15
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	440b      	add	r3, r1
 800ccf0:	3318      	adds	r3, #24
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d02f      	beq.n	800cd58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ccf8:	78fb      	ldrb	r3, [r7, #3]
 800ccfa:	f003 020f 	and.w	r2, r3, #15
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	4613      	mov	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4413      	add	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	440b      	add	r3, r1
 800cd0a:	3318      	adds	r3, #24
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	78fb      	ldrb	r3, [r7, #3]
 800cd10:	f003 010f 	and.w	r1, r3, #15
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	460b      	mov	r3, r1
 800cd18:	00db      	lsls	r3, r3, #3
 800cd1a:	440b      	add	r3, r1
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4403      	add	r3, r0
 800cd20:	3344      	adds	r3, #68	; 0x44
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd28:	fb01 f303 	mul.w	r3, r1, r3
 800cd2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d112      	bne.n	800cd58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	f003 020f 	and.w	r2, r3, #15
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	440b      	add	r3, r1
 800cd44:	3318      	adds	r3, #24
 800cd46:	2200      	movs	r2, #0
 800cd48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd4a:	78f9      	ldrb	r1, [r7, #3]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	2200      	movs	r2, #0
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f002 fc42 	bl	800f5da <USBD_LL_Transmit>
 800cd56:	e01f      	b.n	800cd98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	33b0      	adds	r3, #176	; 0xb0
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d010      	beq.n	800cd98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	33b0      	adds	r3, #176	; 0xb0
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cd94:	78fa      	ldrb	r2, [r7, #3]
 800cd96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	460b      	mov	r3, r1
 800cdac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	32b0      	adds	r2, #176	; 0xb0
 800cdb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	32b0      	adds	r2, #176	; 0xb0
 800cdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e01a      	b.n	800ce0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cdd4:	78fb      	ldrb	r3, [r7, #3]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f002 fc40 	bl	800f65e <USBD_LL_GetRxDataSize>
 800cdde:	4602      	mov	r2, r0
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	33b0      	adds	r3, #176	; 0xb0
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce04:	4611      	mov	r1, r2
 800ce06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	32b0      	adds	r2, #176	; 0xb0
 800ce24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d101      	bne.n	800ce34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce30:	2303      	movs	r3, #3
 800ce32:	e025      	b.n	800ce80 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	33b0      	adds	r3, #176	; 0xb0
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d01a      	beq.n	800ce7e <USBD_CDC_EP0_RxReady+0x6c>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce4e:	2bff      	cmp	r3, #255	; 0xff
 800ce50:	d015      	beq.n	800ce7e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	33b0      	adds	r3, #176	; 0xb0
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ce6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce72:	b292      	uxth	r2, r2
 800ce74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	22ff      	movs	r2, #255	; 0xff
 800ce7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce90:	2182      	movs	r1, #130	; 0x82
 800ce92:	4818      	ldr	r0, [pc, #96]	; (800cef4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce94:	f000 fd4f 	bl	800d936 <USBD_GetEpDesc>
 800ce98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	4815      	ldr	r0, [pc, #84]	; (800cef4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce9e:	f000 fd4a 	bl	800d936 <USBD_GetEpDesc>
 800cea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cea4:	2181      	movs	r1, #129	; 0x81
 800cea6:	4813      	ldr	r0, [pc, #76]	; (800cef4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cea8:	f000 fd45 	bl	800d936 <USBD_GetEpDesc>
 800ceac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2210      	movs	r2, #16
 800ceb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d006      	beq.n	800cece <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cec8:	711a      	strb	r2, [r3, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d006      	beq.n	800cee2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cedc:	711a      	strb	r2, [r3, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2243      	movs	r2, #67	; 0x43
 800cee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cee8:	4b02      	ldr	r3, [pc, #8]	; (800cef4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	24000058 	.word	0x24000058

0800cef8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf00:	2182      	movs	r1, #130	; 0x82
 800cf02:	4818      	ldr	r0, [pc, #96]	; (800cf64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf04:	f000 fd17 	bl	800d936 <USBD_GetEpDesc>
 800cf08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf0a:	2101      	movs	r1, #1
 800cf0c:	4815      	ldr	r0, [pc, #84]	; (800cf64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf0e:	f000 fd12 	bl	800d936 <USBD_GetEpDesc>
 800cf12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf14:	2181      	movs	r1, #129	; 0x81
 800cf16:	4813      	ldr	r0, [pc, #76]	; (800cf64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf18:	f000 fd0d 	bl	800d936 <USBD_GetEpDesc>
 800cf1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2210      	movs	r2, #16
 800cf28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d006      	beq.n	800cf3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	2200      	movs	r2, #0
 800cf34:	711a      	strb	r2, [r3, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f042 0202 	orr.w	r2, r2, #2
 800cf3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d006      	beq.n	800cf52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	711a      	strb	r2, [r3, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f042 0202 	orr.w	r2, r2, #2
 800cf50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2243      	movs	r2, #67	; 0x43
 800cf56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf58:	4b02      	ldr	r3, [pc, #8]	; (800cf64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	24000058 	.word	0x24000058

0800cf68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf70:	2182      	movs	r1, #130	; 0x82
 800cf72:	4818      	ldr	r0, [pc, #96]	; (800cfd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf74:	f000 fcdf 	bl	800d936 <USBD_GetEpDesc>
 800cf78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	4815      	ldr	r0, [pc, #84]	; (800cfd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf7e:	f000 fcda 	bl	800d936 <USBD_GetEpDesc>
 800cf82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf84:	2181      	movs	r1, #129	; 0x81
 800cf86:	4813      	ldr	r0, [pc, #76]	; (800cfd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cf88:	f000 fcd5 	bl	800d936 <USBD_GetEpDesc>
 800cf8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2210      	movs	r2, #16
 800cf98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d006      	beq.n	800cfae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfa8:	711a      	strb	r2, [r3, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d006      	beq.n	800cfc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfbc:	711a      	strb	r2, [r3, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2243      	movs	r2, #67	; 0x43
 800cfc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cfc8:	4b02      	ldr	r3, [pc, #8]	; (800cfd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	24000058 	.word	0x24000058

0800cfd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	220a      	movs	r2, #10
 800cfe4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cfe6:	4b03      	ldr	r3, [pc, #12]	; (800cff4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	24000014 	.word	0x24000014

0800cff8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d101      	bne.n	800d00c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d008:	2303      	movs	r3, #3
 800d00a:	e009      	b.n	800d020 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	33b0      	adds	r3, #176	; 0xb0
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b087      	sub	sp, #28
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	32b0      	adds	r2, #176	; 0xb0
 800d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d046:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d04e:	2303      	movs	r3, #3
 800d050:	e008      	b.n	800d064 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	371c      	adds	r7, #28
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	32b0      	adds	r2, #176	; 0xb0
 800d084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d088:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d090:	2303      	movs	r3, #3
 800d092:	e004      	b.n	800d09e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
	...

0800d0ac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	32b0      	adds	r2, #176	; 0xb0
 800d0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	e025      	b.n	800d11e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d11f      	bne.n	800d11c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d0e4:	4b10      	ldr	r3, [pc, #64]	; (800d128 <USBD_CDC_TransmitPacket+0x7c>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f003 020f 	and.w	r2, r3, #15
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4403      	add	r3, r0
 800d0fe:	3318      	adds	r3, #24
 800d100:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d102:	4b09      	ldr	r3, [pc, #36]	; (800d128 <USBD_CDC_TransmitPacket+0x7c>)
 800d104:	7819      	ldrb	r1, [r3, #0]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f002 fa61 	bl	800f5da <USBD_LL_Transmit>

    ret = USBD_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	2400009b 	.word	0x2400009b

0800d12c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	32b0      	adds	r2, #176	; 0xb0
 800d13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d142:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	32b0      	adds	r2, #176	; 0xb0
 800d14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d156:	2303      	movs	r3, #3
 800d158:	e018      	b.n	800d18c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	7c1b      	ldrb	r3, [r3, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10a      	bne.n	800d178 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d162:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <USBD_CDC_ReceivePacket+0x68>)
 800d164:	7819      	ldrb	r1, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d16c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f002 fa53 	bl	800f61c <USBD_LL_PrepareReceive>
 800d176:	e008      	b.n	800d18a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d178:	4b06      	ldr	r3, [pc, #24]	; (800d194 <USBD_CDC_ReceivePacket+0x68>)
 800d17a:	7819      	ldrb	r1, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d182:	2340      	movs	r3, #64	; 0x40
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f002 fa49 	bl	800f61c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	2400009c 	.word	0x2400009c

0800d198 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	e01f      	b.n	800d1f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	79fa      	ldrb	r2, [r7, #7]
 800d1e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f002 f8bf 	bl	800f368 <USBD_LL_Init>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d202:	2300      	movs	r3, #0
 800d204:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d20c:	2303      	movs	r3, #3
 800d20e:	e025      	b.n	800d25c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	32ae      	adds	r2, #174	; 0xae
 800d222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00f      	beq.n	800d24c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	32ae      	adds	r2, #174	; 0xae
 800d236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	f107 020e 	add.w	r2, r7, #14
 800d240:	4610      	mov	r0, r2
 800d242:	4798      	blx	r3
 800d244:	4602      	mov	r2, r0
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f002 f8cb 	bl	800f408 <USBD_LL_Start>
 800d272:	4603      	mov	r3, r0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d284:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d286:	4618      	mov	r0, r3
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	460b      	mov	r3, r1
 800d29c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d009      	beq.n	800d2c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	78fa      	ldrb	r2, [r7, #3]
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	4798      	blx	r3
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	78fa      	ldrb	r2, [r7, #3]
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	4798      	blx	r3
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d001      	beq.n	800d2f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	f001 f938 	bl	800e586 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d324:	461a      	mov	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d332:	f003 031f 	and.w	r3, r3, #31
 800d336:	2b02      	cmp	r3, #2
 800d338:	d01a      	beq.n	800d370 <USBD_LL_SetupStage+0x72>
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d822      	bhi.n	800d384 <USBD_LL_SetupStage+0x86>
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <USBD_LL_SetupStage+0x4a>
 800d342:	2b01      	cmp	r3, #1
 800d344:	d00a      	beq.n	800d35c <USBD_LL_SetupStage+0x5e>
 800d346:	e01d      	b.n	800d384 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 fb65 	bl	800da20 <USBD_StdDevReq>
 800d356:	4603      	mov	r3, r0
 800d358:	73fb      	strb	r3, [r7, #15]
      break;
 800d35a:	e020      	b.n	800d39e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d362:	4619      	mov	r1, r3
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fbcd 	bl	800db04 <USBD_StdItfReq>
 800d36a:	4603      	mov	r3, r0
 800d36c:	73fb      	strb	r3, [r7, #15]
      break;
 800d36e:	e016      	b.n	800d39e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fc2f 	bl	800dbdc <USBD_StdEPReq>
 800d37e:	4603      	mov	r3, r0
 800d380:	73fb      	strb	r3, [r7, #15]
      break;
 800d382:	e00c      	b.n	800d39e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d38a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	4619      	mov	r1, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f002 f898 	bl	800f4c8 <USBD_LL_StallEP>
 800d398:	4603      	mov	r3, r0
 800d39a:	73fb      	strb	r3, [r7, #15]
      break;
 800d39c:	bf00      	nop
  }

  return ret;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d3ba:	7afb      	ldrb	r3, [r7, #11]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d16e      	bne.n	800d49e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d3c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	f040 8098 	bne.w	800d504 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	689a      	ldr	r2, [r3, #8]
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d913      	bls.n	800d408 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	1ad2      	subs	r2, r2, r3
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	bf28      	it	cs
 800d3fa:	4613      	movcs	r3, r2
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6879      	ldr	r1, [r7, #4]
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f001 f9b4 	bl	800e76e <USBD_CtlContinueRx>
 800d406:	e07d      	b.n	800d504 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d40e:	f003 031f 	and.w	r3, r3, #31
 800d412:	2b02      	cmp	r3, #2
 800d414:	d014      	beq.n	800d440 <USBD_LL_DataOutStage+0x98>
 800d416:	2b02      	cmp	r3, #2
 800d418:	d81d      	bhi.n	800d456 <USBD_LL_DataOutStage+0xae>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <USBD_LL_DataOutStage+0x7c>
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d003      	beq.n	800d42a <USBD_LL_DataOutStage+0x82>
 800d422:	e018      	b.n	800d456 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d424:	2300      	movs	r3, #0
 800d426:	75bb      	strb	r3, [r7, #22]
            break;
 800d428:	e018      	b.n	800d45c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d430:	b2db      	uxtb	r3, r3
 800d432:	4619      	mov	r1, r3
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f000 fa64 	bl	800d902 <USBD_CoreFindIF>
 800d43a:	4603      	mov	r3, r0
 800d43c:	75bb      	strb	r3, [r7, #22]
            break;
 800d43e:	e00d      	b.n	800d45c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d446:	b2db      	uxtb	r3, r3
 800d448:	4619      	mov	r1, r3
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 fa66 	bl	800d91c <USBD_CoreFindEP>
 800d450:	4603      	mov	r3, r0
 800d452:	75bb      	strb	r3, [r7, #22]
            break;
 800d454:	e002      	b.n	800d45c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d456:	2300      	movs	r3, #0
 800d458:	75bb      	strb	r3, [r7, #22]
            break;
 800d45a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d45c:	7dbb      	ldrb	r3, [r7, #22]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d119      	bne.n	800d496 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b03      	cmp	r3, #3
 800d46c:	d113      	bne.n	800d496 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d46e:	7dba      	ldrb	r2, [r7, #22]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	32ae      	adds	r2, #174	; 0xae
 800d474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00b      	beq.n	800d496 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d47e:	7dba      	ldrb	r2, [r7, #22]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d486:	7dba      	ldrb	r2, [r7, #22]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	32ae      	adds	r2, #174	; 0xae
 800d48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f001 f97a 	bl	800e790 <USBD_CtlSendStatus>
 800d49c:	e032      	b.n	800d504 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 fa37 	bl	800d91c <USBD_CoreFindEP>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4b2:	7dbb      	ldrb	r3, [r7, #22]
 800d4b4:	2bff      	cmp	r3, #255	; 0xff
 800d4b6:	d025      	beq.n	800d504 <USBD_LL_DataOutStage+0x15c>
 800d4b8:	7dbb      	ldrb	r3, [r7, #22]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d122      	bne.n	800d504 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d117      	bne.n	800d4fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d4ca:	7dba      	ldrb	r2, [r7, #22]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	32ae      	adds	r2, #174	; 0xae
 800d4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00f      	beq.n	800d4fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d4da:	7dba      	ldrb	r2, [r7, #22]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d4e2:	7dba      	ldrb	r2, [r7, #22]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	32ae      	adds	r2, #174	; 0xae
 800d4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ec:	699b      	ldr	r3, [r3, #24]
 800d4ee:	7afa      	ldrb	r2, [r7, #11]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	4798      	blx	r3
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d500:	7dfb      	ldrb	r3, [r7, #23]
 800d502:	e000      	b.n	800d506 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b086      	sub	sp, #24
 800d512:	af00      	add	r7, sp, #0
 800d514:	60f8      	str	r0, [r7, #12]
 800d516:	460b      	mov	r3, r1
 800d518:	607a      	str	r2, [r7, #4]
 800d51a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d51c:	7afb      	ldrb	r3, [r7, #11]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d16f      	bne.n	800d602 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	3314      	adds	r3, #20
 800d526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d15a      	bne.n	800d5e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	689a      	ldr	r2, [r3, #8]
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d914      	bls.n	800d568 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	689a      	ldr	r2, [r3, #8]
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	1ad2      	subs	r2, r2, r3
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	461a      	mov	r2, r3
 800d552:	6879      	ldr	r1, [r7, #4]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f001 f8dc 	bl	800e712 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d55a:	2300      	movs	r3, #0
 800d55c:	2200      	movs	r2, #0
 800d55e:	2100      	movs	r1, #0
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f002 f85b 	bl	800f61c <USBD_LL_PrepareReceive>
 800d566:	e03f      	b.n	800d5e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	68da      	ldr	r2, [r3, #12]
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	429a      	cmp	r2, r3
 800d572:	d11c      	bne.n	800d5ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	685a      	ldr	r2, [r3, #4]
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d316      	bcc.n	800d5ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d20f      	bcs.n	800d5ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d58e:	2200      	movs	r2, #0
 800d590:	2100      	movs	r1, #0
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f001 f8bd 	bl	800e712 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f002 f838 	bl	800f61c <USBD_LL_PrepareReceive>
 800d5ac:	e01c      	b.n	800d5e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b03      	cmp	r3, #3
 800d5b8:	d10f      	bne.n	800d5da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d009      	beq.n	800d5da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5da:	2180      	movs	r1, #128	; 0x80
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f001 ff73 	bl	800f4c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f001 f8e7 	bl	800e7b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d03a      	beq.n	800d668 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff fe42 	bl	800d27c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d600:	e032      	b.n	800d668 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d602:	7afb      	ldrb	r3, [r7, #11]
 800d604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	4619      	mov	r1, r3
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f000 f985 	bl	800d91c <USBD_CoreFindEP>
 800d612:	4603      	mov	r3, r0
 800d614:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	2bff      	cmp	r3, #255	; 0xff
 800d61a:	d025      	beq.n	800d668 <USBD_LL_DataInStage+0x15a>
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d122      	bne.n	800d668 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b03      	cmp	r3, #3
 800d62c:	d11c      	bne.n	800d668 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d62e:	7dfa      	ldrb	r2, [r7, #23]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	32ae      	adds	r2, #174	; 0xae
 800d634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d014      	beq.n	800d668 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d63e:	7dfa      	ldrb	r2, [r7, #23]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d646:	7dfa      	ldrb	r2, [r7, #23]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	32ae      	adds	r2, #174	; 0xae
 800d64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	7afa      	ldrb	r2, [r7, #11]
 800d654:	4611      	mov	r1, r2
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	4798      	blx	r3
 800d65a:	4603      	mov	r3, r0
 800d65c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d65e:	7dbb      	ldrb	r3, [r7, #22]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d664:	7dbb      	ldrb	r3, [r7, #22]
 800d666:	e000      	b.n	800d66a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3718      	adds	r7, #24
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d014      	beq.n	800d6d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00e      	beq.n	800d6d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	6852      	ldr	r2, [r2, #4]
 800d6c6:	b2d2      	uxtb	r2, r2
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	4798      	blx	r3
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d6d8:	2340      	movs	r3, #64	; 0x40
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f001 fead 	bl	800f43e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2240      	movs	r2, #64	; 0x40
 800d6f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d6f4:	2340      	movs	r3, #64	; 0x40
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	2180      	movs	r1, #128	; 0x80
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f001 fe9f 	bl	800f43e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2240      	movs	r2, #64	; 0x40
 800d70a:	621a      	str	r2, [r3, #32]

  return ret;
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	460b      	mov	r3, r1
 800d720:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	78fa      	ldrb	r2, [r7, #3]
 800d726:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	370c      	adds	r7, #12
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d736:	b480      	push	{r7}
 800d738:	b083      	sub	sp, #12
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b04      	cmp	r3, #4
 800d748:	d006      	beq.n	800d758 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d750:	b2da      	uxtb	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2204      	movs	r2, #4
 800d75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b04      	cmp	r3, #4
 800d780:	d106      	bne.n	800d790 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d110      	bne.n	800d7d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ce:	69db      	ldr	r3, [r3, #28]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	32ae      	adds	r2, #174	; 0xae
 800d7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	e01c      	b.n	800d83a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2b03      	cmp	r3, #3
 800d80a:	d115      	bne.n	800d838 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	32ae      	adds	r2, #174	; 0xae
 800d816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d81a:	6a1b      	ldr	r3, [r3, #32]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	32ae      	adds	r2, #174	; 0xae
 800d82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d82e:	6a1b      	ldr	r3, [r3, #32]
 800d830:	78fa      	ldrb	r2, [r7, #3]
 800d832:	4611      	mov	r1, r2
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b082      	sub	sp, #8
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	32ae      	adds	r2, #174	; 0xae
 800d858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d860:	2303      	movs	r3, #3
 800d862:	e01c      	b.n	800d89e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d115      	bne.n	800d89c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	32ae      	adds	r2, #174	; 0xae
 800d87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00b      	beq.n	800d89c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	32ae      	adds	r2, #174	; 0xae
 800d88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d894:	78fa      	ldrb	r2, [r7, #3]
 800d896:	4611      	mov	r1, r2
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b083      	sub	sp, #12
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d8ae:	2300      	movs	r3, #0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00e      	beq.n	800d8f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	6852      	ldr	r2, [r2, #4]
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	4798      	blx	r3
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d902:	b480      	push	{r7}
 800d904:	b083      	sub	sp, #12
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	460b      	mov	r3, r1
 800d90c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d90e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d910:	4618      	mov	r0, r3
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	460b      	mov	r3, r1
 800d926:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d928:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b086      	sub	sp, #24
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	460b      	mov	r3, r1
 800d940:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	885b      	ldrh	r3, [r3, #2]
 800d952:	b29a      	uxth	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d920      	bls.n	800d9a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	b29b      	uxth	r3, r3
 800d964:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d966:	e013      	b.n	800d990 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d968:	f107 030a 	add.w	r3, r7, #10
 800d96c:	4619      	mov	r1, r3
 800d96e:	6978      	ldr	r0, [r7, #20]
 800d970:	f000 f81b 	bl	800d9aa <USBD_GetNextDesc>
 800d974:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	785b      	ldrb	r3, [r3, #1]
 800d97a:	2b05      	cmp	r3, #5
 800d97c:	d108      	bne.n	800d990 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	789b      	ldrb	r3, [r3, #2]
 800d986:	78fa      	ldrb	r2, [r7, #3]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d008      	beq.n	800d99e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d98c:	2300      	movs	r3, #0
 800d98e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	885b      	ldrh	r3, [r3, #2]
 800d994:	b29a      	uxth	r2, r3
 800d996:	897b      	ldrh	r3, [r7, #10]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d8e5      	bhi.n	800d968 <USBD_GetEpDesc+0x32>
 800d99c:	e000      	b.n	800d9a0 <USBD_GetEpDesc+0x6a>
          break;
 800d99e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d9a0:	693b      	ldr	r3, [r7, #16]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3718      	adds	r7, #24
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	881a      	ldrh	r2, [r3, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	4413      	add	r3, r2
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b087      	sub	sp, #28
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800da02:	8a3b      	ldrh	r3, [r7, #16]
 800da04:	021b      	lsls	r3, r3, #8
 800da06:	b21a      	sxth	r2, r3
 800da08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	b21b      	sxth	r3, r3
 800da10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800da12:	89fb      	ldrh	r3, [r7, #14]
}
 800da14:	4618      	mov	r0, r3
 800da16:	371c      	adds	r7, #28
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da36:	2b40      	cmp	r3, #64	; 0x40
 800da38:	d005      	beq.n	800da46 <USBD_StdDevReq+0x26>
 800da3a:	2b40      	cmp	r3, #64	; 0x40
 800da3c:	d857      	bhi.n	800daee <USBD_StdDevReq+0xce>
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00f      	beq.n	800da62 <USBD_StdDevReq+0x42>
 800da42:	2b20      	cmp	r3, #32
 800da44:	d153      	bne.n	800daee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	32ae      	adds	r2, #174	; 0xae
 800da50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	4798      	blx	r3
 800da5c:	4603      	mov	r3, r0
 800da5e:	73fb      	strb	r3, [r7, #15]
      break;
 800da60:	e04a      	b.n	800daf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	785b      	ldrb	r3, [r3, #1]
 800da66:	2b09      	cmp	r3, #9
 800da68:	d83b      	bhi.n	800dae2 <USBD_StdDevReq+0xc2>
 800da6a:	a201      	add	r2, pc, #4	; (adr r2, 800da70 <USBD_StdDevReq+0x50>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800dac5 	.word	0x0800dac5
 800da74:	0800dad9 	.word	0x0800dad9
 800da78:	0800dae3 	.word	0x0800dae3
 800da7c:	0800dacf 	.word	0x0800dacf
 800da80:	0800dae3 	.word	0x0800dae3
 800da84:	0800daa3 	.word	0x0800daa3
 800da88:	0800da99 	.word	0x0800da99
 800da8c:	0800dae3 	.word	0x0800dae3
 800da90:	0800dabb 	.word	0x0800dabb
 800da94:	0800daad 	.word	0x0800daad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fa3c 	bl	800df18 <USBD_GetDescriptor>
          break;
 800daa0:	e024      	b.n	800daec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fbcb 	bl	800e240 <USBD_SetAddress>
          break;
 800daaa:	e01f      	b.n	800daec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800daac:	6839      	ldr	r1, [r7, #0]
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fc0a 	bl	800e2c8 <USBD_SetConfig>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]
          break;
 800dab8:	e018      	b.n	800daec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fcad 	bl	800e41c <USBD_GetConfig>
          break;
 800dac2:	e013      	b.n	800daec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dac4:	6839      	ldr	r1, [r7, #0]
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fcde 	bl	800e488 <USBD_GetStatus>
          break;
 800dacc:	e00e      	b.n	800daec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fd0d 	bl	800e4f0 <USBD_SetFeature>
          break;
 800dad6:	e009      	b.n	800daec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 fd31 	bl	800e542 <USBD_ClrFeature>
          break;
 800dae0:	e004      	b.n	800daec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dae2:	6839      	ldr	r1, [r7, #0]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fd88 	bl	800e5fa <USBD_CtlError>
          break;
 800daea:	bf00      	nop
      }
      break;
 800daec:	e004      	b.n	800daf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fd82 	bl	800e5fa <USBD_CtlError>
      break;
 800daf6:	bf00      	nop
  }

  return ret;
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop

0800db04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db1a:	2b40      	cmp	r3, #64	; 0x40
 800db1c:	d005      	beq.n	800db2a <USBD_StdItfReq+0x26>
 800db1e:	2b40      	cmp	r3, #64	; 0x40
 800db20:	d852      	bhi.n	800dbc8 <USBD_StdItfReq+0xc4>
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <USBD_StdItfReq+0x26>
 800db26:	2b20      	cmp	r3, #32
 800db28:	d14e      	bne.n	800dbc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db30:	b2db      	uxtb	r3, r3
 800db32:	3b01      	subs	r3, #1
 800db34:	2b02      	cmp	r3, #2
 800db36:	d840      	bhi.n	800dbba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	889b      	ldrh	r3, [r3, #4]
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d836      	bhi.n	800dbb0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	889b      	ldrh	r3, [r3, #4]
 800db46:	b2db      	uxtb	r3, r3
 800db48:	4619      	mov	r1, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff fed9 	bl	800d902 <USBD_CoreFindIF>
 800db50:	4603      	mov	r3, r0
 800db52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db54:	7bbb      	ldrb	r3, [r7, #14]
 800db56:	2bff      	cmp	r3, #255	; 0xff
 800db58:	d01d      	beq.n	800db96 <USBD_StdItfReq+0x92>
 800db5a:	7bbb      	ldrb	r3, [r7, #14]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d11a      	bne.n	800db96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800db60:	7bba      	ldrb	r2, [r7, #14]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	32ae      	adds	r2, #174	; 0xae
 800db66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00f      	beq.n	800db90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800db70:	7bba      	ldrb	r2, [r7, #14]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db78:	7bba      	ldrb	r2, [r7, #14]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	32ae      	adds	r2, #174	; 0xae
 800db7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	6839      	ldr	r1, [r7, #0]
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
 800db8a:	4603      	mov	r3, r0
 800db8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db8e:	e004      	b.n	800db9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800db90:	2303      	movs	r3, #3
 800db92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800db94:	e001      	b.n	800db9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800db96:	2303      	movs	r3, #3
 800db98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	88db      	ldrh	r3, [r3, #6]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d110      	bne.n	800dbc4 <USBD_StdItfReq+0xc0>
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10d      	bne.n	800dbc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fdf1 	bl	800e790 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dbae:	e009      	b.n	800dbc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fd21 	bl	800e5fa <USBD_CtlError>
          break;
 800dbb8:	e004      	b.n	800dbc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fd1c 	bl	800e5fa <USBD_CtlError>
          break;
 800dbc2:	e000      	b.n	800dbc6 <USBD_StdItfReq+0xc2>
          break;
 800dbc4:	bf00      	nop
      }
      break;
 800dbc6:	e004      	b.n	800dbd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fd15 	bl	800e5fa <USBD_CtlError>
      break;
 800dbd0:	bf00      	nop
  }

  return ret;
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	889b      	ldrh	r3, [r3, #4]
 800dbee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbf8:	2b40      	cmp	r3, #64	; 0x40
 800dbfa:	d007      	beq.n	800dc0c <USBD_StdEPReq+0x30>
 800dbfc:	2b40      	cmp	r3, #64	; 0x40
 800dbfe:	f200 817f 	bhi.w	800df00 <USBD_StdEPReq+0x324>
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d02a      	beq.n	800dc5c <USBD_StdEPReq+0x80>
 800dc06:	2b20      	cmp	r3, #32
 800dc08:	f040 817a 	bne.w	800df00 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc0c:	7bbb      	ldrb	r3, [r7, #14]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7ff fe83 	bl	800d91c <USBD_CoreFindEP>
 800dc16:	4603      	mov	r3, r0
 800dc18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc1a:	7b7b      	ldrb	r3, [r7, #13]
 800dc1c:	2bff      	cmp	r3, #255	; 0xff
 800dc1e:	f000 8174 	beq.w	800df0a <USBD_StdEPReq+0x32e>
 800dc22:	7b7b      	ldrb	r3, [r7, #13]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f040 8170 	bne.w	800df0a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dc2a:	7b7a      	ldrb	r2, [r7, #13]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dc32:	7b7a      	ldrb	r2, [r7, #13]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	32ae      	adds	r2, #174	; 0xae
 800dc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f000 8163 	beq.w	800df0a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dc44:	7b7a      	ldrb	r2, [r7, #13]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	32ae      	adds	r2, #174	; 0xae
 800dc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	6839      	ldr	r1, [r7, #0]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	4798      	blx	r3
 800dc56:	4603      	mov	r3, r0
 800dc58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc5a:	e156      	b.n	800df0a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	785b      	ldrb	r3, [r3, #1]
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d008      	beq.n	800dc76 <USBD_StdEPReq+0x9a>
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	f300 8145 	bgt.w	800def4 <USBD_StdEPReq+0x318>
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 809b 	beq.w	800dda6 <USBD_StdEPReq+0x1ca>
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d03c      	beq.n	800dcee <USBD_StdEPReq+0x112>
 800dc74:	e13e      	b.n	800def4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	d002      	beq.n	800dc88 <USBD_StdEPReq+0xac>
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d016      	beq.n	800dcb4 <USBD_StdEPReq+0xd8>
 800dc86:	e02c      	b.n	800dce2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00d      	beq.n	800dcaa <USBD_StdEPReq+0xce>
 800dc8e:	7bbb      	ldrb	r3, [r7, #14]
 800dc90:	2b80      	cmp	r3, #128	; 0x80
 800dc92:	d00a      	beq.n	800dcaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc94:	7bbb      	ldrb	r3, [r7, #14]
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f001 fc15 	bl	800f4c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc9e:	2180      	movs	r1, #128	; 0x80
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f001 fc11 	bl	800f4c8 <USBD_LL_StallEP>
 800dca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dca8:	e020      	b.n	800dcec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fca4 	bl	800e5fa <USBD_CtlError>
              break;
 800dcb2:	e01b      	b.n	800dcec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	885b      	ldrh	r3, [r3, #2]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10e      	bne.n	800dcda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dcbc:	7bbb      	ldrb	r3, [r7, #14]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00b      	beq.n	800dcda <USBD_StdEPReq+0xfe>
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
 800dcc4:	2b80      	cmp	r3, #128	; 0x80
 800dcc6:	d008      	beq.n	800dcda <USBD_StdEPReq+0xfe>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	88db      	ldrh	r3, [r3, #6]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d104      	bne.n	800dcda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dcd0:	7bbb      	ldrb	r3, [r7, #14]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f001 fbf7 	bl	800f4c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fd58 	bl	800e790 <USBD_CtlSendStatus>

              break;
 800dce0:	e004      	b.n	800dcec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fc88 	bl	800e5fa <USBD_CtlError>
              break;
 800dcea:	bf00      	nop
          }
          break;
 800dcec:	e107      	b.n	800defe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d002      	beq.n	800dd00 <USBD_StdEPReq+0x124>
 800dcfa:	2b03      	cmp	r3, #3
 800dcfc:	d016      	beq.n	800dd2c <USBD_StdEPReq+0x150>
 800dcfe:	e04b      	b.n	800dd98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00d      	beq.n	800dd22 <USBD_StdEPReq+0x146>
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b80      	cmp	r3, #128	; 0x80
 800dd0a:	d00a      	beq.n	800dd22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd0c:	7bbb      	ldrb	r3, [r7, #14]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f001 fbd9 	bl	800f4c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd16:	2180      	movs	r1, #128	; 0x80
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f001 fbd5 	bl	800f4c8 <USBD_LL_StallEP>
 800dd1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd20:	e040      	b.n	800dda4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fc68 	bl	800e5fa <USBD_CtlError>
              break;
 800dd2a:	e03b      	b.n	800dda4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	885b      	ldrh	r3, [r3, #2]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d136      	bne.n	800dda2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d004      	beq.n	800dd48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd3e:	7bbb      	ldrb	r3, [r7, #14]
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f001 fbdf 	bl	800f506 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fd21 	bl	800e790 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
 800dd50:	4619      	mov	r1, r3
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f7ff fde2 	bl	800d91c <USBD_CoreFindEP>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd5c:	7b7b      	ldrb	r3, [r7, #13]
 800dd5e:	2bff      	cmp	r3, #255	; 0xff
 800dd60:	d01f      	beq.n	800dda2 <USBD_StdEPReq+0x1c6>
 800dd62:	7b7b      	ldrb	r3, [r7, #13]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d11c      	bne.n	800dda2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dd68:	7b7a      	ldrb	r2, [r7, #13]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dd70:	7b7a      	ldrb	r2, [r7, #13]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	32ae      	adds	r2, #174	; 0xae
 800dd76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d010      	beq.n	800dda2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd80:	7b7a      	ldrb	r2, [r7, #13]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	32ae      	adds	r2, #174	; 0xae
 800dd86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	4798      	blx	r3
 800dd92:	4603      	mov	r3, r0
 800dd94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dd96:	e004      	b.n	800dda2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fc2d 	bl	800e5fa <USBD_CtlError>
              break;
 800dda0:	e000      	b.n	800dda4 <USBD_StdEPReq+0x1c8>
              break;
 800dda2:	bf00      	nop
          }
          break;
 800dda4:	e0ab      	b.n	800defe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d002      	beq.n	800ddb8 <USBD_StdEPReq+0x1dc>
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d032      	beq.n	800de1c <USBD_StdEPReq+0x240>
 800ddb6:	e097      	b.n	800dee8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <USBD_StdEPReq+0x1f2>
 800ddbe:	7bbb      	ldrb	r3, [r7, #14]
 800ddc0:	2b80      	cmp	r3, #128	; 0x80
 800ddc2:	d004      	beq.n	800ddce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fc17 	bl	800e5fa <USBD_CtlError>
                break;
 800ddcc:	e091      	b.n	800def2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	da0b      	bge.n	800ddee <USBD_StdEPReq+0x212>
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
 800ddd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	3310      	adds	r3, #16
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	4413      	add	r3, r2
 800ddea:	3304      	adds	r3, #4
 800ddec:	e00b      	b.n	800de06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	4413      	add	r3, r2
 800de04:	3304      	adds	r3, #4
 800de06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2202      	movs	r2, #2
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fc61 	bl	800e6dc <USBD_CtlSendData>
              break;
 800de1a:	e06a      	b.n	800def2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800de1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de20:	2b00      	cmp	r3, #0
 800de22:	da11      	bge.n	800de48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de24:	7bbb      	ldrb	r3, [r7, #14]
 800de26:	f003 020f 	and.w	r2, r3, #15
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	4613      	mov	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	440b      	add	r3, r1
 800de36:	3324      	adds	r3, #36	; 0x24
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d117      	bne.n	800de6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fbda 	bl	800e5fa <USBD_CtlError>
                  break;
 800de46:	e054      	b.n	800def2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	f003 020f 	and.w	r2, r3, #15
 800de4e:	6879      	ldr	r1, [r7, #4]
 800de50:	4613      	mov	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	440b      	add	r3, r1
 800de5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d104      	bne.n	800de6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fbc7 	bl	800e5fa <USBD_CtlError>
                  break;
 800de6c:	e041      	b.n	800def2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de72:	2b00      	cmp	r3, #0
 800de74:	da0b      	bge.n	800de8e <USBD_StdEPReq+0x2b2>
 800de76:	7bbb      	ldrb	r3, [r7, #14]
 800de78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	3310      	adds	r3, #16
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	4413      	add	r3, r2
 800de8a:	3304      	adds	r3, #4
 800de8c:	e00b      	b.n	800dea6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	4413      	add	r3, r2
 800dea4:	3304      	adds	r3, #4
 800dea6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dea8:	7bbb      	ldrb	r3, [r7, #14]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <USBD_StdEPReq+0x2d8>
 800deae:	7bbb      	ldrb	r3, [r7, #14]
 800deb0:	2b80      	cmp	r3, #128	; 0x80
 800deb2:	d103      	bne.n	800debc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	e00e      	b.n	800deda <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f001 fb3f 	bl	800f544 <USBD_LL_IsStallEP>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2201      	movs	r2, #1
 800ded0:	601a      	str	r2, [r3, #0]
 800ded2:	e002      	b.n	800deda <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2200      	movs	r2, #0
 800ded8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2202      	movs	r2, #2
 800dede:	4619      	mov	r1, r3
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fbfb 	bl	800e6dc <USBD_CtlSendData>
              break;
 800dee6:	e004      	b.n	800def2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fb85 	bl	800e5fa <USBD_CtlError>
              break;
 800def0:	bf00      	nop
          }
          break;
 800def2:	e004      	b.n	800defe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800def4:	6839      	ldr	r1, [r7, #0]
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 fb7f 	bl	800e5fa <USBD_CtlError>
          break;
 800defc:	bf00      	nop
      }
      break;
 800defe:	e005      	b.n	800df0c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fb79 	bl	800e5fa <USBD_CtlError>
      break;
 800df08:	e000      	b.n	800df0c <USBD_StdEPReq+0x330>
      break;
 800df0a:	bf00      	nop
  }

  return ret;
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
	...

0800df18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df22:	2300      	movs	r3, #0
 800df24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df2a:	2300      	movs	r3, #0
 800df2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	885b      	ldrh	r3, [r3, #2]
 800df32:	0a1b      	lsrs	r3, r3, #8
 800df34:	b29b      	uxth	r3, r3
 800df36:	3b01      	subs	r3, #1
 800df38:	2b0e      	cmp	r3, #14
 800df3a:	f200 8152 	bhi.w	800e1e2 <USBD_GetDescriptor+0x2ca>
 800df3e:	a201      	add	r2, pc, #4	; (adr r2, 800df44 <USBD_GetDescriptor+0x2c>)
 800df40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df44:	0800dfb5 	.word	0x0800dfb5
 800df48:	0800dfcd 	.word	0x0800dfcd
 800df4c:	0800e00d 	.word	0x0800e00d
 800df50:	0800e1e3 	.word	0x0800e1e3
 800df54:	0800e1e3 	.word	0x0800e1e3
 800df58:	0800e183 	.word	0x0800e183
 800df5c:	0800e1af 	.word	0x0800e1af
 800df60:	0800e1e3 	.word	0x0800e1e3
 800df64:	0800e1e3 	.word	0x0800e1e3
 800df68:	0800e1e3 	.word	0x0800e1e3
 800df6c:	0800e1e3 	.word	0x0800e1e3
 800df70:	0800e1e3 	.word	0x0800e1e3
 800df74:	0800e1e3 	.word	0x0800e1e3
 800df78:	0800e1e3 	.word	0x0800e1e3
 800df7c:	0800df81 	.word	0x0800df81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df86:	69db      	ldr	r3, [r3, #28]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df92:	69db      	ldr	r3, [r3, #28]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	7c12      	ldrb	r2, [r2, #16]
 800df98:	f107 0108 	add.w	r1, r7, #8
 800df9c:	4610      	mov	r0, r2
 800df9e:	4798      	blx	r3
 800dfa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfa2:	e126      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fb27 	bl	800e5fa <USBD_CtlError>
        err++;
 800dfac:	7afb      	ldrb	r3, [r7, #11]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	72fb      	strb	r3, [r7, #11]
      break;
 800dfb2:	e11e      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	7c12      	ldrb	r2, [r2, #16]
 800dfc0:	f107 0108 	add.w	r1, r7, #8
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	4798      	blx	r3
 800dfc8:	60f8      	str	r0, [r7, #12]
      break;
 800dfca:	e112      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	7c1b      	ldrb	r3, [r3, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10d      	bne.n	800dff0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	f107 0208 	add.w	r2, r7, #8
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	4798      	blx	r3
 800dfe4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	2202      	movs	r2, #2
 800dfec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dfee:	e100      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	f107 0208 	add.w	r2, r7, #8
 800dffc:	4610      	mov	r0, r2
 800dffe:	4798      	blx	r3
 800e000:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3301      	adds	r3, #1
 800e006:	2202      	movs	r2, #2
 800e008:	701a      	strb	r2, [r3, #0]
      break;
 800e00a:	e0f2      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	885b      	ldrh	r3, [r3, #2]
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b05      	cmp	r3, #5
 800e014:	f200 80ac 	bhi.w	800e170 <USBD_GetDescriptor+0x258>
 800e018:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <USBD_GetDescriptor+0x108>)
 800e01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01e:	bf00      	nop
 800e020:	0800e039 	.word	0x0800e039
 800e024:	0800e06d 	.word	0x0800e06d
 800e028:	0800e0a1 	.word	0x0800e0a1
 800e02c:	0800e0d5 	.word	0x0800e0d5
 800e030:	0800e109 	.word	0x0800e109
 800e034:	0800e13d 	.word	0x0800e13d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00b      	beq.n	800e05c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	7c12      	ldrb	r2, [r2, #16]
 800e050:	f107 0108 	add.w	r1, r7, #8
 800e054:	4610      	mov	r0, r2
 800e056:	4798      	blx	r3
 800e058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e05a:	e091      	b.n	800e180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e05c:	6839      	ldr	r1, [r7, #0]
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 facb 	bl	800e5fa <USBD_CtlError>
            err++;
 800e064:	7afb      	ldrb	r3, [r7, #11]
 800e066:	3301      	adds	r3, #1
 800e068:	72fb      	strb	r3, [r7, #11]
          break;
 800e06a:	e089      	b.n	800e180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00b      	beq.n	800e090 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	7c12      	ldrb	r2, [r2, #16]
 800e084:	f107 0108 	add.w	r1, r7, #8
 800e088:	4610      	mov	r0, r2
 800e08a:	4798      	blx	r3
 800e08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e08e:	e077      	b.n	800e180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fab1 	bl	800e5fa <USBD_CtlError>
            err++;
 800e098:	7afb      	ldrb	r3, [r7, #11]
 800e09a:	3301      	adds	r3, #1
 800e09c:	72fb      	strb	r3, [r7, #11]
          break;
 800e09e:	e06f      	b.n	800e180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00b      	beq.n	800e0c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	7c12      	ldrb	r2, [r2, #16]
 800e0b8:	f107 0108 	add.w	r1, r7, #8
 800e0bc:	4610      	mov	r0, r2
 800e0be:	4798      	blx	r3
 800e0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0c2:	e05d      	b.n	800e180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fa97 	bl	800e5fa <USBD_CtlError>
            err++;
 800e0cc:	7afb      	ldrb	r3, [r7, #11]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e0d2:	e055      	b.n	800e180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0da:	691b      	ldr	r3, [r3, #16]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	7c12      	ldrb	r2, [r2, #16]
 800e0ec:	f107 0108 	add.w	r1, r7, #8
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
 800e0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0f6:	e043      	b.n	800e180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0f8:	6839      	ldr	r1, [r7, #0]
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fa7d 	bl	800e5fa <USBD_CtlError>
            err++;
 800e100:	7afb      	ldrb	r3, [r7, #11]
 800e102:	3301      	adds	r3, #1
 800e104:	72fb      	strb	r3, [r7, #11]
          break;
 800e106:	e03b      	b.n	800e180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e10e:	695b      	ldr	r3, [r3, #20]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00b      	beq.n	800e12c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	7c12      	ldrb	r2, [r2, #16]
 800e120:	f107 0108 	add.w	r1, r7, #8
 800e124:	4610      	mov	r0, r2
 800e126:	4798      	blx	r3
 800e128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e12a:	e029      	b.n	800e180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fa63 	bl	800e5fa <USBD_CtlError>
            err++;
 800e134:	7afb      	ldrb	r3, [r7, #11]
 800e136:	3301      	adds	r3, #1
 800e138:	72fb      	strb	r3, [r7, #11]
          break;
 800e13a:	e021      	b.n	800e180 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00b      	beq.n	800e160 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	7c12      	ldrb	r2, [r2, #16]
 800e154:	f107 0108 	add.w	r1, r7, #8
 800e158:	4610      	mov	r0, r2
 800e15a:	4798      	blx	r3
 800e15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e15e:	e00f      	b.n	800e180 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 fa49 	bl	800e5fa <USBD_CtlError>
            err++;
 800e168:	7afb      	ldrb	r3, [r7, #11]
 800e16a:	3301      	adds	r3, #1
 800e16c:	72fb      	strb	r3, [r7, #11]
          break;
 800e16e:	e007      	b.n	800e180 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa41 	bl	800e5fa <USBD_CtlError>
          err++;
 800e178:	7afb      	ldrb	r3, [r7, #11]
 800e17a:	3301      	adds	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e17e:	bf00      	nop
      }
      break;
 800e180:	e037      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	7c1b      	ldrb	r3, [r3, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d109      	bne.n	800e19e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e192:	f107 0208 	add.w	r2, r7, #8
 800e196:	4610      	mov	r0, r2
 800e198:	4798      	blx	r3
 800e19a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e19c:	e029      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e19e:	6839      	ldr	r1, [r7, #0]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 fa2a 	bl	800e5fa <USBD_CtlError>
        err++;
 800e1a6:	7afb      	ldrb	r3, [r7, #11]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ac:	e021      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	7c1b      	ldrb	r3, [r3, #16]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10d      	bne.n	800e1d2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	f107 0208 	add.w	r2, r7, #8
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	4798      	blx	r3
 800e1c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	2207      	movs	r2, #7
 800e1ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1d0:	e00f      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 fa10 	bl	800e5fa <USBD_CtlError>
        err++;
 800e1da:	7afb      	ldrb	r3, [r7, #11]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	72fb      	strb	r3, [r7, #11]
      break;
 800e1e0:	e007      	b.n	800e1f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fa08 	bl	800e5fa <USBD_CtlError>
      err++;
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e1f0:	bf00      	nop
  }

  if (err != 0U)
 800e1f2:	7afb      	ldrb	r3, [r7, #11]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d11e      	bne.n	800e236 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	88db      	ldrh	r3, [r3, #6]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d016      	beq.n	800e22e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e200:	893b      	ldrh	r3, [r7, #8]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00e      	beq.n	800e224 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	88da      	ldrh	r2, [r3, #6]
 800e20a:	893b      	ldrh	r3, [r7, #8]
 800e20c:	4293      	cmp	r3, r2
 800e20e:	bf28      	it	cs
 800e210:	4613      	movcs	r3, r2
 800e212:	b29b      	uxth	r3, r3
 800e214:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e216:	893b      	ldrh	r3, [r7, #8]
 800e218:	461a      	mov	r2, r3
 800e21a:	68f9      	ldr	r1, [r7, #12]
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fa5d 	bl	800e6dc <USBD_CtlSendData>
 800e222:	e009      	b.n	800e238 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f9e7 	bl	800e5fa <USBD_CtlError>
 800e22c:	e004      	b.n	800e238 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 faae 	bl	800e790 <USBD_CtlSendStatus>
 800e234:	e000      	b.n	800e238 <USBD_GetDescriptor+0x320>
    return;
 800e236:	bf00      	nop
  }
}
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop

0800e240 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	889b      	ldrh	r3, [r3, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d131      	bne.n	800e2b6 <USBD_SetAddress+0x76>
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	88db      	ldrh	r3, [r3, #6]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d12d      	bne.n	800e2b6 <USBD_SetAddress+0x76>
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	885b      	ldrh	r3, [r3, #2]
 800e25e:	2b7f      	cmp	r3, #127	; 0x7f
 800e260:	d829      	bhi.n	800e2b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	885b      	ldrh	r3, [r3, #2]
 800e266:	b2db      	uxtb	r3, r3
 800e268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e26c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b03      	cmp	r3, #3
 800e278:	d104      	bne.n	800e284 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 f9bc 	bl	800e5fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e282:	e01d      	b.n	800e2c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	7bfa      	ldrb	r2, [r7, #15]
 800e288:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
 800e28e:	4619      	mov	r1, r3
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f001 f983 	bl	800f59c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fa7a 	bl	800e790 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d004      	beq.n	800e2ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2aa:	e009      	b.n	800e2c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b4:	e004      	b.n	800e2c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f99e 	bl	800e5fa <USBD_CtlError>
  }
}
 800e2be:	bf00      	nop
 800e2c0:	bf00      	nop
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	885b      	ldrh	r3, [r3, #2]
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	4b4e      	ldr	r3, [pc, #312]	; (800e418 <USBD_SetConfig+0x150>)
 800e2de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2e0:	4b4d      	ldr	r3, [pc, #308]	; (800e418 <USBD_SetConfig+0x150>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d905      	bls.n	800e2f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f985 	bl	800e5fa <USBD_CtlError>
    return USBD_FAIL;
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	e08c      	b.n	800e40e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d002      	beq.n	800e306 <USBD_SetConfig+0x3e>
 800e300:	2b03      	cmp	r3, #3
 800e302:	d029      	beq.n	800e358 <USBD_SetConfig+0x90>
 800e304:	e075      	b.n	800e3f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e306:	4b44      	ldr	r3, [pc, #272]	; (800e418 <USBD_SetConfig+0x150>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d020      	beq.n	800e350 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e30e:	4b42      	ldr	r3, [pc, #264]	; (800e418 <USBD_SetConfig+0x150>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e318:	4b3f      	ldr	r3, [pc, #252]	; (800e418 <USBD_SetConfig+0x150>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7fe ffb7 	bl	800d292 <USBD_SetClassConfig>
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d008      	beq.n	800e340 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f962 	bl	800e5fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2202      	movs	r2, #2
 800e33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e33e:	e065      	b.n	800e40c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fa25 	bl	800e790 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2203      	movs	r2, #3
 800e34a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e34e:	e05d      	b.n	800e40c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 fa1d 	bl	800e790 <USBD_CtlSendStatus>
      break;
 800e356:	e059      	b.n	800e40c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e358:	4b2f      	ldr	r3, [pc, #188]	; (800e418 <USBD_SetConfig+0x150>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d112      	bne.n	800e386 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2202      	movs	r2, #2
 800e364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e368:	4b2b      	ldr	r3, [pc, #172]	; (800e418 <USBD_SetConfig+0x150>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e372:	4b29      	ldr	r3, [pc, #164]	; (800e418 <USBD_SetConfig+0x150>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	4619      	mov	r1, r3
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7fe ffa6 	bl	800d2ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fa06 	bl	800e790 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e384:	e042      	b.n	800e40c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e386:	4b24      	ldr	r3, [pc, #144]	; (800e418 <USBD_SetConfig+0x150>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	429a      	cmp	r2, r3
 800e392:	d02a      	beq.n	800e3ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7fe ff94 	bl	800d2ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e3a2:	4b1d      	ldr	r3, [pc, #116]	; (800e418 <USBD_SetConfig+0x150>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3ac:	4b1a      	ldr	r3, [pc, #104]	; (800e418 <USBD_SetConfig+0x150>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7fe ff6d 	bl	800d292 <USBD_SetClassConfig>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00f      	beq.n	800e3e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e3c2:	6839      	ldr	r1, [r7, #0]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 f918 	bl	800e5fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7fe ff79 	bl	800d2ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2202      	movs	r2, #2
 800e3dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3e0:	e014      	b.n	800e40c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f9d4 	bl	800e790 <USBD_CtlSendStatus>
      break;
 800e3e8:	e010      	b.n	800e40c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f9d0 	bl	800e790 <USBD_CtlSendStatus>
      break;
 800e3f0:	e00c      	b.n	800e40c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f900 	bl	800e5fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3fa:	4b07      	ldr	r3, [pc, #28]	; (800e418 <USBD_SetConfig+0x150>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7fe ff62 	bl	800d2ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e406:	2303      	movs	r3, #3
 800e408:	73fb      	strb	r3, [r7, #15]
      break;
 800e40a:	bf00      	nop
  }

  return ret;
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	240004d0 	.word	0x240004d0

0800e41c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	88db      	ldrh	r3, [r3, #6]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d004      	beq.n	800e438 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f8e2 	bl	800e5fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e436:	e023      	b.n	800e480 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	2b02      	cmp	r3, #2
 800e442:	dc02      	bgt.n	800e44a <USBD_GetConfig+0x2e>
 800e444:	2b00      	cmp	r3, #0
 800e446:	dc03      	bgt.n	800e450 <USBD_GetConfig+0x34>
 800e448:	e015      	b.n	800e476 <USBD_GetConfig+0x5a>
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d00b      	beq.n	800e466 <USBD_GetConfig+0x4a>
 800e44e:	e012      	b.n	800e476 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	3308      	adds	r3, #8
 800e45a:	2201      	movs	r2, #1
 800e45c:	4619      	mov	r1, r3
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f93c 	bl	800e6dc <USBD_CtlSendData>
        break;
 800e464:	e00c      	b.n	800e480 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3304      	adds	r3, #4
 800e46a:	2201      	movs	r2, #1
 800e46c:	4619      	mov	r1, r3
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f934 	bl	800e6dc <USBD_CtlSendData>
        break;
 800e474:	e004      	b.n	800e480 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e476:	6839      	ldr	r1, [r7, #0]
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 f8be 	bl	800e5fa <USBD_CtlError>
        break;
 800e47e:	bf00      	nop
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	3b01      	subs	r3, #1
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d81e      	bhi.n	800e4de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	88db      	ldrh	r3, [r3, #6]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d004      	beq.n	800e4b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e4a8:	6839      	ldr	r1, [r7, #0]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f8a5 	bl	800e5fa <USBD_CtlError>
        break;
 800e4b0:	e01a      	b.n	800e4e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d005      	beq.n	800e4ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	f043 0202 	orr.w	r2, r3, #2
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	330c      	adds	r3, #12
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 f900 	bl	800e6dc <USBD_CtlSendData>
      break;
 800e4dc:	e004      	b.n	800e4e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f88a 	bl	800e5fa <USBD_CtlError>
      break;
 800e4e6:	bf00      	nop
  }
}
 800e4e8:	bf00      	nop
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	885b      	ldrh	r3, [r3, #2]
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d107      	bne.n	800e512 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f940 	bl	800e790 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e510:	e013      	b.n	800e53a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	885b      	ldrh	r3, [r3, #2]
 800e516:	2b02      	cmp	r3, #2
 800e518:	d10b      	bne.n	800e532 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	889b      	ldrh	r3, [r3, #4]
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	b29b      	uxth	r3, r3
 800e522:	b2da      	uxtb	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f930 	bl	800e790 <USBD_CtlSendStatus>
}
 800e530:	e003      	b.n	800e53a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e532:	6839      	ldr	r1, [r7, #0]
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f860 	bl	800e5fa <USBD_CtlError>
}
 800e53a:	bf00      	nop
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b082      	sub	sp, #8
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
 800e54a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e552:	b2db      	uxtb	r3, r3
 800e554:	3b01      	subs	r3, #1
 800e556:	2b02      	cmp	r3, #2
 800e558:	d80b      	bhi.n	800e572 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	885b      	ldrh	r3, [r3, #2]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d10c      	bne.n	800e57c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f910 	bl	800e790 <USBD_CtlSendStatus>
      }
      break;
 800e570:	e004      	b.n	800e57c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f840 	bl	800e5fa <USBD_CtlError>
      break;
 800e57a:	e000      	b.n	800e57e <USBD_ClrFeature+0x3c>
      break;
 800e57c:	bf00      	nop
  }
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b084      	sub	sp, #16
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	781a      	ldrb	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	781a      	ldrb	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7ff fa17 	bl	800d9e4 <SWAPBYTE>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f7ff fa0a 	bl	800d9e4 <SWAPBYTE>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff f9fd 	bl	800d9e4 <SWAPBYTE>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	80da      	strh	r2, [r3, #6]
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b082      	sub	sp, #8
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
 800e602:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e604:	2180      	movs	r1, #128	; 0x80
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 ff5e 	bl	800f4c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e60c:	2100      	movs	r1, #0
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 ff5a 	bl	800f4c8 <USBD_LL_StallEP>
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e628:	2300      	movs	r3, #0
 800e62a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d036      	beq.n	800e6a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e636:	6938      	ldr	r0, [r7, #16]
 800e638:	f000 f836 	bl	800e6a8 <USBD_GetLen>
 800e63c:	4603      	mov	r3, r0
 800e63e:	3301      	adds	r3, #1
 800e640:	b29b      	uxth	r3, r3
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	4413      	add	r3, r2
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	7812      	ldrb	r2, [r2, #0]
 800e654:	701a      	strb	r2, [r3, #0]
  idx++;
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	3301      	adds	r3, #1
 800e65a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e65c:	7dfb      	ldrb	r3, [r7, #23]
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	4413      	add	r3, r2
 800e662:	2203      	movs	r2, #3
 800e664:	701a      	strb	r2, [r3, #0]
  idx++;
 800e666:	7dfb      	ldrb	r3, [r7, #23]
 800e668:	3301      	adds	r3, #1
 800e66a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e66c:	e013      	b.n	800e696 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	4413      	add	r3, r2
 800e674:	693a      	ldr	r2, [r7, #16]
 800e676:	7812      	ldrb	r2, [r2, #0]
 800e678:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	3301      	adds	r3, #1
 800e67e:	613b      	str	r3, [r7, #16]
    idx++;
 800e680:	7dfb      	ldrb	r3, [r7, #23]
 800e682:	3301      	adds	r3, #1
 800e684:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e686:	7dfb      	ldrb	r3, [r7, #23]
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	4413      	add	r3, r2
 800e68c:	2200      	movs	r2, #0
 800e68e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e690:	7dfb      	ldrb	r3, [r7, #23]
 800e692:	3301      	adds	r3, #1
 800e694:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1e7      	bne.n	800e66e <USBD_GetString+0x52>
 800e69e:	e000      	b.n	800e6a2 <USBD_GetString+0x86>
    return;
 800e6a0:	bf00      	nop
  }
}
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e6b8:	e005      	b.n	800e6c6 <USBD_GetLen+0x1e>
  {
    len++;
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1f5      	bne.n	800e6ba <USBD_GetLen+0x12>
  }

  return len;
 800e6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	2100      	movs	r1, #0
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f000 ff69 	bl	800f5da <USBD_LL_Transmit>

  return USBD_OK;
 800e708:	2300      	movs	r3, #0
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b084      	sub	sp, #16
 800e716:	af00      	add	r7, sp, #0
 800e718:	60f8      	str	r0, [r7, #12]
 800e71a:	60b9      	str	r1, [r7, #8]
 800e71c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	2100      	movs	r1, #0
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 ff58 	bl	800f5da <USBD_LL_Transmit>

  return USBD_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2203      	movs	r2, #3
 800e744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	2100      	movs	r1, #0
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f000 ff5c 	bl	800f61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	2100      	movs	r1, #0
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 ff4b 	bl	800f61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2204      	movs	r2, #4
 800e79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 ff17 	bl	800f5da <USBD_LL_Transmit>

  return USBD_OK;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b082      	sub	sp, #8
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2205      	movs	r2, #5
 800e7c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 ff25 	bl	800f61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <pll_Init>:
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 * @return
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	ed87 0a01 	vstr	s0, [r7, #4]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f04f 0200 	mov.w	r2, #0
 800e7f4:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f04f 0200 	mov.w	r2, #0
 800e7fc:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f04f 0200 	mov.w	r2, #0
 800e804:	609a      	str	r2, [r3, #8]

    signal->sogi_d_1 = 0.f;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f04f 0200 	mov.w	r2, #0
 800e80c:	611a      	str	r2, [r3, #16]
    signal->sogi_d_2 = 0.f;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f04f 0200 	mov.w	r2, #0
 800e814:	615a      	str	r2, [r3, #20]

    signal->sogi_q_1 = 0.f;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f04f 0200 	mov.w	r2, #0
 800e81c:	61da      	str	r2, [r3, #28]
    signal->sogi_q_2 = 0.f;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f04f 0200 	mov.w	r2, #0
 800e824:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f04f 0200 	mov.w	r2, #0
 800e82c:	62da      	str	r2, [r3, #44]	; 0x2c

    config->omiga = 2 * PI * f; // f典型值50
 800e82e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e832:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800e998 <pll_Init+0x1bc>
 800e836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	edc3 7a00 	vstr	s15, [r3]
    config->Ts    = 1.f / F;    // F典型值20000
 800e840:	887b      	ldrh	r3, [r7, #2]
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e84e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k     = 1.414f;     // 阻尼比典型值1.414
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	4a50      	ldr	r2, [pc, #320]	; (800e99c <pll_Init+0x1c0>)
 800e85c:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	f04f 0200 	mov.w	r2, #0
 800e864:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	edd3 7a00 	vldr	s15, [r3]
 800e86c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e870:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	edd3 7a01 	vldr	s15, [r3, #4]
 800e87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    signal->x     = 2.f * config->k * config->omiga * config->Ts;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	edd3 7a02 	vldr	s15, [r3, #8]
 800e88a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	edd3 7a00 	vldr	s15, [r3]
 800e894:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	edd3 7a01 	vldr	s15, [r3, #4]
 800e89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    signal->y     = config->omiga * config->Ts * config->omiga * config->Ts;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	ed93 7a00 	vldr	s14, [r3]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	edd3 7a01 	vldr	s15, [r3, #4]
 800e8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	edd3 7a00 	vldr	s15, [r3]
 800e8be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e8c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e8e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8e8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e8ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e900:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e904:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800e908:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e91c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e920:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e93a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e93e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e942:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e952:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e956:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e95a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    // 初始化pid参数
    config->pid_kp     = 70.73586f;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	4a0d      	ldr	r2, [pc, #52]	; (800e9a0 <pll_Init+0x1c4>)
 800e96c:	611a      	str	r2, [r3, #16]
    config->pid_ki     = 15715.9305749f;
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	4a0c      	ldr	r2, [pc, #48]	; (800e9a4 <pll_Init+0x1c8>)
 800e972:	615a      	str	r2, [r3, #20]
    config->pid_kd     = 0.f; // 只需要PI控制
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	f04f 0200 	mov.w	r2, #0
 800e97a:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f04f 0200 	mov.w	r2, #0
 800e982:	639a      	str	r2, [r3, #56]	; 0x38
    signal->pid_out    = 0.f;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f04f 0200 	mov.w	r2, #0
 800e98a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e98c:	bf00      	nop
 800e98e:	3714      	adds	r7, #20
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	40c90fdb 	.word	0x40c90fdb
 800e99c:	3fb4fdf4 	.word	0x3fb4fdf4
 800e9a0:	428d78c3 	.word	0x428d78c3
 800e9a4:	46758fb9 	.word	0x46758fb9

0800e9a8 <pll_Control>:
 * @param config: 配置指针
 * @param ccr: PWM控制时钟 示例:htim1->Instance->CCR1
 * @return
 */
void pll_Control(pll_Signal *signal, pll_Config *config, uint32_t *ccr)
{
 800e9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9aa:	ed2d 8b02 	vpush	{d8}
 800e9ae:	b08b      	sub	sp, #44	; 0x2c
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    sogi(signal);
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f8e7 	bl	800eb8c <sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal->sogi_d_0, signal->sogi_q_0 / 382 * 3, &signal->park_d, &signal->park_q, arm_sin_f32(signal->theta), arm_cos_f32(signal->theta));
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	68de      	ldr	r6, [r3, #12]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	ed93 7a06 	vldr	s14, [r3, #24]
 800e9c8:	eddf 6a41 	vldr	s13, [pc, #260]	; 800ead0 <pll_Control+0x128>
 800e9cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e9d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e9d4:	ee27 8a87 	vmul.f32	s16, s15, s14
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f103 0524 	add.w	r5, r3, #36	; 0x24
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800e9ea:	eeb0 0a67 	vmov.f32	s0, s15
 800e9ee:	f000 fe8d 	bl	800f70c <arm_sin_f32>
 800e9f2:	eef0 8a40 	vmov.f32	s17, s0
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800e9fc:	eeb0 0a67 	vmov.f32	s0, s15
 800ea00:	f000 feca 	bl	800f798 <arm_cos_f32>
 800ea04:	eef0 7a40 	vmov.f32	s15, s0
 800ea08:	627e      	str	r6, [r7, #36]	; 0x24
 800ea0a:	ed87 8a08 	vstr	s16, [r7, #32]
 800ea0e:	61fd      	str	r5, [r7, #28]
 800ea10:	61bc      	str	r4, [r7, #24]
 800ea12:	edc7 8a05 	vstr	s17, [r7, #20]
 800ea16:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800ea1a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ea1e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ea22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea26:	edd7 6a08 	vldr	s13, [r7, #32]
 800ea2a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ea2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800ea3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ea40:	eeb1 7a67 	vneg.f32	s14, s15
 800ea44:	edd7 7a05 	vldr	s15, [r7, #20]
 800ea48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea4c:	edd7 6a08 	vldr	s13, [r7, #32]
 800ea50:	edd7 7a04 	vldr	s15, [r7, #16]
 800ea54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	edc3 7a00 	vstr	s15, [r3]
  }
 800ea62:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal, config);
 800ea64:	68b9      	ldr	r1, [r7, #8]
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	f000 f834 	bl	800ead4 <pll_Pid>

    signal->theta += (signal->pid_out + config->omiga) * config->Ts;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	edd3 7a00 	vldr	s15, [r3]
 800ea7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    signal->theta = (float)fmod(signal->theta, 2 * PI);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ea9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800eaa0:	ed9f 1b09 	vldr	d1, [pc, #36]	; 800eac8 <pll_Control+0x120>
 800eaa4:	eeb0 0b47 	vmov.f64	d0, d7
 800eaa8:	f003 fc96 	bl	80123d8 <fmod>
 800eaac:	eeb0 7b40 	vmov.f64	d7, d0
 800eab0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    // } else if (ccr + out < config->minCount) {
    //     *ccr = config->minCount;
    // } else {
    //     *ccr += out;
    // }
}
 800eaba:	bf00      	nop
 800eabc:	372c      	adds	r7, #44	; 0x2c
 800eabe:	46bd      	mov	sp, r7
 800eac0:	ecbd 8b02 	vpop	{d8}
 800eac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac6:	bf00      	nop
 800eac8:	60000000 	.word	0x60000000
 800eacc:	401921fb 	.word	0x401921fb
 800ead0:	43bf0000 	.word	0x43bf0000

0800ead4 <pll_Pid>:
 * @param signal: 信号指针
 * @param config: 配置指针
 * @return
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	edd3 7a03 	vldr	s15, [r3, #12]
 800eaea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    signal->pid_out    = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	edd3 6a04 	vldr	s13, [r3, #16]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800eb0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eb10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	edd3 6a05 	vldr	s13, [r3, #20]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800eb24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800eb38:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800eb7c <pll_Pid+0xa8>
 800eb3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb44:	dd03      	ble.n	800eb4e <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a0d      	ldr	r2, [pc, #52]	; (800eb80 <pll_Pid+0xac>)
 800eb4a:	631a      	str	r2, [r3, #48]	; 0x30
 800eb4c:	e00c      	b.n	800eb68 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800eb54:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800eb84 <pll_Pid+0xb0>
 800eb58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb60:	d502      	bpl.n	800eb68 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <pll_Pid+0xb4>)
 800eb66:	631a      	str	r2, [r3, #48]	; 0x30

    signal->pid_err[1] = signal->pid_err[0];
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr
 800eb7c:	431d1463 	.word	0x431d1463
 800eb80:	431d1463 	.word	0x431d1463
 800eb84:	c27b53d2 	.word	0xc27b53d2
 800eb88:	c27b53d2 	.word	0xc27b53d2

0800eb8c <sogi>:
/*
SOGI变换
调用频繁，使用内联函数可增加效率
*/
void sogi(pll_Signal *signal)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
    signal->sogi_d_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_d_1 + signal->a2 * signal->sogi_d_2;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	edd3 7a00 	vldr	s15, [r3]
 800eba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	edd3 7a02 	vldr	s15, [r3, #8]
 800ebb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	edd3 7a04 	vldr	s15, [r3, #16]
 800ebc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	edd3 7a05 	vldr	s15, [r3, #20]
 800ebd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_q_0 = signal->b0 * signal->u_0 + 2 * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_q_1 + signal->a2 * signal->sogi_q_2;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	edd3 7a00 	vldr	s15, [r3]
 800ebf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800ebfc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	edd3 7a01 	vldr	s15, [r3, #4]
 800ec06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	edd3 7a02 	vldr	s15, [r3, #8]
 800ec1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	605a      	str	r2, [r3, #4]
    signal->sogi_d_2 = signal->sogi_d_1;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	691a      	ldr	r2, [r3, #16]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	615a      	str	r2, [r3, #20]
    signal->sogi_d_1 = signal->sogi_d_0;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68da      	ldr	r2, [r3, #12]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	611a      	str	r2, [r3, #16]
    signal->sogi_q_2 = signal->sogi_q_1;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	69da      	ldr	r2, [r3, #28]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	621a      	str	r2, [r3, #32]
    signal->sogi_q_1 = signal->sogi_q_0;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	699a      	ldr	r2, [r3, #24]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	61da      	str	r2, [r3, #28]
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec90:	2200      	movs	r2, #0
 800ec92:	4913      	ldr	r1, [pc, #76]	; (800ece0 <MX_USB_DEVICE_Init+0x54>)
 800ec94:	4813      	ldr	r0, [pc, #76]	; (800ece4 <MX_USB_DEVICE_Init+0x58>)
 800ec96:	f7fe fa7f 	bl	800d198 <USBD_Init>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eca0:	f7f2 f838 	bl	8000d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eca4:	4910      	ldr	r1, [pc, #64]	; (800ece8 <MX_USB_DEVICE_Init+0x5c>)
 800eca6:	480f      	ldr	r0, [pc, #60]	; (800ece4 <MX_USB_DEVICE_Init+0x58>)
 800eca8:	f7fe faa6 	bl	800d1f8 <USBD_RegisterClass>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ecb2:	f7f2 f82f 	bl	8000d14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ecb6:	490d      	ldr	r1, [pc, #52]	; (800ecec <MX_USB_DEVICE_Init+0x60>)
 800ecb8:	480a      	ldr	r0, [pc, #40]	; (800ece4 <MX_USB_DEVICE_Init+0x58>)
 800ecba:	f7fe f99d 	bl	800cff8 <USBD_CDC_RegisterInterface>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d001      	beq.n	800ecc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ecc4:	f7f2 f826 	bl	8000d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ecc8:	4806      	ldr	r0, [pc, #24]	; (800ece4 <MX_USB_DEVICE_Init+0x58>)
 800ecca:	f7fe facb 	bl	800d264 <USBD_Start>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ecd4:	f7f2 f81e 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ecd8:	f7f8 f824 	bl	8006d24 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecdc:	bf00      	nop
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	240000b4 	.word	0x240000b4
 800ece4:	240004d4 	.word	0x240004d4
 800ece8:	24000020 	.word	0x24000020
 800ecec:	240000a0 	.word	0x240000a0

0800ecf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4905      	ldr	r1, [pc, #20]	; (800ed0c <CDC_Init_FS+0x1c>)
 800ecf8:	4805      	ldr	r0, [pc, #20]	; (800ed10 <CDC_Init_FS+0x20>)
 800ecfa:	f7fe f997 	bl	800d02c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecfe:	4905      	ldr	r1, [pc, #20]	; (800ed14 <CDC_Init_FS+0x24>)
 800ed00:	4803      	ldr	r0, [pc, #12]	; (800ed10 <CDC_Init_FS+0x20>)
 800ed02:	f7fe f9b5 	bl	800d070 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	24000fb0 	.word	0x24000fb0
 800ed10:	240004d4 	.word	0x240004d4
 800ed14:	240007b0 	.word	0x240007b0

0800ed18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	6039      	str	r1, [r7, #0]
 800ed32:	71fb      	strb	r3, [r7, #7]
 800ed34:	4613      	mov	r3, r2
 800ed36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed38:	79fb      	ldrb	r3, [r7, #7]
 800ed3a:	2b23      	cmp	r3, #35	; 0x23
 800ed3c:	d84a      	bhi.n	800edd4 <CDC_Control_FS+0xac>
 800ed3e:	a201      	add	r2, pc, #4	; (adr r2, 800ed44 <CDC_Control_FS+0x1c>)
 800ed40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed44:	0800edd5 	.word	0x0800edd5
 800ed48:	0800edd5 	.word	0x0800edd5
 800ed4c:	0800edd5 	.word	0x0800edd5
 800ed50:	0800edd5 	.word	0x0800edd5
 800ed54:	0800edd5 	.word	0x0800edd5
 800ed58:	0800edd5 	.word	0x0800edd5
 800ed5c:	0800edd5 	.word	0x0800edd5
 800ed60:	0800edd5 	.word	0x0800edd5
 800ed64:	0800edd5 	.word	0x0800edd5
 800ed68:	0800edd5 	.word	0x0800edd5
 800ed6c:	0800edd5 	.word	0x0800edd5
 800ed70:	0800edd5 	.word	0x0800edd5
 800ed74:	0800edd5 	.word	0x0800edd5
 800ed78:	0800edd5 	.word	0x0800edd5
 800ed7c:	0800edd5 	.word	0x0800edd5
 800ed80:	0800edd5 	.word	0x0800edd5
 800ed84:	0800edd5 	.word	0x0800edd5
 800ed88:	0800edd5 	.word	0x0800edd5
 800ed8c:	0800edd5 	.word	0x0800edd5
 800ed90:	0800edd5 	.word	0x0800edd5
 800ed94:	0800edd5 	.word	0x0800edd5
 800ed98:	0800edd5 	.word	0x0800edd5
 800ed9c:	0800edd5 	.word	0x0800edd5
 800eda0:	0800edd5 	.word	0x0800edd5
 800eda4:	0800edd5 	.word	0x0800edd5
 800eda8:	0800edd5 	.word	0x0800edd5
 800edac:	0800edd5 	.word	0x0800edd5
 800edb0:	0800edd5 	.word	0x0800edd5
 800edb4:	0800edd5 	.word	0x0800edd5
 800edb8:	0800edd5 	.word	0x0800edd5
 800edbc:	0800edd5 	.word	0x0800edd5
 800edc0:	0800edd5 	.word	0x0800edd5
 800edc4:	0800edd5 	.word	0x0800edd5
 800edc8:	0800edd5 	.word	0x0800edd5
 800edcc:	0800edd5 	.word	0x0800edd5
 800edd0:	0800edd5 	.word	0x0800edd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800edd4:	bf00      	nop
  }

  return (USBD_OK);
 800edd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800edd8:	4618      	mov	r0, r3
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4805      	ldr	r0, [pc, #20]	; (800ee08 <CDC_Receive_FS+0x24>)
 800edf2:	f7fe f93d 	bl	800d070 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edf6:	4804      	ldr	r0, [pc, #16]	; (800ee08 <CDC_Receive_FS+0x24>)
 800edf8:	f7fe f998 	bl	800d12c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800edfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	240004d4 	.word	0x240004d4

0800ee0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee1c:	4b0d      	ldr	r3, [pc, #52]	; (800ee54 <CDC_Transmit_FS+0x48>)
 800ee1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e00b      	b.n	800ee4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee32:	887b      	ldrh	r3, [r7, #2]
 800ee34:	461a      	mov	r2, r3
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	4806      	ldr	r0, [pc, #24]	; (800ee54 <CDC_Transmit_FS+0x48>)
 800ee3a:	f7fe f8f7 	bl	800d02c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee3e:	4805      	ldr	r0, [pc, #20]	; (800ee54 <CDC_Transmit_FS+0x48>)
 800ee40:	f7fe f934 	bl	800d0ac <USBD_CDC_TransmitPacket>
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	240004d4 	.word	0x240004d4

0800ee58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b087      	sub	sp, #28
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	4613      	mov	r3, r2
 800ee64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	371c      	adds	r7, #28
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
	...

0800ee7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	4603      	mov	r3, r0
 800ee84:	6039      	str	r1, [r7, #0]
 800ee86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2212      	movs	r2, #18
 800ee8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee8e:	4b03      	ldr	r3, [pc, #12]	; (800ee9c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	240000d4 	.word	0x240000d4

0800eea0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	6039      	str	r1, [r7, #0]
 800eeaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2204      	movs	r2, #4
 800eeb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eeb2:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	240000e8 	.word	0x240000e8

0800eec4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	6039      	str	r1, [r7, #0]
 800eece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d105      	bne.n	800eee2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	4907      	ldr	r1, [pc, #28]	; (800eef8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeda:	4808      	ldr	r0, [pc, #32]	; (800eefc <USBD_FS_ProductStrDescriptor+0x38>)
 800eedc:	f7ff fb9e 	bl	800e61c <USBD_GetString>
 800eee0:	e004      	b.n	800eeec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	4904      	ldr	r1, [pc, #16]	; (800eef8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eee6:	4805      	ldr	r0, [pc, #20]	; (800eefc <USBD_FS_ProductStrDescriptor+0x38>)
 800eee8:	f7ff fb98 	bl	800e61c <USBD_GetString>
  }
  return USBD_StrDesc;
 800eeec:	4b02      	ldr	r3, [pc, #8]	; (800eef8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	240017b0 	.word	0x240017b0
 800eefc:	080126ac 	.word	0x080126ac

0800ef00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	6039      	str	r1, [r7, #0]
 800ef0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	4904      	ldr	r1, [pc, #16]	; (800ef20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef10:	4804      	ldr	r0, [pc, #16]	; (800ef24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef12:	f7ff fb83 	bl	800e61c <USBD_GetString>
  return USBD_StrDesc;
 800ef16:	4b02      	ldr	r3, [pc, #8]	; (800ef20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	240017b0 	.word	0x240017b0
 800ef24:	080126c4 	.word	0x080126c4

0800ef28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	4603      	mov	r3, r0
 800ef30:	6039      	str	r1, [r7, #0]
 800ef32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	221a      	movs	r2, #26
 800ef38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef3a:	f000 f843 	bl	800efc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef3e:	4b02      	ldr	r3, [pc, #8]	; (800ef48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	240000ec 	.word	0x240000ec

0800ef4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	4603      	mov	r3, r0
 800ef54:	6039      	str	r1, [r7, #0]
 800ef56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef58:	79fb      	ldrb	r3, [r7, #7]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d105      	bne.n	800ef6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	4907      	ldr	r1, [pc, #28]	; (800ef80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef62:	4808      	ldr	r0, [pc, #32]	; (800ef84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef64:	f7ff fb5a 	bl	800e61c <USBD_GetString>
 800ef68:	e004      	b.n	800ef74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	4904      	ldr	r1, [pc, #16]	; (800ef80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef6e:	4805      	ldr	r0, [pc, #20]	; (800ef84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef70:	f7ff fb54 	bl	800e61c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef74:	4b02      	ldr	r3, [pc, #8]	; (800ef80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	240017b0 	.word	0x240017b0
 800ef84:	080126d8 	.word	0x080126d8

0800ef88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	6039      	str	r1, [r7, #0]
 800ef92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d105      	bne.n	800efa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef9a:	683a      	ldr	r2, [r7, #0]
 800ef9c:	4907      	ldr	r1, [pc, #28]	; (800efbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef9e:	4808      	ldr	r0, [pc, #32]	; (800efc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800efa0:	f7ff fb3c 	bl	800e61c <USBD_GetString>
 800efa4:	e004      	b.n	800efb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800efa6:	683a      	ldr	r2, [r7, #0]
 800efa8:	4904      	ldr	r1, [pc, #16]	; (800efbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800efaa:	4805      	ldr	r0, [pc, #20]	; (800efc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800efac:	f7ff fb36 	bl	800e61c <USBD_GetString>
  }
  return USBD_StrDesc;
 800efb0:	4b02      	ldr	r3, [pc, #8]	; (800efbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	240017b0 	.word	0x240017b0
 800efc0:	080126e4 	.word	0x080126e4

0800efc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800efca:	4b0f      	ldr	r3, [pc, #60]	; (800f008 <Get_SerialNum+0x44>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efd0:	4b0e      	ldr	r3, [pc, #56]	; (800f00c <Get_SerialNum+0x48>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efd6:	4b0e      	ldr	r3, [pc, #56]	; (800f010 <Get_SerialNum+0x4c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4413      	add	r3, r2
 800efe2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d009      	beq.n	800effe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efea:	2208      	movs	r2, #8
 800efec:	4909      	ldr	r1, [pc, #36]	; (800f014 <Get_SerialNum+0x50>)
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f000 f814 	bl	800f01c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eff4:	2204      	movs	r2, #4
 800eff6:	4908      	ldr	r1, [pc, #32]	; (800f018 <Get_SerialNum+0x54>)
 800eff8:	68b8      	ldr	r0, [r7, #8]
 800effa:	f000 f80f 	bl	800f01c <IntToUnicode>
  }
}
 800effe:	bf00      	nop
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	1ff1e800 	.word	0x1ff1e800
 800f00c:	1ff1e804 	.word	0x1ff1e804
 800f010:	1ff1e808 	.word	0x1ff1e808
 800f014:	240000ee 	.word	0x240000ee
 800f018:	240000fe 	.word	0x240000fe

0800f01c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b087      	sub	sp, #28
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	4613      	mov	r3, r2
 800f028:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f02e:	2300      	movs	r3, #0
 800f030:	75fb      	strb	r3, [r7, #23]
 800f032:	e027      	b.n	800f084 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	0f1b      	lsrs	r3, r3, #28
 800f038:	2b09      	cmp	r3, #9
 800f03a:	d80b      	bhi.n	800f054 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	0f1b      	lsrs	r3, r3, #28
 800f040:	b2da      	uxtb	r2, r3
 800f042:	7dfb      	ldrb	r3, [r7, #23]
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	4619      	mov	r1, r3
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	440b      	add	r3, r1
 800f04c:	3230      	adds	r2, #48	; 0x30
 800f04e:	b2d2      	uxtb	r2, r2
 800f050:	701a      	strb	r2, [r3, #0]
 800f052:	e00a      	b.n	800f06a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	0f1b      	lsrs	r3, r3, #28
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	7dfb      	ldrb	r3, [r7, #23]
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	4619      	mov	r1, r3
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	440b      	add	r3, r1
 800f064:	3237      	adds	r2, #55	; 0x37
 800f066:	b2d2      	uxtb	r2, r2
 800f068:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	011b      	lsls	r3, r3, #4
 800f06e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	3301      	adds	r3, #1
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	4413      	add	r3, r2
 800f07a:	2200      	movs	r2, #0
 800f07c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	3301      	adds	r3, #1
 800f082:	75fb      	strb	r3, [r7, #23]
 800f084:	7dfa      	ldrb	r2, [r7, #23]
 800f086:	79fb      	ldrb	r3, [r7, #7]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d3d3      	bcc.n	800f034 <IntToUnicode+0x18>
  }
}
 800f08c:	bf00      	nop
 800f08e:	bf00      	nop
 800f090:	371c      	adds	r7, #28
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
	...

0800f09c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b0ba      	sub	sp, #232	; 0xe8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	605a      	str	r2, [r3, #4]
 800f0ae:	609a      	str	r2, [r3, #8]
 800f0b0:	60da      	str	r2, [r3, #12]
 800f0b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f0b4:	f107 0310 	add.w	r3, r7, #16
 800f0b8:	22c0      	movs	r2, #192	; 0xc0
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f001 f9ca 	bl	8010456 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a2c      	ldr	r2, [pc, #176]	; (800f178 <HAL_PCD_MspInit+0xdc>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d151      	bne.n	800f170 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f0cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f0d0:	f04f 0300 	mov.w	r3, #0
 800f0d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800f0d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f0dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f0e0:	f107 0310 	add.w	r3, r7, #16
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7f8 fe3f 	bl	8007d68 <HAL_RCCEx_PeriphCLKConfig>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f0f0:	f7f1 fe10 	bl	8000d14 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f0f4:	f7f7 fe16 	bl	8006d24 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0f8:	4b20      	ldr	r3, [pc, #128]	; (800f17c <HAL_PCD_MspInit+0xe0>)
 800f0fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f0fe:	4a1f      	ldr	r2, [pc, #124]	; (800f17c <HAL_PCD_MspInit+0xe0>)
 800f100:	f043 0301 	orr.w	r3, r3, #1
 800f104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f108:	4b1c      	ldr	r3, [pc, #112]	; (800f17c <HAL_PCD_MspInit+0xe0>)
 800f10a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f10e:	f003 0301 	and.w	r3, r3, #1
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f116:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f11a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f11e:	2302      	movs	r3, #2
 800f120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f124:	2300      	movs	r3, #0
 800f126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f12a:	2300      	movs	r3, #0
 800f12c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f130:	230a      	movs	r3, #10
 800f132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f136:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f13a:	4619      	mov	r1, r3
 800f13c:	4810      	ldr	r0, [pc, #64]	; (800f180 <HAL_PCD_MspInit+0xe4>)
 800f13e:	f7f6 f91b 	bl	8005378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f142:	4b0e      	ldr	r3, [pc, #56]	; (800f17c <HAL_PCD_MspInit+0xe0>)
 800f144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f148:	4a0c      	ldr	r2, [pc, #48]	; (800f17c <HAL_PCD_MspInit+0xe0>)
 800f14a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f14e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f152:	4b0a      	ldr	r3, [pc, #40]	; (800f17c <HAL_PCD_MspInit+0xe0>)
 800f154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f15c:	60bb      	str	r3, [r7, #8]
 800f15e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f160:	2200      	movs	r2, #0
 800f162:	2100      	movs	r1, #0
 800f164:	2065      	movs	r0, #101	; 0x65
 800f166:	f7f3 fd45 	bl	8002bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f16a:	2065      	movs	r0, #101	; 0x65
 800f16c:	f7f3 fd5c 	bl	8002c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f170:	bf00      	nop
 800f172:	37e8      	adds	r7, #232	; 0xe8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	40080000 	.word	0x40080000
 800f17c:	58024400 	.word	0x58024400
 800f180:	58020000 	.word	0x58020000

0800f184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f198:	4619      	mov	r1, r3
 800f19a:	4610      	mov	r0, r2
 800f19c:	f7fe f8af 	bl	800d2fe <USBD_LL_SetupStage>
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f1ba:	78fa      	ldrb	r2, [r7, #3]
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	4413      	add	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	440b      	add	r3, r1
 800f1c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	78fb      	ldrb	r3, [r7, #3]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	f7fe f8e9 	bl	800d3a8 <USBD_LL_DataOutStage>
}
 800f1d6:	bf00      	nop
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b082      	sub	sp, #8
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f1f0:	78fa      	ldrb	r2, [r7, #3]
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	00db      	lsls	r3, r3, #3
 800f1f8:	4413      	add	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	440b      	add	r3, r1
 800f1fe:	3348      	adds	r3, #72	; 0x48
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	78fb      	ldrb	r3, [r7, #3]
 800f204:	4619      	mov	r1, r3
 800f206:	f7fe f982 	bl	800d50e <USBD_LL_DataInStage>
}
 800f20a:	bf00      	nop
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe fabc 	bl	800d79e <USBD_LL_SOF>
}
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b084      	sub	sp, #16
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f236:	2301      	movs	r3, #1
 800f238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	691b      	ldr	r3, [r3, #16]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f242:	2300      	movs	r3, #0
 800f244:	73fb      	strb	r3, [r7, #15]
 800f246:	e008      	b.n	800f25a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	2b02      	cmp	r3, #2
 800f24e:	d102      	bne.n	800f256 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f250:	2301      	movs	r3, #1
 800f252:	73fb      	strb	r3, [r7, #15]
 800f254:	e001      	b.n	800f25a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f256:	f7f1 fd5d 	bl	8000d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f260:	7bfa      	ldrb	r2, [r7, #15]
 800f262:	4611      	mov	r1, r2
 800f264:	4618      	mov	r0, r3
 800f266:	f7fe fa56 	bl	800d716 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f270:	4618      	mov	r0, r3
 800f272:	f7fe f9fe 	bl	800d672 <USBD_LL_Reset>
}
 800f276:	bf00      	nop
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
	...

0800f280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fe fa51 	bl	800d736 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	6812      	ldr	r2, [r2, #0]
 800f2a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2a6:	f043 0301 	orr.w	r3, r3, #1
 800f2aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a1b      	ldr	r3, [r3, #32]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d005      	beq.n	800f2c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2b4:	4b04      	ldr	r3, [pc, #16]	; (800f2c8 <HAL_PCD_SuspendCallback+0x48>)
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	4a03      	ldr	r2, [pc, #12]	; (800f2c8 <HAL_PCD_SuspendCallback+0x48>)
 800f2ba:	f043 0306 	orr.w	r3, r3, #6
 800f2be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	e000ed00 	.word	0xe000ed00

0800f2cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fe fa47 	bl	800d76e <USBD_LL_Resume>
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f2fa:	78fa      	ldrb	r2, [r7, #3]
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe fa9f 	bl	800d842 <USBD_LL_IsoOUTIncomplete>
}
 800f304:	bf00      	nop
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	460b      	mov	r3, r1
 800f316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f31e:	78fa      	ldrb	r2, [r7, #3]
 800f320:	4611      	mov	r1, r2
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe fa5b 	bl	800d7de <USBD_LL_IsoINIncomplete>
}
 800f328:	bf00      	nop
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fe fab1 	bl	800d8a6 <USBD_LL_DevConnected>
}
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fe faae 	bl	800d8bc <USBD_LL_DevDisconnected>
}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d13e      	bne.n	800f3f6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f378:	4a21      	ldr	r2, [pc, #132]	; (800f400 <USBD_LL_Init+0x98>)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a1f      	ldr	r2, [pc, #124]	; (800f400 <USBD_LL_Init+0x98>)
 800f384:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f388:	4b1d      	ldr	r3, [pc, #116]	; (800f400 <USBD_LL_Init+0x98>)
 800f38a:	4a1e      	ldr	r2, [pc, #120]	; (800f404 <USBD_LL_Init+0x9c>)
 800f38c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f38e:	4b1c      	ldr	r3, [pc, #112]	; (800f400 <USBD_LL_Init+0x98>)
 800f390:	2209      	movs	r2, #9
 800f392:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f394:	4b1a      	ldr	r3, [pc, #104]	; (800f400 <USBD_LL_Init+0x98>)
 800f396:	2202      	movs	r2, #2
 800f398:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f39a:	4b19      	ldr	r3, [pc, #100]	; (800f400 <USBD_LL_Init+0x98>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3a0:	4b17      	ldr	r3, [pc, #92]	; (800f400 <USBD_LL_Init+0x98>)
 800f3a2:	2202      	movs	r2, #2
 800f3a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3a6:	4b16      	ldr	r3, [pc, #88]	; (800f400 <USBD_LL_Init+0x98>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3ac:	4b14      	ldr	r3, [pc, #80]	; (800f400 <USBD_LL_Init+0x98>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3b2:	4b13      	ldr	r3, [pc, #76]	; (800f400 <USBD_LL_Init+0x98>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f3b8:	4b11      	ldr	r3, [pc, #68]	; (800f400 <USBD_LL_Init+0x98>)
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3be:	4b10      	ldr	r3, [pc, #64]	; (800f400 <USBD_LL_Init+0x98>)
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3c4:	4b0e      	ldr	r3, [pc, #56]	; (800f400 <USBD_LL_Init+0x98>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3ca:	480d      	ldr	r0, [pc, #52]	; (800f400 <USBD_LL_Init+0x98>)
 800f3cc:	f7f6 f9b7 	bl	800573e <HAL_PCD_Init>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d001      	beq.n	800f3da <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f3d6:	f7f1 fc9d 	bl	8000d14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3da:	2180      	movs	r1, #128	; 0x80
 800f3dc:	4808      	ldr	r0, [pc, #32]	; (800f400 <USBD_LL_Init+0x98>)
 800f3de:	f7f7 fc26 	bl	8006c2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3e2:	2240      	movs	r2, #64	; 0x40
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4806      	ldr	r0, [pc, #24]	; (800f400 <USBD_LL_Init+0x98>)
 800f3e8:	f7f7 fbda 	bl	8006ba0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f3ec:	2280      	movs	r2, #128	; 0x80
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	4803      	ldr	r0, [pc, #12]	; (800f400 <USBD_LL_Init+0x98>)
 800f3f2:	f7f7 fbd5 	bl	8006ba0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	240019b0 	.word	0x240019b0
 800f404:	40080000 	.word	0x40080000

0800f408 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f410:	2300      	movs	r3, #0
 800f412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f6 fab1 	bl	8005986 <HAL_PCD_Start>
 800f424:	4603      	mov	r3, r0
 800f426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f428:	7bfb      	ldrb	r3, [r7, #15]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 f942 	bl	800f6b4 <USBD_Get_USB_Status>
 800f430:	4603      	mov	r3, r0
 800f432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f434:	7bbb      	ldrb	r3, [r7, #14]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
 800f446:	4608      	mov	r0, r1
 800f448:	4611      	mov	r1, r2
 800f44a:	461a      	mov	r2, r3
 800f44c:	4603      	mov	r3, r0
 800f44e:	70fb      	strb	r3, [r7, #3]
 800f450:	460b      	mov	r3, r1
 800f452:	70bb      	strb	r3, [r7, #2]
 800f454:	4613      	mov	r3, r2
 800f456:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f45c:	2300      	movs	r3, #0
 800f45e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f466:	78bb      	ldrb	r3, [r7, #2]
 800f468:	883a      	ldrh	r2, [r7, #0]
 800f46a:	78f9      	ldrb	r1, [r7, #3]
 800f46c:	f7f6 ffb1 	bl	80063d2 <HAL_PCD_EP_Open>
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	4618      	mov	r0, r3
 800f478:	f000 f91c 	bl	800f6b4 <USBD_Get_USB_Status>
 800f47c:	4603      	mov	r3, r0
 800f47e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f480:	7bbb      	ldrb	r3, [r7, #14]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b084      	sub	sp, #16
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	460b      	mov	r3, r1
 800f494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f496:	2300      	movs	r3, #0
 800f498:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4a4:	78fa      	ldrb	r2, [r7, #3]
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7f6 fffa 	bl	80064a2 <HAL_PCD_EP_Close>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4b2:	7bfb      	ldrb	r3, [r7, #15]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f000 f8fd 	bl	800f6b4 <USBD_Get_USB_Status>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4e2:	78fa      	ldrb	r2, [r7, #3]
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7f7 f8b4 	bl	8006654 <HAL_PCD_EP_SetStall>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f000 f8de 	bl	800f6b4 <USBD_Get_USB_Status>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b084      	sub	sp, #16
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	460b      	mov	r3, r1
 800f510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f520:	78fa      	ldrb	r2, [r7, #3]
 800f522:	4611      	mov	r1, r2
 800f524:	4618      	mov	r0, r3
 800f526:	f7f7 f8f9 	bl	800671c <HAL_PCD_EP_ClrStall>
 800f52a:	4603      	mov	r3, r0
 800f52c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f52e:	7bfb      	ldrb	r3, [r7, #15]
 800f530:	4618      	mov	r0, r3
 800f532:	f000 f8bf 	bl	800f6b4 <USBD_Get_USB_Status>
 800f536:	4603      	mov	r3, r0
 800f538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3710      	adds	r7, #16
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f556:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	da0b      	bge.n	800f578 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f560:	78fb      	ldrb	r3, [r7, #3]
 800f562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f566:	68f9      	ldr	r1, [r7, #12]
 800f568:	4613      	mov	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	440b      	add	r3, r1
 800f572:	333e      	adds	r3, #62	; 0x3e
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	e00b      	b.n	800f590 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f578:	78fb      	ldrb	r3, [r7, #3]
 800f57a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f57e:	68f9      	ldr	r1, [r7, #12]
 800f580:	4613      	mov	r3, r2
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	4413      	add	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	440b      	add	r3, r1
 800f58a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f58e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f590:	4618      	mov	r0, r3
 800f592:	3714      	adds	r7, #20
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr

0800f59c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5b6:	78fa      	ldrb	r2, [r7, #3]
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7f6 fee4 	bl	8006388 <HAL_PCD_SetAddress>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5c4:	7bfb      	ldrb	r3, [r7, #15]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f000 f874 	bl	800f6b4 <USBD_Get_USB_Status>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b086      	sub	sp, #24
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f5f8:	7af9      	ldrb	r1, [r7, #11]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	f7f6 ffee 	bl	80065de <HAL_PCD_EP_Transmit>
 800f602:	4603      	mov	r3, r0
 800f604:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f606:	7dfb      	ldrb	r3, [r7, #23]
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 f853 	bl	800f6b4 <USBD_Get_USB_Status>
 800f60e:	4603      	mov	r3, r0
 800f610:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f612:	7dbb      	ldrb	r3, [r7, #22]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b086      	sub	sp, #24
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	607a      	str	r2, [r7, #4]
 800f626:	603b      	str	r3, [r7, #0]
 800f628:	460b      	mov	r3, r1
 800f62a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f630:	2300      	movs	r3, #0
 800f632:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f63a:	7af9      	ldrb	r1, [r7, #11]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	f7f6 ff79 	bl	8006536 <HAL_PCD_EP_Receive>
 800f644:	4603      	mov	r3, r0
 800f646:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f648:	7dfb      	ldrb	r3, [r7, #23]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f000 f832 	bl	800f6b4 <USBD_Get_USB_Status>
 800f650:	4603      	mov	r3, r0
 800f652:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f654:	7dbb      	ldrb	r3, [r7, #22]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3718      	adds	r7, #24
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	460b      	mov	r3, r1
 800f668:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f670:	78fa      	ldrb	r2, [r7, #3]
 800f672:	4611      	mov	r1, r2
 800f674:	4618      	mov	r0, r3
 800f676:	f7f6 ff9a 	bl	80065ae <HAL_PCD_EP_GetRxCount>
 800f67a:	4603      	mov	r3, r0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f68c:	4b03      	ldr	r3, [pc, #12]	; (800f69c <USBD_static_malloc+0x18>)
}
 800f68e:	4618      	mov	r0, r3
 800f690:	370c      	adds	r7, #12
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	24001ebc 	.word	0x24001ebc

0800f6a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d817      	bhi.n	800f6f8 <USBD_Get_USB_Status+0x44>
 800f6c8:	a201      	add	r2, pc, #4	; (adr r2, 800f6d0 <USBD_Get_USB_Status+0x1c>)
 800f6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ce:	bf00      	nop
 800f6d0:	0800f6e1 	.word	0x0800f6e1
 800f6d4:	0800f6e7 	.word	0x0800f6e7
 800f6d8:	0800f6ed 	.word	0x0800f6ed
 800f6dc:	0800f6f3 	.word	0x0800f6f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e4:	e00b      	b.n	800f6fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ea:	e008      	b.n	800f6fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f0:	e005      	b.n	800f6fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6f2:	2303      	movs	r3, #3
 800f6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f6:	e002      	b.n	800f6fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f6fc:	bf00      	nop
  }
  return usb_status;
 800f6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f700:	4618      	mov	r0, r3
 800f702:	3714      	adds	r7, #20
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <arm_sin_f32>:
 800f70c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f78c <arm_sin_f32+0x80>
 800f710:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f714:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f718:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f720:	d504      	bpl.n	800f72c <arm_sin_f32+0x20>
 800f722:	ee17 3a90 	vmov	r3, s15
 800f726:	3b01      	subs	r3, #1
 800f728:	ee07 3a90 	vmov	s15, r3
 800f72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f730:	eddf 6a17 	vldr	s13, [pc, #92]	; 800f790 <arm_sin_f32+0x84>
 800f734:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f738:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f73c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f740:	ee17 3a10 	vmov	r3, s14
 800f744:	b29b      	uxth	r3, r3
 800f746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f74a:	d21a      	bcs.n	800f782 <arm_sin_f32+0x76>
 800f74c:	ee07 3a10 	vmov	s14, r3
 800f750:	1c59      	adds	r1, r3, #1
 800f752:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800f756:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f75a:	4a0e      	ldr	r2, [pc, #56]	; (800f794 <arm_sin_f32+0x88>)
 800f75c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f764:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f768:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f76c:	edd3 6a00 	vldr	s13, [r3]
 800f770:	ed92 7a00 	vldr	s14, [r2]
 800f774:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f77c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f780:	4770      	bx	lr
 800f782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f786:	2101      	movs	r1, #1
 800f788:	2300      	movs	r3, #0
 800f78a:	e7e6      	b.n	800f75a <arm_sin_f32+0x4e>
 800f78c:	3e22f983 	.word	0x3e22f983
 800f790:	44000000 	.word	0x44000000
 800f794:	0801270c 	.word	0x0801270c

0800f798 <arm_cos_f32>:
 800f798:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f820 <arm_cos_f32+0x88>
 800f79c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800f7a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f7a4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800f7a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f7ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b4:	d504      	bpl.n	800f7c0 <arm_cos_f32+0x28>
 800f7b6:	ee17 3a90 	vmov	r3, s15
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	ee07 3a90 	vmov	s15, r3
 800f7c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7c4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800f824 <arm_cos_f32+0x8c>
 800f7c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f7cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7d0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f7d4:	ee17 3a10 	vmov	r3, s14
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7de:	d21a      	bcs.n	800f816 <arm_cos_f32+0x7e>
 800f7e0:	ee07 3a10 	vmov	s14, r3
 800f7e4:	1c59      	adds	r1, r3, #1
 800f7e6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800f7ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f7ee:	4a0e      	ldr	r2, [pc, #56]	; (800f828 <arm_cos_f32+0x90>)
 800f7f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f7f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f7fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f800:	edd3 6a00 	vldr	s13, [r3]
 800f804:	ed92 7a00 	vldr	s14, [r2]
 800f808:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f80c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f810:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f814:	4770      	bx	lr
 800f816:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f81a:	2101      	movs	r1, #1
 800f81c:	2300      	movs	r3, #0
 800f81e:	e7e6      	b.n	800f7ee <arm_cos_f32+0x56>
 800f820:	3e22f983 	.word	0x3e22f983
 800f824:	44000000 	.word	0x44000000
 800f828:	0801270c 	.word	0x0801270c

0800f82c <malloc>:
 800f82c:	4b02      	ldr	r3, [pc, #8]	; (800f838 <malloc+0xc>)
 800f82e:	4601      	mov	r1, r0
 800f830:	6818      	ldr	r0, [r3, #0]
 800f832:	f000 b823 	b.w	800f87c <_malloc_r>
 800f836:	bf00      	nop
 800f838:	24000160 	.word	0x24000160

0800f83c <sbrk_aligned>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	4e0e      	ldr	r6, [pc, #56]	; (800f878 <sbrk_aligned+0x3c>)
 800f840:	460c      	mov	r4, r1
 800f842:	6831      	ldr	r1, [r6, #0]
 800f844:	4605      	mov	r5, r0
 800f846:	b911      	cbnz	r1, 800f84e <sbrk_aligned+0x12>
 800f848:	f000 fe46 	bl	80104d8 <_sbrk_r>
 800f84c:	6030      	str	r0, [r6, #0]
 800f84e:	4621      	mov	r1, r4
 800f850:	4628      	mov	r0, r5
 800f852:	f000 fe41 	bl	80104d8 <_sbrk_r>
 800f856:	1c43      	adds	r3, r0, #1
 800f858:	d00a      	beq.n	800f870 <sbrk_aligned+0x34>
 800f85a:	1cc4      	adds	r4, r0, #3
 800f85c:	f024 0403 	bic.w	r4, r4, #3
 800f860:	42a0      	cmp	r0, r4
 800f862:	d007      	beq.n	800f874 <sbrk_aligned+0x38>
 800f864:	1a21      	subs	r1, r4, r0
 800f866:	4628      	mov	r0, r5
 800f868:	f000 fe36 	bl	80104d8 <_sbrk_r>
 800f86c:	3001      	adds	r0, #1
 800f86e:	d101      	bne.n	800f874 <sbrk_aligned+0x38>
 800f870:	f04f 34ff 	mov.w	r4, #4294967295
 800f874:	4620      	mov	r0, r4
 800f876:	bd70      	pop	{r4, r5, r6, pc}
 800f878:	240020e0 	.word	0x240020e0

0800f87c <_malloc_r>:
 800f87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f880:	1ccd      	adds	r5, r1, #3
 800f882:	f025 0503 	bic.w	r5, r5, #3
 800f886:	3508      	adds	r5, #8
 800f888:	2d0c      	cmp	r5, #12
 800f88a:	bf38      	it	cc
 800f88c:	250c      	movcc	r5, #12
 800f88e:	2d00      	cmp	r5, #0
 800f890:	4607      	mov	r7, r0
 800f892:	db01      	blt.n	800f898 <_malloc_r+0x1c>
 800f894:	42a9      	cmp	r1, r5
 800f896:	d905      	bls.n	800f8a4 <_malloc_r+0x28>
 800f898:	230c      	movs	r3, #12
 800f89a:	603b      	str	r3, [r7, #0]
 800f89c:	2600      	movs	r6, #0
 800f89e:	4630      	mov	r0, r6
 800f8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f978 <_malloc_r+0xfc>
 800f8a8:	f000 f868 	bl	800f97c <__malloc_lock>
 800f8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b0:	461c      	mov	r4, r3
 800f8b2:	bb5c      	cbnz	r4, 800f90c <_malloc_r+0x90>
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	f7ff ffc0 	bl	800f83c <sbrk_aligned>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	4604      	mov	r4, r0
 800f8c0:	d155      	bne.n	800f96e <_malloc_r+0xf2>
 800f8c2:	f8d8 4000 	ldr.w	r4, [r8]
 800f8c6:	4626      	mov	r6, r4
 800f8c8:	2e00      	cmp	r6, #0
 800f8ca:	d145      	bne.n	800f958 <_malloc_r+0xdc>
 800f8cc:	2c00      	cmp	r4, #0
 800f8ce:	d048      	beq.n	800f962 <_malloc_r+0xe6>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	4631      	mov	r1, r6
 800f8d4:	4638      	mov	r0, r7
 800f8d6:	eb04 0903 	add.w	r9, r4, r3
 800f8da:	f000 fdfd 	bl	80104d8 <_sbrk_r>
 800f8de:	4581      	cmp	r9, r0
 800f8e0:	d13f      	bne.n	800f962 <_malloc_r+0xe6>
 800f8e2:	6821      	ldr	r1, [r4, #0]
 800f8e4:	1a6d      	subs	r5, r5, r1
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f7ff ffa7 	bl	800f83c <sbrk_aligned>
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	d037      	beq.n	800f962 <_malloc_r+0xe6>
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	442b      	add	r3, r5
 800f8f6:	6023      	str	r3, [r4, #0]
 800f8f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d038      	beq.n	800f972 <_malloc_r+0xf6>
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	42a2      	cmp	r2, r4
 800f904:	d12b      	bne.n	800f95e <_malloc_r+0xe2>
 800f906:	2200      	movs	r2, #0
 800f908:	605a      	str	r2, [r3, #4]
 800f90a:	e00f      	b.n	800f92c <_malloc_r+0xb0>
 800f90c:	6822      	ldr	r2, [r4, #0]
 800f90e:	1b52      	subs	r2, r2, r5
 800f910:	d41f      	bmi.n	800f952 <_malloc_r+0xd6>
 800f912:	2a0b      	cmp	r2, #11
 800f914:	d917      	bls.n	800f946 <_malloc_r+0xca>
 800f916:	1961      	adds	r1, r4, r5
 800f918:	42a3      	cmp	r3, r4
 800f91a:	6025      	str	r5, [r4, #0]
 800f91c:	bf18      	it	ne
 800f91e:	6059      	strne	r1, [r3, #4]
 800f920:	6863      	ldr	r3, [r4, #4]
 800f922:	bf08      	it	eq
 800f924:	f8c8 1000 	streq.w	r1, [r8]
 800f928:	5162      	str	r2, [r4, r5]
 800f92a:	604b      	str	r3, [r1, #4]
 800f92c:	4638      	mov	r0, r7
 800f92e:	f104 060b 	add.w	r6, r4, #11
 800f932:	f000 f829 	bl	800f988 <__malloc_unlock>
 800f936:	f026 0607 	bic.w	r6, r6, #7
 800f93a:	1d23      	adds	r3, r4, #4
 800f93c:	1af2      	subs	r2, r6, r3
 800f93e:	d0ae      	beq.n	800f89e <_malloc_r+0x22>
 800f940:	1b9b      	subs	r3, r3, r6
 800f942:	50a3      	str	r3, [r4, r2]
 800f944:	e7ab      	b.n	800f89e <_malloc_r+0x22>
 800f946:	42a3      	cmp	r3, r4
 800f948:	6862      	ldr	r2, [r4, #4]
 800f94a:	d1dd      	bne.n	800f908 <_malloc_r+0x8c>
 800f94c:	f8c8 2000 	str.w	r2, [r8]
 800f950:	e7ec      	b.n	800f92c <_malloc_r+0xb0>
 800f952:	4623      	mov	r3, r4
 800f954:	6864      	ldr	r4, [r4, #4]
 800f956:	e7ac      	b.n	800f8b2 <_malloc_r+0x36>
 800f958:	4634      	mov	r4, r6
 800f95a:	6876      	ldr	r6, [r6, #4]
 800f95c:	e7b4      	b.n	800f8c8 <_malloc_r+0x4c>
 800f95e:	4613      	mov	r3, r2
 800f960:	e7cc      	b.n	800f8fc <_malloc_r+0x80>
 800f962:	230c      	movs	r3, #12
 800f964:	603b      	str	r3, [r7, #0]
 800f966:	4638      	mov	r0, r7
 800f968:	f000 f80e 	bl	800f988 <__malloc_unlock>
 800f96c:	e797      	b.n	800f89e <_malloc_r+0x22>
 800f96e:	6025      	str	r5, [r4, #0]
 800f970:	e7dc      	b.n	800f92c <_malloc_r+0xb0>
 800f972:	605b      	str	r3, [r3, #4]
 800f974:	deff      	udf	#255	; 0xff
 800f976:	bf00      	nop
 800f978:	240020dc 	.word	0x240020dc

0800f97c <__malloc_lock>:
 800f97c:	4801      	ldr	r0, [pc, #4]	; (800f984 <__malloc_lock+0x8>)
 800f97e:	f000 bdf8 	b.w	8010572 <__retarget_lock_acquire_recursive>
 800f982:	bf00      	nop
 800f984:	24002224 	.word	0x24002224

0800f988 <__malloc_unlock>:
 800f988:	4801      	ldr	r0, [pc, #4]	; (800f990 <__malloc_unlock+0x8>)
 800f98a:	f000 bdf3 	b.w	8010574 <__retarget_lock_release_recursive>
 800f98e:	bf00      	nop
 800f990:	24002224 	.word	0x24002224

0800f994 <__cvt>:
 800f994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f996:	ed2d 8b02 	vpush	{d8}
 800f99a:	eeb0 8b40 	vmov.f64	d8, d0
 800f99e:	b085      	sub	sp, #20
 800f9a0:	4617      	mov	r7, r2
 800f9a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f9a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f9a6:	ee18 2a90 	vmov	r2, s17
 800f9aa:	f025 0520 	bic.w	r5, r5, #32
 800f9ae:	2a00      	cmp	r2, #0
 800f9b0:	bfb6      	itet	lt
 800f9b2:	222d      	movlt	r2, #45	; 0x2d
 800f9b4:	2200      	movge	r2, #0
 800f9b6:	eeb1 8b40 	vneglt.f64	d8, d0
 800f9ba:	2d46      	cmp	r5, #70	; 0x46
 800f9bc:	460c      	mov	r4, r1
 800f9be:	701a      	strb	r2, [r3, #0]
 800f9c0:	d004      	beq.n	800f9cc <__cvt+0x38>
 800f9c2:	2d45      	cmp	r5, #69	; 0x45
 800f9c4:	d100      	bne.n	800f9c8 <__cvt+0x34>
 800f9c6:	3401      	adds	r4, #1
 800f9c8:	2102      	movs	r1, #2
 800f9ca:	e000      	b.n	800f9ce <__cvt+0x3a>
 800f9cc:	2103      	movs	r1, #3
 800f9ce:	ab03      	add	r3, sp, #12
 800f9d0:	9301      	str	r3, [sp, #4]
 800f9d2:	ab02      	add	r3, sp, #8
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4633      	mov	r3, r6
 800f9da:	eeb0 0b48 	vmov.f64	d0, d8
 800f9de:	f000 fe53 	bl	8010688 <_dtoa_r>
 800f9e2:	2d47      	cmp	r5, #71	; 0x47
 800f9e4:	d101      	bne.n	800f9ea <__cvt+0x56>
 800f9e6:	07fb      	lsls	r3, r7, #31
 800f9e8:	d51a      	bpl.n	800fa20 <__cvt+0x8c>
 800f9ea:	2d46      	cmp	r5, #70	; 0x46
 800f9ec:	eb00 0204 	add.w	r2, r0, r4
 800f9f0:	d10c      	bne.n	800fa0c <__cvt+0x78>
 800f9f2:	7803      	ldrb	r3, [r0, #0]
 800f9f4:	2b30      	cmp	r3, #48	; 0x30
 800f9f6:	d107      	bne.n	800fa08 <__cvt+0x74>
 800f9f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa00:	bf1c      	itt	ne
 800fa02:	f1c4 0401 	rsbne	r4, r4, #1
 800fa06:	6034      	strne	r4, [r6, #0]
 800fa08:	6833      	ldr	r3, [r6, #0]
 800fa0a:	441a      	add	r2, r3
 800fa0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa14:	bf08      	it	eq
 800fa16:	9203      	streq	r2, [sp, #12]
 800fa18:	2130      	movs	r1, #48	; 0x30
 800fa1a:	9b03      	ldr	r3, [sp, #12]
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d307      	bcc.n	800fa30 <__cvt+0x9c>
 800fa20:	9b03      	ldr	r3, [sp, #12]
 800fa22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa24:	1a1b      	subs	r3, r3, r0
 800fa26:	6013      	str	r3, [r2, #0]
 800fa28:	b005      	add	sp, #20
 800fa2a:	ecbd 8b02 	vpop	{d8}
 800fa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa30:	1c5c      	adds	r4, r3, #1
 800fa32:	9403      	str	r4, [sp, #12]
 800fa34:	7019      	strb	r1, [r3, #0]
 800fa36:	e7f0      	b.n	800fa1a <__cvt+0x86>

0800fa38 <__exponent>:
 800fa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	bfb8      	it	lt
 800fa40:	4249      	neglt	r1, r1
 800fa42:	f803 2b02 	strb.w	r2, [r3], #2
 800fa46:	bfb4      	ite	lt
 800fa48:	222d      	movlt	r2, #45	; 0x2d
 800fa4a:	222b      	movge	r2, #43	; 0x2b
 800fa4c:	2909      	cmp	r1, #9
 800fa4e:	7042      	strb	r2, [r0, #1]
 800fa50:	dd2a      	ble.n	800faa8 <__exponent+0x70>
 800fa52:	f10d 0207 	add.w	r2, sp, #7
 800fa56:	4617      	mov	r7, r2
 800fa58:	260a      	movs	r6, #10
 800fa5a:	4694      	mov	ip, r2
 800fa5c:	fb91 f5f6 	sdiv	r5, r1, r6
 800fa60:	fb06 1415 	mls	r4, r6, r5, r1
 800fa64:	3430      	adds	r4, #48	; 0x30
 800fa66:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fa6a:	460c      	mov	r4, r1
 800fa6c:	2c63      	cmp	r4, #99	; 0x63
 800fa6e:	f102 32ff 	add.w	r2, r2, #4294967295
 800fa72:	4629      	mov	r1, r5
 800fa74:	dcf1      	bgt.n	800fa5a <__exponent+0x22>
 800fa76:	3130      	adds	r1, #48	; 0x30
 800fa78:	f1ac 0402 	sub.w	r4, ip, #2
 800fa7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fa80:	1c41      	adds	r1, r0, #1
 800fa82:	4622      	mov	r2, r4
 800fa84:	42ba      	cmp	r2, r7
 800fa86:	d30a      	bcc.n	800fa9e <__exponent+0x66>
 800fa88:	f10d 0209 	add.w	r2, sp, #9
 800fa8c:	eba2 020c 	sub.w	r2, r2, ip
 800fa90:	42bc      	cmp	r4, r7
 800fa92:	bf88      	it	hi
 800fa94:	2200      	movhi	r2, #0
 800fa96:	4413      	add	r3, r2
 800fa98:	1a18      	subs	r0, r3, r0
 800fa9a:	b003      	add	sp, #12
 800fa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800faa2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800faa6:	e7ed      	b.n	800fa84 <__exponent+0x4c>
 800faa8:	2330      	movs	r3, #48	; 0x30
 800faaa:	3130      	adds	r1, #48	; 0x30
 800faac:	7083      	strb	r3, [r0, #2]
 800faae:	70c1      	strb	r1, [r0, #3]
 800fab0:	1d03      	adds	r3, r0, #4
 800fab2:	e7f1      	b.n	800fa98 <__exponent+0x60>
 800fab4:	0000      	movs	r0, r0
	...

0800fab8 <_printf_float>:
 800fab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	b08b      	sub	sp, #44	; 0x2c
 800fabe:	460c      	mov	r4, r1
 800fac0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fac4:	4616      	mov	r6, r2
 800fac6:	461f      	mov	r7, r3
 800fac8:	4605      	mov	r5, r0
 800faca:	f000 fccd 	bl	8010468 <_localeconv_r>
 800face:	f8d0 b000 	ldr.w	fp, [r0]
 800fad2:	4658      	mov	r0, fp
 800fad4:	f7f0 fc54 	bl	8000380 <strlen>
 800fad8:	2300      	movs	r3, #0
 800fada:	9308      	str	r3, [sp, #32]
 800fadc:	f8d8 3000 	ldr.w	r3, [r8]
 800fae0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fae4:	6822      	ldr	r2, [r4, #0]
 800fae6:	3307      	adds	r3, #7
 800fae8:	f023 0307 	bic.w	r3, r3, #7
 800faec:	f103 0108 	add.w	r1, r3, #8
 800faf0:	f8c8 1000 	str.w	r1, [r8]
 800faf4:	ed93 0b00 	vldr	d0, [r3]
 800faf8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800fd58 <_printf_float+0x2a0>
 800fafc:	eeb0 7bc0 	vabs.f64	d7, d0
 800fb00:	eeb4 7b46 	vcmp.f64	d7, d6
 800fb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb08:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800fb0c:	4682      	mov	sl, r0
 800fb0e:	dd24      	ble.n	800fb5a <_printf_float+0xa2>
 800fb10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb18:	d502      	bpl.n	800fb20 <_printf_float+0x68>
 800fb1a:	232d      	movs	r3, #45	; 0x2d
 800fb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb20:	498f      	ldr	r1, [pc, #572]	; (800fd60 <_printf_float+0x2a8>)
 800fb22:	4b90      	ldr	r3, [pc, #576]	; (800fd64 <_printf_float+0x2ac>)
 800fb24:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fb28:	bf94      	ite	ls
 800fb2a:	4688      	movls	r8, r1
 800fb2c:	4698      	movhi	r8, r3
 800fb2e:	2303      	movs	r3, #3
 800fb30:	6123      	str	r3, [r4, #16]
 800fb32:	f022 0204 	bic.w	r2, r2, #4
 800fb36:	2300      	movs	r3, #0
 800fb38:	6022      	str	r2, [r4, #0]
 800fb3a:	9304      	str	r3, [sp, #16]
 800fb3c:	9700      	str	r7, [sp, #0]
 800fb3e:	4633      	mov	r3, r6
 800fb40:	aa09      	add	r2, sp, #36	; 0x24
 800fb42:	4621      	mov	r1, r4
 800fb44:	4628      	mov	r0, r5
 800fb46:	f000 f9d1 	bl	800feec <_printf_common>
 800fb4a:	3001      	adds	r0, #1
 800fb4c:	f040 808a 	bne.w	800fc64 <_printf_float+0x1ac>
 800fb50:	f04f 30ff 	mov.w	r0, #4294967295
 800fb54:	b00b      	add	sp, #44	; 0x2c
 800fb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb5a:	eeb4 0b40 	vcmp.f64	d0, d0
 800fb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb62:	d709      	bvc.n	800fb78 <_printf_float+0xc0>
 800fb64:	ee10 3a90 	vmov	r3, s1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	bfbc      	itt	lt
 800fb6c:	232d      	movlt	r3, #45	; 0x2d
 800fb6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb72:	497d      	ldr	r1, [pc, #500]	; (800fd68 <_printf_float+0x2b0>)
 800fb74:	4b7d      	ldr	r3, [pc, #500]	; (800fd6c <_printf_float+0x2b4>)
 800fb76:	e7d5      	b.n	800fb24 <_printf_float+0x6c>
 800fb78:	6863      	ldr	r3, [r4, #4]
 800fb7a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fb7e:	9104      	str	r1, [sp, #16]
 800fb80:	1c59      	adds	r1, r3, #1
 800fb82:	d13c      	bne.n	800fbfe <_printf_float+0x146>
 800fb84:	2306      	movs	r3, #6
 800fb86:	6063      	str	r3, [r4, #4]
 800fb88:	2300      	movs	r3, #0
 800fb8a:	9303      	str	r3, [sp, #12]
 800fb8c:	ab08      	add	r3, sp, #32
 800fb8e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fb92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb96:	ab07      	add	r3, sp, #28
 800fb98:	6861      	ldr	r1, [r4, #4]
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	6022      	str	r2, [r4, #0]
 800fb9e:	f10d 031b 	add.w	r3, sp, #27
 800fba2:	4628      	mov	r0, r5
 800fba4:	f7ff fef6 	bl	800f994 <__cvt>
 800fba8:	9b04      	ldr	r3, [sp, #16]
 800fbaa:	9907      	ldr	r1, [sp, #28]
 800fbac:	2b47      	cmp	r3, #71	; 0x47
 800fbae:	4680      	mov	r8, r0
 800fbb0:	d108      	bne.n	800fbc4 <_printf_float+0x10c>
 800fbb2:	1cc8      	adds	r0, r1, #3
 800fbb4:	db02      	blt.n	800fbbc <_printf_float+0x104>
 800fbb6:	6863      	ldr	r3, [r4, #4]
 800fbb8:	4299      	cmp	r1, r3
 800fbba:	dd41      	ble.n	800fc40 <_printf_float+0x188>
 800fbbc:	f1a9 0902 	sub.w	r9, r9, #2
 800fbc0:	fa5f f989 	uxtb.w	r9, r9
 800fbc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fbc8:	d820      	bhi.n	800fc0c <_printf_float+0x154>
 800fbca:	3901      	subs	r1, #1
 800fbcc:	464a      	mov	r2, r9
 800fbce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fbd2:	9107      	str	r1, [sp, #28]
 800fbd4:	f7ff ff30 	bl	800fa38 <__exponent>
 800fbd8:	9a08      	ldr	r2, [sp, #32]
 800fbda:	9004      	str	r0, [sp, #16]
 800fbdc:	1813      	adds	r3, r2, r0
 800fbde:	2a01      	cmp	r2, #1
 800fbe0:	6123      	str	r3, [r4, #16]
 800fbe2:	dc02      	bgt.n	800fbea <_printf_float+0x132>
 800fbe4:	6822      	ldr	r2, [r4, #0]
 800fbe6:	07d2      	lsls	r2, r2, #31
 800fbe8:	d501      	bpl.n	800fbee <_printf_float+0x136>
 800fbea:	3301      	adds	r3, #1
 800fbec:	6123      	str	r3, [r4, #16]
 800fbee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d0a2      	beq.n	800fb3c <_printf_float+0x84>
 800fbf6:	232d      	movs	r3, #45	; 0x2d
 800fbf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbfc:	e79e      	b.n	800fb3c <_printf_float+0x84>
 800fbfe:	9904      	ldr	r1, [sp, #16]
 800fc00:	2947      	cmp	r1, #71	; 0x47
 800fc02:	d1c1      	bne.n	800fb88 <_printf_float+0xd0>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1bf      	bne.n	800fb88 <_printf_float+0xd0>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e7bc      	b.n	800fb86 <_printf_float+0xce>
 800fc0c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fc10:	d118      	bne.n	800fc44 <_printf_float+0x18c>
 800fc12:	2900      	cmp	r1, #0
 800fc14:	6863      	ldr	r3, [r4, #4]
 800fc16:	dd0b      	ble.n	800fc30 <_printf_float+0x178>
 800fc18:	6121      	str	r1, [r4, #16]
 800fc1a:	b913      	cbnz	r3, 800fc22 <_printf_float+0x16a>
 800fc1c:	6822      	ldr	r2, [r4, #0]
 800fc1e:	07d0      	lsls	r0, r2, #31
 800fc20:	d502      	bpl.n	800fc28 <_printf_float+0x170>
 800fc22:	3301      	adds	r3, #1
 800fc24:	440b      	add	r3, r1
 800fc26:	6123      	str	r3, [r4, #16]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	e7de      	b.n	800fbee <_printf_float+0x136>
 800fc30:	b913      	cbnz	r3, 800fc38 <_printf_float+0x180>
 800fc32:	6822      	ldr	r2, [r4, #0]
 800fc34:	07d2      	lsls	r2, r2, #31
 800fc36:	d501      	bpl.n	800fc3c <_printf_float+0x184>
 800fc38:	3302      	adds	r3, #2
 800fc3a:	e7f4      	b.n	800fc26 <_printf_float+0x16e>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e7f2      	b.n	800fc26 <_printf_float+0x16e>
 800fc40:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fc44:	9b08      	ldr	r3, [sp, #32]
 800fc46:	4299      	cmp	r1, r3
 800fc48:	db05      	blt.n	800fc56 <_printf_float+0x19e>
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	6121      	str	r1, [r4, #16]
 800fc4e:	07d8      	lsls	r0, r3, #31
 800fc50:	d5ea      	bpl.n	800fc28 <_printf_float+0x170>
 800fc52:	1c4b      	adds	r3, r1, #1
 800fc54:	e7e7      	b.n	800fc26 <_printf_float+0x16e>
 800fc56:	2900      	cmp	r1, #0
 800fc58:	bfd4      	ite	le
 800fc5a:	f1c1 0202 	rsble	r2, r1, #2
 800fc5e:	2201      	movgt	r2, #1
 800fc60:	4413      	add	r3, r2
 800fc62:	e7e0      	b.n	800fc26 <_printf_float+0x16e>
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	055a      	lsls	r2, r3, #21
 800fc68:	d407      	bmi.n	800fc7a <_printf_float+0x1c2>
 800fc6a:	6923      	ldr	r3, [r4, #16]
 800fc6c:	4642      	mov	r2, r8
 800fc6e:	4631      	mov	r1, r6
 800fc70:	4628      	mov	r0, r5
 800fc72:	47b8      	blx	r7
 800fc74:	3001      	adds	r0, #1
 800fc76:	d12a      	bne.n	800fcce <_printf_float+0x216>
 800fc78:	e76a      	b.n	800fb50 <_printf_float+0x98>
 800fc7a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fc7e:	f240 80e0 	bls.w	800fe42 <_printf_float+0x38a>
 800fc82:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fc86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8e:	d133      	bne.n	800fcf8 <_printf_float+0x240>
 800fc90:	4a37      	ldr	r2, [pc, #220]	; (800fd70 <_printf_float+0x2b8>)
 800fc92:	2301      	movs	r3, #1
 800fc94:	4631      	mov	r1, r6
 800fc96:	4628      	mov	r0, r5
 800fc98:	47b8      	blx	r7
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	f43f af58 	beq.w	800fb50 <_printf_float+0x98>
 800fca0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	db02      	blt.n	800fcae <_printf_float+0x1f6>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	07d8      	lsls	r0, r3, #31
 800fcac:	d50f      	bpl.n	800fcce <_printf_float+0x216>
 800fcae:	4653      	mov	r3, sl
 800fcb0:	465a      	mov	r2, fp
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	47b8      	blx	r7
 800fcb8:	3001      	adds	r0, #1
 800fcba:	f43f af49 	beq.w	800fb50 <_printf_float+0x98>
 800fcbe:	f04f 0800 	mov.w	r8, #0
 800fcc2:	f104 091a 	add.w	r9, r4, #26
 800fcc6:	9b08      	ldr	r3, [sp, #32]
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	4543      	cmp	r3, r8
 800fccc:	dc09      	bgt.n	800fce2 <_printf_float+0x22a>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	079b      	lsls	r3, r3, #30
 800fcd2:	f100 8106 	bmi.w	800fee2 <_printf_float+0x42a>
 800fcd6:	68e0      	ldr	r0, [r4, #12]
 800fcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcda:	4298      	cmp	r0, r3
 800fcdc:	bfb8      	it	lt
 800fcde:	4618      	movlt	r0, r3
 800fce0:	e738      	b.n	800fb54 <_printf_float+0x9c>
 800fce2:	2301      	movs	r3, #1
 800fce4:	464a      	mov	r2, r9
 800fce6:	4631      	mov	r1, r6
 800fce8:	4628      	mov	r0, r5
 800fcea:	47b8      	blx	r7
 800fcec:	3001      	adds	r0, #1
 800fcee:	f43f af2f 	beq.w	800fb50 <_printf_float+0x98>
 800fcf2:	f108 0801 	add.w	r8, r8, #1
 800fcf6:	e7e6      	b.n	800fcc6 <_printf_float+0x20e>
 800fcf8:	9b07      	ldr	r3, [sp, #28]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	dc3a      	bgt.n	800fd74 <_printf_float+0x2bc>
 800fcfe:	4a1c      	ldr	r2, [pc, #112]	; (800fd70 <_printf_float+0x2b8>)
 800fd00:	2301      	movs	r3, #1
 800fd02:	4631      	mov	r1, r6
 800fd04:	4628      	mov	r0, r5
 800fd06:	47b8      	blx	r7
 800fd08:	3001      	adds	r0, #1
 800fd0a:	f43f af21 	beq.w	800fb50 <_printf_float+0x98>
 800fd0e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	d102      	bne.n	800fd1c <_printf_float+0x264>
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	07d9      	lsls	r1, r3, #31
 800fd1a:	d5d8      	bpl.n	800fcce <_printf_float+0x216>
 800fd1c:	4653      	mov	r3, sl
 800fd1e:	465a      	mov	r2, fp
 800fd20:	4631      	mov	r1, r6
 800fd22:	4628      	mov	r0, r5
 800fd24:	47b8      	blx	r7
 800fd26:	3001      	adds	r0, #1
 800fd28:	f43f af12 	beq.w	800fb50 <_printf_float+0x98>
 800fd2c:	f04f 0900 	mov.w	r9, #0
 800fd30:	f104 0a1a 	add.w	sl, r4, #26
 800fd34:	9b07      	ldr	r3, [sp, #28]
 800fd36:	425b      	negs	r3, r3
 800fd38:	454b      	cmp	r3, r9
 800fd3a:	dc01      	bgt.n	800fd40 <_printf_float+0x288>
 800fd3c:	9b08      	ldr	r3, [sp, #32]
 800fd3e:	e795      	b.n	800fc6c <_printf_float+0x1b4>
 800fd40:	2301      	movs	r3, #1
 800fd42:	4652      	mov	r2, sl
 800fd44:	4631      	mov	r1, r6
 800fd46:	4628      	mov	r0, r5
 800fd48:	47b8      	blx	r7
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	f43f af00 	beq.w	800fb50 <_printf_float+0x98>
 800fd50:	f109 0901 	add.w	r9, r9, #1
 800fd54:	e7ee      	b.n	800fd34 <_printf_float+0x27c>
 800fd56:	bf00      	nop
 800fd58:	ffffffff 	.word	0xffffffff
 800fd5c:	7fefffff 	.word	0x7fefffff
 800fd60:	08012f10 	.word	0x08012f10
 800fd64:	08012f14 	.word	0x08012f14
 800fd68:	08012f18 	.word	0x08012f18
 800fd6c:	08012f1c 	.word	0x08012f1c
 800fd70:	08012f20 	.word	0x08012f20
 800fd74:	9a08      	ldr	r2, [sp, #32]
 800fd76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	bfa8      	it	ge
 800fd7c:	461a      	movge	r2, r3
 800fd7e:	2a00      	cmp	r2, #0
 800fd80:	4691      	mov	r9, r2
 800fd82:	dc38      	bgt.n	800fdf6 <_printf_float+0x33e>
 800fd84:	2300      	movs	r3, #0
 800fd86:	9305      	str	r3, [sp, #20]
 800fd88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd8c:	f104 021a 	add.w	r2, r4, #26
 800fd90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd92:	9905      	ldr	r1, [sp, #20]
 800fd94:	9304      	str	r3, [sp, #16]
 800fd96:	eba3 0309 	sub.w	r3, r3, r9
 800fd9a:	428b      	cmp	r3, r1
 800fd9c:	dc33      	bgt.n	800fe06 <_printf_float+0x34e>
 800fd9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	db3c      	blt.n	800fe20 <_printf_float+0x368>
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	07da      	lsls	r2, r3, #31
 800fdaa:	d439      	bmi.n	800fe20 <_printf_float+0x368>
 800fdac:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800fdb0:	eba2 0903 	sub.w	r9, r2, r3
 800fdb4:	9b04      	ldr	r3, [sp, #16]
 800fdb6:	1ad2      	subs	r2, r2, r3
 800fdb8:	4591      	cmp	r9, r2
 800fdba:	bfa8      	it	ge
 800fdbc:	4691      	movge	r9, r2
 800fdbe:	f1b9 0f00 	cmp.w	r9, #0
 800fdc2:	dc35      	bgt.n	800fe30 <_printf_float+0x378>
 800fdc4:	f04f 0800 	mov.w	r8, #0
 800fdc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdcc:	f104 0a1a 	add.w	sl, r4, #26
 800fdd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fdd4:	1a9b      	subs	r3, r3, r2
 800fdd6:	eba3 0309 	sub.w	r3, r3, r9
 800fdda:	4543      	cmp	r3, r8
 800fddc:	f77f af77 	ble.w	800fcce <_printf_float+0x216>
 800fde0:	2301      	movs	r3, #1
 800fde2:	4652      	mov	r2, sl
 800fde4:	4631      	mov	r1, r6
 800fde6:	4628      	mov	r0, r5
 800fde8:	47b8      	blx	r7
 800fdea:	3001      	adds	r0, #1
 800fdec:	f43f aeb0 	beq.w	800fb50 <_printf_float+0x98>
 800fdf0:	f108 0801 	add.w	r8, r8, #1
 800fdf4:	e7ec      	b.n	800fdd0 <_printf_float+0x318>
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	4631      	mov	r1, r6
 800fdfa:	4642      	mov	r2, r8
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	47b8      	blx	r7
 800fe00:	3001      	adds	r0, #1
 800fe02:	d1bf      	bne.n	800fd84 <_printf_float+0x2cc>
 800fe04:	e6a4      	b.n	800fb50 <_printf_float+0x98>
 800fe06:	2301      	movs	r3, #1
 800fe08:	4631      	mov	r1, r6
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	9204      	str	r2, [sp, #16]
 800fe0e:	47b8      	blx	r7
 800fe10:	3001      	adds	r0, #1
 800fe12:	f43f ae9d 	beq.w	800fb50 <_printf_float+0x98>
 800fe16:	9b05      	ldr	r3, [sp, #20]
 800fe18:	9a04      	ldr	r2, [sp, #16]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	9305      	str	r3, [sp, #20]
 800fe1e:	e7b7      	b.n	800fd90 <_printf_float+0x2d8>
 800fe20:	4653      	mov	r3, sl
 800fe22:	465a      	mov	r2, fp
 800fe24:	4631      	mov	r1, r6
 800fe26:	4628      	mov	r0, r5
 800fe28:	47b8      	blx	r7
 800fe2a:	3001      	adds	r0, #1
 800fe2c:	d1be      	bne.n	800fdac <_printf_float+0x2f4>
 800fe2e:	e68f      	b.n	800fb50 <_printf_float+0x98>
 800fe30:	9a04      	ldr	r2, [sp, #16]
 800fe32:	464b      	mov	r3, r9
 800fe34:	4442      	add	r2, r8
 800fe36:	4631      	mov	r1, r6
 800fe38:	4628      	mov	r0, r5
 800fe3a:	47b8      	blx	r7
 800fe3c:	3001      	adds	r0, #1
 800fe3e:	d1c1      	bne.n	800fdc4 <_printf_float+0x30c>
 800fe40:	e686      	b.n	800fb50 <_printf_float+0x98>
 800fe42:	9a08      	ldr	r2, [sp, #32]
 800fe44:	2a01      	cmp	r2, #1
 800fe46:	dc01      	bgt.n	800fe4c <_printf_float+0x394>
 800fe48:	07db      	lsls	r3, r3, #31
 800fe4a:	d537      	bpl.n	800febc <_printf_float+0x404>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	4642      	mov	r2, r8
 800fe50:	4631      	mov	r1, r6
 800fe52:	4628      	mov	r0, r5
 800fe54:	47b8      	blx	r7
 800fe56:	3001      	adds	r0, #1
 800fe58:	f43f ae7a 	beq.w	800fb50 <_printf_float+0x98>
 800fe5c:	4653      	mov	r3, sl
 800fe5e:	465a      	mov	r2, fp
 800fe60:	4631      	mov	r1, r6
 800fe62:	4628      	mov	r0, r5
 800fe64:	47b8      	blx	r7
 800fe66:	3001      	adds	r0, #1
 800fe68:	f43f ae72 	beq.w	800fb50 <_printf_float+0x98>
 800fe6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fe70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe78:	9b08      	ldr	r3, [sp, #32]
 800fe7a:	d01a      	beq.n	800feb2 <_printf_float+0x3fa>
 800fe7c:	3b01      	subs	r3, #1
 800fe7e:	f108 0201 	add.w	r2, r8, #1
 800fe82:	4631      	mov	r1, r6
 800fe84:	4628      	mov	r0, r5
 800fe86:	47b8      	blx	r7
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d10e      	bne.n	800feaa <_printf_float+0x3f2>
 800fe8c:	e660      	b.n	800fb50 <_printf_float+0x98>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	464a      	mov	r2, r9
 800fe92:	4631      	mov	r1, r6
 800fe94:	4628      	mov	r0, r5
 800fe96:	47b8      	blx	r7
 800fe98:	3001      	adds	r0, #1
 800fe9a:	f43f ae59 	beq.w	800fb50 <_printf_float+0x98>
 800fe9e:	f108 0801 	add.w	r8, r8, #1
 800fea2:	9b08      	ldr	r3, [sp, #32]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	4543      	cmp	r3, r8
 800fea8:	dcf1      	bgt.n	800fe8e <_printf_float+0x3d6>
 800feaa:	9b04      	ldr	r3, [sp, #16]
 800feac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800feb0:	e6dd      	b.n	800fc6e <_printf_float+0x1b6>
 800feb2:	f04f 0800 	mov.w	r8, #0
 800feb6:	f104 091a 	add.w	r9, r4, #26
 800feba:	e7f2      	b.n	800fea2 <_printf_float+0x3ea>
 800febc:	2301      	movs	r3, #1
 800febe:	4642      	mov	r2, r8
 800fec0:	e7df      	b.n	800fe82 <_printf_float+0x3ca>
 800fec2:	2301      	movs	r3, #1
 800fec4:	464a      	mov	r2, r9
 800fec6:	4631      	mov	r1, r6
 800fec8:	4628      	mov	r0, r5
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	f43f ae3f 	beq.w	800fb50 <_printf_float+0x98>
 800fed2:	f108 0801 	add.w	r8, r8, #1
 800fed6:	68e3      	ldr	r3, [r4, #12]
 800fed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800feda:	1a5b      	subs	r3, r3, r1
 800fedc:	4543      	cmp	r3, r8
 800fede:	dcf0      	bgt.n	800fec2 <_printf_float+0x40a>
 800fee0:	e6f9      	b.n	800fcd6 <_printf_float+0x21e>
 800fee2:	f04f 0800 	mov.w	r8, #0
 800fee6:	f104 0919 	add.w	r9, r4, #25
 800feea:	e7f4      	b.n	800fed6 <_printf_float+0x41e>

0800feec <_printf_common>:
 800feec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef0:	4616      	mov	r6, r2
 800fef2:	4699      	mov	r9, r3
 800fef4:	688a      	ldr	r2, [r1, #8]
 800fef6:	690b      	ldr	r3, [r1, #16]
 800fef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fefc:	4293      	cmp	r3, r2
 800fefe:	bfb8      	it	lt
 800ff00:	4613      	movlt	r3, r2
 800ff02:	6033      	str	r3, [r6, #0]
 800ff04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff08:	4607      	mov	r7, r0
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	b10a      	cbz	r2, 800ff12 <_printf_common+0x26>
 800ff0e:	3301      	adds	r3, #1
 800ff10:	6033      	str	r3, [r6, #0]
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	0699      	lsls	r1, r3, #26
 800ff16:	bf42      	ittt	mi
 800ff18:	6833      	ldrmi	r3, [r6, #0]
 800ff1a:	3302      	addmi	r3, #2
 800ff1c:	6033      	strmi	r3, [r6, #0]
 800ff1e:	6825      	ldr	r5, [r4, #0]
 800ff20:	f015 0506 	ands.w	r5, r5, #6
 800ff24:	d106      	bne.n	800ff34 <_printf_common+0x48>
 800ff26:	f104 0a19 	add.w	sl, r4, #25
 800ff2a:	68e3      	ldr	r3, [r4, #12]
 800ff2c:	6832      	ldr	r2, [r6, #0]
 800ff2e:	1a9b      	subs	r3, r3, r2
 800ff30:	42ab      	cmp	r3, r5
 800ff32:	dc26      	bgt.n	800ff82 <_printf_common+0x96>
 800ff34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff38:	1e13      	subs	r3, r2, #0
 800ff3a:	6822      	ldr	r2, [r4, #0]
 800ff3c:	bf18      	it	ne
 800ff3e:	2301      	movne	r3, #1
 800ff40:	0692      	lsls	r2, r2, #26
 800ff42:	d42b      	bmi.n	800ff9c <_printf_common+0xb0>
 800ff44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff48:	4649      	mov	r1, r9
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	47c0      	blx	r8
 800ff4e:	3001      	adds	r0, #1
 800ff50:	d01e      	beq.n	800ff90 <_printf_common+0xa4>
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	6922      	ldr	r2, [r4, #16]
 800ff56:	f003 0306 	and.w	r3, r3, #6
 800ff5a:	2b04      	cmp	r3, #4
 800ff5c:	bf02      	ittt	eq
 800ff5e:	68e5      	ldreq	r5, [r4, #12]
 800ff60:	6833      	ldreq	r3, [r6, #0]
 800ff62:	1aed      	subeq	r5, r5, r3
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	bf0c      	ite	eq
 800ff68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff6c:	2500      	movne	r5, #0
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	bfc4      	itt	gt
 800ff72:	1a9b      	subgt	r3, r3, r2
 800ff74:	18ed      	addgt	r5, r5, r3
 800ff76:	2600      	movs	r6, #0
 800ff78:	341a      	adds	r4, #26
 800ff7a:	42b5      	cmp	r5, r6
 800ff7c:	d11a      	bne.n	800ffb4 <_printf_common+0xc8>
 800ff7e:	2000      	movs	r0, #0
 800ff80:	e008      	b.n	800ff94 <_printf_common+0xa8>
 800ff82:	2301      	movs	r3, #1
 800ff84:	4652      	mov	r2, sl
 800ff86:	4649      	mov	r1, r9
 800ff88:	4638      	mov	r0, r7
 800ff8a:	47c0      	blx	r8
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	d103      	bne.n	800ff98 <_printf_common+0xac>
 800ff90:	f04f 30ff 	mov.w	r0, #4294967295
 800ff94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff98:	3501      	adds	r5, #1
 800ff9a:	e7c6      	b.n	800ff2a <_printf_common+0x3e>
 800ff9c:	18e1      	adds	r1, r4, r3
 800ff9e:	1c5a      	adds	r2, r3, #1
 800ffa0:	2030      	movs	r0, #48	; 0x30
 800ffa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffa6:	4422      	add	r2, r4
 800ffa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffb0:	3302      	adds	r3, #2
 800ffb2:	e7c7      	b.n	800ff44 <_printf_common+0x58>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	4649      	mov	r1, r9
 800ffba:	4638      	mov	r0, r7
 800ffbc:	47c0      	blx	r8
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	d0e6      	beq.n	800ff90 <_printf_common+0xa4>
 800ffc2:	3601      	adds	r6, #1
 800ffc4:	e7d9      	b.n	800ff7a <_printf_common+0x8e>
	...

0800ffc8 <_printf_i>:
 800ffc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffcc:	7e0f      	ldrb	r7, [r1, #24]
 800ffce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffd0:	2f78      	cmp	r7, #120	; 0x78
 800ffd2:	4691      	mov	r9, r2
 800ffd4:	4680      	mov	r8, r0
 800ffd6:	460c      	mov	r4, r1
 800ffd8:	469a      	mov	sl, r3
 800ffda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ffde:	d807      	bhi.n	800fff0 <_printf_i+0x28>
 800ffe0:	2f62      	cmp	r7, #98	; 0x62
 800ffe2:	d80a      	bhi.n	800fffa <_printf_i+0x32>
 800ffe4:	2f00      	cmp	r7, #0
 800ffe6:	f000 80d4 	beq.w	8010192 <_printf_i+0x1ca>
 800ffea:	2f58      	cmp	r7, #88	; 0x58
 800ffec:	f000 80c0 	beq.w	8010170 <_printf_i+0x1a8>
 800fff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fff8:	e03a      	b.n	8010070 <_printf_i+0xa8>
 800fffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fffe:	2b15      	cmp	r3, #21
 8010000:	d8f6      	bhi.n	800fff0 <_printf_i+0x28>
 8010002:	a101      	add	r1, pc, #4	; (adr r1, 8010008 <_printf_i+0x40>)
 8010004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010008:	08010061 	.word	0x08010061
 801000c:	08010075 	.word	0x08010075
 8010010:	0800fff1 	.word	0x0800fff1
 8010014:	0800fff1 	.word	0x0800fff1
 8010018:	0800fff1 	.word	0x0800fff1
 801001c:	0800fff1 	.word	0x0800fff1
 8010020:	08010075 	.word	0x08010075
 8010024:	0800fff1 	.word	0x0800fff1
 8010028:	0800fff1 	.word	0x0800fff1
 801002c:	0800fff1 	.word	0x0800fff1
 8010030:	0800fff1 	.word	0x0800fff1
 8010034:	08010179 	.word	0x08010179
 8010038:	080100a1 	.word	0x080100a1
 801003c:	08010133 	.word	0x08010133
 8010040:	0800fff1 	.word	0x0800fff1
 8010044:	0800fff1 	.word	0x0800fff1
 8010048:	0801019b 	.word	0x0801019b
 801004c:	0800fff1 	.word	0x0800fff1
 8010050:	080100a1 	.word	0x080100a1
 8010054:	0800fff1 	.word	0x0800fff1
 8010058:	0800fff1 	.word	0x0800fff1
 801005c:	0801013b 	.word	0x0801013b
 8010060:	682b      	ldr	r3, [r5, #0]
 8010062:	1d1a      	adds	r2, r3, #4
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	602a      	str	r2, [r5, #0]
 8010068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801006c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010070:	2301      	movs	r3, #1
 8010072:	e09f      	b.n	80101b4 <_printf_i+0x1ec>
 8010074:	6820      	ldr	r0, [r4, #0]
 8010076:	682b      	ldr	r3, [r5, #0]
 8010078:	0607      	lsls	r7, r0, #24
 801007a:	f103 0104 	add.w	r1, r3, #4
 801007e:	6029      	str	r1, [r5, #0]
 8010080:	d501      	bpl.n	8010086 <_printf_i+0xbe>
 8010082:	681e      	ldr	r6, [r3, #0]
 8010084:	e003      	b.n	801008e <_printf_i+0xc6>
 8010086:	0646      	lsls	r6, r0, #25
 8010088:	d5fb      	bpl.n	8010082 <_printf_i+0xba>
 801008a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801008e:	2e00      	cmp	r6, #0
 8010090:	da03      	bge.n	801009a <_printf_i+0xd2>
 8010092:	232d      	movs	r3, #45	; 0x2d
 8010094:	4276      	negs	r6, r6
 8010096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801009a:	485a      	ldr	r0, [pc, #360]	; (8010204 <_printf_i+0x23c>)
 801009c:	230a      	movs	r3, #10
 801009e:	e012      	b.n	80100c6 <_printf_i+0xfe>
 80100a0:	682b      	ldr	r3, [r5, #0]
 80100a2:	6820      	ldr	r0, [r4, #0]
 80100a4:	1d19      	adds	r1, r3, #4
 80100a6:	6029      	str	r1, [r5, #0]
 80100a8:	0605      	lsls	r5, r0, #24
 80100aa:	d501      	bpl.n	80100b0 <_printf_i+0xe8>
 80100ac:	681e      	ldr	r6, [r3, #0]
 80100ae:	e002      	b.n	80100b6 <_printf_i+0xee>
 80100b0:	0641      	lsls	r1, r0, #25
 80100b2:	d5fb      	bpl.n	80100ac <_printf_i+0xe4>
 80100b4:	881e      	ldrh	r6, [r3, #0]
 80100b6:	4853      	ldr	r0, [pc, #332]	; (8010204 <_printf_i+0x23c>)
 80100b8:	2f6f      	cmp	r7, #111	; 0x6f
 80100ba:	bf0c      	ite	eq
 80100bc:	2308      	moveq	r3, #8
 80100be:	230a      	movne	r3, #10
 80100c0:	2100      	movs	r1, #0
 80100c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100c6:	6865      	ldr	r5, [r4, #4]
 80100c8:	60a5      	str	r5, [r4, #8]
 80100ca:	2d00      	cmp	r5, #0
 80100cc:	bfa2      	ittt	ge
 80100ce:	6821      	ldrge	r1, [r4, #0]
 80100d0:	f021 0104 	bicge.w	r1, r1, #4
 80100d4:	6021      	strge	r1, [r4, #0]
 80100d6:	b90e      	cbnz	r6, 80100dc <_printf_i+0x114>
 80100d8:	2d00      	cmp	r5, #0
 80100da:	d04b      	beq.n	8010174 <_printf_i+0x1ac>
 80100dc:	4615      	mov	r5, r2
 80100de:	fbb6 f1f3 	udiv	r1, r6, r3
 80100e2:	fb03 6711 	mls	r7, r3, r1, r6
 80100e6:	5dc7      	ldrb	r7, [r0, r7]
 80100e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100ec:	4637      	mov	r7, r6
 80100ee:	42bb      	cmp	r3, r7
 80100f0:	460e      	mov	r6, r1
 80100f2:	d9f4      	bls.n	80100de <_printf_i+0x116>
 80100f4:	2b08      	cmp	r3, #8
 80100f6:	d10b      	bne.n	8010110 <_printf_i+0x148>
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	07de      	lsls	r6, r3, #31
 80100fc:	d508      	bpl.n	8010110 <_printf_i+0x148>
 80100fe:	6923      	ldr	r3, [r4, #16]
 8010100:	6861      	ldr	r1, [r4, #4]
 8010102:	4299      	cmp	r1, r3
 8010104:	bfde      	ittt	le
 8010106:	2330      	movle	r3, #48	; 0x30
 8010108:	f805 3c01 	strble.w	r3, [r5, #-1]
 801010c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010110:	1b52      	subs	r2, r2, r5
 8010112:	6122      	str	r2, [r4, #16]
 8010114:	f8cd a000 	str.w	sl, [sp]
 8010118:	464b      	mov	r3, r9
 801011a:	aa03      	add	r2, sp, #12
 801011c:	4621      	mov	r1, r4
 801011e:	4640      	mov	r0, r8
 8010120:	f7ff fee4 	bl	800feec <_printf_common>
 8010124:	3001      	adds	r0, #1
 8010126:	d14a      	bne.n	80101be <_printf_i+0x1f6>
 8010128:	f04f 30ff 	mov.w	r0, #4294967295
 801012c:	b004      	add	sp, #16
 801012e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	f043 0320 	orr.w	r3, r3, #32
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	4833      	ldr	r0, [pc, #204]	; (8010208 <_printf_i+0x240>)
 801013c:	2778      	movs	r7, #120	; 0x78
 801013e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	6829      	ldr	r1, [r5, #0]
 8010146:	061f      	lsls	r7, r3, #24
 8010148:	f851 6b04 	ldr.w	r6, [r1], #4
 801014c:	d402      	bmi.n	8010154 <_printf_i+0x18c>
 801014e:	065f      	lsls	r7, r3, #25
 8010150:	bf48      	it	mi
 8010152:	b2b6      	uxthmi	r6, r6
 8010154:	07df      	lsls	r7, r3, #31
 8010156:	bf48      	it	mi
 8010158:	f043 0320 	orrmi.w	r3, r3, #32
 801015c:	6029      	str	r1, [r5, #0]
 801015e:	bf48      	it	mi
 8010160:	6023      	strmi	r3, [r4, #0]
 8010162:	b91e      	cbnz	r6, 801016c <_printf_i+0x1a4>
 8010164:	6823      	ldr	r3, [r4, #0]
 8010166:	f023 0320 	bic.w	r3, r3, #32
 801016a:	6023      	str	r3, [r4, #0]
 801016c:	2310      	movs	r3, #16
 801016e:	e7a7      	b.n	80100c0 <_printf_i+0xf8>
 8010170:	4824      	ldr	r0, [pc, #144]	; (8010204 <_printf_i+0x23c>)
 8010172:	e7e4      	b.n	801013e <_printf_i+0x176>
 8010174:	4615      	mov	r5, r2
 8010176:	e7bd      	b.n	80100f4 <_printf_i+0x12c>
 8010178:	682b      	ldr	r3, [r5, #0]
 801017a:	6826      	ldr	r6, [r4, #0]
 801017c:	6961      	ldr	r1, [r4, #20]
 801017e:	1d18      	adds	r0, r3, #4
 8010180:	6028      	str	r0, [r5, #0]
 8010182:	0635      	lsls	r5, r6, #24
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	d501      	bpl.n	801018c <_printf_i+0x1c4>
 8010188:	6019      	str	r1, [r3, #0]
 801018a:	e002      	b.n	8010192 <_printf_i+0x1ca>
 801018c:	0670      	lsls	r0, r6, #25
 801018e:	d5fb      	bpl.n	8010188 <_printf_i+0x1c0>
 8010190:	8019      	strh	r1, [r3, #0]
 8010192:	2300      	movs	r3, #0
 8010194:	6123      	str	r3, [r4, #16]
 8010196:	4615      	mov	r5, r2
 8010198:	e7bc      	b.n	8010114 <_printf_i+0x14c>
 801019a:	682b      	ldr	r3, [r5, #0]
 801019c:	1d1a      	adds	r2, r3, #4
 801019e:	602a      	str	r2, [r5, #0]
 80101a0:	681d      	ldr	r5, [r3, #0]
 80101a2:	6862      	ldr	r2, [r4, #4]
 80101a4:	2100      	movs	r1, #0
 80101a6:	4628      	mov	r0, r5
 80101a8:	f7f0 f89a 	bl	80002e0 <memchr>
 80101ac:	b108      	cbz	r0, 80101b2 <_printf_i+0x1ea>
 80101ae:	1b40      	subs	r0, r0, r5
 80101b0:	6060      	str	r0, [r4, #4]
 80101b2:	6863      	ldr	r3, [r4, #4]
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	2300      	movs	r3, #0
 80101b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101bc:	e7aa      	b.n	8010114 <_printf_i+0x14c>
 80101be:	6923      	ldr	r3, [r4, #16]
 80101c0:	462a      	mov	r2, r5
 80101c2:	4649      	mov	r1, r9
 80101c4:	4640      	mov	r0, r8
 80101c6:	47d0      	blx	sl
 80101c8:	3001      	adds	r0, #1
 80101ca:	d0ad      	beq.n	8010128 <_printf_i+0x160>
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	079b      	lsls	r3, r3, #30
 80101d0:	d413      	bmi.n	80101fa <_printf_i+0x232>
 80101d2:	68e0      	ldr	r0, [r4, #12]
 80101d4:	9b03      	ldr	r3, [sp, #12]
 80101d6:	4298      	cmp	r0, r3
 80101d8:	bfb8      	it	lt
 80101da:	4618      	movlt	r0, r3
 80101dc:	e7a6      	b.n	801012c <_printf_i+0x164>
 80101de:	2301      	movs	r3, #1
 80101e0:	4632      	mov	r2, r6
 80101e2:	4649      	mov	r1, r9
 80101e4:	4640      	mov	r0, r8
 80101e6:	47d0      	blx	sl
 80101e8:	3001      	adds	r0, #1
 80101ea:	d09d      	beq.n	8010128 <_printf_i+0x160>
 80101ec:	3501      	adds	r5, #1
 80101ee:	68e3      	ldr	r3, [r4, #12]
 80101f0:	9903      	ldr	r1, [sp, #12]
 80101f2:	1a5b      	subs	r3, r3, r1
 80101f4:	42ab      	cmp	r3, r5
 80101f6:	dcf2      	bgt.n	80101de <_printf_i+0x216>
 80101f8:	e7eb      	b.n	80101d2 <_printf_i+0x20a>
 80101fa:	2500      	movs	r5, #0
 80101fc:	f104 0619 	add.w	r6, r4, #25
 8010200:	e7f5      	b.n	80101ee <_printf_i+0x226>
 8010202:	bf00      	nop
 8010204:	08012f22 	.word	0x08012f22
 8010208:	08012f33 	.word	0x08012f33

0801020c <std>:
 801020c:	2300      	movs	r3, #0
 801020e:	b510      	push	{r4, lr}
 8010210:	4604      	mov	r4, r0
 8010212:	e9c0 3300 	strd	r3, r3, [r0]
 8010216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801021a:	6083      	str	r3, [r0, #8]
 801021c:	8181      	strh	r1, [r0, #12]
 801021e:	6643      	str	r3, [r0, #100]	; 0x64
 8010220:	81c2      	strh	r2, [r0, #14]
 8010222:	6183      	str	r3, [r0, #24]
 8010224:	4619      	mov	r1, r3
 8010226:	2208      	movs	r2, #8
 8010228:	305c      	adds	r0, #92	; 0x5c
 801022a:	f000 f914 	bl	8010456 <memset>
 801022e:	4b0d      	ldr	r3, [pc, #52]	; (8010264 <std+0x58>)
 8010230:	6263      	str	r3, [r4, #36]	; 0x24
 8010232:	4b0d      	ldr	r3, [pc, #52]	; (8010268 <std+0x5c>)
 8010234:	62a3      	str	r3, [r4, #40]	; 0x28
 8010236:	4b0d      	ldr	r3, [pc, #52]	; (801026c <std+0x60>)
 8010238:	62e3      	str	r3, [r4, #44]	; 0x2c
 801023a:	4b0d      	ldr	r3, [pc, #52]	; (8010270 <std+0x64>)
 801023c:	6323      	str	r3, [r4, #48]	; 0x30
 801023e:	4b0d      	ldr	r3, [pc, #52]	; (8010274 <std+0x68>)
 8010240:	6224      	str	r4, [r4, #32]
 8010242:	429c      	cmp	r4, r3
 8010244:	d006      	beq.n	8010254 <std+0x48>
 8010246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801024a:	4294      	cmp	r4, r2
 801024c:	d002      	beq.n	8010254 <std+0x48>
 801024e:	33d0      	adds	r3, #208	; 0xd0
 8010250:	429c      	cmp	r4, r3
 8010252:	d105      	bne.n	8010260 <std+0x54>
 8010254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801025c:	f000 b988 	b.w	8010570 <__retarget_lock_init_recursive>
 8010260:	bd10      	pop	{r4, pc}
 8010262:	bf00      	nop
 8010264:	080103d1 	.word	0x080103d1
 8010268:	080103f3 	.word	0x080103f3
 801026c:	0801042b 	.word	0x0801042b
 8010270:	0801044f 	.word	0x0801044f
 8010274:	240020e4 	.word	0x240020e4

08010278 <stdio_exit_handler>:
 8010278:	4a02      	ldr	r2, [pc, #8]	; (8010284 <stdio_exit_handler+0xc>)
 801027a:	4903      	ldr	r1, [pc, #12]	; (8010288 <stdio_exit_handler+0x10>)
 801027c:	4803      	ldr	r0, [pc, #12]	; (801028c <stdio_exit_handler+0x14>)
 801027e:	f000 b869 	b.w	8010354 <_fwalk_sglue>
 8010282:	bf00      	nop
 8010284:	24000108 	.word	0x24000108
 8010288:	08011cad 	.word	0x08011cad
 801028c:	24000114 	.word	0x24000114

08010290 <cleanup_stdio>:
 8010290:	6841      	ldr	r1, [r0, #4]
 8010292:	4b0c      	ldr	r3, [pc, #48]	; (80102c4 <cleanup_stdio+0x34>)
 8010294:	4299      	cmp	r1, r3
 8010296:	b510      	push	{r4, lr}
 8010298:	4604      	mov	r4, r0
 801029a:	d001      	beq.n	80102a0 <cleanup_stdio+0x10>
 801029c:	f001 fd06 	bl	8011cac <_fflush_r>
 80102a0:	68a1      	ldr	r1, [r4, #8]
 80102a2:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <cleanup_stdio+0x38>)
 80102a4:	4299      	cmp	r1, r3
 80102a6:	d002      	beq.n	80102ae <cleanup_stdio+0x1e>
 80102a8:	4620      	mov	r0, r4
 80102aa:	f001 fcff 	bl	8011cac <_fflush_r>
 80102ae:	68e1      	ldr	r1, [r4, #12]
 80102b0:	4b06      	ldr	r3, [pc, #24]	; (80102cc <cleanup_stdio+0x3c>)
 80102b2:	4299      	cmp	r1, r3
 80102b4:	d004      	beq.n	80102c0 <cleanup_stdio+0x30>
 80102b6:	4620      	mov	r0, r4
 80102b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102bc:	f001 bcf6 	b.w	8011cac <_fflush_r>
 80102c0:	bd10      	pop	{r4, pc}
 80102c2:	bf00      	nop
 80102c4:	240020e4 	.word	0x240020e4
 80102c8:	2400214c 	.word	0x2400214c
 80102cc:	240021b4 	.word	0x240021b4

080102d0 <global_stdio_init.part.0>:
 80102d0:	b510      	push	{r4, lr}
 80102d2:	4b0b      	ldr	r3, [pc, #44]	; (8010300 <global_stdio_init.part.0+0x30>)
 80102d4:	4c0b      	ldr	r4, [pc, #44]	; (8010304 <global_stdio_init.part.0+0x34>)
 80102d6:	4a0c      	ldr	r2, [pc, #48]	; (8010308 <global_stdio_init.part.0+0x38>)
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	4620      	mov	r0, r4
 80102dc:	2200      	movs	r2, #0
 80102de:	2104      	movs	r1, #4
 80102e0:	f7ff ff94 	bl	801020c <std>
 80102e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80102e8:	2201      	movs	r2, #1
 80102ea:	2109      	movs	r1, #9
 80102ec:	f7ff ff8e 	bl	801020c <std>
 80102f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80102f4:	2202      	movs	r2, #2
 80102f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102fa:	2112      	movs	r1, #18
 80102fc:	f7ff bf86 	b.w	801020c <std>
 8010300:	2400221c 	.word	0x2400221c
 8010304:	240020e4 	.word	0x240020e4
 8010308:	08010279 	.word	0x08010279

0801030c <__sfp_lock_acquire>:
 801030c:	4801      	ldr	r0, [pc, #4]	; (8010314 <__sfp_lock_acquire+0x8>)
 801030e:	f000 b930 	b.w	8010572 <__retarget_lock_acquire_recursive>
 8010312:	bf00      	nop
 8010314:	24002225 	.word	0x24002225

08010318 <__sfp_lock_release>:
 8010318:	4801      	ldr	r0, [pc, #4]	; (8010320 <__sfp_lock_release+0x8>)
 801031a:	f000 b92b 	b.w	8010574 <__retarget_lock_release_recursive>
 801031e:	bf00      	nop
 8010320:	24002225 	.word	0x24002225

08010324 <__sinit>:
 8010324:	b510      	push	{r4, lr}
 8010326:	4604      	mov	r4, r0
 8010328:	f7ff fff0 	bl	801030c <__sfp_lock_acquire>
 801032c:	6a23      	ldr	r3, [r4, #32]
 801032e:	b11b      	cbz	r3, 8010338 <__sinit+0x14>
 8010330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010334:	f7ff bff0 	b.w	8010318 <__sfp_lock_release>
 8010338:	4b04      	ldr	r3, [pc, #16]	; (801034c <__sinit+0x28>)
 801033a:	6223      	str	r3, [r4, #32]
 801033c:	4b04      	ldr	r3, [pc, #16]	; (8010350 <__sinit+0x2c>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1f5      	bne.n	8010330 <__sinit+0xc>
 8010344:	f7ff ffc4 	bl	80102d0 <global_stdio_init.part.0>
 8010348:	e7f2      	b.n	8010330 <__sinit+0xc>
 801034a:	bf00      	nop
 801034c:	08010291 	.word	0x08010291
 8010350:	2400221c 	.word	0x2400221c

08010354 <_fwalk_sglue>:
 8010354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010358:	4607      	mov	r7, r0
 801035a:	4688      	mov	r8, r1
 801035c:	4614      	mov	r4, r2
 801035e:	2600      	movs	r6, #0
 8010360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010364:	f1b9 0901 	subs.w	r9, r9, #1
 8010368:	d505      	bpl.n	8010376 <_fwalk_sglue+0x22>
 801036a:	6824      	ldr	r4, [r4, #0]
 801036c:	2c00      	cmp	r4, #0
 801036e:	d1f7      	bne.n	8010360 <_fwalk_sglue+0xc>
 8010370:	4630      	mov	r0, r6
 8010372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010376:	89ab      	ldrh	r3, [r5, #12]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d907      	bls.n	801038c <_fwalk_sglue+0x38>
 801037c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010380:	3301      	adds	r3, #1
 8010382:	d003      	beq.n	801038c <_fwalk_sglue+0x38>
 8010384:	4629      	mov	r1, r5
 8010386:	4638      	mov	r0, r7
 8010388:	47c0      	blx	r8
 801038a:	4306      	orrs	r6, r0
 801038c:	3568      	adds	r5, #104	; 0x68
 801038e:	e7e9      	b.n	8010364 <_fwalk_sglue+0x10>

08010390 <siprintf>:
 8010390:	b40e      	push	{r1, r2, r3}
 8010392:	b500      	push	{lr}
 8010394:	b09c      	sub	sp, #112	; 0x70
 8010396:	ab1d      	add	r3, sp, #116	; 0x74
 8010398:	9002      	str	r0, [sp, #8]
 801039a:	9006      	str	r0, [sp, #24]
 801039c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80103a0:	4809      	ldr	r0, [pc, #36]	; (80103c8 <siprintf+0x38>)
 80103a2:	9107      	str	r1, [sp, #28]
 80103a4:	9104      	str	r1, [sp, #16]
 80103a6:	4909      	ldr	r1, [pc, #36]	; (80103cc <siprintf+0x3c>)
 80103a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80103ac:	9105      	str	r1, [sp, #20]
 80103ae:	6800      	ldr	r0, [r0, #0]
 80103b0:	9301      	str	r3, [sp, #4]
 80103b2:	a902      	add	r1, sp, #8
 80103b4:	f001 faf6 	bl	80119a4 <_svfiprintf_r>
 80103b8:	9b02      	ldr	r3, [sp, #8]
 80103ba:	2200      	movs	r2, #0
 80103bc:	701a      	strb	r2, [r3, #0]
 80103be:	b01c      	add	sp, #112	; 0x70
 80103c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80103c4:	b003      	add	sp, #12
 80103c6:	4770      	bx	lr
 80103c8:	24000160 	.word	0x24000160
 80103cc:	ffff0208 	.word	0xffff0208

080103d0 <__sread>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	460c      	mov	r4, r1
 80103d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d8:	f000 f86c 	bl	80104b4 <_read_r>
 80103dc:	2800      	cmp	r0, #0
 80103de:	bfab      	itete	ge
 80103e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103e2:	89a3      	ldrhlt	r3, [r4, #12]
 80103e4:	181b      	addge	r3, r3, r0
 80103e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103ea:	bfac      	ite	ge
 80103ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80103ee:	81a3      	strhlt	r3, [r4, #12]
 80103f0:	bd10      	pop	{r4, pc}

080103f2 <__swrite>:
 80103f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f6:	461f      	mov	r7, r3
 80103f8:	898b      	ldrh	r3, [r1, #12]
 80103fa:	05db      	lsls	r3, r3, #23
 80103fc:	4605      	mov	r5, r0
 80103fe:	460c      	mov	r4, r1
 8010400:	4616      	mov	r6, r2
 8010402:	d505      	bpl.n	8010410 <__swrite+0x1e>
 8010404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010408:	2302      	movs	r3, #2
 801040a:	2200      	movs	r2, #0
 801040c:	f000 f840 	bl	8010490 <_lseek_r>
 8010410:	89a3      	ldrh	r3, [r4, #12]
 8010412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801041a:	81a3      	strh	r3, [r4, #12]
 801041c:	4632      	mov	r2, r6
 801041e:	463b      	mov	r3, r7
 8010420:	4628      	mov	r0, r5
 8010422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010426:	f000 b867 	b.w	80104f8 <_write_r>

0801042a <__sseek>:
 801042a:	b510      	push	{r4, lr}
 801042c:	460c      	mov	r4, r1
 801042e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010432:	f000 f82d 	bl	8010490 <_lseek_r>
 8010436:	1c43      	adds	r3, r0, #1
 8010438:	89a3      	ldrh	r3, [r4, #12]
 801043a:	bf15      	itete	ne
 801043c:	6560      	strne	r0, [r4, #84]	; 0x54
 801043e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010446:	81a3      	strheq	r3, [r4, #12]
 8010448:	bf18      	it	ne
 801044a:	81a3      	strhne	r3, [r4, #12]
 801044c:	bd10      	pop	{r4, pc}

0801044e <__sclose>:
 801044e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010452:	f000 b80d 	b.w	8010470 <_close_r>

08010456 <memset>:
 8010456:	4402      	add	r2, r0
 8010458:	4603      	mov	r3, r0
 801045a:	4293      	cmp	r3, r2
 801045c:	d100      	bne.n	8010460 <memset+0xa>
 801045e:	4770      	bx	lr
 8010460:	f803 1b01 	strb.w	r1, [r3], #1
 8010464:	e7f9      	b.n	801045a <memset+0x4>
	...

08010468 <_localeconv_r>:
 8010468:	4800      	ldr	r0, [pc, #0]	; (801046c <_localeconv_r+0x4>)
 801046a:	4770      	bx	lr
 801046c:	24000254 	.word	0x24000254

08010470 <_close_r>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	4d06      	ldr	r5, [pc, #24]	; (801048c <_close_r+0x1c>)
 8010474:	2300      	movs	r3, #0
 8010476:	4604      	mov	r4, r0
 8010478:	4608      	mov	r0, r1
 801047a:	602b      	str	r3, [r5, #0]
 801047c:	f7f0 fd8f 	bl	8000f9e <_close>
 8010480:	1c43      	adds	r3, r0, #1
 8010482:	d102      	bne.n	801048a <_close_r+0x1a>
 8010484:	682b      	ldr	r3, [r5, #0]
 8010486:	b103      	cbz	r3, 801048a <_close_r+0x1a>
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	bd38      	pop	{r3, r4, r5, pc}
 801048c:	24002220 	.word	0x24002220

08010490 <_lseek_r>:
 8010490:	b538      	push	{r3, r4, r5, lr}
 8010492:	4d07      	ldr	r5, [pc, #28]	; (80104b0 <_lseek_r+0x20>)
 8010494:	4604      	mov	r4, r0
 8010496:	4608      	mov	r0, r1
 8010498:	4611      	mov	r1, r2
 801049a:	2200      	movs	r2, #0
 801049c:	602a      	str	r2, [r5, #0]
 801049e:	461a      	mov	r2, r3
 80104a0:	f7f0 fda4 	bl	8000fec <_lseek>
 80104a4:	1c43      	adds	r3, r0, #1
 80104a6:	d102      	bne.n	80104ae <_lseek_r+0x1e>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	b103      	cbz	r3, 80104ae <_lseek_r+0x1e>
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	24002220 	.word	0x24002220

080104b4 <_read_r>:
 80104b4:	b538      	push	{r3, r4, r5, lr}
 80104b6:	4d07      	ldr	r5, [pc, #28]	; (80104d4 <_read_r+0x20>)
 80104b8:	4604      	mov	r4, r0
 80104ba:	4608      	mov	r0, r1
 80104bc:	4611      	mov	r1, r2
 80104be:	2200      	movs	r2, #0
 80104c0:	602a      	str	r2, [r5, #0]
 80104c2:	461a      	mov	r2, r3
 80104c4:	f7f0 fd32 	bl	8000f2c <_read>
 80104c8:	1c43      	adds	r3, r0, #1
 80104ca:	d102      	bne.n	80104d2 <_read_r+0x1e>
 80104cc:	682b      	ldr	r3, [r5, #0]
 80104ce:	b103      	cbz	r3, 80104d2 <_read_r+0x1e>
 80104d0:	6023      	str	r3, [r4, #0]
 80104d2:	bd38      	pop	{r3, r4, r5, pc}
 80104d4:	24002220 	.word	0x24002220

080104d8 <_sbrk_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d06      	ldr	r5, [pc, #24]	; (80104f4 <_sbrk_r+0x1c>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4604      	mov	r4, r0
 80104e0:	4608      	mov	r0, r1
 80104e2:	602b      	str	r3, [r5, #0]
 80104e4:	f7f0 fd90 	bl	8001008 <_sbrk>
 80104e8:	1c43      	adds	r3, r0, #1
 80104ea:	d102      	bne.n	80104f2 <_sbrk_r+0x1a>
 80104ec:	682b      	ldr	r3, [r5, #0]
 80104ee:	b103      	cbz	r3, 80104f2 <_sbrk_r+0x1a>
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	bd38      	pop	{r3, r4, r5, pc}
 80104f4:	24002220 	.word	0x24002220

080104f8 <_write_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d07      	ldr	r5, [pc, #28]	; (8010518 <_write_r+0x20>)
 80104fc:	4604      	mov	r4, r0
 80104fe:	4608      	mov	r0, r1
 8010500:	4611      	mov	r1, r2
 8010502:	2200      	movs	r2, #0
 8010504:	602a      	str	r2, [r5, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	f7f0 fd2d 	bl	8000f66 <_write>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_write_r+0x1e>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	b103      	cbz	r3, 8010516 <_write_r+0x1e>
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	24002220 	.word	0x24002220

0801051c <__errno>:
 801051c:	4b01      	ldr	r3, [pc, #4]	; (8010524 <__errno+0x8>)
 801051e:	6818      	ldr	r0, [r3, #0]
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	24000160 	.word	0x24000160

08010528 <__libc_init_array>:
 8010528:	b570      	push	{r4, r5, r6, lr}
 801052a:	4d0d      	ldr	r5, [pc, #52]	; (8010560 <__libc_init_array+0x38>)
 801052c:	4c0d      	ldr	r4, [pc, #52]	; (8010564 <__libc_init_array+0x3c>)
 801052e:	1b64      	subs	r4, r4, r5
 8010530:	10a4      	asrs	r4, r4, #2
 8010532:	2600      	movs	r6, #0
 8010534:	42a6      	cmp	r6, r4
 8010536:	d109      	bne.n	801054c <__libc_init_array+0x24>
 8010538:	4d0b      	ldr	r5, [pc, #44]	; (8010568 <__libc_init_array+0x40>)
 801053a:	4c0c      	ldr	r4, [pc, #48]	; (801056c <__libc_init_array+0x44>)
 801053c:	f002 f87e 	bl	801263c <_init>
 8010540:	1b64      	subs	r4, r4, r5
 8010542:	10a4      	asrs	r4, r4, #2
 8010544:	2600      	movs	r6, #0
 8010546:	42a6      	cmp	r6, r4
 8010548:	d105      	bne.n	8010556 <__libc_init_array+0x2e>
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010550:	4798      	blx	r3
 8010552:	3601      	adds	r6, #1
 8010554:	e7ee      	b.n	8010534 <__libc_init_array+0xc>
 8010556:	f855 3b04 	ldr.w	r3, [r5], #4
 801055a:	4798      	blx	r3
 801055c:	3601      	adds	r6, #1
 801055e:	e7f2      	b.n	8010546 <__libc_init_array+0x1e>
 8010560:	08013298 	.word	0x08013298
 8010564:	08013298 	.word	0x08013298
 8010568:	08013298 	.word	0x08013298
 801056c:	0801329c 	.word	0x0801329c

08010570 <__retarget_lock_init_recursive>:
 8010570:	4770      	bx	lr

08010572 <__retarget_lock_acquire_recursive>:
 8010572:	4770      	bx	lr

08010574 <__retarget_lock_release_recursive>:
 8010574:	4770      	bx	lr

08010576 <quorem>:
 8010576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057a:	6903      	ldr	r3, [r0, #16]
 801057c:	690c      	ldr	r4, [r1, #16]
 801057e:	42a3      	cmp	r3, r4
 8010580:	4607      	mov	r7, r0
 8010582:	db7e      	blt.n	8010682 <quorem+0x10c>
 8010584:	3c01      	subs	r4, #1
 8010586:	f101 0814 	add.w	r8, r1, #20
 801058a:	f100 0514 	add.w	r5, r0, #20
 801058e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010592:	9301      	str	r3, [sp, #4]
 8010594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801059c:	3301      	adds	r3, #1
 801059e:	429a      	cmp	r2, r3
 80105a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80105ac:	d331      	bcc.n	8010612 <quorem+0x9c>
 80105ae:	f04f 0e00 	mov.w	lr, #0
 80105b2:	4640      	mov	r0, r8
 80105b4:	46ac      	mov	ip, r5
 80105b6:	46f2      	mov	sl, lr
 80105b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80105bc:	b293      	uxth	r3, r2
 80105be:	fb06 e303 	mla	r3, r6, r3, lr
 80105c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105c6:	0c1a      	lsrs	r2, r3, #16
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	ebaa 0303 	sub.w	r3, sl, r3
 80105ce:	f8dc a000 	ldr.w	sl, [ip]
 80105d2:	fa13 f38a 	uxtah	r3, r3, sl
 80105d6:	fb06 220e 	mla	r2, r6, lr, r2
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	9b00      	ldr	r3, [sp, #0]
 80105de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105e2:	b292      	uxth	r2, r2
 80105e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80105e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80105f0:	4581      	cmp	r9, r0
 80105f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105f6:	f84c 3b04 	str.w	r3, [ip], #4
 80105fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80105fe:	d2db      	bcs.n	80105b8 <quorem+0x42>
 8010600:	f855 300b 	ldr.w	r3, [r5, fp]
 8010604:	b92b      	cbnz	r3, 8010612 <quorem+0x9c>
 8010606:	9b01      	ldr	r3, [sp, #4]
 8010608:	3b04      	subs	r3, #4
 801060a:	429d      	cmp	r5, r3
 801060c:	461a      	mov	r2, r3
 801060e:	d32c      	bcc.n	801066a <quorem+0xf4>
 8010610:	613c      	str	r4, [r7, #16]
 8010612:	4638      	mov	r0, r7
 8010614:	f001 f86c 	bl	80116f0 <__mcmp>
 8010618:	2800      	cmp	r0, #0
 801061a:	db22      	blt.n	8010662 <quorem+0xec>
 801061c:	3601      	adds	r6, #1
 801061e:	4629      	mov	r1, r5
 8010620:	2000      	movs	r0, #0
 8010622:	f858 2b04 	ldr.w	r2, [r8], #4
 8010626:	f8d1 c000 	ldr.w	ip, [r1]
 801062a:	b293      	uxth	r3, r2
 801062c:	1ac3      	subs	r3, r0, r3
 801062e:	0c12      	lsrs	r2, r2, #16
 8010630:	fa13 f38c 	uxtah	r3, r3, ip
 8010634:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801063c:	b29b      	uxth	r3, r3
 801063e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010642:	45c1      	cmp	r9, r8
 8010644:	f841 3b04 	str.w	r3, [r1], #4
 8010648:	ea4f 4022 	mov.w	r0, r2, asr #16
 801064c:	d2e9      	bcs.n	8010622 <quorem+0xac>
 801064e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010656:	b922      	cbnz	r2, 8010662 <quorem+0xec>
 8010658:	3b04      	subs	r3, #4
 801065a:	429d      	cmp	r5, r3
 801065c:	461a      	mov	r2, r3
 801065e:	d30a      	bcc.n	8010676 <quorem+0x100>
 8010660:	613c      	str	r4, [r7, #16]
 8010662:	4630      	mov	r0, r6
 8010664:	b003      	add	sp, #12
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066a:	6812      	ldr	r2, [r2, #0]
 801066c:	3b04      	subs	r3, #4
 801066e:	2a00      	cmp	r2, #0
 8010670:	d1ce      	bne.n	8010610 <quorem+0x9a>
 8010672:	3c01      	subs	r4, #1
 8010674:	e7c9      	b.n	801060a <quorem+0x94>
 8010676:	6812      	ldr	r2, [r2, #0]
 8010678:	3b04      	subs	r3, #4
 801067a:	2a00      	cmp	r2, #0
 801067c:	d1f0      	bne.n	8010660 <quorem+0xea>
 801067e:	3c01      	subs	r4, #1
 8010680:	e7eb      	b.n	801065a <quorem+0xe4>
 8010682:	2000      	movs	r0, #0
 8010684:	e7ee      	b.n	8010664 <quorem+0xee>
	...

08010688 <_dtoa_r>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	ed2d 8b02 	vpush	{d8}
 8010690:	69c5      	ldr	r5, [r0, #28]
 8010692:	b091      	sub	sp, #68	; 0x44
 8010694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010698:	ec59 8b10 	vmov	r8, r9, d0
 801069c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801069e:	9106      	str	r1, [sp, #24]
 80106a0:	4606      	mov	r6, r0
 80106a2:	9208      	str	r2, [sp, #32]
 80106a4:	930c      	str	r3, [sp, #48]	; 0x30
 80106a6:	b975      	cbnz	r5, 80106c6 <_dtoa_r+0x3e>
 80106a8:	2010      	movs	r0, #16
 80106aa:	f7ff f8bf 	bl	800f82c <malloc>
 80106ae:	4602      	mov	r2, r0
 80106b0:	61f0      	str	r0, [r6, #28]
 80106b2:	b920      	cbnz	r0, 80106be <_dtoa_r+0x36>
 80106b4:	4ba6      	ldr	r3, [pc, #664]	; (8010950 <_dtoa_r+0x2c8>)
 80106b6:	21ef      	movs	r1, #239	; 0xef
 80106b8:	48a6      	ldr	r0, [pc, #664]	; (8010954 <_dtoa_r+0x2cc>)
 80106ba:	f001 fb47 	bl	8011d4c <__assert_func>
 80106be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106c2:	6005      	str	r5, [r0, #0]
 80106c4:	60c5      	str	r5, [r0, #12]
 80106c6:	69f3      	ldr	r3, [r6, #28]
 80106c8:	6819      	ldr	r1, [r3, #0]
 80106ca:	b151      	cbz	r1, 80106e2 <_dtoa_r+0x5a>
 80106cc:	685a      	ldr	r2, [r3, #4]
 80106ce:	604a      	str	r2, [r1, #4]
 80106d0:	2301      	movs	r3, #1
 80106d2:	4093      	lsls	r3, r2
 80106d4:	608b      	str	r3, [r1, #8]
 80106d6:	4630      	mov	r0, r6
 80106d8:	f000 fdce 	bl	8011278 <_Bfree>
 80106dc:	69f3      	ldr	r3, [r6, #28]
 80106de:	2200      	movs	r2, #0
 80106e0:	601a      	str	r2, [r3, #0]
 80106e2:	f1b9 0300 	subs.w	r3, r9, #0
 80106e6:	bfbb      	ittet	lt
 80106e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80106ec:	9303      	strlt	r3, [sp, #12]
 80106ee:	2300      	movge	r3, #0
 80106f0:	2201      	movlt	r2, #1
 80106f2:	bfac      	ite	ge
 80106f4:	6023      	strge	r3, [r4, #0]
 80106f6:	6022      	strlt	r2, [r4, #0]
 80106f8:	4b97      	ldr	r3, [pc, #604]	; (8010958 <_dtoa_r+0x2d0>)
 80106fa:	9c03      	ldr	r4, [sp, #12]
 80106fc:	43a3      	bics	r3, r4
 80106fe:	d11c      	bne.n	801073a <_dtoa_r+0xb2>
 8010700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010702:	f242 730f 	movw	r3, #9999	; 0x270f
 8010706:	6013      	str	r3, [r2, #0]
 8010708:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801070c:	ea53 0308 	orrs.w	r3, r3, r8
 8010710:	f000 84fb 	beq.w	801110a <_dtoa_r+0xa82>
 8010714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010716:	b963      	cbnz	r3, 8010732 <_dtoa_r+0xaa>
 8010718:	4b90      	ldr	r3, [pc, #576]	; (801095c <_dtoa_r+0x2d4>)
 801071a:	e020      	b.n	801075e <_dtoa_r+0xd6>
 801071c:	4b90      	ldr	r3, [pc, #576]	; (8010960 <_dtoa_r+0x2d8>)
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	3308      	adds	r3, #8
 8010722:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010724:	6013      	str	r3, [r2, #0]
 8010726:	9801      	ldr	r0, [sp, #4]
 8010728:	b011      	add	sp, #68	; 0x44
 801072a:	ecbd 8b02 	vpop	{d8}
 801072e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010732:	4b8a      	ldr	r3, [pc, #552]	; (801095c <_dtoa_r+0x2d4>)
 8010734:	9301      	str	r3, [sp, #4]
 8010736:	3303      	adds	r3, #3
 8010738:	e7f3      	b.n	8010722 <_dtoa_r+0x9a>
 801073a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801073e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010746:	d10c      	bne.n	8010762 <_dtoa_r+0xda>
 8010748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801074a:	2301      	movs	r3, #1
 801074c:	6013      	str	r3, [r2, #0]
 801074e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010750:	2b00      	cmp	r3, #0
 8010752:	f000 84d7 	beq.w	8011104 <_dtoa_r+0xa7c>
 8010756:	4b83      	ldr	r3, [pc, #524]	; (8010964 <_dtoa_r+0x2dc>)
 8010758:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801075a:	6013      	str	r3, [r2, #0]
 801075c:	3b01      	subs	r3, #1
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	e7e1      	b.n	8010726 <_dtoa_r+0x9e>
 8010762:	aa0e      	add	r2, sp, #56	; 0x38
 8010764:	a90f      	add	r1, sp, #60	; 0x3c
 8010766:	4630      	mov	r0, r6
 8010768:	eeb0 0b48 	vmov.f64	d0, d8
 801076c:	f001 f866 	bl	801183c <__d2b>
 8010770:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010776:	4605      	mov	r5, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d046      	beq.n	801080a <_dtoa_r+0x182>
 801077c:	eeb0 7b48 	vmov.f64	d7, d8
 8010780:	ee18 1a90 	vmov	r1, s17
 8010784:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010788:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801078c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010794:	2000      	movs	r0, #0
 8010796:	ee07 1a90 	vmov	s15, r1
 801079a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801079e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010938 <_dtoa_r+0x2b0>
 80107a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107a6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010940 <_dtoa_r+0x2b8>
 80107aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80107ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010948 <_dtoa_r+0x2c0>
 80107b2:	ee07 3a90 	vmov	s15, r3
 80107b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80107ba:	eeb0 7b46 	vmov.f64	d7, d6
 80107be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80107c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80107c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80107ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ce:	ee16 ba90 	vmov	fp, s13
 80107d2:	9009      	str	r0, [sp, #36]	; 0x24
 80107d4:	d508      	bpl.n	80107e8 <_dtoa_r+0x160>
 80107d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80107da:	eeb4 6b47 	vcmp.f64	d6, d7
 80107de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e2:	bf18      	it	ne
 80107e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80107e8:	f1bb 0f16 	cmp.w	fp, #22
 80107ec:	d82b      	bhi.n	8010846 <_dtoa_r+0x1be>
 80107ee:	495e      	ldr	r1, [pc, #376]	; (8010968 <_dtoa_r+0x2e0>)
 80107f0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80107f4:	ed91 7b00 	vldr	d7, [r1]
 80107f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80107fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010800:	d501      	bpl.n	8010806 <_dtoa_r+0x17e>
 8010802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010806:	2100      	movs	r1, #0
 8010808:	e01e      	b.n	8010848 <_dtoa_r+0x1c0>
 801080a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801080c:	4413      	add	r3, r2
 801080e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8010812:	2920      	cmp	r1, #32
 8010814:	bfc1      	itttt	gt
 8010816:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801081a:	408c      	lslgt	r4, r1
 801081c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8010820:	fa28 f101 	lsrgt.w	r1, r8, r1
 8010824:	bfd6      	itet	le
 8010826:	f1c1 0120 	rsble	r1, r1, #32
 801082a:	4321      	orrgt	r1, r4
 801082c:	fa08 f101 	lslle.w	r1, r8, r1
 8010830:	ee07 1a90 	vmov	s15, r1
 8010834:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010838:	3b01      	subs	r3, #1
 801083a:	ee17 1a90 	vmov	r1, s15
 801083e:	2001      	movs	r0, #1
 8010840:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010844:	e7a7      	b.n	8010796 <_dtoa_r+0x10e>
 8010846:	2101      	movs	r1, #1
 8010848:	1ad2      	subs	r2, r2, r3
 801084a:	1e53      	subs	r3, r2, #1
 801084c:	9305      	str	r3, [sp, #20]
 801084e:	bf45      	ittet	mi
 8010850:	f1c2 0301 	rsbmi	r3, r2, #1
 8010854:	9304      	strmi	r3, [sp, #16]
 8010856:	2300      	movpl	r3, #0
 8010858:	2300      	movmi	r3, #0
 801085a:	bf4c      	ite	mi
 801085c:	9305      	strmi	r3, [sp, #20]
 801085e:	9304      	strpl	r3, [sp, #16]
 8010860:	f1bb 0f00 	cmp.w	fp, #0
 8010864:	910b      	str	r1, [sp, #44]	; 0x2c
 8010866:	db18      	blt.n	801089a <_dtoa_r+0x212>
 8010868:	9b05      	ldr	r3, [sp, #20]
 801086a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801086e:	445b      	add	r3, fp
 8010870:	9305      	str	r3, [sp, #20]
 8010872:	2300      	movs	r3, #0
 8010874:	9a06      	ldr	r2, [sp, #24]
 8010876:	2a09      	cmp	r2, #9
 8010878:	d848      	bhi.n	801090c <_dtoa_r+0x284>
 801087a:	2a05      	cmp	r2, #5
 801087c:	bfc4      	itt	gt
 801087e:	3a04      	subgt	r2, #4
 8010880:	9206      	strgt	r2, [sp, #24]
 8010882:	9a06      	ldr	r2, [sp, #24]
 8010884:	f1a2 0202 	sub.w	r2, r2, #2
 8010888:	bfcc      	ite	gt
 801088a:	2400      	movgt	r4, #0
 801088c:	2401      	movle	r4, #1
 801088e:	2a03      	cmp	r2, #3
 8010890:	d847      	bhi.n	8010922 <_dtoa_r+0x29a>
 8010892:	e8df f002 	tbb	[pc, r2]
 8010896:	2d0b      	.short	0x2d0b
 8010898:	392b      	.short	0x392b
 801089a:	9b04      	ldr	r3, [sp, #16]
 801089c:	2200      	movs	r2, #0
 801089e:	eba3 030b 	sub.w	r3, r3, fp
 80108a2:	9304      	str	r3, [sp, #16]
 80108a4:	920a      	str	r2, [sp, #40]	; 0x28
 80108a6:	f1cb 0300 	rsb	r3, fp, #0
 80108aa:	e7e3      	b.n	8010874 <_dtoa_r+0x1ec>
 80108ac:	2200      	movs	r2, #0
 80108ae:	9207      	str	r2, [sp, #28]
 80108b0:	9a08      	ldr	r2, [sp, #32]
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	dc38      	bgt.n	8010928 <_dtoa_r+0x2a0>
 80108b6:	f04f 0a01 	mov.w	sl, #1
 80108ba:	46d1      	mov	r9, sl
 80108bc:	4652      	mov	r2, sl
 80108be:	f8cd a020 	str.w	sl, [sp, #32]
 80108c2:	69f7      	ldr	r7, [r6, #28]
 80108c4:	2100      	movs	r1, #0
 80108c6:	2004      	movs	r0, #4
 80108c8:	f100 0c14 	add.w	ip, r0, #20
 80108cc:	4594      	cmp	ip, r2
 80108ce:	d930      	bls.n	8010932 <_dtoa_r+0x2aa>
 80108d0:	6079      	str	r1, [r7, #4]
 80108d2:	4630      	mov	r0, r6
 80108d4:	930d      	str	r3, [sp, #52]	; 0x34
 80108d6:	f000 fc8f 	bl	80111f8 <_Balloc>
 80108da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108dc:	9001      	str	r0, [sp, #4]
 80108de:	4602      	mov	r2, r0
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d145      	bne.n	8010970 <_dtoa_r+0x2e8>
 80108e4:	4b21      	ldr	r3, [pc, #132]	; (801096c <_dtoa_r+0x2e4>)
 80108e6:	f240 11af 	movw	r1, #431	; 0x1af
 80108ea:	e6e5      	b.n	80106b8 <_dtoa_r+0x30>
 80108ec:	2201      	movs	r2, #1
 80108ee:	e7de      	b.n	80108ae <_dtoa_r+0x226>
 80108f0:	2200      	movs	r2, #0
 80108f2:	9207      	str	r2, [sp, #28]
 80108f4:	9a08      	ldr	r2, [sp, #32]
 80108f6:	eb0b 0a02 	add.w	sl, fp, r2
 80108fa:	f10a 0901 	add.w	r9, sl, #1
 80108fe:	464a      	mov	r2, r9
 8010900:	2a01      	cmp	r2, #1
 8010902:	bfb8      	it	lt
 8010904:	2201      	movlt	r2, #1
 8010906:	e7dc      	b.n	80108c2 <_dtoa_r+0x23a>
 8010908:	2201      	movs	r2, #1
 801090a:	e7f2      	b.n	80108f2 <_dtoa_r+0x26a>
 801090c:	2401      	movs	r4, #1
 801090e:	2200      	movs	r2, #0
 8010910:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010914:	f04f 3aff 	mov.w	sl, #4294967295
 8010918:	2100      	movs	r1, #0
 801091a:	46d1      	mov	r9, sl
 801091c:	2212      	movs	r2, #18
 801091e:	9108      	str	r1, [sp, #32]
 8010920:	e7cf      	b.n	80108c2 <_dtoa_r+0x23a>
 8010922:	2201      	movs	r2, #1
 8010924:	9207      	str	r2, [sp, #28]
 8010926:	e7f5      	b.n	8010914 <_dtoa_r+0x28c>
 8010928:	f8dd a020 	ldr.w	sl, [sp, #32]
 801092c:	46d1      	mov	r9, sl
 801092e:	4652      	mov	r2, sl
 8010930:	e7c7      	b.n	80108c2 <_dtoa_r+0x23a>
 8010932:	3101      	adds	r1, #1
 8010934:	0040      	lsls	r0, r0, #1
 8010936:	e7c7      	b.n	80108c8 <_dtoa_r+0x240>
 8010938:	636f4361 	.word	0x636f4361
 801093c:	3fd287a7 	.word	0x3fd287a7
 8010940:	8b60c8b3 	.word	0x8b60c8b3
 8010944:	3fc68a28 	.word	0x3fc68a28
 8010948:	509f79fb 	.word	0x509f79fb
 801094c:	3fd34413 	.word	0x3fd34413
 8010950:	08012f51 	.word	0x08012f51
 8010954:	08012f68 	.word	0x08012f68
 8010958:	7ff00000 	.word	0x7ff00000
 801095c:	08012f4d 	.word	0x08012f4d
 8010960:	08012f44 	.word	0x08012f44
 8010964:	08012f21 	.word	0x08012f21
 8010968:	08013058 	.word	0x08013058
 801096c:	08012fc0 	.word	0x08012fc0
 8010970:	69f2      	ldr	r2, [r6, #28]
 8010972:	9901      	ldr	r1, [sp, #4]
 8010974:	6011      	str	r1, [r2, #0]
 8010976:	f1b9 0f0e 	cmp.w	r9, #14
 801097a:	d86c      	bhi.n	8010a56 <_dtoa_r+0x3ce>
 801097c:	2c00      	cmp	r4, #0
 801097e:	d06a      	beq.n	8010a56 <_dtoa_r+0x3ce>
 8010980:	f1bb 0f00 	cmp.w	fp, #0
 8010984:	f340 80a0 	ble.w	8010ac8 <_dtoa_r+0x440>
 8010988:	4ac1      	ldr	r2, [pc, #772]	; (8010c90 <_dtoa_r+0x608>)
 801098a:	f00b 010f 	and.w	r1, fp, #15
 801098e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010992:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010996:	ed92 7b00 	vldr	d7, [r2]
 801099a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801099e:	f000 8087 	beq.w	8010ab0 <_dtoa_r+0x428>
 80109a2:	49bc      	ldr	r1, [pc, #752]	; (8010c94 <_dtoa_r+0x60c>)
 80109a4:	ed91 6b08 	vldr	d6, [r1, #32]
 80109a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80109ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80109b0:	f002 020f 	and.w	r2, r2, #15
 80109b4:	2103      	movs	r1, #3
 80109b6:	48b7      	ldr	r0, [pc, #732]	; (8010c94 <_dtoa_r+0x60c>)
 80109b8:	2a00      	cmp	r2, #0
 80109ba:	d17b      	bne.n	8010ab4 <_dtoa_r+0x42c>
 80109bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80109c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80109c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80109ce:	2a00      	cmp	r2, #0
 80109d0:	f000 80a0 	beq.w	8010b14 <_dtoa_r+0x48c>
 80109d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80109d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80109dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e0:	f140 8098 	bpl.w	8010b14 <_dtoa_r+0x48c>
 80109e4:	f1b9 0f00 	cmp.w	r9, #0
 80109e8:	f000 8094 	beq.w	8010b14 <_dtoa_r+0x48c>
 80109ec:	f1ba 0f00 	cmp.w	sl, #0
 80109f0:	dd2f      	ble.n	8010a52 <_dtoa_r+0x3ca>
 80109f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80109f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80109fe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010a02:	3101      	adds	r1, #1
 8010a04:	4654      	mov	r4, sl
 8010a06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010a0a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010a0e:	ee07 1a90 	vmov	s15, r1
 8010a12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a16:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010a1a:	ee15 7a90 	vmov	r7, s11
 8010a1e:	ec51 0b15 	vmov	r0, r1, d5
 8010a22:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8010a26:	2c00      	cmp	r4, #0
 8010a28:	d177      	bne.n	8010b1a <_dtoa_r+0x492>
 8010a2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010a2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010a32:	ec41 0b17 	vmov	d7, r0, r1
 8010a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3e:	f300 826a 	bgt.w	8010f16 <_dtoa_r+0x88e>
 8010a42:	eeb1 7b47 	vneg.f64	d7, d7
 8010a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4e:	f100 8260 	bmi.w	8010f12 <_dtoa_r+0x88a>
 8010a52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a58:	2a00      	cmp	r2, #0
 8010a5a:	f2c0 811d 	blt.w	8010c98 <_dtoa_r+0x610>
 8010a5e:	f1bb 0f0e 	cmp.w	fp, #14
 8010a62:	f300 8119 	bgt.w	8010c98 <_dtoa_r+0x610>
 8010a66:	4b8a      	ldr	r3, [pc, #552]	; (8010c90 <_dtoa_r+0x608>)
 8010a68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a6c:	ed93 6b00 	vldr	d6, [r3]
 8010a70:	9b08      	ldr	r3, [sp, #32]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f280 80b7 	bge.w	8010be6 <_dtoa_r+0x55e>
 8010a78:	f1b9 0f00 	cmp.w	r9, #0
 8010a7c:	f300 80b3 	bgt.w	8010be6 <_dtoa_r+0x55e>
 8010a80:	f040 8246 	bne.w	8010f10 <_dtoa_r+0x888>
 8010a84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010a88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010a8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a98:	464c      	mov	r4, r9
 8010a9a:	464f      	mov	r7, r9
 8010a9c:	f280 821c 	bge.w	8010ed8 <_dtoa_r+0x850>
 8010aa0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010aa4:	2331      	movs	r3, #49	; 0x31
 8010aa6:	f808 3b01 	strb.w	r3, [r8], #1
 8010aaa:	f10b 0b01 	add.w	fp, fp, #1
 8010aae:	e218      	b.n	8010ee2 <_dtoa_r+0x85a>
 8010ab0:	2102      	movs	r1, #2
 8010ab2:	e780      	b.n	80109b6 <_dtoa_r+0x32e>
 8010ab4:	07d4      	lsls	r4, r2, #31
 8010ab6:	d504      	bpl.n	8010ac2 <_dtoa_r+0x43a>
 8010ab8:	ed90 6b00 	vldr	d6, [r0]
 8010abc:	3101      	adds	r1, #1
 8010abe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ac2:	1052      	asrs	r2, r2, #1
 8010ac4:	3008      	adds	r0, #8
 8010ac6:	e777      	b.n	80109b8 <_dtoa_r+0x330>
 8010ac8:	d022      	beq.n	8010b10 <_dtoa_r+0x488>
 8010aca:	f1cb 0200 	rsb	r2, fp, #0
 8010ace:	4970      	ldr	r1, [pc, #448]	; (8010c90 <_dtoa_r+0x608>)
 8010ad0:	f002 000f 	and.w	r0, r2, #15
 8010ad4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010ad8:	ed91 7b00 	vldr	d7, [r1]
 8010adc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ae4:	486b      	ldr	r0, [pc, #428]	; (8010c94 <_dtoa_r+0x60c>)
 8010ae6:	1112      	asrs	r2, r2, #4
 8010ae8:	2400      	movs	r4, #0
 8010aea:	2102      	movs	r1, #2
 8010aec:	b92a      	cbnz	r2, 8010afa <_dtoa_r+0x472>
 8010aee:	2c00      	cmp	r4, #0
 8010af0:	f43f af6a 	beq.w	80109c8 <_dtoa_r+0x340>
 8010af4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010af8:	e766      	b.n	80109c8 <_dtoa_r+0x340>
 8010afa:	07d7      	lsls	r7, r2, #31
 8010afc:	d505      	bpl.n	8010b0a <_dtoa_r+0x482>
 8010afe:	ed90 6b00 	vldr	d6, [r0]
 8010b02:	3101      	adds	r1, #1
 8010b04:	2401      	movs	r4, #1
 8010b06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b0a:	1052      	asrs	r2, r2, #1
 8010b0c:	3008      	adds	r0, #8
 8010b0e:	e7ed      	b.n	8010aec <_dtoa_r+0x464>
 8010b10:	2102      	movs	r1, #2
 8010b12:	e759      	b.n	80109c8 <_dtoa_r+0x340>
 8010b14:	465a      	mov	r2, fp
 8010b16:	464c      	mov	r4, r9
 8010b18:	e775      	b.n	8010a06 <_dtoa_r+0x37e>
 8010b1a:	ec41 0b17 	vmov	d7, r0, r1
 8010b1e:	495c      	ldr	r1, [pc, #368]	; (8010c90 <_dtoa_r+0x608>)
 8010b20:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010b24:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010b28:	9901      	ldr	r1, [sp, #4]
 8010b2a:	440c      	add	r4, r1
 8010b2c:	9907      	ldr	r1, [sp, #28]
 8010b2e:	b351      	cbz	r1, 8010b86 <_dtoa_r+0x4fe>
 8010b30:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010b34:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010b38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010b3c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010b40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010b44:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010b48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010b4c:	ee14 1a90 	vmov	r1, s9
 8010b50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010b54:	3130      	adds	r1, #48	; 0x30
 8010b56:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010b5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b62:	f808 1b01 	strb.w	r1, [r8], #1
 8010b66:	d439      	bmi.n	8010bdc <_dtoa_r+0x554>
 8010b68:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010b6c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b74:	d472      	bmi.n	8010c5c <_dtoa_r+0x5d4>
 8010b76:	45a0      	cmp	r8, r4
 8010b78:	f43f af6b 	beq.w	8010a52 <_dtoa_r+0x3ca>
 8010b7c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010b80:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010b84:	e7e0      	b.n	8010b48 <_dtoa_r+0x4c0>
 8010b86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010b8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010b8e:	4620      	mov	r0, r4
 8010b90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010b94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010b98:	ee14 1a90 	vmov	r1, s9
 8010b9c:	3130      	adds	r1, #48	; 0x30
 8010b9e:	f808 1b01 	strb.w	r1, [r8], #1
 8010ba2:	45a0      	cmp	r8, r4
 8010ba4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010ba8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010bac:	d118      	bne.n	8010be0 <_dtoa_r+0x558>
 8010bae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010bb2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010bb6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbe:	dc4d      	bgt.n	8010c5c <_dtoa_r+0x5d4>
 8010bc0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010bc4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bcc:	f57f af41 	bpl.w	8010a52 <_dtoa_r+0x3ca>
 8010bd0:	4680      	mov	r8, r0
 8010bd2:	3801      	subs	r0, #1
 8010bd4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010bd8:	2b30      	cmp	r3, #48	; 0x30
 8010bda:	d0f9      	beq.n	8010bd0 <_dtoa_r+0x548>
 8010bdc:	4693      	mov	fp, r2
 8010bde:	e02a      	b.n	8010c36 <_dtoa_r+0x5ae>
 8010be0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010be4:	e7d6      	b.n	8010b94 <_dtoa_r+0x50c>
 8010be6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010bee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010bf2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010bf6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010bfa:	ee15 3a10 	vmov	r3, s10
 8010bfe:	3330      	adds	r3, #48	; 0x30
 8010c00:	f808 3b01 	strb.w	r3, [r8], #1
 8010c04:	9b01      	ldr	r3, [sp, #4]
 8010c06:	eba8 0303 	sub.w	r3, r8, r3
 8010c0a:	4599      	cmp	r9, r3
 8010c0c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010c10:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010c14:	d133      	bne.n	8010c7e <_dtoa_r+0x5f6>
 8010c16:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010c1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c22:	dc1a      	bgt.n	8010c5a <_dtoa_r+0x5d2>
 8010c24:	eeb4 7b46 	vcmp.f64	d7, d6
 8010c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2c:	d103      	bne.n	8010c36 <_dtoa_r+0x5ae>
 8010c2e:	ee15 3a10 	vmov	r3, s10
 8010c32:	07d9      	lsls	r1, r3, #31
 8010c34:	d411      	bmi.n	8010c5a <_dtoa_r+0x5d2>
 8010c36:	4629      	mov	r1, r5
 8010c38:	4630      	mov	r0, r6
 8010c3a:	f000 fb1d 	bl	8011278 <_Bfree>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c42:	f888 3000 	strb.w	r3, [r8]
 8010c46:	f10b 0301 	add.w	r3, fp, #1
 8010c4a:	6013      	str	r3, [r2, #0]
 8010c4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f43f ad69 	beq.w	8010726 <_dtoa_r+0x9e>
 8010c54:	f8c3 8000 	str.w	r8, [r3]
 8010c58:	e565      	b.n	8010726 <_dtoa_r+0x9e>
 8010c5a:	465a      	mov	r2, fp
 8010c5c:	4643      	mov	r3, r8
 8010c5e:	4698      	mov	r8, r3
 8010c60:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8010c64:	2939      	cmp	r1, #57	; 0x39
 8010c66:	d106      	bne.n	8010c76 <_dtoa_r+0x5ee>
 8010c68:	9901      	ldr	r1, [sp, #4]
 8010c6a:	4299      	cmp	r1, r3
 8010c6c:	d1f7      	bne.n	8010c5e <_dtoa_r+0x5d6>
 8010c6e:	9801      	ldr	r0, [sp, #4]
 8010c70:	2130      	movs	r1, #48	; 0x30
 8010c72:	3201      	adds	r2, #1
 8010c74:	7001      	strb	r1, [r0, #0]
 8010c76:	7819      	ldrb	r1, [r3, #0]
 8010c78:	3101      	adds	r1, #1
 8010c7a:	7019      	strb	r1, [r3, #0]
 8010c7c:	e7ae      	b.n	8010bdc <_dtoa_r+0x554>
 8010c7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8a:	d1b2      	bne.n	8010bf2 <_dtoa_r+0x56a>
 8010c8c:	e7d3      	b.n	8010c36 <_dtoa_r+0x5ae>
 8010c8e:	bf00      	nop
 8010c90:	08013058 	.word	0x08013058
 8010c94:	08013030 	.word	0x08013030
 8010c98:	9907      	ldr	r1, [sp, #28]
 8010c9a:	2900      	cmp	r1, #0
 8010c9c:	f000 80d0 	beq.w	8010e40 <_dtoa_r+0x7b8>
 8010ca0:	9906      	ldr	r1, [sp, #24]
 8010ca2:	2901      	cmp	r1, #1
 8010ca4:	f300 80b4 	bgt.w	8010e10 <_dtoa_r+0x788>
 8010ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010caa:	2900      	cmp	r1, #0
 8010cac:	f000 80ac 	beq.w	8010e08 <_dtoa_r+0x780>
 8010cb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010cb4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010cb8:	461c      	mov	r4, r3
 8010cba:	9309      	str	r3, [sp, #36]	; 0x24
 8010cbc:	9b04      	ldr	r3, [sp, #16]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	9304      	str	r3, [sp, #16]
 8010cc2:	9b05      	ldr	r3, [sp, #20]
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	4413      	add	r3, r2
 8010cc8:	4630      	mov	r0, r6
 8010cca:	9305      	str	r3, [sp, #20]
 8010ccc:	f000 fb8a 	bl	80113e4 <__i2b>
 8010cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd2:	4607      	mov	r7, r0
 8010cd4:	f1b8 0f00 	cmp.w	r8, #0
 8010cd8:	d00d      	beq.n	8010cf6 <_dtoa_r+0x66e>
 8010cda:	9a05      	ldr	r2, [sp, #20]
 8010cdc:	2a00      	cmp	r2, #0
 8010cde:	dd0a      	ble.n	8010cf6 <_dtoa_r+0x66e>
 8010ce0:	4542      	cmp	r2, r8
 8010ce2:	9904      	ldr	r1, [sp, #16]
 8010ce4:	bfa8      	it	ge
 8010ce6:	4642      	movge	r2, r8
 8010ce8:	1a89      	subs	r1, r1, r2
 8010cea:	9104      	str	r1, [sp, #16]
 8010cec:	9905      	ldr	r1, [sp, #20]
 8010cee:	eba8 0802 	sub.w	r8, r8, r2
 8010cf2:	1a8a      	subs	r2, r1, r2
 8010cf4:	9205      	str	r2, [sp, #20]
 8010cf6:	b303      	cbz	r3, 8010d3a <_dtoa_r+0x6b2>
 8010cf8:	9a07      	ldr	r2, [sp, #28]
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	f000 80a5 	beq.w	8010e4a <_dtoa_r+0x7c2>
 8010d00:	2c00      	cmp	r4, #0
 8010d02:	dd13      	ble.n	8010d2c <_dtoa_r+0x6a4>
 8010d04:	4639      	mov	r1, r7
 8010d06:	4622      	mov	r2, r4
 8010d08:	4630      	mov	r0, r6
 8010d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8010d0c:	f000 fc2a 	bl	8011564 <__pow5mult>
 8010d10:	462a      	mov	r2, r5
 8010d12:	4601      	mov	r1, r0
 8010d14:	4607      	mov	r7, r0
 8010d16:	4630      	mov	r0, r6
 8010d18:	f000 fb7a 	bl	8011410 <__multiply>
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	9009      	str	r0, [sp, #36]	; 0x24
 8010d20:	4630      	mov	r0, r6
 8010d22:	f000 faa9 	bl	8011278 <_Bfree>
 8010d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d2a:	4615      	mov	r5, r2
 8010d2c:	1b1a      	subs	r2, r3, r4
 8010d2e:	d004      	beq.n	8010d3a <_dtoa_r+0x6b2>
 8010d30:	4629      	mov	r1, r5
 8010d32:	4630      	mov	r0, r6
 8010d34:	f000 fc16 	bl	8011564 <__pow5mult>
 8010d38:	4605      	mov	r5, r0
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f000 fb51 	bl	80113e4 <__i2b>
 8010d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	4604      	mov	r4, r0
 8010d48:	f340 8081 	ble.w	8010e4e <_dtoa_r+0x7c6>
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	4601      	mov	r1, r0
 8010d50:	4630      	mov	r0, r6
 8010d52:	f000 fc07 	bl	8011564 <__pow5mult>
 8010d56:	9b06      	ldr	r3, [sp, #24]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	dd7a      	ble.n	8010e54 <_dtoa_r+0x7cc>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	9309      	str	r3, [sp, #36]	; 0x24
 8010d62:	6922      	ldr	r2, [r4, #16]
 8010d64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010d68:	6910      	ldr	r0, [r2, #16]
 8010d6a:	f000 faed 	bl	8011348 <__hi0bits>
 8010d6e:	f1c0 0020 	rsb	r0, r0, #32
 8010d72:	9b05      	ldr	r3, [sp, #20]
 8010d74:	4418      	add	r0, r3
 8010d76:	f010 001f 	ands.w	r0, r0, #31
 8010d7a:	f000 8093 	beq.w	8010ea4 <_dtoa_r+0x81c>
 8010d7e:	f1c0 0220 	rsb	r2, r0, #32
 8010d82:	2a04      	cmp	r2, #4
 8010d84:	f340 8085 	ble.w	8010e92 <_dtoa_r+0x80a>
 8010d88:	9b04      	ldr	r3, [sp, #16]
 8010d8a:	f1c0 001c 	rsb	r0, r0, #28
 8010d8e:	4403      	add	r3, r0
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	9b05      	ldr	r3, [sp, #20]
 8010d94:	4480      	add	r8, r0
 8010d96:	4403      	add	r3, r0
 8010d98:	9305      	str	r3, [sp, #20]
 8010d9a:	9b04      	ldr	r3, [sp, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	dd05      	ble.n	8010dac <_dtoa_r+0x724>
 8010da0:	4629      	mov	r1, r5
 8010da2:	461a      	mov	r2, r3
 8010da4:	4630      	mov	r0, r6
 8010da6:	f000 fc37 	bl	8011618 <__lshift>
 8010daa:	4605      	mov	r5, r0
 8010dac:	9b05      	ldr	r3, [sp, #20]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	dd05      	ble.n	8010dbe <_dtoa_r+0x736>
 8010db2:	4621      	mov	r1, r4
 8010db4:	461a      	mov	r2, r3
 8010db6:	4630      	mov	r0, r6
 8010db8:	f000 fc2e 	bl	8011618 <__lshift>
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d071      	beq.n	8010ea8 <_dtoa_r+0x820>
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 fc92 	bl	80116f0 <__mcmp>
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	da6b      	bge.n	8010ea8 <_dtoa_r+0x820>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	220a      	movs	r2, #10
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	f000 fa70 	bl	80112bc <__multadd>
 8010ddc:	9b07      	ldr	r3, [sp, #28]
 8010dde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010de2:	4605      	mov	r5, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	f000 8197 	beq.w	8011118 <_dtoa_r+0xa90>
 8010dea:	4639      	mov	r1, r7
 8010dec:	2300      	movs	r3, #0
 8010dee:	220a      	movs	r2, #10
 8010df0:	4630      	mov	r0, r6
 8010df2:	f000 fa63 	bl	80112bc <__multadd>
 8010df6:	f1ba 0f00 	cmp.w	sl, #0
 8010dfa:	4607      	mov	r7, r0
 8010dfc:	f300 8093 	bgt.w	8010f26 <_dtoa_r+0x89e>
 8010e00:	9b06      	ldr	r3, [sp, #24]
 8010e02:	2b02      	cmp	r3, #2
 8010e04:	dc57      	bgt.n	8010eb6 <_dtoa_r+0x82e>
 8010e06:	e08e      	b.n	8010f26 <_dtoa_r+0x89e>
 8010e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010e0e:	e751      	b.n	8010cb4 <_dtoa_r+0x62c>
 8010e10:	f109 34ff 	add.w	r4, r9, #4294967295
 8010e14:	42a3      	cmp	r3, r4
 8010e16:	bfbf      	itttt	lt
 8010e18:	1ae2      	sublt	r2, r4, r3
 8010e1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e1c:	189b      	addlt	r3, r3, r2
 8010e1e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010e20:	bfae      	itee	ge
 8010e22:	1b1c      	subge	r4, r3, r4
 8010e24:	4623      	movlt	r3, r4
 8010e26:	2400      	movlt	r4, #0
 8010e28:	f1b9 0f00 	cmp.w	r9, #0
 8010e2c:	bfb5      	itete	lt
 8010e2e:	9a04      	ldrlt	r2, [sp, #16]
 8010e30:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8010e34:	eba2 0809 	sublt.w	r8, r2, r9
 8010e38:	464a      	movge	r2, r9
 8010e3a:	bfb8      	it	lt
 8010e3c:	2200      	movlt	r2, #0
 8010e3e:	e73c      	b.n	8010cba <_dtoa_r+0x632>
 8010e40:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010e44:	9f07      	ldr	r7, [sp, #28]
 8010e46:	461c      	mov	r4, r3
 8010e48:	e744      	b.n	8010cd4 <_dtoa_r+0x64c>
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	e770      	b.n	8010d30 <_dtoa_r+0x6a8>
 8010e4e:	9b06      	ldr	r3, [sp, #24]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	dc18      	bgt.n	8010e86 <_dtoa_r+0x7fe>
 8010e54:	9b02      	ldr	r3, [sp, #8]
 8010e56:	b9b3      	cbnz	r3, 8010e86 <_dtoa_r+0x7fe>
 8010e58:	9b03      	ldr	r3, [sp, #12]
 8010e5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010e5e:	b9a2      	cbnz	r2, 8010e8a <_dtoa_r+0x802>
 8010e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010e64:	0d12      	lsrs	r2, r2, #20
 8010e66:	0512      	lsls	r2, r2, #20
 8010e68:	b18a      	cbz	r2, 8010e8e <_dtoa_r+0x806>
 8010e6a:	9b04      	ldr	r3, [sp, #16]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	9304      	str	r3, [sp, #16]
 8010e70:	9b05      	ldr	r3, [sp, #20]
 8010e72:	3301      	adds	r3, #1
 8010e74:	9305      	str	r3, [sp, #20]
 8010e76:	2301      	movs	r3, #1
 8010e78:	9309      	str	r3, [sp, #36]	; 0x24
 8010e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f47f af70 	bne.w	8010d62 <_dtoa_r+0x6da>
 8010e82:	2001      	movs	r0, #1
 8010e84:	e775      	b.n	8010d72 <_dtoa_r+0x6ea>
 8010e86:	2300      	movs	r3, #0
 8010e88:	e7f6      	b.n	8010e78 <_dtoa_r+0x7f0>
 8010e8a:	9b02      	ldr	r3, [sp, #8]
 8010e8c:	e7f4      	b.n	8010e78 <_dtoa_r+0x7f0>
 8010e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8010e90:	e7f3      	b.n	8010e7a <_dtoa_r+0x7f2>
 8010e92:	d082      	beq.n	8010d9a <_dtoa_r+0x712>
 8010e94:	9b04      	ldr	r3, [sp, #16]
 8010e96:	321c      	adds	r2, #28
 8010e98:	4413      	add	r3, r2
 8010e9a:	9304      	str	r3, [sp, #16]
 8010e9c:	9b05      	ldr	r3, [sp, #20]
 8010e9e:	4490      	add	r8, r2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	e779      	b.n	8010d98 <_dtoa_r+0x710>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	e7f5      	b.n	8010e94 <_dtoa_r+0x80c>
 8010ea8:	f1b9 0f00 	cmp.w	r9, #0
 8010eac:	dc36      	bgt.n	8010f1c <_dtoa_r+0x894>
 8010eae:	9b06      	ldr	r3, [sp, #24]
 8010eb0:	2b02      	cmp	r3, #2
 8010eb2:	dd33      	ble.n	8010f1c <_dtoa_r+0x894>
 8010eb4:	46ca      	mov	sl, r9
 8010eb6:	f1ba 0f00 	cmp.w	sl, #0
 8010eba:	d10d      	bne.n	8010ed8 <_dtoa_r+0x850>
 8010ebc:	4621      	mov	r1, r4
 8010ebe:	4653      	mov	r3, sl
 8010ec0:	2205      	movs	r2, #5
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f000 f9fa 	bl	80112bc <__multadd>
 8010ec8:	4601      	mov	r1, r0
 8010eca:	4604      	mov	r4, r0
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f000 fc0f 	bl	80116f0 <__mcmp>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	f73f ade4 	bgt.w	8010aa0 <_dtoa_r+0x418>
 8010ed8:	9b08      	ldr	r3, [sp, #32]
 8010eda:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ede:	ea6f 0b03 	mvn.w	fp, r3
 8010ee2:	f04f 0900 	mov.w	r9, #0
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f000 f9c5 	bl	8011278 <_Bfree>
 8010eee:	2f00      	cmp	r7, #0
 8010ef0:	f43f aea1 	beq.w	8010c36 <_dtoa_r+0x5ae>
 8010ef4:	f1b9 0f00 	cmp.w	r9, #0
 8010ef8:	d005      	beq.n	8010f06 <_dtoa_r+0x87e>
 8010efa:	45b9      	cmp	r9, r7
 8010efc:	d003      	beq.n	8010f06 <_dtoa_r+0x87e>
 8010efe:	4649      	mov	r1, r9
 8010f00:	4630      	mov	r0, r6
 8010f02:	f000 f9b9 	bl	8011278 <_Bfree>
 8010f06:	4639      	mov	r1, r7
 8010f08:	4630      	mov	r0, r6
 8010f0a:	f000 f9b5 	bl	8011278 <_Bfree>
 8010f0e:	e692      	b.n	8010c36 <_dtoa_r+0x5ae>
 8010f10:	2400      	movs	r4, #0
 8010f12:	4627      	mov	r7, r4
 8010f14:	e7e0      	b.n	8010ed8 <_dtoa_r+0x850>
 8010f16:	4693      	mov	fp, r2
 8010f18:	4627      	mov	r7, r4
 8010f1a:	e5c1      	b.n	8010aa0 <_dtoa_r+0x418>
 8010f1c:	9b07      	ldr	r3, [sp, #28]
 8010f1e:	46ca      	mov	sl, r9
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 8100 	beq.w	8011126 <_dtoa_r+0xa9e>
 8010f26:	f1b8 0f00 	cmp.w	r8, #0
 8010f2a:	dd05      	ble.n	8010f38 <_dtoa_r+0x8b0>
 8010f2c:	4639      	mov	r1, r7
 8010f2e:	4642      	mov	r2, r8
 8010f30:	4630      	mov	r0, r6
 8010f32:	f000 fb71 	bl	8011618 <__lshift>
 8010f36:	4607      	mov	r7, r0
 8010f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d05d      	beq.n	8010ffa <_dtoa_r+0x972>
 8010f3e:	6879      	ldr	r1, [r7, #4]
 8010f40:	4630      	mov	r0, r6
 8010f42:	f000 f959 	bl	80111f8 <_Balloc>
 8010f46:	4680      	mov	r8, r0
 8010f48:	b928      	cbnz	r0, 8010f56 <_dtoa_r+0x8ce>
 8010f4a:	4b82      	ldr	r3, [pc, #520]	; (8011154 <_dtoa_r+0xacc>)
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010f52:	f7ff bbb1 	b.w	80106b8 <_dtoa_r+0x30>
 8010f56:	693a      	ldr	r2, [r7, #16]
 8010f58:	3202      	adds	r2, #2
 8010f5a:	0092      	lsls	r2, r2, #2
 8010f5c:	f107 010c 	add.w	r1, r7, #12
 8010f60:	300c      	adds	r0, #12
 8010f62:	f000 fee5 	bl	8011d30 <memcpy>
 8010f66:	2201      	movs	r2, #1
 8010f68:	4641      	mov	r1, r8
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	f000 fb54 	bl	8011618 <__lshift>
 8010f70:	9b01      	ldr	r3, [sp, #4]
 8010f72:	3301      	adds	r3, #1
 8010f74:	9304      	str	r3, [sp, #16]
 8010f76:	9b01      	ldr	r3, [sp, #4]
 8010f78:	4453      	add	r3, sl
 8010f7a:	9308      	str	r3, [sp, #32]
 8010f7c:	9b02      	ldr	r3, [sp, #8]
 8010f7e:	f003 0301 	and.w	r3, r3, #1
 8010f82:	46b9      	mov	r9, r7
 8010f84:	9307      	str	r3, [sp, #28]
 8010f86:	4607      	mov	r7, r0
 8010f88:	9b04      	ldr	r3, [sp, #16]
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	4628      	mov	r0, r5
 8010f90:	9302      	str	r3, [sp, #8]
 8010f92:	f7ff faf0 	bl	8010576 <quorem>
 8010f96:	4603      	mov	r3, r0
 8010f98:	3330      	adds	r3, #48	; 0x30
 8010f9a:	9005      	str	r0, [sp, #20]
 8010f9c:	4649      	mov	r1, r9
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa2:	f000 fba5 	bl	80116f0 <__mcmp>
 8010fa6:	463a      	mov	r2, r7
 8010fa8:	4682      	mov	sl, r0
 8010faa:	4621      	mov	r1, r4
 8010fac:	4630      	mov	r0, r6
 8010fae:	f000 fbbb 	bl	8011728 <__mdiff>
 8010fb2:	68c2      	ldr	r2, [r0, #12]
 8010fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	bb0a      	cbnz	r2, 8010ffe <_dtoa_r+0x976>
 8010fba:	4601      	mov	r1, r0
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	f000 fb97 	bl	80116f0 <__mcmp>
 8010fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	4641      	mov	r1, r8
 8010fc8:	4630      	mov	r0, r6
 8010fca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8010fce:	f000 f953 	bl	8011278 <_Bfree>
 8010fd2:	9b06      	ldr	r3, [sp, #24]
 8010fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010fda:	ea43 0102 	orr.w	r1, r3, r2
 8010fde:	9b07      	ldr	r3, [sp, #28]
 8010fe0:	4319      	orrs	r1, r3
 8010fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fe4:	d10d      	bne.n	8011002 <_dtoa_r+0x97a>
 8010fe6:	2b39      	cmp	r3, #57	; 0x39
 8010fe8:	d029      	beq.n	801103e <_dtoa_r+0x9b6>
 8010fea:	f1ba 0f00 	cmp.w	sl, #0
 8010fee:	dd01      	ble.n	8010ff4 <_dtoa_r+0x96c>
 8010ff0:	9b05      	ldr	r3, [sp, #20]
 8010ff2:	3331      	adds	r3, #49	; 0x31
 8010ff4:	9a02      	ldr	r2, [sp, #8]
 8010ff6:	7013      	strb	r3, [r2, #0]
 8010ff8:	e775      	b.n	8010ee6 <_dtoa_r+0x85e>
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	e7b8      	b.n	8010f70 <_dtoa_r+0x8e8>
 8010ffe:	2201      	movs	r2, #1
 8011000:	e7e1      	b.n	8010fc6 <_dtoa_r+0x93e>
 8011002:	f1ba 0f00 	cmp.w	sl, #0
 8011006:	db06      	blt.n	8011016 <_dtoa_r+0x98e>
 8011008:	9906      	ldr	r1, [sp, #24]
 801100a:	ea41 0a0a 	orr.w	sl, r1, sl
 801100e:	9907      	ldr	r1, [sp, #28]
 8011010:	ea5a 0a01 	orrs.w	sl, sl, r1
 8011014:	d120      	bne.n	8011058 <_dtoa_r+0x9d0>
 8011016:	2a00      	cmp	r2, #0
 8011018:	ddec      	ble.n	8010ff4 <_dtoa_r+0x96c>
 801101a:	4629      	mov	r1, r5
 801101c:	2201      	movs	r2, #1
 801101e:	4630      	mov	r0, r6
 8011020:	9304      	str	r3, [sp, #16]
 8011022:	f000 faf9 	bl	8011618 <__lshift>
 8011026:	4621      	mov	r1, r4
 8011028:	4605      	mov	r5, r0
 801102a:	f000 fb61 	bl	80116f0 <__mcmp>
 801102e:	2800      	cmp	r0, #0
 8011030:	9b04      	ldr	r3, [sp, #16]
 8011032:	dc02      	bgt.n	801103a <_dtoa_r+0x9b2>
 8011034:	d1de      	bne.n	8010ff4 <_dtoa_r+0x96c>
 8011036:	07da      	lsls	r2, r3, #31
 8011038:	d5dc      	bpl.n	8010ff4 <_dtoa_r+0x96c>
 801103a:	2b39      	cmp	r3, #57	; 0x39
 801103c:	d1d8      	bne.n	8010ff0 <_dtoa_r+0x968>
 801103e:	9a02      	ldr	r2, [sp, #8]
 8011040:	2339      	movs	r3, #57	; 0x39
 8011042:	7013      	strb	r3, [r2, #0]
 8011044:	4643      	mov	r3, r8
 8011046:	4698      	mov	r8, r3
 8011048:	3b01      	subs	r3, #1
 801104a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801104e:	2a39      	cmp	r2, #57	; 0x39
 8011050:	d051      	beq.n	80110f6 <_dtoa_r+0xa6e>
 8011052:	3201      	adds	r2, #1
 8011054:	701a      	strb	r2, [r3, #0]
 8011056:	e746      	b.n	8010ee6 <_dtoa_r+0x85e>
 8011058:	2a00      	cmp	r2, #0
 801105a:	dd03      	ble.n	8011064 <_dtoa_r+0x9dc>
 801105c:	2b39      	cmp	r3, #57	; 0x39
 801105e:	d0ee      	beq.n	801103e <_dtoa_r+0x9b6>
 8011060:	3301      	adds	r3, #1
 8011062:	e7c7      	b.n	8010ff4 <_dtoa_r+0x96c>
 8011064:	9a04      	ldr	r2, [sp, #16]
 8011066:	9908      	ldr	r1, [sp, #32]
 8011068:	f802 3c01 	strb.w	r3, [r2, #-1]
 801106c:	428a      	cmp	r2, r1
 801106e:	d02b      	beq.n	80110c8 <_dtoa_r+0xa40>
 8011070:	4629      	mov	r1, r5
 8011072:	2300      	movs	r3, #0
 8011074:	220a      	movs	r2, #10
 8011076:	4630      	mov	r0, r6
 8011078:	f000 f920 	bl	80112bc <__multadd>
 801107c:	45b9      	cmp	r9, r7
 801107e:	4605      	mov	r5, r0
 8011080:	f04f 0300 	mov.w	r3, #0
 8011084:	f04f 020a 	mov.w	r2, #10
 8011088:	4649      	mov	r1, r9
 801108a:	4630      	mov	r0, r6
 801108c:	d107      	bne.n	801109e <_dtoa_r+0xa16>
 801108e:	f000 f915 	bl	80112bc <__multadd>
 8011092:	4681      	mov	r9, r0
 8011094:	4607      	mov	r7, r0
 8011096:	9b04      	ldr	r3, [sp, #16]
 8011098:	3301      	adds	r3, #1
 801109a:	9304      	str	r3, [sp, #16]
 801109c:	e774      	b.n	8010f88 <_dtoa_r+0x900>
 801109e:	f000 f90d 	bl	80112bc <__multadd>
 80110a2:	4639      	mov	r1, r7
 80110a4:	4681      	mov	r9, r0
 80110a6:	2300      	movs	r3, #0
 80110a8:	220a      	movs	r2, #10
 80110aa:	4630      	mov	r0, r6
 80110ac:	f000 f906 	bl	80112bc <__multadd>
 80110b0:	4607      	mov	r7, r0
 80110b2:	e7f0      	b.n	8011096 <_dtoa_r+0xa0e>
 80110b4:	f1ba 0f00 	cmp.w	sl, #0
 80110b8:	9a01      	ldr	r2, [sp, #4]
 80110ba:	bfcc      	ite	gt
 80110bc:	46d0      	movgt	r8, sl
 80110be:	f04f 0801 	movle.w	r8, #1
 80110c2:	4490      	add	r8, r2
 80110c4:	f04f 0900 	mov.w	r9, #0
 80110c8:	4629      	mov	r1, r5
 80110ca:	2201      	movs	r2, #1
 80110cc:	4630      	mov	r0, r6
 80110ce:	9302      	str	r3, [sp, #8]
 80110d0:	f000 faa2 	bl	8011618 <__lshift>
 80110d4:	4621      	mov	r1, r4
 80110d6:	4605      	mov	r5, r0
 80110d8:	f000 fb0a 	bl	80116f0 <__mcmp>
 80110dc:	2800      	cmp	r0, #0
 80110de:	dcb1      	bgt.n	8011044 <_dtoa_r+0x9bc>
 80110e0:	d102      	bne.n	80110e8 <_dtoa_r+0xa60>
 80110e2:	9b02      	ldr	r3, [sp, #8]
 80110e4:	07db      	lsls	r3, r3, #31
 80110e6:	d4ad      	bmi.n	8011044 <_dtoa_r+0x9bc>
 80110e8:	4643      	mov	r3, r8
 80110ea:	4698      	mov	r8, r3
 80110ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110f0:	2a30      	cmp	r2, #48	; 0x30
 80110f2:	d0fa      	beq.n	80110ea <_dtoa_r+0xa62>
 80110f4:	e6f7      	b.n	8010ee6 <_dtoa_r+0x85e>
 80110f6:	9a01      	ldr	r2, [sp, #4]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d1a4      	bne.n	8011046 <_dtoa_r+0x9be>
 80110fc:	f10b 0b01 	add.w	fp, fp, #1
 8011100:	2331      	movs	r3, #49	; 0x31
 8011102:	e778      	b.n	8010ff6 <_dtoa_r+0x96e>
 8011104:	4b14      	ldr	r3, [pc, #80]	; (8011158 <_dtoa_r+0xad0>)
 8011106:	f7ff bb2a 	b.w	801075e <_dtoa_r+0xd6>
 801110a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801110c:	2b00      	cmp	r3, #0
 801110e:	f47f ab05 	bne.w	801071c <_dtoa_r+0x94>
 8011112:	4b12      	ldr	r3, [pc, #72]	; (801115c <_dtoa_r+0xad4>)
 8011114:	f7ff bb23 	b.w	801075e <_dtoa_r+0xd6>
 8011118:	f1ba 0f00 	cmp.w	sl, #0
 801111c:	dc03      	bgt.n	8011126 <_dtoa_r+0xa9e>
 801111e:	9b06      	ldr	r3, [sp, #24]
 8011120:	2b02      	cmp	r3, #2
 8011122:	f73f aec8 	bgt.w	8010eb6 <_dtoa_r+0x82e>
 8011126:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801112a:	4621      	mov	r1, r4
 801112c:	4628      	mov	r0, r5
 801112e:	f7ff fa22 	bl	8010576 <quorem>
 8011132:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011136:	f808 3b01 	strb.w	r3, [r8], #1
 801113a:	9a01      	ldr	r2, [sp, #4]
 801113c:	eba8 0202 	sub.w	r2, r8, r2
 8011140:	4592      	cmp	sl, r2
 8011142:	ddb7      	ble.n	80110b4 <_dtoa_r+0xa2c>
 8011144:	4629      	mov	r1, r5
 8011146:	2300      	movs	r3, #0
 8011148:	220a      	movs	r2, #10
 801114a:	4630      	mov	r0, r6
 801114c:	f000 f8b6 	bl	80112bc <__multadd>
 8011150:	4605      	mov	r5, r0
 8011152:	e7ea      	b.n	801112a <_dtoa_r+0xaa2>
 8011154:	08012fc0 	.word	0x08012fc0
 8011158:	08012f20 	.word	0x08012f20
 801115c:	08012f44 	.word	0x08012f44

08011160 <_free_r>:
 8011160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011162:	2900      	cmp	r1, #0
 8011164:	d044      	beq.n	80111f0 <_free_r+0x90>
 8011166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801116a:	9001      	str	r0, [sp, #4]
 801116c:	2b00      	cmp	r3, #0
 801116e:	f1a1 0404 	sub.w	r4, r1, #4
 8011172:	bfb8      	it	lt
 8011174:	18e4      	addlt	r4, r4, r3
 8011176:	f7fe fc01 	bl	800f97c <__malloc_lock>
 801117a:	4a1e      	ldr	r2, [pc, #120]	; (80111f4 <_free_r+0x94>)
 801117c:	9801      	ldr	r0, [sp, #4]
 801117e:	6813      	ldr	r3, [r2, #0]
 8011180:	b933      	cbnz	r3, 8011190 <_free_r+0x30>
 8011182:	6063      	str	r3, [r4, #4]
 8011184:	6014      	str	r4, [r2, #0]
 8011186:	b003      	add	sp, #12
 8011188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801118c:	f7fe bbfc 	b.w	800f988 <__malloc_unlock>
 8011190:	42a3      	cmp	r3, r4
 8011192:	d908      	bls.n	80111a6 <_free_r+0x46>
 8011194:	6825      	ldr	r5, [r4, #0]
 8011196:	1961      	adds	r1, r4, r5
 8011198:	428b      	cmp	r3, r1
 801119a:	bf01      	itttt	eq
 801119c:	6819      	ldreq	r1, [r3, #0]
 801119e:	685b      	ldreq	r3, [r3, #4]
 80111a0:	1949      	addeq	r1, r1, r5
 80111a2:	6021      	streq	r1, [r4, #0]
 80111a4:	e7ed      	b.n	8011182 <_free_r+0x22>
 80111a6:	461a      	mov	r2, r3
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	b10b      	cbz	r3, 80111b0 <_free_r+0x50>
 80111ac:	42a3      	cmp	r3, r4
 80111ae:	d9fa      	bls.n	80111a6 <_free_r+0x46>
 80111b0:	6811      	ldr	r1, [r2, #0]
 80111b2:	1855      	adds	r5, r2, r1
 80111b4:	42a5      	cmp	r5, r4
 80111b6:	d10b      	bne.n	80111d0 <_free_r+0x70>
 80111b8:	6824      	ldr	r4, [r4, #0]
 80111ba:	4421      	add	r1, r4
 80111bc:	1854      	adds	r4, r2, r1
 80111be:	42a3      	cmp	r3, r4
 80111c0:	6011      	str	r1, [r2, #0]
 80111c2:	d1e0      	bne.n	8011186 <_free_r+0x26>
 80111c4:	681c      	ldr	r4, [r3, #0]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	6053      	str	r3, [r2, #4]
 80111ca:	440c      	add	r4, r1
 80111cc:	6014      	str	r4, [r2, #0]
 80111ce:	e7da      	b.n	8011186 <_free_r+0x26>
 80111d0:	d902      	bls.n	80111d8 <_free_r+0x78>
 80111d2:	230c      	movs	r3, #12
 80111d4:	6003      	str	r3, [r0, #0]
 80111d6:	e7d6      	b.n	8011186 <_free_r+0x26>
 80111d8:	6825      	ldr	r5, [r4, #0]
 80111da:	1961      	adds	r1, r4, r5
 80111dc:	428b      	cmp	r3, r1
 80111de:	bf04      	itt	eq
 80111e0:	6819      	ldreq	r1, [r3, #0]
 80111e2:	685b      	ldreq	r3, [r3, #4]
 80111e4:	6063      	str	r3, [r4, #4]
 80111e6:	bf04      	itt	eq
 80111e8:	1949      	addeq	r1, r1, r5
 80111ea:	6021      	streq	r1, [r4, #0]
 80111ec:	6054      	str	r4, [r2, #4]
 80111ee:	e7ca      	b.n	8011186 <_free_r+0x26>
 80111f0:	b003      	add	sp, #12
 80111f2:	bd30      	pop	{r4, r5, pc}
 80111f4:	240020dc 	.word	0x240020dc

080111f8 <_Balloc>:
 80111f8:	b570      	push	{r4, r5, r6, lr}
 80111fa:	69c6      	ldr	r6, [r0, #28]
 80111fc:	4604      	mov	r4, r0
 80111fe:	460d      	mov	r5, r1
 8011200:	b976      	cbnz	r6, 8011220 <_Balloc+0x28>
 8011202:	2010      	movs	r0, #16
 8011204:	f7fe fb12 	bl	800f82c <malloc>
 8011208:	4602      	mov	r2, r0
 801120a:	61e0      	str	r0, [r4, #28]
 801120c:	b920      	cbnz	r0, 8011218 <_Balloc+0x20>
 801120e:	4b18      	ldr	r3, [pc, #96]	; (8011270 <_Balloc+0x78>)
 8011210:	4818      	ldr	r0, [pc, #96]	; (8011274 <_Balloc+0x7c>)
 8011212:	216b      	movs	r1, #107	; 0x6b
 8011214:	f000 fd9a 	bl	8011d4c <__assert_func>
 8011218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801121c:	6006      	str	r6, [r0, #0]
 801121e:	60c6      	str	r6, [r0, #12]
 8011220:	69e6      	ldr	r6, [r4, #28]
 8011222:	68f3      	ldr	r3, [r6, #12]
 8011224:	b183      	cbz	r3, 8011248 <_Balloc+0x50>
 8011226:	69e3      	ldr	r3, [r4, #28]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801122e:	b9b8      	cbnz	r0, 8011260 <_Balloc+0x68>
 8011230:	2101      	movs	r1, #1
 8011232:	fa01 f605 	lsl.w	r6, r1, r5
 8011236:	1d72      	adds	r2, r6, #5
 8011238:	0092      	lsls	r2, r2, #2
 801123a:	4620      	mov	r0, r4
 801123c:	f000 fda4 	bl	8011d88 <_calloc_r>
 8011240:	b160      	cbz	r0, 801125c <_Balloc+0x64>
 8011242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011246:	e00e      	b.n	8011266 <_Balloc+0x6e>
 8011248:	2221      	movs	r2, #33	; 0x21
 801124a:	2104      	movs	r1, #4
 801124c:	4620      	mov	r0, r4
 801124e:	f000 fd9b 	bl	8011d88 <_calloc_r>
 8011252:	69e3      	ldr	r3, [r4, #28]
 8011254:	60f0      	str	r0, [r6, #12]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1e4      	bne.n	8011226 <_Balloc+0x2e>
 801125c:	2000      	movs	r0, #0
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	6802      	ldr	r2, [r0, #0]
 8011262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011266:	2300      	movs	r3, #0
 8011268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801126c:	e7f7      	b.n	801125e <_Balloc+0x66>
 801126e:	bf00      	nop
 8011270:	08012f51 	.word	0x08012f51
 8011274:	08012fd1 	.word	0x08012fd1

08011278 <_Bfree>:
 8011278:	b570      	push	{r4, r5, r6, lr}
 801127a:	69c6      	ldr	r6, [r0, #28]
 801127c:	4605      	mov	r5, r0
 801127e:	460c      	mov	r4, r1
 8011280:	b976      	cbnz	r6, 80112a0 <_Bfree+0x28>
 8011282:	2010      	movs	r0, #16
 8011284:	f7fe fad2 	bl	800f82c <malloc>
 8011288:	4602      	mov	r2, r0
 801128a:	61e8      	str	r0, [r5, #28]
 801128c:	b920      	cbnz	r0, 8011298 <_Bfree+0x20>
 801128e:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <_Bfree+0x3c>)
 8011290:	4809      	ldr	r0, [pc, #36]	; (80112b8 <_Bfree+0x40>)
 8011292:	218f      	movs	r1, #143	; 0x8f
 8011294:	f000 fd5a 	bl	8011d4c <__assert_func>
 8011298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801129c:	6006      	str	r6, [r0, #0]
 801129e:	60c6      	str	r6, [r0, #12]
 80112a0:	b13c      	cbz	r4, 80112b2 <_Bfree+0x3a>
 80112a2:	69eb      	ldr	r3, [r5, #28]
 80112a4:	6862      	ldr	r2, [r4, #4]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112ac:	6021      	str	r1, [r4, #0]
 80112ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112b2:	bd70      	pop	{r4, r5, r6, pc}
 80112b4:	08012f51 	.word	0x08012f51
 80112b8:	08012fd1 	.word	0x08012fd1

080112bc <__multadd>:
 80112bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c0:	690d      	ldr	r5, [r1, #16]
 80112c2:	4607      	mov	r7, r0
 80112c4:	460c      	mov	r4, r1
 80112c6:	461e      	mov	r6, r3
 80112c8:	f101 0c14 	add.w	ip, r1, #20
 80112cc:	2000      	movs	r0, #0
 80112ce:	f8dc 3000 	ldr.w	r3, [ip]
 80112d2:	b299      	uxth	r1, r3
 80112d4:	fb02 6101 	mla	r1, r2, r1, r6
 80112d8:	0c1e      	lsrs	r6, r3, #16
 80112da:	0c0b      	lsrs	r3, r1, #16
 80112dc:	fb02 3306 	mla	r3, r2, r6, r3
 80112e0:	b289      	uxth	r1, r1
 80112e2:	3001      	adds	r0, #1
 80112e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80112e8:	4285      	cmp	r5, r0
 80112ea:	f84c 1b04 	str.w	r1, [ip], #4
 80112ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80112f2:	dcec      	bgt.n	80112ce <__multadd+0x12>
 80112f4:	b30e      	cbz	r6, 801133a <__multadd+0x7e>
 80112f6:	68a3      	ldr	r3, [r4, #8]
 80112f8:	42ab      	cmp	r3, r5
 80112fa:	dc19      	bgt.n	8011330 <__multadd+0x74>
 80112fc:	6861      	ldr	r1, [r4, #4]
 80112fe:	4638      	mov	r0, r7
 8011300:	3101      	adds	r1, #1
 8011302:	f7ff ff79 	bl	80111f8 <_Balloc>
 8011306:	4680      	mov	r8, r0
 8011308:	b928      	cbnz	r0, 8011316 <__multadd+0x5a>
 801130a:	4602      	mov	r2, r0
 801130c:	4b0c      	ldr	r3, [pc, #48]	; (8011340 <__multadd+0x84>)
 801130e:	480d      	ldr	r0, [pc, #52]	; (8011344 <__multadd+0x88>)
 8011310:	21ba      	movs	r1, #186	; 0xba
 8011312:	f000 fd1b 	bl	8011d4c <__assert_func>
 8011316:	6922      	ldr	r2, [r4, #16]
 8011318:	3202      	adds	r2, #2
 801131a:	f104 010c 	add.w	r1, r4, #12
 801131e:	0092      	lsls	r2, r2, #2
 8011320:	300c      	adds	r0, #12
 8011322:	f000 fd05 	bl	8011d30 <memcpy>
 8011326:	4621      	mov	r1, r4
 8011328:	4638      	mov	r0, r7
 801132a:	f7ff ffa5 	bl	8011278 <_Bfree>
 801132e:	4644      	mov	r4, r8
 8011330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011334:	3501      	adds	r5, #1
 8011336:	615e      	str	r6, [r3, #20]
 8011338:	6125      	str	r5, [r4, #16]
 801133a:	4620      	mov	r0, r4
 801133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011340:	08012fc0 	.word	0x08012fc0
 8011344:	08012fd1 	.word	0x08012fd1

08011348 <__hi0bits>:
 8011348:	0c03      	lsrs	r3, r0, #16
 801134a:	041b      	lsls	r3, r3, #16
 801134c:	b9d3      	cbnz	r3, 8011384 <__hi0bits+0x3c>
 801134e:	0400      	lsls	r0, r0, #16
 8011350:	2310      	movs	r3, #16
 8011352:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011356:	bf04      	itt	eq
 8011358:	0200      	lsleq	r0, r0, #8
 801135a:	3308      	addeq	r3, #8
 801135c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011360:	bf04      	itt	eq
 8011362:	0100      	lsleq	r0, r0, #4
 8011364:	3304      	addeq	r3, #4
 8011366:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801136a:	bf04      	itt	eq
 801136c:	0080      	lsleq	r0, r0, #2
 801136e:	3302      	addeq	r3, #2
 8011370:	2800      	cmp	r0, #0
 8011372:	db05      	blt.n	8011380 <__hi0bits+0x38>
 8011374:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011378:	f103 0301 	add.w	r3, r3, #1
 801137c:	bf08      	it	eq
 801137e:	2320      	moveq	r3, #32
 8011380:	4618      	mov	r0, r3
 8011382:	4770      	bx	lr
 8011384:	2300      	movs	r3, #0
 8011386:	e7e4      	b.n	8011352 <__hi0bits+0xa>

08011388 <__lo0bits>:
 8011388:	6803      	ldr	r3, [r0, #0]
 801138a:	f013 0207 	ands.w	r2, r3, #7
 801138e:	d00c      	beq.n	80113aa <__lo0bits+0x22>
 8011390:	07d9      	lsls	r1, r3, #31
 8011392:	d422      	bmi.n	80113da <__lo0bits+0x52>
 8011394:	079a      	lsls	r2, r3, #30
 8011396:	bf49      	itett	mi
 8011398:	085b      	lsrmi	r3, r3, #1
 801139a:	089b      	lsrpl	r3, r3, #2
 801139c:	6003      	strmi	r3, [r0, #0]
 801139e:	2201      	movmi	r2, #1
 80113a0:	bf5c      	itt	pl
 80113a2:	6003      	strpl	r3, [r0, #0]
 80113a4:	2202      	movpl	r2, #2
 80113a6:	4610      	mov	r0, r2
 80113a8:	4770      	bx	lr
 80113aa:	b299      	uxth	r1, r3
 80113ac:	b909      	cbnz	r1, 80113b2 <__lo0bits+0x2a>
 80113ae:	0c1b      	lsrs	r3, r3, #16
 80113b0:	2210      	movs	r2, #16
 80113b2:	b2d9      	uxtb	r1, r3
 80113b4:	b909      	cbnz	r1, 80113ba <__lo0bits+0x32>
 80113b6:	3208      	adds	r2, #8
 80113b8:	0a1b      	lsrs	r3, r3, #8
 80113ba:	0719      	lsls	r1, r3, #28
 80113bc:	bf04      	itt	eq
 80113be:	091b      	lsreq	r3, r3, #4
 80113c0:	3204      	addeq	r2, #4
 80113c2:	0799      	lsls	r1, r3, #30
 80113c4:	bf04      	itt	eq
 80113c6:	089b      	lsreq	r3, r3, #2
 80113c8:	3202      	addeq	r2, #2
 80113ca:	07d9      	lsls	r1, r3, #31
 80113cc:	d403      	bmi.n	80113d6 <__lo0bits+0x4e>
 80113ce:	085b      	lsrs	r3, r3, #1
 80113d0:	f102 0201 	add.w	r2, r2, #1
 80113d4:	d003      	beq.n	80113de <__lo0bits+0x56>
 80113d6:	6003      	str	r3, [r0, #0]
 80113d8:	e7e5      	b.n	80113a6 <__lo0bits+0x1e>
 80113da:	2200      	movs	r2, #0
 80113dc:	e7e3      	b.n	80113a6 <__lo0bits+0x1e>
 80113de:	2220      	movs	r2, #32
 80113e0:	e7e1      	b.n	80113a6 <__lo0bits+0x1e>
	...

080113e4 <__i2b>:
 80113e4:	b510      	push	{r4, lr}
 80113e6:	460c      	mov	r4, r1
 80113e8:	2101      	movs	r1, #1
 80113ea:	f7ff ff05 	bl	80111f8 <_Balloc>
 80113ee:	4602      	mov	r2, r0
 80113f0:	b928      	cbnz	r0, 80113fe <__i2b+0x1a>
 80113f2:	4b05      	ldr	r3, [pc, #20]	; (8011408 <__i2b+0x24>)
 80113f4:	4805      	ldr	r0, [pc, #20]	; (801140c <__i2b+0x28>)
 80113f6:	f240 1145 	movw	r1, #325	; 0x145
 80113fa:	f000 fca7 	bl	8011d4c <__assert_func>
 80113fe:	2301      	movs	r3, #1
 8011400:	6144      	str	r4, [r0, #20]
 8011402:	6103      	str	r3, [r0, #16]
 8011404:	bd10      	pop	{r4, pc}
 8011406:	bf00      	nop
 8011408:	08012fc0 	.word	0x08012fc0
 801140c:	08012fd1 	.word	0x08012fd1

08011410 <__multiply>:
 8011410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011414:	4691      	mov	r9, r2
 8011416:	690a      	ldr	r2, [r1, #16]
 8011418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801141c:	429a      	cmp	r2, r3
 801141e:	bfb8      	it	lt
 8011420:	460b      	movlt	r3, r1
 8011422:	460c      	mov	r4, r1
 8011424:	bfbc      	itt	lt
 8011426:	464c      	movlt	r4, r9
 8011428:	4699      	movlt	r9, r3
 801142a:	6927      	ldr	r7, [r4, #16]
 801142c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011430:	68a3      	ldr	r3, [r4, #8]
 8011432:	6861      	ldr	r1, [r4, #4]
 8011434:	eb07 060a 	add.w	r6, r7, sl
 8011438:	42b3      	cmp	r3, r6
 801143a:	b085      	sub	sp, #20
 801143c:	bfb8      	it	lt
 801143e:	3101      	addlt	r1, #1
 8011440:	f7ff feda 	bl	80111f8 <_Balloc>
 8011444:	b930      	cbnz	r0, 8011454 <__multiply+0x44>
 8011446:	4602      	mov	r2, r0
 8011448:	4b44      	ldr	r3, [pc, #272]	; (801155c <__multiply+0x14c>)
 801144a:	4845      	ldr	r0, [pc, #276]	; (8011560 <__multiply+0x150>)
 801144c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011450:	f000 fc7c 	bl	8011d4c <__assert_func>
 8011454:	f100 0514 	add.w	r5, r0, #20
 8011458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801145c:	462b      	mov	r3, r5
 801145e:	2200      	movs	r2, #0
 8011460:	4543      	cmp	r3, r8
 8011462:	d321      	bcc.n	80114a8 <__multiply+0x98>
 8011464:	f104 0314 	add.w	r3, r4, #20
 8011468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801146c:	f109 0314 	add.w	r3, r9, #20
 8011470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011474:	9202      	str	r2, [sp, #8]
 8011476:	1b3a      	subs	r2, r7, r4
 8011478:	3a15      	subs	r2, #21
 801147a:	f022 0203 	bic.w	r2, r2, #3
 801147e:	3204      	adds	r2, #4
 8011480:	f104 0115 	add.w	r1, r4, #21
 8011484:	428f      	cmp	r7, r1
 8011486:	bf38      	it	cc
 8011488:	2204      	movcc	r2, #4
 801148a:	9201      	str	r2, [sp, #4]
 801148c:	9a02      	ldr	r2, [sp, #8]
 801148e:	9303      	str	r3, [sp, #12]
 8011490:	429a      	cmp	r2, r3
 8011492:	d80c      	bhi.n	80114ae <__multiply+0x9e>
 8011494:	2e00      	cmp	r6, #0
 8011496:	dd03      	ble.n	80114a0 <__multiply+0x90>
 8011498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801149c:	2b00      	cmp	r3, #0
 801149e:	d05b      	beq.n	8011558 <__multiply+0x148>
 80114a0:	6106      	str	r6, [r0, #16]
 80114a2:	b005      	add	sp, #20
 80114a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a8:	f843 2b04 	str.w	r2, [r3], #4
 80114ac:	e7d8      	b.n	8011460 <__multiply+0x50>
 80114ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80114b2:	f1ba 0f00 	cmp.w	sl, #0
 80114b6:	d024      	beq.n	8011502 <__multiply+0xf2>
 80114b8:	f104 0e14 	add.w	lr, r4, #20
 80114bc:	46a9      	mov	r9, r5
 80114be:	f04f 0c00 	mov.w	ip, #0
 80114c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80114c6:	f8d9 1000 	ldr.w	r1, [r9]
 80114ca:	fa1f fb82 	uxth.w	fp, r2
 80114ce:	b289      	uxth	r1, r1
 80114d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80114d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80114d8:	f8d9 2000 	ldr.w	r2, [r9]
 80114dc:	4461      	add	r1, ip
 80114de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80114e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114ea:	b289      	uxth	r1, r1
 80114ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114f0:	4577      	cmp	r7, lr
 80114f2:	f849 1b04 	str.w	r1, [r9], #4
 80114f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114fa:	d8e2      	bhi.n	80114c2 <__multiply+0xb2>
 80114fc:	9a01      	ldr	r2, [sp, #4]
 80114fe:	f845 c002 	str.w	ip, [r5, r2]
 8011502:	9a03      	ldr	r2, [sp, #12]
 8011504:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011508:	3304      	adds	r3, #4
 801150a:	f1b9 0f00 	cmp.w	r9, #0
 801150e:	d021      	beq.n	8011554 <__multiply+0x144>
 8011510:	6829      	ldr	r1, [r5, #0]
 8011512:	f104 0c14 	add.w	ip, r4, #20
 8011516:	46ae      	mov	lr, r5
 8011518:	f04f 0a00 	mov.w	sl, #0
 801151c:	f8bc b000 	ldrh.w	fp, [ip]
 8011520:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011524:	fb09 220b 	mla	r2, r9, fp, r2
 8011528:	4452      	add	r2, sl
 801152a:	b289      	uxth	r1, r1
 801152c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011530:	f84e 1b04 	str.w	r1, [lr], #4
 8011534:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011538:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801153c:	f8be 1000 	ldrh.w	r1, [lr]
 8011540:	fb09 110a 	mla	r1, r9, sl, r1
 8011544:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011548:	4567      	cmp	r7, ip
 801154a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801154e:	d8e5      	bhi.n	801151c <__multiply+0x10c>
 8011550:	9a01      	ldr	r2, [sp, #4]
 8011552:	50a9      	str	r1, [r5, r2]
 8011554:	3504      	adds	r5, #4
 8011556:	e799      	b.n	801148c <__multiply+0x7c>
 8011558:	3e01      	subs	r6, #1
 801155a:	e79b      	b.n	8011494 <__multiply+0x84>
 801155c:	08012fc0 	.word	0x08012fc0
 8011560:	08012fd1 	.word	0x08012fd1

08011564 <__pow5mult>:
 8011564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011568:	4615      	mov	r5, r2
 801156a:	f012 0203 	ands.w	r2, r2, #3
 801156e:	4606      	mov	r6, r0
 8011570:	460f      	mov	r7, r1
 8011572:	d007      	beq.n	8011584 <__pow5mult+0x20>
 8011574:	4c25      	ldr	r4, [pc, #148]	; (801160c <__pow5mult+0xa8>)
 8011576:	3a01      	subs	r2, #1
 8011578:	2300      	movs	r3, #0
 801157a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801157e:	f7ff fe9d 	bl	80112bc <__multadd>
 8011582:	4607      	mov	r7, r0
 8011584:	10ad      	asrs	r5, r5, #2
 8011586:	d03d      	beq.n	8011604 <__pow5mult+0xa0>
 8011588:	69f4      	ldr	r4, [r6, #28]
 801158a:	b97c      	cbnz	r4, 80115ac <__pow5mult+0x48>
 801158c:	2010      	movs	r0, #16
 801158e:	f7fe f94d 	bl	800f82c <malloc>
 8011592:	4602      	mov	r2, r0
 8011594:	61f0      	str	r0, [r6, #28]
 8011596:	b928      	cbnz	r0, 80115a4 <__pow5mult+0x40>
 8011598:	4b1d      	ldr	r3, [pc, #116]	; (8011610 <__pow5mult+0xac>)
 801159a:	481e      	ldr	r0, [pc, #120]	; (8011614 <__pow5mult+0xb0>)
 801159c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80115a0:	f000 fbd4 	bl	8011d4c <__assert_func>
 80115a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115a8:	6004      	str	r4, [r0, #0]
 80115aa:	60c4      	str	r4, [r0, #12]
 80115ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80115b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115b4:	b94c      	cbnz	r4, 80115ca <__pow5mult+0x66>
 80115b6:	f240 2171 	movw	r1, #625	; 0x271
 80115ba:	4630      	mov	r0, r6
 80115bc:	f7ff ff12 	bl	80113e4 <__i2b>
 80115c0:	2300      	movs	r3, #0
 80115c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80115c6:	4604      	mov	r4, r0
 80115c8:	6003      	str	r3, [r0, #0]
 80115ca:	f04f 0900 	mov.w	r9, #0
 80115ce:	07eb      	lsls	r3, r5, #31
 80115d0:	d50a      	bpl.n	80115e8 <__pow5mult+0x84>
 80115d2:	4639      	mov	r1, r7
 80115d4:	4622      	mov	r2, r4
 80115d6:	4630      	mov	r0, r6
 80115d8:	f7ff ff1a 	bl	8011410 <__multiply>
 80115dc:	4639      	mov	r1, r7
 80115de:	4680      	mov	r8, r0
 80115e0:	4630      	mov	r0, r6
 80115e2:	f7ff fe49 	bl	8011278 <_Bfree>
 80115e6:	4647      	mov	r7, r8
 80115e8:	106d      	asrs	r5, r5, #1
 80115ea:	d00b      	beq.n	8011604 <__pow5mult+0xa0>
 80115ec:	6820      	ldr	r0, [r4, #0]
 80115ee:	b938      	cbnz	r0, 8011600 <__pow5mult+0x9c>
 80115f0:	4622      	mov	r2, r4
 80115f2:	4621      	mov	r1, r4
 80115f4:	4630      	mov	r0, r6
 80115f6:	f7ff ff0b 	bl	8011410 <__multiply>
 80115fa:	6020      	str	r0, [r4, #0]
 80115fc:	f8c0 9000 	str.w	r9, [r0]
 8011600:	4604      	mov	r4, r0
 8011602:	e7e4      	b.n	80115ce <__pow5mult+0x6a>
 8011604:	4638      	mov	r0, r7
 8011606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801160a:	bf00      	nop
 801160c:	08013120 	.word	0x08013120
 8011610:	08012f51 	.word	0x08012f51
 8011614:	08012fd1 	.word	0x08012fd1

08011618 <__lshift>:
 8011618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801161c:	460c      	mov	r4, r1
 801161e:	6849      	ldr	r1, [r1, #4]
 8011620:	6923      	ldr	r3, [r4, #16]
 8011622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011626:	68a3      	ldr	r3, [r4, #8]
 8011628:	4607      	mov	r7, r0
 801162a:	4691      	mov	r9, r2
 801162c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011630:	f108 0601 	add.w	r6, r8, #1
 8011634:	42b3      	cmp	r3, r6
 8011636:	db0b      	blt.n	8011650 <__lshift+0x38>
 8011638:	4638      	mov	r0, r7
 801163a:	f7ff fddd 	bl	80111f8 <_Balloc>
 801163e:	4605      	mov	r5, r0
 8011640:	b948      	cbnz	r0, 8011656 <__lshift+0x3e>
 8011642:	4602      	mov	r2, r0
 8011644:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <__lshift+0xd0>)
 8011646:	4829      	ldr	r0, [pc, #164]	; (80116ec <__lshift+0xd4>)
 8011648:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801164c:	f000 fb7e 	bl	8011d4c <__assert_func>
 8011650:	3101      	adds	r1, #1
 8011652:	005b      	lsls	r3, r3, #1
 8011654:	e7ee      	b.n	8011634 <__lshift+0x1c>
 8011656:	2300      	movs	r3, #0
 8011658:	f100 0114 	add.w	r1, r0, #20
 801165c:	f100 0210 	add.w	r2, r0, #16
 8011660:	4618      	mov	r0, r3
 8011662:	4553      	cmp	r3, sl
 8011664:	db33      	blt.n	80116ce <__lshift+0xb6>
 8011666:	6920      	ldr	r0, [r4, #16]
 8011668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801166c:	f104 0314 	add.w	r3, r4, #20
 8011670:	f019 091f 	ands.w	r9, r9, #31
 8011674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801167c:	d02b      	beq.n	80116d6 <__lshift+0xbe>
 801167e:	f1c9 0e20 	rsb	lr, r9, #32
 8011682:	468a      	mov	sl, r1
 8011684:	2200      	movs	r2, #0
 8011686:	6818      	ldr	r0, [r3, #0]
 8011688:	fa00 f009 	lsl.w	r0, r0, r9
 801168c:	4310      	orrs	r0, r2
 801168e:	f84a 0b04 	str.w	r0, [sl], #4
 8011692:	f853 2b04 	ldr.w	r2, [r3], #4
 8011696:	459c      	cmp	ip, r3
 8011698:	fa22 f20e 	lsr.w	r2, r2, lr
 801169c:	d8f3      	bhi.n	8011686 <__lshift+0x6e>
 801169e:	ebac 0304 	sub.w	r3, ip, r4
 80116a2:	3b15      	subs	r3, #21
 80116a4:	f023 0303 	bic.w	r3, r3, #3
 80116a8:	3304      	adds	r3, #4
 80116aa:	f104 0015 	add.w	r0, r4, #21
 80116ae:	4584      	cmp	ip, r0
 80116b0:	bf38      	it	cc
 80116b2:	2304      	movcc	r3, #4
 80116b4:	50ca      	str	r2, [r1, r3]
 80116b6:	b10a      	cbz	r2, 80116bc <__lshift+0xa4>
 80116b8:	f108 0602 	add.w	r6, r8, #2
 80116bc:	3e01      	subs	r6, #1
 80116be:	4638      	mov	r0, r7
 80116c0:	612e      	str	r6, [r5, #16]
 80116c2:	4621      	mov	r1, r4
 80116c4:	f7ff fdd8 	bl	8011278 <_Bfree>
 80116c8:	4628      	mov	r0, r5
 80116ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80116d2:	3301      	adds	r3, #1
 80116d4:	e7c5      	b.n	8011662 <__lshift+0x4a>
 80116d6:	3904      	subs	r1, #4
 80116d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80116dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80116e0:	459c      	cmp	ip, r3
 80116e2:	d8f9      	bhi.n	80116d8 <__lshift+0xc0>
 80116e4:	e7ea      	b.n	80116bc <__lshift+0xa4>
 80116e6:	bf00      	nop
 80116e8:	08012fc0 	.word	0x08012fc0
 80116ec:	08012fd1 	.word	0x08012fd1

080116f0 <__mcmp>:
 80116f0:	b530      	push	{r4, r5, lr}
 80116f2:	6902      	ldr	r2, [r0, #16]
 80116f4:	690c      	ldr	r4, [r1, #16]
 80116f6:	1b12      	subs	r2, r2, r4
 80116f8:	d10e      	bne.n	8011718 <__mcmp+0x28>
 80116fa:	f100 0314 	add.w	r3, r0, #20
 80116fe:	3114      	adds	r1, #20
 8011700:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011708:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801170c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011710:	42a5      	cmp	r5, r4
 8011712:	d003      	beq.n	801171c <__mcmp+0x2c>
 8011714:	d305      	bcc.n	8011722 <__mcmp+0x32>
 8011716:	2201      	movs	r2, #1
 8011718:	4610      	mov	r0, r2
 801171a:	bd30      	pop	{r4, r5, pc}
 801171c:	4283      	cmp	r3, r0
 801171e:	d3f3      	bcc.n	8011708 <__mcmp+0x18>
 8011720:	e7fa      	b.n	8011718 <__mcmp+0x28>
 8011722:	f04f 32ff 	mov.w	r2, #4294967295
 8011726:	e7f7      	b.n	8011718 <__mcmp+0x28>

08011728 <__mdiff>:
 8011728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	460c      	mov	r4, r1
 801172e:	4606      	mov	r6, r0
 8011730:	4611      	mov	r1, r2
 8011732:	4620      	mov	r0, r4
 8011734:	4690      	mov	r8, r2
 8011736:	f7ff ffdb 	bl	80116f0 <__mcmp>
 801173a:	1e05      	subs	r5, r0, #0
 801173c:	d110      	bne.n	8011760 <__mdiff+0x38>
 801173e:	4629      	mov	r1, r5
 8011740:	4630      	mov	r0, r6
 8011742:	f7ff fd59 	bl	80111f8 <_Balloc>
 8011746:	b930      	cbnz	r0, 8011756 <__mdiff+0x2e>
 8011748:	4b3a      	ldr	r3, [pc, #232]	; (8011834 <__mdiff+0x10c>)
 801174a:	4602      	mov	r2, r0
 801174c:	f240 2137 	movw	r1, #567	; 0x237
 8011750:	4839      	ldr	r0, [pc, #228]	; (8011838 <__mdiff+0x110>)
 8011752:	f000 fafb 	bl	8011d4c <__assert_func>
 8011756:	2301      	movs	r3, #1
 8011758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801175c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011760:	bfa4      	itt	ge
 8011762:	4643      	movge	r3, r8
 8011764:	46a0      	movge	r8, r4
 8011766:	4630      	mov	r0, r6
 8011768:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801176c:	bfa6      	itte	ge
 801176e:	461c      	movge	r4, r3
 8011770:	2500      	movge	r5, #0
 8011772:	2501      	movlt	r5, #1
 8011774:	f7ff fd40 	bl	80111f8 <_Balloc>
 8011778:	b920      	cbnz	r0, 8011784 <__mdiff+0x5c>
 801177a:	4b2e      	ldr	r3, [pc, #184]	; (8011834 <__mdiff+0x10c>)
 801177c:	4602      	mov	r2, r0
 801177e:	f240 2145 	movw	r1, #581	; 0x245
 8011782:	e7e5      	b.n	8011750 <__mdiff+0x28>
 8011784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011788:	6926      	ldr	r6, [r4, #16]
 801178a:	60c5      	str	r5, [r0, #12]
 801178c:	f104 0914 	add.w	r9, r4, #20
 8011790:	f108 0514 	add.w	r5, r8, #20
 8011794:	f100 0e14 	add.w	lr, r0, #20
 8011798:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801179c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80117a0:	f108 0210 	add.w	r2, r8, #16
 80117a4:	46f2      	mov	sl, lr
 80117a6:	2100      	movs	r1, #0
 80117a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80117ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80117b0:	fa11 f88b 	uxtah	r8, r1, fp
 80117b4:	b299      	uxth	r1, r3
 80117b6:	0c1b      	lsrs	r3, r3, #16
 80117b8:	eba8 0801 	sub.w	r8, r8, r1
 80117bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117c4:	fa1f f888 	uxth.w	r8, r8
 80117c8:	1419      	asrs	r1, r3, #16
 80117ca:	454e      	cmp	r6, r9
 80117cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117d0:	f84a 3b04 	str.w	r3, [sl], #4
 80117d4:	d8e8      	bhi.n	80117a8 <__mdiff+0x80>
 80117d6:	1b33      	subs	r3, r6, r4
 80117d8:	3b15      	subs	r3, #21
 80117da:	f023 0303 	bic.w	r3, r3, #3
 80117de:	3304      	adds	r3, #4
 80117e0:	3415      	adds	r4, #21
 80117e2:	42a6      	cmp	r6, r4
 80117e4:	bf38      	it	cc
 80117e6:	2304      	movcc	r3, #4
 80117e8:	441d      	add	r5, r3
 80117ea:	4473      	add	r3, lr
 80117ec:	469e      	mov	lr, r3
 80117ee:	462e      	mov	r6, r5
 80117f0:	4566      	cmp	r6, ip
 80117f2:	d30e      	bcc.n	8011812 <__mdiff+0xea>
 80117f4:	f10c 0203 	add.w	r2, ip, #3
 80117f8:	1b52      	subs	r2, r2, r5
 80117fa:	f022 0203 	bic.w	r2, r2, #3
 80117fe:	3d03      	subs	r5, #3
 8011800:	45ac      	cmp	ip, r5
 8011802:	bf38      	it	cc
 8011804:	2200      	movcc	r2, #0
 8011806:	4413      	add	r3, r2
 8011808:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801180c:	b17a      	cbz	r2, 801182e <__mdiff+0x106>
 801180e:	6107      	str	r7, [r0, #16]
 8011810:	e7a4      	b.n	801175c <__mdiff+0x34>
 8011812:	f856 8b04 	ldr.w	r8, [r6], #4
 8011816:	fa11 f288 	uxtah	r2, r1, r8
 801181a:	1414      	asrs	r4, r2, #16
 801181c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011820:	b292      	uxth	r2, r2
 8011822:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011826:	f84e 2b04 	str.w	r2, [lr], #4
 801182a:	1421      	asrs	r1, r4, #16
 801182c:	e7e0      	b.n	80117f0 <__mdiff+0xc8>
 801182e:	3f01      	subs	r7, #1
 8011830:	e7ea      	b.n	8011808 <__mdiff+0xe0>
 8011832:	bf00      	nop
 8011834:	08012fc0 	.word	0x08012fc0
 8011838:	08012fd1 	.word	0x08012fd1

0801183c <__d2b>:
 801183c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011840:	460f      	mov	r7, r1
 8011842:	2101      	movs	r1, #1
 8011844:	ec59 8b10 	vmov	r8, r9, d0
 8011848:	4616      	mov	r6, r2
 801184a:	f7ff fcd5 	bl	80111f8 <_Balloc>
 801184e:	4604      	mov	r4, r0
 8011850:	b930      	cbnz	r0, 8011860 <__d2b+0x24>
 8011852:	4602      	mov	r2, r0
 8011854:	4b24      	ldr	r3, [pc, #144]	; (80118e8 <__d2b+0xac>)
 8011856:	4825      	ldr	r0, [pc, #148]	; (80118ec <__d2b+0xb0>)
 8011858:	f240 310f 	movw	r1, #783	; 0x30f
 801185c:	f000 fa76 	bl	8011d4c <__assert_func>
 8011860:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011868:	bb2d      	cbnz	r5, 80118b6 <__d2b+0x7a>
 801186a:	9301      	str	r3, [sp, #4]
 801186c:	f1b8 0300 	subs.w	r3, r8, #0
 8011870:	d026      	beq.n	80118c0 <__d2b+0x84>
 8011872:	4668      	mov	r0, sp
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	f7ff fd87 	bl	8011388 <__lo0bits>
 801187a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801187e:	b1e8      	cbz	r0, 80118bc <__d2b+0x80>
 8011880:	f1c0 0320 	rsb	r3, r0, #32
 8011884:	fa02 f303 	lsl.w	r3, r2, r3
 8011888:	430b      	orrs	r3, r1
 801188a:	40c2      	lsrs	r2, r0
 801188c:	6163      	str	r3, [r4, #20]
 801188e:	9201      	str	r2, [sp, #4]
 8011890:	9b01      	ldr	r3, [sp, #4]
 8011892:	61a3      	str	r3, [r4, #24]
 8011894:	2b00      	cmp	r3, #0
 8011896:	bf14      	ite	ne
 8011898:	2202      	movne	r2, #2
 801189a:	2201      	moveq	r2, #1
 801189c:	6122      	str	r2, [r4, #16]
 801189e:	b1bd      	cbz	r5, 80118d0 <__d2b+0x94>
 80118a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118a4:	4405      	add	r5, r0
 80118a6:	603d      	str	r5, [r7, #0]
 80118a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118ac:	6030      	str	r0, [r6, #0]
 80118ae:	4620      	mov	r0, r4
 80118b0:	b003      	add	sp, #12
 80118b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118ba:	e7d6      	b.n	801186a <__d2b+0x2e>
 80118bc:	6161      	str	r1, [r4, #20]
 80118be:	e7e7      	b.n	8011890 <__d2b+0x54>
 80118c0:	a801      	add	r0, sp, #4
 80118c2:	f7ff fd61 	bl	8011388 <__lo0bits>
 80118c6:	9b01      	ldr	r3, [sp, #4]
 80118c8:	6163      	str	r3, [r4, #20]
 80118ca:	3020      	adds	r0, #32
 80118cc:	2201      	movs	r2, #1
 80118ce:	e7e5      	b.n	801189c <__d2b+0x60>
 80118d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80118d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80118d8:	6038      	str	r0, [r7, #0]
 80118da:	6918      	ldr	r0, [r3, #16]
 80118dc:	f7ff fd34 	bl	8011348 <__hi0bits>
 80118e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80118e4:	e7e2      	b.n	80118ac <__d2b+0x70>
 80118e6:	bf00      	nop
 80118e8:	08012fc0 	.word	0x08012fc0
 80118ec:	08012fd1 	.word	0x08012fd1

080118f0 <__ssputs_r>:
 80118f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118f4:	688e      	ldr	r6, [r1, #8]
 80118f6:	461f      	mov	r7, r3
 80118f8:	42be      	cmp	r6, r7
 80118fa:	680b      	ldr	r3, [r1, #0]
 80118fc:	4682      	mov	sl, r0
 80118fe:	460c      	mov	r4, r1
 8011900:	4690      	mov	r8, r2
 8011902:	d82c      	bhi.n	801195e <__ssputs_r+0x6e>
 8011904:	898a      	ldrh	r2, [r1, #12]
 8011906:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801190a:	d026      	beq.n	801195a <__ssputs_r+0x6a>
 801190c:	6965      	ldr	r5, [r4, #20]
 801190e:	6909      	ldr	r1, [r1, #16]
 8011910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011914:	eba3 0901 	sub.w	r9, r3, r1
 8011918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801191c:	1c7b      	adds	r3, r7, #1
 801191e:	444b      	add	r3, r9
 8011920:	106d      	asrs	r5, r5, #1
 8011922:	429d      	cmp	r5, r3
 8011924:	bf38      	it	cc
 8011926:	461d      	movcc	r5, r3
 8011928:	0553      	lsls	r3, r2, #21
 801192a:	d527      	bpl.n	801197c <__ssputs_r+0x8c>
 801192c:	4629      	mov	r1, r5
 801192e:	f7fd ffa5 	bl	800f87c <_malloc_r>
 8011932:	4606      	mov	r6, r0
 8011934:	b360      	cbz	r0, 8011990 <__ssputs_r+0xa0>
 8011936:	6921      	ldr	r1, [r4, #16]
 8011938:	464a      	mov	r2, r9
 801193a:	f000 f9f9 	bl	8011d30 <memcpy>
 801193e:	89a3      	ldrh	r3, [r4, #12]
 8011940:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011948:	81a3      	strh	r3, [r4, #12]
 801194a:	6126      	str	r6, [r4, #16]
 801194c:	6165      	str	r5, [r4, #20]
 801194e:	444e      	add	r6, r9
 8011950:	eba5 0509 	sub.w	r5, r5, r9
 8011954:	6026      	str	r6, [r4, #0]
 8011956:	60a5      	str	r5, [r4, #8]
 8011958:	463e      	mov	r6, r7
 801195a:	42be      	cmp	r6, r7
 801195c:	d900      	bls.n	8011960 <__ssputs_r+0x70>
 801195e:	463e      	mov	r6, r7
 8011960:	6820      	ldr	r0, [r4, #0]
 8011962:	4632      	mov	r2, r6
 8011964:	4641      	mov	r1, r8
 8011966:	f000 f9c9 	bl	8011cfc <memmove>
 801196a:	68a3      	ldr	r3, [r4, #8]
 801196c:	1b9b      	subs	r3, r3, r6
 801196e:	60a3      	str	r3, [r4, #8]
 8011970:	6823      	ldr	r3, [r4, #0]
 8011972:	4433      	add	r3, r6
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	2000      	movs	r0, #0
 8011978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801197c:	462a      	mov	r2, r5
 801197e:	f000 fa2b 	bl	8011dd8 <_realloc_r>
 8011982:	4606      	mov	r6, r0
 8011984:	2800      	cmp	r0, #0
 8011986:	d1e0      	bne.n	801194a <__ssputs_r+0x5a>
 8011988:	6921      	ldr	r1, [r4, #16]
 801198a:	4650      	mov	r0, sl
 801198c:	f7ff fbe8 	bl	8011160 <_free_r>
 8011990:	230c      	movs	r3, #12
 8011992:	f8ca 3000 	str.w	r3, [sl]
 8011996:	89a3      	ldrh	r3, [r4, #12]
 8011998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801199c:	81a3      	strh	r3, [r4, #12]
 801199e:	f04f 30ff 	mov.w	r0, #4294967295
 80119a2:	e7e9      	b.n	8011978 <__ssputs_r+0x88>

080119a4 <_svfiprintf_r>:
 80119a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a8:	4698      	mov	r8, r3
 80119aa:	898b      	ldrh	r3, [r1, #12]
 80119ac:	061b      	lsls	r3, r3, #24
 80119ae:	b09d      	sub	sp, #116	; 0x74
 80119b0:	4607      	mov	r7, r0
 80119b2:	460d      	mov	r5, r1
 80119b4:	4614      	mov	r4, r2
 80119b6:	d50e      	bpl.n	80119d6 <_svfiprintf_r+0x32>
 80119b8:	690b      	ldr	r3, [r1, #16]
 80119ba:	b963      	cbnz	r3, 80119d6 <_svfiprintf_r+0x32>
 80119bc:	2140      	movs	r1, #64	; 0x40
 80119be:	f7fd ff5d 	bl	800f87c <_malloc_r>
 80119c2:	6028      	str	r0, [r5, #0]
 80119c4:	6128      	str	r0, [r5, #16]
 80119c6:	b920      	cbnz	r0, 80119d2 <_svfiprintf_r+0x2e>
 80119c8:	230c      	movs	r3, #12
 80119ca:	603b      	str	r3, [r7, #0]
 80119cc:	f04f 30ff 	mov.w	r0, #4294967295
 80119d0:	e0d0      	b.n	8011b74 <_svfiprintf_r+0x1d0>
 80119d2:	2340      	movs	r3, #64	; 0x40
 80119d4:	616b      	str	r3, [r5, #20]
 80119d6:	2300      	movs	r3, #0
 80119d8:	9309      	str	r3, [sp, #36]	; 0x24
 80119da:	2320      	movs	r3, #32
 80119dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80119e4:	2330      	movs	r3, #48	; 0x30
 80119e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011b8c <_svfiprintf_r+0x1e8>
 80119ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119ee:	f04f 0901 	mov.w	r9, #1
 80119f2:	4623      	mov	r3, r4
 80119f4:	469a      	mov	sl, r3
 80119f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119fa:	b10a      	cbz	r2, 8011a00 <_svfiprintf_r+0x5c>
 80119fc:	2a25      	cmp	r2, #37	; 0x25
 80119fe:	d1f9      	bne.n	80119f4 <_svfiprintf_r+0x50>
 8011a00:	ebba 0b04 	subs.w	fp, sl, r4
 8011a04:	d00b      	beq.n	8011a1e <_svfiprintf_r+0x7a>
 8011a06:	465b      	mov	r3, fp
 8011a08:	4622      	mov	r2, r4
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	f7ff ff6f 	bl	80118f0 <__ssputs_r>
 8011a12:	3001      	adds	r0, #1
 8011a14:	f000 80a9 	beq.w	8011b6a <_svfiprintf_r+0x1c6>
 8011a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a1a:	445a      	add	r2, fp
 8011a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f000 80a1 	beq.w	8011b6a <_svfiprintf_r+0x1c6>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a32:	f10a 0a01 	add.w	sl, sl, #1
 8011a36:	9304      	str	r3, [sp, #16]
 8011a38:	9307      	str	r3, [sp, #28]
 8011a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8011a40:	4654      	mov	r4, sl
 8011a42:	2205      	movs	r2, #5
 8011a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a48:	4850      	ldr	r0, [pc, #320]	; (8011b8c <_svfiprintf_r+0x1e8>)
 8011a4a:	f7ee fc49 	bl	80002e0 <memchr>
 8011a4e:	9a04      	ldr	r2, [sp, #16]
 8011a50:	b9d8      	cbnz	r0, 8011a8a <_svfiprintf_r+0xe6>
 8011a52:	06d0      	lsls	r0, r2, #27
 8011a54:	bf44      	itt	mi
 8011a56:	2320      	movmi	r3, #32
 8011a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a5c:	0711      	lsls	r1, r2, #28
 8011a5e:	bf44      	itt	mi
 8011a60:	232b      	movmi	r3, #43	; 0x2b
 8011a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a66:	f89a 3000 	ldrb.w	r3, [sl]
 8011a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8011a6c:	d015      	beq.n	8011a9a <_svfiprintf_r+0xf6>
 8011a6e:	9a07      	ldr	r2, [sp, #28]
 8011a70:	4654      	mov	r4, sl
 8011a72:	2000      	movs	r0, #0
 8011a74:	f04f 0c0a 	mov.w	ip, #10
 8011a78:	4621      	mov	r1, r4
 8011a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a7e:	3b30      	subs	r3, #48	; 0x30
 8011a80:	2b09      	cmp	r3, #9
 8011a82:	d94d      	bls.n	8011b20 <_svfiprintf_r+0x17c>
 8011a84:	b1b0      	cbz	r0, 8011ab4 <_svfiprintf_r+0x110>
 8011a86:	9207      	str	r2, [sp, #28]
 8011a88:	e014      	b.n	8011ab4 <_svfiprintf_r+0x110>
 8011a8a:	eba0 0308 	sub.w	r3, r0, r8
 8011a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8011a92:	4313      	orrs	r3, r2
 8011a94:	9304      	str	r3, [sp, #16]
 8011a96:	46a2      	mov	sl, r4
 8011a98:	e7d2      	b.n	8011a40 <_svfiprintf_r+0x9c>
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	1d19      	adds	r1, r3, #4
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	9103      	str	r1, [sp, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	bfbb      	ittet	lt
 8011aa6:	425b      	neglt	r3, r3
 8011aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8011aac:	9307      	strge	r3, [sp, #28]
 8011aae:	9307      	strlt	r3, [sp, #28]
 8011ab0:	bfb8      	it	lt
 8011ab2:	9204      	strlt	r2, [sp, #16]
 8011ab4:	7823      	ldrb	r3, [r4, #0]
 8011ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab8:	d10c      	bne.n	8011ad4 <_svfiprintf_r+0x130>
 8011aba:	7863      	ldrb	r3, [r4, #1]
 8011abc:	2b2a      	cmp	r3, #42	; 0x2a
 8011abe:	d134      	bne.n	8011b2a <_svfiprintf_r+0x186>
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	1d1a      	adds	r2, r3, #4
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	9203      	str	r2, [sp, #12]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	bfb8      	it	lt
 8011acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ad0:	3402      	adds	r4, #2
 8011ad2:	9305      	str	r3, [sp, #20]
 8011ad4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011b9c <_svfiprintf_r+0x1f8>
 8011ad8:	7821      	ldrb	r1, [r4, #0]
 8011ada:	2203      	movs	r2, #3
 8011adc:	4650      	mov	r0, sl
 8011ade:	f7ee fbff 	bl	80002e0 <memchr>
 8011ae2:	b138      	cbz	r0, 8011af4 <_svfiprintf_r+0x150>
 8011ae4:	9b04      	ldr	r3, [sp, #16]
 8011ae6:	eba0 000a 	sub.w	r0, r0, sl
 8011aea:	2240      	movs	r2, #64	; 0x40
 8011aec:	4082      	lsls	r2, r0
 8011aee:	4313      	orrs	r3, r2
 8011af0:	3401      	adds	r4, #1
 8011af2:	9304      	str	r3, [sp, #16]
 8011af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011af8:	4825      	ldr	r0, [pc, #148]	; (8011b90 <_svfiprintf_r+0x1ec>)
 8011afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011afe:	2206      	movs	r2, #6
 8011b00:	f7ee fbee 	bl	80002e0 <memchr>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d038      	beq.n	8011b7a <_svfiprintf_r+0x1d6>
 8011b08:	4b22      	ldr	r3, [pc, #136]	; (8011b94 <_svfiprintf_r+0x1f0>)
 8011b0a:	bb1b      	cbnz	r3, 8011b54 <_svfiprintf_r+0x1b0>
 8011b0c:	9b03      	ldr	r3, [sp, #12]
 8011b0e:	3307      	adds	r3, #7
 8011b10:	f023 0307 	bic.w	r3, r3, #7
 8011b14:	3308      	adds	r3, #8
 8011b16:	9303      	str	r3, [sp, #12]
 8011b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b1a:	4433      	add	r3, r6
 8011b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b1e:	e768      	b.n	80119f2 <_svfiprintf_r+0x4e>
 8011b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b24:	460c      	mov	r4, r1
 8011b26:	2001      	movs	r0, #1
 8011b28:	e7a6      	b.n	8011a78 <_svfiprintf_r+0xd4>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	3401      	adds	r4, #1
 8011b2e:	9305      	str	r3, [sp, #20]
 8011b30:	4619      	mov	r1, r3
 8011b32:	f04f 0c0a 	mov.w	ip, #10
 8011b36:	4620      	mov	r0, r4
 8011b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b3c:	3a30      	subs	r2, #48	; 0x30
 8011b3e:	2a09      	cmp	r2, #9
 8011b40:	d903      	bls.n	8011b4a <_svfiprintf_r+0x1a6>
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d0c6      	beq.n	8011ad4 <_svfiprintf_r+0x130>
 8011b46:	9105      	str	r1, [sp, #20]
 8011b48:	e7c4      	b.n	8011ad4 <_svfiprintf_r+0x130>
 8011b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b4e:	4604      	mov	r4, r0
 8011b50:	2301      	movs	r3, #1
 8011b52:	e7f0      	b.n	8011b36 <_svfiprintf_r+0x192>
 8011b54:	ab03      	add	r3, sp, #12
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	462a      	mov	r2, r5
 8011b5a:	4b0f      	ldr	r3, [pc, #60]	; (8011b98 <_svfiprintf_r+0x1f4>)
 8011b5c:	a904      	add	r1, sp, #16
 8011b5e:	4638      	mov	r0, r7
 8011b60:	f7fd ffaa 	bl	800fab8 <_printf_float>
 8011b64:	1c42      	adds	r2, r0, #1
 8011b66:	4606      	mov	r6, r0
 8011b68:	d1d6      	bne.n	8011b18 <_svfiprintf_r+0x174>
 8011b6a:	89ab      	ldrh	r3, [r5, #12]
 8011b6c:	065b      	lsls	r3, r3, #25
 8011b6e:	f53f af2d 	bmi.w	80119cc <_svfiprintf_r+0x28>
 8011b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b74:	b01d      	add	sp, #116	; 0x74
 8011b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7a:	ab03      	add	r3, sp, #12
 8011b7c:	9300      	str	r3, [sp, #0]
 8011b7e:	462a      	mov	r2, r5
 8011b80:	4b05      	ldr	r3, [pc, #20]	; (8011b98 <_svfiprintf_r+0x1f4>)
 8011b82:	a904      	add	r1, sp, #16
 8011b84:	4638      	mov	r0, r7
 8011b86:	f7fe fa1f 	bl	800ffc8 <_printf_i>
 8011b8a:	e7eb      	b.n	8011b64 <_svfiprintf_r+0x1c0>
 8011b8c:	0801312c 	.word	0x0801312c
 8011b90:	08013136 	.word	0x08013136
 8011b94:	0800fab9 	.word	0x0800fab9
 8011b98:	080118f1 	.word	0x080118f1
 8011b9c:	08013132 	.word	0x08013132

08011ba0 <__sflush_r>:
 8011ba0:	898a      	ldrh	r2, [r1, #12]
 8011ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba6:	4605      	mov	r5, r0
 8011ba8:	0710      	lsls	r0, r2, #28
 8011baa:	460c      	mov	r4, r1
 8011bac:	d458      	bmi.n	8011c60 <__sflush_r+0xc0>
 8011bae:	684b      	ldr	r3, [r1, #4]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	dc05      	bgt.n	8011bc0 <__sflush_r+0x20>
 8011bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	dc02      	bgt.n	8011bc0 <__sflush_r+0x20>
 8011bba:	2000      	movs	r0, #0
 8011bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bc2:	2e00      	cmp	r6, #0
 8011bc4:	d0f9      	beq.n	8011bba <__sflush_r+0x1a>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bcc:	682f      	ldr	r7, [r5, #0]
 8011bce:	6a21      	ldr	r1, [r4, #32]
 8011bd0:	602b      	str	r3, [r5, #0]
 8011bd2:	d032      	beq.n	8011c3a <__sflush_r+0x9a>
 8011bd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bd6:	89a3      	ldrh	r3, [r4, #12]
 8011bd8:	075a      	lsls	r2, r3, #29
 8011bda:	d505      	bpl.n	8011be8 <__sflush_r+0x48>
 8011bdc:	6863      	ldr	r3, [r4, #4]
 8011bde:	1ac0      	subs	r0, r0, r3
 8011be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011be2:	b10b      	cbz	r3, 8011be8 <__sflush_r+0x48>
 8011be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011be6:	1ac0      	subs	r0, r0, r3
 8011be8:	2300      	movs	r3, #0
 8011bea:	4602      	mov	r2, r0
 8011bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bee:	6a21      	ldr	r1, [r4, #32]
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	47b0      	blx	r6
 8011bf4:	1c43      	adds	r3, r0, #1
 8011bf6:	89a3      	ldrh	r3, [r4, #12]
 8011bf8:	d106      	bne.n	8011c08 <__sflush_r+0x68>
 8011bfa:	6829      	ldr	r1, [r5, #0]
 8011bfc:	291d      	cmp	r1, #29
 8011bfe:	d82b      	bhi.n	8011c58 <__sflush_r+0xb8>
 8011c00:	4a29      	ldr	r2, [pc, #164]	; (8011ca8 <__sflush_r+0x108>)
 8011c02:	410a      	asrs	r2, r1
 8011c04:	07d6      	lsls	r6, r2, #31
 8011c06:	d427      	bmi.n	8011c58 <__sflush_r+0xb8>
 8011c08:	2200      	movs	r2, #0
 8011c0a:	6062      	str	r2, [r4, #4]
 8011c0c:	04d9      	lsls	r1, r3, #19
 8011c0e:	6922      	ldr	r2, [r4, #16]
 8011c10:	6022      	str	r2, [r4, #0]
 8011c12:	d504      	bpl.n	8011c1e <__sflush_r+0x7e>
 8011c14:	1c42      	adds	r2, r0, #1
 8011c16:	d101      	bne.n	8011c1c <__sflush_r+0x7c>
 8011c18:	682b      	ldr	r3, [r5, #0]
 8011c1a:	b903      	cbnz	r3, 8011c1e <__sflush_r+0x7e>
 8011c1c:	6560      	str	r0, [r4, #84]	; 0x54
 8011c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c20:	602f      	str	r7, [r5, #0]
 8011c22:	2900      	cmp	r1, #0
 8011c24:	d0c9      	beq.n	8011bba <__sflush_r+0x1a>
 8011c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c2a:	4299      	cmp	r1, r3
 8011c2c:	d002      	beq.n	8011c34 <__sflush_r+0x94>
 8011c2e:	4628      	mov	r0, r5
 8011c30:	f7ff fa96 	bl	8011160 <_free_r>
 8011c34:	2000      	movs	r0, #0
 8011c36:	6360      	str	r0, [r4, #52]	; 0x34
 8011c38:	e7c0      	b.n	8011bbc <__sflush_r+0x1c>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	47b0      	blx	r6
 8011c40:	1c41      	adds	r1, r0, #1
 8011c42:	d1c8      	bne.n	8011bd6 <__sflush_r+0x36>
 8011c44:	682b      	ldr	r3, [r5, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d0c5      	beq.n	8011bd6 <__sflush_r+0x36>
 8011c4a:	2b1d      	cmp	r3, #29
 8011c4c:	d001      	beq.n	8011c52 <__sflush_r+0xb2>
 8011c4e:	2b16      	cmp	r3, #22
 8011c50:	d101      	bne.n	8011c56 <__sflush_r+0xb6>
 8011c52:	602f      	str	r7, [r5, #0]
 8011c54:	e7b1      	b.n	8011bba <__sflush_r+0x1a>
 8011c56:	89a3      	ldrh	r3, [r4, #12]
 8011c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5c:	81a3      	strh	r3, [r4, #12]
 8011c5e:	e7ad      	b.n	8011bbc <__sflush_r+0x1c>
 8011c60:	690f      	ldr	r7, [r1, #16]
 8011c62:	2f00      	cmp	r7, #0
 8011c64:	d0a9      	beq.n	8011bba <__sflush_r+0x1a>
 8011c66:	0793      	lsls	r3, r2, #30
 8011c68:	680e      	ldr	r6, [r1, #0]
 8011c6a:	bf08      	it	eq
 8011c6c:	694b      	ldreq	r3, [r1, #20]
 8011c6e:	600f      	str	r7, [r1, #0]
 8011c70:	bf18      	it	ne
 8011c72:	2300      	movne	r3, #0
 8011c74:	eba6 0807 	sub.w	r8, r6, r7
 8011c78:	608b      	str	r3, [r1, #8]
 8011c7a:	f1b8 0f00 	cmp.w	r8, #0
 8011c7e:	dd9c      	ble.n	8011bba <__sflush_r+0x1a>
 8011c80:	6a21      	ldr	r1, [r4, #32]
 8011c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c84:	4643      	mov	r3, r8
 8011c86:	463a      	mov	r2, r7
 8011c88:	4628      	mov	r0, r5
 8011c8a:	47b0      	blx	r6
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	dc06      	bgt.n	8011c9e <__sflush_r+0xfe>
 8011c90:	89a3      	ldrh	r3, [r4, #12]
 8011c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c96:	81a3      	strh	r3, [r4, #12]
 8011c98:	f04f 30ff 	mov.w	r0, #4294967295
 8011c9c:	e78e      	b.n	8011bbc <__sflush_r+0x1c>
 8011c9e:	4407      	add	r7, r0
 8011ca0:	eba8 0800 	sub.w	r8, r8, r0
 8011ca4:	e7e9      	b.n	8011c7a <__sflush_r+0xda>
 8011ca6:	bf00      	nop
 8011ca8:	dfbffffe 	.word	0xdfbffffe

08011cac <_fflush_r>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	690b      	ldr	r3, [r1, #16]
 8011cb0:	4605      	mov	r5, r0
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	b913      	cbnz	r3, 8011cbc <_fflush_r+0x10>
 8011cb6:	2500      	movs	r5, #0
 8011cb8:	4628      	mov	r0, r5
 8011cba:	bd38      	pop	{r3, r4, r5, pc}
 8011cbc:	b118      	cbz	r0, 8011cc6 <_fflush_r+0x1a>
 8011cbe:	6a03      	ldr	r3, [r0, #32]
 8011cc0:	b90b      	cbnz	r3, 8011cc6 <_fflush_r+0x1a>
 8011cc2:	f7fe fb2f 	bl	8010324 <__sinit>
 8011cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d0f3      	beq.n	8011cb6 <_fflush_r+0xa>
 8011cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cd0:	07d0      	lsls	r0, r2, #31
 8011cd2:	d404      	bmi.n	8011cde <_fflush_r+0x32>
 8011cd4:	0599      	lsls	r1, r3, #22
 8011cd6:	d402      	bmi.n	8011cde <_fflush_r+0x32>
 8011cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cda:	f7fe fc4a 	bl	8010572 <__retarget_lock_acquire_recursive>
 8011cde:	4628      	mov	r0, r5
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	f7ff ff5d 	bl	8011ba0 <__sflush_r>
 8011ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ce8:	07da      	lsls	r2, r3, #31
 8011cea:	4605      	mov	r5, r0
 8011cec:	d4e4      	bmi.n	8011cb8 <_fflush_r+0xc>
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	059b      	lsls	r3, r3, #22
 8011cf2:	d4e1      	bmi.n	8011cb8 <_fflush_r+0xc>
 8011cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cf6:	f7fe fc3d 	bl	8010574 <__retarget_lock_release_recursive>
 8011cfa:	e7dd      	b.n	8011cb8 <_fflush_r+0xc>

08011cfc <memmove>:
 8011cfc:	4288      	cmp	r0, r1
 8011cfe:	b510      	push	{r4, lr}
 8011d00:	eb01 0402 	add.w	r4, r1, r2
 8011d04:	d902      	bls.n	8011d0c <memmove+0x10>
 8011d06:	4284      	cmp	r4, r0
 8011d08:	4623      	mov	r3, r4
 8011d0a:	d807      	bhi.n	8011d1c <memmove+0x20>
 8011d0c:	1e43      	subs	r3, r0, #1
 8011d0e:	42a1      	cmp	r1, r4
 8011d10:	d008      	beq.n	8011d24 <memmove+0x28>
 8011d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d1a:	e7f8      	b.n	8011d0e <memmove+0x12>
 8011d1c:	4402      	add	r2, r0
 8011d1e:	4601      	mov	r1, r0
 8011d20:	428a      	cmp	r2, r1
 8011d22:	d100      	bne.n	8011d26 <memmove+0x2a>
 8011d24:	bd10      	pop	{r4, pc}
 8011d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d2e:	e7f7      	b.n	8011d20 <memmove+0x24>

08011d30 <memcpy>:
 8011d30:	440a      	add	r2, r1
 8011d32:	4291      	cmp	r1, r2
 8011d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d38:	d100      	bne.n	8011d3c <memcpy+0xc>
 8011d3a:	4770      	bx	lr
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d46:	4291      	cmp	r1, r2
 8011d48:	d1f9      	bne.n	8011d3e <memcpy+0xe>
 8011d4a:	bd10      	pop	{r4, pc}

08011d4c <__assert_func>:
 8011d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d4e:	4614      	mov	r4, r2
 8011d50:	461a      	mov	r2, r3
 8011d52:	4b09      	ldr	r3, [pc, #36]	; (8011d78 <__assert_func+0x2c>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4605      	mov	r5, r0
 8011d58:	68d8      	ldr	r0, [r3, #12]
 8011d5a:	b14c      	cbz	r4, 8011d70 <__assert_func+0x24>
 8011d5c:	4b07      	ldr	r3, [pc, #28]	; (8011d7c <__assert_func+0x30>)
 8011d5e:	9100      	str	r1, [sp, #0]
 8011d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d64:	4906      	ldr	r1, [pc, #24]	; (8011d80 <__assert_func+0x34>)
 8011d66:	462b      	mov	r3, r5
 8011d68:	f000 f872 	bl	8011e50 <fiprintf>
 8011d6c:	f000 f882 	bl	8011e74 <abort>
 8011d70:	4b04      	ldr	r3, [pc, #16]	; (8011d84 <__assert_func+0x38>)
 8011d72:	461c      	mov	r4, r3
 8011d74:	e7f3      	b.n	8011d5e <__assert_func+0x12>
 8011d76:	bf00      	nop
 8011d78:	24000160 	.word	0x24000160
 8011d7c:	08013147 	.word	0x08013147
 8011d80:	08013154 	.word	0x08013154
 8011d84:	08013182 	.word	0x08013182

08011d88 <_calloc_r>:
 8011d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d8a:	fba1 2402 	umull	r2, r4, r1, r2
 8011d8e:	b94c      	cbnz	r4, 8011da4 <_calloc_r+0x1c>
 8011d90:	4611      	mov	r1, r2
 8011d92:	9201      	str	r2, [sp, #4]
 8011d94:	f7fd fd72 	bl	800f87c <_malloc_r>
 8011d98:	9a01      	ldr	r2, [sp, #4]
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b930      	cbnz	r0, 8011dac <_calloc_r+0x24>
 8011d9e:	4628      	mov	r0, r5
 8011da0:	b003      	add	sp, #12
 8011da2:	bd30      	pop	{r4, r5, pc}
 8011da4:	220c      	movs	r2, #12
 8011da6:	6002      	str	r2, [r0, #0]
 8011da8:	2500      	movs	r5, #0
 8011daa:	e7f8      	b.n	8011d9e <_calloc_r+0x16>
 8011dac:	4621      	mov	r1, r4
 8011dae:	f7fe fb52 	bl	8010456 <memset>
 8011db2:	e7f4      	b.n	8011d9e <_calloc_r+0x16>

08011db4 <__ascii_mbtowc>:
 8011db4:	b082      	sub	sp, #8
 8011db6:	b901      	cbnz	r1, 8011dba <__ascii_mbtowc+0x6>
 8011db8:	a901      	add	r1, sp, #4
 8011dba:	b142      	cbz	r2, 8011dce <__ascii_mbtowc+0x1a>
 8011dbc:	b14b      	cbz	r3, 8011dd2 <__ascii_mbtowc+0x1e>
 8011dbe:	7813      	ldrb	r3, [r2, #0]
 8011dc0:	600b      	str	r3, [r1, #0]
 8011dc2:	7812      	ldrb	r2, [r2, #0]
 8011dc4:	1e10      	subs	r0, r2, #0
 8011dc6:	bf18      	it	ne
 8011dc8:	2001      	movne	r0, #1
 8011dca:	b002      	add	sp, #8
 8011dcc:	4770      	bx	lr
 8011dce:	4610      	mov	r0, r2
 8011dd0:	e7fb      	b.n	8011dca <__ascii_mbtowc+0x16>
 8011dd2:	f06f 0001 	mvn.w	r0, #1
 8011dd6:	e7f8      	b.n	8011dca <__ascii_mbtowc+0x16>

08011dd8 <_realloc_r>:
 8011dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ddc:	4680      	mov	r8, r0
 8011dde:	4614      	mov	r4, r2
 8011de0:	460e      	mov	r6, r1
 8011de2:	b921      	cbnz	r1, 8011dee <_realloc_r+0x16>
 8011de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011de8:	4611      	mov	r1, r2
 8011dea:	f7fd bd47 	b.w	800f87c <_malloc_r>
 8011dee:	b92a      	cbnz	r2, 8011dfc <_realloc_r+0x24>
 8011df0:	f7ff f9b6 	bl	8011160 <_free_r>
 8011df4:	4625      	mov	r5, r4
 8011df6:	4628      	mov	r0, r5
 8011df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dfc:	f000 f841 	bl	8011e82 <_malloc_usable_size_r>
 8011e00:	4284      	cmp	r4, r0
 8011e02:	4607      	mov	r7, r0
 8011e04:	d802      	bhi.n	8011e0c <_realloc_r+0x34>
 8011e06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e0a:	d812      	bhi.n	8011e32 <_realloc_r+0x5a>
 8011e0c:	4621      	mov	r1, r4
 8011e0e:	4640      	mov	r0, r8
 8011e10:	f7fd fd34 	bl	800f87c <_malloc_r>
 8011e14:	4605      	mov	r5, r0
 8011e16:	2800      	cmp	r0, #0
 8011e18:	d0ed      	beq.n	8011df6 <_realloc_r+0x1e>
 8011e1a:	42bc      	cmp	r4, r7
 8011e1c:	4622      	mov	r2, r4
 8011e1e:	4631      	mov	r1, r6
 8011e20:	bf28      	it	cs
 8011e22:	463a      	movcs	r2, r7
 8011e24:	f7ff ff84 	bl	8011d30 <memcpy>
 8011e28:	4631      	mov	r1, r6
 8011e2a:	4640      	mov	r0, r8
 8011e2c:	f7ff f998 	bl	8011160 <_free_r>
 8011e30:	e7e1      	b.n	8011df6 <_realloc_r+0x1e>
 8011e32:	4635      	mov	r5, r6
 8011e34:	e7df      	b.n	8011df6 <_realloc_r+0x1e>

08011e36 <__ascii_wctomb>:
 8011e36:	b149      	cbz	r1, 8011e4c <__ascii_wctomb+0x16>
 8011e38:	2aff      	cmp	r2, #255	; 0xff
 8011e3a:	bf85      	ittet	hi
 8011e3c:	238a      	movhi	r3, #138	; 0x8a
 8011e3e:	6003      	strhi	r3, [r0, #0]
 8011e40:	700a      	strbls	r2, [r1, #0]
 8011e42:	f04f 30ff 	movhi.w	r0, #4294967295
 8011e46:	bf98      	it	ls
 8011e48:	2001      	movls	r0, #1
 8011e4a:	4770      	bx	lr
 8011e4c:	4608      	mov	r0, r1
 8011e4e:	4770      	bx	lr

08011e50 <fiprintf>:
 8011e50:	b40e      	push	{r1, r2, r3}
 8011e52:	b503      	push	{r0, r1, lr}
 8011e54:	4601      	mov	r1, r0
 8011e56:	ab03      	add	r3, sp, #12
 8011e58:	4805      	ldr	r0, [pc, #20]	; (8011e70 <fiprintf+0x20>)
 8011e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5e:	6800      	ldr	r0, [r0, #0]
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	f000 f83f 	bl	8011ee4 <_vfiprintf_r>
 8011e66:	b002      	add	sp, #8
 8011e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e6c:	b003      	add	sp, #12
 8011e6e:	4770      	bx	lr
 8011e70:	24000160 	.word	0x24000160

08011e74 <abort>:
 8011e74:	b508      	push	{r3, lr}
 8011e76:	2006      	movs	r0, #6
 8011e78:	f000 fa0c 	bl	8012294 <raise>
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	f7ef f84b 	bl	8000f18 <_exit>

08011e82 <_malloc_usable_size_r>:
 8011e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e86:	1f18      	subs	r0, r3, #4
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	bfbc      	itt	lt
 8011e8c:	580b      	ldrlt	r3, [r1, r0]
 8011e8e:	18c0      	addlt	r0, r0, r3
 8011e90:	4770      	bx	lr

08011e92 <__sfputc_r>:
 8011e92:	6893      	ldr	r3, [r2, #8]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	b410      	push	{r4}
 8011e9a:	6093      	str	r3, [r2, #8]
 8011e9c:	da08      	bge.n	8011eb0 <__sfputc_r+0x1e>
 8011e9e:	6994      	ldr	r4, [r2, #24]
 8011ea0:	42a3      	cmp	r3, r4
 8011ea2:	db01      	blt.n	8011ea8 <__sfputc_r+0x16>
 8011ea4:	290a      	cmp	r1, #10
 8011ea6:	d103      	bne.n	8011eb0 <__sfputc_r+0x1e>
 8011ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011eac:	f000 b934 	b.w	8012118 <__swbuf_r>
 8011eb0:	6813      	ldr	r3, [r2, #0]
 8011eb2:	1c58      	adds	r0, r3, #1
 8011eb4:	6010      	str	r0, [r2, #0]
 8011eb6:	7019      	strb	r1, [r3, #0]
 8011eb8:	4608      	mov	r0, r1
 8011eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <__sfputs_r>:
 8011ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec2:	4606      	mov	r6, r0
 8011ec4:	460f      	mov	r7, r1
 8011ec6:	4614      	mov	r4, r2
 8011ec8:	18d5      	adds	r5, r2, r3
 8011eca:	42ac      	cmp	r4, r5
 8011ecc:	d101      	bne.n	8011ed2 <__sfputs_r+0x12>
 8011ece:	2000      	movs	r0, #0
 8011ed0:	e007      	b.n	8011ee2 <__sfputs_r+0x22>
 8011ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed6:	463a      	mov	r2, r7
 8011ed8:	4630      	mov	r0, r6
 8011eda:	f7ff ffda 	bl	8011e92 <__sfputc_r>
 8011ede:	1c43      	adds	r3, r0, #1
 8011ee0:	d1f3      	bne.n	8011eca <__sfputs_r+0xa>
 8011ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ee4 <_vfiprintf_r>:
 8011ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee8:	460d      	mov	r5, r1
 8011eea:	b09d      	sub	sp, #116	; 0x74
 8011eec:	4614      	mov	r4, r2
 8011eee:	4698      	mov	r8, r3
 8011ef0:	4606      	mov	r6, r0
 8011ef2:	b118      	cbz	r0, 8011efc <_vfiprintf_r+0x18>
 8011ef4:	6a03      	ldr	r3, [r0, #32]
 8011ef6:	b90b      	cbnz	r3, 8011efc <_vfiprintf_r+0x18>
 8011ef8:	f7fe fa14 	bl	8010324 <__sinit>
 8011efc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011efe:	07d9      	lsls	r1, r3, #31
 8011f00:	d405      	bmi.n	8011f0e <_vfiprintf_r+0x2a>
 8011f02:	89ab      	ldrh	r3, [r5, #12]
 8011f04:	059a      	lsls	r2, r3, #22
 8011f06:	d402      	bmi.n	8011f0e <_vfiprintf_r+0x2a>
 8011f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f0a:	f7fe fb32 	bl	8010572 <__retarget_lock_acquire_recursive>
 8011f0e:	89ab      	ldrh	r3, [r5, #12]
 8011f10:	071b      	lsls	r3, r3, #28
 8011f12:	d501      	bpl.n	8011f18 <_vfiprintf_r+0x34>
 8011f14:	692b      	ldr	r3, [r5, #16]
 8011f16:	b99b      	cbnz	r3, 8011f40 <_vfiprintf_r+0x5c>
 8011f18:	4629      	mov	r1, r5
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f000 f93a 	bl	8012194 <__swsetup_r>
 8011f20:	b170      	cbz	r0, 8011f40 <_vfiprintf_r+0x5c>
 8011f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f24:	07dc      	lsls	r4, r3, #31
 8011f26:	d504      	bpl.n	8011f32 <_vfiprintf_r+0x4e>
 8011f28:	f04f 30ff 	mov.w	r0, #4294967295
 8011f2c:	b01d      	add	sp, #116	; 0x74
 8011f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f32:	89ab      	ldrh	r3, [r5, #12]
 8011f34:	0598      	lsls	r0, r3, #22
 8011f36:	d4f7      	bmi.n	8011f28 <_vfiprintf_r+0x44>
 8011f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f3a:	f7fe fb1b 	bl	8010574 <__retarget_lock_release_recursive>
 8011f3e:	e7f3      	b.n	8011f28 <_vfiprintf_r+0x44>
 8011f40:	2300      	movs	r3, #0
 8011f42:	9309      	str	r3, [sp, #36]	; 0x24
 8011f44:	2320      	movs	r3, #32
 8011f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f4e:	2330      	movs	r3, #48	; 0x30
 8011f50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012104 <_vfiprintf_r+0x220>
 8011f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f58:	f04f 0901 	mov.w	r9, #1
 8011f5c:	4623      	mov	r3, r4
 8011f5e:	469a      	mov	sl, r3
 8011f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f64:	b10a      	cbz	r2, 8011f6a <_vfiprintf_r+0x86>
 8011f66:	2a25      	cmp	r2, #37	; 0x25
 8011f68:	d1f9      	bne.n	8011f5e <_vfiprintf_r+0x7a>
 8011f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8011f6e:	d00b      	beq.n	8011f88 <_vfiprintf_r+0xa4>
 8011f70:	465b      	mov	r3, fp
 8011f72:	4622      	mov	r2, r4
 8011f74:	4629      	mov	r1, r5
 8011f76:	4630      	mov	r0, r6
 8011f78:	f7ff ffa2 	bl	8011ec0 <__sfputs_r>
 8011f7c:	3001      	adds	r0, #1
 8011f7e:	f000 80a9 	beq.w	80120d4 <_vfiprintf_r+0x1f0>
 8011f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f84:	445a      	add	r2, fp
 8011f86:	9209      	str	r2, [sp, #36]	; 0x24
 8011f88:	f89a 3000 	ldrb.w	r3, [sl]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f000 80a1 	beq.w	80120d4 <_vfiprintf_r+0x1f0>
 8011f92:	2300      	movs	r3, #0
 8011f94:	f04f 32ff 	mov.w	r2, #4294967295
 8011f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f9c:	f10a 0a01 	add.w	sl, sl, #1
 8011fa0:	9304      	str	r3, [sp, #16]
 8011fa2:	9307      	str	r3, [sp, #28]
 8011fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8011faa:	4654      	mov	r4, sl
 8011fac:	2205      	movs	r2, #5
 8011fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb2:	4854      	ldr	r0, [pc, #336]	; (8012104 <_vfiprintf_r+0x220>)
 8011fb4:	f7ee f994 	bl	80002e0 <memchr>
 8011fb8:	9a04      	ldr	r2, [sp, #16]
 8011fba:	b9d8      	cbnz	r0, 8011ff4 <_vfiprintf_r+0x110>
 8011fbc:	06d1      	lsls	r1, r2, #27
 8011fbe:	bf44      	itt	mi
 8011fc0:	2320      	movmi	r3, #32
 8011fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fc6:	0713      	lsls	r3, r2, #28
 8011fc8:	bf44      	itt	mi
 8011fca:	232b      	movmi	r3, #43	; 0x2b
 8011fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8011fd6:	d015      	beq.n	8012004 <_vfiprintf_r+0x120>
 8011fd8:	9a07      	ldr	r2, [sp, #28]
 8011fda:	4654      	mov	r4, sl
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f04f 0c0a 	mov.w	ip, #10
 8011fe2:	4621      	mov	r1, r4
 8011fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fe8:	3b30      	subs	r3, #48	; 0x30
 8011fea:	2b09      	cmp	r3, #9
 8011fec:	d94d      	bls.n	801208a <_vfiprintf_r+0x1a6>
 8011fee:	b1b0      	cbz	r0, 801201e <_vfiprintf_r+0x13a>
 8011ff0:	9207      	str	r2, [sp, #28]
 8011ff2:	e014      	b.n	801201e <_vfiprintf_r+0x13a>
 8011ff4:	eba0 0308 	sub.w	r3, r0, r8
 8011ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	9304      	str	r3, [sp, #16]
 8012000:	46a2      	mov	sl, r4
 8012002:	e7d2      	b.n	8011faa <_vfiprintf_r+0xc6>
 8012004:	9b03      	ldr	r3, [sp, #12]
 8012006:	1d19      	adds	r1, r3, #4
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	9103      	str	r1, [sp, #12]
 801200c:	2b00      	cmp	r3, #0
 801200e:	bfbb      	ittet	lt
 8012010:	425b      	neglt	r3, r3
 8012012:	f042 0202 	orrlt.w	r2, r2, #2
 8012016:	9307      	strge	r3, [sp, #28]
 8012018:	9307      	strlt	r3, [sp, #28]
 801201a:	bfb8      	it	lt
 801201c:	9204      	strlt	r2, [sp, #16]
 801201e:	7823      	ldrb	r3, [r4, #0]
 8012020:	2b2e      	cmp	r3, #46	; 0x2e
 8012022:	d10c      	bne.n	801203e <_vfiprintf_r+0x15a>
 8012024:	7863      	ldrb	r3, [r4, #1]
 8012026:	2b2a      	cmp	r3, #42	; 0x2a
 8012028:	d134      	bne.n	8012094 <_vfiprintf_r+0x1b0>
 801202a:	9b03      	ldr	r3, [sp, #12]
 801202c:	1d1a      	adds	r2, r3, #4
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	9203      	str	r2, [sp, #12]
 8012032:	2b00      	cmp	r3, #0
 8012034:	bfb8      	it	lt
 8012036:	f04f 33ff 	movlt.w	r3, #4294967295
 801203a:	3402      	adds	r4, #2
 801203c:	9305      	str	r3, [sp, #20]
 801203e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012114 <_vfiprintf_r+0x230>
 8012042:	7821      	ldrb	r1, [r4, #0]
 8012044:	2203      	movs	r2, #3
 8012046:	4650      	mov	r0, sl
 8012048:	f7ee f94a 	bl	80002e0 <memchr>
 801204c:	b138      	cbz	r0, 801205e <_vfiprintf_r+0x17a>
 801204e:	9b04      	ldr	r3, [sp, #16]
 8012050:	eba0 000a 	sub.w	r0, r0, sl
 8012054:	2240      	movs	r2, #64	; 0x40
 8012056:	4082      	lsls	r2, r0
 8012058:	4313      	orrs	r3, r2
 801205a:	3401      	adds	r4, #1
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012062:	4829      	ldr	r0, [pc, #164]	; (8012108 <_vfiprintf_r+0x224>)
 8012064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012068:	2206      	movs	r2, #6
 801206a:	f7ee f939 	bl	80002e0 <memchr>
 801206e:	2800      	cmp	r0, #0
 8012070:	d03f      	beq.n	80120f2 <_vfiprintf_r+0x20e>
 8012072:	4b26      	ldr	r3, [pc, #152]	; (801210c <_vfiprintf_r+0x228>)
 8012074:	bb1b      	cbnz	r3, 80120be <_vfiprintf_r+0x1da>
 8012076:	9b03      	ldr	r3, [sp, #12]
 8012078:	3307      	adds	r3, #7
 801207a:	f023 0307 	bic.w	r3, r3, #7
 801207e:	3308      	adds	r3, #8
 8012080:	9303      	str	r3, [sp, #12]
 8012082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012084:	443b      	add	r3, r7
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	e768      	b.n	8011f5c <_vfiprintf_r+0x78>
 801208a:	fb0c 3202 	mla	r2, ip, r2, r3
 801208e:	460c      	mov	r4, r1
 8012090:	2001      	movs	r0, #1
 8012092:	e7a6      	b.n	8011fe2 <_vfiprintf_r+0xfe>
 8012094:	2300      	movs	r3, #0
 8012096:	3401      	adds	r4, #1
 8012098:	9305      	str	r3, [sp, #20]
 801209a:	4619      	mov	r1, r3
 801209c:	f04f 0c0a 	mov.w	ip, #10
 80120a0:	4620      	mov	r0, r4
 80120a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120a6:	3a30      	subs	r2, #48	; 0x30
 80120a8:	2a09      	cmp	r2, #9
 80120aa:	d903      	bls.n	80120b4 <_vfiprintf_r+0x1d0>
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d0c6      	beq.n	801203e <_vfiprintf_r+0x15a>
 80120b0:	9105      	str	r1, [sp, #20]
 80120b2:	e7c4      	b.n	801203e <_vfiprintf_r+0x15a>
 80120b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80120b8:	4604      	mov	r4, r0
 80120ba:	2301      	movs	r3, #1
 80120bc:	e7f0      	b.n	80120a0 <_vfiprintf_r+0x1bc>
 80120be:	ab03      	add	r3, sp, #12
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	462a      	mov	r2, r5
 80120c4:	4b12      	ldr	r3, [pc, #72]	; (8012110 <_vfiprintf_r+0x22c>)
 80120c6:	a904      	add	r1, sp, #16
 80120c8:	4630      	mov	r0, r6
 80120ca:	f7fd fcf5 	bl	800fab8 <_printf_float>
 80120ce:	4607      	mov	r7, r0
 80120d0:	1c78      	adds	r0, r7, #1
 80120d2:	d1d6      	bne.n	8012082 <_vfiprintf_r+0x19e>
 80120d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120d6:	07d9      	lsls	r1, r3, #31
 80120d8:	d405      	bmi.n	80120e6 <_vfiprintf_r+0x202>
 80120da:	89ab      	ldrh	r3, [r5, #12]
 80120dc:	059a      	lsls	r2, r3, #22
 80120de:	d402      	bmi.n	80120e6 <_vfiprintf_r+0x202>
 80120e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120e2:	f7fe fa47 	bl	8010574 <__retarget_lock_release_recursive>
 80120e6:	89ab      	ldrh	r3, [r5, #12]
 80120e8:	065b      	lsls	r3, r3, #25
 80120ea:	f53f af1d 	bmi.w	8011f28 <_vfiprintf_r+0x44>
 80120ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120f0:	e71c      	b.n	8011f2c <_vfiprintf_r+0x48>
 80120f2:	ab03      	add	r3, sp, #12
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	462a      	mov	r2, r5
 80120f8:	4b05      	ldr	r3, [pc, #20]	; (8012110 <_vfiprintf_r+0x22c>)
 80120fa:	a904      	add	r1, sp, #16
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7fd ff63 	bl	800ffc8 <_printf_i>
 8012102:	e7e4      	b.n	80120ce <_vfiprintf_r+0x1ea>
 8012104:	0801312c 	.word	0x0801312c
 8012108:	08013136 	.word	0x08013136
 801210c:	0800fab9 	.word	0x0800fab9
 8012110:	08011ec1 	.word	0x08011ec1
 8012114:	08013132 	.word	0x08013132

08012118 <__swbuf_r>:
 8012118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801211a:	460e      	mov	r6, r1
 801211c:	4614      	mov	r4, r2
 801211e:	4605      	mov	r5, r0
 8012120:	b118      	cbz	r0, 801212a <__swbuf_r+0x12>
 8012122:	6a03      	ldr	r3, [r0, #32]
 8012124:	b90b      	cbnz	r3, 801212a <__swbuf_r+0x12>
 8012126:	f7fe f8fd 	bl	8010324 <__sinit>
 801212a:	69a3      	ldr	r3, [r4, #24]
 801212c:	60a3      	str	r3, [r4, #8]
 801212e:	89a3      	ldrh	r3, [r4, #12]
 8012130:	071a      	lsls	r2, r3, #28
 8012132:	d525      	bpl.n	8012180 <__swbuf_r+0x68>
 8012134:	6923      	ldr	r3, [r4, #16]
 8012136:	b31b      	cbz	r3, 8012180 <__swbuf_r+0x68>
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	6922      	ldr	r2, [r4, #16]
 801213c:	1a98      	subs	r0, r3, r2
 801213e:	6963      	ldr	r3, [r4, #20]
 8012140:	b2f6      	uxtb	r6, r6
 8012142:	4283      	cmp	r3, r0
 8012144:	4637      	mov	r7, r6
 8012146:	dc04      	bgt.n	8012152 <__swbuf_r+0x3a>
 8012148:	4621      	mov	r1, r4
 801214a:	4628      	mov	r0, r5
 801214c:	f7ff fdae 	bl	8011cac <_fflush_r>
 8012150:	b9e0      	cbnz	r0, 801218c <__swbuf_r+0x74>
 8012152:	68a3      	ldr	r3, [r4, #8]
 8012154:	3b01      	subs	r3, #1
 8012156:	60a3      	str	r3, [r4, #8]
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	6022      	str	r2, [r4, #0]
 801215e:	701e      	strb	r6, [r3, #0]
 8012160:	6962      	ldr	r2, [r4, #20]
 8012162:	1c43      	adds	r3, r0, #1
 8012164:	429a      	cmp	r2, r3
 8012166:	d004      	beq.n	8012172 <__swbuf_r+0x5a>
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	07db      	lsls	r3, r3, #31
 801216c:	d506      	bpl.n	801217c <__swbuf_r+0x64>
 801216e:	2e0a      	cmp	r6, #10
 8012170:	d104      	bne.n	801217c <__swbuf_r+0x64>
 8012172:	4621      	mov	r1, r4
 8012174:	4628      	mov	r0, r5
 8012176:	f7ff fd99 	bl	8011cac <_fflush_r>
 801217a:	b938      	cbnz	r0, 801218c <__swbuf_r+0x74>
 801217c:	4638      	mov	r0, r7
 801217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012180:	4621      	mov	r1, r4
 8012182:	4628      	mov	r0, r5
 8012184:	f000 f806 	bl	8012194 <__swsetup_r>
 8012188:	2800      	cmp	r0, #0
 801218a:	d0d5      	beq.n	8012138 <__swbuf_r+0x20>
 801218c:	f04f 37ff 	mov.w	r7, #4294967295
 8012190:	e7f4      	b.n	801217c <__swbuf_r+0x64>
	...

08012194 <__swsetup_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4b2a      	ldr	r3, [pc, #168]	; (8012240 <__swsetup_r+0xac>)
 8012198:	4605      	mov	r5, r0
 801219a:	6818      	ldr	r0, [r3, #0]
 801219c:	460c      	mov	r4, r1
 801219e:	b118      	cbz	r0, 80121a8 <__swsetup_r+0x14>
 80121a0:	6a03      	ldr	r3, [r0, #32]
 80121a2:	b90b      	cbnz	r3, 80121a8 <__swsetup_r+0x14>
 80121a4:	f7fe f8be 	bl	8010324 <__sinit>
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121ae:	0718      	lsls	r0, r3, #28
 80121b0:	d422      	bmi.n	80121f8 <__swsetup_r+0x64>
 80121b2:	06d9      	lsls	r1, r3, #27
 80121b4:	d407      	bmi.n	80121c6 <__swsetup_r+0x32>
 80121b6:	2309      	movs	r3, #9
 80121b8:	602b      	str	r3, [r5, #0]
 80121ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121be:	81a3      	strh	r3, [r4, #12]
 80121c0:	f04f 30ff 	mov.w	r0, #4294967295
 80121c4:	e034      	b.n	8012230 <__swsetup_r+0x9c>
 80121c6:	0758      	lsls	r0, r3, #29
 80121c8:	d512      	bpl.n	80121f0 <__swsetup_r+0x5c>
 80121ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121cc:	b141      	cbz	r1, 80121e0 <__swsetup_r+0x4c>
 80121ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121d2:	4299      	cmp	r1, r3
 80121d4:	d002      	beq.n	80121dc <__swsetup_r+0x48>
 80121d6:	4628      	mov	r0, r5
 80121d8:	f7fe ffc2 	bl	8011160 <_free_r>
 80121dc:	2300      	movs	r3, #0
 80121de:	6363      	str	r3, [r4, #52]	; 0x34
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80121e6:	81a3      	strh	r3, [r4, #12]
 80121e8:	2300      	movs	r3, #0
 80121ea:	6063      	str	r3, [r4, #4]
 80121ec:	6923      	ldr	r3, [r4, #16]
 80121ee:	6023      	str	r3, [r4, #0]
 80121f0:	89a3      	ldrh	r3, [r4, #12]
 80121f2:	f043 0308 	orr.w	r3, r3, #8
 80121f6:	81a3      	strh	r3, [r4, #12]
 80121f8:	6923      	ldr	r3, [r4, #16]
 80121fa:	b94b      	cbnz	r3, 8012210 <__swsetup_r+0x7c>
 80121fc:	89a3      	ldrh	r3, [r4, #12]
 80121fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012206:	d003      	beq.n	8012210 <__swsetup_r+0x7c>
 8012208:	4621      	mov	r1, r4
 801220a:	4628      	mov	r0, r5
 801220c:	f000 f884 	bl	8012318 <__smakebuf_r>
 8012210:	89a0      	ldrh	r0, [r4, #12]
 8012212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012216:	f010 0301 	ands.w	r3, r0, #1
 801221a:	d00a      	beq.n	8012232 <__swsetup_r+0x9e>
 801221c:	2300      	movs	r3, #0
 801221e:	60a3      	str	r3, [r4, #8]
 8012220:	6963      	ldr	r3, [r4, #20]
 8012222:	425b      	negs	r3, r3
 8012224:	61a3      	str	r3, [r4, #24]
 8012226:	6923      	ldr	r3, [r4, #16]
 8012228:	b943      	cbnz	r3, 801223c <__swsetup_r+0xa8>
 801222a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801222e:	d1c4      	bne.n	80121ba <__swsetup_r+0x26>
 8012230:	bd38      	pop	{r3, r4, r5, pc}
 8012232:	0781      	lsls	r1, r0, #30
 8012234:	bf58      	it	pl
 8012236:	6963      	ldrpl	r3, [r4, #20]
 8012238:	60a3      	str	r3, [r4, #8]
 801223a:	e7f4      	b.n	8012226 <__swsetup_r+0x92>
 801223c:	2000      	movs	r0, #0
 801223e:	e7f7      	b.n	8012230 <__swsetup_r+0x9c>
 8012240:	24000160 	.word	0x24000160

08012244 <_raise_r>:
 8012244:	291f      	cmp	r1, #31
 8012246:	b538      	push	{r3, r4, r5, lr}
 8012248:	4604      	mov	r4, r0
 801224a:	460d      	mov	r5, r1
 801224c:	d904      	bls.n	8012258 <_raise_r+0x14>
 801224e:	2316      	movs	r3, #22
 8012250:	6003      	str	r3, [r0, #0]
 8012252:	f04f 30ff 	mov.w	r0, #4294967295
 8012256:	bd38      	pop	{r3, r4, r5, pc}
 8012258:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801225a:	b112      	cbz	r2, 8012262 <_raise_r+0x1e>
 801225c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012260:	b94b      	cbnz	r3, 8012276 <_raise_r+0x32>
 8012262:	4620      	mov	r0, r4
 8012264:	f000 f830 	bl	80122c8 <_getpid_r>
 8012268:	462a      	mov	r2, r5
 801226a:	4601      	mov	r1, r0
 801226c:	4620      	mov	r0, r4
 801226e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012272:	f000 b817 	b.w	80122a4 <_kill_r>
 8012276:	2b01      	cmp	r3, #1
 8012278:	d00a      	beq.n	8012290 <_raise_r+0x4c>
 801227a:	1c59      	adds	r1, r3, #1
 801227c:	d103      	bne.n	8012286 <_raise_r+0x42>
 801227e:	2316      	movs	r3, #22
 8012280:	6003      	str	r3, [r0, #0]
 8012282:	2001      	movs	r0, #1
 8012284:	e7e7      	b.n	8012256 <_raise_r+0x12>
 8012286:	2400      	movs	r4, #0
 8012288:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801228c:	4628      	mov	r0, r5
 801228e:	4798      	blx	r3
 8012290:	2000      	movs	r0, #0
 8012292:	e7e0      	b.n	8012256 <_raise_r+0x12>

08012294 <raise>:
 8012294:	4b02      	ldr	r3, [pc, #8]	; (80122a0 <raise+0xc>)
 8012296:	4601      	mov	r1, r0
 8012298:	6818      	ldr	r0, [r3, #0]
 801229a:	f7ff bfd3 	b.w	8012244 <_raise_r>
 801229e:	bf00      	nop
 80122a0:	24000160 	.word	0x24000160

080122a4 <_kill_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	4d07      	ldr	r5, [pc, #28]	; (80122c4 <_kill_r+0x20>)
 80122a8:	2300      	movs	r3, #0
 80122aa:	4604      	mov	r4, r0
 80122ac:	4608      	mov	r0, r1
 80122ae:	4611      	mov	r1, r2
 80122b0:	602b      	str	r3, [r5, #0]
 80122b2:	f7ee fe21 	bl	8000ef8 <_kill>
 80122b6:	1c43      	adds	r3, r0, #1
 80122b8:	d102      	bne.n	80122c0 <_kill_r+0x1c>
 80122ba:	682b      	ldr	r3, [r5, #0]
 80122bc:	b103      	cbz	r3, 80122c0 <_kill_r+0x1c>
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	bd38      	pop	{r3, r4, r5, pc}
 80122c2:	bf00      	nop
 80122c4:	24002220 	.word	0x24002220

080122c8 <_getpid_r>:
 80122c8:	f7ee be0e 	b.w	8000ee8 <_getpid>

080122cc <__swhatbuf_r>:
 80122cc:	b570      	push	{r4, r5, r6, lr}
 80122ce:	460c      	mov	r4, r1
 80122d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122d4:	2900      	cmp	r1, #0
 80122d6:	b096      	sub	sp, #88	; 0x58
 80122d8:	4615      	mov	r5, r2
 80122da:	461e      	mov	r6, r3
 80122dc:	da0d      	bge.n	80122fa <__swhatbuf_r+0x2e>
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80122e4:	f04f 0100 	mov.w	r1, #0
 80122e8:	bf0c      	ite	eq
 80122ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80122ee:	2340      	movne	r3, #64	; 0x40
 80122f0:	2000      	movs	r0, #0
 80122f2:	6031      	str	r1, [r6, #0]
 80122f4:	602b      	str	r3, [r5, #0]
 80122f6:	b016      	add	sp, #88	; 0x58
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
 80122fa:	466a      	mov	r2, sp
 80122fc:	f000 f848 	bl	8012390 <_fstat_r>
 8012300:	2800      	cmp	r0, #0
 8012302:	dbec      	blt.n	80122de <__swhatbuf_r+0x12>
 8012304:	9901      	ldr	r1, [sp, #4]
 8012306:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801230a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801230e:	4259      	negs	r1, r3
 8012310:	4159      	adcs	r1, r3
 8012312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012316:	e7eb      	b.n	80122f0 <__swhatbuf_r+0x24>

08012318 <__smakebuf_r>:
 8012318:	898b      	ldrh	r3, [r1, #12]
 801231a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801231c:	079d      	lsls	r5, r3, #30
 801231e:	4606      	mov	r6, r0
 8012320:	460c      	mov	r4, r1
 8012322:	d507      	bpl.n	8012334 <__smakebuf_r+0x1c>
 8012324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012328:	6023      	str	r3, [r4, #0]
 801232a:	6123      	str	r3, [r4, #16]
 801232c:	2301      	movs	r3, #1
 801232e:	6163      	str	r3, [r4, #20]
 8012330:	b002      	add	sp, #8
 8012332:	bd70      	pop	{r4, r5, r6, pc}
 8012334:	ab01      	add	r3, sp, #4
 8012336:	466a      	mov	r2, sp
 8012338:	f7ff ffc8 	bl	80122cc <__swhatbuf_r>
 801233c:	9900      	ldr	r1, [sp, #0]
 801233e:	4605      	mov	r5, r0
 8012340:	4630      	mov	r0, r6
 8012342:	f7fd fa9b 	bl	800f87c <_malloc_r>
 8012346:	b948      	cbnz	r0, 801235c <__smakebuf_r+0x44>
 8012348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801234c:	059a      	lsls	r2, r3, #22
 801234e:	d4ef      	bmi.n	8012330 <__smakebuf_r+0x18>
 8012350:	f023 0303 	bic.w	r3, r3, #3
 8012354:	f043 0302 	orr.w	r3, r3, #2
 8012358:	81a3      	strh	r3, [r4, #12]
 801235a:	e7e3      	b.n	8012324 <__smakebuf_r+0xc>
 801235c:	89a3      	ldrh	r3, [r4, #12]
 801235e:	6020      	str	r0, [r4, #0]
 8012360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012364:	81a3      	strh	r3, [r4, #12]
 8012366:	9b00      	ldr	r3, [sp, #0]
 8012368:	6163      	str	r3, [r4, #20]
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	6120      	str	r0, [r4, #16]
 801236e:	b15b      	cbz	r3, 8012388 <__smakebuf_r+0x70>
 8012370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012374:	4630      	mov	r0, r6
 8012376:	f000 f81d 	bl	80123b4 <_isatty_r>
 801237a:	b128      	cbz	r0, 8012388 <__smakebuf_r+0x70>
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	f023 0303 	bic.w	r3, r3, #3
 8012382:	f043 0301 	orr.w	r3, r3, #1
 8012386:	81a3      	strh	r3, [r4, #12]
 8012388:	89a3      	ldrh	r3, [r4, #12]
 801238a:	431d      	orrs	r5, r3
 801238c:	81a5      	strh	r5, [r4, #12]
 801238e:	e7cf      	b.n	8012330 <__smakebuf_r+0x18>

08012390 <_fstat_r>:
 8012390:	b538      	push	{r3, r4, r5, lr}
 8012392:	4d07      	ldr	r5, [pc, #28]	; (80123b0 <_fstat_r+0x20>)
 8012394:	2300      	movs	r3, #0
 8012396:	4604      	mov	r4, r0
 8012398:	4608      	mov	r0, r1
 801239a:	4611      	mov	r1, r2
 801239c:	602b      	str	r3, [r5, #0]
 801239e:	f7ee fe0a 	bl	8000fb6 <_fstat>
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	d102      	bne.n	80123ac <_fstat_r+0x1c>
 80123a6:	682b      	ldr	r3, [r5, #0]
 80123a8:	b103      	cbz	r3, 80123ac <_fstat_r+0x1c>
 80123aa:	6023      	str	r3, [r4, #0]
 80123ac:	bd38      	pop	{r3, r4, r5, pc}
 80123ae:	bf00      	nop
 80123b0:	24002220 	.word	0x24002220

080123b4 <_isatty_r>:
 80123b4:	b538      	push	{r3, r4, r5, lr}
 80123b6:	4d06      	ldr	r5, [pc, #24]	; (80123d0 <_isatty_r+0x1c>)
 80123b8:	2300      	movs	r3, #0
 80123ba:	4604      	mov	r4, r0
 80123bc:	4608      	mov	r0, r1
 80123be:	602b      	str	r3, [r5, #0]
 80123c0:	f7ee fe09 	bl	8000fd6 <_isatty>
 80123c4:	1c43      	adds	r3, r0, #1
 80123c6:	d102      	bne.n	80123ce <_isatty_r+0x1a>
 80123c8:	682b      	ldr	r3, [r5, #0]
 80123ca:	b103      	cbz	r3, 80123ce <_isatty_r+0x1a>
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	bd38      	pop	{r3, r4, r5, pc}
 80123d0:	24002220 	.word	0x24002220
 80123d4:	00000000 	.word	0x00000000

080123d8 <fmod>:
 80123d8:	b508      	push	{r3, lr}
 80123da:	ed2d 8b04 	vpush	{d8-d9}
 80123de:	eeb0 9b40 	vmov.f64	d9, d0
 80123e2:	eeb0 8b41 	vmov.f64	d8, d1
 80123e6:	f000 f81b 	bl	8012420 <__ieee754_fmod>
 80123ea:	eeb4 9b48 	vcmp.f64	d9, d8
 80123ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f2:	d60c      	bvs.n	801240e <fmod+0x36>
 80123f4:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8012418 <fmod+0x40>
 80123f8:	eeb4 8b49 	vcmp.f64	d8, d9
 80123fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012400:	d105      	bne.n	801240e <fmod+0x36>
 8012402:	f7fe f88b 	bl	801051c <__errno>
 8012406:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801240a:	2321      	movs	r3, #33	; 0x21
 801240c:	6003      	str	r3, [r0, #0]
 801240e:	ecbd 8b04 	vpop	{d8-d9}
 8012412:	bd08      	pop	{r3, pc}
 8012414:	f3af 8000 	nop.w
	...

08012420 <__ieee754_fmod>:
 8012420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012424:	ed8d 1b00 	vstr	d1, [sp]
 8012428:	e9dd 6500 	ldrd	r6, r5, [sp]
 801242c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8012430:	ea57 0306 	orrs.w	r3, r7, r6
 8012434:	46b6      	mov	lr, r6
 8012436:	d00d      	beq.n	8012454 <__ieee754_fmod+0x34>
 8012438:	ee10 ca90 	vmov	ip, s1
 801243c:	4b79      	ldr	r3, [pc, #484]	; (8012624 <__ieee754_fmod+0x204>)
 801243e:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 8012442:	4598      	cmp	r8, r3
 8012444:	dc06      	bgt.n	8012454 <__ieee754_fmod+0x34>
 8012446:	4273      	negs	r3, r6
 8012448:	4a77      	ldr	r2, [pc, #476]	; (8012628 <__ieee754_fmod+0x208>)
 801244a:	4333      	orrs	r3, r6
 801244c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8012450:	4293      	cmp	r3, r2
 8012452:	d908      	bls.n	8012466 <__ieee754_fmod+0x46>
 8012454:	ed9d 7b00 	vldr	d7, [sp]
 8012458:	ee20 7b07 	vmul.f64	d7, d0, d7
 801245c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8012460:	b003      	add	sp, #12
 8012462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012466:	45b8      	cmp	r8, r7
 8012468:	ee10 9a10 	vmov	r9, s0
 801246c:	ee10 1a10 	vmov	r1, s0
 8012470:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 8012474:	dc09      	bgt.n	801248a <__ieee754_fmod+0x6a>
 8012476:	dbf3      	blt.n	8012460 <__ieee754_fmod+0x40>
 8012478:	45b1      	cmp	r9, r6
 801247a:	d3f1      	bcc.n	8012460 <__ieee754_fmod+0x40>
 801247c:	d105      	bne.n	801248a <__ieee754_fmod+0x6a>
 801247e:	4b6b      	ldr	r3, [pc, #428]	; (801262c <__ieee754_fmod+0x20c>)
 8012480:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8012484:	ed93 0b00 	vldr	d0, [r3]
 8012488:	e7ea      	b.n	8012460 <__ieee754_fmod+0x40>
 801248a:	4a67      	ldr	r2, [pc, #412]	; (8012628 <__ieee754_fmod+0x208>)
 801248c:	ea1c 0f02 	tst.w	ip, r2
 8012490:	d14a      	bne.n	8012528 <__ieee754_fmod+0x108>
 8012492:	f1b8 0f00 	cmp.w	r8, #0
 8012496:	d13f      	bne.n	8012518 <__ieee754_fmod+0xf8>
 8012498:	4865      	ldr	r0, [pc, #404]	; (8012630 <__ieee754_fmod+0x210>)
 801249a:	464b      	mov	r3, r9
 801249c:	2b00      	cmp	r3, #0
 801249e:	dc38      	bgt.n	8012512 <__ieee754_fmod+0xf2>
 80124a0:	4215      	tst	r5, r2
 80124a2:	d150      	bne.n	8012546 <__ieee754_fmod+0x126>
 80124a4:	2f00      	cmp	r7, #0
 80124a6:	d147      	bne.n	8012538 <__ieee754_fmod+0x118>
 80124a8:	4a61      	ldr	r2, [pc, #388]	; (8012630 <__ieee754_fmod+0x210>)
 80124aa:	4633      	mov	r3, r6
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	dc40      	bgt.n	8012532 <__ieee754_fmod+0x112>
 80124b0:	4b60      	ldr	r3, [pc, #384]	; (8012634 <__ieee754_fmod+0x214>)
 80124b2:	4298      	cmp	r0, r3
 80124b4:	db4b      	blt.n	801254e <__ieee754_fmod+0x12e>
 80124b6:	f3cc 0313 	ubfx	r3, ip, #0, #20
 80124ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80124be:	f8df c174 	ldr.w	ip, [pc, #372]	; 8012634 <__ieee754_fmod+0x214>
 80124c2:	4562      	cmp	r2, ip
 80124c4:	db58      	blt.n	8012578 <__ieee754_fmod+0x158>
 80124c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80124ca:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80124ce:	1a80      	subs	r0, r0, r2
 80124d0:	1b5e      	subs	r6, r3, r5
 80124d2:	eba1 070e 	sub.w	r7, r1, lr
 80124d6:	2800      	cmp	r0, #0
 80124d8:	d164      	bne.n	80125a4 <__ieee754_fmod+0x184>
 80124da:	4571      	cmp	r1, lr
 80124dc:	bf38      	it	cc
 80124de:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80124e2:	2e00      	cmp	r6, #0
 80124e4:	bfa4      	itt	ge
 80124e6:	4639      	movge	r1, r7
 80124e8:	4633      	movge	r3, r6
 80124ea:	ea53 0001 	orrs.w	r0, r3, r1
 80124ee:	d0c6      	beq.n	801247e <__ieee754_fmod+0x5e>
 80124f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124f4:	db6b      	blt.n	80125ce <__ieee754_fmod+0x1ae>
 80124f6:	484f      	ldr	r0, [pc, #316]	; (8012634 <__ieee754_fmod+0x214>)
 80124f8:	4282      	cmp	r2, r0
 80124fa:	db6e      	blt.n	80125da <__ieee754_fmod+0x1ba>
 80124fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012500:	4323      	orrs	r3, r4
 8012502:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8012506:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801250a:	460c      	mov	r4, r1
 801250c:	ec45 4b10 	vmov	d0, r4, r5
 8012510:	e7a6      	b.n	8012460 <__ieee754_fmod+0x40>
 8012512:	3801      	subs	r0, #1
 8012514:	005b      	lsls	r3, r3, #1
 8012516:	e7c1      	b.n	801249c <__ieee754_fmod+0x7c>
 8012518:	4846      	ldr	r0, [pc, #280]	; (8012634 <__ieee754_fmod+0x214>)
 801251a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801251e:	2b00      	cmp	r3, #0
 8012520:	ddbe      	ble.n	80124a0 <__ieee754_fmod+0x80>
 8012522:	3801      	subs	r0, #1
 8012524:	005b      	lsls	r3, r3, #1
 8012526:	e7fa      	b.n	801251e <__ieee754_fmod+0xfe>
 8012528:	ea4f 5028 	mov.w	r0, r8, asr #20
 801252c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012530:	e7b6      	b.n	80124a0 <__ieee754_fmod+0x80>
 8012532:	3a01      	subs	r2, #1
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	e7b9      	b.n	80124ac <__ieee754_fmod+0x8c>
 8012538:	4a3e      	ldr	r2, [pc, #248]	; (8012634 <__ieee754_fmod+0x214>)
 801253a:	02fb      	lsls	r3, r7, #11
 801253c:	2b00      	cmp	r3, #0
 801253e:	ddb7      	ble.n	80124b0 <__ieee754_fmod+0x90>
 8012540:	3a01      	subs	r2, #1
 8012542:	005b      	lsls	r3, r3, #1
 8012544:	e7fa      	b.n	801253c <__ieee754_fmod+0x11c>
 8012546:	153a      	asrs	r2, r7, #20
 8012548:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801254c:	e7b0      	b.n	80124b0 <__ieee754_fmod+0x90>
 801254e:	eba3 0c00 	sub.w	ip, r3, r0
 8012552:	f1bc 0f1f 	cmp.w	ip, #31
 8012556:	dc09      	bgt.n	801256c <__ieee754_fmod+0x14c>
 8012558:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 801255c:	fa08 f10c 	lsl.w	r1, r8, ip
 8012560:	fa29 f303 	lsr.w	r3, r9, r3
 8012564:	430b      	orrs	r3, r1
 8012566:	fa09 f10c 	lsl.w	r1, r9, ip
 801256a:	e7a8      	b.n	80124be <__ieee754_fmod+0x9e>
 801256c:	4b32      	ldr	r3, [pc, #200]	; (8012638 <__ieee754_fmod+0x218>)
 801256e:	1a1b      	subs	r3, r3, r0
 8012570:	fa09 f303 	lsl.w	r3, r9, r3
 8012574:	2100      	movs	r1, #0
 8012576:	e7a2      	b.n	80124be <__ieee754_fmod+0x9e>
 8012578:	ebac 0c02 	sub.w	ip, ip, r2
 801257c:	f1bc 0f1f 	cmp.w	ip, #31
 8012580:	dc09      	bgt.n	8012596 <__ieee754_fmod+0x176>
 8012582:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8012586:	fa07 f70c 	lsl.w	r7, r7, ip
 801258a:	fa26 f505 	lsr.w	r5, r6, r5
 801258e:	433d      	orrs	r5, r7
 8012590:	fa06 fe0c 	lsl.w	lr, r6, ip
 8012594:	e79b      	b.n	80124ce <__ieee754_fmod+0xae>
 8012596:	4d28      	ldr	r5, [pc, #160]	; (8012638 <__ieee754_fmod+0x218>)
 8012598:	1aad      	subs	r5, r5, r2
 801259a:	fa06 f505 	lsl.w	r5, r6, r5
 801259e:	f04f 0e00 	mov.w	lr, #0
 80125a2:	e794      	b.n	80124ce <__ieee754_fmod+0xae>
 80125a4:	4571      	cmp	r1, lr
 80125a6:	bf38      	it	cc
 80125a8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80125ac:	2e00      	cmp	r6, #0
 80125ae:	da05      	bge.n	80125bc <__ieee754_fmod+0x19c>
 80125b0:	0fce      	lsrs	r6, r1, #31
 80125b2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80125b6:	0049      	lsls	r1, r1, #1
 80125b8:	3801      	subs	r0, #1
 80125ba:	e789      	b.n	80124d0 <__ieee754_fmod+0xb0>
 80125bc:	ea56 0307 	orrs.w	r3, r6, r7
 80125c0:	f43f af5d 	beq.w	801247e <__ieee754_fmod+0x5e>
 80125c4:	0ffb      	lsrs	r3, r7, #31
 80125c6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80125ca:	0079      	lsls	r1, r7, #1
 80125cc:	e7f4      	b.n	80125b8 <__ieee754_fmod+0x198>
 80125ce:	0fc8      	lsrs	r0, r1, #31
 80125d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80125d4:	0049      	lsls	r1, r1, #1
 80125d6:	3a01      	subs	r2, #1
 80125d8:	e78a      	b.n	80124f0 <__ieee754_fmod+0xd0>
 80125da:	1a80      	subs	r0, r0, r2
 80125dc:	2814      	cmp	r0, #20
 80125de:	dc0c      	bgt.n	80125fa <__ieee754_fmod+0x1da>
 80125e0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80125e4:	fa03 f202 	lsl.w	r2, r3, r2
 80125e8:	40c1      	lsrs	r1, r0
 80125ea:	430a      	orrs	r2, r1
 80125ec:	4103      	asrs	r3, r0
 80125ee:	ea43 0104 	orr.w	r1, r3, r4
 80125f2:	4610      	mov	r0, r2
 80125f4:	ec41 0b10 	vmov	d0, r0, r1
 80125f8:	e732      	b.n	8012460 <__ieee754_fmod+0x40>
 80125fa:	281f      	cmp	r0, #31
 80125fc:	dc07      	bgt.n	801260e <__ieee754_fmod+0x1ee>
 80125fe:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8012602:	40c1      	lsrs	r1, r0
 8012604:	fa03 f202 	lsl.w	r2, r3, r2
 8012608:	430a      	orrs	r2, r1
 801260a:	4623      	mov	r3, r4
 801260c:	e7ef      	b.n	80125ee <__ieee754_fmod+0x1ce>
 801260e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8012612:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012616:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801261a:	32e2      	adds	r2, #226	; 0xe2
 801261c:	fa43 f202 	asr.w	r2, r3, r2
 8012620:	e7f3      	b.n	801260a <__ieee754_fmod+0x1ea>
 8012622:	bf00      	nop
 8012624:	7fefffff 	.word	0x7fefffff
 8012628:	7ff00000 	.word	0x7ff00000
 801262c:	08013288 	.word	0x08013288
 8012630:	fffffbed 	.word	0xfffffbed
 8012634:	fffffc02 	.word	0xfffffc02
 8012638:	fffffbe2 	.word	0xfffffbe2

0801263c <_init>:
 801263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263e:	bf00      	nop
 8012640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012642:	bc08      	pop	{r3}
 8012644:	469e      	mov	lr, r3
 8012646:	4770      	bx	lr

08012648 <_fini>:
 8012648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264a:	bf00      	nop
 801264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801264e:	bc08      	pop	{r3}
 8012650:	469e      	mov	lr, r3
 8012652:	4770      	bx	lr
