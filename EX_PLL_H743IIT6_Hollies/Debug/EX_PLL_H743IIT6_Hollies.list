
EX_PLL_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800d178  0800d178  0001d178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ddb0  0800ddb0  0001ddb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ddb4  0800ddb4  0001ddb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002cc  24000000  0800ddb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e14  240002cc  0800e084  000202cc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240020e0  0800e084  000220e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
  9 .comment      000000b8  00000000  00000000  000202fa  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f9a3  00000000  00000000  000203b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000472e  00000000  00000000  0003fd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015c8  00000000  00000000  00044488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001037  00000000  00000000  00045a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b06b  00000000  00000000  00046a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020371  00000000  00000000  00081af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001624d0  00000000  00000000  000a1e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000067d8  00000000  00000000  00204334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  0020ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000001f4  00000000  00000000  0020ab71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00000020  00000000  00000000  0020ad65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d15c 	.word	0x0800d15c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	0800d15c 	.word	0x0800d15c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_GPIO_Init+0xbc>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	4a27      	ldr	r2, [pc, #156]	; (800044c <MX_GPIO_Init+0xbc>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b6:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xbc>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <MX_GPIO_Init+0xbc>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	4a20      	ldr	r2, [pc, #128]	; (800044c <MX_GPIO_Init+0xbc>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d4:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_GPIO_Init+0xbc>)
 80003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_GPIO_Init+0xbc>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	4a18      	ldr	r2, [pc, #96]	; (800044c <MX_GPIO_Init+0xbc>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <MX_GPIO_Init+0xbc>)
 80003f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f8:	f003 0302 	and.w	r3, r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_GPIO_Init+0xbc>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	4a11      	ldr	r2, [pc, #68]	; (800044c <MX_GPIO_Init+0xbc>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_GPIO_Init+0xbc>)
 8000412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2101      	movs	r1, #1
 8000422:	480b      	ldr	r0, [pc, #44]	; (8000450 <MX_GPIO_Init+0xc0>)
 8000424:	f001 f878 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_GPIO_Init+0xc0>)
 8000440:	f000 feba 	bl	80011b8 <HAL_GPIO_Init>

}
 8000444:	bf00      	nop
 8000446:	3728      	adds	r7, #40	; 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	58020400 	.word	0x58020400
 8000454:	00000000 	.word	0x00000000

08000458 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b0b2      	sub	sp, #200	; 0xc8
 800045c:	af0a      	add	r7, sp, #40	; 0x28
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 800045e:	f000 f9c9 	bl	80007f4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000462:	4b9f      	ldr	r3, [pc, #636]	; (80006e0 <main+0x288>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d11b      	bne.n	80004a6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800046e:	f3bf 8f4f 	dsb	sy
}
 8000472:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000474:	f3bf 8f6f 	isb	sy
}
 8000478:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800047a:	4b99      	ldr	r3, [pc, #612]	; (80006e0 <main+0x288>)
 800047c:	2200      	movs	r2, #0
 800047e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000482:	f3bf 8f4f 	dsb	sy
}
 8000486:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000488:	f3bf 8f6f 	isb	sy
}
 800048c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800048e:	4b94      	ldr	r3, [pc, #592]	; (80006e0 <main+0x288>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a93      	ldr	r2, [pc, #588]	; (80006e0 <main+0x288>)
 8000494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000498:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	e000      	b.n	80004a8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004a6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004a8:	4b8d      	ldr	r3, [pc, #564]	; (80006e0 <main+0x288>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d143      	bne.n	800053c <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004b4:	4b8a      	ldr	r3, [pc, #552]	; (80006e0 <main+0x288>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004bc:	f3bf 8f4f 	dsb	sy
}
 80004c0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004c2:	4b87      	ldr	r3, [pc, #540]	; (80006e0 <main+0x288>)
 80004c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80004d0:	0b5b      	lsrs	r3, r3, #13
 80004d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004ec:	015a      	lsls	r2, r3, #5
 80004ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80004f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004fa:	4979      	ldr	r1, [pc, #484]	; (80006e0 <main+0x288>)
 80004fc:	4313      	orrs	r3, r2
 80004fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000506:	1e5a      	subs	r2, r3, #1
 8000508:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1eb      	bne.n	80004e8 <main+0x90>
    } while(sets-- != 0U);
 8000510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1dd      	bne.n	80004da <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 800051e:	f3bf 8f4f 	dsb	sy
}
 8000522:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000524:	4b6e      	ldr	r3, [pc, #440]	; (80006e0 <main+0x288>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a6d      	ldr	r2, [pc, #436]	; (80006e0 <main+0x288>)
 800052a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	e000      	b.n	800053e <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053c:	bf00      	nop
    SCB_EnableDCache();

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800053e:	f000 fc53 	bl	8000de8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000542:	f000 f8db 	bl	80006fc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000546:	f7ff ff23 	bl	8000390 <MX_GPIO_Init>
    MX_TIM1_Init();
 800054a:	f000 fbad 	bl	8000ca8 <MX_TIM1_Init>
    MX_USB_DEVICE_Init();
 800054e:	f009 f92d 	bl	80097ac <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
    // 新建信号并分配存储空间
    pll_Signal *signal_1        = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000552:	2054      	movs	r0, #84	; 0x54
 8000554:	f009 fefa 	bl	800a34c <malloc>
 8000558:	4603      	mov	r3, r0
 800055a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    pll_Config *signal_config_1 = (pll_Config *)malloc(sizeof(pll_Config));
 800055e:	2020      	movs	r0, #32
 8000560:	f009 fef4 	bl	800a34c <malloc>
 8000564:	4603      	mov	r3, r0
 8000566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float sinVol                = 0;
 800056a:	f04f 0300 	mov.w	r3, #0
 800056e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t x;
    pll_Init(signal_1, signal_config_1, 50, 20000);
 8000572:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000576:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80006e4 <main+0x28c>
 800057a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800057e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000582:	f008 febb 	bl	80092fc <pll_Init>
    uint8_t buf[128] = {0};
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	227c      	movs	r2, #124	; 0x7c
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00a fcef 	bl	800af76 <memset>
    HAL_Delay(5000);
 8000598:	f241 3088 	movw	r0, #5000	; 0x1388
 800059c:	f000 fc80 	bl	8000ea0 <HAL_Delay>
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    	// 模拟生成50Hz正弦波
        if (sinVol >= 2 * PI) {
 80005a0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80005a4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80006e8 <main+0x290>
 80005a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	db18      	blt.n	80005e4 <main+0x18c>
            sinVol = 0;
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sinVol += 50.0f * signal_config_1->Ts * 2 * PI;
 80005ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005be:	edd3 7a01 	vldr	s15, [r3, #4]
 80005c2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80006e4 <main+0x28c>
 80005c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005ce:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80006ec <main+0x294>
 80005d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80005da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005de:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
 80005e2:	e013      	b.n	800060c <main+0x1b4>
        } else
            sinVol += 50.0f * signal_config_1->Ts * 2 * PI;
 80005e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80005ec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80006e4 <main+0x28c>
 80005f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80006ec <main+0x294>
 80005fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000600:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8000604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000608:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
        signal_1->u_0 = 6.28 * arm_sin_f32(sinVol);
 800060c:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 8000610:	f009 fe0c 	bl	800a22c <arm_sin_f32>
 8000614:	eef0 7a40 	vmov.f32	s15, s0
 8000618:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800061c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80006d8 <main+0x280>
 8000620:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000624:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800062c:	edc3 7a00 	vstr	s15, [r3]

        pll_Control(signal_1, signal_config_1, &x);
 8000630:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000634:	461a      	mov	r2, r3
 8000636:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800063a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800063e:	f008 ff43 	bl	80094c8 <pll_Control>

        sprintf((char *)buf, "x1=0,theta= %f,u0= %.3f, sogi_d= %.3f, sogi_q= %.3f, park_q= %.3f, park_d= %.3f, \n", signal_1->theta, signal_1->u_0, signal_1->sogi_d_0, signal_1->sogi_q_0 / 382 * 3, signal_1->park_q, signal_1->park_d); //
 8000642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000646:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800064a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 800064e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000652:	edd3 7a00 	vldr	s15, [r3]
 8000656:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800065a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800065e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000662:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000666:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800066a:	ed93 5a06 	vldr	s10, [r3, #24]
 800066e:	eddf 4a20 	vldr	s9, [pc, #128]	; 80006f0 <main+0x298>
 8000672:	eec5 5a24 	vdiv.f32	s11, s10, s9
 8000676:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800067a:	ee65 5a85 	vmul.f32	s11, s11, s10
 800067e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000686:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 800068a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800068e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000692:	edd3 3a09 	vldr	s7, [r3, #36]	; 0x24
 8000696:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800069a:	1d38      	adds	r0, r7, #4
 800069c:	ed8d 3b08 	vstr	d3, [sp, #32]
 80006a0:	ed8d 4b06 	vstr	d4, [sp, #24]
 80006a4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80006a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80006ac:	ed8d 7b00 	vstr	d7, [sp]
 80006b0:	ec53 2b12 	vmov	r2, r3, d2
 80006b4:	490f      	ldr	r1, [pc, #60]	; (80006f4 <main+0x29c>)
 80006b6:	f00a fbfb 	bl	800aeb0 <siprintf>
        CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 f934 	bl	800992c <CDC_Transmit_FS>
        HAL_Delay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fbeb 	bl	8000ea0 <HAL_Delay>

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80006ca:	2101      	movs	r1, #1
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <main+0x2a0>)
 80006ce:	f000 ff3c 	bl	800154a <HAL_GPIO_TogglePin>
        if (sinVol >= 2 * PI) {
 80006d2:	e765      	b.n	80005a0 <main+0x148>
 80006d4:	f3af 8000 	nop.w
 80006d8:	51eb851f 	.word	0x51eb851f
 80006dc:	40191eb8 	.word	0x40191eb8
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	42480000 	.word	0x42480000
 80006e8:	40c90fdb 	.word	0x40c90fdb
 80006ec:	40490fdb 	.word	0x40490fdb
 80006f0:	43bf0000 	.word	0x43bf0000
 80006f4:	0800d178 	.word	0x0800d178
 80006f8:	58020400 	.word	0x58020400

080006fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	224c      	movs	r2, #76	; 0x4c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00a fc33 	bl	800af76 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00a fc2d 	bl	800af76 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071c:	2002      	movs	r0, #2
 800071e:	f002 f9e7 	bl	8002af0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <SystemClock_Config+0xf0>)
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	4a30      	ldr	r2, [pc, #192]	; (80007ec <SystemClock_Config+0xf0>)
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000732:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <SystemClock_Config+0xf0>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <SystemClock_Config+0xf4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <SystemClock_Config+0xf4>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <SystemClock_Config+0xf4>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000758:	bf00      	nop
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <SystemClock_Config+0xf4>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000766:	d1f8      	bne.n	800075a <SystemClock_Config+0x5e>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000776:	2302      	movs	r3, #2
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM       = 5;
 800077a:	2305      	movs	r3, #5
 800077c:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN       = 48;
 800077e:	2330      	movs	r3, #48	; 0x30
 8000780:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP       = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ       = 5;
 8000786:	2305      	movs	r3, #5
 8000788:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR       = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLRGE     = RCC_PLL1VCIRANGE_2;
 800078e:	2308      	movs	r3, #8
 8000790:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL  = RCC_PLL1VCOWIDE;
 8000792:	2300      	movs	r3, #0
 8000794:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_OscInitStruct.PLL.PLLFRACN   = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f9f0 	bl	8002b84 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xb2>
        Error_Handler();
 80007aa:	f000 f863 	bl	8000874 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 80007ae:	233f      	movs	r3, #63	; 0x3f
 80007b0:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2303      	movs	r3, #3
 80007b4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fe30 	bl	8003438 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xe6>
        Error_Handler();
 80007de:	f000 f849 	bl	8000874 <Error_Handler>
    }
}
 80007e2:	bf00      	nop
 80007e4:	3770      	adds	r7, #112	; 0x70
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	58000400 	.word	0x58000400
 80007f0:	58024800 	.word	0x58024800

080007f4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8000806:	f000 fc5b 	bl	80010c0 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800080a:	2301      	movs	r3, #1
 800080c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 800080e:	2300      	movs	r3, #0
 8000810:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress      = 0x24000000;
 8000812:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000816:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000818:	2312      	movs	r3, #18
 800081a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 800081c:	2300      	movs	r3, #0
 800081e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000820:	2301      	movs	r3, #1
 8000822:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000824:	2303      	movs	r3, #3
 8000826:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000830:	2301      	movs	r3, #1
 8000832:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000838:	463b      	mov	r3, r7
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fc78 	bl	8001130 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000840:	2004      	movs	r0, #4
 8000842:	f000 fc55 	bl	80010f0 <HAL_MPU_Enable>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8000862:	f000 fafd 	bl	8000e60 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40001000 	.word	0x40001000

08000874 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_MspInit+0x30>)
 8000888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x30>)
 800088e:	f043 0302 	orr.w	r3, r3, #2
 8000892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x30>)
 8000898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	58024400 	.word	0x58024400

080008b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b090      	sub	sp, #64	; 0x40
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d827      	bhi.n	8000912 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80008c2:	2200      	movs	r2, #0
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	2036      	movs	r0, #54	; 0x36
 80008c8:	f000 fbd2 	bl	8001070 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008cc:	2036      	movs	r0, #54	; 0x36
 80008ce:	f000 fbe9 	bl	80010a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80008d2:	4a29      	ldr	r2, [pc, #164]	; (8000978 <HAL_InitTick+0xc4>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <HAL_InitTick+0xc8>)
 80008da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008de:	4a27      	ldr	r2, [pc, #156]	; (800097c <HAL_InitTick+0xc8>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_InitTick+0xc8>)
 80008ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f6:	f107 0210 	add.w	r2, r7, #16
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f90f 	bl	8003b24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	2b00      	cmp	r3, #0
 800090e:	d106      	bne.n	800091e <HAL_InitTick+0x6a>
 8000910:	e001      	b.n	8000916 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e02b      	b.n	800096e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000916:	f003 f8ef 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800091a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091e:	f003 f8eb 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8000922:	4603      	mov	r3, r0
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <HAL_InitTick+0xcc>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	0c9b      	lsrs	r3, r3, #18
 8000932:	3b01      	subs	r3, #1
 8000934:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <HAL_InitTick+0xd0>)
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_InitTick+0xd4>)
 800093a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_InitTick+0xd0>)
 800093e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000942:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000944:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_InitTick+0xd0>)
 8000946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000948:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_InitTick+0xd0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_InitTick+0xd0>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <HAL_InitTick+0xd0>)
 8000958:	f004 fc94 	bl	8005284 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <HAL_InitTick+0xd0>)
 8000964:	f004 fce6 	bl	8005334 <HAL_TIM_Base_Start_IT>
 8000968:	4603      	mov	r3, r0
 800096a:	e000      	b.n	800096e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	3740      	adds	r7, #64	; 0x40
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000008 	.word	0x24000008
 800097c:	58024400 	.word	0x58024400
 8000980:	431bde83 	.word	0x431bde83
 8000984:	240002e8 	.word	0x240002e8
 8000988:	40001000 	.word	0x40001000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TIM6_DAC_IRQHandler+0x10>)
 80009ea:	f004 fd1b 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	240002e8 	.word	0x240002e8

080009f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <OTG_FS_IRQHandler+0x10>)
 80009fe:	f000 ff17 	bl	8001830 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24001868 	.word	0x24001868

08000a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return 1;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_kill>:

int _kill(int pid, int sig)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a26:	f00a fb09 	bl	800b03c <__errno>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2216      	movs	r2, #22
 8000a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_exit>:

void _exit (int status)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ffe7 	bl	8000a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a4e:	e7fe      	b.n	8000a4e <_exit+0x12>

08000a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
  }

  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
  }
  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	605a      	str	r2, [r3, #4]
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f00a fa6e 	bl	800b03c <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24080000 	.word	0x24080000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	24000334 	.word	0x24000334
 8000b94:	240020e0 	.word	0x240020e0

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <SystemInit+0xe4>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a36      	ldr	r2, [pc, #216]	; (8000c7c <SystemInit+0xe4>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <SystemInit+0xe8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d807      	bhi.n	8000bc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <SystemInit+0xe8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f023 030f 	bic.w	r3, r3, #15
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <SystemInit+0xe8>)
 8000bc2:	f043 0307 	orr.w	r3, r3, #7
 8000bc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <SystemInit+0xec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <SystemInit+0xec>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <SystemInit+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <SystemInit+0xec>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4929      	ldr	r1, [pc, #164]	; (8000c84 <SystemInit+0xec>)
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <SystemInit+0xf0>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SystemInit+0xe8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d007      	beq.n	8000c02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SystemInit+0xe8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f023 030f 	bic.w	r3, r3, #15
 8000bfa:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <SystemInit+0xe8>)
 8000bfc:	f043 0307 	orr.w	r3, r3, #7
 8000c00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <SystemInit+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <SystemInit+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <SystemInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <SystemInit+0xec>)
 8000c16:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <SystemInit+0xf4>)
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <SystemInit+0xec>)
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <SystemInit+0xf8>)
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <SystemInit+0xec>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <SystemInit+0xfc>)
 8000c24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <SystemInit+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <SystemInit+0xec>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <SystemInit+0xfc>)
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <SystemInit+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <SystemInit+0xec>)
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <SystemInit+0xfc>)
 8000c3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <SystemInit+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <SystemInit+0xec>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <SystemInit+0xec>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <SystemInit+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SystemInit+0x100>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <SystemInit+0x104>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c62:	d202      	bcs.n	8000c6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <SystemInit+0x108>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <SystemInit+0x10c>)
 8000c6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	52002000 	.word	0x52002000
 8000c84:	58024400 	.word	0x58024400
 8000c88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c8c:	02020200 	.word	0x02020200
 8000c90:	01ff0000 	.word	0x01ff0000
 8000c94:	01010280 	.word	0x01010280
 8000c98:	5c001000 	.word	0x5c001000
 8000c9c:	ffff0000 	.word	0xffff0000
 8000ca0:	51008108 	.word	0x51008108
 8000ca4:	52004000 	.word	0x52004000

08000ca8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000cc8:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <MX_TIM1_Init+0xa4>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf2:	4815      	ldr	r0, [pc, #84]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000cf4:	f004 fac6 	bl	8005284 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cfe:	f7ff fdb9 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000d10:	f004 fca8 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f7ff fdab 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_TIM1_Init+0xa0>)
 8000d30:	f004 fef0 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d3a:	f7ff fd9b 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000338 	.word	0x24000338
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_TIM_Base_MspInit+0x3c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10e      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	58024400 	.word	0x58024400

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff fefe 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f00a f941 	bl	800b048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fb47 	bl	8000458 <main>
  bx  lr
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd4:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8000dd8:	0800ddb8 	.word	0x0800ddb8
  ldr r2, =_sbss
 8000ddc:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8000de0:	240020e0 	.word	0x240020e0

08000de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC3_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f933 	bl	800105a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000df4:	f002 fcd6 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f7ff fd3e 	bl	80008b4 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fd1d 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	0800d214 	.word	0x0800d214
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2400000c 	.word	0x2400000c
 8000e84:	24000384 	.word	0x24000384

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	24000384 	.word	0x24000384

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2400000c 	.word	0x2400000c

08000ee8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetREVID+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	0c1b      	lsrs	r3, r3, #16
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	5c001000 	.word	0x5c001000

08000f00 <__NVIC_SetPriorityGrouping>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	05fa0000 	.word	0x05fa0000

08000f48 <__NVIC_GetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff4c 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107e:	f7ff ff63 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001082:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff ffb3 	bl	8000ff4 <NVIC_EncodePriority>
 800108e:	4602      	mov	r2, r0
 8001090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff82 	bl	8000fa0 <__NVIC_SetPriority>
}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff56 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010c4:	f3bf 8f5f 	dmb	sy
}
 80010c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_MPU_Disable+0x28>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_MPU_Disable+0x28>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_MPU_Disable+0x2c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	e000ed90 	.word	0xe000ed90

080010f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_MPU_Enable+0x38>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_MPU_Enable+0x3c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_MPU_Enable+0x3c>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800110e:	f3bf 8f4f 	dsb	sy
}
 8001112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001114:	f3bf 8f6f 	isb	sy
}
 8001118:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed90 	.word	0xe000ed90
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	785a      	ldrb	r2, [r3, #1]
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800113e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d029      	beq.n	800119c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7adb      	ldrb	r3, [r3, #11]
 800115a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800115c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7a9b      	ldrb	r3, [r3, #10]
 8001162:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001164:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7b5b      	ldrb	r3, [r3, #13]
 800116a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800116c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
 8001172:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7bdb      	ldrb	r3, [r3, #15]
 800117a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800117c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7a5b      	ldrb	r3, [r3, #9]
 8001182:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800118c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001196:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001198:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800119a:	e005      	b.n	80011a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed90 	.word	0xe000ed90

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_GPIO_Init+0x234>)
 80011c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ca:	e194      	b.n	80014f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8186 	beq.w	80014f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_GPIO_Init+0x44>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d130      	bne.n	800125e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001232:	2201      	movs	r2, #1
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 0201 	and.w	r2, r3, #1
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b03      	cmp	r3, #3
 8001268:	d017      	beq.n	800129a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d123      	bne.n	80012ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0203 	and.w	r2, r3, #3
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80e0 	beq.w	80014f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x238>)
 8001332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <HAL_GPIO_Init+0x238>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_GPIO_Init+0x238>)
 8001342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <HAL_GPIO_Init+0x23c>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_GPIO_Init+0x240>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d052      	beq.n	8001420 <HAL_GPIO_Init+0x268>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_GPIO_Init+0x244>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d031      	beq.n	80013e6 <HAL_GPIO_Init+0x22e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_GPIO_Init+0x248>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x22a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_GPIO_Init+0x24c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x226>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_GPIO_Init+0x250>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x222>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_GPIO_Init+0x254>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x21e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <HAL_GPIO_Init+0x258>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x21a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_GPIO_Init+0x25c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x216>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x260>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x212>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_GPIO_Init+0x264>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x20e>
 80013c2:	2309      	movs	r3, #9
 80013c4:	e02d      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013c6:	230a      	movs	r3, #10
 80013c8:	e02b      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e029      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e027      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e025      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e023      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013da:	2304      	movs	r3, #4
 80013dc:	e021      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013de:	2303      	movs	r3, #3
 80013e0:	e01f      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e01d      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e01b      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013ea:	bf00      	nop
 80013ec:	58000080 	.word	0x58000080
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58000400 	.word	0x58000400
 80013f8:	58020000 	.word	0x58020000
 80013fc:	58020400 	.word	0x58020400
 8001400:	58020800 	.word	0x58020800
 8001404:	58020c00 	.word	0x58020c00
 8001408:	58021000 	.word	0x58021000
 800140c:	58021400 	.word	0x58021400
 8001410:	58021800 	.word	0x58021800
 8001414:	58021c00 	.word	0x58021c00
 8001418:	58022000 	.word	0x58022000
 800141c:	58022400 	.word	0x58022400
 8001420:	2300      	movs	r3, #0
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001432:	4938      	ldr	r1, [pc, #224]	; (8001514 <HAL_GPIO_Init+0x35c>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f ae63 	bne.w	80011cc <HAL_GPIO_Init+0x14>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	58000400 	.word	0x58000400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001534:	e003      	b.n	800153e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	041a      	lsls	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43d9      	mvns	r1, r3
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	400b      	ands	r3, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800157e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001580:	b08f      	sub	sp, #60	; 0x3c
 8001582:	af0a      	add	r7, sp, #40	; 0x28
 8001584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e116      	b.n	80017be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f008 fb06 	bl	8009bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fc6d 	bl	8005eae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	687e      	ldr	r6, [r7, #4]
 80015dc:	466d      	mov	r5, sp
 80015de:	f106 0410 	add.w	r4, r6, #16
 80015e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f2:	1d33      	adds	r3, r6, #4
 80015f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f004 fb38 	bl	8005c6c <USB_CoreInit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0d7      	b.n	80017be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fc5b 	bl	8005ed0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e04a      	b.n	80016b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	333d      	adds	r3, #61	; 0x3d
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	333c      	adds	r3, #60	; 0x3c
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	b298      	uxth	r0, r3
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3356      	adds	r3, #86	; 0x56
 800165c:	4602      	mov	r2, r0
 800165e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3340      	adds	r3, #64	; 0x40
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3344      	adds	r3, #68	; 0x44
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	3348      	adds	r3, #72	; 0x48
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	334c      	adds	r3, #76	; 0x4c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3af      	bcc.n	8001620 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e044      	b.n	8001750 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	3301      	adds	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3b5      	bcc.n	80016c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	687e      	ldr	r6, [r7, #4]
 8001762:	466d      	mov	r5, sp
 8001764:	f106 0410 	add.w	r4, r6, #16
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001774:	e885 0003 	stmia.w	r5, {r0, r1}
 8001778:	1d33      	adds	r3, r6, #4
 800177a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f004 fbf3 	bl	8005f68 <USB_DevInit>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e014      	b.n	80017be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f001 f96f 	bl	8002a90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fc35 	bl	8007026 <USB_DevDisconnect>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_Start+0x1c>
 80017de:	2302      	movs	r3, #2
 80017e0:	e022      	b.n	8001828 <HAL_PCD_Start+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f004 fb3c 	bl	8005e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fbe3 	bl	8006fe4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08d      	sub	sp, #52	; 0x34
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f005 fca1 	bl	800718e <USB_GetMode>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 84b7 	bne.w	80021c2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f005 fc05 	bl	8007068 <USB_ReadInterrupts>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 84ad 	beq.w	80021c0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	0a1b      	lsrs	r3, r3, #8
 8001870:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fbf2 	bl	8007068 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f002 0202 	and.w	r2, r2, #2
 800189c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 fbe0 	bl	8007068 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d161      	bne.n	8001976 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0210 	bic.w	r2, r2, #16
 80018c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f003 020f 	and.w	r2, r3, #15
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	3304      	adds	r3, #4
 80018e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	0c5b      	lsrs	r3, r3, #17
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d124      	bne.n	8001938 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d035      	beq.n	8001966 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001908:	b29b      	uxth	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	6a38      	ldr	r0, [r7, #32]
 800190e:	f005 fa17 	bl	8006d40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191e:	441a      	add	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001930:	441a      	add	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	e016      	b.n	8001966 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	0c5b      	lsrs	r3, r3, #17
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	2b06      	cmp	r3, #6
 8001942:	d110      	bne.n	8001966 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800194a:	2208      	movs	r2, #8
 800194c:	4619      	mov	r1, r3
 800194e:	6a38      	ldr	r0, [r7, #32]
 8001950:	f005 f9f6 	bl	8006d40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001960:	441a      	add	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0210 	orr.w	r2, r2, #16
 8001974:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f005 fb74 	bl	8007068 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001986:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800198a:	f040 80a7 	bne.w	8001adc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fb79 	bl	800708e <USB_ReadDevAllOutEpInterrupt>
 800199c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800199e:	e099      	b.n	8001ad4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 808e 	beq.w	8001ac8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f005 fb9d 	bl	80070f6 <USB_ReadDevOutEPInterrupt>
 80019bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d4:	461a      	mov	r2, r3
 80019d6:	2301      	movs	r3, #1
 80019d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fed1 	bl	8002784 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00c      	beq.n	8001a06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f8:	461a      	mov	r2, r3
 80019fa:	2308      	movs	r3, #8
 80019fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 ffa7 	bl	8002954 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2310      	movs	r3, #16
 8001a20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d030      	beq.n	8001a8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b80      	cmp	r3, #128	; 0x80
 8001a36:	d109      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3304      	adds	r3, #4
 8001a60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	78db      	ldrb	r3, [r3, #3]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f008 f9c6 	bl	8009e08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f003 0320 	and.w	r3, r3, #32
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f af62 	bne.w	80019a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fac1 	bl	8007068 <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001af0:	f040 80db 	bne.w	8001caa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 fae2 	bl	80070c2 <USB_ReadDevAllInEpInterrupt>
 8001afe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b04:	e0cd      	b.n	8001ca2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80c2 	beq.w	8001c96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 fb08 	bl	8007132 <USB_ReadDevInEPInterrupt>
 8001b22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d057      	beq.n	8001bde <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	2201      	movs	r2, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69f9      	ldr	r1, [r7, #28]
 8001b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b4e:	4013      	ands	r3, r2
 8001b50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d132      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	3348      	adds	r3, #72	; 0x48
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4403      	add	r3, r0
 8001b8c:	3344      	adds	r3, #68	; 0x44
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4419      	add	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	3348      	adds	r3, #72	; 0x48
 8001ba2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d113      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x3a2>
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	334c      	adds	r3, #76	; 0x4c
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d108      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2101      	movs	r1, #1
 8001bce:	f005 fb11 	bl	80071f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f008 f890 	bl	8009cfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c10:	461a      	mov	r2, r3
 8001c12:	2310      	movs	r3, #16
 8001c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3e:	6a38      	ldr	r0, [r7, #32]
 8001c40:	f004 faf0 	bl	8006224 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	3338      	adds	r3, #56	; 0x38
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	78db      	ldrb	r3, [r3, #3]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f008 f8dd 	bl	8009e2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2302      	movs	r3, #2
 8001c82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fcea 	bl	800266a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f47f af2e 	bne.w	8001b06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 f9da 	bl	8007068 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cbe:	d122      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fef5 	bl	8002ad8 <HAL_PCDEx_LPM_Callback>
 8001cee:	e002      	b.n	8001cf6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f008 f87b 	bl	8009dec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 f9ac 	bl	8007068 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d1a:	d112      	bne.n	8001d42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d102      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f008 f837 	bl	8009da0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 f98e 	bl	8007068 <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d56:	d121      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d66:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d111      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fea2 	bl	8002ad8 <HAL_PCDEx_LPM_Callback>
 8001d94:	e002      	b.n	8001d9c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f008 f802 	bl	8009da0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 f961 	bl	8007068 <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db0:	f040 80b7 	bne.w	8001f22 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fa28 	bl	8006224 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd8:	e046      	b.n	8001e68 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de6:	461a      	mov	r2, r3
 8001de8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfe:	0151      	lsls	r1, r2, #5
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	440a      	add	r2, r1
 8001e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e32:	0151      	lsls	r1, r2, #5
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	440a      	add	r2, r1
 8001e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e52:	0151      	lsls	r1, r2, #5
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	440a      	add	r2, r1
 8001e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	3301      	adds	r3, #1
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3b3      	bcc.n	8001dda <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9e:	f043 030b 	orr.w	r3, r3, #11
 8001ea2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb4:	f043 030b 	orr.w	r3, r3, #11
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	e015      	b.n	8001ee8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f242 032b 	movw	r3, #8235	; 0x202b
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee2:	f043 030b 	orr.w	r3, r3, #11
 8001ee6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ef6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001efa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f005 f971 	bl	80071f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 f89e 	bl	8007068 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f36:	d124      	bne.n	8001f82 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f005 f935 	bl	80071ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f9e9 	bl	800631e <USB_GetDevSpeed>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681c      	ldr	r4, [r3, #0]
 8001f58:	f001 fd9e 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8001f5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4620      	mov	r0, r4
 8001f68:	f003 feee 	bl	8005d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f007 feee 	bl	8009d4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f005 f86e 	bl	8007068 <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d10a      	bne.n	8001fac <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f007 fecb 	bl	8009d32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f002 0208 	and.w	r2, r2, #8
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 f859 	bl	8007068 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d122      	bne.n	8002006 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fcc:	2301      	movs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd0:	e014      	b.n	8001ffc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fb09 	bl	8002608 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	429a      	cmp	r2, r3
 8002004:	d3e5      	bcc.n	8001fd2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f005 f82c 	bl	8007068 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800201a:	d13b      	bne.n	8002094 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
 8002020:	e02b      	b.n	800207a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3340      	adds	r3, #64	; 0x40
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d115      	bne.n	8002074 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002048:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	da12      	bge.n	8002074 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	333f      	adds	r3, #63	; 0x3f
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 faca 	bl	8002608 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	3301      	adds	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	429a      	cmp	r2, r3
 8002082:	d3ce      	bcc.n	8002022 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 ffe5 	bl	8007068 <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020a8:	d155      	bne.n	8002156 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020aa:	2301      	movs	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	e045      	b.n	800213c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d12e      	bne.n	8002136 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da2b      	bge.n	8002136 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d121      	bne.n	8002136 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10a      	bne.n	8002136 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6053      	str	r3, [r2, #4]
            break;
 8002134:	e007      	b.n	8002146 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	429a      	cmp	r2, r3
 8002144:	d3b4      	bcc.n	80020b0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f004 ff84 	bl	8007068 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d10a      	bne.n	8002182 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f007 fe6f 	bl	8009e50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 ff6e 	bl	8007068 <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d115      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f007 fe5f 	bl	8009e6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e000      	b.n	80021c2 <HAL_PCD_IRQHandler+0x992>
      return;
 80021c0:	bf00      	nop
    }
  }
}
 80021c2:	3734      	adds	r7, #52	; 0x34
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}

080021c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_SetAddress+0x1a>
 80021de:	2302      	movs	r3, #2
 80021e0:	e013      	b.n	800220a <HAL_PCD_SetAddress+0x42>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 fecc 	bl	8006f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	4608      	mov	r0, r1
 800221c:	4611      	mov	r1, r2
 800221e:	461a      	mov	r2, r3
 8002220:	4603      	mov	r3, r0
 8002222:	70fb      	strb	r3, [r7, #3]
 8002224:	460b      	mov	r3, r1
 8002226:	803b      	strh	r3, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0f      	bge.n	8002258 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3338      	adds	r3, #56	; 0x38
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	705a      	strb	r2, [r3, #1]
 8002256:	e00f      	b.n	8002278 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002284:	883a      	ldrh	r2, [r7, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	78ba      	ldrb	r2, [r7, #2]
 800228e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022a2:	78bb      	ldrb	r3, [r7, #2]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d102      	bne.n	80022ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_PCD_EP_Open+0xaa>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e00e      	b.n	80022da <HAL_PCD_EP_Open+0xc8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 f84c 	bl	8006368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80022d8:	7afb      	ldrb	r3, [r7, #11]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da0f      	bge.n	8002316 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 020f 	and.w	r2, r3, #15
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	3338      	adds	r3, #56	; 0x38
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	3304      	adds	r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	705a      	strb	r2, [r3, #1]
 8002314:	e00f      	b.n	8002336 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 020f 	and.w	r2, r3, #15
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_PCD_EP_Close+0x6e>
 800234c:	2302      	movs	r3, #2
 800234e:	e00e      	b.n	800236e <HAL_PCD_EP_Close+0x8c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 f88a 	bl	8006478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	460b      	mov	r3, r1
 8002384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002386:	7afb      	ldrb	r3, [r7, #11]
 8002388:	f003 020f 	and.w	r2, r3, #15
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	3304      	adds	r3, #4
 800239e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2200      	movs	r2, #0
 80023b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6979      	ldr	r1, [r7, #20]
 80023e0:	f004 f926 	bl	8006630 <USB_EPStartXfer>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002410:	681b      	ldr	r3, [r3, #0]
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	460b      	mov	r3, r1
 800242c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	3338      	adds	r3, #56	; 0x38
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6979      	ldr	r1, [r7, #20]
 8002486:	f004 f8d3 	bl	8006630 <USB_EPStartXfer>

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d901      	bls.n	80024b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e050      	b.n	8002554 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da0f      	bge.n	80024da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	3338      	adds	r3, #56	; 0x38
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	3304      	adds	r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	705a      	strb	r2, [r3, #1]
 80024d8:	e00d      	b.n	80024f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_EP_SetStall+0x82>
 8002512:	2302      	movs	r3, #2
 8002514:	e01e      	b.n	8002554 <HAL_PCD_EP_SetStall+0xc0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	f004 fc63 	bl	8006df0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	b2d9      	uxtb	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002544:	461a      	mov	r2, r3
 8002546:	f004 fe55 	bl	80071f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 020f 	and.w	r2, r3, #15
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d901      	bls.n	800257a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e042      	b.n	8002600 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800257a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257e:	2b00      	cmp	r3, #0
 8002580:	da0f      	bge.n	80025a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 020f 	and.w	r2, r3, #15
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	3338      	adds	r3, #56	; 0x38
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	3304      	adds	r3, #4
 8002598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	705a      	strb	r2, [r3, #1]
 80025a0:	e00f      	b.n	80025c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_PCD_EP_ClrStall+0x86>
 80025de:	2302      	movs	r3, #2
 80025e0:	e00e      	b.n	8002600 <HAL_PCD_EP_ClrStall+0xa4>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68f9      	ldr	r1, [r7, #12]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fc6b 	bl	8006ecc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002618:	2b00      	cmp	r3, #0
 800261a:	da0c      	bge.n	8002636 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	3338      	adds	r3, #56	; 0x38
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	3304      	adds	r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e00c      	b.n	8002650 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fa8a 	bl	8006b70 <USB_EPStopXfer>
 800265c:	4603      	mov	r3, r0
 800265e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002660:	7afb      	ldrb	r3, [r7, #11]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b08a      	sub	sp, #40	; 0x28
 800266e:	af02      	add	r7, sp, #8
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	3338      	adds	r3, #56	; 0x38
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	429a      	cmp	r2, r3
 800269c:	d901      	bls.n	80026a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06c      	b.n	800277c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d902      	bls.n	80026be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3303      	adds	r3, #3
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026c6:	e02b      	b.n	8002720 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d902      	bls.n	80026e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3303      	adds	r3, #3
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	4603      	mov	r3, r0
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f004 fade 	bl	8006cc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	441a      	add	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	441a      	add	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	429a      	cmp	r2, r3
 8002734:	d809      	bhi.n	800274a <PCD_WriteEmptyTxFifo+0xe0>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800273e:	429a      	cmp	r2, r3
 8002740:	d203      	bcs.n	800274a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1be      	bne.n	80026c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	429a      	cmp	r2, r3
 8002754:	d811      	bhi.n	800277a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	2201      	movs	r2, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	43db      	mvns	r3, r3
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002776:	4013      	ands	r3, r2
 8002778:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	333c      	adds	r3, #60	; 0x3c
 800279c:	3304      	adds	r3, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d17b      	bne.n	80028b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	4a61      	ldr	r2, [pc, #388]	; (800294c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	f240 80b9 	bls.w	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80b3 	beq.w	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ec:	6093      	str	r3, [r2, #8]
 80027ee:	e0a7      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4413      	add	r3, r2
 8002802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002806:	461a      	mov	r2, r3
 8002808:	2320      	movs	r3, #32
 800280a:	6093      	str	r3, [r2, #8]
 800280c:	e098      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 8093 	bne.w	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4a4b      	ldr	r2, [pc, #300]	; (800294c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d90f      	bls.n	8002842 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283e:	6093      	str	r3, [r2, #8]
 8002840:	e07e      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	3304      	adds	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	440b      	add	r3, r1
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d114      	bne.n	80028a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800288c:	461a      	mov	r2, r3
 800288e:	2101      	movs	r1, #1
 8002890:	f004 fcb0 	bl	80071f4 <USB_EP0_OutStart>
 8002894:	e006      	b.n	80028a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	441a      	add	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f007 fa0c 	bl	8009cc8 <HAL_PCD_DataOutStageCallback>
 80028b0:	e046      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d124      	bne.n	8002904 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d6:	6093      	str	r3, [r2, #8]
 80028d8:	e032      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	2320      	movs	r3, #32
 80028f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f007 f9e3 	bl	8009cc8 <HAL_PCD_DataOutStageCallback>
 8002902:	e01d      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d114      	bne.n	8002934 <PCD_EP_OutXfrComplete_int+0x1b0>
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800292c:	461a      	mov	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f004 fc60 	bl	80071f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f007 f9c4 	bl	8009cc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	4f54300a 	.word	0x4f54300a
 8002950:	4f54310a 	.word	0x4f54310a

08002954 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	333c      	adds	r3, #60	; 0x3c
 800296c:	3304      	adds	r3, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a15      	ldr	r2, [pc, #84]	; (80029dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d90e      	bls.n	80029a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a0:	461a      	mov	r2, r3
 80029a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f007 f97b 	bl	8009ca4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <PCD_EP_OutSetupPacket_int+0x88>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d90c      	bls.n	80029d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029c8:	461a      	mov	r2, r3
 80029ca:	2101      	movs	r1, #1
 80029cc:	f004 fc12 	bl	80071f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	4f54300a 	.word	0x4f54300a

080029e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
 80029ec:	4613      	mov	r3, r2
 80029ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029fe:	883b      	ldrh	r3, [r7, #0]
 8002a00:	0419      	lsls	r1, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a0c:	e028      	b.n	8002a60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e00d      	b.n	8002a3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	3340      	adds	r3, #64	; 0x40
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d3ec      	bcc.n	8002a22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a48:	883b      	ldrh	r3, [r7, #0]
 8002a4a:	0418      	lsls	r0, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	4302      	orrs	r2, r0
 8002a58:	3340      	adds	r3, #64	; 0x40
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	10000003 	.word	0x10000003

08002ad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_PWREx_ConfigSupply+0x70>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d00a      	beq.n	8002b1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_PWREx_ConfigSupply+0x70>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01f      	b.n	8002b56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e01d      	b.n	8002b56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_PWREx_ConfigSupply+0x70>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	490f      	ldr	r1, [pc, #60]	; (8002b60 <HAL_PWREx_ConfigSupply+0x70>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b2a:	f7fe f9ad 	bl	8000e88 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b30:	e009      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b32:	f7fe f9a9 	bl	8000e88 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b40:	d901      	bls.n	8002b46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_PWREx_ConfigSupply+0x70>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d1ee      	bne.n	8002b32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	58024800 	.word	0x58024800

08002b64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	58024800 	.word	0x58024800

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f000 bc48 	b.w	8003428 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8088 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	4b99      	ldr	r3, [pc, #612]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bb0:	4b96      	ldr	r3, [pc, #600]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d007      	beq.n	8002bcc <HAL_RCC_OscConfig+0x48>
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	2b18      	cmp	r3, #24
 8002bc0:	d111      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62>
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d06d      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x130>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d169      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f000 bc21 	b.w	8003428 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7a>
 8002bf0:	4b86      	ldr	r3, [pc, #536]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a85      	ldr	r2, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e02e      	b.n	8002c5c <HAL_RCC_OscConfig+0xd8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x9c>
 8002c06:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7d      	ldr	r2, [pc, #500]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xd8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0xc0>
 8002c2a:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a77      	ldr	r2, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a74      	ldr	r2, [pc, #464]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xd8>
 8002c44:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a70      	ldr	r2, [pc, #448]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b6e      	ldr	r3, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6d      	ldr	r2, [pc, #436]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f910 	bl	8000e88 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f90c 	bl	8000e88 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e3d4      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe8>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f8fc 	bl	8000e88 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f8f8 	bl	8000e88 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e3c0      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x110>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80ca 	beq.w	8002e58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc4:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ccc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cce:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_RCC_OscConfig+0x166>
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b18      	cmp	r3, #24
 8002cde:	d156      	bne.n	8002d8e <HAL_RCC_OscConfig+0x20a>
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d151      	bne.n	8002d8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cea:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e392      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d02:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0219 	bic.w	r2, r3, #25
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	493f      	ldr	r1, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe f8b8 	bl	8000e88 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f8b4 	bl	8000e88 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e37c      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	f7fe f8d5 	bl	8000ee8 <HAL_GetREVID>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d817      	bhi.n	8002d78 <HAL_RCC_OscConfig+0x1f4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d108      	bne.n	8002d62 <HAL_RCC_OscConfig+0x1de>
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d58:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d60:	e07a      	b.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	031b      	lsls	r3, r3, #12
 8002d70:	4926      	ldr	r1, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d76:	e06f      	b.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	4921      	ldr	r1, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	e064      	b.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d047      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0219 	bic.w	r2, r3, #25
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	491a      	ldr	r1, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f86e 	bl	8000e88 <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fe f86a 	bl	8000e88 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e332      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	f7fe f88b 	bl	8000ee8 <HAL_GetREVID>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d819      	bhi.n	8002e10 <HAL_RCC_OscConfig+0x28c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d108      	bne.n	8002df6 <HAL_RCC_OscConfig+0x272>
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dec:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df2:	6053      	str	r3, [r2, #4]
 8002df4:	e030      	b.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	4901      	ldr	r1, [pc, #4]	; (8002e0c <HAL_RCC_OscConfig+0x288>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
 8002e0a:	e025      	b.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	4b9a      	ldr	r3, [pc, #616]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4997      	ldr	r1, [pc, #604]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b95      	ldr	r3, [pc, #596]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a94      	ldr	r2, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe f829 	bl	8000e88 <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe f825 	bl	8000e88 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e2ed      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e4c:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a9 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e66:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e70:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d007      	beq.n	8002e8c <HAL_RCC_OscConfig+0x308>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b18      	cmp	r3, #24
 8002e80:	d13a      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x374>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d135      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e8c:	4b7b      	ldr	r3, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x320>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e2c1      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ea4:	f7fe f820 	bl	8000ee8 <HAL_GetREVID>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d817      	bhi.n	8002ee2 <HAL_RCC_OscConfig+0x35e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCC_OscConfig+0x348>
 8002eba:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ec2:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ec8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eca:	e075      	b.n	8002fb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	069b      	lsls	r3, r3, #26
 8002eda:	4968      	ldr	r1, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee0:	e06a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee2:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	4962      	ldr	r1, [pc, #392]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef6:	e05f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d042      	beq.n	8002f86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fd ffbc 	bl	8000e88 <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f14:	f7fd ffb8 	bl	8000e88 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e280      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f26:	4b55      	ldr	r3, [pc, #340]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f32:	f7fd ffd9 	bl	8000ee8 <HAL_GetREVID>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d817      	bhi.n	8002f70 <HAL_RCC_OscConfig+0x3ec>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d108      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3d6>
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f50:	4a4a      	ldr	r2, [pc, #296]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f56:	6053      	str	r3, [r2, #4]
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x434>
 8002f5a:	4b48      	ldr	r3, [pc, #288]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	4944      	ldr	r1, [pc, #272]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
 8002f6e:	e023      	b.n	8002fb8 <HAL_RCC_OscConfig+0x434>
 8002f70:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	493f      	ldr	r1, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60cb      	str	r3, [r1, #12]
 8002f84:	e018      	b.n	8002fb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a3c      	ldr	r2, [pc, #240]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd ff79 	bl	8000e88 <HAL_GetTick>
 8002f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f9a:	f7fd ff75 	bl	8000e88 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e23d      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d036      	beq.n	8003032 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d019      	beq.n	8003000 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fd ff56 	bl	8000e88 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd ff52 	bl	8000e88 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e21a      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x45c>
 8002ffe:	e018      	b.n	8003032 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8003002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fd ff3c 	bl	8000e88 <HAL_GetTick>
 8003010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7fd ff38 	bl	8000e88 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e200      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d039      	beq.n	80030b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0c      	ldr	r2, [pc, #48]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 800304c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003050:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003052:	f7fd ff19 	bl	8000e88 <HAL_GetTick>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800305a:	f7fd ff15 	bl	8000e88 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1dd      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x4d6>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
 800307a:	bf00      	nop
 800307c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003080:	4b9b      	ldr	r3, [pc, #620]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a9a      	ldr	r2, [pc, #616]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800308a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800308c:	f7fd fefc 	bl	8000e88 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003094:	f7fd fef8 	bl	8000e88 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1c0      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030a6:	4b92      	ldr	r3, [pc, #584]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8081 	beq.w	80031c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030c0:	4b8c      	ldr	r3, [pc, #560]	; (80032f4 <HAL_RCC_OscConfig+0x770>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a8b      	ldr	r2, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x770>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030cc:	f7fd fedc 	bl	8000e88 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fd fed8 	bl	8000e88 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1a0      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030e6:	4b83      	ldr	r3, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x770>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d106      	bne.n	8003108 <HAL_RCC_OscConfig+0x584>
 80030fa:	4b7d      	ldr	r3, [pc, #500]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a7c      	ldr	r2, [pc, #496]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	e02d      	b.n	8003164 <HAL_RCC_OscConfig+0x5e0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x5a6>
 8003110:	4b77      	ldr	r3, [pc, #476]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a76      	ldr	r2, [pc, #472]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b74      	ldr	r3, [pc, #464]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a73      	ldr	r2, [pc, #460]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	e01c      	b.n	8003164 <HAL_RCC_OscConfig+0x5e0>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x5c8>
 8003132:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a6e      	ldr	r2, [pc, #440]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	4b6c      	ldr	r3, [pc, #432]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a6b      	ldr	r2, [pc, #428]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0x5e0>
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a64      	ldr	r2, [pc, #400]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fd fe8c 	bl	8000e88 <HAL_GetTick>
 8003170:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fd fe88 	bl	8000e88 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e14e      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318a:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ee      	beq.n	8003174 <HAL_RCC_OscConfig+0x5f0>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fd fe76 	bl	8000e88 <HAL_GetTick>
 800319c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fd fe72 	bl	8000e88 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e138      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ee      	bne.n	80031a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 812d 	beq.w	8003426 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031cc:	4b48      	ldr	r3, [pc, #288]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d4:	2b18      	cmp	r3, #24
 80031d6:	f000 80bd 	beq.w	8003354 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b02      	cmp	r3, #2
 80031e0:	f040 809e 	bne.w	8003320 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80031ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd fe4a 	bl	8000e88 <HAL_GetTick>
 80031f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fd fe46 	bl	8000e88 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e10e      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321a:	4b37      	ldr	r3, [pc, #220]	; (80032f8 <HAL_RCC_OscConfig+0x774>)
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	430a      	orrs	r2, r1
 800322a:	4931      	ldr	r1, [pc, #196]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800322c:	4313      	orrs	r3, r2
 800322e:	628b      	str	r3, [r1, #40]	; 0x28
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	3b01      	subs	r3, #1
 8003236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	3b01      	subs	r3, #1
 8003240:	025b      	lsls	r3, r3, #9
 8003242:	b29b      	uxth	r3, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	3b01      	subs	r3, #1
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003258:	3b01      	subs	r3, #1
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003260:	4923      	ldr	r1, [pc, #140]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCC_OscConfig+0x778>)
 8003278:	4013      	ands	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	491b      	ldr	r1, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f023 020c 	bic.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4917      	ldr	r1, [pc, #92]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f023 0202 	bic.w	r2, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	4912      	ldr	r1, [pc, #72]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <HAL_RCC_OscConfig+0x76c>)
 80032e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fd fdcf 	bl	8000e88 <HAL_GetTick>
 80032ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ec:	e011      	b.n	8003312 <HAL_RCC_OscConfig+0x78e>
 80032ee:	bf00      	nop
 80032f0:	58024400 	.word	0x58024400
 80032f4:	58024800 	.word	0x58024800
 80032f8:	fffffc0c 	.word	0xfffffc0c
 80032fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd fdc2 	bl	8000e88 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e08a      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x77c>
 800331e:	e082      	b.n	8003426 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fd fdac 	bl	8000e88 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fd fda8 	bl	8000e88 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e070      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003346:	4b3a      	ldr	r3, [pc, #232]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x7b0>
 8003352:	e068      	b.n	8003426 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003354:	4b36      	ldr	r3, [pc, #216]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800335a:	4b35      	ldr	r3, [pc, #212]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d031      	beq.n	80033cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f003 0203 	and.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d12a      	bne.n	80033cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d122      	bne.n	80033cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d11a      	bne.n	80033cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	0a5b      	lsrs	r3, r3, #9
 800339a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d111      	bne.n	80033cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d108      	bne.n	80033cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e02b      	b.n	8003428 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	08db      	lsrs	r3, r3, #3
 80033d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d01f      	beq.n	8003426 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033f2:	f7fd fd49 	bl	8000e88 <HAL_GetTick>
 80033f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033f8:	bf00      	nop
 80033fa:	f7fd fd45 	bl	8000e88 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	4293      	cmp	r3, r2
 8003404:	d0f9      	beq.n	80033fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_RCC_OscConfig+0x8b0>)
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003412:	00d2      	lsls	r2, r2, #3
 8003414:	4906      	ldr	r1, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003416:	4313      	orrs	r3, r2
 8003418:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_RCC_OscConfig+0x8ac>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3730      	adds	r7, #48	; 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	58024400 	.word	0x58024400
 8003434:	ffff0007 	.word	0xffff0007

08003438 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e19c      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b8a      	ldr	r3, [pc, #552]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d910      	bls.n	800347c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b87      	ldr	r3, [pc, #540]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	4985      	ldr	r1, [pc, #532]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b83      	ldr	r3, [pc, #524]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e184      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d010      	beq.n	80034aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	4b7b      	ldr	r3, [pc, #492]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003494:	429a      	cmp	r2, r3
 8003496:	d908      	bls.n	80034aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003498:	4b78      	ldr	r3, [pc, #480]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4975      	ldr	r1, [pc, #468]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d010      	beq.n	80034d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d908      	bls.n	80034d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034c6:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	496a      	ldr	r1, [pc, #424]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d010      	beq.n	8003506 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699a      	ldr	r2, [r3, #24]
 80034e8:	4b64      	ldr	r3, [pc, #400]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d908      	bls.n	8003506 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034f4:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	495e      	ldr	r1, [pc, #376]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003502:	4313      	orrs	r3, r2
 8003504:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d010      	beq.n	8003534 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800351e:	429a      	cmp	r2, r3
 8003520:	d908      	bls.n	8003534 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003522:	4b56      	ldr	r3, [pc, #344]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4953      	ldr	r1, [pc, #332]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003530:	4313      	orrs	r3, r2
 8003532:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	429a      	cmp	r2, r3
 800354e:	d908      	bls.n	8003562 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b4a      	ldr	r3, [pc, #296]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f023 020f 	bic.w	r2, r3, #15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4947      	ldr	r1, [pc, #284]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800355e:	4313      	orrs	r3, r2
 8003560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d055      	beq.n	800361a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4940      	ldr	r1, [pc, #256]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800357c:	4313      	orrs	r3, r2
 800357e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d107      	bne.n	8003598 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003588:	4b3c      	ldr	r3, [pc, #240]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d121      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0f6      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d115      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0ea      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035b8:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0de      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c8:	4b2c      	ldr	r3, [pc, #176]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d6      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035d8:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f023 0207 	bic.w	r2, r3, #7
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4925      	ldr	r1, [pc, #148]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ea:	f7fd fc4d 	bl	8000e88 <HAL_GetTick>
 80035ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	f7fd fc49 	bl	8000e88 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0be      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	429a      	cmp	r2, r3
 8003618:	d1eb      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	429a      	cmp	r2, r3
 8003634:	d208      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f023 020f 	bic.w	r2, r3, #15
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_RCC_ClockConfig+0x244>)
 8003644:	4313      	orrs	r3, r2
 8003646:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d214      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 020f 	bic.w	r2, r3, #15
 800365e:	4906      	ldr	r1, [pc, #24]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_RCC_ClockConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e086      	b.n	8003786 <HAL_RCC_ClockConfig+0x34e>
 8003678:	52002000 	.word	0x52002000
 800367c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003698:	429a      	cmp	r2, r3
 800369a:	d208      	bcs.n	80036ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800369c:	4b3c      	ldr	r3, [pc, #240]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4939      	ldr	r1, [pc, #228]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d208      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	492e      	ldr	r1, [pc, #184]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d010      	beq.n	800370a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d208      	bcs.n	800370a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4922      	ldr	r1, [pc, #136]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 8003706:	4313      	orrs	r3, r2
 8003708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003722:	429a      	cmp	r2, r3
 8003724:	d208      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4917      	ldr	r1, [pc, #92]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 8003734:	4313      	orrs	r3, r2
 8003736:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003738:	f000 f834 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	4912      	ldr	r1, [pc, #72]	; (8003794 <HAL_RCC_ClockConfig+0x35c>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
 8003754:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_RCC_ClockConfig+0x358>)
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <HAL_RCC_ClockConfig+0x35c>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <HAL_RCC_ClockConfig+0x360>)
 800376e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003770:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x364>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x368>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd f89a 	bl	80008b4 <HAL_InitTick>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	58024400 	.word	0x58024400
 8003794:	0800d214 	.word	0x0800d214
 8003798:	24000004 	.word	0x24000004
 800379c:	24000000 	.word	0x24000000
 80037a0:	24000008 	.word	0x24000008

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037aa:	4bb3      	ldr	r3, [pc, #716]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b2:	2b18      	cmp	r3, #24
 80037b4:	f200 8155 	bhi.w	8003a62 <HAL_RCC_GetSysClockFreq+0x2be>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	08003825 	.word	0x08003825
 80037c4:	08003a63 	.word	0x08003a63
 80037c8:	08003a63 	.word	0x08003a63
 80037cc:	08003a63 	.word	0x08003a63
 80037d0:	08003a63 	.word	0x08003a63
 80037d4:	08003a63 	.word	0x08003a63
 80037d8:	08003a63 	.word	0x08003a63
 80037dc:	08003a63 	.word	0x08003a63
 80037e0:	0800384b 	.word	0x0800384b
 80037e4:	08003a63 	.word	0x08003a63
 80037e8:	08003a63 	.word	0x08003a63
 80037ec:	08003a63 	.word	0x08003a63
 80037f0:	08003a63 	.word	0x08003a63
 80037f4:	08003a63 	.word	0x08003a63
 80037f8:	08003a63 	.word	0x08003a63
 80037fc:	08003a63 	.word	0x08003a63
 8003800:	08003851 	.word	0x08003851
 8003804:	08003a63 	.word	0x08003a63
 8003808:	08003a63 	.word	0x08003a63
 800380c:	08003a63 	.word	0x08003a63
 8003810:	08003a63 	.word	0x08003a63
 8003814:	08003a63 	.word	0x08003a63
 8003818:	08003a63 	.word	0x08003a63
 800381c:	08003a63 	.word	0x08003a63
 8003820:	08003857 	.word	0x08003857
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003824:	4b94      	ldr	r3, [pc, #592]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003830:	4b91      	ldr	r3, [pc, #580]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	4a90      	ldr	r2, [pc, #576]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003842:	e111      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003844:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003846:	61bb      	str	r3, [r7, #24]
      break;
 8003848:	e10e      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800384a:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800384c:	61bb      	str	r3, [r7, #24]
      break;
 800384e:	e10b      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003850:	4b8c      	ldr	r3, [pc, #560]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003852:	61bb      	str	r3, [r7, #24]
      break;
 8003854:	e108      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003860:	4b85      	ldr	r3, [pc, #532]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800386a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800386c:	4b82      	ldr	r3, [pc, #520]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003876:	4b80      	ldr	r3, [pc, #512]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	08db      	lsrs	r3, r3, #3
 800387c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80e1 	beq.w	8003a5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b02      	cmp	r3, #2
 800389e:	f000 8083 	beq.w	80039a8 <HAL_RCC_GetSysClockFreq+0x204>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	f200 80a1 	bhi.w	80039ec <HAL_RCC_GetSysClockFreq+0x248>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x114>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d056      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038b6:	e099      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b8:	4b6f      	ldr	r3, [pc, #444]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02d      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038c4:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	4a6b      	ldr	r2, [pc, #428]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
 80038d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b62      	ldr	r3, [pc, #392]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003902:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800391e:	e087      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b51      	ldr	r3, [pc, #324]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a02 	vldr	s12, [r7, #8]
 8003946:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003962:	e065      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a02 	vldr	s12, [r7, #8]
 800398a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039a6:	e043      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a94 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039ea:	e021      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a90 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	0a5b      	lsrs	r3, r3, #9
 8003a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a54:	ee17 3a90 	vmov	r3, s15
 8003a58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
      break;
 8003a60:	e002      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a64:	61bb      	str	r3, [r7, #24]
      break;
 8003a66:	bf00      	nop
  }

  return sysclockfreq;
 8003a68:	69bb      	ldr	r3, [r7, #24]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3724      	adds	r7, #36	; 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	03d09000 	.word	0x03d09000
 8003a80:	003d0900 	.word	0x003d0900
 8003a84:	017d7840 	.word	0x017d7840
 8003a88:	46000000 	.word	0x46000000
 8003a8c:	4c742400 	.word	0x4c742400
 8003a90:	4a742400 	.word	0x4a742400
 8003a94:	4bbebc20 	.word	0x4bbebc20

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a9e:	f7ff fe81 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490f      	ldr	r1, [pc, #60]	; (8003aec <HAL_RCC_GetHCLKFreq+0x54>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_GetHCLKFreq+0x54>)
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ad4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ad6:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	0800d214 	.word	0x0800d214
 8003af0:	24000004 	.word	0x24000004
 8003af4:	24000000 	.word	0x24000000

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003afc:	f7ff ffcc 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4904      	ldr	r1, [pc, #16]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	58024400 	.word	0x58024400
 8003b20:	0800d214 	.word	0x0800d214

08003b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223f      	movs	r2, #63	; 0x3f
 8003b32:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0207 	and.w	r2, r3, #7
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_RCC_GetClockConfig+0x7c>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetClockConfig+0x80>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	52002000 	.word	0x52002000

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b0ca      	sub	sp, #296	; 0x128
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003bcc:	2500      	movs	r5, #0
 8003bce:	ea54 0305 	orrs.w	r3, r4, r5
 8003bd2:	d049      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bde:	d02f      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003be0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003be4:	d828      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bea:	d01a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf0:	d822      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfa:	d007      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfe:	4bb8      	ldr	r3, [pc, #736]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4ab7      	ldr	r2, [pc, #732]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c0a:	e01a      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	3308      	adds	r3, #8
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f9d1 	bl	8004fbc <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c20:	e00f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c26:	3328      	adds	r3, #40	; 0x28
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 fa78 	bl	8005120 <RCCEx_PLL3_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c4a:	4ba5      	ldr	r3, [pc, #660]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c58:	4aa1      	ldr	r2, [pc, #644]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6513      	str	r3, [r2, #80]	; 0x50
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c74:	f04f 0900 	mov.w	r9, #0
 8003c78:	ea58 0309 	orrs.w	r3, r8, r9
 8003c7c:	d047      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d82a      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003ca5 	.word	0x08003ca5
 8003c94:	08003cb3 	.word	0x08003cb3
 8003c98:	08003cc9 	.word	0x08003cc9
 8003c9c:	08003ce7 	.word	0x08003ce7
 8003ca0:	08003ce7 	.word	0x08003ce7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca4:	4b8e      	ldr	r3, [pc, #568]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a8d      	ldr	r2, [pc, #564]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e01a      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f97e 	bl	8004fbc <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e00f      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ccc:	3328      	adds	r3, #40	; 0x28
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fa25 	bl	8005120 <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b7b      	ldr	r3, [pc, #492]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	f023 0107 	bic.w	r1, r3, #7
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	4a78      	ldr	r2, [pc, #480]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6513      	str	r3, [r2, #80]	; 0x50
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d1a:	f04f 0b00 	mov.w	fp, #0
 8003d1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d22:	d04c      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d030      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d34:	d829      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d36:	2bc0      	cmp	r3, #192	; 0xc0
 8003d38:	d02d      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d3c:	d825      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d018      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d821      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d007      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d4e:	e01c      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4a62      	ldr	r2, [pc, #392]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e01c      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d62:	3308      	adds	r3, #8
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f928 	bl	8004fbc <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d72:	e011      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	3328      	adds	r3, #40	; 0x28
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f9cf 	bl	8005120 <RCCEx_PLL3_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6513      	str	r3, [r2, #80]	; 0x50
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003dca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003dd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	d053      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003de6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dea:	d035      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df0:	d82e      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003df2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003df6:	d031      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003df8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dfc:	d828      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e02:	d01a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e08:	d822      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e12:	d007      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e14:	e01c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e22:	e01c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 f8c5 	bl	8004fbc <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e38:	e011      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3e:	3328      	adds	r3, #40	; 0x28
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f96c 	bl	8005120 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e4e:	e006      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e56:	e002      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e76:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d056      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb2:	d038      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb8:	d831      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ebe:	d034      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ec4:	d82b      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eca:	d01d      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ed0:	d825      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ed6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003edc:	e01f      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ede:	bf00      	nop
 8003ee0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee4:	4ba2      	ldr	r3, [pc, #648]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4aa1      	ldr	r2, [pc, #644]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e01c      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f85e 	bl	8004fbc <RCCEx_PLL2_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f06:	e011      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0c:	3328      	adds	r3, #40	; 0x28
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 f905 	bl	8005120 <RCCEx_PLL3_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f1c:	e006      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f24:	e002      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f34:	4b8e      	ldr	r3, [pc, #568]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f44:	4a8a      	ldr	r2, [pc, #552]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4a:	e003      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4313      	orrs	r3, r2
 8003f72:	d03a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	2b30      	cmp	r3, #48	; 0x30
 8003f7c:	d01f      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f7e:	2b30      	cmp	r3, #48	; 0x30
 8003f80:	d819      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d00c      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d815      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d111      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f92:	4b77      	ldr	r3, [pc, #476]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a76      	ldr	r2, [pc, #472]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f9e:	e011      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f807 	bl	8004fbc <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	4a65      	ldr	r2, [pc, #404]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe0:	e003      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003ff6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004000:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004004:	460b      	mov	r3, r1
 8004006:	4313      	orrs	r3, r2
 8004008:	d051      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004014:	d035      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401a:	d82e      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800401c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004020:	d031      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004022:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004026:	d828      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402c:	d01a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004032:	d822      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d007      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800403e:	e01c      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004040:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a4a      	ldr	r2, [pc, #296]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800404c:	e01c      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	3308      	adds	r3, #8
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f000 ffb0 	bl	8004fbc <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004062:	e011      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004068:	3328      	adds	r3, #40	; 0x28
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f857 	bl	8005120 <RCCEx_PLL3_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004078:	e006      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004080:	e002      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004082:	bf00      	nop
 8004084:	e000      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004090:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409e:	4a34      	ldr	r2, [pc, #208]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6513      	str	r3, [r2, #80]	; 0x50
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80040ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d056      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d033      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040de:	d82c      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e4:	d02f      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ea:	d826      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040f0:	d02b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040f6:	d820      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040fc:	d012      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004102:	d81a      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d022      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410c:	d115      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	3308      	adds	r3, #8
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 ff50 	bl	8004fbc <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004122:	e015      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004128:	3328      	adds	r3, #40	; 0x28
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fff7 	bl	8005120 <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004138:	e00a      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004142:	bf00      	nop
 8004144:	e004      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800414e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10d      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004166:	4a02      	ldr	r2, [pc, #8]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6513      	str	r3, [r2, #80]	; 0x50
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800416e:	bf00      	nop
 8004170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004192:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d055      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a8:	d033      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ae:	d82c      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d02f      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d826      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c0:	d02b      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c6:	d820      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041cc:	d012      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d2:	d81a      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d022      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041dc:	d115      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	3308      	adds	r3, #8
 80041e4:	2101      	movs	r1, #1
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fee8 	bl	8004fbc <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041f2:	e015      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	3328      	adds	r3, #40	; 0x28
 80041fa:	2101      	movs	r1, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 ff8f 	bl	8005120 <RCCEx_PLL3_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004208:	e00a      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004210:	e006      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004212:	bf00      	nop
 8004214:	e004      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800421e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004228:	4ba3      	ldr	r3, [pc, #652]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004238:	4a9f      	ldr	r2, [pc, #636]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800423a:	430b      	orrs	r3, r1
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
 800423e:	e003      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800425e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d037      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004272:	d00e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d816      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800427e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004282:	d111      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004284:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4a8b      	ldr	r2, [pc, #556]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004290:	e00f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	3308      	adds	r3, #8
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fe8e 	bl	8004fbc <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ae:	e000      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042ba:	4b7f      	ldr	r3, [pc, #508]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a7b      	ldr	r2, [pc, #492]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	6513      	str	r3, [r2, #80]	; 0x50
 80042ce:	e003      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d039      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d81c      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004345 	.word	0x08004345
 800430c:	08004319 	.word	0x08004319
 8004310:	08004327 	.word	0x08004327
 8004314:	08004345 	.word	0x08004345
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	4a66      	ldr	r2, [pc, #408]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432a:	3308      	adds	r3, #8
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fe44 	bl	8004fbc <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800433a:	e004      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004342:	e000      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800434e:	4b5a      	ldr	r3, [pc, #360]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	f023 0103 	bic.w	r1, r3, #3
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	4a56      	ldr	r2, [pc, #344]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800435e:	430b      	orrs	r3, r1
 8004360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004382:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	f000 809f 	beq.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800438e:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a4a      	ldr	r2, [pc, #296]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800439a:	f7fc fd75 	bl	8000e88 <HAL_GetTick>
 800439e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a2:	e00b      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a4:	f7fc fd70 	bl	8000e88 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b64      	cmp	r3, #100	; 0x64
 80043b2:	d903      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ed      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80043c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d179      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043dc:	4053      	eors	r3, r2
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d015      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e6:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a30      	ldr	r2, [pc, #192]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800440a:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800440c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d118      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fc fd32 	bl	8000e88 <HAL_GetTick>
 8004424:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004428:	e00d      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fc fd2d 	bl	8000e88 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	f241 3388 	movw	r3, #5000	; 0x1388
 800443a:	429a      	cmp	r2, r3
 800443c:	d903      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0eb      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d129      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446a:	d10e      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800447c:	091a      	lsrs	r2, r3, #4
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004480:	4013      	ands	r3, r2
 8004482:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6113      	str	r3, [r2, #16]
 8004488:	e005      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004490:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004494:	6113      	str	r3, [r2, #16]
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004498:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a6:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e00e      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80044b6:	e009      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044b8:	58024400 	.word	0x58024400
 80044bc:	58024800 	.word	0x58024800
 80044c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f002 0301 	and.w	r3, r2, #1
 80044d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f000 8089 	beq.w	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f4:	2b28      	cmp	r3, #40	; 0x28
 80044f6:	d86b      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	080045d9 	.word	0x080045d9
 8004504:	080045d1 	.word	0x080045d1
 8004508:	080045d1 	.word	0x080045d1
 800450c:	080045d1 	.word	0x080045d1
 8004510:	080045d1 	.word	0x080045d1
 8004514:	080045d1 	.word	0x080045d1
 8004518:	080045d1 	.word	0x080045d1
 800451c:	080045d1 	.word	0x080045d1
 8004520:	080045a5 	.word	0x080045a5
 8004524:	080045d1 	.word	0x080045d1
 8004528:	080045d1 	.word	0x080045d1
 800452c:	080045d1 	.word	0x080045d1
 8004530:	080045d1 	.word	0x080045d1
 8004534:	080045d1 	.word	0x080045d1
 8004538:	080045d1 	.word	0x080045d1
 800453c:	080045d1 	.word	0x080045d1
 8004540:	080045bb 	.word	0x080045bb
 8004544:	080045d1 	.word	0x080045d1
 8004548:	080045d1 	.word	0x080045d1
 800454c:	080045d1 	.word	0x080045d1
 8004550:	080045d1 	.word	0x080045d1
 8004554:	080045d1 	.word	0x080045d1
 8004558:	080045d1 	.word	0x080045d1
 800455c:	080045d1 	.word	0x080045d1
 8004560:	080045d9 	.word	0x080045d9
 8004564:	080045d1 	.word	0x080045d1
 8004568:	080045d1 	.word	0x080045d1
 800456c:	080045d1 	.word	0x080045d1
 8004570:	080045d1 	.word	0x080045d1
 8004574:	080045d1 	.word	0x080045d1
 8004578:	080045d1 	.word	0x080045d1
 800457c:	080045d1 	.word	0x080045d1
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d1 	.word	0x080045d1
 8004588:	080045d1 	.word	0x080045d1
 800458c:	080045d1 	.word	0x080045d1
 8004590:	080045d1 	.word	0x080045d1
 8004594:	080045d1 	.word	0x080045d1
 8004598:	080045d1 	.word	0x080045d1
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080045d9 	.word	0x080045d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	3308      	adds	r3, #8
 80045aa:	2101      	movs	r1, #1
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd05 	bl	8004fbc <RCCEx_PLL2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045b8:	e00f      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	3328      	adds	r3, #40	; 0x28
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fdac 	bl	8005120 <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045e2:	4bbf      	ldr	r3, [pc, #764]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f0:	4abb      	ldr	r2, [pc, #748]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6553      	str	r3, [r2, #84]	; 0x54
 80045f6:	e003      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f002 0302 	and.w	r3, r2, #2
 800460c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004610:	2300      	movs	r3, #0
 8004612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004616:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800461a:	460b      	mov	r3, r1
 800461c:	4313      	orrs	r3, r2
 800461e:	d041      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004626:	2b05      	cmp	r3, #5
 8004628:	d824      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	0800467d 	.word	0x0800467d
 8004634:	08004649 	.word	0x08004649
 8004638:	0800465f 	.word	0x0800465f
 800463c:	0800467d 	.word	0x0800467d
 8004640:	0800467d 	.word	0x0800467d
 8004644:	0800467d 	.word	0x0800467d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464c:	3308      	adds	r3, #8
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fcb3 	bl	8004fbc <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800465c:	e00f      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	3328      	adds	r3, #40	; 0x28
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fd5a 	bl	8005120 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004672:	e004      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800467c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800467e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004686:	4b96      	ldr	r3, [pc, #600]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f023 0107 	bic.w	r1, r3, #7
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004694:	4a92      	ldr	r2, [pc, #584]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004696:	430b      	orrs	r3, r1
 8004698:	6553      	str	r3, [r2, #84]	; 0x54
 800469a:	e003      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f002 0304 	and.w	r3, r2, #4
 80046b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d044      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046cc:	2b05      	cmp	r3, #5
 80046ce:	d825      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	08004725 	.word	0x08004725
 80046dc:	080046f1 	.word	0x080046f1
 80046e0:	08004707 	.word	0x08004707
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004725 	.word	0x08004725
 80046ec:	08004725 	.word	0x08004725
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f4:	3308      	adds	r3, #8
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fc5f 	bl	8004fbc <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004704:	e00f      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470a:	3328      	adds	r3, #40	; 0x28
 800470c:	2101      	movs	r1, #1
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fd06 	bl	8005120 <RCCEx_PLL3_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800471a:	e004      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004722:	e000      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800472e:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f023 0107 	bic.w	r1, r3, #7
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473e:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004740:	430b      	orrs	r3, r1
 8004742:	6593      	str	r3, [r2, #88]	; 0x58
 8004744:	e003      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800474a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f002 0320 	and.w	r3, r2, #32
 800475a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800475e:	2300      	movs	r3, #0
 8004760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004768:	460b      	mov	r3, r1
 800476a:	4313      	orrs	r3, r2
 800476c:	d055      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800477a:	d033      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800477c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004780:	d82c      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d02f      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d826      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800478e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004792:	d02b      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004794:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004798:	d820      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800479a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800479e:	d012      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a4:	d81a      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d022      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ae:	d115      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b4:	3308      	adds	r3, #8
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fbff 	bl	8004fbc <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047c4:	e015      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fca6 	bl	8005120 <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047da:	e00a      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047e2:	e006      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047e4:	bf00      	nop
 80047e6:	e004      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	4a35      	ldr	r2, [pc, #212]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800480c:	430b      	orrs	r3, r1
 800480e:	6553      	str	r3, [r2, #84]	; 0x54
 8004810:	e003      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004830:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004834:	460b      	mov	r3, r1
 8004836:	4313      	orrs	r3, r2
 8004838:	d058      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004842:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004846:	d033      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004848:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800484c:	d82c      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d02f      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004858:	d826      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800485a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800485e:	d02b      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004864:	d820      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486a:	d012      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004870:	d81a      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d022      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d115      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	3308      	adds	r3, #8
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fb99 	bl	8004fbc <RCCEx_PLL2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004890:	e015      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	3328      	adds	r3, #40	; 0x28
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fc40 	bl	8005120 <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048a6:	e00a      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048ae:	e006      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048b0:	bf00      	nop
 80048b2:	e004      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048b4:	bf00      	nop
 80048b6:	e002      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048b8:	bf00      	nop
 80048ba:	e000      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10e      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048d6:	4a02      	ldr	r2, [pc, #8]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6593      	str	r3, [r2, #88]	; 0x58
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048de:	bf00      	nop
 80048e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004902:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d055      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004914:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004918:	d033      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800491a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800491e:	d82c      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	d02f      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492a:	d826      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800492c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004930:	d02b      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004932:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004936:	d820      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493c:	d012      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800493e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004942:	d81a      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d022      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494c:	d115      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004952:	3308      	adds	r3, #8
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fb30 	bl	8004fbc <RCCEx_PLL2_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004962:	e015      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004968:	3328      	adds	r3, #40	; 0x28
 800496a:	2102      	movs	r1, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fbd7 	bl	8005120 <RCCEx_PLL3_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004978:	e00a      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004980:	e006      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004982:	bf00      	nop
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004998:	4ba1      	ldr	r3, [pc, #644]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049a8:	4a9d      	ldr	r2, [pc, #628]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	6593      	str	r3, [r2, #88]	; 0x58
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f002 0308 	and.w	r3, r2, #8
 80049c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d01e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ea:	3328      	adds	r3, #40	; 0x28
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fb96 	bl	8005120 <RCCEx_PLL3_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a00:	4b87      	ldr	r3, [pc, #540]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a10:	4a83      	ldr	r2, [pc, #524]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f002 0310 	and.w	r3, r2, #16
 8004a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a30:	460b      	mov	r3, r1
 8004a32:	4313      	orrs	r3, r2
 8004a34:	d01e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d10c      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a48:	3328      	adds	r3, #40	; 0x28
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb67 	bl	8005120 <RCCEx_PLL3_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a5e:	4b70      	ldr	r3, [pc, #448]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a6e:	4a6c      	ldr	r2, [pc, #432]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d03e      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa0:	d022      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa6:	d81b      	bhi.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab0:	d00b      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004ab2:	e015      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab8:	3308      	adds	r3, #8
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fa7d 	bl	8004fbc <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ac8:	e00f      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ace:	3328      	adds	r3, #40	; 0x28
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fb24 	bl	8005120 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ade:	e004      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af2:	4b4b      	ldr	r3, [pc, #300]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b02:	4a47      	ldr	r2, [pc, #284]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6593      	str	r3, [r2, #88]	; 0x58
 8004b08:	e003      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b20:	2300      	movs	r3, #0
 8004b22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	d03b      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b3a:	d01f      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b40:	d818      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b46:	d003      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4c:	d007      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b4e:	e011      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b50:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b5c:	e00f      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b62:	3328      	adds	r3, #40	; 0x28
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fada 	bl	8005120 <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6553      	str	r3, [r2, #84]	; 0x54
 8004b9c:	e003      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	677b      	str	r3, [r7, #116]	; 0x74
 8004bb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d034      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d007      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004bd2:	e011      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004be0:	e00e      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be6:	3308      	adds	r3, #8
 8004be8:	2102      	movs	r1, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f9e6 	bl	8004fbc <RCCEx_PLL2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bf6:	e003      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c16:	4a02      	ldr	r2, [pc, #8]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d00c      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4c:	3328      	adds	r3, #40	; 0x28
 8004c4e:	2102      	movs	r1, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fa65 	bl	8005120 <RCCEx_PLL3_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c70:	2300      	movs	r3, #0
 8004c72:	667b      	str	r3, [r7, #100]	; 0x64
 8004c74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	d038      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8a:	d018      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c90:	d811      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c96:	d014      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9c:	d80b      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d011      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca8:	4bc3      	ldr	r3, [pc, #780]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4ac2      	ldr	r2, [pc, #776]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd0:	4bb9      	ldr	r3, [pc, #740]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce0:	4ab5      	ldr	r2, [pc, #724]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	6553      	str	r3, [r2, #84]	; 0x54
 8004ce6:	e003      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004cfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cfe:	2300      	movs	r3, #0
 8004d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d0c:	4baa      	ldr	r3, [pc, #680]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	4aa7      	ldr	r2, [pc, #668]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d2e:	2300      	movs	r3, #0
 8004d30:	657b      	str	r3, [r7, #84]	; 0x54
 8004d32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d3c:	4b9e      	ldr	r3, [pc, #632]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d4c:	4a9a      	ldr	r2, [pc, #616]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d60:	2300      	movs	r3, #0
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d6e:	4b92      	ldr	r3, [pc, #584]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d72:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	4a8e      	ldr	r2, [pc, #568]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d90:	2300      	movs	r3, #0
 8004d92:	647b      	str	r3, [r7, #68]	; 0x44
 8004d94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d9e:	4b86      	ldr	r3, [pc, #536]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4a85      	ldr	r2, [pc, #532]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004da4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004da8:	6113      	str	r3, [r2, #16]
 8004daa:	4b83      	ldr	r3, [pc, #524]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dac:	6919      	ldr	r1, [r3, #16]
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004db6:	4a80      	ldr	r2, [pc, #512]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dca:	2300      	movs	r3, #0
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dd8:	4b77      	ldr	r3, [pc, #476]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de8:	430b      	orrs	r3, r1
 8004dea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e08:	4b6b      	ldr	r3, [pc, #428]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e18:	4a67      	ldr	r2, [pc, #412]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	2100      	movs	r1, #0
 8004e28:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d011      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3e:	3308      	adds	r3, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 f8ba 	bl	8004fbc <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	2100      	movs	r1, #0
 8004e68:	6239      	str	r1, [r7, #32]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d011      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7e:	3308      	adds	r3, #8
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f89a 	bl	8004fbc <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	61b9      	str	r1, [r7, #24]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d011      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f87a 	bl	8004fbc <RCCEx_PLL2_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6139      	str	r1, [r7, #16]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d011      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efe:	3328      	adds	r3, #40	; 0x28
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f90c 	bl	8005120 <RCCEx_PLL3_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	2100      	movs	r1, #0
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f34:	460b      	mov	r3, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	d011      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3e:	3328      	adds	r3, #40	; 0x28
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f8ec 	bl	8005120 <RCCEx_PLL3_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	2100      	movs	r1, #0
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f74:	460b      	mov	r3, r1
 8004f76:	4313      	orrs	r3, r2
 8004f78:	d011      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7e:	3328      	adds	r3, #40	; 0x28
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f8cc 	bl	8005120 <RCCEx_PLL3_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004f9e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb8:	58024400 	.word	0x58024400

08004fbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fca:	4b53      	ldr	r3, [pc, #332]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d101      	bne.n	8004fda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e099      	b.n	800510e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fb ff4f 	bl	8000e88 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fec:	e008      	b.n	8005000 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fee:	f7fb ff4b 	bl	8000e88 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e086      	b.n	800510e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005000:	4b45      	ldr	r3, [pc, #276]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800500c:	4b42      	ldr	r3, [pc, #264]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	493f      	ldr	r1, [pc, #252]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	628b      	str	r3, [r1, #40]	; 0x28
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	3b01      	subs	r3, #1
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	3b01      	subs	r3, #1
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	b29b      	uxth	r3, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	3b01      	subs	r3, #1
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005050:	4931      	ldr	r1, [pc, #196]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	492d      	ldr	r1, [pc, #180]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	f023 0220 	bic.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4928      	ldr	r1, [pc, #160]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	4a26      	ldr	r2, [pc, #152]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f023 0310 	bic.w	r3, r3, #16
 8005084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <RCCEx_PLL2_Config+0x160>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	69d2      	ldr	r2, [r2, #28]
 8005092:	00d2      	lsls	r2, r2, #3
 8005094:	4920      	ldr	r1, [pc, #128]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050b8:	e00f      	b.n	80050da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050c0:	4b15      	ldr	r3, [pc, #84]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050cc:	e005      	b.n	80050da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fb fecf 	bl	8000e88 <HAL_GetTick>
 80050ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050ec:	e008      	b.n	8005100 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ee:	f7fb fecb 	bl	8000e88 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	ffff0007 	.word	0xffff0007

08005120 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800512e:	4b53      	ldr	r3, [pc, #332]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b03      	cmp	r3, #3
 8005138:	d101      	bne.n	800513e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e099      	b.n	8005272 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800513e:	4b4f      	ldr	r3, [pc, #316]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4e      	ldr	r2, [pc, #312]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514a:	f7fb fe9d 	bl	8000e88 <HAL_GetTick>
 800514e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005150:	e008      	b.n	8005164 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005152:	f7fb fe99 	bl	8000e88 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e086      	b.n	8005272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005164:	4b45      	ldr	r3, [pc, #276]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005170:	4b42      	ldr	r3, [pc, #264]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	493f      	ldr	r1, [pc, #252]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	628b      	str	r3, [r1, #40]	; 0x28
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	3b01      	subs	r3, #1
 800518a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	3b01      	subs	r3, #1
 8005194:	025b      	lsls	r3, r3, #9
 8005196:	b29b      	uxth	r3, r3
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	061b      	lsls	r3, r3, #24
 80051b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051b4:	4931      	ldr	r1, [pc, #196]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051ba:	4b30      	ldr	r3, [pc, #192]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	492d      	ldr	r1, [pc, #180]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051cc:	4b2b      	ldr	r3, [pc, #172]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	4928      	ldr	r1, [pc, #160]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051de:	4b27      	ldr	r3, [pc, #156]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a26      	ldr	r2, [pc, #152]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <RCCEx_PLL3_Config+0x160>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	69d2      	ldr	r2, [r2, #28]
 80051f6:	00d2      	lsls	r2, r2, #3
 80051f8:	4920      	ldr	r1, [pc, #128]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800521a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800521c:	e00f      	b.n	800523e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d106      	bne.n	8005232 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	4a14      	ldr	r2, [pc, #80]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 800522a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800522e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005230:	e005      	b.n	800523e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	4a11      	ldr	r2, [pc, #68]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800523c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0e      	ldr	r2, [pc, #56]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524a:	f7fb fe1d 	bl	8000e88 <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005250:	e008      	b.n	8005264 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005252:	f7fb fe19 	bl	8000e88 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <RCCEx_PLL3_Config+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	ffff0007 	.word	0xffff0007

08005284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e049      	b.n	800532a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fd50 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f000 faee 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e054      	b.n	80053f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a26      	ldr	r2, [pc, #152]	; (8005404 <HAL_TIM_Base_Start_IT+0xd0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d022      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d01d      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a22      	ldr	r2, [pc, #136]	; (8005408 <HAL_TIM_Base_Start_IT+0xd4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d018      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_TIM_Base_Start_IT+0xd8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <HAL_TIM_Base_Start_IT+0xdc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00e      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <HAL_TIM_Base_Start_IT+0xe0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <HAL_TIM_Base_Start_IT+0xe4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0x80>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	; (800541c <HAL_TIM_Base_Start_IT+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d115      	bne.n	80053e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_TIM_Base_Start_IT+0xec>)
 80053bc:	4013      	ands	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d015      	beq.n	80053f2 <HAL_TIM_Base_Start_IT+0xbe>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d011      	beq.n	80053f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	e008      	b.n	80053f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	e000      	b.n	80053f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00
 8005414:	40010400 	.word	0x40010400
 8005418:	40001800 	.word	0x40001800
 800541c:	40014000 	.word	0x40014000
 8005420:	00010007 	.word	0x00010007

08005424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9fe 	bl	8005868 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9f0 	bl	8005854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fa01 	bl	800587c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9d4 	bl	8005868 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9c6 	bl	8005854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f9d7 	bl	800587c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9aa 	bl	8005868 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f99c 	bl	8005854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f9ad 	bl	800587c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f980 	bl	8005868 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f972 	bl	8005854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f983 	bl	800587c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0201 	mvn.w	r2, #1
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb f954 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fb38 	bl	8005c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d10e      	bne.n	8005602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d107      	bne.n	8005602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fb2b 	bl	8005c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d10e      	bne.n	800562e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d107      	bne.n	800562e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f931 	bl	8005890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d10e      	bne.n	800565a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b20      	cmp	r3, #32
 8005648:	d107      	bne.n	800565a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f06f 0220 	mvn.w	r2, #32
 8005652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 faeb 	bl	8005c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIM_ConfigClockSource+0x1c>
 800567c:	2302      	movs	r3, #2
 800567e:	e0dc      	b.n	800583a <HAL_TIM_ConfigClockSource+0x1d6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_TIM_ConfigClockSource+0x1e0>)
 800569c:	4013      	ands	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a64      	ldr	r2, [pc, #400]	; (8005848 <HAL_TIM_ConfigClockSource+0x1e4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	f000 80a9 	beq.w	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 80056bc:	4a62      	ldr	r2, [pc, #392]	; (8005848 <HAL_TIM_ConfigClockSource+0x1e4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	f200 80ae 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 80056c4:	4a61      	ldr	r2, [pc, #388]	; (800584c <HAL_TIM_ConfigClockSource+0x1e8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	f000 80a1 	beq.w	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 80056cc:	4a5f      	ldr	r2, [pc, #380]	; (800584c <HAL_TIM_ConfigClockSource+0x1e8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	f200 80a6 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 80056d4:	4a5e      	ldr	r2, [pc, #376]	; (8005850 <HAL_TIM_ConfigClockSource+0x1ec>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f000 8099 	beq.w	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 80056dc:	4a5c      	ldr	r2, [pc, #368]	; (8005850 <HAL_TIM_ConfigClockSource+0x1ec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	f200 809e 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 80056e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056e8:	f000 8091 	beq.w	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 80056ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056f0:	f200 8096 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 80056f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f8:	f000 8089 	beq.w	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	f200 808e 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005708:	d03e      	beq.n	8005788 <HAL_TIM_ConfigClockSource+0x124>
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	f200 8087 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	f000 8086 	beq.w	8005826 <HAL_TIM_ConfigClockSource+0x1c2>
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d87f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d01a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xf6>
 8005724:	2b70      	cmp	r3, #112	; 0x70
 8005726:	d87b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d050      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x16a>
 800572c:	2b60      	cmp	r3, #96	; 0x60
 800572e:	d877      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d03c      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x14a>
 8005734:	2b50      	cmp	r3, #80	; 0x50
 8005736:	d873      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d058      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x18a>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d86f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d064      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d86b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d060      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d867      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d05c      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 8005754:	2b10      	cmp	r3, #16
 8005756:	d05a      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x1aa>
 8005758:	e062      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800576a:	f000 f9b3 	bl	8005ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800577c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
      break;
 8005786:	e04f      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005798:	f000 f99c 	bl	8005ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057aa:	609a      	str	r2, [r3, #8]
      break;
 80057ac:	e03c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 f90c 	bl	80059d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2150      	movs	r1, #80	; 0x50
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f966 	bl	8005a98 <TIM_ITRx_SetConfig>
      break;
 80057cc:	e02c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 f92b 	bl	8005a36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2160      	movs	r1, #96	; 0x60
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f956 	bl	8005a98 <TIM_ITRx_SetConfig>
      break;
 80057ec:	e01c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 f8ec 	bl	80059d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f946 	bl	8005a98 <TIM_ITRx_SetConfig>
      break;
 800580c:	e00c      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f000 f93d 	bl	8005a98 <TIM_ITRx_SetConfig>
      break;
 800581e:	e003      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
      break;
 8005824:	e000      	b.n	8005828 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	ffceff88 	.word	0xffceff88
 8005848:	00100040 	.word	0x00100040
 800584c:	00100030 	.word	0x00100030
 8005850:	00100020 	.word	0x00100020

08005854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a40      	ldr	r2, [pc, #256]	; (80059b8 <TIM_Base_SetConfig+0x114>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c2:	d00f      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3d      	ldr	r2, [pc, #244]	; (80059bc <TIM_Base_SetConfig+0x118>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a3c      	ldr	r2, [pc, #240]	; (80059c0 <TIM_Base_SetConfig+0x11c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a3b      	ldr	r2, [pc, #236]	; (80059c4 <TIM_Base_SetConfig+0x120>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a3a      	ldr	r2, [pc, #232]	; (80059c8 <TIM_Base_SetConfig+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d108      	bne.n	80058f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2f      	ldr	r2, [pc, #188]	; (80059b8 <TIM_Base_SetConfig+0x114>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01f      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <TIM_Base_SetConfig+0x118>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <TIM_Base_SetConfig+0x11c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <TIM_Base_SetConfig+0x120>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a29      	ldr	r2, [pc, #164]	; (80059c8 <TIM_Base_SetConfig+0x124>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a28      	ldr	r2, [pc, #160]	; (80059cc <TIM_Base_SetConfig+0x128>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a27      	ldr	r2, [pc, #156]	; (80059d0 <TIM_Base_SetConfig+0x12c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0x9a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <TIM_Base_SetConfig+0x130>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a10      	ldr	r2, [pc, #64]	; (80059b8 <TIM_Base_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00f      	beq.n	800599c <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a12      	ldr	r2, [pc, #72]	; (80059c8 <TIM_Base_SetConfig+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_Base_SetConfig+0xf8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a11      	ldr	r2, [pc, #68]	; (80059cc <TIM_Base_SetConfig+0x128>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_Base_SetConfig+0xf8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a10      	ldr	r2, [pc, #64]	; (80059d0 <TIM_Base_SetConfig+0x12c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0xf8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a0f      	ldr	r2, [pc, #60]	; (80059d4 <TIM_Base_SetConfig+0x130>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d103      	bne.n	80059a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	615a      	str	r2, [r3, #20]
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40010400 	.word	0x40010400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800

080059d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 030a 	bic.w	r3, r3, #10
 8005a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0210 	bic.w	r2, r3, #16
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	031b      	lsls	r3, r3, #12
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
	...

08005a98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <TIM_ITRx_SetConfig+0x38>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f043 0307 	orr.w	r3, r3, #7
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	609a      	str	r2, [r3, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	ffcfff8f 	.word	0xffcfff8f

08005ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	021a      	lsls	r2, r3, #8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	609a      	str	r2, [r3, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e06d      	b.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a30      	ldr	r2, [pc, #192]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2f      	ldr	r2, [pc, #188]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d108      	bne.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a20      	ldr	r2, [pc, #128]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d01d      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10c      	bne.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40001800 	.word	0x40001800
 8005c2c:	40014000 	.word	0x40014000

08005c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	f107 001c 	add.w	r0, r7, #28
 8005c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d120      	bne.n	8005cc6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <USB_CoreInit+0xd4>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d105      	bne.n	8005cba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 faf8 	bl	80072b0 <USB_CoreReset>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	e01a      	b.n	8005cfc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 faec 	bl	80072b0 <USB_CoreReset>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
 8005cee:	e005      	b.n	8005cfc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d116      	bne.n	8005d30 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d10:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <USB_CoreInit+0xd8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f043 0206 	orr.w	r2, r3, #6
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3c:	b004      	add	sp, #16
 8005d3e:	4770      	bx	lr
 8005d40:	ffbdffbf 	.word	0xffbdffbf
 8005d44:	03ee0000 	.word	0x03ee0000

08005d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d165      	bne.n	8005e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4a41      	ldr	r2, [pc, #260]	; (8005e64 <USB_SetTurnaroundTime+0x11c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d906      	bls.n	8005d72 <USB_SetTurnaroundTime+0x2a>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <USB_SetTurnaroundTime+0x120>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d202      	bcs.n	8005d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d6c:	230f      	movs	r3, #15
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e062      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4a3c      	ldr	r2, [pc, #240]	; (8005e68 <USB_SetTurnaroundTime+0x120>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d306      	bcc.n	8005d88 <USB_SetTurnaroundTime+0x40>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <USB_SetTurnaroundTime+0x124>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d202      	bcs.n	8005d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d82:	230e      	movs	r3, #14
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e057      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4a38      	ldr	r2, [pc, #224]	; (8005e6c <USB_SetTurnaroundTime+0x124>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d306      	bcc.n	8005d9e <USB_SetTurnaroundTime+0x56>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <USB_SetTurnaroundTime+0x128>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d202      	bcs.n	8005d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d98:	230d      	movs	r3, #13
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e04c      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4a33      	ldr	r2, [pc, #204]	; (8005e70 <USB_SetTurnaroundTime+0x128>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d306      	bcc.n	8005db4 <USB_SetTurnaroundTime+0x6c>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4a32      	ldr	r2, [pc, #200]	; (8005e74 <USB_SetTurnaroundTime+0x12c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d802      	bhi.n	8005db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dae:	230c      	movs	r3, #12
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e041      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4a2f      	ldr	r2, [pc, #188]	; (8005e74 <USB_SetTurnaroundTime+0x12c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d906      	bls.n	8005dca <USB_SetTurnaroundTime+0x82>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a2e      	ldr	r2, [pc, #184]	; (8005e78 <USB_SetTurnaroundTime+0x130>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d802      	bhi.n	8005dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005dc4:	230b      	movs	r3, #11
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e036      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <USB_SetTurnaroundTime+0x130>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d906      	bls.n	8005de0 <USB_SetTurnaroundTime+0x98>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <USB_SetTurnaroundTime+0x134>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d802      	bhi.n	8005de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005dda:	230a      	movs	r3, #10
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e02b      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <USB_SetTurnaroundTime+0x134>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d906      	bls.n	8005df6 <USB_SetTurnaroundTime+0xae>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <USB_SetTurnaroundTime+0x138>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d202      	bcs.n	8005df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005df0:	2309      	movs	r3, #9
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e020      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4a21      	ldr	r2, [pc, #132]	; (8005e80 <USB_SetTurnaroundTime+0x138>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d306      	bcc.n	8005e0c <USB_SetTurnaroundTime+0xc4>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4a20      	ldr	r2, [pc, #128]	; (8005e84 <USB_SetTurnaroundTime+0x13c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d802      	bhi.n	8005e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e06:	2308      	movs	r3, #8
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	e015      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <USB_SetTurnaroundTime+0x13c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d906      	bls.n	8005e22 <USB_SetTurnaroundTime+0xda>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <USB_SetTurnaroundTime+0x140>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d202      	bcs.n	8005e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e1c:	2307      	movs	r3, #7
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e00a      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e22:	2306      	movs	r3, #6
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e007      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e2e:	2309      	movs	r3, #9
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e001      	b.n	8005e38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e34:	2309      	movs	r3, #9
 8005e36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	029b      	lsls	r3, r3, #10
 8005e4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	00d8acbf 	.word	0x00d8acbf
 8005e68:	00e4e1c0 	.word	0x00e4e1c0
 8005e6c:	00f42400 	.word	0x00f42400
 8005e70:	01067380 	.word	0x01067380
 8005e74:	011a499f 	.word	0x011a499f
 8005e78:	01312cff 	.word	0x01312cff
 8005e7c:	014ca43f 	.word	0x014ca43f
 8005e80:	016e3600 	.word	0x016e3600
 8005e84:	01a6ab1f 	.word	0x01a6ab1f
 8005e88:	01e84800 	.word	0x01e84800

08005e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f043 0201 	orr.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d115      	bne.n	8005f1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005efe:	2001      	movs	r0, #1
 8005f00:	f7fa ffce 	bl	8000ea0 <HAL_Delay>
      ms++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 f93f 	bl	800718e <USB_GetMode>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d01e      	beq.n	8005f54 <USB_SetCurrentMode+0x84>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b31      	cmp	r3, #49	; 0x31
 8005f1a:	d9f0      	bls.n	8005efe <USB_SetCurrentMode+0x2e>
 8005f1c:	e01a      	b.n	8005f54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d115      	bne.n	8005f50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f30:	2001      	movs	r0, #1
 8005f32:	f7fa ffb5 	bl	8000ea0 <HAL_Delay>
      ms++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 f926 	bl	800718e <USB_GetMode>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <USB_SetCurrentMode+0x84>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b31      	cmp	r3, #49	; 0x31
 8005f4c:	d9f0      	bls.n	8005f30 <USB_SetCurrentMode+0x60>
 8005f4e:	e001      	b.n	8005f54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e005      	b.n	8005f60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b32      	cmp	r3, #50	; 0x32
 8005f58:	d101      	bne.n	8005f5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f68:	b084      	sub	sp, #16
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e009      	b.n	8005f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3340      	adds	r3, #64	; 0x40
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b0e      	cmp	r3, #14
 8005fa0:	d9f2      	bls.n	8005f88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11c      	bne.n	8005fe2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb6:	f043 0302 	orr.w	r3, r3, #2
 8005fba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e005      	b.n	8005fee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006000:	4619      	mov	r1, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006008:	461a      	mov	r2, r3
 800600a:	680b      	ldr	r3, [r1, #0]
 800600c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10c      	bne.n	800602e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800601a:	2100      	movs	r1, #0
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f965 	bl	80062ec <USB_SetDevSpeed>
 8006022:	e008      	b.n	8006036 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006024:	2101      	movs	r1, #1
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f960 	bl	80062ec <USB_SetDevSpeed>
 800602c:	e003      	b.n	8006036 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800602e:	2103      	movs	r1, #3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f95b 	bl	80062ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006036:	2110      	movs	r1, #16
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8f3 	bl	8006224 <USB_FlushTxFifo>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f91f 	bl	800628c <USB_FlushRxFifo>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605e:	461a      	mov	r2, r3
 8006060:	2300      	movs	r3, #0
 8006062:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	461a      	mov	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006076:	461a      	mov	r2, r3
 8006078:	2300      	movs	r3, #0
 800607a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	e043      	b.n	800610a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006098:	d118      	bne.n	80060cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	461a      	mov	r2, r3
 80060ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e013      	b.n	80060de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	461a      	mov	r2, r3
 80060c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e008      	b.n	80060de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	461a      	mov	r2, r3
 80060da:	2300      	movs	r3, #0
 80060dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	461a      	mov	r2, r3
 80060fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006102:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	3301      	adds	r3, #1
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d3b7      	bcc.n	8006082 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	e043      	b.n	80061a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800612a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612e:	d118      	bne.n	8006162 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	461a      	mov	r2, r3
 8006144:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e013      	b.n	8006174 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	461a      	mov	r2, r3
 800615a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	e008      	b.n	8006174 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	461a      	mov	r2, r3
 8006170:	2300      	movs	r3, #0
 8006172:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	461a      	mov	r2, r3
 8006194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3301      	adds	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d3b7      	bcc.n	8006118 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f043 0210 	orr.w	r2, r3, #16
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <USB_DevInit+0x2b4>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f043 0208 	orr.w	r2, r3, #8
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <USB_DevInit+0x2b8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006218:	b004      	add	sp, #16
 800621a:	4770      	bx	lr
 800621c:	803c3800 	.word	0x803c3800
 8006220:	40000004 	.word	0x40000004

08006224 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a13      	ldr	r2, [pc, #76]	; (8006288 <USB_FlushTxFifo+0x64>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d901      	bls.n	8006244 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e01b      	b.n	800627c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	daf2      	bge.n	8006232 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	019b      	lsls	r3, r3, #6
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a08      	ldr	r2, [pc, #32]	; (8006288 <USB_FlushTxFifo+0x64>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e006      	b.n	800627c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b20      	cmp	r3, #32
 8006278:	d0f0      	beq.n	800625c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	00030d40 	.word	0x00030d40

0800628c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4a11      	ldr	r2, [pc, #68]	; (80062e8 <USB_FlushRxFifo+0x5c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e018      	b.n	80062dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	daf2      	bge.n	8006298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2210      	movs	r2, #16
 80062ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <USB_FlushRxFifo+0x5c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d901      	bls.n	80062ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e006      	b.n	80062dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d0f0      	beq.n	80062bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	00030d40 	.word	0x00030d40

080062ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630c:	4313      	orrs	r3, r2
 800630e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800631e:	b480      	push	{r7}
 8006320:	b087      	sub	sp, #28
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0306 	and.w	r3, r3, #6
 8006336:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
 8006342:	e00a      	b.n	800635a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d002      	beq.n	8006350 <USB_GetDevSpeed+0x32>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b06      	cmp	r3, #6
 800634e:	d102      	bne.n	8006356 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006350:	2302      	movs	r3, #2
 8006352:	75fb      	strb	r3, [r7, #23]
 8006354:	e001      	b.n	800635a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006356:	230f      	movs	r3, #15
 8006358:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
}
 800635c:	4618      	mov	r0, r3
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d139      	bne.n	80063f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f303 	lsl.w	r3, r1, r3
 800639a:	b29b      	uxth	r3, r3
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a2:	4313      	orrs	r3, r2
 80063a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d153      	bne.n	8006464 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	791b      	ldrb	r3, [r3, #4]
 80063d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	059b      	lsls	r3, r3, #22
 80063de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	0159      	lsls	r1, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	4619      	mov	r1, r3
 80063f0:	4b20      	ldr	r3, [pc, #128]	; (8006474 <USB_ActivateEndpoint+0x10c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	600b      	str	r3, [r1, #0]
 80063f6:	e035      	b.n	8006464 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006416:	4313      	orrs	r3, r2
 8006418:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d119      	bne.n	8006464 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	791b      	ldrb	r3, [r3, #4]
 800644a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800644c:	430b      	orrs	r3, r1
 800644e:	431a      	orrs	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	0159      	lsls	r1, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	440b      	add	r3, r1
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	4619      	mov	r1, r3
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <USB_ActivateEndpoint+0x10c>)
 8006460:	4313      	orrs	r3, r2
 8006462:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	10008000 	.word	0x10008000

08006478 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d161      	bne.n	8006558 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064aa:	d11f      	bne.n	80064ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	0151      	lsls	r1, r2, #5
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	440a      	add	r2, r1
 80064c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	43db      	mvns	r3, r3
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650c:	4013      	ands	r3, r2
 800650e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	2101      	movs	r1, #1
 8006522:	fa01 f303 	lsl.w	r3, r1, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006530:	4013      	ands	r3, r2
 8006532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	0159      	lsls	r1, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	440b      	add	r3, r1
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	4619      	mov	r1, r3
 8006550:	4b35      	ldr	r3, [pc, #212]	; (8006628 <USB_DeactivateEndpoint+0x1b0>)
 8006552:	4013      	ands	r3, r2
 8006554:	600b      	str	r3, [r1, #0]
 8006556:	e060      	b.n	800661a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656e:	d11f      	bne.n	80065b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800658e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	2101      	movs	r1, #1
 80065c2:	fa01 f303 	lsl.w	r3, r1, r3
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	43db      	mvns	r3, r3
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d0:	4013      	ands	r3, r2
 80065d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	2101      	movs	r1, #1
 80065e6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ea:	041b      	lsls	r3, r3, #16
 80065ec:	43db      	mvns	r3, r3
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f4:	4013      	ands	r3, r2
 80065f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	0159      	lsls	r1, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	440b      	add	r3, r1
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	4619      	mov	r1, r3
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <USB_DeactivateEndpoint+0x1b4>)
 8006616:	4013      	ands	r3, r2
 8006618:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	ec337800 	.word	0xec337800
 800662c:	eff37800 	.word	0xeff37800

08006630 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b01      	cmp	r3, #1
 800664e:	f040 8181 	bne.w	8006954 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d132      	bne.n	80066c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	0159      	lsls	r1, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	440b      	add	r3, r1
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	4619      	mov	r1, r3
 8006676:	4ba5      	ldr	r3, [pc, #660]	; (800690c <USB_EPStartXfer+0x2dc>)
 8006678:	4013      	ands	r3, r2
 800667a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800669a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	0159      	lsls	r1, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	440b      	add	r3, r1
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	4619      	mov	r1, r3
 80066b8:	4b95      	ldr	r3, [pc, #596]	; (8006910 <USB_EPStartXfer+0x2e0>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	610b      	str	r3, [r1, #16]
 80066be:	e092      	b.n	80067e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	0159      	lsls	r1, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	440b      	add	r3, r1
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	4619      	mov	r1, r3
 80066dc:	4b8c      	ldr	r3, [pc, #560]	; (8006910 <USB_EPStartXfer+0x2e0>)
 80066de:	4013      	ands	r3, r2
 80066e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	0159      	lsls	r1, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	440b      	add	r3, r1
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	4619      	mov	r1, r3
 80066fe:	4b83      	ldr	r3, [pc, #524]	; (800690c <USB_EPStartXfer+0x2dc>)
 8006700:	4013      	ands	r3, r2
 8006702:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11a      	bne.n	8006740 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673c:	6113      	str	r3, [r2, #16]
 800673e:	e01b      	b.n	8006778 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6919      	ldr	r1, [r3, #16]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	440b      	add	r3, r1
 8006758:	1e59      	subs	r1, r3, #1
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006762:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006764:	4b6b      	ldr	r3, [pc, #428]	; (8006914 <USB_EPStartXfer+0x2e4>)
 8006766:	400b      	ands	r3, r1
 8006768:	69b9      	ldr	r1, [r7, #24]
 800676a:	0148      	lsls	r0, r1, #5
 800676c:	69f9      	ldr	r1, [r7, #28]
 800676e:	4401      	add	r1, r0
 8006770:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006774:	4313      	orrs	r3, r2
 8006776:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800678e:	69b9      	ldr	r1, [r7, #24]
 8006790:	0148      	lsls	r0, r1, #5
 8006792:	69f9      	ldr	r1, [r7, #28]
 8006794:	4401      	add	r1, r0
 8006796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800679a:	4313      	orrs	r3, r2
 800679c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	791b      	ldrb	r3, [r3, #4]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d11f      	bne.n	80067e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d14b      	bne.n	8006884 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	461a      	mov	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	791b      	ldrb	r3, [r3, #4]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d128      	bne.n	8006862 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d110      	bne.n	8006842 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e00f      	b.n	8006862 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006860:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	440a      	add	r2, r1
 8006878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e16a      	b.n	8006b5a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	791b      	ldrb	r3, [r3, #4]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d015      	beq.n	80068d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8152 	beq.w	8006b5a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	2101      	movs	r1, #1
 80068c8:	fa01 f303 	lsl.w	r3, r1, r3
 80068cc:	69f9      	ldr	r1, [r7, #28]
 80068ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d2:	4313      	orrs	r3, r2
 80068d4:	634b      	str	r3, [r1, #52]	; 0x34
 80068d6:	e140      	b.n	8006b5a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d117      	bne.n	8006918 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e016      	b.n	8006938 <USB_EPStartXfer+0x308>
 800690a:	bf00      	nop
 800690c:	e007ffff 	.word	0xe007ffff
 8006910:	fff80000 	.word	0xfff80000
 8006914:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006936:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	68d9      	ldr	r1, [r3, #12]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	b298      	uxth	r0, r3
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4603      	mov	r3, r0
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f9b9 	bl	8006cc4 <USB_WritePacket>
 8006952:	e102      	b.n	8006b5a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	0159      	lsls	r1, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	440b      	add	r3, r1
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	4619      	mov	r1, r3
 8006970:	4b7c      	ldr	r3, [pc, #496]	; (8006b64 <USB_EPStartXfer+0x534>)
 8006972:	4013      	ands	r3, r2
 8006974:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	0159      	lsls	r1, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	440b      	add	r3, r1
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	4619      	mov	r1, r3
 8006992:	4b75      	ldr	r3, [pc, #468]	; (8006b68 <USB_EPStartXfer+0x538>)
 8006994:	4013      	ands	r3, r2
 8006996:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d12f      	bne.n	80069fe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069cc:	69b9      	ldr	r1, [r7, #24]
 80069ce:	0148      	lsls	r0, r1, #5
 80069d0:	69f9      	ldr	r1, [r7, #28]
 80069d2:	4401      	add	r1, r0
 80069d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069d8:	4313      	orrs	r3, r2
 80069da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069fa:	6113      	str	r3, [r2, #16]
 80069fc:	e05f      	b.n	8006abe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d123      	bne.n	8006a4e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	0148      	lsls	r0, r1, #5
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	4401      	add	r1, r0
 8006a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a4a:	6113      	str	r3, [r2, #16]
 8006a4c:	e037      	b.n	8006abe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	4413      	add	r3, r2
 8006a58:	1e5a      	subs	r2, r3, #1
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a62:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	8afa      	ldrh	r2, [r7, #22]
 8006a6a:	fb03 f202 	mul.w	r2, r3, r2
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	8afb      	ldrh	r3, [r7, #22]
 8006a82:	04d9      	lsls	r1, r3, #19
 8006a84:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <USB_EPStartXfer+0x53c>)
 8006a86:	400b      	ands	r3, r1
 8006a88:	69b9      	ldr	r1, [r7, #24]
 8006a8a:	0148      	lsls	r0, r1, #5
 8006a8c:	69f9      	ldr	r1, [r7, #28]
 8006a8e:	4401      	add	r1, r0
 8006a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a94:	4313      	orrs	r3, r2
 8006a96:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	0148      	lsls	r0, r1, #5
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	4401      	add	r1, r0
 8006ab6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d10d      	bne.n	8006ae0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	68d9      	ldr	r1, [r3, #12]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	460a      	mov	r2, r1
 8006ade:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	791b      	ldrb	r3, [r3, #4]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d128      	bne.n	8006b3a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d110      	bne.n	8006b1a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e00f      	b.n	8006b3a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	fff80000 	.word	0xfff80000
 8006b68:	e007ffff 	.word	0xe007ffff
 8006b6c:	1ff80000 	.word	0x1ff80000

08006b70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d14a      	bne.n	8006c24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba6:	f040 8086 	bne.w	8006cb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	7812      	ldrb	r2, [r2, #0]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	7812      	ldrb	r2, [r2, #0]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d902      	bls.n	8006c08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
          break;
 8006c06:	e056      	b.n	8006cb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c20:	d0e7      	beq.n	8006bf2 <USB_EPStopXfer+0x82>
 8006c22:	e048      	b.n	8006cb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3c:	d13b      	bne.n	8006cb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d902      	bls.n	8006c9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
          break;
 8006c9a:	e00c      	b.n	8006cb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb4:	d0e7      	beq.n	8006c86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4611      	mov	r1, r2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d123      	bne.n	8006d32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cea:	88bb      	ldrh	r3, [r7, #4]
 8006cec:	3303      	adds	r3, #3
 8006cee:	089b      	lsrs	r3, r3, #2
 8006cf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e018      	b.n	8006d2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	031a      	lsls	r2, r3, #12
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d04:	461a      	mov	r2, r3
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	3301      	adds	r3, #1
 8006d16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3301      	adds	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	3301      	adds	r3, #1
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3e2      	bcc.n	8006cf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3724      	adds	r7, #36	; 0x24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b08b      	sub	sp, #44	; 0x2c
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	089b      	lsrs	r3, r3, #2
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d66:	2300      	movs	r3, #0
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	e014      	b.n	8006d96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	3301      	adds	r3, #1
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	3301      	adds	r3, #1
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	3301      	adds	r3, #1
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d3e6      	bcc.n	8006d6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d9e:	8bfb      	ldrh	r3, [r7, #30]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01e      	beq.n	8006de2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dae:	461a      	mov	r2, r3
 8006db0:	f107 0310 	add.w	r3, r7, #16
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	701a      	strb	r2, [r3, #0]
      i++;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	623b      	str	r3, [r7, #32]
      pDest++;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006dd6:	8bfb      	ldrh	r3, [r7, #30]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ddc:	8bfb      	ldrh	r3, [r7, #30]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1ea      	bne.n	8006db8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	372c      	adds	r7, #44	; 0x2c
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	785b      	ldrb	r3, [r3, #1]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d12c      	bne.n	8006e66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	db12      	blt.n	8006e44 <USB_EPSetStall+0x54>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00f      	beq.n	8006e44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	e02b      	b.n	8006ebe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db12      	blt.n	8006e9e <USB_EPSetStall+0xae>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00f      	beq.n	8006e9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ebc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d128      	bne.n	8006f3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d003      	beq.n	8006f18 <USB_EPClearStall+0x4c>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	791b      	ldrb	r3, [r3, #4]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d138      	bne.n	8006f8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	e027      	b.n	8006f8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	791b      	ldrb	r3, [r3, #4]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d003      	beq.n	8006f6a <USB_EPClearStall+0x9e>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	791b      	ldrb	r3, [r3, #4]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d10f      	bne.n	8006f8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fcc:	68f9      	ldr	r1, [r7, #12]
 8006fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007012:	f023 0302 	bic.w	r3, r3, #2
 8007016:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007040:	f023 0303 	bic.w	r3, r3, #3
 8007044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4013      	ands	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007080:	68fb      	ldr	r3, [r7, #12]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	4013      	ands	r3, r2
 80070b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	0c1b      	lsrs	r3, r3, #16
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	b29b      	uxth	r3, r3
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007124:	68bb      	ldr	r3, [r7, #8]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007132:	b480      	push	{r7}
 8007134:	b087      	sub	sp, #28
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	fa22 f303 	lsr.w	r3, r2, r3
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	b2db      	uxtb	r3, r3
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4013      	ands	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007180:	68bb      	ldr	r3, [r7, #8]
}
 8007182:	4618      	mov	r0, r3
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0301 	and.w	r3, r3, #1
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	4619      	mov	r1, r3
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <USB_ActivateSetup+0x44>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	fffff800 	.word	0xfffff800

080071f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	460b      	mov	r3, r1
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	333c      	adds	r3, #60	; 0x3c
 800720a:	3304      	adds	r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4a26      	ldr	r2, [pc, #152]	; (80072ac <USB_EP0_OutStart+0xb8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d90a      	bls.n	800722e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007228:	d101      	bne.n	800722e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	e037      	b.n	800729e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	461a      	mov	r2, r3
 8007236:	2300      	movs	r3, #0
 8007238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800724c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725c:	f043 0318 	orr.w	r3, r3, #24
 8007260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007270:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007274:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d10f      	bne.n	800729c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007296:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800729a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	4f54300a 	.word	0x4f54300a

080072b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a13      	ldr	r2, [pc, #76]	; (8007314 <USB_CoreReset+0x64>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e01b      	b.n	8007306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	daf2      	bge.n	80072bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4a09      	ldr	r2, [pc, #36]	; (8007314 <USB_CoreReset+0x64>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	d0f0      	beq.n	80072e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	00030d40 	.word	0x00030d40

08007318 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007324:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007328:	f002 ff3c 	bl	800a1a4 <USBD_static_malloc>
 800732c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32b0      	adds	r2, #176	; 0xb0
 800733e:	2100      	movs	r1, #0
 8007340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007344:	2302      	movs	r3, #2
 8007346:	e0d4      	b.n	80074f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007348:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800734c:	2100      	movs	r1, #0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f003 fe11 	bl	800af76 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	; 0xb0
 800736e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7c1b      	ldrb	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d138      	bne.n	80073f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007380:	4b5e      	ldr	r3, [pc, #376]	; (80074fc <USBD_CDC_Init+0x1e4>)
 8007382:	7819      	ldrb	r1, [r3, #0]
 8007384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007388:	2202      	movs	r2, #2
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f002 fde7 	bl	8009f5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007390:	4b5a      	ldr	r3, [pc, #360]	; (80074fc <USBD_CDC_Init+0x1e4>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	3324      	adds	r3, #36	; 0x24
 80073a6:	2201      	movs	r2, #1
 80073a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073aa:	4b55      	ldr	r3, [pc, #340]	; (8007500 <USBD_CDC_Init+0x1e8>)
 80073ac:	7819      	ldrb	r1, [r3, #0]
 80073ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b2:	2202      	movs	r2, #2
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f002 fdd2 	bl	8009f5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073ba:	4b51      	ldr	r3, [pc, #324]	; (8007500 <USBD_CDC_Init+0x1e8>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f003 020f 	and.w	r2, r3, #15
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073d2:	2201      	movs	r2, #1
 80073d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073d6:	4b4b      	ldr	r3, [pc, #300]	; (8007504 <USBD_CDC_Init+0x1ec>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 020f 	and.w	r2, r3, #15
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	3326      	adds	r3, #38	; 0x26
 80073ec:	2210      	movs	r2, #16
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e035      	b.n	800745e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073f2:	4b42      	ldr	r3, [pc, #264]	; (80074fc <USBD_CDC_Init+0x1e4>)
 80073f4:	7819      	ldrb	r1, [r3, #0]
 80073f6:	2340      	movs	r3, #64	; 0x40
 80073f8:	2202      	movs	r2, #2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 fdaf 	bl	8009f5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007400:	4b3e      	ldr	r3, [pc, #248]	; (80074fc <USBD_CDC_Init+0x1e4>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	3324      	adds	r3, #36	; 0x24
 8007416:	2201      	movs	r2, #1
 8007418:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800741a:	4b39      	ldr	r3, [pc, #228]	; (8007500 <USBD_CDC_Init+0x1e8>)
 800741c:	7819      	ldrb	r1, [r3, #0]
 800741e:	2340      	movs	r3, #64	; 0x40
 8007420:	2202      	movs	r2, #2
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f002 fd9b 	bl	8009f5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007428:	4b35      	ldr	r3, [pc, #212]	; (8007500 <USBD_CDC_Init+0x1e8>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 020f 	and.w	r2, r3, #15
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007440:	2201      	movs	r2, #1
 8007442:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007444:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <USBD_CDC_Init+0x1ec>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f003 020f 	and.w	r2, r3, #15
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	3326      	adds	r3, #38	; 0x26
 800745a:	2210      	movs	r2, #16
 800745c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800745e:	4b29      	ldr	r3, [pc, #164]	; (8007504 <USBD_CDC_Init+0x1ec>)
 8007460:	7819      	ldrb	r1, [r3, #0]
 8007462:	2308      	movs	r3, #8
 8007464:	2203      	movs	r2, #3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f002 fd79 	bl	8009f5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800746c:	4b25      	ldr	r3, [pc, #148]	; (8007504 <USBD_CDC_Init+0x1ec>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 020f 	and.w	r2, r3, #15
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	3324      	adds	r3, #36	; 0x24
 8007482:	2201      	movs	r2, #1
 8007484:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	33b0      	adds	r3, #176	; 0xb0
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074bc:	2302      	movs	r3, #2
 80074be:	e018      	b.n	80074f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7c1b      	ldrb	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074c8:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <USBD_CDC_Init+0x1e8>)
 80074ca:	7819      	ldrb	r1, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f002 fe30 	bl	800a13c <USBD_LL_PrepareReceive>
 80074dc:	e008      	b.n	80074f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <USBD_CDC_Init+0x1e8>)
 80074e0:	7819      	ldrb	r1, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f002 fe26 	bl	800a13c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	24000097 	.word	0x24000097
 8007500:	24000098 	.word	0x24000098
 8007504:	24000099 	.word	0x24000099

08007508 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007514:	4b3a      	ldr	r3, [pc, #232]	; (8007600 <USBD_CDC_DeInit+0xf8>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f002 fd45 	bl	8009faa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007520:	4b37      	ldr	r3, [pc, #220]	; (8007600 <USBD_CDC_DeInit+0xf8>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	f003 020f 	and.w	r2, r3, #15
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2200      	movs	r2, #0
 8007538:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800753a:	4b32      	ldr	r3, [pc, #200]	; (8007604 <USBD_CDC_DeInit+0xfc>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f002 fd32 	bl	8009faa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007546:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <USBD_CDC_DeInit+0xfc>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800755e:	2200      	movs	r2, #0
 8007560:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007562:	4b29      	ldr	r3, [pc, #164]	; (8007608 <USBD_CDC_DeInit+0x100>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 fd1e 	bl	8009faa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800756e:	4b26      	ldr	r3, [pc, #152]	; (8007608 <USBD_CDC_DeInit+0x100>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 020f 	and.w	r2, r3, #15
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	3324      	adds	r3, #36	; 0x24
 8007584:	2200      	movs	r2, #0
 8007586:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007588:	4b1f      	ldr	r3, [pc, #124]	; (8007608 <USBD_CDC_DeInit+0x100>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3326      	adds	r3, #38	; 0x26
 800759e:	2200      	movs	r2, #0
 80075a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32b0      	adds	r2, #176	; 0xb0
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01f      	beq.n	80075f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	33b0      	adds	r3, #176	; 0xb0
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	32b0      	adds	r2, #176	; 0xb0
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f002 fdf2 	bl	800a1c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	32b0      	adds	r2, #176	; 0xb0
 80075e6:	2100      	movs	r1, #0
 80075e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	24000097 	.word	0x24000097
 8007604:	24000098 	.word	0x24000098
 8007608:	24000099 	.word	0x24000099

0800760c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	32b0      	adds	r2, #176	; 0xb0
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	e0bf      	b.n	80077bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007644:	2b00      	cmp	r3, #0
 8007646:	d050      	beq.n	80076ea <USBD_CDC_Setup+0xde>
 8007648:	2b20      	cmp	r3, #32
 800764a:	f040 80af 	bne.w	80077ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	88db      	ldrh	r3, [r3, #6]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d03a      	beq.n	80076cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b25b      	sxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	da1b      	bge.n	8007698 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	33b0      	adds	r3, #176	; 0xb0
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007676:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	88d2      	ldrh	r2, [r2, #6]
 800767c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	88db      	ldrh	r3, [r3, #6]
 8007682:	2b07      	cmp	r3, #7
 8007684:	bf28      	it	cs
 8007686:	2307      	movcs	r3, #7
 8007688:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	89fa      	ldrh	r2, [r7, #14]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fdb3 	bl	80091fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007696:	e090      	b.n	80077ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785a      	ldrb	r2, [r3, #1]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	2b3f      	cmp	r3, #63	; 0x3f
 80076a8:	d803      	bhi.n	80076b2 <USBD_CDC_Setup+0xa6>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88db      	ldrh	r3, [r3, #6]
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	e000      	b.n	80076b4 <USBD_CDC_Setup+0xa8>
 80076b2:	2240      	movs	r2, #64	; 0x40
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076ba:	6939      	ldr	r1, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80076c2:	461a      	mov	r2, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fdc5 	bl	8009254 <USBD_CtlPrepareRx>
      break;
 80076ca:	e076      	b.n	80077ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	33b0      	adds	r3, #176	; 0xb0
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	7850      	ldrb	r0, [r2, #1]
 80076e2:	2200      	movs	r2, #0
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	4798      	blx	r3
      break;
 80076e8:	e067      	b.n	80077ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b0b      	cmp	r3, #11
 80076f0:	d851      	bhi.n	8007796 <USBD_CDC_Setup+0x18a>
 80076f2:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBD_CDC_Setup+0xec>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	08007729 	.word	0x08007729
 80076fc:	080077a5 	.word	0x080077a5
 8007700:	08007797 	.word	0x08007797
 8007704:	08007797 	.word	0x08007797
 8007708:	08007797 	.word	0x08007797
 800770c:	08007797 	.word	0x08007797
 8007710:	08007797 	.word	0x08007797
 8007714:	08007797 	.word	0x08007797
 8007718:	08007797 	.word	0x08007797
 800771c:	08007797 	.word	0x08007797
 8007720:	08007753 	.word	0x08007753
 8007724:	0800777d 	.word	0x0800777d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d107      	bne.n	8007744 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007734:	f107 030a 	add.w	r3, r7, #10
 8007738:	2202      	movs	r2, #2
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fd5d 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007742:	e032      	b.n	80077aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fce7 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	75fb      	strb	r3, [r7, #23]
          break;
 8007750:	e02b      	b.n	80077aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d107      	bne.n	800776e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800775e:	f107 030d 	add.w	r3, r7, #13
 8007762:	2201      	movs	r2, #1
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fd48 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800776c:	e01d      	b.n	80077aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fcd2 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 8007776:	2303      	movs	r3, #3
 8007778:	75fb      	strb	r3, [r7, #23]
          break;
 800777a:	e016      	b.n	80077aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b03      	cmp	r3, #3
 8007786:	d00f      	beq.n	80077a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fcc5 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007794:	e008      	b.n	80077a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fcbe 	bl	800911a <USBD_CtlError>
          ret = USBD_FAIL;
 800779e:	2303      	movs	r3, #3
 80077a0:	75fb      	strb	r3, [r7, #23]
          break;
 80077a2:	e002      	b.n	80077aa <USBD_CDC_Setup+0x19e>
          break;
 80077a4:	bf00      	nop
 80077a6:	e008      	b.n	80077ba <USBD_CDC_Setup+0x1ae>
          break;
 80077a8:	bf00      	nop
      }
      break;
 80077aa:	e006      	b.n	80077ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 fcb3 	bl	800911a <USBD_CtlError>
      ret = USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	75fb      	strb	r3, [r7, #23]
      break;
 80077b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32b0      	adds	r2, #176	; 0xb0
 80077e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e065      	b.n	80078ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	32b0      	adds	r2, #176	; 0xb0
 80077f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3318      	adds	r3, #24
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d02f      	beq.n	8007878 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	f003 020f 	and.w	r2, r3, #15
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	3318      	adds	r3, #24
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	f003 010f 	and.w	r1, r3, #15
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	460b      	mov	r3, r1
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	440b      	add	r3, r1
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4403      	add	r3, r0
 8007840:	3344      	adds	r3, #68	; 0x44
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	fbb2 f1f3 	udiv	r1, r2, r3
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800784e:	2b00      	cmp	r3, #0
 8007850:	d112      	bne.n	8007878 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 020f 	and.w	r2, r3, #15
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	3318      	adds	r3, #24
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800786a:	78f9      	ldrb	r1, [r7, #3]
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f002 fc42 	bl	800a0fa <USBD_LL_Transmit>
 8007876:	e01f      	b.n	80078b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	33b0      	adds	r3, #176	; 0xb0
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d010      	beq.n	80078b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	33b0      	adds	r3, #176	; 0xb0
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078b4:	78fa      	ldrb	r2, [r7, #3]
 80078b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32b0      	adds	r2, #176	; 0xb0
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	32b0      	adds	r2, #176	; 0xb0
 80078e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e01a      	b.n	800792a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 fc40 	bl	800a17e <USBD_LL_GetRxDataSize>
 80078fe:	4602      	mov	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	33b0      	adds	r3, #176	; 0xb0
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007924:	4611      	mov	r1, r2
 8007926:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	32b0      	adds	r2, #176	; 0xb0
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	e025      	b.n	80079a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	33b0      	adds	r3, #176	; 0xb0
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01a      	beq.n	800799e <USBD_CDC_EP0_RxReady+0x6c>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800796e:	2bff      	cmp	r3, #255	; 0xff
 8007970:	d015      	beq.n	800799e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	33b0      	adds	r3, #176	; 0xb0
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800798a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007992:	b292      	uxth	r2, r2
 8007994:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	22ff      	movs	r2, #255	; 0xff
 800799a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079b0:	2182      	movs	r1, #130	; 0x82
 80079b2:	4818      	ldr	r0, [pc, #96]	; (8007a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079b4:	f000 fd4f 	bl	8008456 <USBD_GetEpDesc>
 80079b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079ba:	2101      	movs	r1, #1
 80079bc:	4815      	ldr	r0, [pc, #84]	; (8007a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079be:	f000 fd4a 	bl	8008456 <USBD_GetEpDesc>
 80079c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079c4:	2181      	movs	r1, #129	; 0x81
 80079c6:	4813      	ldr	r0, [pc, #76]	; (8007a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079c8:	f000 fd45 	bl	8008456 <USBD_GetEpDesc>
 80079cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2210      	movs	r2, #16
 80079d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d006      	beq.n	80079ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079e8:	711a      	strb	r2, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fc:	711a      	strb	r2, [r3, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2243      	movs	r2, #67	; 0x43
 8007a06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a08:	4b02      	ldr	r3, [pc, #8]	; (8007a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	24000054 	.word	0x24000054

08007a18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a20:	2182      	movs	r1, #130	; 0x82
 8007a22:	4818      	ldr	r0, [pc, #96]	; (8007a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a24:	f000 fd17 	bl	8008456 <USBD_GetEpDesc>
 8007a28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4815      	ldr	r0, [pc, #84]	; (8007a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a2e:	f000 fd12 	bl	8008456 <USBD_GetEpDesc>
 8007a32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a34:	2181      	movs	r1, #129	; 0x81
 8007a36:	4813      	ldr	r0, [pc, #76]	; (8007a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a38:	f000 fd0d 	bl	8008456 <USBD_GetEpDesc>
 8007a3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2210      	movs	r2, #16
 8007a48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2200      	movs	r2, #0
 8007a54:	711a      	strb	r2, [r3, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f042 0202 	orr.w	r2, r2, #2
 8007a5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d006      	beq.n	8007a72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	711a      	strb	r2, [r3, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f042 0202 	orr.w	r2, r2, #2
 8007a70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2243      	movs	r2, #67	; 0x43
 8007a76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	24000054 	.word	0x24000054

08007a88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a90:	2182      	movs	r1, #130	; 0x82
 8007a92:	4818      	ldr	r0, [pc, #96]	; (8007af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a94:	f000 fcdf 	bl	8008456 <USBD_GetEpDesc>
 8007a98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	4815      	ldr	r0, [pc, #84]	; (8007af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a9e:	f000 fcda 	bl	8008456 <USBD_GetEpDesc>
 8007aa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007aa4:	2181      	movs	r1, #129	; 0x81
 8007aa6:	4813      	ldr	r0, [pc, #76]	; (8007af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007aa8:	f000 fcd5 	bl	8008456 <USBD_GetEpDesc>
 8007aac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d006      	beq.n	8007ace <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ac8:	711a      	strb	r2, [r3, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007adc:	711a      	strb	r2, [r3, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2243      	movs	r2, #67	; 0x43
 8007ae6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	24000054 	.word	0x24000054

08007af8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	220a      	movs	r2, #10
 8007b04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b06:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	24000010 	.word	0x24000010

08007b18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e009      	b.n	8007b40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	33b0      	adds	r3, #176	; 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	32b0      	adds	r2, #176	; 0xb0
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e008      	b.n	8007b84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	32b0      	adds	r2, #176	; 0xb0
 8007ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e004      	b.n	8007bbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	32b0      	adds	r2, #176	; 0xb0
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e025      	b.n	8007c3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d11f      	bne.n	8007c3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <USBD_CDC_TransmitPacket+0x7c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4403      	add	r3, r0
 8007c1e:	3318      	adds	r3, #24
 8007c20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <USBD_CDC_TransmitPacket+0x7c>)
 8007c24:	7819      	ldrb	r1, [r3, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f002 fa61 	bl	800a0fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	24000097 	.word	0x24000097

08007c4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	32b0      	adds	r2, #176	; 0xb0
 8007c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	32b0      	adds	r2, #176	; 0xb0
 8007c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e018      	b.n	8007cac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7c1b      	ldrb	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c82:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <USBD_CDC_ReceivePacket+0x68>)
 8007c84:	7819      	ldrb	r1, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f002 fa53 	bl	800a13c <USBD_LL_PrepareReceive>
 8007c96:	e008      	b.n	8007caa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c98:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <USBD_CDC_ReceivePacket+0x68>)
 8007c9a:	7819      	ldrb	r1, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ca2:	2340      	movs	r3, #64	; 0x40
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 fa49 	bl	800a13c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	24000098 	.word	0x24000098

08007cb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e01f      	b.n	8007d10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	79fa      	ldrb	r2, [r7, #7]
 8007d02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f002 f8bf 	bl	8009e88 <USBD_LL_Init>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e025      	b.n	8007d7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	32ae      	adds	r2, #174	; 0xae
 8007d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00f      	beq.n	8007d6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	32ae      	adds	r2, #174	; 0xae
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	f107 020e 	add.w	r2, r7, #14
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f002 f8cb 	bl	8009f28 <USBD_LL_Start>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	4611      	mov	r1, r2
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e10:	2303      	movs	r3, #3
 8007e12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 f938 	bl	80090a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d01a      	beq.n	8007e90 <USBD_LL_SetupStage+0x72>
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d822      	bhi.n	8007ea4 <USBD_LL_SetupStage+0x86>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <USBD_LL_SetupStage+0x4a>
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d00a      	beq.n	8007e7c <USBD_LL_SetupStage+0x5e>
 8007e66:	e01d      	b.n	8007ea4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fb65 	bl	8008540 <USBD_StdDevReq>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7a:	e020      	b.n	8007ebe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fbcd 	bl	8008624 <USBD_StdItfReq>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8e:	e016      	b.n	8007ebe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc2f 	bl	80086fc <USBD_StdEPReq>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea2:	e00c      	b.n	8007ebe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f002 f898 	bl	8009fe8 <USBD_LL_StallEP>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]
      break;
 8007ebc:	bf00      	nop
  }

  return ret;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d16e      	bne.n	8007fbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ee6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	f040 8098 	bne.w	8008024 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d913      	bls.n	8007f28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	bf28      	it	cs
 8007f1a:	4613      	movcs	r3, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f001 f9b4 	bl	800928e <USBD_CtlContinueRx>
 8007f26:	e07d      	b.n	8008024 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d014      	beq.n	8007f60 <USBD_LL_DataOutStage+0x98>
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d81d      	bhi.n	8007f76 <USBD_LL_DataOutStage+0xae>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <USBD_LL_DataOutStage+0x7c>
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d003      	beq.n	8007f4a <USBD_LL_DataOutStage+0x82>
 8007f42:	e018      	b.n	8007f76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	75bb      	strb	r3, [r7, #22]
            break;
 8007f48:	e018      	b.n	8007f7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fa64 	bl	8008422 <USBD_CoreFindIF>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75bb      	strb	r3, [r7, #22]
            break;
 8007f5e:	e00d      	b.n	8007f7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	4619      	mov	r1, r3
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fa66 	bl	800843c <USBD_CoreFindEP>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75bb      	strb	r3, [r7, #22]
            break;
 8007f74:	e002      	b.n	8007f7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75bb      	strb	r3, [r7, #22]
            break;
 8007f7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f7c:	7dbb      	ldrb	r3, [r7, #22]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d119      	bne.n	8007fb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d113      	bne.n	8007fb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f8e:	7dba      	ldrb	r2, [r7, #22]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f9e:	7dba      	ldrb	r2, [r7, #22]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007fa6:	7dba      	ldrb	r2, [r7, #22]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	32ae      	adds	r2, #174	; 0xae
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f001 f97a 	bl	80092b0 <USBD_CtlSendStatus>
 8007fbc:	e032      	b.n	8008024 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fa37 	bl	800843c <USBD_CoreFindEP>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fd2:	7dbb      	ldrb	r3, [r7, #22]
 8007fd4:	2bff      	cmp	r3, #255	; 0xff
 8007fd6:	d025      	beq.n	8008024 <USBD_LL_DataOutStage+0x15c>
 8007fd8:	7dbb      	ldrb	r3, [r7, #22]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d122      	bne.n	8008024 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d117      	bne.n	800801a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007fea:	7dba      	ldrb	r2, [r7, #22]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	32ae      	adds	r2, #174	; 0xae
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00f      	beq.n	800801a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ffa:	7dba      	ldrb	r2, [r7, #22]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008002:	7dba      	ldrb	r2, [r7, #22]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	32ae      	adds	r2, #174	; 0xae
 8008008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	7afa      	ldrb	r2, [r7, #11]
 8008010:	4611      	mov	r1, r2
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	4798      	blx	r3
 8008016:	4603      	mov	r3, r0
 8008018:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	e000      	b.n	8008026 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b086      	sub	sp, #24
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	460b      	mov	r3, r1
 8008038:	607a      	str	r2, [r7, #4]
 800803a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800803c:	7afb      	ldrb	r3, [r7, #11]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d16f      	bne.n	8008122 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3314      	adds	r3, #20
 8008046:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800804e:	2b02      	cmp	r3, #2
 8008050:	d15a      	bne.n	8008108 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d914      	bls.n	8008088 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	461a      	mov	r2, r3
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 f8dc 	bl	8009232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f002 f85b 	bl	800a13c <USBD_LL_PrepareReceive>
 8008086:	e03f      	b.n	8008108 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	429a      	cmp	r2, r3
 8008092:	d11c      	bne.n	80080ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800809c:	429a      	cmp	r2, r3
 800809e:	d316      	bcc.n	80080ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d20f      	bcs.n	80080ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f001 f8bd 	bl	8009232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080c0:	2300      	movs	r3, #0
 80080c2:	2200      	movs	r2, #0
 80080c4:	2100      	movs	r1, #0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f002 f838 	bl	800a13c <USBD_LL_PrepareReceive>
 80080cc:	e01c      	b.n	8008108 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d10f      	bne.n	80080fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080fa:	2180      	movs	r1, #128	; 0x80
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f001 ff73 	bl	8009fe8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f001 f8e7 	bl	80092d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d03a      	beq.n	8008188 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff fe42 	bl	8007d9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008120:	e032      	b.n	8008188 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008122:	7afb      	ldrb	r3, [r7, #11]
 8008124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008128:	b2db      	uxtb	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f985 	bl	800843c <USBD_CoreFindEP>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	2bff      	cmp	r3, #255	; 0xff
 800813a:	d025      	beq.n	8008188 <USBD_LL_DataInStage+0x15a>
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d122      	bne.n	8008188 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b03      	cmp	r3, #3
 800814c:	d11c      	bne.n	8008188 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800814e:	7dfa      	ldrb	r2, [r7, #23]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	32ae      	adds	r2, #174	; 0xae
 8008154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d014      	beq.n	8008188 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800815e:	7dfa      	ldrb	r2, [r7, #23]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008166:	7dfa      	ldrb	r2, [r7, #23]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	32ae      	adds	r2, #174	; 0xae
 800816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	7afa      	ldrb	r2, [r7, #11]
 8008174:	4611      	mov	r1, r2
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	4798      	blx	r3
 800817a:	4603      	mov	r3, r0
 800817c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800817e:	7dbb      	ldrb	r3, [r7, #22]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008184:	7dbb      	ldrb	r3, [r7, #22]
 8008186:	e000      	b.n	800818a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d014      	beq.n	80081f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6852      	ldr	r2, [r2, #4]
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	2200      	movs	r2, #0
 80081fc:	2100      	movs	r1, #0
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 fead 	bl	8009f5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2240      	movs	r2, #64	; 0x40
 8008210:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008214:	2340      	movs	r3, #64	; 0x40
 8008216:	2200      	movs	r2, #0
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fe9f 	bl	8009f5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2240      	movs	r2, #64	; 0x40
 800822a:	621a      	str	r2, [r3, #32]

  return ret;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	78fa      	ldrb	r2, [r7, #3]
 8008246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b04      	cmp	r3, #4
 8008268:	d006      	beq.n	8008278 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2204      	movs	r2, #4
 800827c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d106      	bne.n	80082b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d110      	bne.n	80082f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	32ae      	adds	r2, #174	; 0xae
 8008314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	e01c      	b.n	800835a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b03      	cmp	r3, #3
 800832a:	d115      	bne.n	8008358 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	32ae      	adds	r2, #174	; 0xae
 8008336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	32ae      	adds	r2, #174	; 0xae
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	4611      	mov	r1, r2
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	32ae      	adds	r2, #174	; 0xae
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	e01c      	b.n	80083be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b03      	cmp	r3, #3
 800838e:	d115      	bne.n	80083bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	32ae      	adds	r2, #174	; 0xae
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	32ae      	adds	r2, #174	; 0xae
 80083ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	4611      	mov	r1, r2
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00e      	beq.n	8008418 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6852      	ldr	r2, [r2, #4]
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	4611      	mov	r1, r2
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	4798      	blx	r3
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800842e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008448:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b086      	sub	sp, #24
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800846a:	2300      	movs	r3, #0
 800846c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	885b      	ldrh	r3, [r3, #2]
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	429a      	cmp	r2, r3
 800847c:	d920      	bls.n	80084c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008486:	e013      	b.n	80084b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008488:	f107 030a 	add.w	r3, r7, #10
 800848c:	4619      	mov	r1, r3
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f000 f81b 	bl	80084ca <USBD_GetNextDesc>
 8008494:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2b05      	cmp	r3, #5
 800849c:	d108      	bne.n	80084b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	789b      	ldrb	r3, [r3, #2]
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d008      	beq.n	80084be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	885b      	ldrh	r3, [r3, #2]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d8e5      	bhi.n	8008488 <USBD_GetEpDesc+0x32>
 80084bc:	e000      	b.n	80084c0 <USBD_GetEpDesc+0x6a>
          break;
 80084be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80084c0:	693b      	ldr	r3, [r7, #16]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	881a      	ldrh	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4413      	add	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084f6:	68fb      	ldr	r3, [r7, #12]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	3301      	adds	r3, #1
 800851a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008522:	8a3b      	ldrh	r3, [r7, #16]
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	b21a      	sxth	r2, r3
 8008528:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800852c:	4313      	orrs	r3, r2
 800852e:	b21b      	sxth	r3, r3
 8008530:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008532:	89fb      	ldrh	r3, [r7, #14]
}
 8008534:	4618      	mov	r0, r3
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	d005      	beq.n	8008566 <USBD_StdDevReq+0x26>
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d857      	bhi.n	800860e <USBD_StdDevReq+0xce>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00f      	beq.n	8008582 <USBD_StdDevReq+0x42>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d153      	bne.n	800860e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	32ae      	adds	r2, #174	; 0xae
 8008570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
      break;
 8008580:	e04a      	b.n	8008618 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	2b09      	cmp	r3, #9
 8008588:	d83b      	bhi.n	8008602 <USBD_StdDevReq+0xc2>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <USBD_StdDevReq+0x50>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085e5 	.word	0x080085e5
 8008594:	080085f9 	.word	0x080085f9
 8008598:	08008603 	.word	0x08008603
 800859c:	080085ef 	.word	0x080085ef
 80085a0:	08008603 	.word	0x08008603
 80085a4:	080085c3 	.word	0x080085c3
 80085a8:	080085b9 	.word	0x080085b9
 80085ac:	08008603 	.word	0x08008603
 80085b0:	080085db 	.word	0x080085db
 80085b4:	080085cd 	.word	0x080085cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fa3c 	bl	8008a38 <USBD_GetDescriptor>
          break;
 80085c0:	e024      	b.n	800860c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fbcb 	bl	8008d60 <USBD_SetAddress>
          break;
 80085ca:	e01f      	b.n	800860c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fc0a 	bl	8008de8 <USBD_SetConfig>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
          break;
 80085d8:	e018      	b.n	800860c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fcad 	bl	8008f3c <USBD_GetConfig>
          break;
 80085e2:	e013      	b.n	800860c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fcde 	bl	8008fa8 <USBD_GetStatus>
          break;
 80085ec:	e00e      	b.n	800860c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fd0d 	bl	8009010 <USBD_SetFeature>
          break;
 80085f6:	e009      	b.n	800860c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fd31 	bl	8009062 <USBD_ClrFeature>
          break;
 8008600:	e004      	b.n	800860c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fd88 	bl	800911a <USBD_CtlError>
          break;
 800860a:	bf00      	nop
      }
      break;
 800860c:	e004      	b.n	8008618 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fd82 	bl	800911a <USBD_CtlError>
      break;
 8008616:	bf00      	nop
  }

  return ret;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop

08008624 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	d005      	beq.n	800864a <USBD_StdItfReq+0x26>
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d852      	bhi.n	80086e8 <USBD_StdItfReq+0xc4>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <USBD_StdItfReq+0x26>
 8008646:	2b20      	cmp	r3, #32
 8008648:	d14e      	bne.n	80086e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008650:	b2db      	uxtb	r3, r3
 8008652:	3b01      	subs	r3, #1
 8008654:	2b02      	cmp	r3, #2
 8008656:	d840      	bhi.n	80086da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	889b      	ldrh	r3, [r3, #4]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b01      	cmp	r3, #1
 8008660:	d836      	bhi.n	80086d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	889b      	ldrh	r3, [r3, #4]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fed9 	bl	8008422 <USBD_CoreFindIF>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2bff      	cmp	r3, #255	; 0xff
 8008678:	d01d      	beq.n	80086b6 <USBD_StdItfReq+0x92>
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d11a      	bne.n	80086b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008680:	7bba      	ldrb	r2, [r7, #14]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32ae      	adds	r2, #174	; 0xae
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00f      	beq.n	80086b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008690:	7bba      	ldrb	r2, [r7, #14]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008698:	7bba      	ldrb	r2, [r7, #14]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	32ae      	adds	r2, #174	; 0xae
 800869e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086ae:	e004      	b.n	80086ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80086b0:	2303      	movs	r3, #3
 80086b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086b4:	e001      	b.n	80086ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	88db      	ldrh	r3, [r3, #6]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d110      	bne.n	80086e4 <USBD_StdItfReq+0xc0>
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10d      	bne.n	80086e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fdf1 	bl	80092b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086ce:	e009      	b.n	80086e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fd21 	bl	800911a <USBD_CtlError>
          break;
 80086d8:	e004      	b.n	80086e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fd1c 	bl	800911a <USBD_CtlError>
          break;
 80086e2:	e000      	b.n	80086e6 <USBD_StdItfReq+0xc2>
          break;
 80086e4:	bf00      	nop
      }
      break;
 80086e6:	e004      	b.n	80086f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fd15 	bl	800911a <USBD_CtlError>
      break;
 80086f0:	bf00      	nop
  }

  return ret;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	889b      	ldrh	r3, [r3, #4]
 800870e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008718:	2b40      	cmp	r3, #64	; 0x40
 800871a:	d007      	beq.n	800872c <USBD_StdEPReq+0x30>
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	f200 817f 	bhi.w	8008a20 <USBD_StdEPReq+0x324>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d02a      	beq.n	800877c <USBD_StdEPReq+0x80>
 8008726:	2b20      	cmp	r3, #32
 8008728:	f040 817a 	bne.w	8008a20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fe83 	bl	800843c <USBD_CoreFindEP>
 8008736:	4603      	mov	r3, r0
 8008738:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800873a:	7b7b      	ldrb	r3, [r7, #13]
 800873c:	2bff      	cmp	r3, #255	; 0xff
 800873e:	f000 8174 	beq.w	8008a2a <USBD_StdEPReq+0x32e>
 8008742:	7b7b      	ldrb	r3, [r7, #13]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f040 8170 	bne.w	8008a2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800874a:	7b7a      	ldrb	r2, [r7, #13]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008752:	7b7a      	ldrb	r2, [r7, #13]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	32ae      	adds	r2, #174	; 0xae
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8163 	beq.w	8008a2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008764:	7b7a      	ldrb	r2, [r7, #13]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	32ae      	adds	r2, #174	; 0xae
 800876a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
 8008776:	4603      	mov	r3, r0
 8008778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800877a:	e156      	b.n	8008a2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d008      	beq.n	8008796 <USBD_StdEPReq+0x9a>
 8008784:	2b03      	cmp	r3, #3
 8008786:	f300 8145 	bgt.w	8008a14 <USBD_StdEPReq+0x318>
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 809b 	beq.w	80088c6 <USBD_StdEPReq+0x1ca>
 8008790:	2b01      	cmp	r3, #1
 8008792:	d03c      	beq.n	800880e <USBD_StdEPReq+0x112>
 8008794:	e13e      	b.n	8008a14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d002      	beq.n	80087a8 <USBD_StdEPReq+0xac>
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d016      	beq.n	80087d4 <USBD_StdEPReq+0xd8>
 80087a6:	e02c      	b.n	8008802 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <USBD_StdEPReq+0xce>
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b80      	cmp	r3, #128	; 0x80
 80087b2:	d00a      	beq.n	80087ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fc15 	bl	8009fe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087be:	2180      	movs	r1, #128	; 0x80
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fc11 	bl	8009fe8 <USBD_LL_StallEP>
 80087c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087c8:	e020      	b.n	800880c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fca4 	bl	800911a <USBD_CtlError>
              break;
 80087d2:	e01b      	b.n	800880c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	885b      	ldrh	r3, [r3, #2]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10e      	bne.n	80087fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <USBD_StdEPReq+0xfe>
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b80      	cmp	r3, #128	; 0x80
 80087e6:	d008      	beq.n	80087fa <USBD_StdEPReq+0xfe>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	88db      	ldrh	r3, [r3, #6]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d104      	bne.n	80087fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fbf7 	bl	8009fe8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fd58 	bl	80092b0 <USBD_CtlSendStatus>

              break;
 8008800:	e004      	b.n	800880c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fc88 	bl	800911a <USBD_CtlError>
              break;
 800880a:	bf00      	nop
          }
          break;
 800880c:	e107      	b.n	8008a1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d002      	beq.n	8008820 <USBD_StdEPReq+0x124>
 800881a:	2b03      	cmp	r3, #3
 800881c:	d016      	beq.n	800884c <USBD_StdEPReq+0x150>
 800881e:	e04b      	b.n	80088b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00d      	beq.n	8008842 <USBD_StdEPReq+0x146>
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b80      	cmp	r3, #128	; 0x80
 800882a:	d00a      	beq.n	8008842 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 fbd9 	bl	8009fe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008836:	2180      	movs	r1, #128	; 0x80
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 fbd5 	bl	8009fe8 <USBD_LL_StallEP>
 800883e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008840:	e040      	b.n	80088c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fc68 	bl	800911a <USBD_CtlError>
              break;
 800884a:	e03b      	b.n	80088c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	885b      	ldrh	r3, [r3, #2]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d136      	bne.n	80088c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885a:	2b00      	cmp	r3, #0
 800885c:	d004      	beq.n	8008868 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fbdf 	bl	800a026 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fd21 	bl	80092b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fde2 	bl	800843c <USBD_CoreFindEP>
 8008878:	4603      	mov	r3, r0
 800887a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800887c:	7b7b      	ldrb	r3, [r7, #13]
 800887e:	2bff      	cmp	r3, #255	; 0xff
 8008880:	d01f      	beq.n	80088c2 <USBD_StdEPReq+0x1c6>
 8008882:	7b7b      	ldrb	r3, [r7, #13]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d11c      	bne.n	80088c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008888:	7b7a      	ldrb	r2, [r7, #13]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008890:	7b7a      	ldrb	r2, [r7, #13]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	32ae      	adds	r2, #174	; 0xae
 8008896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d010      	beq.n	80088c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088a0:	7b7a      	ldrb	r2, [r7, #13]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	32ae      	adds	r2, #174	; 0xae
 80088a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80088b6:	e004      	b.n	80088c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fc2d 	bl	800911a <USBD_CtlError>
              break;
 80088c0:	e000      	b.n	80088c4 <USBD_StdEPReq+0x1c8>
              break;
 80088c2:	bf00      	nop
          }
          break;
 80088c4:	e0ab      	b.n	8008a1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d002      	beq.n	80088d8 <USBD_StdEPReq+0x1dc>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d032      	beq.n	800893c <USBD_StdEPReq+0x240>
 80088d6:	e097      	b.n	8008a08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <USBD_StdEPReq+0x1f2>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b80      	cmp	r3, #128	; 0x80
 80088e2:	d004      	beq.n	80088ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fc17 	bl	800911a <USBD_CtlError>
                break;
 80088ec:	e091      	b.n	8008a12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	da0b      	bge.n	800890e <USBD_StdEPReq+0x212>
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	3310      	adds	r3, #16
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4413      	add	r3, r2
 800890a:	3304      	adds	r3, #4
 800890c:	e00b      	b.n	8008926 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2202      	movs	r2, #2
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc61 	bl	80091fc <USBD_CtlSendData>
              break;
 800893a:	e06a      	b.n	8008a12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800893c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	da11      	bge.n	8008968 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	f003 020f 	and.w	r2, r3, #15
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	3324      	adds	r3, #36	; 0x24
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d117      	bne.n	800898e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fbda 	bl	800911a <USBD_CtlError>
                  break;
 8008966:	e054      	b.n	8008a12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	f003 020f 	and.w	r2, r3, #15
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d104      	bne.n	800898e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fbc7 	bl	800911a <USBD_CtlError>
                  break;
 800898c:	e041      	b.n	8008a12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800898e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008992:	2b00      	cmp	r3, #0
 8008994:	da0b      	bge.n	80089ae <USBD_StdEPReq+0x2b2>
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	3310      	adds	r3, #16
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	4413      	add	r3, r2
 80089aa:	3304      	adds	r3, #4
 80089ac:	e00b      	b.n	80089c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	4413      	add	r3, r2
 80089c4:	3304      	adds	r3, #4
 80089c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <USBD_StdEPReq+0x2d8>
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d103      	bne.n	80089dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e00e      	b.n	80089fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 fb3f 	bl	800a064 <USBD_LL_IsStallEP>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e002      	b.n	80089fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2202      	movs	r2, #2
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbfb 	bl	80091fc <USBD_CtlSendData>
              break;
 8008a06:	e004      	b.n	8008a12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb85 	bl	800911a <USBD_CtlError>
              break;
 8008a10:	bf00      	nop
          }
          break;
 8008a12:	e004      	b.n	8008a1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fb7f 	bl	800911a <USBD_CtlError>
          break;
 8008a1c:	bf00      	nop
      }
      break;
 8008a1e:	e005      	b.n	8008a2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fb79 	bl	800911a <USBD_CtlError>
      break;
 8008a28:	e000      	b.n	8008a2c <USBD_StdEPReq+0x330>
      break;
 8008a2a:	bf00      	nop
  }

  return ret;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	2b0e      	cmp	r3, #14
 8008a5a:	f200 8152 	bhi.w	8008d02 <USBD_GetDescriptor+0x2ca>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <USBD_GetDescriptor+0x2c>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008ad5 	.word	0x08008ad5
 8008a68:	08008aed 	.word	0x08008aed
 8008a6c:	08008b2d 	.word	0x08008b2d
 8008a70:	08008d03 	.word	0x08008d03
 8008a74:	08008d03 	.word	0x08008d03
 8008a78:	08008ca3 	.word	0x08008ca3
 8008a7c:	08008ccf 	.word	0x08008ccf
 8008a80:	08008d03 	.word	0x08008d03
 8008a84:	08008d03 	.word	0x08008d03
 8008a88:	08008d03 	.word	0x08008d03
 8008a8c:	08008d03 	.word	0x08008d03
 8008a90:	08008d03 	.word	0x08008d03
 8008a94:	08008d03 	.word	0x08008d03
 8008a98:	08008d03 	.word	0x08008d03
 8008a9c:	08008aa1 	.word	0x08008aa1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac2:	e126      	b.n	8008d12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fb27 	bl	800911a <USBD_CtlError>
        err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad2:	e11e      	b.n	8008d12 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
      break;
 8008aea:	e112      	b.n	8008d12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7c1b      	ldrb	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10d      	bne.n	8008b10 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	f107 0208 	add.w	r2, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b0e:	e100      	b.n	8008d12 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	f107 0208 	add.w	r2, r7, #8
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	2202      	movs	r2, #2
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	e0f2      	b.n	8008d12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	885b      	ldrh	r3, [r3, #2]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	f200 80ac 	bhi.w	8008c90 <USBD_GetDescriptor+0x258>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <USBD_GetDescriptor+0x108>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b8d 	.word	0x08008b8d
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008bf5 	.word	0x08008bf5
 8008b50:	08008c29 	.word	0x08008c29
 8008b54:	08008c5d 	.word	0x08008c5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7a:	e091      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 facb 	bl	800911a <USBD_CtlError>
            err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8a:	e089      	b.n	8008ca0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bae:	e077      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fab1 	bl	800911a <USBD_CtlError>
            err++;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bbe:	e06f      	b.n	8008ca0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be2:	e05d      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa97 	bl	800911a <USBD_CtlError>
            err++;
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf2:	e055      	b.n	8008ca0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7c12      	ldrb	r2, [r2, #16]
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c16:	e043      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa7d 	bl	800911a <USBD_CtlError>
            err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
          break;
 8008c26:	e03b      	b.n	8008ca0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4a:	e029      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa63 	bl	800911a <USBD_CtlError>
            err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5a:	e021      	b.n	8008ca0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	7c12      	ldrb	r2, [r2, #16]
 8008c74:	f107 0108 	add.w	r1, r7, #8
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7e:	e00f      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa49 	bl	800911a <USBD_CtlError>
            err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8e:	e007      	b.n	8008ca0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa41 	bl	800911a <USBD_CtlError>
          err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c9e:	bf00      	nop
      }
      break;
 8008ca0:	e037      	b.n	8008d12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7c1b      	ldrb	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb2:	f107 0208 	add.w	r2, r7, #8
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4798      	blx	r3
 8008cba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cbc:	e029      	b.n	8008d12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fa2a 	bl	800911a <USBD_CtlError>
        err++;
 8008cc6:	7afb      	ldrb	r3, [r7, #11]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ccc:	e021      	b.n	8008d12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7c1b      	ldrb	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f107 0208 	add.w	r2, r7, #8
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4798      	blx	r3
 8008ce6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	2207      	movs	r2, #7
 8008cee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf0:	e00f      	b.n	8008d12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa10 	bl	800911a <USBD_CtlError>
        err++;
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008d00:	e007      	b.n	8008d12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa08 	bl	800911a <USBD_CtlError>
      err++;
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d10:	bf00      	nop
  }

  if (err != 0U)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11e      	bne.n	8008d56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d016      	beq.n	8008d4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008d20:	893b      	ldrh	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	88da      	ldrh	r2, [r3, #6]
 8008d2a:	893b      	ldrh	r3, [r7, #8]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	bf28      	it	cs
 8008d30:	4613      	movcs	r3, r2
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d36:	893b      	ldrh	r3, [r7, #8]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa5d 	bl	80091fc <USBD_CtlSendData>
 8008d42:	e009      	b.n	8008d58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9e7 	bl	800911a <USBD_CtlError>
 8008d4c:	e004      	b.n	8008d58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 faae 	bl	80092b0 <USBD_CtlSendStatus>
 8008d54:	e000      	b.n	8008d58 <USBD_GetDescriptor+0x320>
    return;
 8008d56:	bf00      	nop
  }
}
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	889b      	ldrh	r3, [r3, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d131      	bne.n	8008dd6 <USBD_SetAddress+0x76>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d12d      	bne.n	8008dd6 <USBD_SetAddress+0x76>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d80:	d829      	bhi.n	8008dd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d104      	bne.n	8008da4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9bc 	bl	800911a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da2:	e01d      	b.n	8008de0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7bfa      	ldrb	r2, [r7, #15]
 8008da8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f983 	bl	800a0bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa7a 	bl	80092b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dca:	e009      	b.n	8008de0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd4:	e004      	b.n	8008de0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f99e 	bl	800911a <USBD_CtlError>
  }
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	4b4e      	ldr	r3, [pc, #312]	; (8008f38 <USBD_SetConfig+0x150>)
 8008dfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e00:	4b4d      	ldr	r3, [pc, #308]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d905      	bls.n	8008e14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f985 	bl	800911a <USBD_CtlError>
    return USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e08c      	b.n	8008f2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d002      	beq.n	8008e26 <USBD_SetConfig+0x3e>
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d029      	beq.n	8008e78 <USBD_SetConfig+0x90>
 8008e24:	e075      	b.n	8008f12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e26:	4b44      	ldr	r3, [pc, #272]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e2e:	4b42      	ldr	r3, [pc, #264]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e38:	4b3f      	ldr	r3, [pc, #252]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7fe ffb7 	bl	8007db2 <USBD_SetClassConfig>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f962 	bl	800911a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e5e:	e065      	b.n	8008f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa25 	bl	80092b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e6e:	e05d      	b.n	8008f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa1d 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008e76:	e059      	b.n	8008f2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e78:	4b2f      	ldr	r3, [pc, #188]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d112      	bne.n	8008ea6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e88:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e92:	4b29      	ldr	r3, [pc, #164]	; (8008f38 <USBD_SetConfig+0x150>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fe ffa6 	bl	8007dea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa06 	bl	80092b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ea4:	e042      	b.n	8008f2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <USBD_SetConfig+0x150>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d02a      	beq.n	8008f0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe ff94 	bl	8007dea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <USBD_SetConfig+0x150>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <USBD_SetConfig+0x150>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fe ff6d 	bl	8007db2 <USBD_SetClassConfig>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f918 	bl	800911a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fe ff79 	bl	8007dea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f00:	e014      	b.n	8008f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9d4 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008f08:	e010      	b.n	8008f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9d0 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008f10:	e00c      	b.n	8008f2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f900 	bl	800911a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f1a:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <USBD_SetConfig+0x150>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ff62 	bl	8007dea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f26:	2303      	movs	r3, #3
 8008f28:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2a:	bf00      	nop
  }

  return ret;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	24000388 	.word	0x24000388

08008f3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	88db      	ldrh	r3, [r3, #6]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d004      	beq.n	8008f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8e2 	bl	800911a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f56:	e023      	b.n	8008fa0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	dc02      	bgt.n	8008f6a <USBD_GetConfig+0x2e>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc03      	bgt.n	8008f70 <USBD_GetConfig+0x34>
 8008f68:	e015      	b.n	8008f96 <USBD_GetConfig+0x5a>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d00b      	beq.n	8008f86 <USBD_GetConfig+0x4a>
 8008f6e:	e012      	b.n	8008f96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f93c 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f84:	e00c      	b.n	8008fa0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f934 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f94:	e004      	b.n	8008fa0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8be 	bl	800911a <USBD_CtlError>
        break;
 8008f9e:	bf00      	nop
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d81e      	bhi.n	8008ffe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d004      	beq.n	8008fd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f8a5 	bl	800911a <USBD_CtlError>
        break;
 8008fd0:	e01a      	b.n	8009008 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f043 0202 	orr.w	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f900 	bl	80091fc <USBD_CtlSendData>
      break;
 8008ffc:	e004      	b.n	8009008 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f88a 	bl	800911a <USBD_CtlError>
      break;
 8009006:	bf00      	nop
  }
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d107      	bne.n	8009032 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f940 	bl	80092b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009030:	e013      	b.n	800905a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d10b      	bne.n	8009052 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	889b      	ldrh	r3, [r3, #4]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	b29b      	uxth	r3, r3
 8009042:	b2da      	uxtb	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f930 	bl	80092b0 <USBD_CtlSendStatus>
}
 8009050:	e003      	b.n	800905a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f860 	bl	800911a <USBD_CtlError>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009072:	b2db      	uxtb	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	2b02      	cmp	r3, #2
 8009078:	d80b      	bhi.n	8009092 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10c      	bne.n	800909c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f910 	bl	80092b0 <USBD_CtlSendStatus>
      }
      break;
 8009090:	e004      	b.n	800909c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f840 	bl	800911a <USBD_CtlError>
      break;
 800909a:	e000      	b.n	800909e <USBD_ClrFeature+0x3c>
      break;
 800909c:	bf00      	nop
  }
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7ff fa17 	bl	8008504 <SWAPBYTE>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fa0a 	bl	8008504 <SWAPBYTE>
 80090f0:	4603      	mov	r3, r0
 80090f2:	461a      	mov	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff f9fd 	bl	8008504 <SWAPBYTE>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	80da      	strh	r2, [r3, #6]
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009124:	2180      	movs	r1, #128	; 0x80
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 ff5e 	bl	8009fe8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 ff5a 	bl	8009fe8 <USBD_LL_StallEP>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d036      	beq.n	80091c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f000 f836 	bl	80091c8 <USBD_GetLen>
 800915c:	4603      	mov	r3, r0
 800915e:	3301      	adds	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4413      	add	r3, r2
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
  idx++;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	3301      	adds	r3, #1
 800917a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	2203      	movs	r2, #3
 8009184:	701a      	strb	r2, [r3, #0]
  idx++;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	3301      	adds	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800918c:	e013      	b.n	80091b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	4413      	add	r3, r2
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3301      	adds	r3, #1
 800919e:	613b      	str	r3, [r7, #16]
    idx++;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	3301      	adds	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	4413      	add	r3, r2
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	3301      	adds	r3, #1
 80091b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e7      	bne.n	800918e <USBD_GetString+0x52>
 80091be:	e000      	b.n	80091c2 <USBD_GetString+0x86>
    return;
 80091c0:	bf00      	nop
  }
}
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091d8:	e005      	b.n	80091e6 <USBD_GetLen+0x1e>
  {
    len++;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3301      	adds	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f5      	bne.n	80091da <USBD_GetLen+0x12>
  }

  return len;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2202      	movs	r2, #2
 800920c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 ff69 	bl	800a0fa <USBD_LL_Transmit>

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 ff58 	bl	800a0fa <USBD_LL_Transmit>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2203      	movs	r2, #3
 8009264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	2100      	movs	r1, #0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 ff5c 	bl	800a13c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	2100      	movs	r1, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 ff4b 	bl	800a13c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 ff17 	bl	800a0fa <USBD_LL_Transmit>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 ff25 	bl	800a13c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <pll_Init>:
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 * @return
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	ed87 0a01 	vstr	s0, [r7, #4]
 800930a:	4613      	mov	r3, r2
 800930c:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	609a      	str	r2, [r3, #8]

    signal->sogi_d_1 = 0.f;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	611a      	str	r2, [r3, #16]
    signal->sogi_d_2 = 0.f;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	615a      	str	r2, [r3, #20]

    signal->sogi_q_1 = 0.f;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	61da      	str	r2, [r3, #28]
    signal->sogi_q_2 = 0.f;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	62da      	str	r2, [r3, #44]	; 0x2c

    config->omiga = 2 * PI * f; // f典型值50
 800934e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009352:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80094b8 <pll_Init+0x1bc>
 8009356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	edc3 7a00 	vstr	s15, [r3]
    config->Ts    = 1.f / F;    // F典型值20000
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800936a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800936e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k     = 1.414f;     // 阻尼比典型值1.414
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	4a50      	ldr	r2, [pc, #320]	; (80094bc <pll_Init+0x1c0>)
 800937c:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	edd3 7a00 	vldr	s15, [r3]
 800938c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009390:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	edd3 7a01 	vldr	s15, [r3, #4]
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    signal->x     = 2.f * config->k * config->omiga * config->Ts;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80093aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	edd3 7a00 	vldr	s15, [r3]
 80093b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    signal->y     = config->omiga * config->Ts * config->omiga * config->Ts;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	ed93 7a00 	vldr	s14, [r3]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80093d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	edd3 7a00 	vldr	s15, [r3]
 80093de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80093e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009408:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800940c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009420:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009424:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009428:	ee77 6a67 	vsub.f32	s13, s14, s15
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800943c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800945a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800945e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009462:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009476:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800947a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800947e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    // 初始化pid参数
    config->pid_kp     = 70.73586f;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4a0d      	ldr	r2, [pc, #52]	; (80094c0 <pll_Init+0x1c4>)
 800948c:	611a      	str	r2, [r3, #16]
    config->pid_ki     = 15715.9305749f;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4a0c      	ldr	r2, [pc, #48]	; (80094c4 <pll_Init+0x1c8>)
 8009492:	615a      	str	r2, [r3, #20]
    config->pid_kd     = 0.f; // 只需要PI控制
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f04f 0200 	mov.w	r2, #0
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38
    signal->pid_out    = 0.f;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	40c90fdb 	.word	0x40c90fdb
 80094bc:	3fb4fdf4 	.word	0x3fb4fdf4
 80094c0:	428d78c3 	.word	0x428d78c3
 80094c4:	46758fb9 	.word	0x46758fb9

080094c8 <pll_Control>:
 * @param config: 配置指针
 * @param ccr: PWM控制时钟 示例:htim1->Instance->CCR1
 * @return
 */
void pll_Control(pll_Signal *signal, pll_Config *config, uint32_t *ccr)
{
 80094c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ca:	ed2d 8b02 	vpush	{d8}
 80094ce:	b08b      	sub	sp, #44	; 0x2c
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    sogi(signal);
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 f8e7 	bl	80096ac <sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal->sogi_d_0, signal->sogi_q_0 / 382 * 3, &signal->park_d, &signal->park_q, arm_sin_f32(signal->theta), arm_cos_f32(signal->theta));
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68de      	ldr	r6, [r3, #12]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80094e8:	eddf 6a41 	vldr	s13, [pc, #260]	; 80095f0 <pll_Control+0x128>
 80094ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80094f4:	ee27 8a87 	vmul.f32	s16, s15, s14
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f103 0524 	add.w	r5, r3, #36	; 0x24
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800950a:	eeb0 0a67 	vmov.f32	s0, s15
 800950e:	f000 fe8d 	bl	800a22c <arm_sin_f32>
 8009512:	eef0 8a40 	vmov.f32	s17, s0
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800951c:	eeb0 0a67 	vmov.f32	s0, s15
 8009520:	f000 feca 	bl	800a2b8 <arm_cos_f32>
 8009524:	eef0 7a40 	vmov.f32	s15, s0
 8009528:	627e      	str	r6, [r7, #36]	; 0x24
 800952a:	ed87 8a08 	vstr	s16, [r7, #32]
 800952e:	61fd      	str	r5, [r7, #28]
 8009530:	61bc      	str	r4, [r7, #24]
 8009532:	edc7 8a05 	vstr	s17, [r7, #20]
 8009536:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800953a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800953e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009546:	edd7 6a08 	vldr	s13, [r7, #32]
 800954a:	edd7 7a05 	vldr	s15, [r7, #20]
 800954e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800955c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009560:	eeb1 7a67 	vneg.f32	s14, s15
 8009564:	edd7 7a05 	vldr	s15, [r7, #20]
 8009568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800956c:	edd7 6a08 	vldr	s13, [r7, #32]
 8009570:	edd7 7a04 	vldr	s15, [r7, #16]
 8009574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	edc3 7a00 	vstr	s15, [r3]
  }
 8009582:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal, config);
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f834 	bl	80095f4 <pll_Pid>

    signal->theta += (signal->pid_out + config->omiga) * config->Ts;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	edd3 7a00 	vldr	s15, [r3]
 800959e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80095a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    signal->theta = (float)fmod(signal->theta, 2 * PI);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80095bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80095c0:	ed9f 1b09 	vldr	d1, [pc, #36]	; 80095e8 <pll_Control+0x120>
 80095c4:	eeb0 0b47 	vmov.f64	d0, d7
 80095c8:	f003 fc96 	bl	800cef8 <fmod>
 80095cc:	eeb0 7b40 	vmov.f64	d7, d0
 80095d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    // } else if (ccr + out < config->minCount) {
    //     *ccr = config->minCount;
    // } else {
    //     *ccr += out;
    // }
}
 80095da:	bf00      	nop
 80095dc:	372c      	adds	r7, #44	; 0x2c
 80095de:	46bd      	mov	sp, r7
 80095e0:	ecbd 8b02 	vpop	{d8}
 80095e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e6:	bf00      	nop
 80095e8:	60000000 	.word	0x60000000
 80095ec:	401921fb 	.word	0x401921fb
 80095f0:	43bf0000 	.word	0x43bf0000

080095f4 <pll_Pid>:
 * @param signal: 信号指针
 * @param config: 配置指针
 * @return
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	edd3 7a03 	vldr	s15, [r3, #12]
 800960a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    signal->pid_out    = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	edd3 6a04 	vldr	s13, [r3, #16]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800962c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	edd3 6a05 	vldr	s13, [r3, #20]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009658:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800969c <pll_Pid+0xa8>
 800965c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009664:	dd03      	ble.n	800966e <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a0d      	ldr	r2, [pc, #52]	; (80096a0 <pll_Pid+0xac>)
 800966a:	631a      	str	r2, [r3, #48]	; 0x30
 800966c:	e00c      	b.n	8009688 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009674:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80096a4 <pll_Pid+0xb0>
 8009678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009680:	d502      	bpl.n	8009688 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a08      	ldr	r2, [pc, #32]	; (80096a8 <pll_Pid+0xb4>)
 8009686:	631a      	str	r2, [r3, #48]	; 0x30

    signal->pid_err[1] = signal->pid_err[0];
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	431d1463 	.word	0x431d1463
 80096a0:	431d1463 	.word	0x431d1463
 80096a4:	c27b53d2 	.word	0xc27b53d2
 80096a8:	c27b53d2 	.word	0xc27b53d2

080096ac <sogi>:
/*
SOGI变换
调用频繁，使用内联函数可增加效率
*/
void sogi(pll_Signal *signal)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
    signal->sogi_d_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_d_1 + signal->a2 * signal->sogi_d_2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	edd3 7a00 	vldr	s15, [r3]
 80096c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80096d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80096e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80096f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_q_0 = signal->b0 * signal->u_0 + 2 * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_q_1 + signal->a2 * signal->sogi_q_2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	edd3 7a00 	vldr	s15, [r3]
 8009712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800971c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	edd3 7a01 	vldr	s15, [r3, #4]
 8009726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800972a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	edd3 7a02 	vldr	s15, [r3, #8]
 800973a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800973e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	edd3 7a07 	vldr	s15, [r3, #28]
 800974e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	605a      	str	r2, [r3, #4]
    signal->sogi_d_2 = signal->sogi_d_1;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	615a      	str	r2, [r3, #20]
    signal->sogi_d_1 = signal->sogi_d_0;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	611a      	str	r2, [r3, #16]
    signal->sogi_q_2 = signal->sogi_q_1;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	69da      	ldr	r2, [r3, #28]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	621a      	str	r2, [r3, #32]
    signal->sogi_q_1 = signal->sogi_q_0;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	61da      	str	r2, [r3, #28]
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097b0:	2200      	movs	r2, #0
 80097b2:	4913      	ldr	r1, [pc, #76]	; (8009800 <MX_USB_DEVICE_Init+0x54>)
 80097b4:	4813      	ldr	r0, [pc, #76]	; (8009804 <MX_USB_DEVICE_Init+0x58>)
 80097b6:	f7fe fa7f 	bl	8007cb8 <USBD_Init>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80097c0:	f7f7 f858 	bl	8000874 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097c4:	4910      	ldr	r1, [pc, #64]	; (8009808 <MX_USB_DEVICE_Init+0x5c>)
 80097c6:	480f      	ldr	r0, [pc, #60]	; (8009804 <MX_USB_DEVICE_Init+0x58>)
 80097c8:	f7fe faa6 	bl	8007d18 <USBD_RegisterClass>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097d2:	f7f7 f84f 	bl	8000874 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097d6:	490d      	ldr	r1, [pc, #52]	; (800980c <MX_USB_DEVICE_Init+0x60>)
 80097d8:	480a      	ldr	r0, [pc, #40]	; (8009804 <MX_USB_DEVICE_Init+0x58>)
 80097da:	f7fe f99d 	bl	8007b18 <USBD_CDC_RegisterInterface>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097e4:	f7f7 f846 	bl	8000874 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097e8:	4806      	ldr	r0, [pc, #24]	; (8009804 <MX_USB_DEVICE_Init+0x58>)
 80097ea:	f7fe facb 	bl	8007d84 <USBD_Start>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097f4:	f7f7 f83e 	bl	8000874 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80097f8:	f7f9 f9b4 	bl	8002b64 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097fc:	bf00      	nop
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	240000b0 	.word	0x240000b0
 8009804:	2400038c 	.word	0x2400038c
 8009808:	2400001c 	.word	0x2400001c
 800980c:	2400009c 	.word	0x2400009c

08009810 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009814:	2200      	movs	r2, #0
 8009816:	4905      	ldr	r1, [pc, #20]	; (800982c <CDC_Init_FS+0x1c>)
 8009818:	4805      	ldr	r0, [pc, #20]	; (8009830 <CDC_Init_FS+0x20>)
 800981a:	f7fe f997 	bl	8007b4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800981e:	4905      	ldr	r1, [pc, #20]	; (8009834 <CDC_Init_FS+0x24>)
 8009820:	4803      	ldr	r0, [pc, #12]	; (8009830 <CDC_Init_FS+0x20>)
 8009822:	f7fe f9b5 	bl	8007b90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009826:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009828:	4618      	mov	r0, r3
 800982a:	bd80      	pop	{r7, pc}
 800982c:	24000e68 	.word	0x24000e68
 8009830:	2400038c 	.word	0x2400038c
 8009834:	24000668 	.word	0x24000668

08009838 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800983c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800983e:	4618      	mov	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
 8009854:	4613      	mov	r3, r2
 8009856:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b23      	cmp	r3, #35	; 0x23
 800985c:	d84a      	bhi.n	80098f4 <CDC_Control_FS+0xac>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <CDC_Control_FS+0x1c>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	080098f5 	.word	0x080098f5
 8009868:	080098f5 	.word	0x080098f5
 800986c:	080098f5 	.word	0x080098f5
 8009870:	080098f5 	.word	0x080098f5
 8009874:	080098f5 	.word	0x080098f5
 8009878:	080098f5 	.word	0x080098f5
 800987c:	080098f5 	.word	0x080098f5
 8009880:	080098f5 	.word	0x080098f5
 8009884:	080098f5 	.word	0x080098f5
 8009888:	080098f5 	.word	0x080098f5
 800988c:	080098f5 	.word	0x080098f5
 8009890:	080098f5 	.word	0x080098f5
 8009894:	080098f5 	.word	0x080098f5
 8009898:	080098f5 	.word	0x080098f5
 800989c:	080098f5 	.word	0x080098f5
 80098a0:	080098f5 	.word	0x080098f5
 80098a4:	080098f5 	.word	0x080098f5
 80098a8:	080098f5 	.word	0x080098f5
 80098ac:	080098f5 	.word	0x080098f5
 80098b0:	080098f5 	.word	0x080098f5
 80098b4:	080098f5 	.word	0x080098f5
 80098b8:	080098f5 	.word	0x080098f5
 80098bc:	080098f5 	.word	0x080098f5
 80098c0:	080098f5 	.word	0x080098f5
 80098c4:	080098f5 	.word	0x080098f5
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	080098f5 	.word	0x080098f5
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	080098f5 	.word	0x080098f5
 80098d8:	080098f5 	.word	0x080098f5
 80098dc:	080098f5 	.word	0x080098f5
 80098e0:	080098f5 	.word	0x080098f5
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	080098f5 	.word	0x080098f5
 80098ec:	080098f5 	.word	0x080098f5
 80098f0:	080098f5 	.word	0x080098f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098f4:	bf00      	nop
  }

  return (USBD_OK);
 80098f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	4805      	ldr	r0, [pc, #20]	; (8009928 <CDC_Receive_FS+0x24>)
 8009912:	f7fe f93d 	bl	8007b90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009916:	4804      	ldr	r0, [pc, #16]	; (8009928 <CDC_Receive_FS+0x24>)
 8009918:	f7fe f998 	bl	8007c4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800991c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2400038c 	.word	0x2400038c

0800992c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800993c:	4b0d      	ldr	r3, [pc, #52]	; (8009974 <CDC_Transmit_FS+0x48>)
 800993e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009942:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800994e:	2301      	movs	r3, #1
 8009950:	e00b      	b.n	800996a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009952:	887b      	ldrh	r3, [r7, #2]
 8009954:	461a      	mov	r2, r3
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	4806      	ldr	r0, [pc, #24]	; (8009974 <CDC_Transmit_FS+0x48>)
 800995a:	f7fe f8f7 	bl	8007b4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <CDC_Transmit_FS+0x48>)
 8009960:	f7fe f934 	bl	8007bcc <USBD_CDC_TransmitPacket>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	2400038c 	.word	0x2400038c

08009978 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800998a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800998e:	4618      	mov	r0, r3
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
	...

0800999c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2212      	movs	r2, #18
 80099ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099ae:	4b03      	ldr	r3, [pc, #12]	; (80099bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	240000d0 	.word	0x240000d0

080099c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	6039      	str	r1, [r7, #0]
 80099ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2204      	movs	r2, #4
 80099d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099d2:	4b03      	ldr	r3, [pc, #12]	; (80099e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	240000e4 	.word	0x240000e4

080099e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	6039      	str	r1, [r7, #0]
 80099ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d105      	bne.n	8009a02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	4907      	ldr	r1, [pc, #28]	; (8009a18 <USBD_FS_ProductStrDescriptor+0x34>)
 80099fa:	4808      	ldr	r0, [pc, #32]	; (8009a1c <USBD_FS_ProductStrDescriptor+0x38>)
 80099fc:	f7ff fb9e 	bl	800913c <USBD_GetString>
 8009a00:	e004      	b.n	8009a0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4904      	ldr	r1, [pc, #16]	; (8009a18 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a06:	4805      	ldr	r0, [pc, #20]	; (8009a1c <USBD_FS_ProductStrDescriptor+0x38>)
 8009a08:	f7ff fb98 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a0c:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	24001668 	.word	0x24001668
 8009a1c:	0800d1cc 	.word	0x0800d1cc

08009a20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	4904      	ldr	r1, [pc, #16]	; (8009a40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a30:	4804      	ldr	r0, [pc, #16]	; (8009a44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a32:	f7ff fb83 	bl	800913c <USBD_GetString>
  return USBD_StrDesc;
 8009a36:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	24001668 	.word	0x24001668
 8009a44:	0800d1e4 	.word	0x0800d1e4

08009a48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	221a      	movs	r2, #26
 8009a58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a5a:	f000 f843 	bl	8009ae4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a5e:	4b02      	ldr	r3, [pc, #8]	; (8009a68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	240000e8 	.word	0x240000e8

08009a6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d105      	bne.n	8009a8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a82:	4808      	ldr	r0, [pc, #32]	; (8009aa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a84:	f7ff fb5a 	bl	800913c <USBD_GetString>
 8009a88:	e004      	b.n	8009a94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	4904      	ldr	r1, [pc, #16]	; (8009aa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a8e:	4805      	ldr	r0, [pc, #20]	; (8009aa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a90:	f7ff fb54 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	24001668 	.word	0x24001668
 8009aa4:	0800d1f8 	.word	0x0800d1f8

08009aa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	6039      	str	r1, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	4907      	ldr	r1, [pc, #28]	; (8009adc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009abe:	4808      	ldr	r0, [pc, #32]	; (8009ae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ac0:	f7ff fb3c 	bl	800913c <USBD_GetString>
 8009ac4:	e004      	b.n	8009ad0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4904      	ldr	r1, [pc, #16]	; (8009adc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aca:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009acc:	f7ff fb36 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	24001668 	.word	0x24001668
 8009ae0:	0800d204 	.word	0x0800d204

08009ae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009aea:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <Get_SerialNum+0x44>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <Get_SerialNum+0x48>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009af6:	4b0e      	ldr	r3, [pc, #56]	; (8009b30 <Get_SerialNum+0x4c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4413      	add	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	4909      	ldr	r1, [pc, #36]	; (8009b34 <Get_SerialNum+0x50>)
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f814 	bl	8009b3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b14:	2204      	movs	r2, #4
 8009b16:	4908      	ldr	r1, [pc, #32]	; (8009b38 <Get_SerialNum+0x54>)
 8009b18:	68b8      	ldr	r0, [r7, #8]
 8009b1a:	f000 f80f 	bl	8009b3c <IntToUnicode>
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	1ff1e800 	.word	0x1ff1e800
 8009b2c:	1ff1e804 	.word	0x1ff1e804
 8009b30:	1ff1e808 	.word	0x1ff1e808
 8009b34:	240000ea 	.word	0x240000ea
 8009b38:	240000fa 	.word	0x240000fa

08009b3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]
 8009b52:	e027      	b.n	8009ba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	0f1b      	lsrs	r3, r3, #28
 8009b58:	2b09      	cmp	r3, #9
 8009b5a:	d80b      	bhi.n	8009b74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	0f1b      	lsrs	r3, r3, #28
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4619      	mov	r1, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3230      	adds	r2, #48	; 0x30
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	e00a      	b.n	8009b8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	0f1b      	lsrs	r3, r3, #28
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	440b      	add	r3, r1
 8009b84:	3237      	adds	r2, #55	; 0x37
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	011b      	lsls	r3, r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	3301      	adds	r3, #1
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
 8009ba4:	7dfa      	ldrb	r2, [r7, #23]
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d3d3      	bcc.n	8009b54 <IntToUnicode+0x18>
  }
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b0ba      	sub	sp, #232	; 0xe8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	60da      	str	r2, [r3, #12]
 8009bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009bd4:	f107 0310 	add.w	r3, r7, #16
 8009bd8:	22c0      	movs	r2, #192	; 0xc0
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 f9ca 	bl	800af76 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a2c      	ldr	r2, [pc, #176]	; (8009c98 <HAL_PCD_MspInit+0xdc>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d151      	bne.n	8009c90 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009bec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009bf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c00:	f107 0310 	add.w	r3, r7, #16
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7f9 ffcf 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8009c10:	f7f6 fe30 	bl	8000874 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009c14:	f7f8 ffa6 	bl	8002b64 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c18:	4b20      	ldr	r3, [pc, #128]	; (8009c9c <HAL_PCD_MspInit+0xe0>)
 8009c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c1e:	4a1f      	ldr	r2, [pc, #124]	; (8009c9c <HAL_PCD_MspInit+0xe0>)
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c28:	4b1c      	ldr	r3, [pc, #112]	; (8009c9c <HAL_PCD_MspInit+0xe0>)
 8009c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009c50:	230a      	movs	r3, #10
 8009c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4810      	ldr	r0, [pc, #64]	; (8009ca0 <HAL_PCD_MspInit+0xe4>)
 8009c5e:	f7f7 faab 	bl	80011b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c62:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <HAL_PCD_MspInit+0xe0>)
 8009c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c68:	4a0c      	ldr	r2, [pc, #48]	; (8009c9c <HAL_PCD_MspInit+0xe0>)
 8009c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009c72:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <HAL_PCD_MspInit+0xe0>)
 8009c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c7c:	60bb      	str	r3, [r7, #8]
 8009c7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c80:	2200      	movs	r2, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	2065      	movs	r0, #101	; 0x65
 8009c86:	f7f7 f9f3 	bl	8001070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c8a:	2065      	movs	r0, #101	; 0x65
 8009c8c:	f7f7 fa0a 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c90:	bf00      	nop
 8009c92:	37e8      	adds	r7, #232	; 0xe8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	40080000 	.word	0x40080000
 8009c9c:	58024400 	.word	0x58024400
 8009ca0:	58020000 	.word	0x58020000

08009ca4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fe f8af 	bl	8007e1e <USBD_LL_SetupStage>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009cda:	78fa      	ldrb	r2, [r7, #3]
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f7fe f8e9 	bl	8007ec8 <USBD_LL_DataOutStage>
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	4613      	mov	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	3348      	adds	r3, #72	; 0x48
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	4619      	mov	r1, r3
 8009d26:	f7fe f982 	bl	800802e <USBD_LL_DataInStage>
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fabc 	bl	80082be <USBD_LL_SOF>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d56:	2301      	movs	r3, #1
 8009d58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d102      	bne.n	8009d68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
 8009d66:	e008      	b.n	8009d7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d102      	bne.n	8009d76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
 8009d74:	e001      	b.n	8009d7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d76:	f7f6 fd7d 	bl	8000874 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d80:	7bfa      	ldrb	r2, [r7, #15]
 8009d82:	4611      	mov	r1, r2
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fa56 	bl	8008236 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe f9fe 	bl	8008192 <USBD_LL_Reset>
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fa51 	bl	8008256 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6812      	ldr	r2, [r2, #0]
 8009dc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dd4:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <HAL_PCD_SuspendCallback+0x48>)
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	4a03      	ldr	r2, [pc, #12]	; (8009de8 <HAL_PCD_SuspendCallback+0x48>)
 8009dda:	f043 0306 	orr.w	r3, r3, #6
 8009dde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	e000ed00 	.word	0xe000ed00

08009dec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe fa47 	bl	800828e <USBD_LL_Resume>
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fa9f 	bl	8008362 <USBD_LL_IsoOUTIncomplete>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e3e:	78fa      	ldrb	r2, [r7, #3]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fa5b 	bl	80082fe <USBD_LL_IsoINIncomplete>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fab1 	bl	80083c6 <USBD_LL_DevConnected>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe faae 	bl	80083dc <USBD_LL_DevDisconnected>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d13e      	bne.n	8009f16 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e98:	4a21      	ldr	r2, [pc, #132]	; (8009f20 <USBD_LL_Init+0x98>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ea4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <USBD_LL_Init+0x98>)
 8009eaa:	4a1e      	ldr	r2, [pc, #120]	; (8009f24 <USBD_LL_Init+0x9c>)
 8009eac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009eae:	4b1c      	ldr	r3, [pc, #112]	; (8009f20 <USBD_LL_Init+0x98>)
 8009eb0:	2209      	movs	r2, #9
 8009eb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <USBD_LL_Init+0x98>)
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009eba:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ec0:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ec6:	4b16      	ldr	r3, [pc, #88]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ecc:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009ed8:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <USBD_LL_Init+0x98>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ede:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <USBD_LL_Init+0x98>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009eea:	480d      	ldr	r0, [pc, #52]	; (8009f20 <USBD_LL_Init+0x98>)
 8009eec:	f7f7 fb47 	bl	800157e <HAL_PCD_Init>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009ef6:	f7f6 fcbd 	bl	8000874 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009efa:	2180      	movs	r1, #128	; 0x80
 8009efc:	4808      	ldr	r0, [pc, #32]	; (8009f20 <USBD_LL_Init+0x98>)
 8009efe:	f7f8 fdb6 	bl	8002a6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f02:	2240      	movs	r2, #64	; 0x40
 8009f04:	2100      	movs	r1, #0
 8009f06:	4806      	ldr	r0, [pc, #24]	; (8009f20 <USBD_LL_Init+0x98>)
 8009f08:	f7f8 fd6a 	bl	80029e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f0c:	2280      	movs	r2, #128	; 0x80
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4803      	ldr	r0, [pc, #12]	; (8009f20 <USBD_LL_Init+0x98>)
 8009f12:	f7f8 fd65 	bl	80029e0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	24001868 	.word	0x24001868
 8009f24:	40080000 	.word	0x40080000

08009f28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7f7 fc41 	bl	80017c6 <HAL_PCD_Start>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 f942 	bl	800a1d4 <USBD_Get_USB_Status>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	70fb      	strb	r3, [r7, #3]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70bb      	strb	r3, [r7, #2]
 8009f74:	4613      	mov	r3, r2
 8009f76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f86:	78bb      	ldrb	r3, [r7, #2]
 8009f88:	883a      	ldrh	r2, [r7, #0]
 8009f8a:	78f9      	ldrb	r1, [r7, #3]
 8009f8c:	f7f8 f941 	bl	8002212 <HAL_PCD_EP_Open>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 f91c 	bl	800a1d4 <USBD_Get_USB_Status>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fc4:	78fa      	ldrb	r2, [r7, #3]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f8 f98a 	bl	80022e2 <HAL_PCD_EP_Close>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f8fd 	bl	800a1d4 <USBD_Get_USB_Status>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7f8 fa44 	bl	8002494 <HAL_PCD_EP_SetStall>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f8de 	bl	800a1d4 <USBD_Get_USB_Status>
 800a018:	4603      	mov	r3, r0
 800a01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7f8 fa89 	bl	800255c <HAL_PCD_EP_ClrStall>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	4618      	mov	r0, r3
 800a052:	f000 f8bf 	bl	800a1d4 <USBD_Get_USB_Status>
 800a056:	4603      	mov	r3, r0
 800a058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a076:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	da0b      	bge.n	800a098 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a086:	68f9      	ldr	r1, [r7, #12]
 800a088:	4613      	mov	r3, r2
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	440b      	add	r3, r1
 800a092:	333e      	adds	r3, #62	; 0x3e
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	e00b      	b.n	800a0b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a09e:	68f9      	ldr	r1, [r7, #12]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a0ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	4611      	mov	r1, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f8 f874 	bl	80021c8 <HAL_PCD_SetAddress>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f874 	bl	800a1d4 <USBD_Get_USB_Status>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b086      	sub	sp, #24
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
 800a106:	460b      	mov	r3, r1
 800a108:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a118:	7af9      	ldrb	r1, [r7, #11]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	f7f8 f97e 	bl	800241e <HAL_PCD_EP_Transmit>
 800a122:	4603      	mov	r3, r0
 800a124:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 f853 	bl	800a1d4 <USBD_Get_USB_Status>
 800a12e:	4603      	mov	r3, r0
 800a130:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a132:	7dbb      	ldrb	r3, [r7, #22]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	460b      	mov	r3, r1
 800a14a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a15a:	7af9      	ldrb	r1, [r7, #11]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	f7f8 f909 	bl	8002376 <HAL_PCD_EP_Receive>
 800a164:	4603      	mov	r3, r0
 800a166:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f832 	bl	800a1d4 <USBD_Get_USB_Status>
 800a170:	4603      	mov	r3, r0
 800a172:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a174:	7dbb      	ldrb	r3, [r7, #22]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f7f8 f92a 	bl	80023ee <HAL_PCD_EP_GetRxCount>
 800a19a:	4603      	mov	r3, r0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1ac:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <USBD_static_malloc+0x18>)
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	24001d74 	.word	0x24001d74

0800a1c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d817      	bhi.n	800a218 <USBD_Get_USB_Status+0x44>
 800a1e8:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <USBD_Get_USB_Status+0x1c>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a201 	.word	0x0800a201
 800a1f4:	0800a207 	.word	0x0800a207
 800a1f8:	0800a20d 	.word	0x0800a20d
 800a1fc:	0800a213 	.word	0x0800a213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
    break;
 800a204:	e00b      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a206:	2303      	movs	r3, #3
 800a208:	73fb      	strb	r3, [r7, #15]
    break;
 800a20a:	e008      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
    break;
 800a210:	e005      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	73fb      	strb	r3, [r7, #15]
    break;
 800a216:	e002      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a218:	2303      	movs	r3, #3
 800a21a:	73fb      	strb	r3, [r7, #15]
    break;
 800a21c:	bf00      	nop
  }
  return usb_status;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <arm_sin_f32>:
 800a22c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a2ac <arm_sin_f32+0x80>
 800a230:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a234:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a238:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a240:	d504      	bpl.n	800a24c <arm_sin_f32+0x20>
 800a242:	ee17 3a90 	vmov	r3, s15
 800a246:	3b01      	subs	r3, #1
 800a248:	ee07 3a90 	vmov	s15, r3
 800a24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a250:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a2b0 <arm_sin_f32+0x84>
 800a254:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a25c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a260:	ee17 3a10 	vmov	r3, s14
 800a264:	b29b      	uxth	r3, r3
 800a266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26a:	d21a      	bcs.n	800a2a2 <arm_sin_f32+0x76>
 800a26c:	ee07 3a10 	vmov	s14, r3
 800a270:	1c59      	adds	r1, r3, #1
 800a272:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800a276:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a27a:	4a0e      	ldr	r2, [pc, #56]	; (800a2b4 <arm_sin_f32+0x88>)
 800a27c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a280:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a284:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a288:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a28c:	edd3 6a00 	vldr	s13, [r3]
 800a290:	ed92 7a00 	vldr	s14, [r2]
 800a294:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a29c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a2a0:	4770      	bx	lr
 800a2a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e7e6      	b.n	800a27a <arm_sin_f32+0x4e>
 800a2ac:	3e22f983 	.word	0x3e22f983
 800a2b0:	44000000 	.word	0x44000000
 800a2b4:	0800d224 	.word	0x0800d224

0800a2b8 <arm_cos_f32>:
 800a2b8:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a340 <arm_cos_f32+0x88>
 800a2bc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800a2c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800a2c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a2cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d4:	d504      	bpl.n	800a2e0 <arm_cos_f32+0x28>
 800a2d6:	ee17 3a90 	vmov	r3, s15
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	ee07 3a90 	vmov	s15, r3
 800a2e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2e4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a344 <arm_cos_f32+0x8c>
 800a2e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a2ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a2f0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a2f4:	ee17 3a10 	vmov	r3, s14
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fe:	d21a      	bcs.n	800a336 <arm_cos_f32+0x7e>
 800a300:	ee07 3a10 	vmov	s14, r3
 800a304:	1c59      	adds	r1, r3, #1
 800a306:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800a30a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a30e:	4a0e      	ldr	r2, [pc, #56]	; (800a348 <arm_cos_f32+0x90>)
 800a310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a318:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a31c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a320:	edd3 6a00 	vldr	s13, [r3]
 800a324:	ed92 7a00 	vldr	s14, [r2]
 800a328:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a32c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a330:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a334:	4770      	bx	lr
 800a336:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a33a:	2101      	movs	r1, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	e7e6      	b.n	800a30e <arm_cos_f32+0x56>
 800a340:	3e22f983 	.word	0x3e22f983
 800a344:	44000000 	.word	0x44000000
 800a348:	0800d224 	.word	0x0800d224

0800a34c <malloc>:
 800a34c:	4b02      	ldr	r3, [pc, #8]	; (800a358 <malloc+0xc>)
 800a34e:	4601      	mov	r1, r0
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f000 b823 	b.w	800a39c <_malloc_r>
 800a356:	bf00      	nop
 800a358:	2400015c 	.word	0x2400015c

0800a35c <sbrk_aligned>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	4e0e      	ldr	r6, [pc, #56]	; (800a398 <sbrk_aligned+0x3c>)
 800a360:	460c      	mov	r4, r1
 800a362:	6831      	ldr	r1, [r6, #0]
 800a364:	4605      	mov	r5, r0
 800a366:	b911      	cbnz	r1, 800a36e <sbrk_aligned+0x12>
 800a368:	f000 fe46 	bl	800aff8 <_sbrk_r>
 800a36c:	6030      	str	r0, [r6, #0]
 800a36e:	4621      	mov	r1, r4
 800a370:	4628      	mov	r0, r5
 800a372:	f000 fe41 	bl	800aff8 <_sbrk_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d00a      	beq.n	800a390 <sbrk_aligned+0x34>
 800a37a:	1cc4      	adds	r4, r0, #3
 800a37c:	f024 0403 	bic.w	r4, r4, #3
 800a380:	42a0      	cmp	r0, r4
 800a382:	d007      	beq.n	800a394 <sbrk_aligned+0x38>
 800a384:	1a21      	subs	r1, r4, r0
 800a386:	4628      	mov	r0, r5
 800a388:	f000 fe36 	bl	800aff8 <_sbrk_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d101      	bne.n	800a394 <sbrk_aligned+0x38>
 800a390:	f04f 34ff 	mov.w	r4, #4294967295
 800a394:	4620      	mov	r0, r4
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	24001f98 	.word	0x24001f98

0800a39c <_malloc_r>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	1ccd      	adds	r5, r1, #3
 800a3a2:	f025 0503 	bic.w	r5, r5, #3
 800a3a6:	3508      	adds	r5, #8
 800a3a8:	2d0c      	cmp	r5, #12
 800a3aa:	bf38      	it	cc
 800a3ac:	250c      	movcc	r5, #12
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	db01      	blt.n	800a3b8 <_malloc_r+0x1c>
 800a3b4:	42a9      	cmp	r1, r5
 800a3b6:	d905      	bls.n	800a3c4 <_malloc_r+0x28>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	2600      	movs	r6, #0
 800a3be:	4630      	mov	r0, r6
 800a3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a498 <_malloc_r+0xfc>
 800a3c8:	f000 f868 	bl	800a49c <__malloc_lock>
 800a3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3d0:	461c      	mov	r4, r3
 800a3d2:	bb5c      	cbnz	r4, 800a42c <_malloc_r+0x90>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7ff ffc0 	bl	800a35c <sbrk_aligned>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	4604      	mov	r4, r0
 800a3e0:	d155      	bne.n	800a48e <_malloc_r+0xf2>
 800a3e2:	f8d8 4000 	ldr.w	r4, [r8]
 800a3e6:	4626      	mov	r6, r4
 800a3e8:	2e00      	cmp	r6, #0
 800a3ea:	d145      	bne.n	800a478 <_malloc_r+0xdc>
 800a3ec:	2c00      	cmp	r4, #0
 800a3ee:	d048      	beq.n	800a482 <_malloc_r+0xe6>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	eb04 0903 	add.w	r9, r4, r3
 800a3fa:	f000 fdfd 	bl	800aff8 <_sbrk_r>
 800a3fe:	4581      	cmp	r9, r0
 800a400:	d13f      	bne.n	800a482 <_malloc_r+0xe6>
 800a402:	6821      	ldr	r1, [r4, #0]
 800a404:	1a6d      	subs	r5, r5, r1
 800a406:	4629      	mov	r1, r5
 800a408:	4638      	mov	r0, r7
 800a40a:	f7ff ffa7 	bl	800a35c <sbrk_aligned>
 800a40e:	3001      	adds	r0, #1
 800a410:	d037      	beq.n	800a482 <_malloc_r+0xe6>
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	442b      	add	r3, r5
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	f8d8 3000 	ldr.w	r3, [r8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d038      	beq.n	800a492 <_malloc_r+0xf6>
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	42a2      	cmp	r2, r4
 800a424:	d12b      	bne.n	800a47e <_malloc_r+0xe2>
 800a426:	2200      	movs	r2, #0
 800a428:	605a      	str	r2, [r3, #4]
 800a42a:	e00f      	b.n	800a44c <_malloc_r+0xb0>
 800a42c:	6822      	ldr	r2, [r4, #0]
 800a42e:	1b52      	subs	r2, r2, r5
 800a430:	d41f      	bmi.n	800a472 <_malloc_r+0xd6>
 800a432:	2a0b      	cmp	r2, #11
 800a434:	d917      	bls.n	800a466 <_malloc_r+0xca>
 800a436:	1961      	adds	r1, r4, r5
 800a438:	42a3      	cmp	r3, r4
 800a43a:	6025      	str	r5, [r4, #0]
 800a43c:	bf18      	it	ne
 800a43e:	6059      	strne	r1, [r3, #4]
 800a440:	6863      	ldr	r3, [r4, #4]
 800a442:	bf08      	it	eq
 800a444:	f8c8 1000 	streq.w	r1, [r8]
 800a448:	5162      	str	r2, [r4, r5]
 800a44a:	604b      	str	r3, [r1, #4]
 800a44c:	4638      	mov	r0, r7
 800a44e:	f104 060b 	add.w	r6, r4, #11
 800a452:	f000 f829 	bl	800a4a8 <__malloc_unlock>
 800a456:	f026 0607 	bic.w	r6, r6, #7
 800a45a:	1d23      	adds	r3, r4, #4
 800a45c:	1af2      	subs	r2, r6, r3
 800a45e:	d0ae      	beq.n	800a3be <_malloc_r+0x22>
 800a460:	1b9b      	subs	r3, r3, r6
 800a462:	50a3      	str	r3, [r4, r2]
 800a464:	e7ab      	b.n	800a3be <_malloc_r+0x22>
 800a466:	42a3      	cmp	r3, r4
 800a468:	6862      	ldr	r2, [r4, #4]
 800a46a:	d1dd      	bne.n	800a428 <_malloc_r+0x8c>
 800a46c:	f8c8 2000 	str.w	r2, [r8]
 800a470:	e7ec      	b.n	800a44c <_malloc_r+0xb0>
 800a472:	4623      	mov	r3, r4
 800a474:	6864      	ldr	r4, [r4, #4]
 800a476:	e7ac      	b.n	800a3d2 <_malloc_r+0x36>
 800a478:	4634      	mov	r4, r6
 800a47a:	6876      	ldr	r6, [r6, #4]
 800a47c:	e7b4      	b.n	800a3e8 <_malloc_r+0x4c>
 800a47e:	4613      	mov	r3, r2
 800a480:	e7cc      	b.n	800a41c <_malloc_r+0x80>
 800a482:	230c      	movs	r3, #12
 800a484:	603b      	str	r3, [r7, #0]
 800a486:	4638      	mov	r0, r7
 800a488:	f000 f80e 	bl	800a4a8 <__malloc_unlock>
 800a48c:	e797      	b.n	800a3be <_malloc_r+0x22>
 800a48e:	6025      	str	r5, [r4, #0]
 800a490:	e7dc      	b.n	800a44c <_malloc_r+0xb0>
 800a492:	605b      	str	r3, [r3, #4]
 800a494:	deff      	udf	#255	; 0xff
 800a496:	bf00      	nop
 800a498:	24001f94 	.word	0x24001f94

0800a49c <__malloc_lock>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__malloc_lock+0x8>)
 800a49e:	f000 bdf8 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	240020dc 	.word	0x240020dc

0800a4a8 <__malloc_unlock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	; (800a4b0 <__malloc_unlock+0x8>)
 800a4aa:	f000 bdf3 	b.w	800b094 <__retarget_lock_release_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	240020dc 	.word	0x240020dc

0800a4b4 <__cvt>:
 800a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b6:	ed2d 8b02 	vpush	{d8}
 800a4ba:	eeb0 8b40 	vmov.f64	d8, d0
 800a4be:	b085      	sub	sp, #20
 800a4c0:	4617      	mov	r7, r2
 800a4c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a4c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a4c6:	ee18 2a90 	vmov	r2, s17
 800a4ca:	f025 0520 	bic.w	r5, r5, #32
 800a4ce:	2a00      	cmp	r2, #0
 800a4d0:	bfb6      	itet	lt
 800a4d2:	222d      	movlt	r2, #45	; 0x2d
 800a4d4:	2200      	movge	r2, #0
 800a4d6:	eeb1 8b40 	vneglt.f64	d8, d0
 800a4da:	2d46      	cmp	r5, #70	; 0x46
 800a4dc:	460c      	mov	r4, r1
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	d004      	beq.n	800a4ec <__cvt+0x38>
 800a4e2:	2d45      	cmp	r5, #69	; 0x45
 800a4e4:	d100      	bne.n	800a4e8 <__cvt+0x34>
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	e000      	b.n	800a4ee <__cvt+0x3a>
 800a4ec:	2103      	movs	r1, #3
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	ab02      	add	r3, sp, #8
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	4633      	mov	r3, r6
 800a4fa:	eeb0 0b48 	vmov.f64	d0, d8
 800a4fe:	f000 fe53 	bl	800b1a8 <_dtoa_r>
 800a502:	2d47      	cmp	r5, #71	; 0x47
 800a504:	d101      	bne.n	800a50a <__cvt+0x56>
 800a506:	07fb      	lsls	r3, r7, #31
 800a508:	d51a      	bpl.n	800a540 <__cvt+0x8c>
 800a50a:	2d46      	cmp	r5, #70	; 0x46
 800a50c:	eb00 0204 	add.w	r2, r0, r4
 800a510:	d10c      	bne.n	800a52c <__cvt+0x78>
 800a512:	7803      	ldrb	r3, [r0, #0]
 800a514:	2b30      	cmp	r3, #48	; 0x30
 800a516:	d107      	bne.n	800a528 <__cvt+0x74>
 800a518:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a520:	bf1c      	itt	ne
 800a522:	f1c4 0401 	rsbne	r4, r4, #1
 800a526:	6034      	strne	r4, [r6, #0]
 800a528:	6833      	ldr	r3, [r6, #0]
 800a52a:	441a      	add	r2, r3
 800a52c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a534:	bf08      	it	eq
 800a536:	9203      	streq	r2, [sp, #12]
 800a538:	2130      	movs	r1, #48	; 0x30
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d307      	bcc.n	800a550 <__cvt+0x9c>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a544:	1a1b      	subs	r3, r3, r0
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	b005      	add	sp, #20
 800a54a:	ecbd 8b02 	vpop	{d8}
 800a54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a550:	1c5c      	adds	r4, r3, #1
 800a552:	9403      	str	r4, [sp, #12]
 800a554:	7019      	strb	r1, [r3, #0]
 800a556:	e7f0      	b.n	800a53a <__cvt+0x86>

0800a558 <__exponent>:
 800a558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a55a:	4603      	mov	r3, r0
 800a55c:	2900      	cmp	r1, #0
 800a55e:	bfb8      	it	lt
 800a560:	4249      	neglt	r1, r1
 800a562:	f803 2b02 	strb.w	r2, [r3], #2
 800a566:	bfb4      	ite	lt
 800a568:	222d      	movlt	r2, #45	; 0x2d
 800a56a:	222b      	movge	r2, #43	; 0x2b
 800a56c:	2909      	cmp	r1, #9
 800a56e:	7042      	strb	r2, [r0, #1]
 800a570:	dd2a      	ble.n	800a5c8 <__exponent+0x70>
 800a572:	f10d 0207 	add.w	r2, sp, #7
 800a576:	4617      	mov	r7, r2
 800a578:	260a      	movs	r6, #10
 800a57a:	4694      	mov	ip, r2
 800a57c:	fb91 f5f6 	sdiv	r5, r1, r6
 800a580:	fb06 1415 	mls	r4, r6, r5, r1
 800a584:	3430      	adds	r4, #48	; 0x30
 800a586:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a58a:	460c      	mov	r4, r1
 800a58c:	2c63      	cmp	r4, #99	; 0x63
 800a58e:	f102 32ff 	add.w	r2, r2, #4294967295
 800a592:	4629      	mov	r1, r5
 800a594:	dcf1      	bgt.n	800a57a <__exponent+0x22>
 800a596:	3130      	adds	r1, #48	; 0x30
 800a598:	f1ac 0402 	sub.w	r4, ip, #2
 800a59c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a5a0:	1c41      	adds	r1, r0, #1
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	42ba      	cmp	r2, r7
 800a5a6:	d30a      	bcc.n	800a5be <__exponent+0x66>
 800a5a8:	f10d 0209 	add.w	r2, sp, #9
 800a5ac:	eba2 020c 	sub.w	r2, r2, ip
 800a5b0:	42bc      	cmp	r4, r7
 800a5b2:	bf88      	it	hi
 800a5b4:	2200      	movhi	r2, #0
 800a5b6:	4413      	add	r3, r2
 800a5b8:	1a18      	subs	r0, r3, r0
 800a5ba:	b003      	add	sp, #12
 800a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5be:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a5c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a5c6:	e7ed      	b.n	800a5a4 <__exponent+0x4c>
 800a5c8:	2330      	movs	r3, #48	; 0x30
 800a5ca:	3130      	adds	r1, #48	; 0x30
 800a5cc:	7083      	strb	r3, [r0, #2]
 800a5ce:	70c1      	strb	r1, [r0, #3]
 800a5d0:	1d03      	adds	r3, r0, #4
 800a5d2:	e7f1      	b.n	800a5b8 <__exponent+0x60>
 800a5d4:	0000      	movs	r0, r0
	...

0800a5d8 <_printf_float>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	b08b      	sub	sp, #44	; 0x2c
 800a5de:	460c      	mov	r4, r1
 800a5e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a5e4:	4616      	mov	r6, r2
 800a5e6:	461f      	mov	r7, r3
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	f000 fccd 	bl	800af88 <_localeconv_r>
 800a5ee:	f8d0 b000 	ldr.w	fp, [r0]
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f7f5 fec4 	bl	8000380 <strlen>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9308      	str	r3, [sp, #32]
 800a5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a600:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a604:	6822      	ldr	r2, [r4, #0]
 800a606:	3307      	adds	r3, #7
 800a608:	f023 0307 	bic.w	r3, r3, #7
 800a60c:	f103 0108 	add.w	r1, r3, #8
 800a610:	f8c8 1000 	str.w	r1, [r8]
 800a614:	ed93 0b00 	vldr	d0, [r3]
 800a618:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a878 <_printf_float+0x2a0>
 800a61c:	eeb0 7bc0 	vabs.f64	d7, d0
 800a620:	eeb4 7b46 	vcmp.f64	d7, d6
 800a624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a628:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800a62c:	4682      	mov	sl, r0
 800a62e:	dd24      	ble.n	800a67a <_printf_float+0xa2>
 800a630:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a638:	d502      	bpl.n	800a640 <_printf_float+0x68>
 800a63a:	232d      	movs	r3, #45	; 0x2d
 800a63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a640:	498f      	ldr	r1, [pc, #572]	; (800a880 <_printf_float+0x2a8>)
 800a642:	4b90      	ldr	r3, [pc, #576]	; (800a884 <_printf_float+0x2ac>)
 800a644:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a648:	bf94      	ite	ls
 800a64a:	4688      	movls	r8, r1
 800a64c:	4698      	movhi	r8, r3
 800a64e:	2303      	movs	r3, #3
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	f022 0204 	bic.w	r2, r2, #4
 800a656:	2300      	movs	r3, #0
 800a658:	6022      	str	r2, [r4, #0]
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	9700      	str	r7, [sp, #0]
 800a65e:	4633      	mov	r3, r6
 800a660:	aa09      	add	r2, sp, #36	; 0x24
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f9d1 	bl	800aa0c <_printf_common>
 800a66a:	3001      	adds	r0, #1
 800a66c:	f040 808a 	bne.w	800a784 <_printf_float+0x1ac>
 800a670:	f04f 30ff 	mov.w	r0, #4294967295
 800a674:	b00b      	add	sp, #44	; 0x2c
 800a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a682:	d709      	bvc.n	800a698 <_printf_float+0xc0>
 800a684:	ee10 3a90 	vmov	r3, s1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfbc      	itt	lt
 800a68c:	232d      	movlt	r3, #45	; 0x2d
 800a68e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a692:	497d      	ldr	r1, [pc, #500]	; (800a888 <_printf_float+0x2b0>)
 800a694:	4b7d      	ldr	r3, [pc, #500]	; (800a88c <_printf_float+0x2b4>)
 800a696:	e7d5      	b.n	800a644 <_printf_float+0x6c>
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a69e:	9104      	str	r1, [sp, #16]
 800a6a0:	1c59      	adds	r1, r3, #1
 800a6a2:	d13c      	bne.n	800a71e <_printf_float+0x146>
 800a6a4:	2306      	movs	r3, #6
 800a6a6:	6063      	str	r3, [r4, #4]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9303      	str	r3, [sp, #12]
 800a6ac:	ab08      	add	r3, sp, #32
 800a6ae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a6b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a6b6:	ab07      	add	r3, sp, #28
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	6022      	str	r2, [r4, #0]
 800a6be:	f10d 031b 	add.w	r3, sp, #27
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7ff fef6 	bl	800a4b4 <__cvt>
 800a6c8:	9b04      	ldr	r3, [sp, #16]
 800a6ca:	9907      	ldr	r1, [sp, #28]
 800a6cc:	2b47      	cmp	r3, #71	; 0x47
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	d108      	bne.n	800a6e4 <_printf_float+0x10c>
 800a6d2:	1cc8      	adds	r0, r1, #3
 800a6d4:	db02      	blt.n	800a6dc <_printf_float+0x104>
 800a6d6:	6863      	ldr	r3, [r4, #4]
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	dd41      	ble.n	800a760 <_printf_float+0x188>
 800a6dc:	f1a9 0902 	sub.w	r9, r9, #2
 800a6e0:	fa5f f989 	uxtb.w	r9, r9
 800a6e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a6e8:	d820      	bhi.n	800a72c <_printf_float+0x154>
 800a6ea:	3901      	subs	r1, #1
 800a6ec:	464a      	mov	r2, r9
 800a6ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6f2:	9107      	str	r1, [sp, #28]
 800a6f4:	f7ff ff30 	bl	800a558 <__exponent>
 800a6f8:	9a08      	ldr	r2, [sp, #32]
 800a6fa:	9004      	str	r0, [sp, #16]
 800a6fc:	1813      	adds	r3, r2, r0
 800a6fe:	2a01      	cmp	r2, #1
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	dc02      	bgt.n	800a70a <_printf_float+0x132>
 800a704:	6822      	ldr	r2, [r4, #0]
 800a706:	07d2      	lsls	r2, r2, #31
 800a708:	d501      	bpl.n	800a70e <_printf_float+0x136>
 800a70a:	3301      	adds	r3, #1
 800a70c:	6123      	str	r3, [r4, #16]
 800a70e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0a2      	beq.n	800a65c <_printf_float+0x84>
 800a716:	232d      	movs	r3, #45	; 0x2d
 800a718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71c:	e79e      	b.n	800a65c <_printf_float+0x84>
 800a71e:	9904      	ldr	r1, [sp, #16]
 800a720:	2947      	cmp	r1, #71	; 0x47
 800a722:	d1c1      	bne.n	800a6a8 <_printf_float+0xd0>
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1bf      	bne.n	800a6a8 <_printf_float+0xd0>
 800a728:	2301      	movs	r3, #1
 800a72a:	e7bc      	b.n	800a6a6 <_printf_float+0xce>
 800a72c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a730:	d118      	bne.n	800a764 <_printf_float+0x18c>
 800a732:	2900      	cmp	r1, #0
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	dd0b      	ble.n	800a750 <_printf_float+0x178>
 800a738:	6121      	str	r1, [r4, #16]
 800a73a:	b913      	cbnz	r3, 800a742 <_printf_float+0x16a>
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	07d0      	lsls	r0, r2, #31
 800a740:	d502      	bpl.n	800a748 <_printf_float+0x170>
 800a742:	3301      	adds	r3, #1
 800a744:	440b      	add	r3, r1
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	2300      	movs	r3, #0
 800a74a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a74c:	9304      	str	r3, [sp, #16]
 800a74e:	e7de      	b.n	800a70e <_printf_float+0x136>
 800a750:	b913      	cbnz	r3, 800a758 <_printf_float+0x180>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	07d2      	lsls	r2, r2, #31
 800a756:	d501      	bpl.n	800a75c <_printf_float+0x184>
 800a758:	3302      	adds	r3, #2
 800a75a:	e7f4      	b.n	800a746 <_printf_float+0x16e>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e7f2      	b.n	800a746 <_printf_float+0x16e>
 800a760:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a764:	9b08      	ldr	r3, [sp, #32]
 800a766:	4299      	cmp	r1, r3
 800a768:	db05      	blt.n	800a776 <_printf_float+0x19e>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	6121      	str	r1, [r4, #16]
 800a76e:	07d8      	lsls	r0, r3, #31
 800a770:	d5ea      	bpl.n	800a748 <_printf_float+0x170>
 800a772:	1c4b      	adds	r3, r1, #1
 800a774:	e7e7      	b.n	800a746 <_printf_float+0x16e>
 800a776:	2900      	cmp	r1, #0
 800a778:	bfd4      	ite	le
 800a77a:	f1c1 0202 	rsble	r2, r1, #2
 800a77e:	2201      	movgt	r2, #1
 800a780:	4413      	add	r3, r2
 800a782:	e7e0      	b.n	800a746 <_printf_float+0x16e>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	055a      	lsls	r2, r3, #21
 800a788:	d407      	bmi.n	800a79a <_printf_float+0x1c2>
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	4642      	mov	r2, r8
 800a78e:	4631      	mov	r1, r6
 800a790:	4628      	mov	r0, r5
 800a792:	47b8      	blx	r7
 800a794:	3001      	adds	r0, #1
 800a796:	d12a      	bne.n	800a7ee <_printf_float+0x216>
 800a798:	e76a      	b.n	800a670 <_printf_float+0x98>
 800a79a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a79e:	f240 80e0 	bls.w	800a962 <_printf_float+0x38a>
 800a7a2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a7a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ae:	d133      	bne.n	800a818 <_printf_float+0x240>
 800a7b0:	4a37      	ldr	r2, [pc, #220]	; (800a890 <_printf_float+0x2b8>)
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b8      	blx	r7
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	f43f af58 	beq.w	800a670 <_printf_float+0x98>
 800a7c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	db02      	blt.n	800a7ce <_printf_float+0x1f6>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	07d8      	lsls	r0, r3, #31
 800a7cc:	d50f      	bpl.n	800a7ee <_printf_float+0x216>
 800a7ce:	4653      	mov	r3, sl
 800a7d0:	465a      	mov	r2, fp
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	47b8      	blx	r7
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f43f af49 	beq.w	800a670 <_printf_float+0x98>
 800a7de:	f04f 0800 	mov.w	r8, #0
 800a7e2:	f104 091a 	add.w	r9, r4, #26
 800a7e6:	9b08      	ldr	r3, [sp, #32]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	4543      	cmp	r3, r8
 800a7ec:	dc09      	bgt.n	800a802 <_printf_float+0x22a>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	079b      	lsls	r3, r3, #30
 800a7f2:	f100 8106 	bmi.w	800aa02 <_printf_float+0x42a>
 800a7f6:	68e0      	ldr	r0, [r4, #12]
 800a7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fa:	4298      	cmp	r0, r3
 800a7fc:	bfb8      	it	lt
 800a7fe:	4618      	movlt	r0, r3
 800a800:	e738      	b.n	800a674 <_printf_float+0x9c>
 800a802:	2301      	movs	r3, #1
 800a804:	464a      	mov	r2, r9
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f af2f 	beq.w	800a670 <_printf_float+0x98>
 800a812:	f108 0801 	add.w	r8, r8, #1
 800a816:	e7e6      	b.n	800a7e6 <_printf_float+0x20e>
 800a818:	9b07      	ldr	r3, [sp, #28]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dc3a      	bgt.n	800a894 <_printf_float+0x2bc>
 800a81e:	4a1c      	ldr	r2, [pc, #112]	; (800a890 <_printf_float+0x2b8>)
 800a820:	2301      	movs	r3, #1
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	f43f af21 	beq.w	800a670 <_printf_float+0x98>
 800a82e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a832:	4313      	orrs	r3, r2
 800a834:	d102      	bne.n	800a83c <_printf_float+0x264>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	07d9      	lsls	r1, r3, #31
 800a83a:	d5d8      	bpl.n	800a7ee <_printf_float+0x216>
 800a83c:	4653      	mov	r3, sl
 800a83e:	465a      	mov	r2, fp
 800a840:	4631      	mov	r1, r6
 800a842:	4628      	mov	r0, r5
 800a844:	47b8      	blx	r7
 800a846:	3001      	adds	r0, #1
 800a848:	f43f af12 	beq.w	800a670 <_printf_float+0x98>
 800a84c:	f04f 0900 	mov.w	r9, #0
 800a850:	f104 0a1a 	add.w	sl, r4, #26
 800a854:	9b07      	ldr	r3, [sp, #28]
 800a856:	425b      	negs	r3, r3
 800a858:	454b      	cmp	r3, r9
 800a85a:	dc01      	bgt.n	800a860 <_printf_float+0x288>
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	e795      	b.n	800a78c <_printf_float+0x1b4>
 800a860:	2301      	movs	r3, #1
 800a862:	4652      	mov	r2, sl
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af00 	beq.w	800a670 <_printf_float+0x98>
 800a870:	f109 0901 	add.w	r9, r9, #1
 800a874:	e7ee      	b.n	800a854 <_printf_float+0x27c>
 800a876:	bf00      	nop
 800a878:	ffffffff 	.word	0xffffffff
 800a87c:	7fefffff 	.word	0x7fefffff
 800a880:	0800da28 	.word	0x0800da28
 800a884:	0800da2c 	.word	0x0800da2c
 800a888:	0800da30 	.word	0x0800da30
 800a88c:	0800da34 	.word	0x0800da34
 800a890:	0800da38 	.word	0x0800da38
 800a894:	9a08      	ldr	r2, [sp, #32]
 800a896:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a898:	429a      	cmp	r2, r3
 800a89a:	bfa8      	it	ge
 800a89c:	461a      	movge	r2, r3
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	4691      	mov	r9, r2
 800a8a2:	dc38      	bgt.n	800a916 <_printf_float+0x33e>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9305      	str	r3, [sp, #20]
 800a8a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ac:	f104 021a 	add.w	r2, r4, #26
 800a8b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8b2:	9905      	ldr	r1, [sp, #20]
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ba:	428b      	cmp	r3, r1
 800a8bc:	dc33      	bgt.n	800a926 <_printf_float+0x34e>
 800a8be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	db3c      	blt.n	800a940 <_printf_float+0x368>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	07da      	lsls	r2, r3, #31
 800a8ca:	d439      	bmi.n	800a940 <_printf_float+0x368>
 800a8cc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a8d0:	eba2 0903 	sub.w	r9, r2, r3
 800a8d4:	9b04      	ldr	r3, [sp, #16]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	4591      	cmp	r9, r2
 800a8da:	bfa8      	it	ge
 800a8dc:	4691      	movge	r9, r2
 800a8de:	f1b9 0f00 	cmp.w	r9, #0
 800a8e2:	dc35      	bgt.n	800a950 <_printf_float+0x378>
 800a8e4:	f04f 0800 	mov.w	r8, #0
 800a8e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ec:	f104 0a1a 	add.w	sl, r4, #26
 800a8f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8f4:	1a9b      	subs	r3, r3, r2
 800a8f6:	eba3 0309 	sub.w	r3, r3, r9
 800a8fa:	4543      	cmp	r3, r8
 800a8fc:	f77f af77 	ble.w	800a7ee <_printf_float+0x216>
 800a900:	2301      	movs	r3, #1
 800a902:	4652      	mov	r2, sl
 800a904:	4631      	mov	r1, r6
 800a906:	4628      	mov	r0, r5
 800a908:	47b8      	blx	r7
 800a90a:	3001      	adds	r0, #1
 800a90c:	f43f aeb0 	beq.w	800a670 <_printf_float+0x98>
 800a910:	f108 0801 	add.w	r8, r8, #1
 800a914:	e7ec      	b.n	800a8f0 <_printf_float+0x318>
 800a916:	4613      	mov	r3, r2
 800a918:	4631      	mov	r1, r6
 800a91a:	4642      	mov	r2, r8
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b8      	blx	r7
 800a920:	3001      	adds	r0, #1
 800a922:	d1bf      	bne.n	800a8a4 <_printf_float+0x2cc>
 800a924:	e6a4      	b.n	800a670 <_printf_float+0x98>
 800a926:	2301      	movs	r3, #1
 800a928:	4631      	mov	r1, r6
 800a92a:	4628      	mov	r0, r5
 800a92c:	9204      	str	r2, [sp, #16]
 800a92e:	47b8      	blx	r7
 800a930:	3001      	adds	r0, #1
 800a932:	f43f ae9d 	beq.w	800a670 <_printf_float+0x98>
 800a936:	9b05      	ldr	r3, [sp, #20]
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	3301      	adds	r3, #1
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	e7b7      	b.n	800a8b0 <_printf_float+0x2d8>
 800a940:	4653      	mov	r3, sl
 800a942:	465a      	mov	r2, fp
 800a944:	4631      	mov	r1, r6
 800a946:	4628      	mov	r0, r5
 800a948:	47b8      	blx	r7
 800a94a:	3001      	adds	r0, #1
 800a94c:	d1be      	bne.n	800a8cc <_printf_float+0x2f4>
 800a94e:	e68f      	b.n	800a670 <_printf_float+0x98>
 800a950:	9a04      	ldr	r2, [sp, #16]
 800a952:	464b      	mov	r3, r9
 800a954:	4442      	add	r2, r8
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	d1c1      	bne.n	800a8e4 <_printf_float+0x30c>
 800a960:	e686      	b.n	800a670 <_printf_float+0x98>
 800a962:	9a08      	ldr	r2, [sp, #32]
 800a964:	2a01      	cmp	r2, #1
 800a966:	dc01      	bgt.n	800a96c <_printf_float+0x394>
 800a968:	07db      	lsls	r3, r3, #31
 800a96a:	d537      	bpl.n	800a9dc <_printf_float+0x404>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4642      	mov	r2, r8
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f ae7a 	beq.w	800a670 <_printf_float+0x98>
 800a97c:	4653      	mov	r3, sl
 800a97e:	465a      	mov	r2, fp
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	47b8      	blx	r7
 800a986:	3001      	adds	r0, #1
 800a988:	f43f ae72 	beq.w	800a670 <_printf_float+0x98>
 800a98c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a990:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a998:	9b08      	ldr	r3, [sp, #32]
 800a99a:	d01a      	beq.n	800a9d2 <_printf_float+0x3fa>
 800a99c:	3b01      	subs	r3, #1
 800a99e:	f108 0201 	add.w	r2, r8, #1
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d10e      	bne.n	800a9ca <_printf_float+0x3f2>
 800a9ac:	e660      	b.n	800a670 <_printf_float+0x98>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	464a      	mov	r2, r9
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	f43f ae59 	beq.w	800a670 <_printf_float+0x98>
 800a9be:	f108 0801 	add.w	r8, r8, #1
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	4543      	cmp	r3, r8
 800a9c8:	dcf1      	bgt.n	800a9ae <_printf_float+0x3d6>
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9d0:	e6dd      	b.n	800a78e <_printf_float+0x1b6>
 800a9d2:	f04f 0800 	mov.w	r8, #0
 800a9d6:	f104 091a 	add.w	r9, r4, #26
 800a9da:	e7f2      	b.n	800a9c2 <_printf_float+0x3ea>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4642      	mov	r2, r8
 800a9e0:	e7df      	b.n	800a9a2 <_printf_float+0x3ca>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	464a      	mov	r2, r9
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	47b8      	blx	r7
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	f43f ae3f 	beq.w	800a670 <_printf_float+0x98>
 800a9f2:	f108 0801 	add.w	r8, r8, #1
 800a9f6:	68e3      	ldr	r3, [r4, #12]
 800a9f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9fa:	1a5b      	subs	r3, r3, r1
 800a9fc:	4543      	cmp	r3, r8
 800a9fe:	dcf0      	bgt.n	800a9e2 <_printf_float+0x40a>
 800aa00:	e6f9      	b.n	800a7f6 <_printf_float+0x21e>
 800aa02:	f04f 0800 	mov.w	r8, #0
 800aa06:	f104 0919 	add.w	r9, r4, #25
 800aa0a:	e7f4      	b.n	800a9f6 <_printf_float+0x41e>

0800aa0c <_printf_common>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	4616      	mov	r6, r2
 800aa12:	4699      	mov	r9, r3
 800aa14:	688a      	ldr	r2, [r1, #8]
 800aa16:	690b      	ldr	r3, [r1, #16]
 800aa18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	bfb8      	it	lt
 800aa20:	4613      	movlt	r3, r2
 800aa22:	6033      	str	r3, [r6, #0]
 800aa24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa28:	4607      	mov	r7, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	b10a      	cbz	r2, 800aa32 <_printf_common+0x26>
 800aa2e:	3301      	adds	r3, #1
 800aa30:	6033      	str	r3, [r6, #0]
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	0699      	lsls	r1, r3, #26
 800aa36:	bf42      	ittt	mi
 800aa38:	6833      	ldrmi	r3, [r6, #0]
 800aa3a:	3302      	addmi	r3, #2
 800aa3c:	6033      	strmi	r3, [r6, #0]
 800aa3e:	6825      	ldr	r5, [r4, #0]
 800aa40:	f015 0506 	ands.w	r5, r5, #6
 800aa44:	d106      	bne.n	800aa54 <_printf_common+0x48>
 800aa46:	f104 0a19 	add.w	sl, r4, #25
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	6832      	ldr	r2, [r6, #0]
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	42ab      	cmp	r3, r5
 800aa52:	dc26      	bgt.n	800aaa2 <_printf_common+0x96>
 800aa54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa58:	1e13      	subs	r3, r2, #0
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	bf18      	it	ne
 800aa5e:	2301      	movne	r3, #1
 800aa60:	0692      	lsls	r2, r2, #26
 800aa62:	d42b      	bmi.n	800aabc <_printf_common+0xb0>
 800aa64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa68:	4649      	mov	r1, r9
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	47c0      	blx	r8
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d01e      	beq.n	800aab0 <_printf_common+0xa4>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	6922      	ldr	r2, [r4, #16]
 800aa76:	f003 0306 	and.w	r3, r3, #6
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	bf02      	ittt	eq
 800aa7e:	68e5      	ldreq	r5, [r4, #12]
 800aa80:	6833      	ldreq	r3, [r6, #0]
 800aa82:	1aed      	subeq	r5, r5, r3
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	bf0c      	ite	eq
 800aa88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa8c:	2500      	movne	r5, #0
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	bfc4      	itt	gt
 800aa92:	1a9b      	subgt	r3, r3, r2
 800aa94:	18ed      	addgt	r5, r5, r3
 800aa96:	2600      	movs	r6, #0
 800aa98:	341a      	adds	r4, #26
 800aa9a:	42b5      	cmp	r5, r6
 800aa9c:	d11a      	bne.n	800aad4 <_printf_common+0xc8>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e008      	b.n	800aab4 <_printf_common+0xa8>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4652      	mov	r2, sl
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	47c0      	blx	r8
 800aaac:	3001      	adds	r0, #1
 800aaae:	d103      	bne.n	800aab8 <_printf_common+0xac>
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab8:	3501      	adds	r5, #1
 800aaba:	e7c6      	b.n	800aa4a <_printf_common+0x3e>
 800aabc:	18e1      	adds	r1, r4, r3
 800aabe:	1c5a      	adds	r2, r3, #1
 800aac0:	2030      	movs	r0, #48	; 0x30
 800aac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aac6:	4422      	add	r2, r4
 800aac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aacc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aad0:	3302      	adds	r3, #2
 800aad2:	e7c7      	b.n	800aa64 <_printf_common+0x58>
 800aad4:	2301      	movs	r3, #1
 800aad6:	4622      	mov	r2, r4
 800aad8:	4649      	mov	r1, r9
 800aada:	4638      	mov	r0, r7
 800aadc:	47c0      	blx	r8
 800aade:	3001      	adds	r0, #1
 800aae0:	d0e6      	beq.n	800aab0 <_printf_common+0xa4>
 800aae2:	3601      	adds	r6, #1
 800aae4:	e7d9      	b.n	800aa9a <_printf_common+0x8e>
	...

0800aae8 <_printf_i>:
 800aae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	7e0f      	ldrb	r7, [r1, #24]
 800aaee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aaf0:	2f78      	cmp	r7, #120	; 0x78
 800aaf2:	4691      	mov	r9, r2
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	469a      	mov	sl, r3
 800aafa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aafe:	d807      	bhi.n	800ab10 <_printf_i+0x28>
 800ab00:	2f62      	cmp	r7, #98	; 0x62
 800ab02:	d80a      	bhi.n	800ab1a <_printf_i+0x32>
 800ab04:	2f00      	cmp	r7, #0
 800ab06:	f000 80d4 	beq.w	800acb2 <_printf_i+0x1ca>
 800ab0a:	2f58      	cmp	r7, #88	; 0x58
 800ab0c:	f000 80c0 	beq.w	800ac90 <_printf_i+0x1a8>
 800ab10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab18:	e03a      	b.n	800ab90 <_printf_i+0xa8>
 800ab1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab1e:	2b15      	cmp	r3, #21
 800ab20:	d8f6      	bhi.n	800ab10 <_printf_i+0x28>
 800ab22:	a101      	add	r1, pc, #4	; (adr r1, 800ab28 <_printf_i+0x40>)
 800ab24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab28:	0800ab81 	.word	0x0800ab81
 800ab2c:	0800ab95 	.word	0x0800ab95
 800ab30:	0800ab11 	.word	0x0800ab11
 800ab34:	0800ab11 	.word	0x0800ab11
 800ab38:	0800ab11 	.word	0x0800ab11
 800ab3c:	0800ab11 	.word	0x0800ab11
 800ab40:	0800ab95 	.word	0x0800ab95
 800ab44:	0800ab11 	.word	0x0800ab11
 800ab48:	0800ab11 	.word	0x0800ab11
 800ab4c:	0800ab11 	.word	0x0800ab11
 800ab50:	0800ab11 	.word	0x0800ab11
 800ab54:	0800ac99 	.word	0x0800ac99
 800ab58:	0800abc1 	.word	0x0800abc1
 800ab5c:	0800ac53 	.word	0x0800ac53
 800ab60:	0800ab11 	.word	0x0800ab11
 800ab64:	0800ab11 	.word	0x0800ab11
 800ab68:	0800acbb 	.word	0x0800acbb
 800ab6c:	0800ab11 	.word	0x0800ab11
 800ab70:	0800abc1 	.word	0x0800abc1
 800ab74:	0800ab11 	.word	0x0800ab11
 800ab78:	0800ab11 	.word	0x0800ab11
 800ab7c:	0800ac5b 	.word	0x0800ac5b
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	1d1a      	adds	r2, r3, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	602a      	str	r2, [r5, #0]
 800ab88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab90:	2301      	movs	r3, #1
 800ab92:	e09f      	b.n	800acd4 <_printf_i+0x1ec>
 800ab94:	6820      	ldr	r0, [r4, #0]
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	0607      	lsls	r7, r0, #24
 800ab9a:	f103 0104 	add.w	r1, r3, #4
 800ab9e:	6029      	str	r1, [r5, #0]
 800aba0:	d501      	bpl.n	800aba6 <_printf_i+0xbe>
 800aba2:	681e      	ldr	r6, [r3, #0]
 800aba4:	e003      	b.n	800abae <_printf_i+0xc6>
 800aba6:	0646      	lsls	r6, r0, #25
 800aba8:	d5fb      	bpl.n	800aba2 <_printf_i+0xba>
 800abaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abae:	2e00      	cmp	r6, #0
 800abb0:	da03      	bge.n	800abba <_printf_i+0xd2>
 800abb2:	232d      	movs	r3, #45	; 0x2d
 800abb4:	4276      	negs	r6, r6
 800abb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abba:	485a      	ldr	r0, [pc, #360]	; (800ad24 <_printf_i+0x23c>)
 800abbc:	230a      	movs	r3, #10
 800abbe:	e012      	b.n	800abe6 <_printf_i+0xfe>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	6820      	ldr	r0, [r4, #0]
 800abc4:	1d19      	adds	r1, r3, #4
 800abc6:	6029      	str	r1, [r5, #0]
 800abc8:	0605      	lsls	r5, r0, #24
 800abca:	d501      	bpl.n	800abd0 <_printf_i+0xe8>
 800abcc:	681e      	ldr	r6, [r3, #0]
 800abce:	e002      	b.n	800abd6 <_printf_i+0xee>
 800abd0:	0641      	lsls	r1, r0, #25
 800abd2:	d5fb      	bpl.n	800abcc <_printf_i+0xe4>
 800abd4:	881e      	ldrh	r6, [r3, #0]
 800abd6:	4853      	ldr	r0, [pc, #332]	; (800ad24 <_printf_i+0x23c>)
 800abd8:	2f6f      	cmp	r7, #111	; 0x6f
 800abda:	bf0c      	ite	eq
 800abdc:	2308      	moveq	r3, #8
 800abde:	230a      	movne	r3, #10
 800abe0:	2100      	movs	r1, #0
 800abe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abe6:	6865      	ldr	r5, [r4, #4]
 800abe8:	60a5      	str	r5, [r4, #8]
 800abea:	2d00      	cmp	r5, #0
 800abec:	bfa2      	ittt	ge
 800abee:	6821      	ldrge	r1, [r4, #0]
 800abf0:	f021 0104 	bicge.w	r1, r1, #4
 800abf4:	6021      	strge	r1, [r4, #0]
 800abf6:	b90e      	cbnz	r6, 800abfc <_printf_i+0x114>
 800abf8:	2d00      	cmp	r5, #0
 800abfa:	d04b      	beq.n	800ac94 <_printf_i+0x1ac>
 800abfc:	4615      	mov	r5, r2
 800abfe:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac02:	fb03 6711 	mls	r7, r3, r1, r6
 800ac06:	5dc7      	ldrb	r7, [r0, r7]
 800ac08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac0c:	4637      	mov	r7, r6
 800ac0e:	42bb      	cmp	r3, r7
 800ac10:	460e      	mov	r6, r1
 800ac12:	d9f4      	bls.n	800abfe <_printf_i+0x116>
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d10b      	bne.n	800ac30 <_printf_i+0x148>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	07de      	lsls	r6, r3, #31
 800ac1c:	d508      	bpl.n	800ac30 <_printf_i+0x148>
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6861      	ldr	r1, [r4, #4]
 800ac22:	4299      	cmp	r1, r3
 800ac24:	bfde      	ittt	le
 800ac26:	2330      	movle	r3, #48	; 0x30
 800ac28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac30:	1b52      	subs	r2, r2, r5
 800ac32:	6122      	str	r2, [r4, #16]
 800ac34:	f8cd a000 	str.w	sl, [sp]
 800ac38:	464b      	mov	r3, r9
 800ac3a:	aa03      	add	r2, sp, #12
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4640      	mov	r0, r8
 800ac40:	f7ff fee4 	bl	800aa0c <_printf_common>
 800ac44:	3001      	adds	r0, #1
 800ac46:	d14a      	bne.n	800acde <_printf_i+0x1f6>
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	b004      	add	sp, #16
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	f043 0320 	orr.w	r3, r3, #32
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	4833      	ldr	r0, [pc, #204]	; (800ad28 <_printf_i+0x240>)
 800ac5c:	2778      	movs	r7, #120	; 0x78
 800ac5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	6829      	ldr	r1, [r5, #0]
 800ac66:	061f      	lsls	r7, r3, #24
 800ac68:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac6c:	d402      	bmi.n	800ac74 <_printf_i+0x18c>
 800ac6e:	065f      	lsls	r7, r3, #25
 800ac70:	bf48      	it	mi
 800ac72:	b2b6      	uxthmi	r6, r6
 800ac74:	07df      	lsls	r7, r3, #31
 800ac76:	bf48      	it	mi
 800ac78:	f043 0320 	orrmi.w	r3, r3, #32
 800ac7c:	6029      	str	r1, [r5, #0]
 800ac7e:	bf48      	it	mi
 800ac80:	6023      	strmi	r3, [r4, #0]
 800ac82:	b91e      	cbnz	r6, 800ac8c <_printf_i+0x1a4>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	f023 0320 	bic.w	r3, r3, #32
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	e7a7      	b.n	800abe0 <_printf_i+0xf8>
 800ac90:	4824      	ldr	r0, [pc, #144]	; (800ad24 <_printf_i+0x23c>)
 800ac92:	e7e4      	b.n	800ac5e <_printf_i+0x176>
 800ac94:	4615      	mov	r5, r2
 800ac96:	e7bd      	b.n	800ac14 <_printf_i+0x12c>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	6826      	ldr	r6, [r4, #0]
 800ac9c:	6961      	ldr	r1, [r4, #20]
 800ac9e:	1d18      	adds	r0, r3, #4
 800aca0:	6028      	str	r0, [r5, #0]
 800aca2:	0635      	lsls	r5, r6, #24
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	d501      	bpl.n	800acac <_printf_i+0x1c4>
 800aca8:	6019      	str	r1, [r3, #0]
 800acaa:	e002      	b.n	800acb2 <_printf_i+0x1ca>
 800acac:	0670      	lsls	r0, r6, #25
 800acae:	d5fb      	bpl.n	800aca8 <_printf_i+0x1c0>
 800acb0:	8019      	strh	r1, [r3, #0]
 800acb2:	2300      	movs	r3, #0
 800acb4:	6123      	str	r3, [r4, #16]
 800acb6:	4615      	mov	r5, r2
 800acb8:	e7bc      	b.n	800ac34 <_printf_i+0x14c>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	1d1a      	adds	r2, r3, #4
 800acbe:	602a      	str	r2, [r5, #0]
 800acc0:	681d      	ldr	r5, [r3, #0]
 800acc2:	6862      	ldr	r2, [r4, #4]
 800acc4:	2100      	movs	r1, #0
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7f5 fb0a 	bl	80002e0 <memchr>
 800accc:	b108      	cbz	r0, 800acd2 <_printf_i+0x1ea>
 800acce:	1b40      	subs	r0, r0, r5
 800acd0:	6060      	str	r0, [r4, #4]
 800acd2:	6863      	ldr	r3, [r4, #4]
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	2300      	movs	r3, #0
 800acd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acdc:	e7aa      	b.n	800ac34 <_printf_i+0x14c>
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	462a      	mov	r2, r5
 800ace2:	4649      	mov	r1, r9
 800ace4:	4640      	mov	r0, r8
 800ace6:	47d0      	blx	sl
 800ace8:	3001      	adds	r0, #1
 800acea:	d0ad      	beq.n	800ac48 <_printf_i+0x160>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	079b      	lsls	r3, r3, #30
 800acf0:	d413      	bmi.n	800ad1a <_printf_i+0x232>
 800acf2:	68e0      	ldr	r0, [r4, #12]
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	4298      	cmp	r0, r3
 800acf8:	bfb8      	it	lt
 800acfa:	4618      	movlt	r0, r3
 800acfc:	e7a6      	b.n	800ac4c <_printf_i+0x164>
 800acfe:	2301      	movs	r3, #1
 800ad00:	4632      	mov	r2, r6
 800ad02:	4649      	mov	r1, r9
 800ad04:	4640      	mov	r0, r8
 800ad06:	47d0      	blx	sl
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d09d      	beq.n	800ac48 <_printf_i+0x160>
 800ad0c:	3501      	adds	r5, #1
 800ad0e:	68e3      	ldr	r3, [r4, #12]
 800ad10:	9903      	ldr	r1, [sp, #12]
 800ad12:	1a5b      	subs	r3, r3, r1
 800ad14:	42ab      	cmp	r3, r5
 800ad16:	dcf2      	bgt.n	800acfe <_printf_i+0x216>
 800ad18:	e7eb      	b.n	800acf2 <_printf_i+0x20a>
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	f104 0619 	add.w	r6, r4, #25
 800ad20:	e7f5      	b.n	800ad0e <_printf_i+0x226>
 800ad22:	bf00      	nop
 800ad24:	0800da3a 	.word	0x0800da3a
 800ad28:	0800da4b 	.word	0x0800da4b

0800ad2c <std>:
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	e9c0 3300 	strd	r3, r3, [r0]
 800ad36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad3a:	6083      	str	r3, [r0, #8]
 800ad3c:	8181      	strh	r1, [r0, #12]
 800ad3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad40:	81c2      	strh	r2, [r0, #14]
 800ad42:	6183      	str	r3, [r0, #24]
 800ad44:	4619      	mov	r1, r3
 800ad46:	2208      	movs	r2, #8
 800ad48:	305c      	adds	r0, #92	; 0x5c
 800ad4a:	f000 f914 	bl	800af76 <memset>
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	; (800ad84 <std+0x58>)
 800ad50:	6263      	str	r3, [r4, #36]	; 0x24
 800ad52:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <std+0x5c>)
 800ad54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad56:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <std+0x60>)
 800ad58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad5a:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <std+0x64>)
 800ad5c:	6323      	str	r3, [r4, #48]	; 0x30
 800ad5e:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <std+0x68>)
 800ad60:	6224      	str	r4, [r4, #32]
 800ad62:	429c      	cmp	r4, r3
 800ad64:	d006      	beq.n	800ad74 <std+0x48>
 800ad66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ad6a:	4294      	cmp	r4, r2
 800ad6c:	d002      	beq.n	800ad74 <std+0x48>
 800ad6e:	33d0      	adds	r3, #208	; 0xd0
 800ad70:	429c      	cmp	r4, r3
 800ad72:	d105      	bne.n	800ad80 <std+0x54>
 800ad74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7c:	f000 b988 	b.w	800b090 <__retarget_lock_init_recursive>
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	bf00      	nop
 800ad84:	0800aef1 	.word	0x0800aef1
 800ad88:	0800af13 	.word	0x0800af13
 800ad8c:	0800af4b 	.word	0x0800af4b
 800ad90:	0800af6f 	.word	0x0800af6f
 800ad94:	24001f9c 	.word	0x24001f9c

0800ad98 <stdio_exit_handler>:
 800ad98:	4a02      	ldr	r2, [pc, #8]	; (800ada4 <stdio_exit_handler+0xc>)
 800ad9a:	4903      	ldr	r1, [pc, #12]	; (800ada8 <stdio_exit_handler+0x10>)
 800ad9c:	4803      	ldr	r0, [pc, #12]	; (800adac <stdio_exit_handler+0x14>)
 800ad9e:	f000 b869 	b.w	800ae74 <_fwalk_sglue>
 800ada2:	bf00      	nop
 800ada4:	24000104 	.word	0x24000104
 800ada8:	0800c7cd 	.word	0x0800c7cd
 800adac:	24000110 	.word	0x24000110

0800adb0 <cleanup_stdio>:
 800adb0:	6841      	ldr	r1, [r0, #4]
 800adb2:	4b0c      	ldr	r3, [pc, #48]	; (800ade4 <cleanup_stdio+0x34>)
 800adb4:	4299      	cmp	r1, r3
 800adb6:	b510      	push	{r4, lr}
 800adb8:	4604      	mov	r4, r0
 800adba:	d001      	beq.n	800adc0 <cleanup_stdio+0x10>
 800adbc:	f001 fd06 	bl	800c7cc <_fflush_r>
 800adc0:	68a1      	ldr	r1, [r4, #8]
 800adc2:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <cleanup_stdio+0x38>)
 800adc4:	4299      	cmp	r1, r3
 800adc6:	d002      	beq.n	800adce <cleanup_stdio+0x1e>
 800adc8:	4620      	mov	r0, r4
 800adca:	f001 fcff 	bl	800c7cc <_fflush_r>
 800adce:	68e1      	ldr	r1, [r4, #12]
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <cleanup_stdio+0x3c>)
 800add2:	4299      	cmp	r1, r3
 800add4:	d004      	beq.n	800ade0 <cleanup_stdio+0x30>
 800add6:	4620      	mov	r0, r4
 800add8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800addc:	f001 bcf6 	b.w	800c7cc <_fflush_r>
 800ade0:	bd10      	pop	{r4, pc}
 800ade2:	bf00      	nop
 800ade4:	24001f9c 	.word	0x24001f9c
 800ade8:	24002004 	.word	0x24002004
 800adec:	2400206c 	.word	0x2400206c

0800adf0 <global_stdio_init.part.0>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <global_stdio_init.part.0+0x30>)
 800adf4:	4c0b      	ldr	r4, [pc, #44]	; (800ae24 <global_stdio_init.part.0+0x34>)
 800adf6:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <global_stdio_init.part.0+0x38>)
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	4620      	mov	r0, r4
 800adfc:	2200      	movs	r2, #0
 800adfe:	2104      	movs	r1, #4
 800ae00:	f7ff ff94 	bl	800ad2c <std>
 800ae04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ae08:	2201      	movs	r2, #1
 800ae0a:	2109      	movs	r1, #9
 800ae0c:	f7ff ff8e 	bl	800ad2c <std>
 800ae10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ae14:	2202      	movs	r2, #2
 800ae16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae1a:	2112      	movs	r1, #18
 800ae1c:	f7ff bf86 	b.w	800ad2c <std>
 800ae20:	240020d4 	.word	0x240020d4
 800ae24:	24001f9c 	.word	0x24001f9c
 800ae28:	0800ad99 	.word	0x0800ad99

0800ae2c <__sfp_lock_acquire>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	; (800ae34 <__sfp_lock_acquire+0x8>)
 800ae2e:	f000 b930 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800ae32:	bf00      	nop
 800ae34:	240020dd 	.word	0x240020dd

0800ae38 <__sfp_lock_release>:
 800ae38:	4801      	ldr	r0, [pc, #4]	; (800ae40 <__sfp_lock_release+0x8>)
 800ae3a:	f000 b92b 	b.w	800b094 <__retarget_lock_release_recursive>
 800ae3e:	bf00      	nop
 800ae40:	240020dd 	.word	0x240020dd

0800ae44 <__sinit>:
 800ae44:	b510      	push	{r4, lr}
 800ae46:	4604      	mov	r4, r0
 800ae48:	f7ff fff0 	bl	800ae2c <__sfp_lock_acquire>
 800ae4c:	6a23      	ldr	r3, [r4, #32]
 800ae4e:	b11b      	cbz	r3, 800ae58 <__sinit+0x14>
 800ae50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae54:	f7ff bff0 	b.w	800ae38 <__sfp_lock_release>
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__sinit+0x28>)
 800ae5a:	6223      	str	r3, [r4, #32]
 800ae5c:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <__sinit+0x2c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1f5      	bne.n	800ae50 <__sinit+0xc>
 800ae64:	f7ff ffc4 	bl	800adf0 <global_stdio_init.part.0>
 800ae68:	e7f2      	b.n	800ae50 <__sinit+0xc>
 800ae6a:	bf00      	nop
 800ae6c:	0800adb1 	.word	0x0800adb1
 800ae70:	240020d4 	.word	0x240020d4

0800ae74 <_fwalk_sglue>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	4607      	mov	r7, r0
 800ae7a:	4688      	mov	r8, r1
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	2600      	movs	r6, #0
 800ae80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae84:	f1b9 0901 	subs.w	r9, r9, #1
 800ae88:	d505      	bpl.n	800ae96 <_fwalk_sglue+0x22>
 800ae8a:	6824      	ldr	r4, [r4, #0]
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	d1f7      	bne.n	800ae80 <_fwalk_sglue+0xc>
 800ae90:	4630      	mov	r0, r6
 800ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae96:	89ab      	ldrh	r3, [r5, #12]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d907      	bls.n	800aeac <_fwalk_sglue+0x38>
 800ae9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aea0:	3301      	adds	r3, #1
 800aea2:	d003      	beq.n	800aeac <_fwalk_sglue+0x38>
 800aea4:	4629      	mov	r1, r5
 800aea6:	4638      	mov	r0, r7
 800aea8:	47c0      	blx	r8
 800aeaa:	4306      	orrs	r6, r0
 800aeac:	3568      	adds	r5, #104	; 0x68
 800aeae:	e7e9      	b.n	800ae84 <_fwalk_sglue+0x10>

0800aeb0 <siprintf>:
 800aeb0:	b40e      	push	{r1, r2, r3}
 800aeb2:	b500      	push	{lr}
 800aeb4:	b09c      	sub	sp, #112	; 0x70
 800aeb6:	ab1d      	add	r3, sp, #116	; 0x74
 800aeb8:	9002      	str	r0, [sp, #8]
 800aeba:	9006      	str	r0, [sp, #24]
 800aebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aec0:	4809      	ldr	r0, [pc, #36]	; (800aee8 <siprintf+0x38>)
 800aec2:	9107      	str	r1, [sp, #28]
 800aec4:	9104      	str	r1, [sp, #16]
 800aec6:	4909      	ldr	r1, [pc, #36]	; (800aeec <siprintf+0x3c>)
 800aec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aecc:	9105      	str	r1, [sp, #20]
 800aece:	6800      	ldr	r0, [r0, #0]
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	a902      	add	r1, sp, #8
 800aed4:	f001 faf6 	bl	800c4c4 <_svfiprintf_r>
 800aed8:	9b02      	ldr	r3, [sp, #8]
 800aeda:	2200      	movs	r2, #0
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	b01c      	add	sp, #112	; 0x70
 800aee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aee4:	b003      	add	sp, #12
 800aee6:	4770      	bx	lr
 800aee8:	2400015c 	.word	0x2400015c
 800aeec:	ffff0208 	.word	0xffff0208

0800aef0 <__sread>:
 800aef0:	b510      	push	{r4, lr}
 800aef2:	460c      	mov	r4, r1
 800aef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef8:	f000 f86c 	bl	800afd4 <_read_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	bfab      	itete	ge
 800af00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af02:	89a3      	ldrhlt	r3, [r4, #12]
 800af04:	181b      	addge	r3, r3, r0
 800af06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af0a:	bfac      	ite	ge
 800af0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af0e:	81a3      	strhlt	r3, [r4, #12]
 800af10:	bd10      	pop	{r4, pc}

0800af12 <__swrite>:
 800af12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af16:	461f      	mov	r7, r3
 800af18:	898b      	ldrh	r3, [r1, #12]
 800af1a:	05db      	lsls	r3, r3, #23
 800af1c:	4605      	mov	r5, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	4616      	mov	r6, r2
 800af22:	d505      	bpl.n	800af30 <__swrite+0x1e>
 800af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af28:	2302      	movs	r3, #2
 800af2a:	2200      	movs	r2, #0
 800af2c:	f000 f840 	bl	800afb0 <_lseek_r>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	4632      	mov	r2, r6
 800af3e:	463b      	mov	r3, r7
 800af40:	4628      	mov	r0, r5
 800af42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af46:	f000 b867 	b.w	800b018 <_write_r>

0800af4a <__sseek>:
 800af4a:	b510      	push	{r4, lr}
 800af4c:	460c      	mov	r4, r1
 800af4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af52:	f000 f82d 	bl	800afb0 <_lseek_r>
 800af56:	1c43      	adds	r3, r0, #1
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	bf15      	itete	ne
 800af5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800af5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af66:	81a3      	strheq	r3, [r4, #12]
 800af68:	bf18      	it	ne
 800af6a:	81a3      	strhne	r3, [r4, #12]
 800af6c:	bd10      	pop	{r4, pc}

0800af6e <__sclose>:
 800af6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af72:	f000 b80d 	b.w	800af90 <_close_r>

0800af76 <memset>:
 800af76:	4402      	add	r2, r0
 800af78:	4603      	mov	r3, r0
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d100      	bne.n	800af80 <memset+0xa>
 800af7e:	4770      	bx	lr
 800af80:	f803 1b01 	strb.w	r1, [r3], #1
 800af84:	e7f9      	b.n	800af7a <memset+0x4>
	...

0800af88 <_localeconv_r>:
 800af88:	4800      	ldr	r0, [pc, #0]	; (800af8c <_localeconv_r+0x4>)
 800af8a:	4770      	bx	lr
 800af8c:	24000250 	.word	0x24000250

0800af90 <_close_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	; (800afac <_close_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f5 fd91 	bl	8000ac2 <_close>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_close_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_close_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	240020d8 	.word	0x240020d8

0800afb0 <_lseek_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	; (800afd0 <_lseek_r+0x20>)
 800afb4:	4604      	mov	r4, r0
 800afb6:	4608      	mov	r0, r1
 800afb8:	4611      	mov	r1, r2
 800afba:	2200      	movs	r2, #0
 800afbc:	602a      	str	r2, [r5, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	f7f5 fda6 	bl	8000b10 <_lseek>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_lseek_r+0x1e>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_lseek_r+0x1e>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	240020d8 	.word	0x240020d8

0800afd4 <_read_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d07      	ldr	r5, [pc, #28]	; (800aff4 <_read_r+0x20>)
 800afd8:	4604      	mov	r4, r0
 800afda:	4608      	mov	r0, r1
 800afdc:	4611      	mov	r1, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	602a      	str	r2, [r5, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f7f5 fd34 	bl	8000a50 <_read>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_read_r+0x1e>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_read_r+0x1e>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	240020d8 	.word	0x240020d8

0800aff8 <_sbrk_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d06      	ldr	r5, [pc, #24]	; (800b014 <_sbrk_r+0x1c>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	f7f5 fd92 	bl	8000b2c <_sbrk>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_sbrk_r+0x1a>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_sbrk_r+0x1a>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	240020d8 	.word	0x240020d8

0800b018 <_write_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d07      	ldr	r5, [pc, #28]	; (800b038 <_write_r+0x20>)
 800b01c:	4604      	mov	r4, r0
 800b01e:	4608      	mov	r0, r1
 800b020:	4611      	mov	r1, r2
 800b022:	2200      	movs	r2, #0
 800b024:	602a      	str	r2, [r5, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	f7f5 fd2f 	bl	8000a8a <_write>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_write_r+0x1e>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_write_r+0x1e>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	240020d8 	.word	0x240020d8

0800b03c <__errno>:
 800b03c:	4b01      	ldr	r3, [pc, #4]	; (800b044 <__errno+0x8>)
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	2400015c 	.word	0x2400015c

0800b048 <__libc_init_array>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	4d0d      	ldr	r5, [pc, #52]	; (800b080 <__libc_init_array+0x38>)
 800b04c:	4c0d      	ldr	r4, [pc, #52]	; (800b084 <__libc_init_array+0x3c>)
 800b04e:	1b64      	subs	r4, r4, r5
 800b050:	10a4      	asrs	r4, r4, #2
 800b052:	2600      	movs	r6, #0
 800b054:	42a6      	cmp	r6, r4
 800b056:	d109      	bne.n	800b06c <__libc_init_array+0x24>
 800b058:	4d0b      	ldr	r5, [pc, #44]	; (800b088 <__libc_init_array+0x40>)
 800b05a:	4c0c      	ldr	r4, [pc, #48]	; (800b08c <__libc_init_array+0x44>)
 800b05c:	f002 f87e 	bl	800d15c <_init>
 800b060:	1b64      	subs	r4, r4, r5
 800b062:	10a4      	asrs	r4, r4, #2
 800b064:	2600      	movs	r6, #0
 800b066:	42a6      	cmp	r6, r4
 800b068:	d105      	bne.n	800b076 <__libc_init_array+0x2e>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b070:	4798      	blx	r3
 800b072:	3601      	adds	r6, #1
 800b074:	e7ee      	b.n	800b054 <__libc_init_array+0xc>
 800b076:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07a:	4798      	blx	r3
 800b07c:	3601      	adds	r6, #1
 800b07e:	e7f2      	b.n	800b066 <__libc_init_array+0x1e>
 800b080:	0800ddb0 	.word	0x0800ddb0
 800b084:	0800ddb0 	.word	0x0800ddb0
 800b088:	0800ddb0 	.word	0x0800ddb0
 800b08c:	0800ddb4 	.word	0x0800ddb4

0800b090 <__retarget_lock_init_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_acquire_recursive>:
 800b092:	4770      	bx	lr

0800b094 <__retarget_lock_release_recursive>:
 800b094:	4770      	bx	lr

0800b096 <quorem>:
 800b096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	6903      	ldr	r3, [r0, #16]
 800b09c:	690c      	ldr	r4, [r1, #16]
 800b09e:	42a3      	cmp	r3, r4
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	db7e      	blt.n	800b1a2 <quorem+0x10c>
 800b0a4:	3c01      	subs	r4, #1
 800b0a6:	f101 0814 	add.w	r8, r1, #20
 800b0aa:	f100 0514 	add.w	r5, r0, #20
 800b0ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0cc:	d331      	bcc.n	800b132 <quorem+0x9c>
 800b0ce:	f04f 0e00 	mov.w	lr, #0
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	46ac      	mov	ip, r5
 800b0d6:	46f2      	mov	sl, lr
 800b0d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0dc:	b293      	uxth	r3, r2
 800b0de:	fb06 e303 	mla	r3, r6, r3, lr
 800b0e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0e6:	0c1a      	lsrs	r2, r3, #16
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	ebaa 0303 	sub.w	r3, sl, r3
 800b0ee:	f8dc a000 	ldr.w	sl, [ip]
 800b0f2:	fa13 f38a 	uxtah	r3, r3, sl
 800b0f6:	fb06 220e 	mla	r2, r6, lr, r2
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b102:	b292      	uxth	r2, r2
 800b104:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b10c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b110:	4581      	cmp	r9, r0
 800b112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b116:	f84c 3b04 	str.w	r3, [ip], #4
 800b11a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b11e:	d2db      	bcs.n	800b0d8 <quorem+0x42>
 800b120:	f855 300b 	ldr.w	r3, [r5, fp]
 800b124:	b92b      	cbnz	r3, 800b132 <quorem+0x9c>
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	3b04      	subs	r3, #4
 800b12a:	429d      	cmp	r5, r3
 800b12c:	461a      	mov	r2, r3
 800b12e:	d32c      	bcc.n	800b18a <quorem+0xf4>
 800b130:	613c      	str	r4, [r7, #16]
 800b132:	4638      	mov	r0, r7
 800b134:	f001 f86c 	bl	800c210 <__mcmp>
 800b138:	2800      	cmp	r0, #0
 800b13a:	db22      	blt.n	800b182 <quorem+0xec>
 800b13c:	3601      	adds	r6, #1
 800b13e:	4629      	mov	r1, r5
 800b140:	2000      	movs	r0, #0
 800b142:	f858 2b04 	ldr.w	r2, [r8], #4
 800b146:	f8d1 c000 	ldr.w	ip, [r1]
 800b14a:	b293      	uxth	r3, r2
 800b14c:	1ac3      	subs	r3, r0, r3
 800b14e:	0c12      	lsrs	r2, r2, #16
 800b150:	fa13 f38c 	uxtah	r3, r3, ip
 800b154:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b162:	45c1      	cmp	r9, r8
 800b164:	f841 3b04 	str.w	r3, [r1], #4
 800b168:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b16c:	d2e9      	bcs.n	800b142 <quorem+0xac>
 800b16e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b176:	b922      	cbnz	r2, 800b182 <quorem+0xec>
 800b178:	3b04      	subs	r3, #4
 800b17a:	429d      	cmp	r5, r3
 800b17c:	461a      	mov	r2, r3
 800b17e:	d30a      	bcc.n	800b196 <quorem+0x100>
 800b180:	613c      	str	r4, [r7, #16]
 800b182:	4630      	mov	r0, r6
 800b184:	b003      	add	sp, #12
 800b186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18a:	6812      	ldr	r2, [r2, #0]
 800b18c:	3b04      	subs	r3, #4
 800b18e:	2a00      	cmp	r2, #0
 800b190:	d1ce      	bne.n	800b130 <quorem+0x9a>
 800b192:	3c01      	subs	r4, #1
 800b194:	e7c9      	b.n	800b12a <quorem+0x94>
 800b196:	6812      	ldr	r2, [r2, #0]
 800b198:	3b04      	subs	r3, #4
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	d1f0      	bne.n	800b180 <quorem+0xea>
 800b19e:	3c01      	subs	r4, #1
 800b1a0:	e7eb      	b.n	800b17a <quorem+0xe4>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e7ee      	b.n	800b184 <quorem+0xee>
	...

0800b1a8 <_dtoa_r>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	ed2d 8b02 	vpush	{d8}
 800b1b0:	69c5      	ldr	r5, [r0, #28]
 800b1b2:	b091      	sub	sp, #68	; 0x44
 800b1b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1b8:	ec59 8b10 	vmov	r8, r9, d0
 800b1bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b1be:	9106      	str	r1, [sp, #24]
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	9208      	str	r2, [sp, #32]
 800b1c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c6:	b975      	cbnz	r5, 800b1e6 <_dtoa_r+0x3e>
 800b1c8:	2010      	movs	r0, #16
 800b1ca:	f7ff f8bf 	bl	800a34c <malloc>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	61f0      	str	r0, [r6, #28]
 800b1d2:	b920      	cbnz	r0, 800b1de <_dtoa_r+0x36>
 800b1d4:	4ba6      	ldr	r3, [pc, #664]	; (800b470 <_dtoa_r+0x2c8>)
 800b1d6:	21ef      	movs	r1, #239	; 0xef
 800b1d8:	48a6      	ldr	r0, [pc, #664]	; (800b474 <_dtoa_r+0x2cc>)
 800b1da:	f001 fb47 	bl	800c86c <__assert_func>
 800b1de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1e2:	6005      	str	r5, [r0, #0]
 800b1e4:	60c5      	str	r5, [r0, #12]
 800b1e6:	69f3      	ldr	r3, [r6, #28]
 800b1e8:	6819      	ldr	r1, [r3, #0]
 800b1ea:	b151      	cbz	r1, 800b202 <_dtoa_r+0x5a>
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	604a      	str	r2, [r1, #4]
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	4093      	lsls	r3, r2
 800b1f4:	608b      	str	r3, [r1, #8]
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 fdce 	bl	800bd98 <_Bfree>
 800b1fc:	69f3      	ldr	r3, [r6, #28]
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f1b9 0300 	subs.w	r3, r9, #0
 800b206:	bfbb      	ittet	lt
 800b208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b20c:	9303      	strlt	r3, [sp, #12]
 800b20e:	2300      	movge	r3, #0
 800b210:	2201      	movlt	r2, #1
 800b212:	bfac      	ite	ge
 800b214:	6023      	strge	r3, [r4, #0]
 800b216:	6022      	strlt	r2, [r4, #0]
 800b218:	4b97      	ldr	r3, [pc, #604]	; (800b478 <_dtoa_r+0x2d0>)
 800b21a:	9c03      	ldr	r4, [sp, #12]
 800b21c:	43a3      	bics	r3, r4
 800b21e:	d11c      	bne.n	800b25a <_dtoa_r+0xb2>
 800b220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b222:	f242 730f 	movw	r3, #9999	; 0x270f
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b22c:	ea53 0308 	orrs.w	r3, r3, r8
 800b230:	f000 84fb 	beq.w	800bc2a <_dtoa_r+0xa82>
 800b234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b236:	b963      	cbnz	r3, 800b252 <_dtoa_r+0xaa>
 800b238:	4b90      	ldr	r3, [pc, #576]	; (800b47c <_dtoa_r+0x2d4>)
 800b23a:	e020      	b.n	800b27e <_dtoa_r+0xd6>
 800b23c:	4b90      	ldr	r3, [pc, #576]	; (800b480 <_dtoa_r+0x2d8>)
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	3308      	adds	r3, #8
 800b242:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	9801      	ldr	r0, [sp, #4]
 800b248:	b011      	add	sp, #68	; 0x44
 800b24a:	ecbd 8b02 	vpop	{d8}
 800b24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b252:	4b8a      	ldr	r3, [pc, #552]	; (800b47c <_dtoa_r+0x2d4>)
 800b254:	9301      	str	r3, [sp, #4]
 800b256:	3303      	adds	r3, #3
 800b258:	e7f3      	b.n	800b242 <_dtoa_r+0x9a>
 800b25a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b25e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b266:	d10c      	bne.n	800b282 <_dtoa_r+0xda>
 800b268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b26a:	2301      	movs	r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 84d7 	beq.w	800bc24 <_dtoa_r+0xa7c>
 800b276:	4b83      	ldr	r3, [pc, #524]	; (800b484 <_dtoa_r+0x2dc>)
 800b278:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	e7e1      	b.n	800b246 <_dtoa_r+0x9e>
 800b282:	aa0e      	add	r2, sp, #56	; 0x38
 800b284:	a90f      	add	r1, sp, #60	; 0x3c
 800b286:	4630      	mov	r0, r6
 800b288:	eeb0 0b48 	vmov.f64	d0, d8
 800b28c:	f001 f866 	bl	800c35c <__d2b>
 800b290:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b296:	4605      	mov	r5, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d046      	beq.n	800b32a <_dtoa_r+0x182>
 800b29c:	eeb0 7b48 	vmov.f64	d7, d8
 800b2a0:	ee18 1a90 	vmov	r1, s17
 800b2a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b2a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b2ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b2b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	ee07 1a90 	vmov	s15, r1
 800b2ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b2be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b458 <_dtoa_r+0x2b0>
 800b2c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b2c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b460 <_dtoa_r+0x2b8>
 800b2ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b2ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b468 <_dtoa_r+0x2c0>
 800b2d2:	ee07 3a90 	vmov	s15, r3
 800b2d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b2da:	eeb0 7b46 	vmov.f64	d7, d6
 800b2de:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b2e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b2e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ee:	ee16 ba90 	vmov	fp, s13
 800b2f2:	9009      	str	r0, [sp, #36]	; 0x24
 800b2f4:	d508      	bpl.n	800b308 <_dtoa_r+0x160>
 800b2f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b2fa:	eeb4 6b47 	vcmp.f64	d6, d7
 800b2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b302:	bf18      	it	ne
 800b304:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b308:	f1bb 0f16 	cmp.w	fp, #22
 800b30c:	d82b      	bhi.n	800b366 <_dtoa_r+0x1be>
 800b30e:	495e      	ldr	r1, [pc, #376]	; (800b488 <_dtoa_r+0x2e0>)
 800b310:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b314:	ed91 7b00 	vldr	d7, [r1]
 800b318:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b320:	d501      	bpl.n	800b326 <_dtoa_r+0x17e>
 800b322:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b326:	2100      	movs	r1, #0
 800b328:	e01e      	b.n	800b368 <_dtoa_r+0x1c0>
 800b32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b32c:	4413      	add	r3, r2
 800b32e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b332:	2920      	cmp	r1, #32
 800b334:	bfc1      	itttt	gt
 800b336:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b33a:	408c      	lslgt	r4, r1
 800b33c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b340:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b344:	bfd6      	itet	le
 800b346:	f1c1 0120 	rsble	r1, r1, #32
 800b34a:	4321      	orrgt	r1, r4
 800b34c:	fa08 f101 	lslle.w	r1, r8, r1
 800b350:	ee07 1a90 	vmov	s15, r1
 800b354:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b358:	3b01      	subs	r3, #1
 800b35a:	ee17 1a90 	vmov	r1, s15
 800b35e:	2001      	movs	r0, #1
 800b360:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b364:	e7a7      	b.n	800b2b6 <_dtoa_r+0x10e>
 800b366:	2101      	movs	r1, #1
 800b368:	1ad2      	subs	r2, r2, r3
 800b36a:	1e53      	subs	r3, r2, #1
 800b36c:	9305      	str	r3, [sp, #20]
 800b36e:	bf45      	ittet	mi
 800b370:	f1c2 0301 	rsbmi	r3, r2, #1
 800b374:	9304      	strmi	r3, [sp, #16]
 800b376:	2300      	movpl	r3, #0
 800b378:	2300      	movmi	r3, #0
 800b37a:	bf4c      	ite	mi
 800b37c:	9305      	strmi	r3, [sp, #20]
 800b37e:	9304      	strpl	r3, [sp, #16]
 800b380:	f1bb 0f00 	cmp.w	fp, #0
 800b384:	910b      	str	r1, [sp, #44]	; 0x2c
 800b386:	db18      	blt.n	800b3ba <_dtoa_r+0x212>
 800b388:	9b05      	ldr	r3, [sp, #20]
 800b38a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b38e:	445b      	add	r3, fp
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	2300      	movs	r3, #0
 800b394:	9a06      	ldr	r2, [sp, #24]
 800b396:	2a09      	cmp	r2, #9
 800b398:	d848      	bhi.n	800b42c <_dtoa_r+0x284>
 800b39a:	2a05      	cmp	r2, #5
 800b39c:	bfc4      	itt	gt
 800b39e:	3a04      	subgt	r2, #4
 800b3a0:	9206      	strgt	r2, [sp, #24]
 800b3a2:	9a06      	ldr	r2, [sp, #24]
 800b3a4:	f1a2 0202 	sub.w	r2, r2, #2
 800b3a8:	bfcc      	ite	gt
 800b3aa:	2400      	movgt	r4, #0
 800b3ac:	2401      	movle	r4, #1
 800b3ae:	2a03      	cmp	r2, #3
 800b3b0:	d847      	bhi.n	800b442 <_dtoa_r+0x29a>
 800b3b2:	e8df f002 	tbb	[pc, r2]
 800b3b6:	2d0b      	.short	0x2d0b
 800b3b8:	392b      	.short	0x392b
 800b3ba:	9b04      	ldr	r3, [sp, #16]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	eba3 030b 	sub.w	r3, r3, fp
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3c6:	f1cb 0300 	rsb	r3, fp, #0
 800b3ca:	e7e3      	b.n	800b394 <_dtoa_r+0x1ec>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	9207      	str	r2, [sp, #28]
 800b3d0:	9a08      	ldr	r2, [sp, #32]
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	dc38      	bgt.n	800b448 <_dtoa_r+0x2a0>
 800b3d6:	f04f 0a01 	mov.w	sl, #1
 800b3da:	46d1      	mov	r9, sl
 800b3dc:	4652      	mov	r2, sl
 800b3de:	f8cd a020 	str.w	sl, [sp, #32]
 800b3e2:	69f7      	ldr	r7, [r6, #28]
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	2004      	movs	r0, #4
 800b3e8:	f100 0c14 	add.w	ip, r0, #20
 800b3ec:	4594      	cmp	ip, r2
 800b3ee:	d930      	bls.n	800b452 <_dtoa_r+0x2aa>
 800b3f0:	6079      	str	r1, [r7, #4]
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800b3f6:	f000 fc8f 	bl	800bd18 <_Balloc>
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	9001      	str	r0, [sp, #4]
 800b3fe:	4602      	mov	r2, r0
 800b400:	2800      	cmp	r0, #0
 800b402:	d145      	bne.n	800b490 <_dtoa_r+0x2e8>
 800b404:	4b21      	ldr	r3, [pc, #132]	; (800b48c <_dtoa_r+0x2e4>)
 800b406:	f240 11af 	movw	r1, #431	; 0x1af
 800b40a:	e6e5      	b.n	800b1d8 <_dtoa_r+0x30>
 800b40c:	2201      	movs	r2, #1
 800b40e:	e7de      	b.n	800b3ce <_dtoa_r+0x226>
 800b410:	2200      	movs	r2, #0
 800b412:	9207      	str	r2, [sp, #28]
 800b414:	9a08      	ldr	r2, [sp, #32]
 800b416:	eb0b 0a02 	add.w	sl, fp, r2
 800b41a:	f10a 0901 	add.w	r9, sl, #1
 800b41e:	464a      	mov	r2, r9
 800b420:	2a01      	cmp	r2, #1
 800b422:	bfb8      	it	lt
 800b424:	2201      	movlt	r2, #1
 800b426:	e7dc      	b.n	800b3e2 <_dtoa_r+0x23a>
 800b428:	2201      	movs	r2, #1
 800b42a:	e7f2      	b.n	800b412 <_dtoa_r+0x26a>
 800b42c:	2401      	movs	r4, #1
 800b42e:	2200      	movs	r2, #0
 800b430:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b434:	f04f 3aff 	mov.w	sl, #4294967295
 800b438:	2100      	movs	r1, #0
 800b43a:	46d1      	mov	r9, sl
 800b43c:	2212      	movs	r2, #18
 800b43e:	9108      	str	r1, [sp, #32]
 800b440:	e7cf      	b.n	800b3e2 <_dtoa_r+0x23a>
 800b442:	2201      	movs	r2, #1
 800b444:	9207      	str	r2, [sp, #28]
 800b446:	e7f5      	b.n	800b434 <_dtoa_r+0x28c>
 800b448:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b44c:	46d1      	mov	r9, sl
 800b44e:	4652      	mov	r2, sl
 800b450:	e7c7      	b.n	800b3e2 <_dtoa_r+0x23a>
 800b452:	3101      	adds	r1, #1
 800b454:	0040      	lsls	r0, r0, #1
 800b456:	e7c7      	b.n	800b3e8 <_dtoa_r+0x240>
 800b458:	636f4361 	.word	0x636f4361
 800b45c:	3fd287a7 	.word	0x3fd287a7
 800b460:	8b60c8b3 	.word	0x8b60c8b3
 800b464:	3fc68a28 	.word	0x3fc68a28
 800b468:	509f79fb 	.word	0x509f79fb
 800b46c:	3fd34413 	.word	0x3fd34413
 800b470:	0800da69 	.word	0x0800da69
 800b474:	0800da80 	.word	0x0800da80
 800b478:	7ff00000 	.word	0x7ff00000
 800b47c:	0800da65 	.word	0x0800da65
 800b480:	0800da5c 	.word	0x0800da5c
 800b484:	0800da39 	.word	0x0800da39
 800b488:	0800db70 	.word	0x0800db70
 800b48c:	0800dad8 	.word	0x0800dad8
 800b490:	69f2      	ldr	r2, [r6, #28]
 800b492:	9901      	ldr	r1, [sp, #4]
 800b494:	6011      	str	r1, [r2, #0]
 800b496:	f1b9 0f0e 	cmp.w	r9, #14
 800b49a:	d86c      	bhi.n	800b576 <_dtoa_r+0x3ce>
 800b49c:	2c00      	cmp	r4, #0
 800b49e:	d06a      	beq.n	800b576 <_dtoa_r+0x3ce>
 800b4a0:	f1bb 0f00 	cmp.w	fp, #0
 800b4a4:	f340 80a0 	ble.w	800b5e8 <_dtoa_r+0x440>
 800b4a8:	4ac1      	ldr	r2, [pc, #772]	; (800b7b0 <_dtoa_r+0x608>)
 800b4aa:	f00b 010f 	and.w	r1, fp, #15
 800b4ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b4b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b4b6:	ed92 7b00 	vldr	d7, [r2]
 800b4ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b4be:	f000 8087 	beq.w	800b5d0 <_dtoa_r+0x428>
 800b4c2:	49bc      	ldr	r1, [pc, #752]	; (800b7b4 <_dtoa_r+0x60c>)
 800b4c4:	ed91 6b08 	vldr	d6, [r1, #32]
 800b4c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b4cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b4d0:	f002 020f 	and.w	r2, r2, #15
 800b4d4:	2103      	movs	r1, #3
 800b4d6:	48b7      	ldr	r0, [pc, #732]	; (800b7b4 <_dtoa_r+0x60c>)
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	d17b      	bne.n	800b5d4 <_dtoa_r+0x42c>
 800b4dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b4e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b4e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4ee:	2a00      	cmp	r2, #0
 800b4f0:	f000 80a0 	beq.w	800b634 <_dtoa_r+0x48c>
 800b4f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b4f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b500:	f140 8098 	bpl.w	800b634 <_dtoa_r+0x48c>
 800b504:	f1b9 0f00 	cmp.w	r9, #0
 800b508:	f000 8094 	beq.w	800b634 <_dtoa_r+0x48c>
 800b50c:	f1ba 0f00 	cmp.w	sl, #0
 800b510:	dd2f      	ble.n	800b572 <_dtoa_r+0x3ca>
 800b512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b51a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b51e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b522:	3101      	adds	r1, #1
 800b524:	4654      	mov	r4, sl
 800b526:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b52a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b52e:	ee07 1a90 	vmov	s15, r1
 800b532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b536:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b53a:	ee15 7a90 	vmov	r7, s11
 800b53e:	ec51 0b15 	vmov	r0, r1, d5
 800b542:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b546:	2c00      	cmp	r4, #0
 800b548:	d177      	bne.n	800b63a <_dtoa_r+0x492>
 800b54a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b54e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b552:	ec41 0b17 	vmov	d7, r0, r1
 800b556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55e:	f300 826a 	bgt.w	800ba36 <_dtoa_r+0x88e>
 800b562:	eeb1 7b47 	vneg.f64	d7, d7
 800b566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b56e:	f100 8260 	bmi.w	800ba32 <_dtoa_r+0x88a>
 800b572:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b578:	2a00      	cmp	r2, #0
 800b57a:	f2c0 811d 	blt.w	800b7b8 <_dtoa_r+0x610>
 800b57e:	f1bb 0f0e 	cmp.w	fp, #14
 800b582:	f300 8119 	bgt.w	800b7b8 <_dtoa_r+0x610>
 800b586:	4b8a      	ldr	r3, [pc, #552]	; (800b7b0 <_dtoa_r+0x608>)
 800b588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b58c:	ed93 6b00 	vldr	d6, [r3]
 800b590:	9b08      	ldr	r3, [sp, #32]
 800b592:	2b00      	cmp	r3, #0
 800b594:	f280 80b7 	bge.w	800b706 <_dtoa_r+0x55e>
 800b598:	f1b9 0f00 	cmp.w	r9, #0
 800b59c:	f300 80b3 	bgt.w	800b706 <_dtoa_r+0x55e>
 800b5a0:	f040 8246 	bne.w	800ba30 <_dtoa_r+0x888>
 800b5a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b5a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b5ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b8:	464c      	mov	r4, r9
 800b5ba:	464f      	mov	r7, r9
 800b5bc:	f280 821c 	bge.w	800b9f8 <_dtoa_r+0x850>
 800b5c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b5c4:	2331      	movs	r3, #49	; 0x31
 800b5c6:	f808 3b01 	strb.w	r3, [r8], #1
 800b5ca:	f10b 0b01 	add.w	fp, fp, #1
 800b5ce:	e218      	b.n	800ba02 <_dtoa_r+0x85a>
 800b5d0:	2102      	movs	r1, #2
 800b5d2:	e780      	b.n	800b4d6 <_dtoa_r+0x32e>
 800b5d4:	07d4      	lsls	r4, r2, #31
 800b5d6:	d504      	bpl.n	800b5e2 <_dtoa_r+0x43a>
 800b5d8:	ed90 6b00 	vldr	d6, [r0]
 800b5dc:	3101      	adds	r1, #1
 800b5de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5e2:	1052      	asrs	r2, r2, #1
 800b5e4:	3008      	adds	r0, #8
 800b5e6:	e777      	b.n	800b4d8 <_dtoa_r+0x330>
 800b5e8:	d022      	beq.n	800b630 <_dtoa_r+0x488>
 800b5ea:	f1cb 0200 	rsb	r2, fp, #0
 800b5ee:	4970      	ldr	r1, [pc, #448]	; (800b7b0 <_dtoa_r+0x608>)
 800b5f0:	f002 000f 	and.w	r0, r2, #15
 800b5f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b5f8:	ed91 7b00 	vldr	d7, [r1]
 800b5fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b600:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b604:	486b      	ldr	r0, [pc, #428]	; (800b7b4 <_dtoa_r+0x60c>)
 800b606:	1112      	asrs	r2, r2, #4
 800b608:	2400      	movs	r4, #0
 800b60a:	2102      	movs	r1, #2
 800b60c:	b92a      	cbnz	r2, 800b61a <_dtoa_r+0x472>
 800b60e:	2c00      	cmp	r4, #0
 800b610:	f43f af6a 	beq.w	800b4e8 <_dtoa_r+0x340>
 800b614:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b618:	e766      	b.n	800b4e8 <_dtoa_r+0x340>
 800b61a:	07d7      	lsls	r7, r2, #31
 800b61c:	d505      	bpl.n	800b62a <_dtoa_r+0x482>
 800b61e:	ed90 6b00 	vldr	d6, [r0]
 800b622:	3101      	adds	r1, #1
 800b624:	2401      	movs	r4, #1
 800b626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b62a:	1052      	asrs	r2, r2, #1
 800b62c:	3008      	adds	r0, #8
 800b62e:	e7ed      	b.n	800b60c <_dtoa_r+0x464>
 800b630:	2102      	movs	r1, #2
 800b632:	e759      	b.n	800b4e8 <_dtoa_r+0x340>
 800b634:	465a      	mov	r2, fp
 800b636:	464c      	mov	r4, r9
 800b638:	e775      	b.n	800b526 <_dtoa_r+0x37e>
 800b63a:	ec41 0b17 	vmov	d7, r0, r1
 800b63e:	495c      	ldr	r1, [pc, #368]	; (800b7b0 <_dtoa_r+0x608>)
 800b640:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b644:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b648:	9901      	ldr	r1, [sp, #4]
 800b64a:	440c      	add	r4, r1
 800b64c:	9907      	ldr	r1, [sp, #28]
 800b64e:	b351      	cbz	r1, 800b6a6 <_dtoa_r+0x4fe>
 800b650:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b654:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b65c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b664:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b668:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b66c:	ee14 1a90 	vmov	r1, s9
 800b670:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b674:	3130      	adds	r1, #48	; 0x30
 800b676:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b67a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b682:	f808 1b01 	strb.w	r1, [r8], #1
 800b686:	d439      	bmi.n	800b6fc <_dtoa_r+0x554>
 800b688:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b68c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	d472      	bmi.n	800b77c <_dtoa_r+0x5d4>
 800b696:	45a0      	cmp	r8, r4
 800b698:	f43f af6b 	beq.w	800b572 <_dtoa_r+0x3ca>
 800b69c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b6a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b6a4:	e7e0      	b.n	800b668 <_dtoa_r+0x4c0>
 800b6a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b6aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b6b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b6b8:	ee14 1a90 	vmov	r1, s9
 800b6bc:	3130      	adds	r1, #48	; 0x30
 800b6be:	f808 1b01 	strb.w	r1, [r8], #1
 800b6c2:	45a0      	cmp	r8, r4
 800b6c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b6c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b6cc:	d118      	bne.n	800b700 <_dtoa_r+0x558>
 800b6ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b6d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b6d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6de:	dc4d      	bgt.n	800b77c <_dtoa_r+0x5d4>
 800b6e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b6e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ec:	f57f af41 	bpl.w	800b572 <_dtoa_r+0x3ca>
 800b6f0:	4680      	mov	r8, r0
 800b6f2:	3801      	subs	r0, #1
 800b6f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b6f8:	2b30      	cmp	r3, #48	; 0x30
 800b6fa:	d0f9      	beq.n	800b6f0 <_dtoa_r+0x548>
 800b6fc:	4693      	mov	fp, r2
 800b6fe:	e02a      	b.n	800b756 <_dtoa_r+0x5ae>
 800b700:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b704:	e7d6      	b.n	800b6b4 <_dtoa_r+0x50c>
 800b706:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b70a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b70e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b712:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b716:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b71a:	ee15 3a10 	vmov	r3, s10
 800b71e:	3330      	adds	r3, #48	; 0x30
 800b720:	f808 3b01 	strb.w	r3, [r8], #1
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	eba8 0303 	sub.w	r3, r8, r3
 800b72a:	4599      	cmp	r9, r3
 800b72c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b730:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b734:	d133      	bne.n	800b79e <_dtoa_r+0x5f6>
 800b736:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b73a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b742:	dc1a      	bgt.n	800b77a <_dtoa_r+0x5d2>
 800b744:	eeb4 7b46 	vcmp.f64	d7, d6
 800b748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74c:	d103      	bne.n	800b756 <_dtoa_r+0x5ae>
 800b74e:	ee15 3a10 	vmov	r3, s10
 800b752:	07d9      	lsls	r1, r3, #31
 800b754:	d411      	bmi.n	800b77a <_dtoa_r+0x5d2>
 800b756:	4629      	mov	r1, r5
 800b758:	4630      	mov	r0, r6
 800b75a:	f000 fb1d 	bl	800bd98 <_Bfree>
 800b75e:	2300      	movs	r3, #0
 800b760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b762:	f888 3000 	strb.w	r3, [r8]
 800b766:	f10b 0301 	add.w	r3, fp, #1
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f43f ad69 	beq.w	800b246 <_dtoa_r+0x9e>
 800b774:	f8c3 8000 	str.w	r8, [r3]
 800b778:	e565      	b.n	800b246 <_dtoa_r+0x9e>
 800b77a:	465a      	mov	r2, fp
 800b77c:	4643      	mov	r3, r8
 800b77e:	4698      	mov	r8, r3
 800b780:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b784:	2939      	cmp	r1, #57	; 0x39
 800b786:	d106      	bne.n	800b796 <_dtoa_r+0x5ee>
 800b788:	9901      	ldr	r1, [sp, #4]
 800b78a:	4299      	cmp	r1, r3
 800b78c:	d1f7      	bne.n	800b77e <_dtoa_r+0x5d6>
 800b78e:	9801      	ldr	r0, [sp, #4]
 800b790:	2130      	movs	r1, #48	; 0x30
 800b792:	3201      	adds	r2, #1
 800b794:	7001      	strb	r1, [r0, #0]
 800b796:	7819      	ldrb	r1, [r3, #0]
 800b798:	3101      	adds	r1, #1
 800b79a:	7019      	strb	r1, [r3, #0]
 800b79c:	e7ae      	b.n	800b6fc <_dtoa_r+0x554>
 800b79e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7aa:	d1b2      	bne.n	800b712 <_dtoa_r+0x56a>
 800b7ac:	e7d3      	b.n	800b756 <_dtoa_r+0x5ae>
 800b7ae:	bf00      	nop
 800b7b0:	0800db70 	.word	0x0800db70
 800b7b4:	0800db48 	.word	0x0800db48
 800b7b8:	9907      	ldr	r1, [sp, #28]
 800b7ba:	2900      	cmp	r1, #0
 800b7bc:	f000 80d0 	beq.w	800b960 <_dtoa_r+0x7b8>
 800b7c0:	9906      	ldr	r1, [sp, #24]
 800b7c2:	2901      	cmp	r1, #1
 800b7c4:	f300 80b4 	bgt.w	800b930 <_dtoa_r+0x788>
 800b7c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7ca:	2900      	cmp	r1, #0
 800b7cc:	f000 80ac 	beq.w	800b928 <_dtoa_r+0x780>
 800b7d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b7d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b7d8:	461c      	mov	r4, r3
 800b7da:	9309      	str	r3, [sp, #36]	; 0x24
 800b7dc:	9b04      	ldr	r3, [sp, #16]
 800b7de:	4413      	add	r3, r2
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	9b05      	ldr	r3, [sp, #20]
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	4413      	add	r3, r2
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	9305      	str	r3, [sp, #20]
 800b7ec:	f000 fb8a 	bl	800bf04 <__i2b>
 800b7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f2:	4607      	mov	r7, r0
 800b7f4:	f1b8 0f00 	cmp.w	r8, #0
 800b7f8:	d00d      	beq.n	800b816 <_dtoa_r+0x66e>
 800b7fa:	9a05      	ldr	r2, [sp, #20]
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	dd0a      	ble.n	800b816 <_dtoa_r+0x66e>
 800b800:	4542      	cmp	r2, r8
 800b802:	9904      	ldr	r1, [sp, #16]
 800b804:	bfa8      	it	ge
 800b806:	4642      	movge	r2, r8
 800b808:	1a89      	subs	r1, r1, r2
 800b80a:	9104      	str	r1, [sp, #16]
 800b80c:	9905      	ldr	r1, [sp, #20]
 800b80e:	eba8 0802 	sub.w	r8, r8, r2
 800b812:	1a8a      	subs	r2, r1, r2
 800b814:	9205      	str	r2, [sp, #20]
 800b816:	b303      	cbz	r3, 800b85a <_dtoa_r+0x6b2>
 800b818:	9a07      	ldr	r2, [sp, #28]
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	f000 80a5 	beq.w	800b96a <_dtoa_r+0x7c2>
 800b820:	2c00      	cmp	r4, #0
 800b822:	dd13      	ble.n	800b84c <_dtoa_r+0x6a4>
 800b824:	4639      	mov	r1, r7
 800b826:	4622      	mov	r2, r4
 800b828:	4630      	mov	r0, r6
 800b82a:	930d      	str	r3, [sp, #52]	; 0x34
 800b82c:	f000 fc2a 	bl	800c084 <__pow5mult>
 800b830:	462a      	mov	r2, r5
 800b832:	4601      	mov	r1, r0
 800b834:	4607      	mov	r7, r0
 800b836:	4630      	mov	r0, r6
 800b838:	f000 fb7a 	bl	800bf30 <__multiply>
 800b83c:	4629      	mov	r1, r5
 800b83e:	9009      	str	r0, [sp, #36]	; 0x24
 800b840:	4630      	mov	r0, r6
 800b842:	f000 faa9 	bl	800bd98 <_Bfree>
 800b846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b84a:	4615      	mov	r5, r2
 800b84c:	1b1a      	subs	r2, r3, r4
 800b84e:	d004      	beq.n	800b85a <_dtoa_r+0x6b2>
 800b850:	4629      	mov	r1, r5
 800b852:	4630      	mov	r0, r6
 800b854:	f000 fc16 	bl	800c084 <__pow5mult>
 800b858:	4605      	mov	r5, r0
 800b85a:	2101      	movs	r1, #1
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 fb51 	bl	800bf04 <__i2b>
 800b862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b864:	2b00      	cmp	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	f340 8081 	ble.w	800b96e <_dtoa_r+0x7c6>
 800b86c:	461a      	mov	r2, r3
 800b86e:	4601      	mov	r1, r0
 800b870:	4630      	mov	r0, r6
 800b872:	f000 fc07 	bl	800c084 <__pow5mult>
 800b876:	9b06      	ldr	r3, [sp, #24]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	4604      	mov	r4, r0
 800b87c:	dd7a      	ble.n	800b974 <_dtoa_r+0x7cc>
 800b87e:	2300      	movs	r3, #0
 800b880:	9309      	str	r3, [sp, #36]	; 0x24
 800b882:	6922      	ldr	r2, [r4, #16]
 800b884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b888:	6910      	ldr	r0, [r2, #16]
 800b88a:	f000 faed 	bl	800be68 <__hi0bits>
 800b88e:	f1c0 0020 	rsb	r0, r0, #32
 800b892:	9b05      	ldr	r3, [sp, #20]
 800b894:	4418      	add	r0, r3
 800b896:	f010 001f 	ands.w	r0, r0, #31
 800b89a:	f000 8093 	beq.w	800b9c4 <_dtoa_r+0x81c>
 800b89e:	f1c0 0220 	rsb	r2, r0, #32
 800b8a2:	2a04      	cmp	r2, #4
 800b8a4:	f340 8085 	ble.w	800b9b2 <_dtoa_r+0x80a>
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	f1c0 001c 	rsb	r0, r0, #28
 800b8ae:	4403      	add	r3, r0
 800b8b0:	9304      	str	r3, [sp, #16]
 800b8b2:	9b05      	ldr	r3, [sp, #20]
 800b8b4:	4480      	add	r8, r0
 800b8b6:	4403      	add	r3, r0
 800b8b8:	9305      	str	r3, [sp, #20]
 800b8ba:	9b04      	ldr	r3, [sp, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dd05      	ble.n	800b8cc <_dtoa_r+0x724>
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f000 fc37 	bl	800c138 <__lshift>
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	9b05      	ldr	r3, [sp, #20]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd05      	ble.n	800b8de <_dtoa_r+0x736>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f000 fc2e 	bl	800c138 <__lshift>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d071      	beq.n	800b9c8 <_dtoa_r+0x820>
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 fc92 	bl	800c210 <__mcmp>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	da6b      	bge.n	800b9c8 <_dtoa_r+0x820>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	220a      	movs	r2, #10
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f000 fa70 	bl	800bddc <__multadd>
 800b8fc:	9b07      	ldr	r3, [sp, #28]
 800b8fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b902:	4605      	mov	r5, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 8197 	beq.w	800bc38 <_dtoa_r+0xa90>
 800b90a:	4639      	mov	r1, r7
 800b90c:	2300      	movs	r3, #0
 800b90e:	220a      	movs	r2, #10
 800b910:	4630      	mov	r0, r6
 800b912:	f000 fa63 	bl	800bddc <__multadd>
 800b916:	f1ba 0f00 	cmp.w	sl, #0
 800b91a:	4607      	mov	r7, r0
 800b91c:	f300 8093 	bgt.w	800ba46 <_dtoa_r+0x89e>
 800b920:	9b06      	ldr	r3, [sp, #24]
 800b922:	2b02      	cmp	r3, #2
 800b924:	dc57      	bgt.n	800b9d6 <_dtoa_r+0x82e>
 800b926:	e08e      	b.n	800ba46 <_dtoa_r+0x89e>
 800b928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b92a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b92e:	e751      	b.n	800b7d4 <_dtoa_r+0x62c>
 800b930:	f109 34ff 	add.w	r4, r9, #4294967295
 800b934:	42a3      	cmp	r3, r4
 800b936:	bfbf      	itttt	lt
 800b938:	1ae2      	sublt	r2, r4, r3
 800b93a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b93c:	189b      	addlt	r3, r3, r2
 800b93e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b940:	bfae      	itee	ge
 800b942:	1b1c      	subge	r4, r3, r4
 800b944:	4623      	movlt	r3, r4
 800b946:	2400      	movlt	r4, #0
 800b948:	f1b9 0f00 	cmp.w	r9, #0
 800b94c:	bfb5      	itete	lt
 800b94e:	9a04      	ldrlt	r2, [sp, #16]
 800b950:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b954:	eba2 0809 	sublt.w	r8, r2, r9
 800b958:	464a      	movge	r2, r9
 800b95a:	bfb8      	it	lt
 800b95c:	2200      	movlt	r2, #0
 800b95e:	e73c      	b.n	800b7da <_dtoa_r+0x632>
 800b960:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b964:	9f07      	ldr	r7, [sp, #28]
 800b966:	461c      	mov	r4, r3
 800b968:	e744      	b.n	800b7f4 <_dtoa_r+0x64c>
 800b96a:	461a      	mov	r2, r3
 800b96c:	e770      	b.n	800b850 <_dtoa_r+0x6a8>
 800b96e:	9b06      	ldr	r3, [sp, #24]
 800b970:	2b01      	cmp	r3, #1
 800b972:	dc18      	bgt.n	800b9a6 <_dtoa_r+0x7fe>
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	b9b3      	cbnz	r3, 800b9a6 <_dtoa_r+0x7fe>
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b97e:	b9a2      	cbnz	r2, 800b9aa <_dtoa_r+0x802>
 800b980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b984:	0d12      	lsrs	r2, r2, #20
 800b986:	0512      	lsls	r2, r2, #20
 800b988:	b18a      	cbz	r2, 800b9ae <_dtoa_r+0x806>
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	3301      	adds	r3, #1
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	9b05      	ldr	r3, [sp, #20]
 800b992:	3301      	adds	r3, #1
 800b994:	9305      	str	r3, [sp, #20]
 800b996:	2301      	movs	r3, #1
 800b998:	9309      	str	r3, [sp, #36]	; 0x24
 800b99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f47f af70 	bne.w	800b882 <_dtoa_r+0x6da>
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	e775      	b.n	800b892 <_dtoa_r+0x6ea>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e7f6      	b.n	800b998 <_dtoa_r+0x7f0>
 800b9aa:	9b02      	ldr	r3, [sp, #8]
 800b9ac:	e7f4      	b.n	800b998 <_dtoa_r+0x7f0>
 800b9ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b0:	e7f3      	b.n	800b99a <_dtoa_r+0x7f2>
 800b9b2:	d082      	beq.n	800b8ba <_dtoa_r+0x712>
 800b9b4:	9b04      	ldr	r3, [sp, #16]
 800b9b6:	321c      	adds	r2, #28
 800b9b8:	4413      	add	r3, r2
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	9b05      	ldr	r3, [sp, #20]
 800b9be:	4490      	add	r8, r2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	e779      	b.n	800b8b8 <_dtoa_r+0x710>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	e7f5      	b.n	800b9b4 <_dtoa_r+0x80c>
 800b9c8:	f1b9 0f00 	cmp.w	r9, #0
 800b9cc:	dc36      	bgt.n	800ba3c <_dtoa_r+0x894>
 800b9ce:	9b06      	ldr	r3, [sp, #24]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	dd33      	ble.n	800ba3c <_dtoa_r+0x894>
 800b9d4:	46ca      	mov	sl, r9
 800b9d6:	f1ba 0f00 	cmp.w	sl, #0
 800b9da:	d10d      	bne.n	800b9f8 <_dtoa_r+0x850>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4653      	mov	r3, sl
 800b9e0:	2205      	movs	r2, #5
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f000 f9fa 	bl	800bddc <__multadd>
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 fc0f 	bl	800c210 <__mcmp>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	f73f ade4 	bgt.w	800b5c0 <_dtoa_r+0x418>
 800b9f8:	9b08      	ldr	r3, [sp, #32]
 800b9fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b9fe:	ea6f 0b03 	mvn.w	fp, r3
 800ba02:	f04f 0900 	mov.w	r9, #0
 800ba06:	4621      	mov	r1, r4
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f000 f9c5 	bl	800bd98 <_Bfree>
 800ba0e:	2f00      	cmp	r7, #0
 800ba10:	f43f aea1 	beq.w	800b756 <_dtoa_r+0x5ae>
 800ba14:	f1b9 0f00 	cmp.w	r9, #0
 800ba18:	d005      	beq.n	800ba26 <_dtoa_r+0x87e>
 800ba1a:	45b9      	cmp	r9, r7
 800ba1c:	d003      	beq.n	800ba26 <_dtoa_r+0x87e>
 800ba1e:	4649      	mov	r1, r9
 800ba20:	4630      	mov	r0, r6
 800ba22:	f000 f9b9 	bl	800bd98 <_Bfree>
 800ba26:	4639      	mov	r1, r7
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f000 f9b5 	bl	800bd98 <_Bfree>
 800ba2e:	e692      	b.n	800b756 <_dtoa_r+0x5ae>
 800ba30:	2400      	movs	r4, #0
 800ba32:	4627      	mov	r7, r4
 800ba34:	e7e0      	b.n	800b9f8 <_dtoa_r+0x850>
 800ba36:	4693      	mov	fp, r2
 800ba38:	4627      	mov	r7, r4
 800ba3a:	e5c1      	b.n	800b5c0 <_dtoa_r+0x418>
 800ba3c:	9b07      	ldr	r3, [sp, #28]
 800ba3e:	46ca      	mov	sl, r9
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 8100 	beq.w	800bc46 <_dtoa_r+0xa9e>
 800ba46:	f1b8 0f00 	cmp.w	r8, #0
 800ba4a:	dd05      	ble.n	800ba58 <_dtoa_r+0x8b0>
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	4642      	mov	r2, r8
 800ba50:	4630      	mov	r0, r6
 800ba52:	f000 fb71 	bl	800c138 <__lshift>
 800ba56:	4607      	mov	r7, r0
 800ba58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d05d      	beq.n	800bb1a <_dtoa_r+0x972>
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	4630      	mov	r0, r6
 800ba62:	f000 f959 	bl	800bd18 <_Balloc>
 800ba66:	4680      	mov	r8, r0
 800ba68:	b928      	cbnz	r0, 800ba76 <_dtoa_r+0x8ce>
 800ba6a:	4b82      	ldr	r3, [pc, #520]	; (800bc74 <_dtoa_r+0xacc>)
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ba72:	f7ff bbb1 	b.w	800b1d8 <_dtoa_r+0x30>
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	3202      	adds	r2, #2
 800ba7a:	0092      	lsls	r2, r2, #2
 800ba7c:	f107 010c 	add.w	r1, r7, #12
 800ba80:	300c      	adds	r0, #12
 800ba82:	f000 fee5 	bl	800c850 <memcpy>
 800ba86:	2201      	movs	r2, #1
 800ba88:	4641      	mov	r1, r8
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f000 fb54 	bl	800c138 <__lshift>
 800ba90:	9b01      	ldr	r3, [sp, #4]
 800ba92:	3301      	adds	r3, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	4453      	add	r3, sl
 800ba9a:	9308      	str	r3, [sp, #32]
 800ba9c:	9b02      	ldr	r3, [sp, #8]
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	46b9      	mov	r9, r7
 800baa4:	9307      	str	r3, [sp, #28]
 800baa6:	4607      	mov	r7, r0
 800baa8:	9b04      	ldr	r3, [sp, #16]
 800baaa:	4621      	mov	r1, r4
 800baac:	3b01      	subs	r3, #1
 800baae:	4628      	mov	r0, r5
 800bab0:	9302      	str	r3, [sp, #8]
 800bab2:	f7ff faf0 	bl	800b096 <quorem>
 800bab6:	4603      	mov	r3, r0
 800bab8:	3330      	adds	r3, #48	; 0x30
 800baba:	9005      	str	r0, [sp, #20]
 800babc:	4649      	mov	r1, r9
 800babe:	4628      	mov	r0, r5
 800bac0:	9309      	str	r3, [sp, #36]	; 0x24
 800bac2:	f000 fba5 	bl	800c210 <__mcmp>
 800bac6:	463a      	mov	r2, r7
 800bac8:	4682      	mov	sl, r0
 800baca:	4621      	mov	r1, r4
 800bacc:	4630      	mov	r0, r6
 800bace:	f000 fbbb 	bl	800c248 <__mdiff>
 800bad2:	68c2      	ldr	r2, [r0, #12]
 800bad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad6:	4680      	mov	r8, r0
 800bad8:	bb0a      	cbnz	r2, 800bb1e <_dtoa_r+0x976>
 800bada:	4601      	mov	r1, r0
 800badc:	4628      	mov	r0, r5
 800bade:	f000 fb97 	bl	800c210 <__mcmp>
 800bae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae4:	4602      	mov	r2, r0
 800bae6:	4641      	mov	r1, r8
 800bae8:	4630      	mov	r0, r6
 800baea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800baee:	f000 f953 	bl	800bd98 <_Bfree>
 800baf2:	9b06      	ldr	r3, [sp, #24]
 800baf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baf6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bafa:	ea43 0102 	orr.w	r1, r3, r2
 800bafe:	9b07      	ldr	r3, [sp, #28]
 800bb00:	4319      	orrs	r1, r3
 800bb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb04:	d10d      	bne.n	800bb22 <_dtoa_r+0x97a>
 800bb06:	2b39      	cmp	r3, #57	; 0x39
 800bb08:	d029      	beq.n	800bb5e <_dtoa_r+0x9b6>
 800bb0a:	f1ba 0f00 	cmp.w	sl, #0
 800bb0e:	dd01      	ble.n	800bb14 <_dtoa_r+0x96c>
 800bb10:	9b05      	ldr	r3, [sp, #20]
 800bb12:	3331      	adds	r3, #49	; 0x31
 800bb14:	9a02      	ldr	r2, [sp, #8]
 800bb16:	7013      	strb	r3, [r2, #0]
 800bb18:	e775      	b.n	800ba06 <_dtoa_r+0x85e>
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	e7b8      	b.n	800ba90 <_dtoa_r+0x8e8>
 800bb1e:	2201      	movs	r2, #1
 800bb20:	e7e1      	b.n	800bae6 <_dtoa_r+0x93e>
 800bb22:	f1ba 0f00 	cmp.w	sl, #0
 800bb26:	db06      	blt.n	800bb36 <_dtoa_r+0x98e>
 800bb28:	9906      	ldr	r1, [sp, #24]
 800bb2a:	ea41 0a0a 	orr.w	sl, r1, sl
 800bb2e:	9907      	ldr	r1, [sp, #28]
 800bb30:	ea5a 0a01 	orrs.w	sl, sl, r1
 800bb34:	d120      	bne.n	800bb78 <_dtoa_r+0x9d0>
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	ddec      	ble.n	800bb14 <_dtoa_r+0x96c>
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	4630      	mov	r0, r6
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	f000 faf9 	bl	800c138 <__lshift>
 800bb46:	4621      	mov	r1, r4
 800bb48:	4605      	mov	r5, r0
 800bb4a:	f000 fb61 	bl	800c210 <__mcmp>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	dc02      	bgt.n	800bb5a <_dtoa_r+0x9b2>
 800bb54:	d1de      	bne.n	800bb14 <_dtoa_r+0x96c>
 800bb56:	07da      	lsls	r2, r3, #31
 800bb58:	d5dc      	bpl.n	800bb14 <_dtoa_r+0x96c>
 800bb5a:	2b39      	cmp	r3, #57	; 0x39
 800bb5c:	d1d8      	bne.n	800bb10 <_dtoa_r+0x968>
 800bb5e:	9a02      	ldr	r2, [sp, #8]
 800bb60:	2339      	movs	r3, #57	; 0x39
 800bb62:	7013      	strb	r3, [r2, #0]
 800bb64:	4643      	mov	r3, r8
 800bb66:	4698      	mov	r8, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800bb6e:	2a39      	cmp	r2, #57	; 0x39
 800bb70:	d051      	beq.n	800bc16 <_dtoa_r+0xa6e>
 800bb72:	3201      	adds	r2, #1
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	e746      	b.n	800ba06 <_dtoa_r+0x85e>
 800bb78:	2a00      	cmp	r2, #0
 800bb7a:	dd03      	ble.n	800bb84 <_dtoa_r+0x9dc>
 800bb7c:	2b39      	cmp	r3, #57	; 0x39
 800bb7e:	d0ee      	beq.n	800bb5e <_dtoa_r+0x9b6>
 800bb80:	3301      	adds	r3, #1
 800bb82:	e7c7      	b.n	800bb14 <_dtoa_r+0x96c>
 800bb84:	9a04      	ldr	r2, [sp, #16]
 800bb86:	9908      	ldr	r1, [sp, #32]
 800bb88:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb8c:	428a      	cmp	r2, r1
 800bb8e:	d02b      	beq.n	800bbe8 <_dtoa_r+0xa40>
 800bb90:	4629      	mov	r1, r5
 800bb92:	2300      	movs	r3, #0
 800bb94:	220a      	movs	r2, #10
 800bb96:	4630      	mov	r0, r6
 800bb98:	f000 f920 	bl	800bddc <__multadd>
 800bb9c:	45b9      	cmp	r9, r7
 800bb9e:	4605      	mov	r5, r0
 800bba0:	f04f 0300 	mov.w	r3, #0
 800bba4:	f04f 020a 	mov.w	r2, #10
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4630      	mov	r0, r6
 800bbac:	d107      	bne.n	800bbbe <_dtoa_r+0xa16>
 800bbae:	f000 f915 	bl	800bddc <__multadd>
 800bbb2:	4681      	mov	r9, r0
 800bbb4:	4607      	mov	r7, r0
 800bbb6:	9b04      	ldr	r3, [sp, #16]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	e774      	b.n	800baa8 <_dtoa_r+0x900>
 800bbbe:	f000 f90d 	bl	800bddc <__multadd>
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	4681      	mov	r9, r0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	220a      	movs	r2, #10
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f000 f906 	bl	800bddc <__multadd>
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	e7f0      	b.n	800bbb6 <_dtoa_r+0xa0e>
 800bbd4:	f1ba 0f00 	cmp.w	sl, #0
 800bbd8:	9a01      	ldr	r2, [sp, #4]
 800bbda:	bfcc      	ite	gt
 800bbdc:	46d0      	movgt	r8, sl
 800bbde:	f04f 0801 	movle.w	r8, #1
 800bbe2:	4490      	add	r8, r2
 800bbe4:	f04f 0900 	mov.w	r9, #0
 800bbe8:	4629      	mov	r1, r5
 800bbea:	2201      	movs	r2, #1
 800bbec:	4630      	mov	r0, r6
 800bbee:	9302      	str	r3, [sp, #8]
 800bbf0:	f000 faa2 	bl	800c138 <__lshift>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	f000 fb0a 	bl	800c210 <__mcmp>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	dcb1      	bgt.n	800bb64 <_dtoa_r+0x9bc>
 800bc00:	d102      	bne.n	800bc08 <_dtoa_r+0xa60>
 800bc02:	9b02      	ldr	r3, [sp, #8]
 800bc04:	07db      	lsls	r3, r3, #31
 800bc06:	d4ad      	bmi.n	800bb64 <_dtoa_r+0x9bc>
 800bc08:	4643      	mov	r3, r8
 800bc0a:	4698      	mov	r8, r3
 800bc0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc10:	2a30      	cmp	r2, #48	; 0x30
 800bc12:	d0fa      	beq.n	800bc0a <_dtoa_r+0xa62>
 800bc14:	e6f7      	b.n	800ba06 <_dtoa_r+0x85e>
 800bc16:	9a01      	ldr	r2, [sp, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d1a4      	bne.n	800bb66 <_dtoa_r+0x9be>
 800bc1c:	f10b 0b01 	add.w	fp, fp, #1
 800bc20:	2331      	movs	r3, #49	; 0x31
 800bc22:	e778      	b.n	800bb16 <_dtoa_r+0x96e>
 800bc24:	4b14      	ldr	r3, [pc, #80]	; (800bc78 <_dtoa_r+0xad0>)
 800bc26:	f7ff bb2a 	b.w	800b27e <_dtoa_r+0xd6>
 800bc2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f47f ab05 	bne.w	800b23c <_dtoa_r+0x94>
 800bc32:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <_dtoa_r+0xad4>)
 800bc34:	f7ff bb23 	b.w	800b27e <_dtoa_r+0xd6>
 800bc38:	f1ba 0f00 	cmp.w	sl, #0
 800bc3c:	dc03      	bgt.n	800bc46 <_dtoa_r+0xa9e>
 800bc3e:	9b06      	ldr	r3, [sp, #24]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	f73f aec8 	bgt.w	800b9d6 <_dtoa_r+0x82e>
 800bc46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f7ff fa22 	bl	800b096 <quorem>
 800bc52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bc56:	f808 3b01 	strb.w	r3, [r8], #1
 800bc5a:	9a01      	ldr	r2, [sp, #4]
 800bc5c:	eba8 0202 	sub.w	r2, r8, r2
 800bc60:	4592      	cmp	sl, r2
 800bc62:	ddb7      	ble.n	800bbd4 <_dtoa_r+0xa2c>
 800bc64:	4629      	mov	r1, r5
 800bc66:	2300      	movs	r3, #0
 800bc68:	220a      	movs	r2, #10
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 f8b6 	bl	800bddc <__multadd>
 800bc70:	4605      	mov	r5, r0
 800bc72:	e7ea      	b.n	800bc4a <_dtoa_r+0xaa2>
 800bc74:	0800dad8 	.word	0x0800dad8
 800bc78:	0800da38 	.word	0x0800da38
 800bc7c:	0800da5c 	.word	0x0800da5c

0800bc80 <_free_r>:
 800bc80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc82:	2900      	cmp	r1, #0
 800bc84:	d044      	beq.n	800bd10 <_free_r+0x90>
 800bc86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc8a:	9001      	str	r0, [sp, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc92:	bfb8      	it	lt
 800bc94:	18e4      	addlt	r4, r4, r3
 800bc96:	f7fe fc01 	bl	800a49c <__malloc_lock>
 800bc9a:	4a1e      	ldr	r2, [pc, #120]	; (800bd14 <_free_r+0x94>)
 800bc9c:	9801      	ldr	r0, [sp, #4]
 800bc9e:	6813      	ldr	r3, [r2, #0]
 800bca0:	b933      	cbnz	r3, 800bcb0 <_free_r+0x30>
 800bca2:	6063      	str	r3, [r4, #4]
 800bca4:	6014      	str	r4, [r2, #0]
 800bca6:	b003      	add	sp, #12
 800bca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcac:	f7fe bbfc 	b.w	800a4a8 <__malloc_unlock>
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	d908      	bls.n	800bcc6 <_free_r+0x46>
 800bcb4:	6825      	ldr	r5, [r4, #0]
 800bcb6:	1961      	adds	r1, r4, r5
 800bcb8:	428b      	cmp	r3, r1
 800bcba:	bf01      	itttt	eq
 800bcbc:	6819      	ldreq	r1, [r3, #0]
 800bcbe:	685b      	ldreq	r3, [r3, #4]
 800bcc0:	1949      	addeq	r1, r1, r5
 800bcc2:	6021      	streq	r1, [r4, #0]
 800bcc4:	e7ed      	b.n	800bca2 <_free_r+0x22>
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	b10b      	cbz	r3, 800bcd0 <_free_r+0x50>
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	d9fa      	bls.n	800bcc6 <_free_r+0x46>
 800bcd0:	6811      	ldr	r1, [r2, #0]
 800bcd2:	1855      	adds	r5, r2, r1
 800bcd4:	42a5      	cmp	r5, r4
 800bcd6:	d10b      	bne.n	800bcf0 <_free_r+0x70>
 800bcd8:	6824      	ldr	r4, [r4, #0]
 800bcda:	4421      	add	r1, r4
 800bcdc:	1854      	adds	r4, r2, r1
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	6011      	str	r1, [r2, #0]
 800bce2:	d1e0      	bne.n	800bca6 <_free_r+0x26>
 800bce4:	681c      	ldr	r4, [r3, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	6053      	str	r3, [r2, #4]
 800bcea:	440c      	add	r4, r1
 800bcec:	6014      	str	r4, [r2, #0]
 800bcee:	e7da      	b.n	800bca6 <_free_r+0x26>
 800bcf0:	d902      	bls.n	800bcf8 <_free_r+0x78>
 800bcf2:	230c      	movs	r3, #12
 800bcf4:	6003      	str	r3, [r0, #0]
 800bcf6:	e7d6      	b.n	800bca6 <_free_r+0x26>
 800bcf8:	6825      	ldr	r5, [r4, #0]
 800bcfa:	1961      	adds	r1, r4, r5
 800bcfc:	428b      	cmp	r3, r1
 800bcfe:	bf04      	itt	eq
 800bd00:	6819      	ldreq	r1, [r3, #0]
 800bd02:	685b      	ldreq	r3, [r3, #4]
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	bf04      	itt	eq
 800bd08:	1949      	addeq	r1, r1, r5
 800bd0a:	6021      	streq	r1, [r4, #0]
 800bd0c:	6054      	str	r4, [r2, #4]
 800bd0e:	e7ca      	b.n	800bca6 <_free_r+0x26>
 800bd10:	b003      	add	sp, #12
 800bd12:	bd30      	pop	{r4, r5, pc}
 800bd14:	24001f94 	.word	0x24001f94

0800bd18 <_Balloc>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	69c6      	ldr	r6, [r0, #28]
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	460d      	mov	r5, r1
 800bd20:	b976      	cbnz	r6, 800bd40 <_Balloc+0x28>
 800bd22:	2010      	movs	r0, #16
 800bd24:	f7fe fb12 	bl	800a34c <malloc>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	61e0      	str	r0, [r4, #28]
 800bd2c:	b920      	cbnz	r0, 800bd38 <_Balloc+0x20>
 800bd2e:	4b18      	ldr	r3, [pc, #96]	; (800bd90 <_Balloc+0x78>)
 800bd30:	4818      	ldr	r0, [pc, #96]	; (800bd94 <_Balloc+0x7c>)
 800bd32:	216b      	movs	r1, #107	; 0x6b
 800bd34:	f000 fd9a 	bl	800c86c <__assert_func>
 800bd38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd3c:	6006      	str	r6, [r0, #0]
 800bd3e:	60c6      	str	r6, [r0, #12]
 800bd40:	69e6      	ldr	r6, [r4, #28]
 800bd42:	68f3      	ldr	r3, [r6, #12]
 800bd44:	b183      	cbz	r3, 800bd68 <_Balloc+0x50>
 800bd46:	69e3      	ldr	r3, [r4, #28]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd4e:	b9b8      	cbnz	r0, 800bd80 <_Balloc+0x68>
 800bd50:	2101      	movs	r1, #1
 800bd52:	fa01 f605 	lsl.w	r6, r1, r5
 800bd56:	1d72      	adds	r2, r6, #5
 800bd58:	0092      	lsls	r2, r2, #2
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fda4 	bl	800c8a8 <_calloc_r>
 800bd60:	b160      	cbz	r0, 800bd7c <_Balloc+0x64>
 800bd62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd66:	e00e      	b.n	800bd86 <_Balloc+0x6e>
 800bd68:	2221      	movs	r2, #33	; 0x21
 800bd6a:	2104      	movs	r1, #4
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 fd9b 	bl	800c8a8 <_calloc_r>
 800bd72:	69e3      	ldr	r3, [r4, #28]
 800bd74:	60f0      	str	r0, [r6, #12]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e4      	bne.n	800bd46 <_Balloc+0x2e>
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	6802      	ldr	r2, [r0, #0]
 800bd82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd86:	2300      	movs	r3, #0
 800bd88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd8c:	e7f7      	b.n	800bd7e <_Balloc+0x66>
 800bd8e:	bf00      	nop
 800bd90:	0800da69 	.word	0x0800da69
 800bd94:	0800dae9 	.word	0x0800dae9

0800bd98 <_Bfree>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	69c6      	ldr	r6, [r0, #28]
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	b976      	cbnz	r6, 800bdc0 <_Bfree+0x28>
 800bda2:	2010      	movs	r0, #16
 800bda4:	f7fe fad2 	bl	800a34c <malloc>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	61e8      	str	r0, [r5, #28]
 800bdac:	b920      	cbnz	r0, 800bdb8 <_Bfree+0x20>
 800bdae:	4b09      	ldr	r3, [pc, #36]	; (800bdd4 <_Bfree+0x3c>)
 800bdb0:	4809      	ldr	r0, [pc, #36]	; (800bdd8 <_Bfree+0x40>)
 800bdb2:	218f      	movs	r1, #143	; 0x8f
 800bdb4:	f000 fd5a 	bl	800c86c <__assert_func>
 800bdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdbc:	6006      	str	r6, [r0, #0]
 800bdbe:	60c6      	str	r6, [r0, #12]
 800bdc0:	b13c      	cbz	r4, 800bdd2 <_Bfree+0x3a>
 800bdc2:	69eb      	ldr	r3, [r5, #28]
 800bdc4:	6862      	ldr	r2, [r4, #4]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdcc:	6021      	str	r1, [r4, #0]
 800bdce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	0800da69 	.word	0x0800da69
 800bdd8:	0800dae9 	.word	0x0800dae9

0800bddc <__multadd>:
 800bddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde0:	690d      	ldr	r5, [r1, #16]
 800bde2:	4607      	mov	r7, r0
 800bde4:	460c      	mov	r4, r1
 800bde6:	461e      	mov	r6, r3
 800bde8:	f101 0c14 	add.w	ip, r1, #20
 800bdec:	2000      	movs	r0, #0
 800bdee:	f8dc 3000 	ldr.w	r3, [ip]
 800bdf2:	b299      	uxth	r1, r3
 800bdf4:	fb02 6101 	mla	r1, r2, r1, r6
 800bdf8:	0c1e      	lsrs	r6, r3, #16
 800bdfa:	0c0b      	lsrs	r3, r1, #16
 800bdfc:	fb02 3306 	mla	r3, r2, r6, r3
 800be00:	b289      	uxth	r1, r1
 800be02:	3001      	adds	r0, #1
 800be04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be08:	4285      	cmp	r5, r0
 800be0a:	f84c 1b04 	str.w	r1, [ip], #4
 800be0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be12:	dcec      	bgt.n	800bdee <__multadd+0x12>
 800be14:	b30e      	cbz	r6, 800be5a <__multadd+0x7e>
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	42ab      	cmp	r3, r5
 800be1a:	dc19      	bgt.n	800be50 <__multadd+0x74>
 800be1c:	6861      	ldr	r1, [r4, #4]
 800be1e:	4638      	mov	r0, r7
 800be20:	3101      	adds	r1, #1
 800be22:	f7ff ff79 	bl	800bd18 <_Balloc>
 800be26:	4680      	mov	r8, r0
 800be28:	b928      	cbnz	r0, 800be36 <__multadd+0x5a>
 800be2a:	4602      	mov	r2, r0
 800be2c:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <__multadd+0x84>)
 800be2e:	480d      	ldr	r0, [pc, #52]	; (800be64 <__multadd+0x88>)
 800be30:	21ba      	movs	r1, #186	; 0xba
 800be32:	f000 fd1b 	bl	800c86c <__assert_func>
 800be36:	6922      	ldr	r2, [r4, #16]
 800be38:	3202      	adds	r2, #2
 800be3a:	f104 010c 	add.w	r1, r4, #12
 800be3e:	0092      	lsls	r2, r2, #2
 800be40:	300c      	adds	r0, #12
 800be42:	f000 fd05 	bl	800c850 <memcpy>
 800be46:	4621      	mov	r1, r4
 800be48:	4638      	mov	r0, r7
 800be4a:	f7ff ffa5 	bl	800bd98 <_Bfree>
 800be4e:	4644      	mov	r4, r8
 800be50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be54:	3501      	adds	r5, #1
 800be56:	615e      	str	r6, [r3, #20]
 800be58:	6125      	str	r5, [r4, #16]
 800be5a:	4620      	mov	r0, r4
 800be5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be60:	0800dad8 	.word	0x0800dad8
 800be64:	0800dae9 	.word	0x0800dae9

0800be68 <__hi0bits>:
 800be68:	0c03      	lsrs	r3, r0, #16
 800be6a:	041b      	lsls	r3, r3, #16
 800be6c:	b9d3      	cbnz	r3, 800bea4 <__hi0bits+0x3c>
 800be6e:	0400      	lsls	r0, r0, #16
 800be70:	2310      	movs	r3, #16
 800be72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be76:	bf04      	itt	eq
 800be78:	0200      	lsleq	r0, r0, #8
 800be7a:	3308      	addeq	r3, #8
 800be7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be80:	bf04      	itt	eq
 800be82:	0100      	lsleq	r0, r0, #4
 800be84:	3304      	addeq	r3, #4
 800be86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be8a:	bf04      	itt	eq
 800be8c:	0080      	lsleq	r0, r0, #2
 800be8e:	3302      	addeq	r3, #2
 800be90:	2800      	cmp	r0, #0
 800be92:	db05      	blt.n	800bea0 <__hi0bits+0x38>
 800be94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be98:	f103 0301 	add.w	r3, r3, #1
 800be9c:	bf08      	it	eq
 800be9e:	2320      	moveq	r3, #32
 800bea0:	4618      	mov	r0, r3
 800bea2:	4770      	bx	lr
 800bea4:	2300      	movs	r3, #0
 800bea6:	e7e4      	b.n	800be72 <__hi0bits+0xa>

0800bea8 <__lo0bits>:
 800bea8:	6803      	ldr	r3, [r0, #0]
 800beaa:	f013 0207 	ands.w	r2, r3, #7
 800beae:	d00c      	beq.n	800beca <__lo0bits+0x22>
 800beb0:	07d9      	lsls	r1, r3, #31
 800beb2:	d422      	bmi.n	800befa <__lo0bits+0x52>
 800beb4:	079a      	lsls	r2, r3, #30
 800beb6:	bf49      	itett	mi
 800beb8:	085b      	lsrmi	r3, r3, #1
 800beba:	089b      	lsrpl	r3, r3, #2
 800bebc:	6003      	strmi	r3, [r0, #0]
 800bebe:	2201      	movmi	r2, #1
 800bec0:	bf5c      	itt	pl
 800bec2:	6003      	strpl	r3, [r0, #0]
 800bec4:	2202      	movpl	r2, #2
 800bec6:	4610      	mov	r0, r2
 800bec8:	4770      	bx	lr
 800beca:	b299      	uxth	r1, r3
 800becc:	b909      	cbnz	r1, 800bed2 <__lo0bits+0x2a>
 800bece:	0c1b      	lsrs	r3, r3, #16
 800bed0:	2210      	movs	r2, #16
 800bed2:	b2d9      	uxtb	r1, r3
 800bed4:	b909      	cbnz	r1, 800beda <__lo0bits+0x32>
 800bed6:	3208      	adds	r2, #8
 800bed8:	0a1b      	lsrs	r3, r3, #8
 800beda:	0719      	lsls	r1, r3, #28
 800bedc:	bf04      	itt	eq
 800bede:	091b      	lsreq	r3, r3, #4
 800bee0:	3204      	addeq	r2, #4
 800bee2:	0799      	lsls	r1, r3, #30
 800bee4:	bf04      	itt	eq
 800bee6:	089b      	lsreq	r3, r3, #2
 800bee8:	3202      	addeq	r2, #2
 800beea:	07d9      	lsls	r1, r3, #31
 800beec:	d403      	bmi.n	800bef6 <__lo0bits+0x4e>
 800beee:	085b      	lsrs	r3, r3, #1
 800bef0:	f102 0201 	add.w	r2, r2, #1
 800bef4:	d003      	beq.n	800befe <__lo0bits+0x56>
 800bef6:	6003      	str	r3, [r0, #0]
 800bef8:	e7e5      	b.n	800bec6 <__lo0bits+0x1e>
 800befa:	2200      	movs	r2, #0
 800befc:	e7e3      	b.n	800bec6 <__lo0bits+0x1e>
 800befe:	2220      	movs	r2, #32
 800bf00:	e7e1      	b.n	800bec6 <__lo0bits+0x1e>
	...

0800bf04 <__i2b>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	460c      	mov	r4, r1
 800bf08:	2101      	movs	r1, #1
 800bf0a:	f7ff ff05 	bl	800bd18 <_Balloc>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	b928      	cbnz	r0, 800bf1e <__i2b+0x1a>
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <__i2b+0x24>)
 800bf14:	4805      	ldr	r0, [pc, #20]	; (800bf2c <__i2b+0x28>)
 800bf16:	f240 1145 	movw	r1, #325	; 0x145
 800bf1a:	f000 fca7 	bl	800c86c <__assert_func>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	6144      	str	r4, [r0, #20]
 800bf22:	6103      	str	r3, [r0, #16]
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	bf00      	nop
 800bf28:	0800dad8 	.word	0x0800dad8
 800bf2c:	0800dae9 	.word	0x0800dae9

0800bf30 <__multiply>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	4691      	mov	r9, r2
 800bf36:	690a      	ldr	r2, [r1, #16]
 800bf38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	bfb8      	it	lt
 800bf40:	460b      	movlt	r3, r1
 800bf42:	460c      	mov	r4, r1
 800bf44:	bfbc      	itt	lt
 800bf46:	464c      	movlt	r4, r9
 800bf48:	4699      	movlt	r9, r3
 800bf4a:	6927      	ldr	r7, [r4, #16]
 800bf4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf50:	68a3      	ldr	r3, [r4, #8]
 800bf52:	6861      	ldr	r1, [r4, #4]
 800bf54:	eb07 060a 	add.w	r6, r7, sl
 800bf58:	42b3      	cmp	r3, r6
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	bfb8      	it	lt
 800bf5e:	3101      	addlt	r1, #1
 800bf60:	f7ff feda 	bl	800bd18 <_Balloc>
 800bf64:	b930      	cbnz	r0, 800bf74 <__multiply+0x44>
 800bf66:	4602      	mov	r2, r0
 800bf68:	4b44      	ldr	r3, [pc, #272]	; (800c07c <__multiply+0x14c>)
 800bf6a:	4845      	ldr	r0, [pc, #276]	; (800c080 <__multiply+0x150>)
 800bf6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bf70:	f000 fc7c 	bl	800c86c <__assert_func>
 800bf74:	f100 0514 	add.w	r5, r0, #20
 800bf78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf7c:	462b      	mov	r3, r5
 800bf7e:	2200      	movs	r2, #0
 800bf80:	4543      	cmp	r3, r8
 800bf82:	d321      	bcc.n	800bfc8 <__multiply+0x98>
 800bf84:	f104 0314 	add.w	r3, r4, #20
 800bf88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf8c:	f109 0314 	add.w	r3, r9, #20
 800bf90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf94:	9202      	str	r2, [sp, #8]
 800bf96:	1b3a      	subs	r2, r7, r4
 800bf98:	3a15      	subs	r2, #21
 800bf9a:	f022 0203 	bic.w	r2, r2, #3
 800bf9e:	3204      	adds	r2, #4
 800bfa0:	f104 0115 	add.w	r1, r4, #21
 800bfa4:	428f      	cmp	r7, r1
 800bfa6:	bf38      	it	cc
 800bfa8:	2204      	movcc	r2, #4
 800bfaa:	9201      	str	r2, [sp, #4]
 800bfac:	9a02      	ldr	r2, [sp, #8]
 800bfae:	9303      	str	r3, [sp, #12]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d80c      	bhi.n	800bfce <__multiply+0x9e>
 800bfb4:	2e00      	cmp	r6, #0
 800bfb6:	dd03      	ble.n	800bfc0 <__multiply+0x90>
 800bfb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d05b      	beq.n	800c078 <__multiply+0x148>
 800bfc0:	6106      	str	r6, [r0, #16]
 800bfc2:	b005      	add	sp, #20
 800bfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc8:	f843 2b04 	str.w	r2, [r3], #4
 800bfcc:	e7d8      	b.n	800bf80 <__multiply+0x50>
 800bfce:	f8b3 a000 	ldrh.w	sl, [r3]
 800bfd2:	f1ba 0f00 	cmp.w	sl, #0
 800bfd6:	d024      	beq.n	800c022 <__multiply+0xf2>
 800bfd8:	f104 0e14 	add.w	lr, r4, #20
 800bfdc:	46a9      	mov	r9, r5
 800bfde:	f04f 0c00 	mov.w	ip, #0
 800bfe2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfe6:	f8d9 1000 	ldr.w	r1, [r9]
 800bfea:	fa1f fb82 	uxth.w	fp, r2
 800bfee:	b289      	uxth	r1, r1
 800bff0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bff4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bff8:	f8d9 2000 	ldr.w	r2, [r9]
 800bffc:	4461      	add	r1, ip
 800bffe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c002:	fb0a c20b 	mla	r2, sl, fp, ip
 800c006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c00a:	b289      	uxth	r1, r1
 800c00c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c010:	4577      	cmp	r7, lr
 800c012:	f849 1b04 	str.w	r1, [r9], #4
 800c016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c01a:	d8e2      	bhi.n	800bfe2 <__multiply+0xb2>
 800c01c:	9a01      	ldr	r2, [sp, #4]
 800c01e:	f845 c002 	str.w	ip, [r5, r2]
 800c022:	9a03      	ldr	r2, [sp, #12]
 800c024:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c028:	3304      	adds	r3, #4
 800c02a:	f1b9 0f00 	cmp.w	r9, #0
 800c02e:	d021      	beq.n	800c074 <__multiply+0x144>
 800c030:	6829      	ldr	r1, [r5, #0]
 800c032:	f104 0c14 	add.w	ip, r4, #20
 800c036:	46ae      	mov	lr, r5
 800c038:	f04f 0a00 	mov.w	sl, #0
 800c03c:	f8bc b000 	ldrh.w	fp, [ip]
 800c040:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c044:	fb09 220b 	mla	r2, r9, fp, r2
 800c048:	4452      	add	r2, sl
 800c04a:	b289      	uxth	r1, r1
 800c04c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c050:	f84e 1b04 	str.w	r1, [lr], #4
 800c054:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c058:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c05c:	f8be 1000 	ldrh.w	r1, [lr]
 800c060:	fb09 110a 	mla	r1, r9, sl, r1
 800c064:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c068:	4567      	cmp	r7, ip
 800c06a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c06e:	d8e5      	bhi.n	800c03c <__multiply+0x10c>
 800c070:	9a01      	ldr	r2, [sp, #4]
 800c072:	50a9      	str	r1, [r5, r2]
 800c074:	3504      	adds	r5, #4
 800c076:	e799      	b.n	800bfac <__multiply+0x7c>
 800c078:	3e01      	subs	r6, #1
 800c07a:	e79b      	b.n	800bfb4 <__multiply+0x84>
 800c07c:	0800dad8 	.word	0x0800dad8
 800c080:	0800dae9 	.word	0x0800dae9

0800c084 <__pow5mult>:
 800c084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c088:	4615      	mov	r5, r2
 800c08a:	f012 0203 	ands.w	r2, r2, #3
 800c08e:	4606      	mov	r6, r0
 800c090:	460f      	mov	r7, r1
 800c092:	d007      	beq.n	800c0a4 <__pow5mult+0x20>
 800c094:	4c25      	ldr	r4, [pc, #148]	; (800c12c <__pow5mult+0xa8>)
 800c096:	3a01      	subs	r2, #1
 800c098:	2300      	movs	r3, #0
 800c09a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c09e:	f7ff fe9d 	bl	800bddc <__multadd>
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	10ad      	asrs	r5, r5, #2
 800c0a6:	d03d      	beq.n	800c124 <__pow5mult+0xa0>
 800c0a8:	69f4      	ldr	r4, [r6, #28]
 800c0aa:	b97c      	cbnz	r4, 800c0cc <__pow5mult+0x48>
 800c0ac:	2010      	movs	r0, #16
 800c0ae:	f7fe f94d 	bl	800a34c <malloc>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	61f0      	str	r0, [r6, #28]
 800c0b6:	b928      	cbnz	r0, 800c0c4 <__pow5mult+0x40>
 800c0b8:	4b1d      	ldr	r3, [pc, #116]	; (800c130 <__pow5mult+0xac>)
 800c0ba:	481e      	ldr	r0, [pc, #120]	; (800c134 <__pow5mult+0xb0>)
 800c0bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c0c0:	f000 fbd4 	bl	800c86c <__assert_func>
 800c0c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0c8:	6004      	str	r4, [r0, #0]
 800c0ca:	60c4      	str	r4, [r0, #12]
 800c0cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c0d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0d4:	b94c      	cbnz	r4, 800c0ea <__pow5mult+0x66>
 800c0d6:	f240 2171 	movw	r1, #625	; 0x271
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7ff ff12 	bl	800bf04 <__i2b>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	6003      	str	r3, [r0, #0]
 800c0ea:	f04f 0900 	mov.w	r9, #0
 800c0ee:	07eb      	lsls	r3, r5, #31
 800c0f0:	d50a      	bpl.n	800c108 <__pow5mult+0x84>
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7ff ff1a 	bl	800bf30 <__multiply>
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4680      	mov	r8, r0
 800c100:	4630      	mov	r0, r6
 800c102:	f7ff fe49 	bl	800bd98 <_Bfree>
 800c106:	4647      	mov	r7, r8
 800c108:	106d      	asrs	r5, r5, #1
 800c10a:	d00b      	beq.n	800c124 <__pow5mult+0xa0>
 800c10c:	6820      	ldr	r0, [r4, #0]
 800c10e:	b938      	cbnz	r0, 800c120 <__pow5mult+0x9c>
 800c110:	4622      	mov	r2, r4
 800c112:	4621      	mov	r1, r4
 800c114:	4630      	mov	r0, r6
 800c116:	f7ff ff0b 	bl	800bf30 <__multiply>
 800c11a:	6020      	str	r0, [r4, #0]
 800c11c:	f8c0 9000 	str.w	r9, [r0]
 800c120:	4604      	mov	r4, r0
 800c122:	e7e4      	b.n	800c0ee <__pow5mult+0x6a>
 800c124:	4638      	mov	r0, r7
 800c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12a:	bf00      	nop
 800c12c:	0800dc38 	.word	0x0800dc38
 800c130:	0800da69 	.word	0x0800da69
 800c134:	0800dae9 	.word	0x0800dae9

0800c138 <__lshift>:
 800c138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c13c:	460c      	mov	r4, r1
 800c13e:	6849      	ldr	r1, [r1, #4]
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c146:	68a3      	ldr	r3, [r4, #8]
 800c148:	4607      	mov	r7, r0
 800c14a:	4691      	mov	r9, r2
 800c14c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c150:	f108 0601 	add.w	r6, r8, #1
 800c154:	42b3      	cmp	r3, r6
 800c156:	db0b      	blt.n	800c170 <__lshift+0x38>
 800c158:	4638      	mov	r0, r7
 800c15a:	f7ff fddd 	bl	800bd18 <_Balloc>
 800c15e:	4605      	mov	r5, r0
 800c160:	b948      	cbnz	r0, 800c176 <__lshift+0x3e>
 800c162:	4602      	mov	r2, r0
 800c164:	4b28      	ldr	r3, [pc, #160]	; (800c208 <__lshift+0xd0>)
 800c166:	4829      	ldr	r0, [pc, #164]	; (800c20c <__lshift+0xd4>)
 800c168:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c16c:	f000 fb7e 	bl	800c86c <__assert_func>
 800c170:	3101      	adds	r1, #1
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	e7ee      	b.n	800c154 <__lshift+0x1c>
 800c176:	2300      	movs	r3, #0
 800c178:	f100 0114 	add.w	r1, r0, #20
 800c17c:	f100 0210 	add.w	r2, r0, #16
 800c180:	4618      	mov	r0, r3
 800c182:	4553      	cmp	r3, sl
 800c184:	db33      	blt.n	800c1ee <__lshift+0xb6>
 800c186:	6920      	ldr	r0, [r4, #16]
 800c188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c18c:	f104 0314 	add.w	r3, r4, #20
 800c190:	f019 091f 	ands.w	r9, r9, #31
 800c194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c19c:	d02b      	beq.n	800c1f6 <__lshift+0xbe>
 800c19e:	f1c9 0e20 	rsb	lr, r9, #32
 800c1a2:	468a      	mov	sl, r1
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	6818      	ldr	r0, [r3, #0]
 800c1a8:	fa00 f009 	lsl.w	r0, r0, r9
 800c1ac:	4310      	orrs	r0, r2
 800c1ae:	f84a 0b04 	str.w	r0, [sl], #4
 800c1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b6:	459c      	cmp	ip, r3
 800c1b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1bc:	d8f3      	bhi.n	800c1a6 <__lshift+0x6e>
 800c1be:	ebac 0304 	sub.w	r3, ip, r4
 800c1c2:	3b15      	subs	r3, #21
 800c1c4:	f023 0303 	bic.w	r3, r3, #3
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	f104 0015 	add.w	r0, r4, #21
 800c1ce:	4584      	cmp	ip, r0
 800c1d0:	bf38      	it	cc
 800c1d2:	2304      	movcc	r3, #4
 800c1d4:	50ca      	str	r2, [r1, r3]
 800c1d6:	b10a      	cbz	r2, 800c1dc <__lshift+0xa4>
 800c1d8:	f108 0602 	add.w	r6, r8, #2
 800c1dc:	3e01      	subs	r6, #1
 800c1de:	4638      	mov	r0, r7
 800c1e0:	612e      	str	r6, [r5, #16]
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	f7ff fdd8 	bl	800bd98 <_Bfree>
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	e7c5      	b.n	800c182 <__lshift+0x4a>
 800c1f6:	3904      	subs	r1, #4
 800c1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c200:	459c      	cmp	ip, r3
 800c202:	d8f9      	bhi.n	800c1f8 <__lshift+0xc0>
 800c204:	e7ea      	b.n	800c1dc <__lshift+0xa4>
 800c206:	bf00      	nop
 800c208:	0800dad8 	.word	0x0800dad8
 800c20c:	0800dae9 	.word	0x0800dae9

0800c210 <__mcmp>:
 800c210:	b530      	push	{r4, r5, lr}
 800c212:	6902      	ldr	r2, [r0, #16]
 800c214:	690c      	ldr	r4, [r1, #16]
 800c216:	1b12      	subs	r2, r2, r4
 800c218:	d10e      	bne.n	800c238 <__mcmp+0x28>
 800c21a:	f100 0314 	add.w	r3, r0, #20
 800c21e:	3114      	adds	r1, #20
 800c220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c22c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c230:	42a5      	cmp	r5, r4
 800c232:	d003      	beq.n	800c23c <__mcmp+0x2c>
 800c234:	d305      	bcc.n	800c242 <__mcmp+0x32>
 800c236:	2201      	movs	r2, #1
 800c238:	4610      	mov	r0, r2
 800c23a:	bd30      	pop	{r4, r5, pc}
 800c23c:	4283      	cmp	r3, r0
 800c23e:	d3f3      	bcc.n	800c228 <__mcmp+0x18>
 800c240:	e7fa      	b.n	800c238 <__mcmp+0x28>
 800c242:	f04f 32ff 	mov.w	r2, #4294967295
 800c246:	e7f7      	b.n	800c238 <__mcmp+0x28>

0800c248 <__mdiff>:
 800c248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	460c      	mov	r4, r1
 800c24e:	4606      	mov	r6, r0
 800c250:	4611      	mov	r1, r2
 800c252:	4620      	mov	r0, r4
 800c254:	4690      	mov	r8, r2
 800c256:	f7ff ffdb 	bl	800c210 <__mcmp>
 800c25a:	1e05      	subs	r5, r0, #0
 800c25c:	d110      	bne.n	800c280 <__mdiff+0x38>
 800c25e:	4629      	mov	r1, r5
 800c260:	4630      	mov	r0, r6
 800c262:	f7ff fd59 	bl	800bd18 <_Balloc>
 800c266:	b930      	cbnz	r0, 800c276 <__mdiff+0x2e>
 800c268:	4b3a      	ldr	r3, [pc, #232]	; (800c354 <__mdiff+0x10c>)
 800c26a:	4602      	mov	r2, r0
 800c26c:	f240 2137 	movw	r1, #567	; 0x237
 800c270:	4839      	ldr	r0, [pc, #228]	; (800c358 <__mdiff+0x110>)
 800c272:	f000 fafb 	bl	800c86c <__assert_func>
 800c276:	2301      	movs	r3, #1
 800c278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c27c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c280:	bfa4      	itt	ge
 800c282:	4643      	movge	r3, r8
 800c284:	46a0      	movge	r8, r4
 800c286:	4630      	mov	r0, r6
 800c288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c28c:	bfa6      	itte	ge
 800c28e:	461c      	movge	r4, r3
 800c290:	2500      	movge	r5, #0
 800c292:	2501      	movlt	r5, #1
 800c294:	f7ff fd40 	bl	800bd18 <_Balloc>
 800c298:	b920      	cbnz	r0, 800c2a4 <__mdiff+0x5c>
 800c29a:	4b2e      	ldr	r3, [pc, #184]	; (800c354 <__mdiff+0x10c>)
 800c29c:	4602      	mov	r2, r0
 800c29e:	f240 2145 	movw	r1, #581	; 0x245
 800c2a2:	e7e5      	b.n	800c270 <__mdiff+0x28>
 800c2a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c2a8:	6926      	ldr	r6, [r4, #16]
 800c2aa:	60c5      	str	r5, [r0, #12]
 800c2ac:	f104 0914 	add.w	r9, r4, #20
 800c2b0:	f108 0514 	add.w	r5, r8, #20
 800c2b4:	f100 0e14 	add.w	lr, r0, #20
 800c2b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c2bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2c0:	f108 0210 	add.w	r2, r8, #16
 800c2c4:	46f2      	mov	sl, lr
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2d0:	fa11 f88b 	uxtah	r8, r1, fp
 800c2d4:	b299      	uxth	r1, r3
 800c2d6:	0c1b      	lsrs	r3, r3, #16
 800c2d8:	eba8 0801 	sub.w	r8, r8, r1
 800c2dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2e4:	fa1f f888 	uxth.w	r8, r8
 800c2e8:	1419      	asrs	r1, r3, #16
 800c2ea:	454e      	cmp	r6, r9
 800c2ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2f0:	f84a 3b04 	str.w	r3, [sl], #4
 800c2f4:	d8e8      	bhi.n	800c2c8 <__mdiff+0x80>
 800c2f6:	1b33      	subs	r3, r6, r4
 800c2f8:	3b15      	subs	r3, #21
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	3304      	adds	r3, #4
 800c300:	3415      	adds	r4, #21
 800c302:	42a6      	cmp	r6, r4
 800c304:	bf38      	it	cc
 800c306:	2304      	movcc	r3, #4
 800c308:	441d      	add	r5, r3
 800c30a:	4473      	add	r3, lr
 800c30c:	469e      	mov	lr, r3
 800c30e:	462e      	mov	r6, r5
 800c310:	4566      	cmp	r6, ip
 800c312:	d30e      	bcc.n	800c332 <__mdiff+0xea>
 800c314:	f10c 0203 	add.w	r2, ip, #3
 800c318:	1b52      	subs	r2, r2, r5
 800c31a:	f022 0203 	bic.w	r2, r2, #3
 800c31e:	3d03      	subs	r5, #3
 800c320:	45ac      	cmp	ip, r5
 800c322:	bf38      	it	cc
 800c324:	2200      	movcc	r2, #0
 800c326:	4413      	add	r3, r2
 800c328:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c32c:	b17a      	cbz	r2, 800c34e <__mdiff+0x106>
 800c32e:	6107      	str	r7, [r0, #16]
 800c330:	e7a4      	b.n	800c27c <__mdiff+0x34>
 800c332:	f856 8b04 	ldr.w	r8, [r6], #4
 800c336:	fa11 f288 	uxtah	r2, r1, r8
 800c33a:	1414      	asrs	r4, r2, #16
 800c33c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c340:	b292      	uxth	r2, r2
 800c342:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c346:	f84e 2b04 	str.w	r2, [lr], #4
 800c34a:	1421      	asrs	r1, r4, #16
 800c34c:	e7e0      	b.n	800c310 <__mdiff+0xc8>
 800c34e:	3f01      	subs	r7, #1
 800c350:	e7ea      	b.n	800c328 <__mdiff+0xe0>
 800c352:	bf00      	nop
 800c354:	0800dad8 	.word	0x0800dad8
 800c358:	0800dae9 	.word	0x0800dae9

0800c35c <__d2b>:
 800c35c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c360:	460f      	mov	r7, r1
 800c362:	2101      	movs	r1, #1
 800c364:	ec59 8b10 	vmov	r8, r9, d0
 800c368:	4616      	mov	r6, r2
 800c36a:	f7ff fcd5 	bl	800bd18 <_Balloc>
 800c36e:	4604      	mov	r4, r0
 800c370:	b930      	cbnz	r0, 800c380 <__d2b+0x24>
 800c372:	4602      	mov	r2, r0
 800c374:	4b24      	ldr	r3, [pc, #144]	; (800c408 <__d2b+0xac>)
 800c376:	4825      	ldr	r0, [pc, #148]	; (800c40c <__d2b+0xb0>)
 800c378:	f240 310f 	movw	r1, #783	; 0x30f
 800c37c:	f000 fa76 	bl	800c86c <__assert_func>
 800c380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c388:	bb2d      	cbnz	r5, 800c3d6 <__d2b+0x7a>
 800c38a:	9301      	str	r3, [sp, #4]
 800c38c:	f1b8 0300 	subs.w	r3, r8, #0
 800c390:	d026      	beq.n	800c3e0 <__d2b+0x84>
 800c392:	4668      	mov	r0, sp
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	f7ff fd87 	bl	800bea8 <__lo0bits>
 800c39a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c39e:	b1e8      	cbz	r0, 800c3dc <__d2b+0x80>
 800c3a0:	f1c0 0320 	rsb	r3, r0, #32
 800c3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a8:	430b      	orrs	r3, r1
 800c3aa:	40c2      	lsrs	r2, r0
 800c3ac:	6163      	str	r3, [r4, #20]
 800c3ae:	9201      	str	r2, [sp, #4]
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	61a3      	str	r3, [r4, #24]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bf14      	ite	ne
 800c3b8:	2202      	movne	r2, #2
 800c3ba:	2201      	moveq	r2, #1
 800c3bc:	6122      	str	r2, [r4, #16]
 800c3be:	b1bd      	cbz	r5, 800c3f0 <__d2b+0x94>
 800c3c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3c4:	4405      	add	r5, r0
 800c3c6:	603d      	str	r5, [r7, #0]
 800c3c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3cc:	6030      	str	r0, [r6, #0]
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	b003      	add	sp, #12
 800c3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3da:	e7d6      	b.n	800c38a <__d2b+0x2e>
 800c3dc:	6161      	str	r1, [r4, #20]
 800c3de:	e7e7      	b.n	800c3b0 <__d2b+0x54>
 800c3e0:	a801      	add	r0, sp, #4
 800c3e2:	f7ff fd61 	bl	800bea8 <__lo0bits>
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	6163      	str	r3, [r4, #20]
 800c3ea:	3020      	adds	r0, #32
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	e7e5      	b.n	800c3bc <__d2b+0x60>
 800c3f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3f8:	6038      	str	r0, [r7, #0]
 800c3fa:	6918      	ldr	r0, [r3, #16]
 800c3fc:	f7ff fd34 	bl	800be68 <__hi0bits>
 800c400:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c404:	e7e2      	b.n	800c3cc <__d2b+0x70>
 800c406:	bf00      	nop
 800c408:	0800dad8 	.word	0x0800dad8
 800c40c:	0800dae9 	.word	0x0800dae9

0800c410 <__ssputs_r>:
 800c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c414:	688e      	ldr	r6, [r1, #8]
 800c416:	461f      	mov	r7, r3
 800c418:	42be      	cmp	r6, r7
 800c41a:	680b      	ldr	r3, [r1, #0]
 800c41c:	4682      	mov	sl, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	4690      	mov	r8, r2
 800c422:	d82c      	bhi.n	800c47e <__ssputs_r+0x6e>
 800c424:	898a      	ldrh	r2, [r1, #12]
 800c426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c42a:	d026      	beq.n	800c47a <__ssputs_r+0x6a>
 800c42c:	6965      	ldr	r5, [r4, #20]
 800c42e:	6909      	ldr	r1, [r1, #16]
 800c430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c434:	eba3 0901 	sub.w	r9, r3, r1
 800c438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c43c:	1c7b      	adds	r3, r7, #1
 800c43e:	444b      	add	r3, r9
 800c440:	106d      	asrs	r5, r5, #1
 800c442:	429d      	cmp	r5, r3
 800c444:	bf38      	it	cc
 800c446:	461d      	movcc	r5, r3
 800c448:	0553      	lsls	r3, r2, #21
 800c44a:	d527      	bpl.n	800c49c <__ssputs_r+0x8c>
 800c44c:	4629      	mov	r1, r5
 800c44e:	f7fd ffa5 	bl	800a39c <_malloc_r>
 800c452:	4606      	mov	r6, r0
 800c454:	b360      	cbz	r0, 800c4b0 <__ssputs_r+0xa0>
 800c456:	6921      	ldr	r1, [r4, #16]
 800c458:	464a      	mov	r2, r9
 800c45a:	f000 f9f9 	bl	800c850 <memcpy>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c468:	81a3      	strh	r3, [r4, #12]
 800c46a:	6126      	str	r6, [r4, #16]
 800c46c:	6165      	str	r5, [r4, #20]
 800c46e:	444e      	add	r6, r9
 800c470:	eba5 0509 	sub.w	r5, r5, r9
 800c474:	6026      	str	r6, [r4, #0]
 800c476:	60a5      	str	r5, [r4, #8]
 800c478:	463e      	mov	r6, r7
 800c47a:	42be      	cmp	r6, r7
 800c47c:	d900      	bls.n	800c480 <__ssputs_r+0x70>
 800c47e:	463e      	mov	r6, r7
 800c480:	6820      	ldr	r0, [r4, #0]
 800c482:	4632      	mov	r2, r6
 800c484:	4641      	mov	r1, r8
 800c486:	f000 f9c9 	bl	800c81c <memmove>
 800c48a:	68a3      	ldr	r3, [r4, #8]
 800c48c:	1b9b      	subs	r3, r3, r6
 800c48e:	60a3      	str	r3, [r4, #8]
 800c490:	6823      	ldr	r3, [r4, #0]
 800c492:	4433      	add	r3, r6
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	2000      	movs	r0, #0
 800c498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c49c:	462a      	mov	r2, r5
 800c49e:	f000 fa2b 	bl	800c8f8 <_realloc_r>
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d1e0      	bne.n	800c46a <__ssputs_r+0x5a>
 800c4a8:	6921      	ldr	r1, [r4, #16]
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	f7ff fbe8 	bl	800bc80 <_free_r>
 800c4b0:	230c      	movs	r3, #12
 800c4b2:	f8ca 3000 	str.w	r3, [sl]
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4bc:	81a3      	strh	r3, [r4, #12]
 800c4be:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c2:	e7e9      	b.n	800c498 <__ssputs_r+0x88>

0800c4c4 <_svfiprintf_r>:
 800c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	4698      	mov	r8, r3
 800c4ca:	898b      	ldrh	r3, [r1, #12]
 800c4cc:	061b      	lsls	r3, r3, #24
 800c4ce:	b09d      	sub	sp, #116	; 0x74
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	4614      	mov	r4, r2
 800c4d6:	d50e      	bpl.n	800c4f6 <_svfiprintf_r+0x32>
 800c4d8:	690b      	ldr	r3, [r1, #16]
 800c4da:	b963      	cbnz	r3, 800c4f6 <_svfiprintf_r+0x32>
 800c4dc:	2140      	movs	r1, #64	; 0x40
 800c4de:	f7fd ff5d 	bl	800a39c <_malloc_r>
 800c4e2:	6028      	str	r0, [r5, #0]
 800c4e4:	6128      	str	r0, [r5, #16]
 800c4e6:	b920      	cbnz	r0, 800c4f2 <_svfiprintf_r+0x2e>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	603b      	str	r3, [r7, #0]
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	e0d0      	b.n	800c694 <_svfiprintf_r+0x1d0>
 800c4f2:	2340      	movs	r3, #64	; 0x40
 800c4f4:	616b      	str	r3, [r5, #20]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4fa:	2320      	movs	r3, #32
 800c4fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c500:	f8cd 800c 	str.w	r8, [sp, #12]
 800c504:	2330      	movs	r3, #48	; 0x30
 800c506:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c6ac <_svfiprintf_r+0x1e8>
 800c50a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c50e:	f04f 0901 	mov.w	r9, #1
 800c512:	4623      	mov	r3, r4
 800c514:	469a      	mov	sl, r3
 800c516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c51a:	b10a      	cbz	r2, 800c520 <_svfiprintf_r+0x5c>
 800c51c:	2a25      	cmp	r2, #37	; 0x25
 800c51e:	d1f9      	bne.n	800c514 <_svfiprintf_r+0x50>
 800c520:	ebba 0b04 	subs.w	fp, sl, r4
 800c524:	d00b      	beq.n	800c53e <_svfiprintf_r+0x7a>
 800c526:	465b      	mov	r3, fp
 800c528:	4622      	mov	r2, r4
 800c52a:	4629      	mov	r1, r5
 800c52c:	4638      	mov	r0, r7
 800c52e:	f7ff ff6f 	bl	800c410 <__ssputs_r>
 800c532:	3001      	adds	r0, #1
 800c534:	f000 80a9 	beq.w	800c68a <_svfiprintf_r+0x1c6>
 800c538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c53a:	445a      	add	r2, fp
 800c53c:	9209      	str	r2, [sp, #36]	; 0x24
 800c53e:	f89a 3000 	ldrb.w	r3, [sl]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 80a1 	beq.w	800c68a <_svfiprintf_r+0x1c6>
 800c548:	2300      	movs	r3, #0
 800c54a:	f04f 32ff 	mov.w	r2, #4294967295
 800c54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c552:	f10a 0a01 	add.w	sl, sl, #1
 800c556:	9304      	str	r3, [sp, #16]
 800c558:	9307      	str	r3, [sp, #28]
 800c55a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c55e:	931a      	str	r3, [sp, #104]	; 0x68
 800c560:	4654      	mov	r4, sl
 800c562:	2205      	movs	r2, #5
 800c564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c568:	4850      	ldr	r0, [pc, #320]	; (800c6ac <_svfiprintf_r+0x1e8>)
 800c56a:	f7f3 feb9 	bl	80002e0 <memchr>
 800c56e:	9a04      	ldr	r2, [sp, #16]
 800c570:	b9d8      	cbnz	r0, 800c5aa <_svfiprintf_r+0xe6>
 800c572:	06d0      	lsls	r0, r2, #27
 800c574:	bf44      	itt	mi
 800c576:	2320      	movmi	r3, #32
 800c578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c57c:	0711      	lsls	r1, r2, #28
 800c57e:	bf44      	itt	mi
 800c580:	232b      	movmi	r3, #43	; 0x2b
 800c582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c586:	f89a 3000 	ldrb.w	r3, [sl]
 800c58a:	2b2a      	cmp	r3, #42	; 0x2a
 800c58c:	d015      	beq.n	800c5ba <_svfiprintf_r+0xf6>
 800c58e:	9a07      	ldr	r2, [sp, #28]
 800c590:	4654      	mov	r4, sl
 800c592:	2000      	movs	r0, #0
 800c594:	f04f 0c0a 	mov.w	ip, #10
 800c598:	4621      	mov	r1, r4
 800c59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c59e:	3b30      	subs	r3, #48	; 0x30
 800c5a0:	2b09      	cmp	r3, #9
 800c5a2:	d94d      	bls.n	800c640 <_svfiprintf_r+0x17c>
 800c5a4:	b1b0      	cbz	r0, 800c5d4 <_svfiprintf_r+0x110>
 800c5a6:	9207      	str	r2, [sp, #28]
 800c5a8:	e014      	b.n	800c5d4 <_svfiprintf_r+0x110>
 800c5aa:	eba0 0308 	sub.w	r3, r0, r8
 800c5ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	46a2      	mov	sl, r4
 800c5b8:	e7d2      	b.n	800c560 <_svfiprintf_r+0x9c>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	1d19      	adds	r1, r3, #4
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	9103      	str	r1, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfbb      	ittet	lt
 800c5c6:	425b      	neglt	r3, r3
 800c5c8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5cc:	9307      	strge	r3, [sp, #28]
 800c5ce:	9307      	strlt	r3, [sp, #28]
 800c5d0:	bfb8      	it	lt
 800c5d2:	9204      	strlt	r2, [sp, #16]
 800c5d4:	7823      	ldrb	r3, [r4, #0]
 800c5d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c5d8:	d10c      	bne.n	800c5f4 <_svfiprintf_r+0x130>
 800c5da:	7863      	ldrb	r3, [r4, #1]
 800c5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5de:	d134      	bne.n	800c64a <_svfiprintf_r+0x186>
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	1d1a      	adds	r2, r3, #4
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	9203      	str	r2, [sp, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfb8      	it	lt
 800c5ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5f0:	3402      	adds	r4, #2
 800c5f2:	9305      	str	r3, [sp, #20]
 800c5f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c6bc <_svfiprintf_r+0x1f8>
 800c5f8:	7821      	ldrb	r1, [r4, #0]
 800c5fa:	2203      	movs	r2, #3
 800c5fc:	4650      	mov	r0, sl
 800c5fe:	f7f3 fe6f 	bl	80002e0 <memchr>
 800c602:	b138      	cbz	r0, 800c614 <_svfiprintf_r+0x150>
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	eba0 000a 	sub.w	r0, r0, sl
 800c60a:	2240      	movs	r2, #64	; 0x40
 800c60c:	4082      	lsls	r2, r0
 800c60e:	4313      	orrs	r3, r2
 800c610:	3401      	adds	r4, #1
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c618:	4825      	ldr	r0, [pc, #148]	; (800c6b0 <_svfiprintf_r+0x1ec>)
 800c61a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c61e:	2206      	movs	r2, #6
 800c620:	f7f3 fe5e 	bl	80002e0 <memchr>
 800c624:	2800      	cmp	r0, #0
 800c626:	d038      	beq.n	800c69a <_svfiprintf_r+0x1d6>
 800c628:	4b22      	ldr	r3, [pc, #136]	; (800c6b4 <_svfiprintf_r+0x1f0>)
 800c62a:	bb1b      	cbnz	r3, 800c674 <_svfiprintf_r+0x1b0>
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	3307      	adds	r3, #7
 800c630:	f023 0307 	bic.w	r3, r3, #7
 800c634:	3308      	adds	r3, #8
 800c636:	9303      	str	r3, [sp, #12]
 800c638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63a:	4433      	add	r3, r6
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	e768      	b.n	800c512 <_svfiprintf_r+0x4e>
 800c640:	fb0c 3202 	mla	r2, ip, r2, r3
 800c644:	460c      	mov	r4, r1
 800c646:	2001      	movs	r0, #1
 800c648:	e7a6      	b.n	800c598 <_svfiprintf_r+0xd4>
 800c64a:	2300      	movs	r3, #0
 800c64c:	3401      	adds	r4, #1
 800c64e:	9305      	str	r3, [sp, #20]
 800c650:	4619      	mov	r1, r3
 800c652:	f04f 0c0a 	mov.w	ip, #10
 800c656:	4620      	mov	r0, r4
 800c658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c65c:	3a30      	subs	r2, #48	; 0x30
 800c65e:	2a09      	cmp	r2, #9
 800c660:	d903      	bls.n	800c66a <_svfiprintf_r+0x1a6>
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0c6      	beq.n	800c5f4 <_svfiprintf_r+0x130>
 800c666:	9105      	str	r1, [sp, #20]
 800c668:	e7c4      	b.n	800c5f4 <_svfiprintf_r+0x130>
 800c66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c66e:	4604      	mov	r4, r0
 800c670:	2301      	movs	r3, #1
 800c672:	e7f0      	b.n	800c656 <_svfiprintf_r+0x192>
 800c674:	ab03      	add	r3, sp, #12
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	462a      	mov	r2, r5
 800c67a:	4b0f      	ldr	r3, [pc, #60]	; (800c6b8 <_svfiprintf_r+0x1f4>)
 800c67c:	a904      	add	r1, sp, #16
 800c67e:	4638      	mov	r0, r7
 800c680:	f7fd ffaa 	bl	800a5d8 <_printf_float>
 800c684:	1c42      	adds	r2, r0, #1
 800c686:	4606      	mov	r6, r0
 800c688:	d1d6      	bne.n	800c638 <_svfiprintf_r+0x174>
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	065b      	lsls	r3, r3, #25
 800c68e:	f53f af2d 	bmi.w	800c4ec <_svfiprintf_r+0x28>
 800c692:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c694:	b01d      	add	sp, #116	; 0x74
 800c696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69a:	ab03      	add	r3, sp, #12
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	462a      	mov	r2, r5
 800c6a0:	4b05      	ldr	r3, [pc, #20]	; (800c6b8 <_svfiprintf_r+0x1f4>)
 800c6a2:	a904      	add	r1, sp, #16
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7fe fa1f 	bl	800aae8 <_printf_i>
 800c6aa:	e7eb      	b.n	800c684 <_svfiprintf_r+0x1c0>
 800c6ac:	0800dc44 	.word	0x0800dc44
 800c6b0:	0800dc4e 	.word	0x0800dc4e
 800c6b4:	0800a5d9 	.word	0x0800a5d9
 800c6b8:	0800c411 	.word	0x0800c411
 800c6bc:	0800dc4a 	.word	0x0800dc4a

0800c6c0 <__sflush_r>:
 800c6c0:	898a      	ldrh	r2, [r1, #12]
 800c6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	0710      	lsls	r0, r2, #28
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	d458      	bmi.n	800c780 <__sflush_r+0xc0>
 800c6ce:	684b      	ldr	r3, [r1, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dc05      	bgt.n	800c6e0 <__sflush_r+0x20>
 800c6d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	dc02      	bgt.n	800c6e0 <__sflush_r+0x20>
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	d0f9      	beq.n	800c6da <__sflush_r+0x1a>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6ec:	682f      	ldr	r7, [r5, #0]
 800c6ee:	6a21      	ldr	r1, [r4, #32]
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	d032      	beq.n	800c75a <__sflush_r+0x9a>
 800c6f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	075a      	lsls	r2, r3, #29
 800c6fa:	d505      	bpl.n	800c708 <__sflush_r+0x48>
 800c6fc:	6863      	ldr	r3, [r4, #4]
 800c6fe:	1ac0      	subs	r0, r0, r3
 800c700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c702:	b10b      	cbz	r3, 800c708 <__sflush_r+0x48>
 800c704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c706:	1ac0      	subs	r0, r0, r3
 800c708:	2300      	movs	r3, #0
 800c70a:	4602      	mov	r2, r0
 800c70c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c70e:	6a21      	ldr	r1, [r4, #32]
 800c710:	4628      	mov	r0, r5
 800c712:	47b0      	blx	r6
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	d106      	bne.n	800c728 <__sflush_r+0x68>
 800c71a:	6829      	ldr	r1, [r5, #0]
 800c71c:	291d      	cmp	r1, #29
 800c71e:	d82b      	bhi.n	800c778 <__sflush_r+0xb8>
 800c720:	4a29      	ldr	r2, [pc, #164]	; (800c7c8 <__sflush_r+0x108>)
 800c722:	410a      	asrs	r2, r1
 800c724:	07d6      	lsls	r6, r2, #31
 800c726:	d427      	bmi.n	800c778 <__sflush_r+0xb8>
 800c728:	2200      	movs	r2, #0
 800c72a:	6062      	str	r2, [r4, #4]
 800c72c:	04d9      	lsls	r1, r3, #19
 800c72e:	6922      	ldr	r2, [r4, #16]
 800c730:	6022      	str	r2, [r4, #0]
 800c732:	d504      	bpl.n	800c73e <__sflush_r+0x7e>
 800c734:	1c42      	adds	r2, r0, #1
 800c736:	d101      	bne.n	800c73c <__sflush_r+0x7c>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b903      	cbnz	r3, 800c73e <__sflush_r+0x7e>
 800c73c:	6560      	str	r0, [r4, #84]	; 0x54
 800c73e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c740:	602f      	str	r7, [r5, #0]
 800c742:	2900      	cmp	r1, #0
 800c744:	d0c9      	beq.n	800c6da <__sflush_r+0x1a>
 800c746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c74a:	4299      	cmp	r1, r3
 800c74c:	d002      	beq.n	800c754 <__sflush_r+0x94>
 800c74e:	4628      	mov	r0, r5
 800c750:	f7ff fa96 	bl	800bc80 <_free_r>
 800c754:	2000      	movs	r0, #0
 800c756:	6360      	str	r0, [r4, #52]	; 0x34
 800c758:	e7c0      	b.n	800c6dc <__sflush_r+0x1c>
 800c75a:	2301      	movs	r3, #1
 800c75c:	4628      	mov	r0, r5
 800c75e:	47b0      	blx	r6
 800c760:	1c41      	adds	r1, r0, #1
 800c762:	d1c8      	bne.n	800c6f6 <__sflush_r+0x36>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d0c5      	beq.n	800c6f6 <__sflush_r+0x36>
 800c76a:	2b1d      	cmp	r3, #29
 800c76c:	d001      	beq.n	800c772 <__sflush_r+0xb2>
 800c76e:	2b16      	cmp	r3, #22
 800c770:	d101      	bne.n	800c776 <__sflush_r+0xb6>
 800c772:	602f      	str	r7, [r5, #0]
 800c774:	e7b1      	b.n	800c6da <__sflush_r+0x1a>
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c77c:	81a3      	strh	r3, [r4, #12]
 800c77e:	e7ad      	b.n	800c6dc <__sflush_r+0x1c>
 800c780:	690f      	ldr	r7, [r1, #16]
 800c782:	2f00      	cmp	r7, #0
 800c784:	d0a9      	beq.n	800c6da <__sflush_r+0x1a>
 800c786:	0793      	lsls	r3, r2, #30
 800c788:	680e      	ldr	r6, [r1, #0]
 800c78a:	bf08      	it	eq
 800c78c:	694b      	ldreq	r3, [r1, #20]
 800c78e:	600f      	str	r7, [r1, #0]
 800c790:	bf18      	it	ne
 800c792:	2300      	movne	r3, #0
 800c794:	eba6 0807 	sub.w	r8, r6, r7
 800c798:	608b      	str	r3, [r1, #8]
 800c79a:	f1b8 0f00 	cmp.w	r8, #0
 800c79e:	dd9c      	ble.n	800c6da <__sflush_r+0x1a>
 800c7a0:	6a21      	ldr	r1, [r4, #32]
 800c7a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7a4:	4643      	mov	r3, r8
 800c7a6:	463a      	mov	r2, r7
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b0      	blx	r6
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	dc06      	bgt.n	800c7be <__sflush_r+0xfe>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7b6:	81a3      	strh	r3, [r4, #12]
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7bc:	e78e      	b.n	800c6dc <__sflush_r+0x1c>
 800c7be:	4407      	add	r7, r0
 800c7c0:	eba8 0800 	sub.w	r8, r8, r0
 800c7c4:	e7e9      	b.n	800c79a <__sflush_r+0xda>
 800c7c6:	bf00      	nop
 800c7c8:	dfbffffe 	.word	0xdfbffffe

0800c7cc <_fflush_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	690b      	ldr	r3, [r1, #16]
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	b913      	cbnz	r3, 800c7dc <_fflush_r+0x10>
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	4628      	mov	r0, r5
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	b118      	cbz	r0, 800c7e6 <_fflush_r+0x1a>
 800c7de:	6a03      	ldr	r3, [r0, #32]
 800c7e0:	b90b      	cbnz	r3, 800c7e6 <_fflush_r+0x1a>
 800c7e2:	f7fe fb2f 	bl	800ae44 <__sinit>
 800c7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0f3      	beq.n	800c7d6 <_fflush_r+0xa>
 800c7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7f0:	07d0      	lsls	r0, r2, #31
 800c7f2:	d404      	bmi.n	800c7fe <_fflush_r+0x32>
 800c7f4:	0599      	lsls	r1, r3, #22
 800c7f6:	d402      	bmi.n	800c7fe <_fflush_r+0x32>
 800c7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7fa:	f7fe fc4a 	bl	800b092 <__retarget_lock_acquire_recursive>
 800c7fe:	4628      	mov	r0, r5
 800c800:	4621      	mov	r1, r4
 800c802:	f7ff ff5d 	bl	800c6c0 <__sflush_r>
 800c806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c808:	07da      	lsls	r2, r3, #31
 800c80a:	4605      	mov	r5, r0
 800c80c:	d4e4      	bmi.n	800c7d8 <_fflush_r+0xc>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	059b      	lsls	r3, r3, #22
 800c812:	d4e1      	bmi.n	800c7d8 <_fflush_r+0xc>
 800c814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c816:	f7fe fc3d 	bl	800b094 <__retarget_lock_release_recursive>
 800c81a:	e7dd      	b.n	800c7d8 <_fflush_r+0xc>

0800c81c <memmove>:
 800c81c:	4288      	cmp	r0, r1
 800c81e:	b510      	push	{r4, lr}
 800c820:	eb01 0402 	add.w	r4, r1, r2
 800c824:	d902      	bls.n	800c82c <memmove+0x10>
 800c826:	4284      	cmp	r4, r0
 800c828:	4623      	mov	r3, r4
 800c82a:	d807      	bhi.n	800c83c <memmove+0x20>
 800c82c:	1e43      	subs	r3, r0, #1
 800c82e:	42a1      	cmp	r1, r4
 800c830:	d008      	beq.n	800c844 <memmove+0x28>
 800c832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c83a:	e7f8      	b.n	800c82e <memmove+0x12>
 800c83c:	4402      	add	r2, r0
 800c83e:	4601      	mov	r1, r0
 800c840:	428a      	cmp	r2, r1
 800c842:	d100      	bne.n	800c846 <memmove+0x2a>
 800c844:	bd10      	pop	{r4, pc}
 800c846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c84e:	e7f7      	b.n	800c840 <memmove+0x24>

0800c850 <memcpy>:
 800c850:	440a      	add	r2, r1
 800c852:	4291      	cmp	r1, r2
 800c854:	f100 33ff 	add.w	r3, r0, #4294967295
 800c858:	d100      	bne.n	800c85c <memcpy+0xc>
 800c85a:	4770      	bx	lr
 800c85c:	b510      	push	{r4, lr}
 800c85e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c862:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c866:	4291      	cmp	r1, r2
 800c868:	d1f9      	bne.n	800c85e <memcpy+0xe>
 800c86a:	bd10      	pop	{r4, pc}

0800c86c <__assert_func>:
 800c86c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c86e:	4614      	mov	r4, r2
 800c870:	461a      	mov	r2, r3
 800c872:	4b09      	ldr	r3, [pc, #36]	; (800c898 <__assert_func+0x2c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4605      	mov	r5, r0
 800c878:	68d8      	ldr	r0, [r3, #12]
 800c87a:	b14c      	cbz	r4, 800c890 <__assert_func+0x24>
 800c87c:	4b07      	ldr	r3, [pc, #28]	; (800c89c <__assert_func+0x30>)
 800c87e:	9100      	str	r1, [sp, #0]
 800c880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c884:	4906      	ldr	r1, [pc, #24]	; (800c8a0 <__assert_func+0x34>)
 800c886:	462b      	mov	r3, r5
 800c888:	f000 f872 	bl	800c970 <fiprintf>
 800c88c:	f000 f882 	bl	800c994 <abort>
 800c890:	4b04      	ldr	r3, [pc, #16]	; (800c8a4 <__assert_func+0x38>)
 800c892:	461c      	mov	r4, r3
 800c894:	e7f3      	b.n	800c87e <__assert_func+0x12>
 800c896:	bf00      	nop
 800c898:	2400015c 	.word	0x2400015c
 800c89c:	0800dc5f 	.word	0x0800dc5f
 800c8a0:	0800dc6c 	.word	0x0800dc6c
 800c8a4:	0800dc9a 	.word	0x0800dc9a

0800c8a8 <_calloc_r>:
 800c8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8aa:	fba1 2402 	umull	r2, r4, r1, r2
 800c8ae:	b94c      	cbnz	r4, 800c8c4 <_calloc_r+0x1c>
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	9201      	str	r2, [sp, #4]
 800c8b4:	f7fd fd72 	bl	800a39c <_malloc_r>
 800c8b8:	9a01      	ldr	r2, [sp, #4]
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	b930      	cbnz	r0, 800c8cc <_calloc_r+0x24>
 800c8be:	4628      	mov	r0, r5
 800c8c0:	b003      	add	sp, #12
 800c8c2:	bd30      	pop	{r4, r5, pc}
 800c8c4:	220c      	movs	r2, #12
 800c8c6:	6002      	str	r2, [r0, #0]
 800c8c8:	2500      	movs	r5, #0
 800c8ca:	e7f8      	b.n	800c8be <_calloc_r+0x16>
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	f7fe fb52 	bl	800af76 <memset>
 800c8d2:	e7f4      	b.n	800c8be <_calloc_r+0x16>

0800c8d4 <__ascii_mbtowc>:
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	b901      	cbnz	r1, 800c8da <__ascii_mbtowc+0x6>
 800c8d8:	a901      	add	r1, sp, #4
 800c8da:	b142      	cbz	r2, 800c8ee <__ascii_mbtowc+0x1a>
 800c8dc:	b14b      	cbz	r3, 800c8f2 <__ascii_mbtowc+0x1e>
 800c8de:	7813      	ldrb	r3, [r2, #0]
 800c8e0:	600b      	str	r3, [r1, #0]
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	1e10      	subs	r0, r2, #0
 800c8e6:	bf18      	it	ne
 800c8e8:	2001      	movne	r0, #1
 800c8ea:	b002      	add	sp, #8
 800c8ec:	4770      	bx	lr
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	e7fb      	b.n	800c8ea <__ascii_mbtowc+0x16>
 800c8f2:	f06f 0001 	mvn.w	r0, #1
 800c8f6:	e7f8      	b.n	800c8ea <__ascii_mbtowc+0x16>

0800c8f8 <_realloc_r>:
 800c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4614      	mov	r4, r2
 800c900:	460e      	mov	r6, r1
 800c902:	b921      	cbnz	r1, 800c90e <_realloc_r+0x16>
 800c904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	4611      	mov	r1, r2
 800c90a:	f7fd bd47 	b.w	800a39c <_malloc_r>
 800c90e:	b92a      	cbnz	r2, 800c91c <_realloc_r+0x24>
 800c910:	f7ff f9b6 	bl	800bc80 <_free_r>
 800c914:	4625      	mov	r5, r4
 800c916:	4628      	mov	r0, r5
 800c918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91c:	f000 f841 	bl	800c9a2 <_malloc_usable_size_r>
 800c920:	4284      	cmp	r4, r0
 800c922:	4607      	mov	r7, r0
 800c924:	d802      	bhi.n	800c92c <_realloc_r+0x34>
 800c926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c92a:	d812      	bhi.n	800c952 <_realloc_r+0x5a>
 800c92c:	4621      	mov	r1, r4
 800c92e:	4640      	mov	r0, r8
 800c930:	f7fd fd34 	bl	800a39c <_malloc_r>
 800c934:	4605      	mov	r5, r0
 800c936:	2800      	cmp	r0, #0
 800c938:	d0ed      	beq.n	800c916 <_realloc_r+0x1e>
 800c93a:	42bc      	cmp	r4, r7
 800c93c:	4622      	mov	r2, r4
 800c93e:	4631      	mov	r1, r6
 800c940:	bf28      	it	cs
 800c942:	463a      	movcs	r2, r7
 800c944:	f7ff ff84 	bl	800c850 <memcpy>
 800c948:	4631      	mov	r1, r6
 800c94a:	4640      	mov	r0, r8
 800c94c:	f7ff f998 	bl	800bc80 <_free_r>
 800c950:	e7e1      	b.n	800c916 <_realloc_r+0x1e>
 800c952:	4635      	mov	r5, r6
 800c954:	e7df      	b.n	800c916 <_realloc_r+0x1e>

0800c956 <__ascii_wctomb>:
 800c956:	b149      	cbz	r1, 800c96c <__ascii_wctomb+0x16>
 800c958:	2aff      	cmp	r2, #255	; 0xff
 800c95a:	bf85      	ittet	hi
 800c95c:	238a      	movhi	r3, #138	; 0x8a
 800c95e:	6003      	strhi	r3, [r0, #0]
 800c960:	700a      	strbls	r2, [r1, #0]
 800c962:	f04f 30ff 	movhi.w	r0, #4294967295
 800c966:	bf98      	it	ls
 800c968:	2001      	movls	r0, #1
 800c96a:	4770      	bx	lr
 800c96c:	4608      	mov	r0, r1
 800c96e:	4770      	bx	lr

0800c970 <fiprintf>:
 800c970:	b40e      	push	{r1, r2, r3}
 800c972:	b503      	push	{r0, r1, lr}
 800c974:	4601      	mov	r1, r0
 800c976:	ab03      	add	r3, sp, #12
 800c978:	4805      	ldr	r0, [pc, #20]	; (800c990 <fiprintf+0x20>)
 800c97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c97e:	6800      	ldr	r0, [r0, #0]
 800c980:	9301      	str	r3, [sp, #4]
 800c982:	f000 f83f 	bl	800ca04 <_vfiprintf_r>
 800c986:	b002      	add	sp, #8
 800c988:	f85d eb04 	ldr.w	lr, [sp], #4
 800c98c:	b003      	add	sp, #12
 800c98e:	4770      	bx	lr
 800c990:	2400015c 	.word	0x2400015c

0800c994 <abort>:
 800c994:	b508      	push	{r3, lr}
 800c996:	2006      	movs	r0, #6
 800c998:	f000 fa0c 	bl	800cdb4 <raise>
 800c99c:	2001      	movs	r0, #1
 800c99e:	f7f4 f84d 	bl	8000a3c <_exit>

0800c9a2 <_malloc_usable_size_r>:
 800c9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a6:	1f18      	subs	r0, r3, #4
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bfbc      	itt	lt
 800c9ac:	580b      	ldrlt	r3, [r1, r0]
 800c9ae:	18c0      	addlt	r0, r0, r3
 800c9b0:	4770      	bx	lr

0800c9b2 <__sfputc_r>:
 800c9b2:	6893      	ldr	r3, [r2, #8]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	b410      	push	{r4}
 800c9ba:	6093      	str	r3, [r2, #8]
 800c9bc:	da08      	bge.n	800c9d0 <__sfputc_r+0x1e>
 800c9be:	6994      	ldr	r4, [r2, #24]
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	db01      	blt.n	800c9c8 <__sfputc_r+0x16>
 800c9c4:	290a      	cmp	r1, #10
 800c9c6:	d103      	bne.n	800c9d0 <__sfputc_r+0x1e>
 800c9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9cc:	f000 b934 	b.w	800cc38 <__swbuf_r>
 800c9d0:	6813      	ldr	r3, [r2, #0]
 800c9d2:	1c58      	adds	r0, r3, #1
 800c9d4:	6010      	str	r0, [r2, #0]
 800c9d6:	7019      	strb	r1, [r3, #0]
 800c9d8:	4608      	mov	r0, r1
 800c9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <__sfputs_r>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460f      	mov	r7, r1
 800c9e6:	4614      	mov	r4, r2
 800c9e8:	18d5      	adds	r5, r2, r3
 800c9ea:	42ac      	cmp	r4, r5
 800c9ec:	d101      	bne.n	800c9f2 <__sfputs_r+0x12>
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	e007      	b.n	800ca02 <__sfputs_r+0x22>
 800c9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f6:	463a      	mov	r2, r7
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff ffda 	bl	800c9b2 <__sfputc_r>
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	d1f3      	bne.n	800c9ea <__sfputs_r+0xa>
 800ca02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca04 <_vfiprintf_r>:
 800ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca08:	460d      	mov	r5, r1
 800ca0a:	b09d      	sub	sp, #116	; 0x74
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	4698      	mov	r8, r3
 800ca10:	4606      	mov	r6, r0
 800ca12:	b118      	cbz	r0, 800ca1c <_vfiprintf_r+0x18>
 800ca14:	6a03      	ldr	r3, [r0, #32]
 800ca16:	b90b      	cbnz	r3, 800ca1c <_vfiprintf_r+0x18>
 800ca18:	f7fe fa14 	bl	800ae44 <__sinit>
 800ca1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca1e:	07d9      	lsls	r1, r3, #31
 800ca20:	d405      	bmi.n	800ca2e <_vfiprintf_r+0x2a>
 800ca22:	89ab      	ldrh	r3, [r5, #12]
 800ca24:	059a      	lsls	r2, r3, #22
 800ca26:	d402      	bmi.n	800ca2e <_vfiprintf_r+0x2a>
 800ca28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca2a:	f7fe fb32 	bl	800b092 <__retarget_lock_acquire_recursive>
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	071b      	lsls	r3, r3, #28
 800ca32:	d501      	bpl.n	800ca38 <_vfiprintf_r+0x34>
 800ca34:	692b      	ldr	r3, [r5, #16]
 800ca36:	b99b      	cbnz	r3, 800ca60 <_vfiprintf_r+0x5c>
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f000 f93a 	bl	800ccb4 <__swsetup_r>
 800ca40:	b170      	cbz	r0, 800ca60 <_vfiprintf_r+0x5c>
 800ca42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca44:	07dc      	lsls	r4, r3, #31
 800ca46:	d504      	bpl.n	800ca52 <_vfiprintf_r+0x4e>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	b01d      	add	sp, #116	; 0x74
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca52:	89ab      	ldrh	r3, [r5, #12]
 800ca54:	0598      	lsls	r0, r3, #22
 800ca56:	d4f7      	bmi.n	800ca48 <_vfiprintf_r+0x44>
 800ca58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca5a:	f7fe fb1b 	bl	800b094 <__retarget_lock_release_recursive>
 800ca5e:	e7f3      	b.n	800ca48 <_vfiprintf_r+0x44>
 800ca60:	2300      	movs	r3, #0
 800ca62:	9309      	str	r3, [sp, #36]	; 0x24
 800ca64:	2320      	movs	r3, #32
 800ca66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca6e:	2330      	movs	r3, #48	; 0x30
 800ca70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc24 <_vfiprintf_r+0x220>
 800ca74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca78:	f04f 0901 	mov.w	r9, #1
 800ca7c:	4623      	mov	r3, r4
 800ca7e:	469a      	mov	sl, r3
 800ca80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca84:	b10a      	cbz	r2, 800ca8a <_vfiprintf_r+0x86>
 800ca86:	2a25      	cmp	r2, #37	; 0x25
 800ca88:	d1f9      	bne.n	800ca7e <_vfiprintf_r+0x7a>
 800ca8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca8e:	d00b      	beq.n	800caa8 <_vfiprintf_r+0xa4>
 800ca90:	465b      	mov	r3, fp
 800ca92:	4622      	mov	r2, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7ff ffa2 	bl	800c9e0 <__sfputs_r>
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	f000 80a9 	beq.w	800cbf4 <_vfiprintf_r+0x1f0>
 800caa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa4:	445a      	add	r2, fp
 800caa6:	9209      	str	r2, [sp, #36]	; 0x24
 800caa8:	f89a 3000 	ldrb.w	r3, [sl]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 80a1 	beq.w	800cbf4 <_vfiprintf_r+0x1f0>
 800cab2:	2300      	movs	r3, #0
 800cab4:	f04f 32ff 	mov.w	r2, #4294967295
 800cab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cabc:	f10a 0a01 	add.w	sl, sl, #1
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	9307      	str	r3, [sp, #28]
 800cac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cac8:	931a      	str	r3, [sp, #104]	; 0x68
 800caca:	4654      	mov	r4, sl
 800cacc:	2205      	movs	r2, #5
 800cace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad2:	4854      	ldr	r0, [pc, #336]	; (800cc24 <_vfiprintf_r+0x220>)
 800cad4:	f7f3 fc04 	bl	80002e0 <memchr>
 800cad8:	9a04      	ldr	r2, [sp, #16]
 800cada:	b9d8      	cbnz	r0, 800cb14 <_vfiprintf_r+0x110>
 800cadc:	06d1      	lsls	r1, r2, #27
 800cade:	bf44      	itt	mi
 800cae0:	2320      	movmi	r3, #32
 800cae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae6:	0713      	lsls	r3, r2, #28
 800cae8:	bf44      	itt	mi
 800caea:	232b      	movmi	r3, #43	; 0x2b
 800caec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf0:	f89a 3000 	ldrb.w	r3, [sl]
 800caf4:	2b2a      	cmp	r3, #42	; 0x2a
 800caf6:	d015      	beq.n	800cb24 <_vfiprintf_r+0x120>
 800caf8:	9a07      	ldr	r2, [sp, #28]
 800cafa:	4654      	mov	r4, sl
 800cafc:	2000      	movs	r0, #0
 800cafe:	f04f 0c0a 	mov.w	ip, #10
 800cb02:	4621      	mov	r1, r4
 800cb04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb08:	3b30      	subs	r3, #48	; 0x30
 800cb0a:	2b09      	cmp	r3, #9
 800cb0c:	d94d      	bls.n	800cbaa <_vfiprintf_r+0x1a6>
 800cb0e:	b1b0      	cbz	r0, 800cb3e <_vfiprintf_r+0x13a>
 800cb10:	9207      	str	r2, [sp, #28]
 800cb12:	e014      	b.n	800cb3e <_vfiprintf_r+0x13a>
 800cb14:	eba0 0308 	sub.w	r3, r0, r8
 800cb18:	fa09 f303 	lsl.w	r3, r9, r3
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	9304      	str	r3, [sp, #16]
 800cb20:	46a2      	mov	sl, r4
 800cb22:	e7d2      	b.n	800caca <_vfiprintf_r+0xc6>
 800cb24:	9b03      	ldr	r3, [sp, #12]
 800cb26:	1d19      	adds	r1, r3, #4
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	9103      	str	r1, [sp, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bfbb      	ittet	lt
 800cb30:	425b      	neglt	r3, r3
 800cb32:	f042 0202 	orrlt.w	r2, r2, #2
 800cb36:	9307      	strge	r3, [sp, #28]
 800cb38:	9307      	strlt	r3, [sp, #28]
 800cb3a:	bfb8      	it	lt
 800cb3c:	9204      	strlt	r2, [sp, #16]
 800cb3e:	7823      	ldrb	r3, [r4, #0]
 800cb40:	2b2e      	cmp	r3, #46	; 0x2e
 800cb42:	d10c      	bne.n	800cb5e <_vfiprintf_r+0x15a>
 800cb44:	7863      	ldrb	r3, [r4, #1]
 800cb46:	2b2a      	cmp	r3, #42	; 0x2a
 800cb48:	d134      	bne.n	800cbb4 <_vfiprintf_r+0x1b0>
 800cb4a:	9b03      	ldr	r3, [sp, #12]
 800cb4c:	1d1a      	adds	r2, r3, #4
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	9203      	str	r2, [sp, #12]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bfb8      	it	lt
 800cb56:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb5a:	3402      	adds	r4, #2
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cc34 <_vfiprintf_r+0x230>
 800cb62:	7821      	ldrb	r1, [r4, #0]
 800cb64:	2203      	movs	r2, #3
 800cb66:	4650      	mov	r0, sl
 800cb68:	f7f3 fbba 	bl	80002e0 <memchr>
 800cb6c:	b138      	cbz	r0, 800cb7e <_vfiprintf_r+0x17a>
 800cb6e:	9b04      	ldr	r3, [sp, #16]
 800cb70:	eba0 000a 	sub.w	r0, r0, sl
 800cb74:	2240      	movs	r2, #64	; 0x40
 800cb76:	4082      	lsls	r2, r0
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	3401      	adds	r4, #1
 800cb7c:	9304      	str	r3, [sp, #16]
 800cb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb82:	4829      	ldr	r0, [pc, #164]	; (800cc28 <_vfiprintf_r+0x224>)
 800cb84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb88:	2206      	movs	r2, #6
 800cb8a:	f7f3 fba9 	bl	80002e0 <memchr>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d03f      	beq.n	800cc12 <_vfiprintf_r+0x20e>
 800cb92:	4b26      	ldr	r3, [pc, #152]	; (800cc2c <_vfiprintf_r+0x228>)
 800cb94:	bb1b      	cbnz	r3, 800cbde <_vfiprintf_r+0x1da>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	3307      	adds	r3, #7
 800cb9a:	f023 0307 	bic.w	r3, r3, #7
 800cb9e:	3308      	adds	r3, #8
 800cba0:	9303      	str	r3, [sp, #12]
 800cba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba4:	443b      	add	r3, r7
 800cba6:	9309      	str	r3, [sp, #36]	; 0x24
 800cba8:	e768      	b.n	800ca7c <_vfiprintf_r+0x78>
 800cbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbae:	460c      	mov	r4, r1
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	e7a6      	b.n	800cb02 <_vfiprintf_r+0xfe>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	3401      	adds	r4, #1
 800cbb8:	9305      	str	r3, [sp, #20]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f04f 0c0a 	mov.w	ip, #10
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbc6:	3a30      	subs	r2, #48	; 0x30
 800cbc8:	2a09      	cmp	r2, #9
 800cbca:	d903      	bls.n	800cbd4 <_vfiprintf_r+0x1d0>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0c6      	beq.n	800cb5e <_vfiprintf_r+0x15a>
 800cbd0:	9105      	str	r1, [sp, #20]
 800cbd2:	e7c4      	b.n	800cb5e <_vfiprintf_r+0x15a>
 800cbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbd8:	4604      	mov	r4, r0
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e7f0      	b.n	800cbc0 <_vfiprintf_r+0x1bc>
 800cbde:	ab03      	add	r3, sp, #12
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	462a      	mov	r2, r5
 800cbe4:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <_vfiprintf_r+0x22c>)
 800cbe6:	a904      	add	r1, sp, #16
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f7fd fcf5 	bl	800a5d8 <_printf_float>
 800cbee:	4607      	mov	r7, r0
 800cbf0:	1c78      	adds	r0, r7, #1
 800cbf2:	d1d6      	bne.n	800cba2 <_vfiprintf_r+0x19e>
 800cbf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbf6:	07d9      	lsls	r1, r3, #31
 800cbf8:	d405      	bmi.n	800cc06 <_vfiprintf_r+0x202>
 800cbfa:	89ab      	ldrh	r3, [r5, #12]
 800cbfc:	059a      	lsls	r2, r3, #22
 800cbfe:	d402      	bmi.n	800cc06 <_vfiprintf_r+0x202>
 800cc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc02:	f7fe fa47 	bl	800b094 <__retarget_lock_release_recursive>
 800cc06:	89ab      	ldrh	r3, [r5, #12]
 800cc08:	065b      	lsls	r3, r3, #25
 800cc0a:	f53f af1d 	bmi.w	800ca48 <_vfiprintf_r+0x44>
 800cc0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc10:	e71c      	b.n	800ca4c <_vfiprintf_r+0x48>
 800cc12:	ab03      	add	r3, sp, #12
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	462a      	mov	r2, r5
 800cc18:	4b05      	ldr	r3, [pc, #20]	; (800cc30 <_vfiprintf_r+0x22c>)
 800cc1a:	a904      	add	r1, sp, #16
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7fd ff63 	bl	800aae8 <_printf_i>
 800cc22:	e7e4      	b.n	800cbee <_vfiprintf_r+0x1ea>
 800cc24:	0800dc44 	.word	0x0800dc44
 800cc28:	0800dc4e 	.word	0x0800dc4e
 800cc2c:	0800a5d9 	.word	0x0800a5d9
 800cc30:	0800c9e1 	.word	0x0800c9e1
 800cc34:	0800dc4a 	.word	0x0800dc4a

0800cc38 <__swbuf_r>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	4614      	mov	r4, r2
 800cc3e:	4605      	mov	r5, r0
 800cc40:	b118      	cbz	r0, 800cc4a <__swbuf_r+0x12>
 800cc42:	6a03      	ldr	r3, [r0, #32]
 800cc44:	b90b      	cbnz	r3, 800cc4a <__swbuf_r+0x12>
 800cc46:	f7fe f8fd 	bl	800ae44 <__sinit>
 800cc4a:	69a3      	ldr	r3, [r4, #24]
 800cc4c:	60a3      	str	r3, [r4, #8]
 800cc4e:	89a3      	ldrh	r3, [r4, #12]
 800cc50:	071a      	lsls	r2, r3, #28
 800cc52:	d525      	bpl.n	800cca0 <__swbuf_r+0x68>
 800cc54:	6923      	ldr	r3, [r4, #16]
 800cc56:	b31b      	cbz	r3, 800cca0 <__swbuf_r+0x68>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	6922      	ldr	r2, [r4, #16]
 800cc5c:	1a98      	subs	r0, r3, r2
 800cc5e:	6963      	ldr	r3, [r4, #20]
 800cc60:	b2f6      	uxtb	r6, r6
 800cc62:	4283      	cmp	r3, r0
 800cc64:	4637      	mov	r7, r6
 800cc66:	dc04      	bgt.n	800cc72 <__swbuf_r+0x3a>
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f7ff fdae 	bl	800c7cc <_fflush_r>
 800cc70:	b9e0      	cbnz	r0, 800ccac <__swbuf_r+0x74>
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	701e      	strb	r6, [r3, #0]
 800cc80:	6962      	ldr	r2, [r4, #20]
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d004      	beq.n	800cc92 <__swbuf_r+0x5a>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	07db      	lsls	r3, r3, #31
 800cc8c:	d506      	bpl.n	800cc9c <__swbuf_r+0x64>
 800cc8e:	2e0a      	cmp	r6, #10
 800cc90:	d104      	bne.n	800cc9c <__swbuf_r+0x64>
 800cc92:	4621      	mov	r1, r4
 800cc94:	4628      	mov	r0, r5
 800cc96:	f7ff fd99 	bl	800c7cc <_fflush_r>
 800cc9a:	b938      	cbnz	r0, 800ccac <__swbuf_r+0x74>
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca0:	4621      	mov	r1, r4
 800cca2:	4628      	mov	r0, r5
 800cca4:	f000 f806 	bl	800ccb4 <__swsetup_r>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d0d5      	beq.n	800cc58 <__swbuf_r+0x20>
 800ccac:	f04f 37ff 	mov.w	r7, #4294967295
 800ccb0:	e7f4      	b.n	800cc9c <__swbuf_r+0x64>
	...

0800ccb4 <__swsetup_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4b2a      	ldr	r3, [pc, #168]	; (800cd60 <__swsetup_r+0xac>)
 800ccb8:	4605      	mov	r5, r0
 800ccba:	6818      	ldr	r0, [r3, #0]
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	b118      	cbz	r0, 800ccc8 <__swsetup_r+0x14>
 800ccc0:	6a03      	ldr	r3, [r0, #32]
 800ccc2:	b90b      	cbnz	r3, 800ccc8 <__swsetup_r+0x14>
 800ccc4:	f7fe f8be 	bl	800ae44 <__sinit>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccce:	0718      	lsls	r0, r3, #28
 800ccd0:	d422      	bmi.n	800cd18 <__swsetup_r+0x64>
 800ccd2:	06d9      	lsls	r1, r3, #27
 800ccd4:	d407      	bmi.n	800cce6 <__swsetup_r+0x32>
 800ccd6:	2309      	movs	r3, #9
 800ccd8:	602b      	str	r3, [r5, #0]
 800ccda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccde:	81a3      	strh	r3, [r4, #12]
 800cce0:	f04f 30ff 	mov.w	r0, #4294967295
 800cce4:	e034      	b.n	800cd50 <__swsetup_r+0x9c>
 800cce6:	0758      	lsls	r0, r3, #29
 800cce8:	d512      	bpl.n	800cd10 <__swsetup_r+0x5c>
 800ccea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccec:	b141      	cbz	r1, 800cd00 <__swsetup_r+0x4c>
 800ccee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccf2:	4299      	cmp	r1, r3
 800ccf4:	d002      	beq.n	800ccfc <__swsetup_r+0x48>
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f7fe ffc2 	bl	800bc80 <_free_r>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	6363      	str	r3, [r4, #52]	; 0x34
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	6063      	str	r3, [r4, #4]
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	6023      	str	r3, [r4, #0]
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f043 0308 	orr.w	r3, r3, #8
 800cd16:	81a3      	strh	r3, [r4, #12]
 800cd18:	6923      	ldr	r3, [r4, #16]
 800cd1a:	b94b      	cbnz	r3, 800cd30 <__swsetup_r+0x7c>
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd26:	d003      	beq.n	800cd30 <__swsetup_r+0x7c>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 f884 	bl	800ce38 <__smakebuf_r>
 800cd30:	89a0      	ldrh	r0, [r4, #12]
 800cd32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd36:	f010 0301 	ands.w	r3, r0, #1
 800cd3a:	d00a      	beq.n	800cd52 <__swsetup_r+0x9e>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	60a3      	str	r3, [r4, #8]
 800cd40:	6963      	ldr	r3, [r4, #20]
 800cd42:	425b      	negs	r3, r3
 800cd44:	61a3      	str	r3, [r4, #24]
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	b943      	cbnz	r3, 800cd5c <__swsetup_r+0xa8>
 800cd4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd4e:	d1c4      	bne.n	800ccda <__swsetup_r+0x26>
 800cd50:	bd38      	pop	{r3, r4, r5, pc}
 800cd52:	0781      	lsls	r1, r0, #30
 800cd54:	bf58      	it	pl
 800cd56:	6963      	ldrpl	r3, [r4, #20]
 800cd58:	60a3      	str	r3, [r4, #8]
 800cd5a:	e7f4      	b.n	800cd46 <__swsetup_r+0x92>
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	e7f7      	b.n	800cd50 <__swsetup_r+0x9c>
 800cd60:	2400015c 	.word	0x2400015c

0800cd64 <_raise_r>:
 800cd64:	291f      	cmp	r1, #31
 800cd66:	b538      	push	{r3, r4, r5, lr}
 800cd68:	4604      	mov	r4, r0
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	d904      	bls.n	800cd78 <_raise_r+0x14>
 800cd6e:	2316      	movs	r3, #22
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	f04f 30ff 	mov.w	r0, #4294967295
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cd7a:	b112      	cbz	r2, 800cd82 <_raise_r+0x1e>
 800cd7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd80:	b94b      	cbnz	r3, 800cd96 <_raise_r+0x32>
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f830 	bl	800cde8 <_getpid_r>
 800cd88:	462a      	mov	r2, r5
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd92:	f000 b817 	b.w	800cdc4 <_kill_r>
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d00a      	beq.n	800cdb0 <_raise_r+0x4c>
 800cd9a:	1c59      	adds	r1, r3, #1
 800cd9c:	d103      	bne.n	800cda6 <_raise_r+0x42>
 800cd9e:	2316      	movs	r3, #22
 800cda0:	6003      	str	r3, [r0, #0]
 800cda2:	2001      	movs	r0, #1
 800cda4:	e7e7      	b.n	800cd76 <_raise_r+0x12>
 800cda6:	2400      	movs	r4, #0
 800cda8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdac:	4628      	mov	r0, r5
 800cdae:	4798      	blx	r3
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e7e0      	b.n	800cd76 <_raise_r+0x12>

0800cdb4 <raise>:
 800cdb4:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <raise+0xc>)
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	6818      	ldr	r0, [r3, #0]
 800cdba:	f7ff bfd3 	b.w	800cd64 <_raise_r>
 800cdbe:	bf00      	nop
 800cdc0:	2400015c 	.word	0x2400015c

0800cdc4 <_kill_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	; (800cde4 <_kill_r+0x20>)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4604      	mov	r4, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	4611      	mov	r1, r2
 800cdd0:	602b      	str	r3, [r5, #0]
 800cdd2:	f7f3 fe23 	bl	8000a1c <_kill>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d102      	bne.n	800cde0 <_kill_r+0x1c>
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	b103      	cbz	r3, 800cde0 <_kill_r+0x1c>
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	240020d8 	.word	0x240020d8

0800cde8 <_getpid_r>:
 800cde8:	f7f3 be10 	b.w	8000a0c <_getpid>

0800cdec <__swhatbuf_r>:
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	460c      	mov	r4, r1
 800cdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	b096      	sub	sp, #88	; 0x58
 800cdf8:	4615      	mov	r5, r2
 800cdfa:	461e      	mov	r6, r3
 800cdfc:	da0d      	bge.n	800ce1a <__swhatbuf_r+0x2e>
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce04:	f04f 0100 	mov.w	r1, #0
 800ce08:	bf0c      	ite	eq
 800ce0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce0e:	2340      	movne	r3, #64	; 0x40
 800ce10:	2000      	movs	r0, #0
 800ce12:	6031      	str	r1, [r6, #0]
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	b016      	add	sp, #88	; 0x58
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
 800ce1a:	466a      	mov	r2, sp
 800ce1c:	f000 f848 	bl	800ceb0 <_fstat_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	dbec      	blt.n	800cdfe <__swhatbuf_r+0x12>
 800ce24:	9901      	ldr	r1, [sp, #4]
 800ce26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce2e:	4259      	negs	r1, r3
 800ce30:	4159      	adcs	r1, r3
 800ce32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce36:	e7eb      	b.n	800ce10 <__swhatbuf_r+0x24>

0800ce38 <__smakebuf_r>:
 800ce38:	898b      	ldrh	r3, [r1, #12]
 800ce3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce3c:	079d      	lsls	r5, r3, #30
 800ce3e:	4606      	mov	r6, r0
 800ce40:	460c      	mov	r4, r1
 800ce42:	d507      	bpl.n	800ce54 <__smakebuf_r+0x1c>
 800ce44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	6123      	str	r3, [r4, #16]
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	6163      	str	r3, [r4, #20]
 800ce50:	b002      	add	sp, #8
 800ce52:	bd70      	pop	{r4, r5, r6, pc}
 800ce54:	ab01      	add	r3, sp, #4
 800ce56:	466a      	mov	r2, sp
 800ce58:	f7ff ffc8 	bl	800cdec <__swhatbuf_r>
 800ce5c:	9900      	ldr	r1, [sp, #0]
 800ce5e:	4605      	mov	r5, r0
 800ce60:	4630      	mov	r0, r6
 800ce62:	f7fd fa9b 	bl	800a39c <_malloc_r>
 800ce66:	b948      	cbnz	r0, 800ce7c <__smakebuf_r+0x44>
 800ce68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6c:	059a      	lsls	r2, r3, #22
 800ce6e:	d4ef      	bmi.n	800ce50 <__smakebuf_r+0x18>
 800ce70:	f023 0303 	bic.w	r3, r3, #3
 800ce74:	f043 0302 	orr.w	r3, r3, #2
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	e7e3      	b.n	800ce44 <__smakebuf_r+0xc>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	6020      	str	r0, [r4, #0]
 800ce80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	9b00      	ldr	r3, [sp, #0]
 800ce88:	6163      	str	r3, [r4, #20]
 800ce8a:	9b01      	ldr	r3, [sp, #4]
 800ce8c:	6120      	str	r0, [r4, #16]
 800ce8e:	b15b      	cbz	r3, 800cea8 <__smakebuf_r+0x70>
 800ce90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f000 f81d 	bl	800ced4 <_isatty_r>
 800ce9a:	b128      	cbz	r0, 800cea8 <__smakebuf_r+0x70>
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	431d      	orrs	r5, r3
 800ceac:	81a5      	strh	r5, [r4, #12]
 800ceae:	e7cf      	b.n	800ce50 <__smakebuf_r+0x18>

0800ceb0 <_fstat_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4d07      	ldr	r5, [pc, #28]	; (800ced0 <_fstat_r+0x20>)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	4608      	mov	r0, r1
 800ceba:	4611      	mov	r1, r2
 800cebc:	602b      	str	r3, [r5, #0]
 800cebe:	f7f3 fe0c 	bl	8000ada <_fstat>
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	d102      	bne.n	800cecc <_fstat_r+0x1c>
 800cec6:	682b      	ldr	r3, [r5, #0]
 800cec8:	b103      	cbz	r3, 800cecc <_fstat_r+0x1c>
 800ceca:	6023      	str	r3, [r4, #0]
 800cecc:	bd38      	pop	{r3, r4, r5, pc}
 800cece:	bf00      	nop
 800ced0:	240020d8 	.word	0x240020d8

0800ced4 <_isatty_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d06      	ldr	r5, [pc, #24]	; (800cef0 <_isatty_r+0x1c>)
 800ced8:	2300      	movs	r3, #0
 800ceda:	4604      	mov	r4, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	f7f3 fe0b 	bl	8000afa <_isatty>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_isatty_r+0x1a>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_isatty_r+0x1a>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	240020d8 	.word	0x240020d8
 800cef4:	00000000 	.word	0x00000000

0800cef8 <fmod>:
 800cef8:	b508      	push	{r3, lr}
 800cefa:	ed2d 8b04 	vpush	{d8-d9}
 800cefe:	eeb0 9b40 	vmov.f64	d9, d0
 800cf02:	eeb0 8b41 	vmov.f64	d8, d1
 800cf06:	f000 f81b 	bl	800cf40 <__ieee754_fmod>
 800cf0a:	eeb4 9b48 	vcmp.f64	d9, d8
 800cf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf12:	d60c      	bvs.n	800cf2e <fmod+0x36>
 800cf14:	ed9f 9b08 	vldr	d9, [pc, #32]	; 800cf38 <fmod+0x40>
 800cf18:	eeb4 8b49 	vcmp.f64	d8, d9
 800cf1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf20:	d105      	bne.n	800cf2e <fmod+0x36>
 800cf22:	f7fe f88b 	bl	800b03c <__errno>
 800cf26:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800cf2a:	2321      	movs	r3, #33	; 0x21
 800cf2c:	6003      	str	r3, [r0, #0]
 800cf2e:	ecbd 8b04 	vpop	{d8-d9}
 800cf32:	bd08      	pop	{r3, pc}
 800cf34:	f3af 8000 	nop.w
	...

0800cf40 <__ieee754_fmod>:
 800cf40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf44:	ed8d 1b00 	vstr	d1, [sp]
 800cf48:	e9dd 6500 	ldrd	r6, r5, [sp]
 800cf4c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800cf50:	ea57 0306 	orrs.w	r3, r7, r6
 800cf54:	46b6      	mov	lr, r6
 800cf56:	d00d      	beq.n	800cf74 <__ieee754_fmod+0x34>
 800cf58:	ee10 ca90 	vmov	ip, s1
 800cf5c:	4b79      	ldr	r3, [pc, #484]	; (800d144 <__ieee754_fmod+0x204>)
 800cf5e:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 800cf62:	4598      	cmp	r8, r3
 800cf64:	dc06      	bgt.n	800cf74 <__ieee754_fmod+0x34>
 800cf66:	4273      	negs	r3, r6
 800cf68:	4a77      	ldr	r2, [pc, #476]	; (800d148 <__ieee754_fmod+0x208>)
 800cf6a:	4333      	orrs	r3, r6
 800cf6c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d908      	bls.n	800cf86 <__ieee754_fmod+0x46>
 800cf74:	ed9d 7b00 	vldr	d7, [sp]
 800cf78:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cf7c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800cf80:	b003      	add	sp, #12
 800cf82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf86:	45b8      	cmp	r8, r7
 800cf88:	ee10 9a10 	vmov	r9, s0
 800cf8c:	ee10 1a10 	vmov	r1, s0
 800cf90:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 800cf94:	dc09      	bgt.n	800cfaa <__ieee754_fmod+0x6a>
 800cf96:	dbf3      	blt.n	800cf80 <__ieee754_fmod+0x40>
 800cf98:	45b1      	cmp	r9, r6
 800cf9a:	d3f1      	bcc.n	800cf80 <__ieee754_fmod+0x40>
 800cf9c:	d105      	bne.n	800cfaa <__ieee754_fmod+0x6a>
 800cf9e:	4b6b      	ldr	r3, [pc, #428]	; (800d14c <__ieee754_fmod+0x20c>)
 800cfa0:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800cfa4:	ed93 0b00 	vldr	d0, [r3]
 800cfa8:	e7ea      	b.n	800cf80 <__ieee754_fmod+0x40>
 800cfaa:	4a67      	ldr	r2, [pc, #412]	; (800d148 <__ieee754_fmod+0x208>)
 800cfac:	ea1c 0f02 	tst.w	ip, r2
 800cfb0:	d14a      	bne.n	800d048 <__ieee754_fmod+0x108>
 800cfb2:	f1b8 0f00 	cmp.w	r8, #0
 800cfb6:	d13f      	bne.n	800d038 <__ieee754_fmod+0xf8>
 800cfb8:	4865      	ldr	r0, [pc, #404]	; (800d150 <__ieee754_fmod+0x210>)
 800cfba:	464b      	mov	r3, r9
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dc38      	bgt.n	800d032 <__ieee754_fmod+0xf2>
 800cfc0:	4215      	tst	r5, r2
 800cfc2:	d150      	bne.n	800d066 <__ieee754_fmod+0x126>
 800cfc4:	2f00      	cmp	r7, #0
 800cfc6:	d147      	bne.n	800d058 <__ieee754_fmod+0x118>
 800cfc8:	4a61      	ldr	r2, [pc, #388]	; (800d150 <__ieee754_fmod+0x210>)
 800cfca:	4633      	mov	r3, r6
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	dc40      	bgt.n	800d052 <__ieee754_fmod+0x112>
 800cfd0:	4b60      	ldr	r3, [pc, #384]	; (800d154 <__ieee754_fmod+0x214>)
 800cfd2:	4298      	cmp	r0, r3
 800cfd4:	db4b      	blt.n	800d06e <__ieee754_fmod+0x12e>
 800cfd6:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800cfda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfde:	f8df c174 	ldr.w	ip, [pc, #372]	; 800d154 <__ieee754_fmod+0x214>
 800cfe2:	4562      	cmp	r2, ip
 800cfe4:	db58      	blt.n	800d098 <__ieee754_fmod+0x158>
 800cfe6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cfea:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800cfee:	1a80      	subs	r0, r0, r2
 800cff0:	1b5e      	subs	r6, r3, r5
 800cff2:	eba1 070e 	sub.w	r7, r1, lr
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d164      	bne.n	800d0c4 <__ieee754_fmod+0x184>
 800cffa:	4571      	cmp	r1, lr
 800cffc:	bf38      	it	cc
 800cffe:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800d002:	2e00      	cmp	r6, #0
 800d004:	bfa4      	itt	ge
 800d006:	4639      	movge	r1, r7
 800d008:	4633      	movge	r3, r6
 800d00a:	ea53 0001 	orrs.w	r0, r3, r1
 800d00e:	d0c6      	beq.n	800cf9e <__ieee754_fmod+0x5e>
 800d010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d014:	db6b      	blt.n	800d0ee <__ieee754_fmod+0x1ae>
 800d016:	484f      	ldr	r0, [pc, #316]	; (800d154 <__ieee754_fmod+0x214>)
 800d018:	4282      	cmp	r2, r0
 800d01a:	db6e      	blt.n	800d0fa <__ieee754_fmod+0x1ba>
 800d01c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d020:	4323      	orrs	r3, r4
 800d022:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d026:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d02a:	460c      	mov	r4, r1
 800d02c:	ec45 4b10 	vmov	d0, r4, r5
 800d030:	e7a6      	b.n	800cf80 <__ieee754_fmod+0x40>
 800d032:	3801      	subs	r0, #1
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	e7c1      	b.n	800cfbc <__ieee754_fmod+0x7c>
 800d038:	4846      	ldr	r0, [pc, #280]	; (800d154 <__ieee754_fmod+0x214>)
 800d03a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d03e:	2b00      	cmp	r3, #0
 800d040:	ddbe      	ble.n	800cfc0 <__ieee754_fmod+0x80>
 800d042:	3801      	subs	r0, #1
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	e7fa      	b.n	800d03e <__ieee754_fmod+0xfe>
 800d048:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d04c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d050:	e7b6      	b.n	800cfc0 <__ieee754_fmod+0x80>
 800d052:	3a01      	subs	r2, #1
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	e7b9      	b.n	800cfcc <__ieee754_fmod+0x8c>
 800d058:	4a3e      	ldr	r2, [pc, #248]	; (800d154 <__ieee754_fmod+0x214>)
 800d05a:	02fb      	lsls	r3, r7, #11
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	ddb7      	ble.n	800cfd0 <__ieee754_fmod+0x90>
 800d060:	3a01      	subs	r2, #1
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	e7fa      	b.n	800d05c <__ieee754_fmod+0x11c>
 800d066:	153a      	asrs	r2, r7, #20
 800d068:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d06c:	e7b0      	b.n	800cfd0 <__ieee754_fmod+0x90>
 800d06e:	eba3 0c00 	sub.w	ip, r3, r0
 800d072:	f1bc 0f1f 	cmp.w	ip, #31
 800d076:	dc09      	bgt.n	800d08c <__ieee754_fmod+0x14c>
 800d078:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 800d07c:	fa08 f10c 	lsl.w	r1, r8, ip
 800d080:	fa29 f303 	lsr.w	r3, r9, r3
 800d084:	430b      	orrs	r3, r1
 800d086:	fa09 f10c 	lsl.w	r1, r9, ip
 800d08a:	e7a8      	b.n	800cfde <__ieee754_fmod+0x9e>
 800d08c:	4b32      	ldr	r3, [pc, #200]	; (800d158 <__ieee754_fmod+0x218>)
 800d08e:	1a1b      	subs	r3, r3, r0
 800d090:	fa09 f303 	lsl.w	r3, r9, r3
 800d094:	2100      	movs	r1, #0
 800d096:	e7a2      	b.n	800cfde <__ieee754_fmod+0x9e>
 800d098:	ebac 0c02 	sub.w	ip, ip, r2
 800d09c:	f1bc 0f1f 	cmp.w	ip, #31
 800d0a0:	dc09      	bgt.n	800d0b6 <__ieee754_fmod+0x176>
 800d0a2:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800d0a6:	fa07 f70c 	lsl.w	r7, r7, ip
 800d0aa:	fa26 f505 	lsr.w	r5, r6, r5
 800d0ae:	433d      	orrs	r5, r7
 800d0b0:	fa06 fe0c 	lsl.w	lr, r6, ip
 800d0b4:	e79b      	b.n	800cfee <__ieee754_fmod+0xae>
 800d0b6:	4d28      	ldr	r5, [pc, #160]	; (800d158 <__ieee754_fmod+0x218>)
 800d0b8:	1aad      	subs	r5, r5, r2
 800d0ba:	fa06 f505 	lsl.w	r5, r6, r5
 800d0be:	f04f 0e00 	mov.w	lr, #0
 800d0c2:	e794      	b.n	800cfee <__ieee754_fmod+0xae>
 800d0c4:	4571      	cmp	r1, lr
 800d0c6:	bf38      	it	cc
 800d0c8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	da05      	bge.n	800d0dc <__ieee754_fmod+0x19c>
 800d0d0:	0fce      	lsrs	r6, r1, #31
 800d0d2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800d0d6:	0049      	lsls	r1, r1, #1
 800d0d8:	3801      	subs	r0, #1
 800d0da:	e789      	b.n	800cff0 <__ieee754_fmod+0xb0>
 800d0dc:	ea56 0307 	orrs.w	r3, r6, r7
 800d0e0:	f43f af5d 	beq.w	800cf9e <__ieee754_fmod+0x5e>
 800d0e4:	0ffb      	lsrs	r3, r7, #31
 800d0e6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800d0ea:	0079      	lsls	r1, r7, #1
 800d0ec:	e7f4      	b.n	800d0d8 <__ieee754_fmod+0x198>
 800d0ee:	0fc8      	lsrs	r0, r1, #31
 800d0f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d0f4:	0049      	lsls	r1, r1, #1
 800d0f6:	3a01      	subs	r2, #1
 800d0f8:	e78a      	b.n	800d010 <__ieee754_fmod+0xd0>
 800d0fa:	1a80      	subs	r0, r0, r2
 800d0fc:	2814      	cmp	r0, #20
 800d0fe:	dc0c      	bgt.n	800d11a <__ieee754_fmod+0x1da>
 800d100:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d104:	fa03 f202 	lsl.w	r2, r3, r2
 800d108:	40c1      	lsrs	r1, r0
 800d10a:	430a      	orrs	r2, r1
 800d10c:	4103      	asrs	r3, r0
 800d10e:	ea43 0104 	orr.w	r1, r3, r4
 800d112:	4610      	mov	r0, r2
 800d114:	ec41 0b10 	vmov	d0, r0, r1
 800d118:	e732      	b.n	800cf80 <__ieee754_fmod+0x40>
 800d11a:	281f      	cmp	r0, #31
 800d11c:	dc07      	bgt.n	800d12e <__ieee754_fmod+0x1ee>
 800d11e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d122:	40c1      	lsrs	r1, r0
 800d124:	fa03 f202 	lsl.w	r2, r3, r2
 800d128:	430a      	orrs	r2, r1
 800d12a:	4623      	mov	r3, r4
 800d12c:	e7ef      	b.n	800d10e <__ieee754_fmod+0x1ce>
 800d12e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d132:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d136:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d13a:	32e2      	adds	r2, #226	; 0xe2
 800d13c:	fa43 f202 	asr.w	r2, r3, r2
 800d140:	e7f3      	b.n	800d12a <__ieee754_fmod+0x1ea>
 800d142:	bf00      	nop
 800d144:	7fefffff 	.word	0x7fefffff
 800d148:	7ff00000 	.word	0x7ff00000
 800d14c:	0800dda0 	.word	0x0800dda0
 800d150:	fffffbed 	.word	0xfffffbed
 800d154:	fffffc02 	.word	0xfffffc02
 800d158:	fffffbe2 	.word	0xfffffbe2

0800d15c <_init>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	bf00      	nop
 800d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d162:	bc08      	pop	{r3}
 800d164:	469e      	mov	lr, r3
 800d166:	4770      	bx	lr

0800d168 <_fini>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	bf00      	nop
 800d16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16e:	bc08      	pop	{r3}
 800d170:	469e      	mov	lr, r3
 800d172:	4770      	bx	lr
