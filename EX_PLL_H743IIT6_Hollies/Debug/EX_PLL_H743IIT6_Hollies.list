
EX_PLL_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  08012e30  08012e30  00022e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013a80  08013a80  00023a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013a84  08013a84  00023a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002cc  24000000  08013a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fbc  240002cc  08013d54  000302cc  2**2
                  ALLOC
  7 ._user_heap_stack 00000500  24002288  08013d54  00032288  2**0
                  ALLOC
  8 ._D3_Area     00000002  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.attributes 0000002e  00000000  00000000  00040002  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 11 .debug_info   000299bc  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005a11  00000000  00000000  00069aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c78  00000000  00000000  0006f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001553  00000000  00000000  00071130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ebab  00000000  00000000  00072683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029c49  00000000  00000000  000b122e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001797dd  00000000  00000000  000dae77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008510  00000000  00000000  00254654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0025cb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  0025cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0025cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012e14 	.word	0x08012e14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	08012e14 	.word	0x08012e14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b36      	ldr	r3, [pc, #216]	; (8000490 <MX_ADC1_Init+0x100>)
 80003b6:	4a37      	ldr	r2, [pc, #220]	; (8000494 <MX_ADC1_Init+0x104>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b35      	ldr	r3, [pc, #212]	; (8000490 <MX_ADC1_Init+0x100>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <MX_ADC1_Init+0x100>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c8:	4b31      	ldr	r3, [pc, #196]	; (8000490 <MX_ADC1_Init+0x100>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ce:	4b30      	ldr	r3, [pc, #192]	; (8000490 <MX_ADC1_Init+0x100>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <MX_ADC1_Init+0x100>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <MX_ADC1_Init+0x100>)
 80003dc:	2201      	movs	r2, #1
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <MX_ADC1_Init+0x100>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <MX_ADC1_Init+0x100>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <MX_ADC1_Init+0x100>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <MX_ADC1_Init+0x100>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_ADC1_Init+0x100>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_ADC1_Init+0x100>)
 8000400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000404:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_ADC1_Init+0x100>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_ADC1_Init+0x100>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <MX_ADC1_Init+0x100>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_ADC1_Init+0x100>)
 800041c:	2240      	movs	r2, #64	; 0x40
 800041e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_ADC1_Init+0x100>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_ADC1_Init+0x100>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	4818      	ldr	r0, [pc, #96]	; (8000490 <MX_ADC1_Init+0x100>)
 800042e:	f001 fb4f 	bl	8001ad0 <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 fd60 	bl	8000efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4812      	ldr	r0, [pc, #72]	; (8000490 <MX_ADC1_Init+0x100>)
 8000448:	f002 fe2a 	bl	80030a0 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 fd53 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_ADC1_Init+0x108>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800045e:	2306      	movs	r3, #6
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_ADC1_Init+0x100>)
 800047a:	f001 ff79 	bl	8002370 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fd3a 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	; 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	240002e8 	.word	0x240002e8
 8000494:	40022000 	.word	0x40022000
 8000498:	0c900008 	.word	0x0c900008

0800049c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
 80004b0:	615a      	str	r2, [r3, #20]
 80004b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <MX_ADC3_Init+0xd0>)
 80004b6:	4a2e      	ldr	r2, [pc, #184]	; (8000570 <MX_ADC3_Init+0xd4>)
 80004b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80004ba:	4b2c      	ldr	r3, [pc, #176]	; (800056c <MX_ADC3_Init+0xd0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <MX_ADC3_Init+0xd0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c6:	4b29      	ldr	r3, [pc, #164]	; (800056c <MX_ADC3_Init+0xd0>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <MX_ADC3_Init+0xd0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <MX_ADC3_Init+0xd0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <MX_ADC3_Init+0xd0>)
 80004da:	2201      	movs	r2, #1
 80004dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <MX_ADC3_Init+0xd0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_ADC3_Init+0xd0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <MX_ADC3_Init+0xd0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_ADC3_Init+0xd0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_ADC3_Init+0xd0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_ADC3_Init+0xd0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_ADC3_Init+0xd0>)
 8000504:	2201      	movs	r2, #1
 8000506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = 15;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_ADC3_Init+0xd0>)
 800050c:	220f      	movs	r2, #15
 800050e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_ADC3_Init+0xd0>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_ADC3_Init+0xd0>)
 8000518:	2200      	movs	r2, #0
 800051a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_ADC3_Init+0xd0>)
 800051e:	2201      	movs	r2, #1
 8000520:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <MX_ADC3_Init+0xd0>)
 8000524:	f001 fad4 	bl	8001ad0 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800052e:	f000 fce5 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_ADC3_Init+0xd8>)
 8000534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000536:	2306      	movs	r3, #6
 8000538:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800053a:	2307      	movs	r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800053e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000542:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000544:	2304      	movs	r3, #4
 8000546:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_ADC3_Init+0xd0>)
 8000556:	f001 ff0b 	bl	8002370 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000560:	f000 fccc 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2400034c 	.word	0x2400034c
 8000570:	58026000 	.word	0x58026000
 8000574:	cb840000 	.word	0xcb840000

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a3b      	ldr	r2, [pc, #236]	; (8000684 <HAL_ADC_MspInit+0x10c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d15b      	bne.n	8000652 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800059a:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <HAL_ADC_MspInit+0x110>)
 800059c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005a0:	4a39      	ldr	r2, [pc, #228]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005aa:	4b37      	ldr	r3, [pc, #220]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005be:	4a32      	ldr	r2, [pc, #200]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4828      	ldr	r0, [pc, #160]	; (800068c <HAL_ADC_MspInit+0x114>)
 80005ea:	f005 fab1 	bl	8005b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <HAL_ADC_MspInit+0x118>)
 80005f0:	4a28      	ldr	r2, [pc, #160]	; (8000694 <HAL_ADC_MspInit+0x11c>)
 80005f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <HAL_ADC_MspInit+0x118>)
 80005f6:	2209      	movs	r2, #9
 80005f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <HAL_ADC_MspInit+0x118>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000614:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000624:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000636:	f003 f9b3 	bl	80039a0 <HAL_DMA_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8000640:	f000 fc5c 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000648:	64da      	str	r2, [r3, #76]	; 0x4c
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <HAL_ADC_MspInit+0x118>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000650:	e013      	b.n	800067a <HAL_ADC_MspInit+0x102>
  else if(adcHandle->Instance==ADC3)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <HAL_ADC_MspInit+0x120>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d10e      	bne.n	800067a <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_ADC_MspInit+0x110>)
 800065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <HAL_ADC_MspInit+0x110>)
 8000664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_ADC_MspInit+0x110>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000
 8000688:	58024400 	.word	0x58024400
 800068c:	58020000 	.word	0x58020000
 8000690:	240003b0 	.word	0x240003b0
 8000694:	40020028 	.word	0x40020028
 8000698:	58026000 	.word	0x58026000

0800069c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2224      	movs	r2, #36	; 0x24
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f010 fac0 	bl	8010c2e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_DAC1_Init+0x5c>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_DAC1_Init+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <MX_DAC1_Init+0x5c>)
 80006b6:	f002 ff2d 	bl	8003514 <HAL_DAC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006c0:	f000 fc1c 	bl	8000efc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_DAC1_Init+0x5c>)
 80006e0:	f003 f816 	bl	8003710 <HAL_DAC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 fc07 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24000428 	.word	0x24000428
 80006fc:	40007400 	.word	0x40007400

08000700 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <HAL_DAC_MspInit+0x90>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d131      	bne.n	8000786 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <HAL_DAC_MspInit+0x94>)
 800072a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800072e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800075e:	2310      	movs	r3, #16
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000762:	2303      	movs	r3, #3
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <HAL_DAC_MspInit+0x98>)
 8000772:	f005 f9ed 	bl	8005b50 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f002 fe26 	bl	80033cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000780:	2036      	movs	r0, #54	; 0x36
 8000782:	f002 fe3d 	bl	8003400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40007400 	.word	0x40007400
 8000794:	58024400 	.word	0x58024400
 8000798:	58020000 	.word	0x58020000

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	200c      	movs	r0, #12
 80007c6:	f002 fe01 	bl	80033cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007ca:	200c      	movs	r0, #12
 80007cc:	f002 fe18 	bl	8003400 <HAL_NVIC_EnableIRQ>

}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58024400 	.word	0x58024400

080007dc <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_GPIO_Init+0xbc>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a27      	ldr	r2, [pc, #156]	; (8000898 <MX_GPIO_Init+0xbc>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0xbc>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_GPIO_Init+0xbc>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0xc0>)
 8000870:	f005 fb1e 	bl	8005eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xc0>)
 800088c:	f005 f960 	bl	8005b50 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024400 	.word	0x58024400
 800089c:	58022000 	.word	0x58022000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b2      	sub	sp, #200	; 0xc8
 80008a4:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008a6:	f000 fa55 	bl	8000d54 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008aa:	4bad      	ldr	r3, [pc, #692]	; (8000b60 <main+0x2c0>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11b      	bne.n	80008ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b6:	f3bf 8f4f 	dsb	sy
}
 80008ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008bc:	f3bf 8f6f 	isb	sy
}
 80008c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008c2:	4ba7      	ldr	r3, [pc, #668]	; (8000b60 <main+0x2c0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d0:	f3bf 8f6f 	isb	sy
}
 80008d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008d6:	4ba2      	ldr	r3, [pc, #648]	; (8000b60 <main+0x2c0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4aa1      	ldr	r2, [pc, #644]	; (8000b60 <main+0x2c0>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008e2:	f3bf 8f4f 	dsb	sy
}
 80008e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e8:	f3bf 8f6f 	isb	sy
}
 80008ec:	e000      	b.n	80008f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008f0:	4b9b      	ldr	r3, [pc, #620]	; (8000b60 <main+0x2c0>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d143      	bne.n	8000984 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008fc:	4b98      	ldr	r3, [pc, #608]	; (8000b60 <main+0x2c0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000904:	f3bf 8f4f 	dsb	sy
}
 8000908:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800090a:	4b95      	ldr	r3, [pc, #596]	; (8000b60 <main+0x2c0>)
 800090c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000918:	0b5b      	lsrs	r3, r3, #13
 800091a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800091e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800092c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000934:	015a      	lsls	r2, r3, #5
 8000936:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800093a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800093c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000940:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000942:	4987      	ldr	r1, [pc, #540]	; (8000b60 <main+0x2c0>)
 8000944:	4313      	orrs	r3, r2
 8000946:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800094a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1eb      	bne.n	8000930 <main+0x90>
    } while(sets-- != 0U);
 8000958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1dd      	bne.n	8000922 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 8000966:	f3bf 8f4f 	dsb	sy
}
 800096a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800096c:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <main+0x2c0>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	4a7b      	ldr	r2, [pc, #492]	; (8000b60 <main+0x2c0>)
 8000972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000976:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000978:	f3bf 8f4f 	dsb	sy
}
 800097c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097e:	f3bf 8f6f 	isb	sy
}
 8000982:	e000      	b.n	8000986 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000984:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 fdfb 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f905 	bl	8000b98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800098e:	f000 f9b1 	bl	8000cf4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff ff23 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000996:	f7ff ff01 	bl	800079c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800099a:	f00e fd63 	bl	800f464 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800099e:	f7ff fcf7 	bl	8000390 <MX_ADC1_Init>
  MX_DAC1_Init();
 80009a2:	f7ff fe7b 	bl	800069c <MX_DAC1_Init>
  MX_TIM1_Init();
 80009a6:	f000 fce1 	bl	800136c <MX_TIM1_Init>
  MX_TIM2_Init();
 80009aa:	f000 fd33 	bl	8001414 <MX_TIM2_Init>
  MX_ADC3_Init();
 80009ae:	f7ff fd75 	bl	800049c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间�?
  signal_1 = (pll_Signal *)malloc(sizeof(pll_Signal));
 80009b2:	2054      	movs	r0, #84	; 0x54
 80009b4:	f00f fb26 	bl	8010004 <malloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b69      	ldr	r3, [pc, #420]	; (8000b64 <main+0x2c4>)
 80009be:	601a      	str	r2, [r3, #0]
  signal_config_1 = (pll_Config *)malloc(sizeof(pll_Config));
 80009c0:	2020      	movs	r0, #32
 80009c2:	f00f fb1f 	bl	8010004 <malloc>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b67      	ldr	r3, [pc, #412]	; (8000b68 <main+0x2c8>)
 80009cc:	601a      	str	r2, [r3, #0]
  uint16_t temprature = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  float temp_result = 0;
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  // 串口输出数组
  uint8_t buf[128] = {0};
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	227c      	movs	r2, #124	; 0x7c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f010 f920 	bl	8010c2e <memset>
  // 锁相环初始化
  pll_Init(signal_1, signal_config_1, 50, 20000);
 80009ee:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <main+0x2c4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <main+0x2c8>)
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009fa:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8000b6c <main+0x2cc>
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00e fad8 	bl	800efb4 <pll_Init>
  // DAC模拟输出初始化�?
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4858      	ldr	r0, [pc, #352]	; (8000b70 <main+0x2d0>)
 8000a0e:	f002 fe4f 	bl	80036b0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a12:	2100      	movs	r1, #0
 8000a14:	4856      	ldr	r0, [pc, #344]	; (8000b70 <main+0x2d0>)
 8000a16:	f002 fd9f 	bl	8003558 <HAL_DAC_Start>
  // ADC校准并开启�?
  HAL_Delay(200);
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f000 fe0c 	bl	8001638 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000a20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a24:	2100      	movs	r1, #0
 8000a26:	4853      	ldr	r0, [pc, #332]	; (8000b74 <main+0x2d4>)
 8000a28:	f002 fad6 	bl	8002fd8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000a2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a34:	484f      	ldr	r0, [pc, #316]	; (8000b74 <main+0x2d4>)
 8000a36:	f002 facf 	bl	8002fd8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	494e      	ldr	r1, [pc, #312]	; (8000b78 <main+0x2d8>)
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <main+0x2d4>)
 8000a40:	f001 fba6 	bl	8002190 <HAL_ADC_Start_DMA>

  HAL_Delay(1000);
 8000a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a48:	f000 fdf6 	bl	8001638 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim2);
 8000a4c:	484b      	ldr	r0, [pc, #300]	; (8000b7c <main+0x2dc>)
 8000a4e:	f00a facd 	bl	800afec <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // MPU温度读取
    HAL_ADC_Start(&hadc3);
 8000a52:	484b      	ldr	r0, [pc, #300]	; (8000b80 <main+0x2e0>)
 8000a54:	f001 f9de 	bl	8001e14 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK) // 判断是否转换完成
 8000a58:	210a      	movs	r1, #10
 8000a5a:	4849      	ldr	r0, [pc, #292]	; (8000b80 <main+0x2e0>)
 8000a5c:	f001 faa4 	bl	8001fa8 <HAL_ADC_PollForConversion>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d126      	bne.n	8000ab4 <main+0x214>
    {
      temprature = HAL_ADC_GetValue(&hadc3); // 读出转换结果
 8000a66:	4846      	ldr	r0, [pc, #280]	; (8000b80 <main+0x2e0>)
 8000a68:	f001 fc56 	bl	8002318 <HAL_ADC_GetValue>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      temp_result = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <main+0x2e4>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b43      	ldr	r3, [pc, #268]	; (8000b88 <main+0x2e8>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a86:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8000b58 <main+0x2b8>
 8000a8a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a8e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8000a92:	4a3d      	ldr	r2, [pc, #244]	; (8000b88 <main+0x2e8>)
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aa0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000aa4:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8000aa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ab0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    }
    // 虚拟串口输出日志
    sprintf((char *)buf, "x1=0,theta= %f,u0= %.3f, sogi_d= %.3f, sogi_q= %.3f, park_q= %.3f, park_d= %.3f, temprature= %.3f, \n", signal_1->theta, signal_1->u_0, signal_1->sogi_d_0, signal_1->sogi_q_0 / 382 * 3, signal_1->park_q, signal_1->park_d, temp_result);
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <main+0x2c4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000abc:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <main+0x2c4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	edd3 7a00 	vldr	s15, [r3]
 8000ac8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <main+0x2c4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ad4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <main+0x2c4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	ed93 5a06 	vldr	s10, [r3, #24]
 8000ae0:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8000b8c <main+0x2ec>
 8000ae4:	eec5 5a24 	vdiv.f32	s11, s10, s9
 8000ae8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8000aec:	ee65 5a85 	vmul.f32	s11, s11, s10
 8000af0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <main+0x2c4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 8000afc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <main+0x2c4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	edd3 3a09 	vldr	s7, [r3, #36]	; 0x24
 8000b08:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b0c:	edd7 2a25 	vldr	s5, [r7, #148]	; 0x94
 8000b10:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000b14:	1d38      	adds	r0, r7, #4
 8000b16:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8000b1a:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b1e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b22:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b2a:	ed8d 7b00 	vstr	d7, [sp]
 8000b2e:	ec53 2b11 	vmov	r2, r3, d1
 8000b32:	4917      	ldr	r1, [pc, #92]	; (8000b90 <main+0x2f0>)
 8000b34:	f010 f818 	bl	8010b68 <siprintf>
    CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00e fd51 	bl	800f5e4 <CDC_Transmit_FS>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000b42:	2101      	movs	r1, #1
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <main+0x2f4>)
 8000b46:	f005 f9cc 	bl	8005ee2 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000b4a:	2064      	movs	r0, #100	; 0x64
 8000b4c:	f000 fd74 	bl	8001638 <HAL_Delay>
    HAL_ADC_Start(&hadc3);
 8000b50:	e77f      	b.n	8000a52 <main+0x1b2>
 8000b52:	bf00      	nop
 8000b54:	f3af 8000 	nop.w
 8000b58:	00000000 	.word	0x00000000
 8000b5c:	40540000 	.word	0x40540000
 8000b60:	e000ed00 	.word	0xe000ed00
 8000b64:	2400043c 	.word	0x2400043c
 8000b68:	24000440 	.word	0x24000440
 8000b6c:	42480000 	.word	0x42480000
 8000b70:	24000428 	.word	0x24000428
 8000b74:	240002e8 	.word	0x240002e8
 8000b78:	38000000 	.word	0x38000000
 8000b7c:	240004e0 	.word	0x240004e0
 8000b80:	2400034c 	.word	0x2400034c
 8000b84:	1ff1e840 	.word	0x1ff1e840
 8000b88:	1ff1e820 	.word	0x1ff1e820
 8000b8c:	43bf0000 	.word	0x43bf0000
 8000b90:	08012e30 	.word	0x08012e30
 8000b94:	58022000 	.word	0x58022000

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09e      	sub	sp, #120	; 0x78
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba2:	224c      	movs	r2, #76	; 0x4c
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f010 f841 	bl	8010c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f010 f83a 	bl	8010c2e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f006 fc64 	bl	8007488 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <SystemClock_Config+0x150>)
 8000bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc8:	4a47      	ldr	r2, [pc, #284]	; (8000ce8 <SystemClock_Config+0x150>)
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bd0:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <SystemClock_Config+0x150>)
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b44      	ldr	r3, [pc, #272]	; (8000cec <SystemClock_Config+0x154>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a43      	ldr	r2, [pc, #268]	; (8000cec <SystemClock_Config+0x154>)
 8000be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b41      	ldr	r3, [pc, #260]	; (8000cec <SystemClock_Config+0x154>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bf2:	bf00      	nop
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <SystemClock_Config+0x154>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c00:	d1f8      	bne.n	8000bf4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <SystemClock_Config+0x158>)
 8000c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c08:	4a39      	ldr	r2, [pc, #228]	; (8000cf0 <SystemClock_Config+0x158>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c12:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <SystemClock_Config+0x158>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <SystemClock_Config+0x154>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a30      	ldr	r2, [pc, #192]	; (8000cec <SystemClock_Config+0x154>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <SystemClock_Config+0x154>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <SystemClock_Config+0x150>)
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <SystemClock_Config+0x150>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <SystemClock_Config+0x150>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c52:	bf00      	nop
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemClock_Config+0x154>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c60:	d1f8      	bne.n	8000c54 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c70:	2302      	movs	r3, #2
 8000c72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c74:	2305      	movs	r3, #5
 8000c76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c78:	23c0      	movs	r3, #192	; 0xc0
 8000c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000c80:	2314      	movs	r3, #20
 8000c82:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f006 fc3f 	bl	800751c <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ca4:	f000 f92a 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	233f      	movs	r3, #63	; 0x3f
 8000caa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2303      	movs	r3, #3
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 f87d 	bl	8007dd0 <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000cdc:	f000 f90e 	bl	8000efc <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3778      	adds	r7, #120	; 0x78
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58000400 	.word	0x58000400
 8000cec:	58024800 	.word	0x58024800
 8000cf0:	58024400 	.word	0x58024400

08000cf4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0b0      	sub	sp, #192	; 0xc0
 8000cf8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	22c0      	movs	r2, #192	; 0xc0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f00f ff94 	bl	8010c2e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000d12:	2319      	movs	r3, #25
 8000d14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 504;
 8000d16:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000d1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 fbff 	bl	8008540 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000d48:	f000 f8d8 	bl	8000efc <Error_Handler>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	37c0      	adds	r7, #192	; 0xc0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d66:	f002 fb59 	bl	800341c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d72:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000d76:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d84:	2303      	movs	r3, #3
 8000d86:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fb76 	bl	800348c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000da4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000da8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000daa:	230f      	movs	r3, #15
 8000dac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fb67 	bl	800348c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dbe:	2004      	movs	r0, #4
 8000dc0:	f002 fb44 	bl	800344c <HAL_MPU_Enable>

}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000de2:	f000 fc09 	bl	80015f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dee:	d166      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xee>
 8000df0:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	2302      	movs	r3, #2
 8000df6:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd1d      	ble.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e0e:	f3bf 8f4f 	dsb	sy
}
 8000e12:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e14:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3320      	adds	r3, #32
 8000e20:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3b20      	subs	r3, #32
 8000e26:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dcf2      	bgt.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e2e:	f3bf 8f4f 	dsb	sy
}
 8000e32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e34:	f3bf 8f6f 	isb	sy
}
 8000e38:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000e3a:	bf00      	nop
  {
    SCB_InvalidateDCache_by_Addr((uint32_t *)adcBuf, sizeof(adcBuf));
    signal_1->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.65;
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e48:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000edc <HAL_TIM_PeriodElapsedCallback+0x10c>
 8000e4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e50:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000ee0 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5c:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000ec8 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_1, signal_config_1);
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00e f980 	bl	800f180 <pll_Control>
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000e88:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000eec <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e90:	eeb0 0a67 	vmov.f32	s0, s15
 8000e94:	f00f f826 	bl	800fee4 <arm_sin_f32>
 8000e98:	eef0 7a40 	vmov.f32	s15, s0
 8000e9c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ef0 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ef4 <HAL_TIM_PeriodElapsedCallback+0x124>
 8000ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb0:	ee17 3a90 	vmov	r3, s15
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000eba:	f002 fbf9 	bl	80036b0 <HAL_DAC_SetValue>
  }
  /* USER CODE END Callback 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	3ffa6666 	.word	0x3ffa6666
 8000ed0:	40001000 	.word	0x40001000
 8000ed4:	38000000 	.word	0x38000000
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	40533333 	.word	0x40533333
 8000ee0:	47800000 	.word	0x47800000
 8000ee4:	2400043c 	.word	0x2400043c
 8000ee8:	24000440 	.word	0x24000440
 8000eec:	3fc90fdb 	.word	0x3fc90fdb
 8000ef0:	44fa0000 	.word	0x44fa0000
 8000ef4:	45000000 	.word	0x45000000
 8000ef8:	24000428 	.word	0x24000428

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_MspInit+0x30>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_MspInit+0x30>)
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58024400 	.word	0x58024400

08000f3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d827      	bhi.n	8000f9a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	2036      	movs	r0, #54	; 0x36
 8000f50:	f002 fa3c 	bl	80033cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f54:	2036      	movs	r0, #54	; 0x36
 8000f56:	f002 fa53 	bl	8003400 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f5a:	4a29      	ldr	r2, [pc, #164]	; (8001000 <HAL_InitTick+0xc4>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_InitTick+0xc8>)
 8000f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_InitTick+0xc8>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_InitTick+0xc8>)
 8000f72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7e:	f107 0210 	add.w	r2, r7, #16
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 fa97 	bl	80084bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <HAL_InitTick+0x6a>
 8000f98:	e001      	b.n	8000f9e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e02b      	b.n	8000ff6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f9e:	f007 fa77 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 8000fa2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fa6:	f007 fa73 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 8000faa:	4603      	mov	r3, r0
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_InitTick+0xcc>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	0c9b      	lsrs	r3, r3, #18
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_InitTick+0xd0>)
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <HAL_InitTick+0xd4>)
 8000fc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_InitTick+0xd0>)
 8000fc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_InitTick+0xd0>)
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_InitTick+0xd0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_InitTick+0xd0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <HAL_InitTick+0xd0>)
 8000fe0:	f009 ffac 	bl	800af3c <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fea:	4808      	ldr	r0, [pc, #32]	; (800100c <HAL_InitTick+0xd0>)
 8000fec:	f009 fffe 	bl	800afec <HAL_TIM_Base_Start_IT>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	e000      	b.n	8000ff6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3740      	adds	r7, #64	; 0x40
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24000008 	.word	0x24000008
 8001004:	58024400 	.word	0x58024400
 8001008:	431bde83 	.word	0x431bde83
 800100c:	24000444 	.word	0x24000444
 8001010:	40001000 	.word	0x40001000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Stream1_IRQHandler+0x10>)
 8001072:	f003 fa5b 	bl	800452c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	240003b0 	.word	0x240003b0

08001080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM2_IRQHandler+0x10>)
 8001086:	f00a f829 	bl	800b0dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	240004e0 	.word	0x240004e0

08001094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <TIM6_DAC_IRQHandler+0x20>)
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <TIM6_DAC_IRQHandler+0x20>)
 80010a4:	f002 faaa 	bl	80035fc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <TIM6_DAC_IRQHandler+0x24>)
 80010aa:	f00a f817 	bl	800b0dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000428 	.word	0x24000428
 80010b8:	24000444 	.word	0x24000444

080010bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <OTG_FS_IRQHandler+0x10>)
 80010c2:	f005 f881 	bl	80061c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24001a10 	.word	0x24001a10

080010d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return 1;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_kill>:

int _kill(int pid, int sig)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ea:	f00f fe03 	bl	8010cf4 <__errno>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2216      	movs	r2, #22
 80010f2:	601a      	str	r2, [r3, #0]
  return -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_exit>:

void _exit (int status)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffe7 	bl	80010e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x12>

08001114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e00a      	b.n	800113c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	4601      	mov	r1, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbf0      	blt.n	8001126 <_read+0x12>
  }

  return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e009      	b.n	8001174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf1      	blt.n	8001160 <_write+0x12>
  }
  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
  return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_isatty>:

int _isatty(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f00f fd68 	bl	8010cf4 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	24080000 	.word	0x24080000
 8001250:	00000400 	.word	0x00000400
 8001254:	24000490 	.word	0x24000490
 8001258:	24002288 	.word	0x24002288

0800125c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <SystemInit+0xe4>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a36      	ldr	r2, [pc, #216]	; (8001340 <SystemInit+0xe4>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <SystemInit+0xe8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	2b06      	cmp	r3, #6
 800127a:	d807      	bhi.n	800128c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <SystemInit+0xe8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 030f 	bic.w	r3, r3, #15
 8001284:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <SystemInit+0xe8>)
 8001286:	f043 0307 	orr.w	r3, r3, #7
 800128a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <SystemInit+0xec>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <SystemInit+0xec>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <SystemInit+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <SystemInit+0xec>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4929      	ldr	r1, [pc, #164]	; (8001348 <SystemInit+0xec>)
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <SystemInit+0xf0>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <SystemInit+0xe8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <SystemInit+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <SystemInit+0xe8>)
 80012c0:	f043 0307 	orr.w	r3, r3, #7
 80012c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <SystemInit+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemInit+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <SystemInit+0xec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <SystemInit+0xec>)
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <SystemInit+0xf4>)
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <SystemInit+0xec>)
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <SystemInit+0xf8>)
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <SystemInit+0xec>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <SystemInit+0xfc>)
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <SystemInit+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <SystemInit+0xec>)
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <SystemInit+0xfc>)
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <SystemInit+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <SystemInit+0xec>)
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <SystemInit+0xfc>)
 8001300:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <SystemInit+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <SystemInit+0xec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <SystemInit+0xec>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <SystemInit+0xec>)
 8001316:	2200      	movs	r2, #0
 8001318:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <SystemInit+0x100>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <SystemInit+0x104>)
 8001320:	4013      	ands	r3, r2
 8001322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001326:	d202      	bcs.n	800132e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <SystemInit+0x108>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <SystemInit+0x10c>)
 8001330:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001334:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	52002000 	.word	0x52002000
 8001348:	58024400 	.word	0x58024400
 800134c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001350:	02020200 	.word	0x02020200
 8001354:	01ff0000 	.word	0x01ff0000
 8001358:	01010280 	.word	0x01010280
 800135c:	5c001000 	.word	0x5c001000
 8001360:	ffff0000 	.word	0xffff0000
 8001364:	51008108 	.word	0x51008108
 8001368:	52004000 	.word	0x52004000

0800136c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_TIM1_Init+0xa0>)
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <MX_TIM1_Init+0xa4>)
 800138e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_TIM1_Init+0xa0>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_TIM1_Init+0xa0>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_TIM1_Init+0xa0>)
 800139e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_TIM1_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_TIM1_Init+0xa0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_TIM1_Init+0xa0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b6:	4815      	ldr	r0, [pc, #84]	; (800140c <MX_TIM1_Init+0xa0>)
 80013b8:	f009 fdc0 	bl	800af3c <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013c2:	f7ff fd9b 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_TIM1_Init+0xa0>)
 80013d4:	f009 ffa2 	bl	800b31c <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013de:	f7ff fd8d 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM1_Init+0xa0>)
 80013f4:	f00a f9ea 	bl	800b7cc <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013fe:	f7ff fd7d 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	24000494 	.word	0x24000494
 8001410:	40010000 	.word	0x40010000

08001414 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_TIM2_Init+0x98>)
 8001434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM2_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM2_Init+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_TIM2_Init+0x98>)
 8001448:	f642 62df 	movw	r2, #11999	; 0x2edf
 800144c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_TIM2_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM2_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_TIM2_Init+0x98>)
 800145c:	f009 fd6e 	bl	800af3c <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001466:	f7ff fd49 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_TIM2_Init+0x98>)
 8001478:	f009 ff50 	bl	800b31c <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001482:	f7ff fd3b 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_TIM2_Init+0x98>)
 8001494:	f00a f99a 	bl	800b7cc <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800149e:	f7ff fd2d 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	240004e0 	.word	0x240004e0

080014b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_TIM_Base_MspInit+0x74>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10f      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014e0:	e01b      	b.n	800151a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ea:	d116      	bne.n	800151a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f2:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2101      	movs	r1, #1
 800150e:	201c      	movs	r0, #28
 8001510:	f001 ff5c 	bl	80033cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001514:	201c      	movs	r0, #28
 8001516:	f001 ff73 	bl	8003400 <HAL_NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40010000 	.word	0x40010000
 8001528:	58024400 	.word	0x58024400

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001530:	f7ff fe94 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	; (8001578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f00f fbd1 	bl	8010d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff f99f 	bl	80008a0 <main>
  bx  lr
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001568:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800156c:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8001570:	08013a88 	.word	0x08013a88
  ldr r2, =_sbss
 8001574:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8001578:	24002288 	.word	0x24002288

0800157c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC3_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001586:	2003      	movs	r0, #3
 8001588:	f001 ff15 	bl	80033b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800158c:	f006 fdd6 	bl	800813c <HAL_RCC_GetSysClockFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_Init+0x68>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	4913      	ldr	r1, [pc, #76]	; (80015ec <HAL_Init+0x6c>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_Init+0x68>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_Init+0x6c>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_Init+0x70>)
 80015c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_Init+0x74>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ca:	200f      	movs	r0, #15
 80015cc:	f7ff fcb6 	bl	8000f3c <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e002      	b.n	80015e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015da:	f7ff fc95 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	58024400 	.word	0x58024400
 80015ec:	08012ee0 	.word	0x08012ee0
 80015f0:	24000004 	.word	0x24000004
 80015f4:	24000000 	.word	0x24000000

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2400000c 	.word	0x2400000c
 800161c:	2400052c 	.word	0x2400052c

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2400052c 	.word	0x2400052c

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2400000c 	.word	0x2400000c

08001680 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetREVID+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0c1b      	lsrs	r3, r3, #16
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	5c001000 	.word	0x5c001000

08001698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	609a      	str	r2, [r3, #8]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	609a      	str	r2, [r3, #8]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3360      	adds	r3, #96	; 0x60
 8001712:	461a      	mov	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	431a      	orrs	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	431a      	orrs	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	611a      	str	r2, [r3, #16]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001772:	b480      	push	{r7}
 8001774:	b087      	sub	sp, #28
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3360      	adds	r3, #96	; 0x60
 8001782:	461a      	mov	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	431a      	orrs	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
  }
}
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3330      	adds	r3, #48	; 0x30
 80017de:	461a      	mov	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	4413      	add	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	211f      	movs	r1, #31
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	f003 011f 	and.w	r1, r3, #31
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f023 0203 	bic.w	r2, r3, #3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	60da      	str	r2, [r3, #12]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3314      	adds	r3, #20
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0e5b      	lsrs	r3, r3, #25
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	0d1b      	lsrs	r3, r3, #20
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2107      	movs	r1, #7
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0d1b      	lsrs	r3, r3, #20
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0318 	and.w	r3, r3, #24
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c8:	40d9      	lsrs	r1, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	400b      	ands	r3, r1
 80018ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	000fffff 	.word	0x000fffff

080018ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 031f 	and.w	r3, r3, #31
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6093      	str	r3, [r2, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	5fffffc0 	.word	0x5fffffc0

08001948 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195c:	d101      	bne.n	8001962 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LL_ADC_EnableInternalRegulator+0x24>)
 800197e:	4013      	ands	r3, r2
 8001980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	6fffffc0 	.word	0x6fffffc0

08001998 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019ac:	d101      	bne.n	80019b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_ADC_Enable+0x24>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	7fffffc0 	.word	0x7fffffc0

080019e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <LL_ADC_Disable+0x24>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	f043 0202 	orr.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	7fffffc0 	.word	0x7fffffc0

08001a10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_IsEnabled+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_IsEnabled+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d101      	bne.n	8001a4e <LL_ADC_IsDisableOngoing+0x18>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <LL_ADC_IsDisableOngoing+0x1a>
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <LL_ADC_REG_StartConversion+0x24>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	7fffffc0 	.word	0x7fffffc0

08001a84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e18f      	b.n	8001e0a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7fe fd3d 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff19 	bl	8001948 <LL_ADC_IsDeepPowerDownEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff feff 	bl	8001924 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff34 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d114      	bne.n	8001b60 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff18 	bl	8001970 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b40:	4b87      	ldr	r3, [pc, #540]	; (8001d60 <HAL_ADC_Init+0x290>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <HAL_ADC_Init+0x294>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b52:	e002      	b.n	8001b5a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f9      	bne.n	8001b54 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff17 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff77 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8001b96:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 8129 	bne.w	8001df8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 8125 	bne.w	8001df8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff24 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d136      	bne.n	8001c3c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_ADC_Init+0x298>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_Init+0x112>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a63      	ldr	r2, [pc, #396]	; (8001d6c <HAL_ADC_Init+0x29c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10e      	bne.n	8001c00 <HAL_ADC_Init+0x130>
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <HAL_ADC_Init+0x298>)
 8001be4:	f7ff ff14 	bl	8001a10 <LL_ADC_IsEnabled>
 8001be8:	4604      	mov	r4, r0
 8001bea:	4860      	ldr	r0, [pc, #384]	; (8001d6c <HAL_ADC_Init+0x29c>)
 8001bec:	f7ff ff10 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4323      	orrs	r3, r4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e008      	b.n	8001c12 <HAL_ADC_Init+0x142>
 8001c00:	485b      	ldr	r0, [pc, #364]	; (8001d70 <HAL_ADC_Init+0x2a0>)
 8001c02:	f7ff ff05 	bl	8001a10 <LL_ADC_IsEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d012      	beq.n	8001c3c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a53      	ldr	r2, [pc, #332]	; (8001d68 <HAL_ADC_Init+0x298>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d004      	beq.n	8001c2a <HAL_ADC_Init+0x15a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_ADC_Init+0x29c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Init+0x15e>
 8001c2a:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_ADC_Init+0x2a4>)
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_Init+0x160>
 8001c2e:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_ADC_Init+0x2a8>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f7ff fd2e 	bl	8001698 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c3c:	f7ff fd20 	bl	8001680 <HAL_GetREVID>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d914      	bls.n	8001c74 <HAL_ADC_Init+0x1a4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d110      	bne.n	8001c74 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7d5b      	ldrb	r3, [r3, #21]
 8001c56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c5c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7f1b      	ldrb	r3, [r3, #28]
 8001c68:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c6a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c6c:	f043 030c 	orr.w	r3, r3, #12
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	e00d      	b.n	8001c90 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7d5b      	ldrb	r3, [r3, #21]
 8001c78:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c7e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c84:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7f1b      	ldrb	r3, [r3, #28]
 8001c8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7f1b      	ldrb	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	045b      	lsls	r3, r3, #17
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_ADC_Init+0x2ac>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	69b9      	ldr	r1, [r7, #24]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fed2 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fedf 	bl	8001aaa <LL_ADC_INJ_IsConversionOngoing>
 8001cec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d15f      	bne.n	8001db4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d15c      	bne.n	8001db4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7d1b      	ldrb	r3, [r3, #20]
 8001cfe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_ADC_Init+0x2b0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d130      	bne.n	8001d88 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_ADC_Init+0x2b4>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d3a:	3a01      	subs	r2, #1
 8001d3c:	0411      	lsls	r1, r2, #16
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	e01c      	b.n	8001d98 <HAL_ADC_Init+0x2c8>
 8001d5e:	bf00      	nop
 8001d60:	24000000 	.word	0x24000000
 8001d64:	053e2d63 	.word	0x053e2d63
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022100 	.word	0x40022100
 8001d70:	58026000 	.word	0x58026000
 8001d74:	40022300 	.word	0x40022300
 8001d78:	58026300 	.word	0x58026300
 8001d7c:	fff0c003 	.word	0xfff0c003
 8001d80:	ffffbffc 	.word	0xffffbffc
 8001d84:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 ffac 	bl	8002d0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10c      	bne.n	8001dd6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f023 010f 	bic.w	r1, r3, #15
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd4:	e007      	b.n	8001de6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 020f 	bic.w	r2, r2, #15
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
 8001df6:	e007      	b.n	8001e08 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop

08001e14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_ADC_Start+0x180>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_Start+0x1c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <HAL_ADC_Start+0x184>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_Start+0x20>
 8001e30:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_ADC_Start+0x188>)
 8001e32:	e000      	b.n	8001e36 <HAL_ADC_Start+0x22>
 8001e34:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_ADC_Start+0x18c>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fd58 	bl	80018ec <LL_ADC_GetMultimode>
 8001e3c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fe1e 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 809a 	bne.w	8001f84 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Start+0x4a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e095      	b.n	8001f8a <HAL_ADC_Start+0x176>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fdd2 	bl	8002a10 <ADC_Enable>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8081 	bne.w	8001f7a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e7c:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <HAL_ADC_Start+0x190>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <HAL_ADC_Start+0x184>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d002      	beq.n	8001e98 <HAL_ADC_Start+0x84>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_Start+0x86>
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_ADC_Start+0x180>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d002      	beq.n	8001ea8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec0:	d106      	bne.n	8001ed0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f023 0206 	bic.w	r2, r3, #6
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58
 8001ece:	e002      	b.n	8001ed6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	221c      	movs	r2, #28
 8001edc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_ADC_Start+0x184>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d002      	beq.n	8001ef6 <HAL_ADC_Start+0xe2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_Start+0xe4>
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_ADC_Start+0x180>)
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d008      	beq.n	8001f12 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d002      	beq.n	8001f12 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d114      	bne.n	8001f3c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fd91 	bl	8001a5c <LL_ADC_REG_StartConversion>
 8001f3a:	e025      	b.n	8001f88 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_ADC_Start+0x184>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d002      	beq.n	8001f58 <HAL_ADC_Start+0x144>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e000      	b.n	8001f5a <HAL_ADC_Start+0x146>
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_ADC_Start+0x180>)
 8001f5a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00f      	beq.n	8001f88 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
 8001f78:	e006      	b.n	8001f88 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f82:	e001      	b.n	8001f88 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
 8001f86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40022100 	.word	0x40022100
 8001f9c:	40022300 	.word	0x40022300
 8001fa0:	58026300 	.word	0x58026300
 8001fa4:	fffff0fe 	.word	0xfffff0fe

08001fa8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_PollForConversion+0x1e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a70      	ldr	r2, [pc, #448]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_PollForConversion+0x22>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_ADC_PollForConversion+0x1e0>)
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_PollForConversion+0x24>
 8001fca:	4b70      	ldr	r3, [pc, #448]	; (800218c <HAL_ADC_PollForConversion+0x1e4>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fc8d 	bl	80018ec <LL_ADC_GetMultimode>
 8001fd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d102      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	e037      	b.n	8002052 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d002      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d111      	bne.n	8002018 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0b1      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002012:	2304      	movs	r3, #4
 8002014:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002016:	e01c      	b.n	8002052 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_ADC_PollForConversion+0x84>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_ADC_PollForConversion+0x88>
 800202c:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_ADC_PollForConversion+0x1e0>)
 800202e:	e000      	b.n	8002032 <HAL_ADC_PollForConversion+0x8a>
 8002030:	4b56      	ldr	r3, [pc, #344]	; (800218c <HAL_ADC_PollForConversion+0x1e4>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fc68 	bl	8001908 <LL_ADC_GetMultiDMATransfer>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e093      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800204e:	2304      	movs	r3, #4
 8002050:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002052:	f7ff fae5 	bl	8001620 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	e021      	b.n	800209e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d01d      	beq.n	800209e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002062:	f7ff fadd 	bl	8001620 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <HAL_ADC_PollForConversion+0xd0>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f043 0204 	orr.w	r2, r3, #4
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06b      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0d6      	beq.n	800205a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fb73 	bl	80017a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01c      	beq.n	8002102 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7d5b      	ldrb	r3, [r3, #21]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d002      	beq.n	8002112 <HAL_ADC_PollForConversion+0x16a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e000      	b.n	8002114 <HAL_ADC_PollForConversion+0x16c>
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4293      	cmp	r3, r2
 800211a:	d008      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d002      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b09      	cmp	r3, #9
 800212c:	d104      	bne.n	8002138 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e00c      	b.n	8002152 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d002      	beq.n	8002148 <HAL_ADC_PollForConversion+0x1a0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e000      	b.n	800214a <HAL_ADC_PollForConversion+0x1a2>
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 800214a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e008      	b.n	8002174 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	220c      	movs	r2, #12
 8002172:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40022100 	.word	0x40022100
 8002188:	40022300 	.word	0x40022300
 800218c:	58026300 	.word	0x58026300

08002190 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_ADC_Start_DMA+0x168>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_Start_DMA+0x20>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_ADC_Start_DMA+0x16c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_Start_DMA+0x24>
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_ADC_Start_DMA+0x170>)
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_Start_DMA+0x26>
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_ADC_Start_DMA+0x174>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fb98 	bl	80018ec <LL_ADC_GetMultimode>
 80021bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fc5e 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 808c 	bne.w	80022e8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Start_DMA+0x4e>
 80021da:	2302      	movs	r3, #2
 80021dc:	e087      	b.n	80022ee <HAL_ADC_Start_DMA+0x15e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d002      	beq.n	80021f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b09      	cmp	r3, #9
 80021f6:	d170      	bne.n	80022da <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fc09 	bl	8002a10 <ADC_Enable>
 80021fe:	4603      	mov	r3, r0
 8002200:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d163      	bne.n	80022d0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_ADC_Start_DMA+0x178>)
 800220e:	4013      	ands	r3, r2
 8002210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a37      	ldr	r2, [pc, #220]	; (80022fc <HAL_ADC_Start_DMA+0x16c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d002      	beq.n	8002228 <HAL_ADC_Start_DMA+0x98>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	e000      	b.n	800222a <HAL_ADC_Start_DMA+0x9a>
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_ADC_Start_DMA+0x168>)
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	4293      	cmp	r3, r2
 8002230:	d002      	beq.n	8002238 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f023 0206 	bic.w	r2, r3, #6
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	659a      	str	r2, [r3, #88]	; 0x58
 800225c:	e002      	b.n	8002264 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <HAL_ADC_Start_DMA+0x17c>)
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_ADC_Start_DMA+0x180>)
 8002272:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_ADC_Start_DMA+0x184>)
 800227a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	221c      	movs	r2, #28
 8002282:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0210 	orr.w	r2, r2, #16
 800229a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7ff fabd 	bl	8001826 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3340      	adds	r3, #64	; 0x40
 80022b6:	4619      	mov	r1, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f001 fecc 	bl	8004058 <HAL_DMA_Start_IT>
 80022c0:	4603      	mov	r3, r0
 80022c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fbc7 	bl	8001a5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80022ce:	e00d      	b.n	80022ec <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80022d8:	e008      	b.n	80022ec <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80022e6:	e001      	b.n	80022ec <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
 80022ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40022100 	.word	0x40022100
 8002300:	40022300 	.word	0x40022300
 8002304:	58026300 	.word	0x58026300
 8002308:	fffff0fe 	.word	0xfffff0fe
 800230c:	08002be3 	.word	0x08002be3
 8002310:	08002cbb 	.word	0x08002cbb
 8002314:	08002cd7 	.word	0x08002cd7

08002318 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b0a1      	sub	sp, #132	; 0x84
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a9d      	ldr	r2, [pc, #628]	; (8002600 <HAL_ADC_ConfigChannel+0x290>)
 800238a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x2a>
 8002396:	2302      	movs	r3, #2
 8002398:	e321      	b.n	80029de <HAL_ADC_ConfigChannel+0x66e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb6c 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8306 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x62>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2201      	movs	r2, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	e016      	b.n	8002400 <HAL_ADC_ConfigChannel+0x90>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80023ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2201      	movs	r2, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	69d1      	ldr	r1, [r2, #28]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	430b      	orrs	r3, r1
 800240c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f7ff f9d7 	bl	80017ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fb2d 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 800242a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fb3a 	bl	8001aaa <LL_ADC_INJ_IsConversionOngoing>
 8002436:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 80b3 	bne.w	80025a6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80af 	bne.w	80025a6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	461a      	mov	r2, r3
 8002456:	f7ff f9f9 	bl	800184c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_ADC_ConfigChannel+0x294>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002466:	d10b      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x110>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	e01d      	b.n	80024bc <HAL_ADC_ConfigChannel+0x14c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x136>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	e00a      	b.n	80024bc <HAL_ADC_ConfigChannel+0x14c>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d027      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d4:	f7ff f914 	bl	8001700 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6919      	ldr	r1, [r3, #16]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	7e5b      	ldrb	r3, [r3, #25]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x17e>
 80024e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024ec:	e000      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x180>
 80024ee:	2300      	movs	r3, #0
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff f93e 	bl	8001772 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7e1b      	ldrb	r3, [r3, #24]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d102      	bne.n	800250c <HAL_ADC_ConfigChannel+0x19c>
 8002506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250a:	e000      	b.n	800250e <HAL_ADC_ConfigChannel+0x19e>
 800250c:	2300      	movs	r3, #0
 800250e:	461a      	mov	r2, r3
 8002510:	f7ff f916 	bl	8001740 <LL_ADC_SetDataRightShift>
 8002514:	e047      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	069b      	lsls	r3, r3, #26
 8002526:	429a      	cmp	r2, r3
 8002528:	d107      	bne.n	800253a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002538:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	069b      	lsls	r3, r3, #26
 800254a:	429a      	cmp	r2, r3
 800254c:	d107      	bne.n	800255e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	069b      	lsls	r3, r3, #26
 800256e:	429a      	cmp	r2, r3
 8002570:	d107      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002580:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	069b      	lsls	r3, r3, #26
 8002592:	429a      	cmp	r2, r3
 8002594:	d107      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fa30 	bl	8001a10 <LL_ADC_IsEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 820d 	bne.w	80029d2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f7ff f96d 	bl	80018a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_ADC_ConfigChannel+0x290>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	f040 8133 	bne.w	800283c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d110      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x298>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	3301      	adds	r3, #1
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	bf94      	ite	ls
 80025f6:	2301      	movls	r3, #1
 80025f8:	2300      	movhi	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x2cc>
 80025fe:	bf00      	nop
 8002600:	47ff0000 	.word	0x47ff0000
 8002604:	5c001000 	.word	0x5c001000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002618:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800261a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2b09      	cmp	r3, #9
 8002634:	bf94      	ite	ls
 8002636:	2301      	movls	r3, #1
 8002638:	2300      	movhi	r3, #0
 800263a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263c:	2b00      	cmp	r3, #0
 800263e:	d079      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <HAL_ADC_ConfigChannel+0x2ec>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	3301      	adds	r3, #1
 8002654:	069b      	lsls	r3, r3, #26
 8002656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265a:	e015      	b.n	8002688 <HAL_ADC_ConfigChannel+0x318>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800266a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800266e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e003      	b.n	8002680 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	069b      	lsls	r3, r3, #26
 8002684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x338>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	e017      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x368>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80026ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80026c0:	2320      	movs	r3, #32
 80026c2:	e003      	b.n	80026cc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80026c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	ea42 0103 	orr.w	r1, r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x38e>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	3301      	adds	r3, #1
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	051b      	lsls	r3, r3, #20
 80026fc:	e018      	b.n	8002730 <HAL_ADC_ConfigChannel+0x3c0>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e003      	b.n	8002722 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002730:	430b      	orrs	r3, r1
 8002732:	e07e      	b.n	8002832 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x3e0>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	3301      	adds	r3, #1
 8002748:	069b      	lsls	r3, r3, #26
 800274a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800274e:	e015      	b.n	800277c <HAL_ADC_ConfigChannel+0x40c>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e003      	b.n	8002774 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	3301      	adds	r3, #1
 8002776:	069b      	lsls	r3, r3, #26
 8002778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_ADC_ConfigChannel+0x42c>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	e017      	b.n	80027cc <HAL_ADC_ConfigChannel+0x45c>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	61bb      	str	r3, [r7, #24]
  return result;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e003      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	ea42 0103 	orr.w	r1, r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x488>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	3301      	adds	r3, #1
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	3b1e      	subs	r3, #30
 80027f0:	051b      	lsls	r3, r3, #20
 80027f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f6:	e01b      	b.n	8002830 <HAL_ADC_ConfigChannel+0x4c0>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	60fb      	str	r3, [r7, #12]
  return result;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f003 021f 	and.w	r2, r3, #31
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	3b1e      	subs	r3, #30
 800282a:	051b      	lsls	r3, r3, #20
 800282c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002830:	430b      	orrs	r3, r1
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	4619      	mov	r1, r3
 8002838:	f7ff f808 	bl	800184c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f280 80c6 	bge.w	80029d2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a67      	ldr	r2, [pc, #412]	; (80029e8 <HAL_ADC_ConfigChannel+0x678>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_ADC_ConfigChannel+0x4ea>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_ADC_ConfigChannel+0x67c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x4ee>
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_ADC_ConfigChannel+0x680>)
 800285c:	e000      	b.n	8002860 <HAL_ADC_ConfigChannel+0x4f0>
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_ADC_ConfigChannel+0x684>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe ff3f 	bl	80016e4 <LL_ADC_GetCommonPathInternalCh>
 8002866:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5e      	ldr	r2, [pc, #376]	; (80029e8 <HAL_ADC_ConfigChannel+0x678>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_ADC_ConfigChannel+0x50c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <HAL_ADC_ConfigChannel+0x67c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10e      	bne.n	800289a <HAL_ADC_ConfigChannel+0x52a>
 800287c:	485a      	ldr	r0, [pc, #360]	; (80029e8 <HAL_ADC_ConfigChannel+0x678>)
 800287e:	f7ff f8c7 	bl	8001a10 <LL_ADC_IsEnabled>
 8002882:	4604      	mov	r4, r0
 8002884:	4859      	ldr	r0, [pc, #356]	; (80029ec <HAL_ADC_ConfigChannel+0x67c>)
 8002886:	f7ff f8c3 	bl	8001a10 <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	4323      	orrs	r3, r4
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	e008      	b.n	80028ac <HAL_ADC_ConfigChannel+0x53c>
 800289a:	4857      	ldr	r0, [pc, #348]	; (80029f8 <HAL_ADC_ConfigChannel+0x688>)
 800289c:	f7ff f8b8 	bl	8001a10 <LL_ADC_IsEnabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d07d      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_ADC_ConfigChannel+0x68c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d130      	bne.n	800291c <HAL_ADC_ConfigChannel+0x5ac>
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d12b      	bne.n	800291c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4b      	ldr	r2, [pc, #300]	; (80029f8 <HAL_ADC_ConfigChannel+0x688>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f040 8081 	bne.w	80029d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a44      	ldr	r2, [pc, #272]	; (80029e8 <HAL_ADC_ConfigChannel+0x678>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0x574>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a43      	ldr	r2, [pc, #268]	; (80029ec <HAL_ADC_ConfigChannel+0x67c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x578>
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_ADC_ConfigChannel+0x680>)
 80028e6:	e000      	b.n	80028ea <HAL_ADC_ConfigChannel+0x57a>
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_ADC_ConfigChannel+0x684>)
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f7fe fee3 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_ADC_ConfigChannel+0x690>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	4a41      	ldr	r2, [pc, #260]	; (8002a04 <HAL_ADC_ConfigChannel+0x694>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800290c:	e002      	b.n	8002914 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3b01      	subs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800291a:	e05a      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <HAL_ADC_ConfigChannel+0x698>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d11e      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x5f4>
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d119      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a30      	ldr	r2, [pc, #192]	; (80029f8 <HAL_ADC_ConfigChannel+0x688>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d14b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_ADC_ConfigChannel+0x678>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_ADC_ConfigChannel+0x5de>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a28      	ldr	r2, [pc, #160]	; (80029ec <HAL_ADC_ConfigChannel+0x67c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x5e2>
 800294e:	4a28      	ldr	r2, [pc, #160]	; (80029f0 <HAL_ADC_ConfigChannel+0x680>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_ConfigChannel+0x5e4>
 8002952:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <HAL_ADC_ConfigChannel+0x684>)
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7fe feae 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002962:	e036      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_ADC_ConfigChannel+0x69c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d131      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12c      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <HAL_ADC_ConfigChannel+0x688>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d127      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <HAL_ADC_ConfigChannel+0x678>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x626>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a16      	ldr	r2, [pc, #88]	; (80029ec <HAL_ADC_ConfigChannel+0x67c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x62a>
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <HAL_ADC_ConfigChannel+0x680>)
 8002998:	e000      	b.n	800299c <HAL_ADC_ConfigChannel+0x62c>
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_ADC_ConfigChannel+0x684>)
 800299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f7fe fe8a 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
 80029aa:	e012      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029be:	e008      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3784      	adds	r7, #132	; 0x84
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40022100 	.word	0x40022100
 80029f0:	40022300 	.word	0x40022300
 80029f4:	58026300 	.word	0x58026300
 80029f8:	58026000 	.word	0x58026000
 80029fc:	cb840000 	.word	0xcb840000
 8002a00:	24000000 	.word	0x24000000
 8002a04:	053e2d63 	.word	0x053e2d63
 8002a08:	c7520000 	.word	0xc7520000
 8002a0c:	cfb80000 	.word	0xcfb80000

08002a10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fff7 	bl	8001a10 <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d16e      	bne.n	8002b06 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <ADC_Enable+0x100>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e05a      	b.n	8002b08 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe ffb2 	bl	80019c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fde0 	bl	8001620 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2b      	ldr	r2, [pc, #172]	; (8002b14 <ADC_Enable+0x104>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <ADC_Enable+0x66>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <ADC_Enable+0x108>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <ADC_Enable+0x6a>
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <ADC_Enable+0x10c>)
 8002a78:	e000      	b.n	8002a7c <ADC_Enable+0x6c>
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <ADC_Enable+0x110>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe ff35 	bl	80018ec <LL_ADC_GetMultimode>
 8002a82:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <ADC_Enable+0x108>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d002      	beq.n	8002a94 <ADC_Enable+0x84>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e000      	b.n	8002a96 <ADC_Enable+0x86>
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <ADC_Enable+0x104>)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02c      	beq.n	8002af8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d130      	bne.n	8002b06 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa4:	e028      	b.n	8002af8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe ffb0 	bl	8001a10 <LL_ADC_IsEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d104      	bne.n	8002ac0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe ff80 	bl	80019c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ac0:	f7fe fdae 	bl	8001620 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d914      	bls.n	8002af8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00d      	beq.n	8002af8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d1cf      	bne.n	8002aa6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	8000003f 	.word	0x8000003f
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40022100 	.word	0x40022100
 8002b1c:	40022300 	.word	0x40022300
 8002b20:	58026300 	.word	0x58026300

08002b24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe ff80 	bl	8001a36 <LL_ADC_IsDisableOngoing>
 8002b36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe ff67 	bl	8001a10 <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d047      	beq.n	8002bd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d144      	bne.n	8002bd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030d 	and.w	r3, r3, #13
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10c      	bne.n	8002b76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe ff41 	bl	80019e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fd57 	bl	8001620 <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b74:	e029      	b.n	8002bca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e023      	b.n	8002bda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b92:	f7fe fd45 	bl	8001620 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d914      	bls.n	8002bca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1dc      	bne.n	8002b92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d14b      	bne.n	8002c94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d021      	beq.n	8002c5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fdc4 	bl	80017a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d032      	beq.n	8002c8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d12b      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11f      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
 8002c58:	e018      	b.n	8002c8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fb50 	bl	8002332 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c92:	e00e      	b.n	8002cb2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fb5a 	bl	800235a <HAL_ADC_ErrorCallback>
}
 8002ca6:	e004      	b.n	8002cb2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fb3c 	bl	8002346 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fb2c 	bl	800235a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7a      	ldr	r2, [pc, #488]	; (8002f04 <ADC_ConfigureBoostMode+0x1f8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <ADC_ConfigureBoostMode+0x1c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a79      	ldr	r2, [pc, #484]	; (8002f08 <ADC_ConfigureBoostMode+0x1fc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d109      	bne.n	8002d3c <ADC_ConfigureBoostMode+0x30>
 8002d28:	4b78      	ldr	r3, [pc, #480]	; (8002f0c <ADC_ConfigureBoostMode+0x200>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e008      	b.n	8002d4e <ADC_ConfigureBoostMode+0x42>
 8002d3c:	4b74      	ldr	r3, [pc, #464]	; (8002f10 <ADC_ConfigureBoostMode+0x204>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01c      	beq.n	8002d8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d52:	f005 fb6d 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 8002d56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d60:	d010      	beq.n	8002d84 <ADC_ConfigureBoostMode+0x78>
 8002d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d66:	d873      	bhi.n	8002e50 <ADC_ConfigureBoostMode+0x144>
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d002      	beq.n	8002d74 <ADC_ConfigureBoostMode+0x68>
 8002d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d72:	d16d      	bne.n	8002e50 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	60fb      	str	r3, [r7, #12]
        break;
 8002d82:	e068      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	60fb      	str	r3, [r7, #12]
        break;
 8002d8a:	e064      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	f006 fdde 	bl	8009954 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002da2:	d051      	beq.n	8002e48 <ADC_ConfigureBoostMode+0x13c>
 8002da4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002da8:	d854      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002daa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002dae:	d047      	beq.n	8002e40 <ADC_ConfigureBoostMode+0x134>
 8002db0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002db4:	d84e      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002db6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002dba:	d03d      	beq.n	8002e38 <ADC_ConfigureBoostMode+0x12c>
 8002dbc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002dc0:	d848      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc6:	d033      	beq.n	8002e30 <ADC_ConfigureBoostMode+0x124>
 8002dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dcc:	d842      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002dce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dd2:	d029      	beq.n	8002e28 <ADC_ConfigureBoostMode+0x11c>
 8002dd4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dd8:	d83c      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002dda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dde:	d01a      	beq.n	8002e16 <ADC_ConfigureBoostMode+0x10a>
 8002de0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002de4:	d836      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002de6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dea:	d014      	beq.n	8002e16 <ADC_ConfigureBoostMode+0x10a>
 8002dec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002df0:	d830      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df6:	d00e      	beq.n	8002e16 <ADC_ConfigureBoostMode+0x10a>
 8002df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dfc:	d82a      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002dfe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e02:	d008      	beq.n	8002e16 <ADC_ConfigureBoostMode+0x10a>
 8002e04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e08:	d824      	bhi.n	8002e54 <ADC_ConfigureBoostMode+0x148>
 8002e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e0e:	d002      	beq.n	8002e16 <ADC_ConfigureBoostMode+0x10a>
 8002e10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e14:	d11e      	bne.n	8002e54 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	60fb      	str	r3, [r7, #12]
        break;
 8002e26:	e016      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
        break;
 8002e2e:	e012      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	60fb      	str	r3, [r7, #12]
        break;
 8002e36:	e00e      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	60fb      	str	r3, [r7, #12]
        break;
 8002e3e:	e00a      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	09db      	lsrs	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]
        break;
 8002e46:	e006      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	60fb      	str	r3, [r7, #12]
        break;
 8002e4e:	e002      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002e54:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e56:	f7fe fc13 	bl	8001680 <HAL_GetREVID>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d815      	bhi.n	8002e90 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <ADC_ConfigureBoostMode+0x208>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d908      	bls.n	8002e7e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e7c:	e03e      	b.n	8002efc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8c:	609a      	str	r2, [r3, #8]
}
 8002e8e:	e035      	b.n	8002efc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <ADC_ConfigureBoostMode+0x20c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d808      	bhi.n	8002eb0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eac:	609a      	str	r2, [r3, #8]
}
 8002eae:	e025      	b.n	8002efc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <ADC_ConfigureBoostMode+0x210>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d80a      	bhi.n	8002ece <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	e016      	b.n	8002efc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <ADC_ConfigureBoostMode+0x214>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d80a      	bhi.n	8002eec <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	e007      	b.n	8002efc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002efa:	609a      	str	r2, [r3, #8]
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40022000 	.word	0x40022000
 8002f08:	40022100 	.word	0x40022100
 8002f0c:	40022300 	.word	0x40022300
 8002f10:	58026300 	.word	0x58026300
 8002f14:	01312d00 	.word	0x01312d00
 8002f18:	005f5e10 	.word	0x005f5e10
 8002f1c:	00bebc20 	.word	0x00bebc20
 8002f20:	017d7840 	.word	0x017d7840

08002f24 <LL_ADC_IsEnabled>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <LL_ADC_IsEnabled+0x18>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <LL_ADC_IsEnabled+0x1a>
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <LL_ADC_StartCalibration>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <LL_ADC_StartCalibration+0x38>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	3ffeffc0 	.word	0x3ffeffc0

08002f88 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f9c:	d101      	bne.n	8002fa2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d101      	bne.n	8002fc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADCEx_Calibration_Start+0x1e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e04c      	b.n	8003090 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff fd90 	bl	8002b24 <ADC_Disable>
 8003004:	4603      	mov	r3, r0
 8003006:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d135      	bne.n	800307a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003012:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003014:	4013      	ands	r3, r2
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff90 	bl	8002f4c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800302c:	e014      	b.n	8003058 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3301      	adds	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4a19      	ldr	r2, [pc, #100]	; (800309c <HAL_ADCEx_Calibration_Start+0xc4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d30d      	bcc.n	8003058 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	f023 0312 	bic.w	r3, r3, #18
 8003044:	f043 0210 	orr.w	r2, r3, #16
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e01b      	b.n	8003090 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff93 	bl	8002f88 <LL_ADC_IsCalibrationOnGoing>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e2      	bne.n	800302e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f023 0303 	bic.w	r3, r3, #3
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
 8003078:	e005      	b.n	8003086 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	ffffeefd 	.word	0xffffeefd
 800309c:	25c3f800 	.word	0x25c3f800

080030a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b09f      	sub	sp, #124	; 0x7c
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e0be      	b.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5c      	ldr	r2, [pc, #368]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d102      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030d8:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	e001      	b.n	80030e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e09d      	b.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ff54 	bl	8002fb0 <LL_ADC_REG_IsConversionOngoing>
 8003108:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff4e 	bl	8002fb0 <LL_ADC_REG_IsConversionOngoing>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d17f      	bne.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800311a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800311c:	2b00      	cmp	r3, #0
 800311e:	d17c      	bne.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a46      	ldr	r2, [pc, #280]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003134:	4b45      	ldr	r3, [pc, #276]	; (800324c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003136:	e000      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003138:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800313a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d039      	beq.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	431a      	orrs	r2, r3
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003154:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a38      	ldr	r2, [pc, #224]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10e      	bne.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800316a:	4836      	ldr	r0, [pc, #216]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800316c:	f7ff feda 	bl	8002f24 <LL_ADC_IsEnabled>
 8003170:	4604      	mov	r4, r0
 8003172:	4835      	ldr	r0, [pc, #212]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003174:	f7ff fed6 	bl	8002f24 <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	4323      	orrs	r3, r4
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e008      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003188:	4832      	ldr	r0, [pc, #200]	; (8003254 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800318a:	f7ff fecb 	bl	8002f24 <LL_ADC_IsEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d047      	beq.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	6811      	ldr	r1, [r2, #0]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6892      	ldr	r2, [r2, #8]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b6:	e03a      	b.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10e      	bne.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80031d8:	481a      	ldr	r0, [pc, #104]	; (8003244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031da:	f7ff fea3 	bl	8002f24 <LL_ADC_IsEnabled>
 80031de:	4604      	mov	r4, r0
 80031e0:	4819      	ldr	r0, [pc, #100]	; (8003248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031e2:	f7ff fe9f 	bl	8002f24 <LL_ADC_IsEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4323      	orrs	r3, r4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e008      	b.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80031f6:	4817      	ldr	r0, [pc, #92]	; (8003254 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031f8:	f7ff fe94 	bl	8002f24 <LL_ADC_IsEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003212:	4013      	ands	r3, r2
 8003214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003216:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003218:	e009      	b.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800322c:	e000      	b.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800322e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003238:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800323c:	4618      	mov	r0, r3
 800323e:	377c      	adds	r7, #124	; 0x7c
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	40022000 	.word	0x40022000
 8003248:	40022100 	.word	0x40022100
 800324c:	40022300 	.word	0x40022300
 8003250:	58026300 	.word	0x58026300
 8003254:	58026000 	.word	0x58026000
 8003258:	fffff0e0 	.word	0xfffff0e0

0800325c <__NVIC_SetPriorityGrouping>:
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <__NVIC_SetPriorityGrouping+0x40>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003278:	4013      	ands	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	4313      	orrs	r3, r2
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	; (800329c <__NVIC_SetPriorityGrouping+0x40>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00
 80032a0:	05fa0000 	.word	0x05fa0000

080032a4 <__NVIC_GetPriorityGrouping>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <__NVIC_GetPriorityGrouping+0x18>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 0307 	and.w	r3, r3, #7
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_EnableIRQ>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	db0b      	blt.n	80032ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	4907      	ldr	r1, [pc, #28]	; (80032f8 <__NVIC_EnableIRQ+0x38>)
 80032da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2001      	movs	r0, #1
 80032e2:	fa00 f202 	lsl.w	r2, r0, r2
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000e100 	.word	0xe000e100

080032fc <__NVIC_SetPriority>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db0a      	blt.n	8003326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <__NVIC_SetPriority+0x4c>)
 8003316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	440b      	add	r3, r1
 8003320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003324:	e00a      	b.n	800333c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <__NVIC_SetPriority+0x50>)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3b04      	subs	r3, #4
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	440b      	add	r3, r1
 800333a:	761a      	strb	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <NVIC_EncodePriority>:
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f1c3 0307 	rsb	r3, r3, #7
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf28      	it	cs
 800336e:	2304      	movcs	r3, #4
 8003370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3304      	adds	r3, #4
 8003376:	2b06      	cmp	r3, #6
 8003378:	d902      	bls.n	8003380 <NVIC_EncodePriority+0x30>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3b03      	subs	r3, #3
 800337e:	e000      	b.n	8003382 <NVIC_EncodePriority+0x32>
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	f04f 32ff 	mov.w	r2, #4294967295
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003398:	f04f 31ff 	mov.w	r1, #4294967295
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	4313      	orrs	r3, r2
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff4c 	bl	800325c <__NVIC_SetPriorityGrouping>
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033da:	f7ff ff63 	bl	80032a4 <__NVIC_GetPriorityGrouping>
 80033de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	6978      	ldr	r0, [r7, #20]
 80033e6:	f7ff ffb3 	bl	8003350 <NVIC_EncodePriority>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ff82 	bl	80032fc <__NVIC_SetPriority>
}
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ff56 	bl	80032c0 <__NVIC_EnableIRQ>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003420:	f3bf 8f5f 	dmb	sy
}
 8003424:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_MPU_Disable+0x28>)
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	4a06      	ldr	r2, [pc, #24]	; (8003444 <HAL_MPU_Disable+0x28>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_MPU_Disable+0x2c>)
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000ed00 	.word	0xe000ed00
 8003448:	e000ed90 	.word	0xe000ed90

0800344c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_MPU_Enable+0x38>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_MPU_Enable+0x3c>)
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_MPU_Enable+0x3c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800346a:	f3bf 8f4f 	dsb	sy
}
 800346e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003470:	f3bf 8f6f 	isb	sy
}
 8003474:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed90 	.word	0xe000ed90
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	785a      	ldrb	r2, [r3, #1]
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_MPU_ConfigRegion+0x84>)
 800349a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d029      	beq.n	80034f8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80034a4:	4a1a      	ldr	r2, [pc, #104]	; (8003510 <HAL_MPU_ConfigRegion+0x84>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7b1b      	ldrb	r3, [r3, #12]
 80034b0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7adb      	ldrb	r3, [r3, #11]
 80034b6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7a9b      	ldrb	r3, [r3, #10]
 80034be:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7b5b      	ldrb	r3, [r3, #13]
 80034c6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7b9b      	ldrb	r3, [r3, #14]
 80034ce:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7bdb      	ldrb	r3, [r3, #15]
 80034d6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7a5b      	ldrb	r3, [r3, #9]
 80034de:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7a1b      	ldrb	r3, [r3, #8]
 80034e6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034e8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034f2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034f4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80034f6:	e005      	b.n	8003504 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_MPU_ConfigRegion+0x84>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_MPU_ConfigRegion+0x84>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed90 	.word	0xe000ed90

08003514 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e014      	b.n	8003550 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd f8e2 	bl	8000700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	795b      	ldrb	r3, [r3, #5]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_DAC_Start+0x16>
 800356a:	2302      	movs	r3, #2
 800356c:	e040      	b.n	80035f0 <HAL_DAC_Start+0x98>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2201      	movs	r2, #1
 8003588:	409a      	lsls	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d11d      	bne.n	80035e2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	e014      	b.n	80035e2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2102      	movs	r1, #2
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d107      	bne.n	80035e2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0202 	orr.w	r2, r2, #2
 80035e0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	d120      	bne.n	8003656 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	d118      	bne.n	8003656 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800363e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800364e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f852 	bl	80036fa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003664:	d120      	bne.n	80036a8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003674:	d118      	bne.n	80036a8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80036a0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f972 	bl	800398c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	3308      	adds	r3, #8
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e004      	b.n	80036e4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	3314      	adds	r3, #20
 80036e2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	461a      	mov	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	795b      	ldrb	r3, [r3, #5]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_DAC_ConfigChannel+0x18>
 8003724:	2302      	movs	r3, #2
 8003726:	e12a      	b.n	800397e <HAL_DAC_ConfigChannel+0x26e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b04      	cmp	r3, #4
 800373a:	f040 8081 	bne.w	8003840 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800373e:	f7fd ff6f 	bl	8001620 <HAL_GetTick>
 8003742:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d140      	bne.n	80037cc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800374a:	e018      	b.n	800377e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800374c:	f7fd ff68 	bl	8001620 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d911      	bls.n	800377e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003760:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_DAC_ConfigChannel+0x278>)
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f043 0208 	orr.w	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2203      	movs	r2, #3
 8003778:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0ff      	b.n	800397e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003784:	4b80      	ldr	r3, [pc, #512]	; (8003988 <HAL_DAC_ConfigChannel+0x278>)
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1df      	bne.n	800374c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800378c:	2001      	movs	r0, #1
 800378e:	f7fd ff53 	bl	8001638 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	6992      	ldr	r2, [r2, #24]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
 800379c:	e023      	b.n	80037e6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800379e:	f7fd ff3f 	bl	8001620 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d90f      	bls.n	80037cc <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	da0a      	bge.n	80037cc <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f043 0208 	orr.w	r2, r3, #8
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2203      	movs	r2, #3
 80037c6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0d8      	b.n	800397e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	dbe3      	blt.n	800379e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7fd ff2e 	bl	8001638 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	6992      	ldr	r2, [r2, #24]
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	ea02 0103 	and.w	r1, r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	21ff      	movs	r1, #255	; 0xff
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	ea02 0103 	and.w	r1, r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d11d      	bne.n	8003884 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	221f      	movs	r2, #31
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4013      	ands	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2207      	movs	r2, #7
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4013      	ands	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e00f      	b.n	80038ce <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d102      	bne.n	80038bc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e008      	b.n	80038ce <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e001      	b.n	80038ce <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43da      	mvns	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	400a      	ands	r2, r1
 8003914:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4013      	ands	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	22c0      	movs	r2, #192	; 0xc0
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	400a      	ands	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20008000 	.word	0x20008000

0800398c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039a8:	f7fd fe3a 	bl	8001620 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e316      	b.n	8003fe6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a66      	ldr	r2, [pc, #408]	; (8003b58 <HAL_DMA_Init+0x1b8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04a      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_DMA_Init+0x1bc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d045      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a63      	ldr	r2, [pc, #396]	; (8003b60 <HAL_DMA_Init+0x1c0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d040      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a62      	ldr	r2, [pc, #392]	; (8003b64 <HAL_DMA_Init+0x1c4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d03b      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a60      	ldr	r2, [pc, #384]	; (8003b68 <HAL_DMA_Init+0x1c8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d036      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_DMA_Init+0x1cc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d031      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5d      	ldr	r2, [pc, #372]	; (8003b70 <HAL_DMA_Init+0x1d0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02c      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5c      	ldr	r2, [pc, #368]	; (8003b74 <HAL_DMA_Init+0x1d4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d027      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5a      	ldr	r2, [pc, #360]	; (8003b78 <HAL_DMA_Init+0x1d8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d022      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a59      	ldr	r2, [pc, #356]	; (8003b7c <HAL_DMA_Init+0x1dc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d01d      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_DMA_Init+0x1e0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d018      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a56      	ldr	r2, [pc, #344]	; (8003b84 <HAL_DMA_Init+0x1e4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_DMA_Init+0x1e8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_DMA_Init+0x1ec>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a51      	ldr	r2, [pc, #324]	; (8003b90 <HAL_DMA_Init+0x1f0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_DMA_Init+0x1f4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_DMA_Init+0xbc>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_DMA_Init+0xbe>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 813b 	beq.w	8003cda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a37      	ldr	r2, [pc, #220]	; (8003b58 <HAL_DMA_Init+0x1b8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a36      	ldr	r2, [pc, #216]	; (8003b5c <HAL_DMA_Init+0x1bc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d045      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <HAL_DMA_Init+0x1c0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <HAL_DMA_Init+0x1c4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d03b      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <HAL_DMA_Init+0x1c8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d036      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <HAL_DMA_Init+0x1cc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d031      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <HAL_DMA_Init+0x1d0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <HAL_DMA_Init+0x1d4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d027      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <HAL_DMA_Init+0x1d8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <HAL_DMA_Init+0x1dc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01d      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <HAL_DMA_Init+0x1e0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <HAL_DMA_Init+0x1e4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <HAL_DMA_Init+0x1e8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <HAL_DMA_Init+0x1ec>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_DMA_Init+0x1f0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <HAL_DMA_Init+0x1f4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <HAL_DMA_Init+0x186>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e007      	b.n	8003b36 <HAL_DMA_Init+0x196>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b36:	e02f      	b.n	8003b98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b38:	f7fd fd72 	bl	8001620 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d928      	bls.n	8003b98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e246      	b.n	8003fe6 <HAL_DMA_Init+0x646>
 8003b58:	40020010 	.word	0x40020010
 8003b5c:	40020028 	.word	0x40020028
 8003b60:	40020040 	.word	0x40020040
 8003b64:	40020058 	.word	0x40020058
 8003b68:	40020070 	.word	0x40020070
 8003b6c:	40020088 	.word	0x40020088
 8003b70:	400200a0 	.word	0x400200a0
 8003b74:	400200b8 	.word	0x400200b8
 8003b78:	40020410 	.word	0x40020410
 8003b7c:	40020428 	.word	0x40020428
 8003b80:	40020440 	.word	0x40020440
 8003b84:	40020458 	.word	0x40020458
 8003b88:	40020470 	.word	0x40020470
 8003b8c:	40020488 	.word	0x40020488
 8003b90:	400204a0 	.word	0x400204a0
 8003b94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1c8      	bne.n	8003b38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4b83      	ldr	r3, [pc, #524]	; (8003dc0 <HAL_DMA_Init+0x420>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003bbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d107      	bne.n	8003bfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003bfc:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <HAL_DMA_Init+0x424>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b71      	ldr	r3, [pc, #452]	; (8003dc8 <HAL_DMA_Init+0x428>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d328      	bcc.n	8003c5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b28      	cmp	r3, #40	; 0x28
 8003c10:	d903      	bls.n	8003c1a <HAL_DMA_Init+0x27a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b2e      	cmp	r3, #46	; 0x2e
 8003c18:	d917      	bls.n	8003c4a <HAL_DMA_Init+0x2aa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c20:	d903      	bls.n	8003c2a <HAL_DMA_Init+0x28a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b42      	cmp	r3, #66	; 0x42
 8003c28:	d90f      	bls.n	8003c4a <HAL_DMA_Init+0x2aa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b46      	cmp	r3, #70	; 0x46
 8003c30:	d903      	bls.n	8003c3a <HAL_DMA_Init+0x29a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b48      	cmp	r3, #72	; 0x48
 8003c38:	d907      	bls.n	8003c4a <HAL_DMA_Init+0x2aa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b4e      	cmp	r3, #78	; 0x4e
 8003c40:	d905      	bls.n	8003c4e <HAL_DMA_Init+0x2ae>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b52      	cmp	r3, #82	; 0x52
 8003c48:	d801      	bhi.n	8003c4e <HAL_DMA_Init+0x2ae>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_DMA_Init+0x2b0>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0307 	bic.w	r3, r3, #7
 8003c72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d117      	bne.n	8003cb6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 fdcf 	bl	800583c <DMA_CheckFifoParam>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e197      	b.n	8003fe6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 fd0a 	bl	80056d8 <DMA_CalcBaseAndBitshift>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	223f      	movs	r2, #63	; 0x3f
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e0cd      	b.n	8003e76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_DMA_Init+0x42c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d022      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a39      	ldr	r2, [pc, #228]	; (8003dd0 <HAL_DMA_Init+0x430>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01d      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_DMA_Init+0x434>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d018      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a36      	ldr	r2, [pc, #216]	; (8003dd8 <HAL_DMA_Init+0x438>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <HAL_DMA_Init+0x43c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a33      	ldr	r2, [pc, #204]	; (8003de0 <HAL_DMA_Init+0x440>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <HAL_DMA_Init+0x444>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_DMA_Init+0x38a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <HAL_DMA_Init+0x448>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_DMA_Init+0x38e>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_DMA_Init+0x390>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8097 	beq.w	8003e64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a24      	ldr	r2, [pc, #144]	; (8003dcc <HAL_DMA_Init+0x42c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d021      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <HAL_DMA_Init+0x430>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01c      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <HAL_DMA_Init+0x434>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d017      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_DMA_Init+0x438>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d012      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_DMA_Init+0x43c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00d      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_DMA_Init+0x440>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d008      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_DMA_Init+0x444>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <HAL_DMA_Init+0x3e4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_DMA_Init+0x448>)
 8003d82:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_DMA_Init+0x44c>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d021      	beq.n	8003df0 <HAL_DMA_Init+0x450>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d102      	bne.n	8003dba <HAL_DMA_Init+0x41a>
 8003db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003db8:	e01b      	b.n	8003df2 <HAL_DMA_Init+0x452>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e019      	b.n	8003df2 <HAL_DMA_Init+0x452>
 8003dbe:	bf00      	nop
 8003dc0:	fe10803f 	.word	0xfe10803f
 8003dc4:	5c001000 	.word	0x5c001000
 8003dc8:	ffff0000 	.word	0xffff0000
 8003dcc:	58025408 	.word	0x58025408
 8003dd0:	5802541c 	.word	0x5802541c
 8003dd4:	58025430 	.word	0x58025430
 8003dd8:	58025444 	.word	0x58025444
 8003ddc:	58025458 	.word	0x58025458
 8003de0:	5802546c 	.word	0x5802546c
 8003de4:	58025480 	.word	0x58025480
 8003de8:	58025494 	.word	0x58025494
 8003dec:	fffe000f 	.word	0xfffe000f
 8003df0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b6e      	ldr	r3, [pc, #440]	; (8003ff0 <HAL_DMA_Init+0x650>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	4a6e      	ldr	r2, [pc, #440]	; (8003ff4 <HAL_DMA_Init+0x654>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f001 fc45 	bl	80056d8 <DMA_CalcBaseAndBitshift>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	e008      	b.n	8003e76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0b7      	b.n	8003fe6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5f      	ldr	r2, [pc, #380]	; (8003ff8 <HAL_DMA_Init+0x658>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d072      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5d      	ldr	r2, [pc, #372]	; (8003ffc <HAL_DMA_Init+0x65c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d06d      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5c      	ldr	r2, [pc, #368]	; (8004000 <HAL_DMA_Init+0x660>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d068      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5a      	ldr	r2, [pc, #360]	; (8004004 <HAL_DMA_Init+0x664>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d063      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a59      	ldr	r2, [pc, #356]	; (8004008 <HAL_DMA_Init+0x668>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d05e      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a57      	ldr	r2, [pc, #348]	; (800400c <HAL_DMA_Init+0x66c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d059      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a56      	ldr	r2, [pc, #344]	; (8004010 <HAL_DMA_Init+0x670>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d054      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a54      	ldr	r2, [pc, #336]	; (8004014 <HAL_DMA_Init+0x674>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d04f      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a53      	ldr	r2, [pc, #332]	; (8004018 <HAL_DMA_Init+0x678>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d04a      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a51      	ldr	r2, [pc, #324]	; (800401c <HAL_DMA_Init+0x67c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d045      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a50      	ldr	r2, [pc, #320]	; (8004020 <HAL_DMA_Init+0x680>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d040      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a4e      	ldr	r2, [pc, #312]	; (8004024 <HAL_DMA_Init+0x684>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d03b      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4d      	ldr	r2, [pc, #308]	; (8004028 <HAL_DMA_Init+0x688>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d036      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4b      	ldr	r2, [pc, #300]	; (800402c <HAL_DMA_Init+0x68c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d031      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <HAL_DMA_Init+0x690>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d02c      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a48      	ldr	r2, [pc, #288]	; (8004034 <HAL_DMA_Init+0x694>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d027      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a47      	ldr	r2, [pc, #284]	; (8004038 <HAL_DMA_Init+0x698>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a45      	ldr	r2, [pc, #276]	; (800403c <HAL_DMA_Init+0x69c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a44      	ldr	r2, [pc, #272]	; (8004040 <HAL_DMA_Init+0x6a0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a42      	ldr	r2, [pc, #264]	; (8004044 <HAL_DMA_Init+0x6a4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a41      	ldr	r2, [pc, #260]	; (8004048 <HAL_DMA_Init+0x6a8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3f      	ldr	r2, [pc, #252]	; (800404c <HAL_DMA_Init+0x6ac>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a3e      	ldr	r2, [pc, #248]	; (8004050 <HAL_DMA_Init+0x6b0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_DMA_Init+0x5c6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_DMA_Init+0x6b4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <HAL_DMA_Init+0x5ca>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_DMA_Init+0x5cc>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d032      	beq.n	8003fd6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f001 fcdf 	bl	8005934 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d102      	bne.n	8003f84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d010      	beq.n	8003fc4 <HAL_DMA_Init+0x624>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d80c      	bhi.n	8003fc4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f001 fd5c 	bl	8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e008      	b.n	8003fd6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	a7fdabf8 	.word	0xa7fdabf8
 8003ff4:	cccccccd 	.word	0xcccccccd
 8003ff8:	40020010 	.word	0x40020010
 8003ffc:	40020028 	.word	0x40020028
 8004000:	40020040 	.word	0x40020040
 8004004:	40020058 	.word	0x40020058
 8004008:	40020070 	.word	0x40020070
 800400c:	40020088 	.word	0x40020088
 8004010:	400200a0 	.word	0x400200a0
 8004014:	400200b8 	.word	0x400200b8
 8004018:	40020410 	.word	0x40020410
 800401c:	40020428 	.word	0x40020428
 8004020:	40020440 	.word	0x40020440
 8004024:	40020458 	.word	0x40020458
 8004028:	40020470 	.word	0x40020470
 800402c:	40020488 	.word	0x40020488
 8004030:	400204a0 	.word	0x400204a0
 8004034:	400204b8 	.word	0x400204b8
 8004038:	58025408 	.word	0x58025408
 800403c:	5802541c 	.word	0x5802541c
 8004040:	58025430 	.word	0x58025430
 8004044:	58025444 	.word	0x58025444
 8004048:	58025458 	.word	0x58025458
 800404c:	5802546c 	.word	0x5802546c
 8004050:	58025480 	.word	0x58025480
 8004054:	58025494 	.word	0x58025494

08004058 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e226      	b.n	80044c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_DMA_Start_IT+0x2a>
 800407e:	2302      	movs	r3, #2
 8004080:	e21f      	b.n	80044c2 <HAL_DMA_Start_IT+0x46a>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 820a 	bne.w	80044ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a68      	ldr	r2, [pc, #416]	; (800424c <HAL_DMA_Start_IT+0x1f4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04a      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a66      	ldr	r2, [pc, #408]	; (8004250 <HAL_DMA_Start_IT+0x1f8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d045      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_DMA_Start_IT+0x1fc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d040      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_DMA_Start_IT+0x200>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d03b      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a62      	ldr	r2, [pc, #392]	; (800425c <HAL_DMA_Start_IT+0x204>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d036      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a60      	ldr	r2, [pc, #384]	; (8004260 <HAL_DMA_Start_IT+0x208>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d031      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5f      	ldr	r2, [pc, #380]	; (8004264 <HAL_DMA_Start_IT+0x20c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d02c      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5d      	ldr	r2, [pc, #372]	; (8004268 <HAL_DMA_Start_IT+0x210>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5c      	ldr	r2, [pc, #368]	; (800426c <HAL_DMA_Start_IT+0x214>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5a      	ldr	r2, [pc, #360]	; (8004270 <HAL_DMA_Start_IT+0x218>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a59      	ldr	r2, [pc, #356]	; (8004274 <HAL_DMA_Start_IT+0x21c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a57      	ldr	r2, [pc, #348]	; (8004278 <HAL_DMA_Start_IT+0x220>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a56      	ldr	r2, [pc, #344]	; (800427c <HAL_DMA_Start_IT+0x224>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a54      	ldr	r2, [pc, #336]	; (8004280 <HAL_DMA_Start_IT+0x228>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a53      	ldr	r2, [pc, #332]	; (8004284 <HAL_DMA_Start_IT+0x22c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_Start_IT+0xee>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a51      	ldr	r2, [pc, #324]	; (8004288 <HAL_DMA_Start_IT+0x230>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <HAL_DMA_Start_IT+0x100>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e007      	b.n	8004168 <HAL_DMA_Start_IT+0x110>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f001 f906 	bl	8005380 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a34      	ldr	r2, [pc, #208]	; (800424c <HAL_DMA_Start_IT+0x1f4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04a      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a33      	ldr	r2, [pc, #204]	; (8004250 <HAL_DMA_Start_IT+0x1f8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d045      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a31      	ldr	r2, [pc, #196]	; (8004254 <HAL_DMA_Start_IT+0x1fc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d040      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a30      	ldr	r2, [pc, #192]	; (8004258 <HAL_DMA_Start_IT+0x200>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d03b      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2e      	ldr	r2, [pc, #184]	; (800425c <HAL_DMA_Start_IT+0x204>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d036      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2d      	ldr	r2, [pc, #180]	; (8004260 <HAL_DMA_Start_IT+0x208>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d031      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <HAL_DMA_Start_IT+0x20c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02c      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <HAL_DMA_Start_IT+0x210>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d027      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <HAL_DMA_Start_IT+0x214>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a27      	ldr	r2, [pc, #156]	; (8004270 <HAL_DMA_Start_IT+0x218>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01d      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <HAL_DMA_Start_IT+0x21c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a24      	ldr	r2, [pc, #144]	; (8004278 <HAL_DMA_Start_IT+0x220>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_DMA_Start_IT+0x224>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_DMA_Start_IT+0x228>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_DMA_Start_IT+0x22c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_DMA_Start_IT+0x1bc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_DMA_Start_IT+0x230>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Start_IT+0x1c0>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_DMA_Start_IT+0x1c2>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d036      	beq.n	800428c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 021e 	bic.w	r2, r3, #30
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0216 	orr.w	r2, r2, #22
 8004230:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d03e      	beq.n	80042b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0208 	orr.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e035      	b.n	80042b8 <HAL_DMA_Start_IT+0x260>
 800424c:	40020010 	.word	0x40020010
 8004250:	40020028 	.word	0x40020028
 8004254:	40020040 	.word	0x40020040
 8004258:	40020058 	.word	0x40020058
 800425c:	40020070 	.word	0x40020070
 8004260:	40020088 	.word	0x40020088
 8004264:	400200a0 	.word	0x400200a0
 8004268:	400200b8 	.word	0x400200b8
 800426c:	40020410 	.word	0x40020410
 8004270:	40020428 	.word	0x40020428
 8004274:	40020440 	.word	0x40020440
 8004278:	40020458 	.word	0x40020458
 800427c:	40020470 	.word	0x40020470
 8004280:	40020488 	.word	0x40020488
 8004284:	400204a0 	.word	0x400204a0
 8004288:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 020e 	bic.w	r2, r3, #14
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 020a 	orr.w	r2, r2, #10
 800429e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0204 	orr.w	r2, r2, #4
 80042b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a83      	ldr	r2, [pc, #524]	; (80044cc <HAL_DMA_Start_IT+0x474>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d072      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a82      	ldr	r2, [pc, #520]	; (80044d0 <HAL_DMA_Start_IT+0x478>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d06d      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a80      	ldr	r2, [pc, #512]	; (80044d4 <HAL_DMA_Start_IT+0x47c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d068      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7f      	ldr	r2, [pc, #508]	; (80044d8 <HAL_DMA_Start_IT+0x480>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d063      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <HAL_DMA_Start_IT+0x484>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d05e      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7c      	ldr	r2, [pc, #496]	; (80044e0 <HAL_DMA_Start_IT+0x488>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d059      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7a      	ldr	r2, [pc, #488]	; (80044e4 <HAL_DMA_Start_IT+0x48c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d054      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a79      	ldr	r2, [pc, #484]	; (80044e8 <HAL_DMA_Start_IT+0x490>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04f      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a77      	ldr	r2, [pc, #476]	; (80044ec <HAL_DMA_Start_IT+0x494>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d04a      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a76      	ldr	r2, [pc, #472]	; (80044f0 <HAL_DMA_Start_IT+0x498>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d045      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a74      	ldr	r2, [pc, #464]	; (80044f4 <HAL_DMA_Start_IT+0x49c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d040      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a73      	ldr	r2, [pc, #460]	; (80044f8 <HAL_DMA_Start_IT+0x4a0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d03b      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a71      	ldr	r2, [pc, #452]	; (80044fc <HAL_DMA_Start_IT+0x4a4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d036      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a70      	ldr	r2, [pc, #448]	; (8004500 <HAL_DMA_Start_IT+0x4a8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d031      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6e      	ldr	r2, [pc, #440]	; (8004504 <HAL_DMA_Start_IT+0x4ac>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02c      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6d      	ldr	r2, [pc, #436]	; (8004508 <HAL_DMA_Start_IT+0x4b0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d027      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6b      	ldr	r2, [pc, #428]	; (800450c <HAL_DMA_Start_IT+0x4b4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d022      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_DMA_Start_IT+0x4b8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d01d      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a68      	ldr	r2, [pc, #416]	; (8004514 <HAL_DMA_Start_IT+0x4bc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a67      	ldr	r2, [pc, #412]	; (8004518 <HAL_DMA_Start_IT+0x4c0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a65      	ldr	r2, [pc, #404]	; (800451c <HAL_DMA_Start_IT+0x4c4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a64      	ldr	r2, [pc, #400]	; (8004520 <HAL_DMA_Start_IT+0x4c8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a62      	ldr	r2, [pc, #392]	; (8004524 <HAL_DMA_Start_IT+0x4cc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_DMA_Start_IT+0x350>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a61      	ldr	r2, [pc, #388]	; (8004528 <HAL_DMA_Start_IT+0x4d0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_DMA_Start_IT+0x354>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_DMA_Start_IT+0x356>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01a      	beq.n	80043e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a37      	ldr	r2, [pc, #220]	; (80044cc <HAL_DMA_Start_IT+0x474>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d04a      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a36      	ldr	r2, [pc, #216]	; (80044d0 <HAL_DMA_Start_IT+0x478>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d045      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a34      	ldr	r2, [pc, #208]	; (80044d4 <HAL_DMA_Start_IT+0x47c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d040      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a33      	ldr	r2, [pc, #204]	; (80044d8 <HAL_DMA_Start_IT+0x480>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d03b      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a31      	ldr	r2, [pc, #196]	; (80044dc <HAL_DMA_Start_IT+0x484>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d036      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a30      	ldr	r2, [pc, #192]	; (80044e0 <HAL_DMA_Start_IT+0x488>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d031      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <HAL_DMA_Start_IT+0x48c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d02c      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <HAL_DMA_Start_IT+0x490>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d027      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_DMA_Start_IT+0x494>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <HAL_DMA_Start_IT+0x498>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01d      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <HAL_DMA_Start_IT+0x49c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <HAL_DMA_Start_IT+0x4a0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <HAL_DMA_Start_IT+0x4a4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a24      	ldr	r2, [pc, #144]	; (8004500 <HAL_DMA_Start_IT+0x4a8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_DMA_Start_IT+0x4ac>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_DMA_Start_IT+0x430>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	; (8004508 <HAL_DMA_Start_IT+0x4b0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <HAL_DMA_Start_IT+0x442>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e012      	b.n	80044c0 <HAL_DMA_Start_IT+0x468>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e009      	b.n	80044c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40020010 	.word	0x40020010
 80044d0:	40020028 	.word	0x40020028
 80044d4:	40020040 	.word	0x40020040
 80044d8:	40020058 	.word	0x40020058
 80044dc:	40020070 	.word	0x40020070
 80044e0:	40020088 	.word	0x40020088
 80044e4:	400200a0 	.word	0x400200a0
 80044e8:	400200b8 	.word	0x400200b8
 80044ec:	40020410 	.word	0x40020410
 80044f0:	40020428 	.word	0x40020428
 80044f4:	40020440 	.word	0x40020440
 80044f8:	40020458 	.word	0x40020458
 80044fc:	40020470 	.word	0x40020470
 8004500:	40020488 	.word	0x40020488
 8004504:	400204a0 	.word	0x400204a0
 8004508:	400204b8 	.word	0x400204b8
 800450c:	58025408 	.word	0x58025408
 8004510:	5802541c 	.word	0x5802541c
 8004514:	58025430 	.word	0x58025430
 8004518:	58025444 	.word	0x58025444
 800451c:	58025458 	.word	0x58025458
 8004520:	5802546c 	.word	0x5802546c
 8004524:	58025480 	.word	0x58025480
 8004528:	58025494 	.word	0x58025494

0800452c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004538:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <HAL_DMA_IRQHandler+0x1ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a67      	ldr	r2, [pc, #412]	; (80046dc <HAL_DMA_IRQHandler+0x1b0>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	0a9b      	lsrs	r3, r3, #10
 8004544:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5f      	ldr	r2, [pc, #380]	; (80046e0 <HAL_DMA_IRQHandler+0x1b4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d04a      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5d      	ldr	r2, [pc, #372]	; (80046e4 <HAL_DMA_IRQHandler+0x1b8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d045      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5c      	ldr	r2, [pc, #368]	; (80046e8 <HAL_DMA_IRQHandler+0x1bc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d040      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5a      	ldr	r2, [pc, #360]	; (80046ec <HAL_DMA_IRQHandler+0x1c0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d03b      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a59      	ldr	r2, [pc, #356]	; (80046f0 <HAL_DMA_IRQHandler+0x1c4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d036      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a57      	ldr	r2, [pc, #348]	; (80046f4 <HAL_DMA_IRQHandler+0x1c8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d031      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a56      	ldr	r2, [pc, #344]	; (80046f8 <HAL_DMA_IRQHandler+0x1cc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d02c      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a54      	ldr	r2, [pc, #336]	; (80046fc <HAL_DMA_IRQHandler+0x1d0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d027      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a53      	ldr	r2, [pc, #332]	; (8004700 <HAL_DMA_IRQHandler+0x1d4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a51      	ldr	r2, [pc, #324]	; (8004704 <HAL_DMA_IRQHandler+0x1d8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01d      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a50      	ldr	r2, [pc, #320]	; (8004708 <HAL_DMA_IRQHandler+0x1dc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a4e      	ldr	r2, [pc, #312]	; (800470c <HAL_DMA_IRQHandler+0x1e0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a4d      	ldr	r2, [pc, #308]	; (8004710 <HAL_DMA_IRQHandler+0x1e4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a4b      	ldr	r2, [pc, #300]	; (8004714 <HAL_DMA_IRQHandler+0x1e8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4a      	ldr	r2, [pc, #296]	; (8004718 <HAL_DMA_IRQHandler+0x1ec>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_DMA_IRQHandler+0xd2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a48      	ldr	r2, [pc, #288]	; (800471c <HAL_DMA_IRQHandler+0x1f0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_DMA_IRQHandler+0xd6>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_DMA_IRQHandler+0xd8>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 842b 	beq.w	8004e60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2208      	movs	r2, #8
 8004614:	409a      	lsls	r2, r3
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80a2 	beq.w	8004764 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2e      	ldr	r2, [pc, #184]	; (80046e0 <HAL_DMA_IRQHandler+0x1b4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d04a      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <HAL_DMA_IRQHandler+0x1b8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d045      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <HAL_DMA_IRQHandler+0x1bc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d040      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <HAL_DMA_IRQHandler+0x1c0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d03b      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <HAL_DMA_IRQHandler+0x1c4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d036      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a27      	ldr	r2, [pc, #156]	; (80046f4 <HAL_DMA_IRQHandler+0x1c8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d031      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <HAL_DMA_IRQHandler+0x1cc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02c      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a24      	ldr	r2, [pc, #144]	; (80046fc <HAL_DMA_IRQHandler+0x1d0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d027      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <HAL_DMA_IRQHandler+0x1d4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a21      	ldr	r2, [pc, #132]	; (8004704 <HAL_DMA_IRQHandler+0x1d8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d01d      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1f      	ldr	r2, [pc, #124]	; (8004708 <HAL_DMA_IRQHandler+0x1dc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_DMA_IRQHandler+0x1e0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <HAL_DMA_IRQHandler+0x1e4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <HAL_DMA_IRQHandler+0x1e8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_DMA_IRQHandler+0x1ec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x194>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_DMA_IRQHandler+0x1f0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d12f      	bne.n	8004720 <HAL_DMA_IRQHandler+0x1f4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e02e      	b.n	8004734 <HAL_DMA_IRQHandler+0x208>
 80046d6:	bf00      	nop
 80046d8:	24000000 	.word	0x24000000
 80046dc:	1b4e81b5 	.word	0x1b4e81b5
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0204 	bic.w	r2, r2, #4
 8004746:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2208      	movs	r2, #8
 8004752:	409a      	lsls	r2, r3
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0201 	orr.w	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	fa22 f303 	lsr.w	r3, r2, r3
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d06e      	beq.n	8004858 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a69      	ldr	r2, [pc, #420]	; (8004924 <HAL_DMA_IRQHandler+0x3f8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d04a      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a67      	ldr	r2, [pc, #412]	; (8004928 <HAL_DMA_IRQHandler+0x3fc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d045      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_DMA_IRQHandler+0x400>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d040      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a64      	ldr	r2, [pc, #400]	; (8004930 <HAL_DMA_IRQHandler+0x404>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a63      	ldr	r2, [pc, #396]	; (8004934 <HAL_DMA_IRQHandler+0x408>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d036      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a61      	ldr	r2, [pc, #388]	; (8004938 <HAL_DMA_IRQHandler+0x40c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d031      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a60      	ldr	r2, [pc, #384]	; (800493c <HAL_DMA_IRQHandler+0x410>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d02c      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5e      	ldr	r2, [pc, #376]	; (8004940 <HAL_DMA_IRQHandler+0x414>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d027      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5d      	ldr	r2, [pc, #372]	; (8004944 <HAL_DMA_IRQHandler+0x418>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5b      	ldr	r2, [pc, #364]	; (8004948 <HAL_DMA_IRQHandler+0x41c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5a      	ldr	r2, [pc, #360]	; (800494c <HAL_DMA_IRQHandler+0x420>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a58      	ldr	r2, [pc, #352]	; (8004950 <HAL_DMA_IRQHandler+0x424>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a57      	ldr	r2, [pc, #348]	; (8004954 <HAL_DMA_IRQHandler+0x428>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a55      	ldr	r2, [pc, #340]	; (8004958 <HAL_DMA_IRQHandler+0x42c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_DMA_IRQHandler+0x430>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_DMA_IRQHandler+0x2ee>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_DMA_IRQHandler+0x434>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10a      	bne.n	8004830 <HAL_DMA_IRQHandler+0x304>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e003      	b.n	8004838 <HAL_DMA_IRQHandler+0x30c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f043 0202 	orr.w	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2204      	movs	r2, #4
 8004862:	409a      	lsls	r2, r3
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 808f 	beq.w	800498c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <HAL_DMA_IRQHandler+0x3f8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d04a      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_DMA_IRQHandler+0x3fc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d045      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a29      	ldr	r2, [pc, #164]	; (800492c <HAL_DMA_IRQHandler+0x400>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d040      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a27      	ldr	r2, [pc, #156]	; (8004930 <HAL_DMA_IRQHandler+0x404>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d03b      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_DMA_IRQHandler+0x408>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d036      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_DMA_IRQHandler+0x40c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a23      	ldr	r2, [pc, #140]	; (800493c <HAL_DMA_IRQHandler+0x410>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d02c      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a21      	ldr	r2, [pc, #132]	; (8004940 <HAL_DMA_IRQHandler+0x414>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d027      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a20      	ldr	r2, [pc, #128]	; (8004944 <HAL_DMA_IRQHandler+0x418>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_DMA_IRQHandler+0x41c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01d      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	; (800494c <HAL_DMA_IRQHandler+0x420>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <HAL_DMA_IRQHandler+0x424>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <HAL_DMA_IRQHandler+0x428>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_DMA_IRQHandler+0x42c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a17      	ldr	r2, [pc, #92]	; (800495c <HAL_DMA_IRQHandler+0x430>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_DMA_IRQHandler+0x3e2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <HAL_DMA_IRQHandler+0x434>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d12a      	bne.n	8004964 <HAL_DMA_IRQHandler+0x438>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e023      	b.n	800496c <HAL_DMA_IRQHandler+0x440>
 8004924:	40020010 	.word	0x40020010
 8004928:	40020028 	.word	0x40020028
 800492c:	40020040 	.word	0x40020040
 8004930:	40020058 	.word	0x40020058
 8004934:	40020070 	.word	0x40020070
 8004938:	40020088 	.word	0x40020088
 800493c:	400200a0 	.word	0x400200a0
 8004940:	400200b8 	.word	0x400200b8
 8004944:	40020410 	.word	0x40020410
 8004948:	40020428 	.word	0x40020428
 800494c:	40020440 	.word	0x40020440
 8004950:	40020458 	.word	0x40020458
 8004954:	40020470 	.word	0x40020470
 8004958:	40020488 	.word	0x40020488
 800495c:	400204a0 	.word	0x400204a0
 8004960:	400204b8 	.word	0x400204b8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2204      	movs	r2, #4
 800497a:	409a      	lsls	r2, r3
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	f043 0204 	orr.w	r2, r3, #4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	2210      	movs	r2, #16
 8004996:	409a      	lsls	r2, r3
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a6 	beq.w	8004aee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a85      	ldr	r2, [pc, #532]	; (8004bbc <HAL_DMA_IRQHandler+0x690>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a83      	ldr	r2, [pc, #524]	; (8004bc0 <HAL_DMA_IRQHandler+0x694>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a82      	ldr	r2, [pc, #520]	; (8004bc4 <HAL_DMA_IRQHandler+0x698>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a80      	ldr	r2, [pc, #512]	; (8004bc8 <HAL_DMA_IRQHandler+0x69c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7f      	ldr	r2, [pc, #508]	; (8004bcc <HAL_DMA_IRQHandler+0x6a0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7d      	ldr	r2, [pc, #500]	; (8004bd0 <HAL_DMA_IRQHandler+0x6a4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7c      	ldr	r2, [pc, #496]	; (8004bd4 <HAL_DMA_IRQHandler+0x6a8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a7a      	ldr	r2, [pc, #488]	; (8004bd8 <HAL_DMA_IRQHandler+0x6ac>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a79      	ldr	r2, [pc, #484]	; (8004bdc <HAL_DMA_IRQHandler+0x6b0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a77      	ldr	r2, [pc, #476]	; (8004be0 <HAL_DMA_IRQHandler+0x6b4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a76      	ldr	r2, [pc, #472]	; (8004be4 <HAL_DMA_IRQHandler+0x6b8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a74      	ldr	r2, [pc, #464]	; (8004be8 <HAL_DMA_IRQHandler+0x6bc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a73      	ldr	r2, [pc, #460]	; (8004bec <HAL_DMA_IRQHandler+0x6c0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a71      	ldr	r2, [pc, #452]	; (8004bf0 <HAL_DMA_IRQHandler+0x6c4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a70      	ldr	r2, [pc, #448]	; (8004bf4 <HAL_DMA_IRQHandler+0x6c8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x516>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6e      	ldr	r2, [pc, #440]	; (8004bf8 <HAL_DMA_IRQHandler+0x6cc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10a      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x52c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e009      	b.n	8004a6c <HAL_DMA_IRQHandler+0x540>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d03e      	beq.n	8004aee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	2210      	movs	r2, #16
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d024      	beq.n	8004aee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
 8004aac:	e01f      	b.n	8004aee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01b      	beq.n	8004aee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
 8004abe:	e016      	b.n	8004aee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0208 	bic.w	r2, r2, #8
 8004adc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2220      	movs	r2, #32
 8004af8:	409a      	lsls	r2, r3
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8110 	beq.w	8004d24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2c      	ldr	r2, [pc, #176]	; (8004bbc <HAL_DMA_IRQHandler+0x690>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d04a      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <HAL_DMA_IRQHandler+0x694>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d045      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <HAL_DMA_IRQHandler+0x698>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d040      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <HAL_DMA_IRQHandler+0x69c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d03b      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a26      	ldr	r2, [pc, #152]	; (8004bcc <HAL_DMA_IRQHandler+0x6a0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d036      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <HAL_DMA_IRQHandler+0x6a4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d031      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <HAL_DMA_IRQHandler+0x6a8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d02c      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <HAL_DMA_IRQHandler+0x6ac>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d027      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a20      	ldr	r2, [pc, #128]	; (8004bdc <HAL_DMA_IRQHandler+0x6b0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d022      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_DMA_IRQHandler+0x6b4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01d      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <HAL_DMA_IRQHandler+0x6b8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_DMA_IRQHandler+0x6bc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <HAL_DMA_IRQHandler+0x6c0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_DMA_IRQHandler+0x6c4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <HAL_DMA_IRQHandler+0x6c8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x678>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <HAL_DMA_IRQHandler+0x6cc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d12b      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x6d0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e02a      	b.n	8004c10 <HAL_DMA_IRQHandler+0x6e4>
 8004bba:	bf00      	nop
 8004bbc:	40020010 	.word	0x40020010
 8004bc0:	40020028 	.word	0x40020028
 8004bc4:	40020040 	.word	0x40020040
 8004bc8:	40020058 	.word	0x40020058
 8004bcc:	40020070 	.word	0x40020070
 8004bd0:	40020088 	.word	0x40020088
 8004bd4:	400200a0 	.word	0x400200a0
 8004bd8:	400200b8 	.word	0x400200b8
 8004bdc:	40020410 	.word	0x40020410
 8004be0:	40020428 	.word	0x40020428
 8004be4:	40020440 	.word	0x40020440
 8004be8:	40020458 	.word	0x40020458
 8004bec:	40020470 	.word	0x40020470
 8004bf0:	40020488 	.word	0x40020488
 8004bf4:	400204a0 	.word	0x400204a0
 8004bf8:	400204b8 	.word	0x400204b8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8087 	beq.w	8004d24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2220      	movs	r2, #32
 8004c20:	409a      	lsls	r2, r3
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d139      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0216 	bic.w	r2, r2, #22
 8004c40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <HAL_DMA_IRQHandler+0x736>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0208 	bic.w	r2, r2, #8
 8004c70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	223f      	movs	r2, #63	; 0x3f
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 834a 	beq.w	8005330 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
          }
          return;
 8004ca4:	e344      	b.n	8005330 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d018      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02c      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
 8004cd2:	e027      	b.n	8004d24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d023      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
 8004ce4:	e01e      	b.n	8004d24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0210 	bic.w	r2, r2, #16
 8004d02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8306 	beq.w	800533a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8088 	beq.w	8004e4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a7a      	ldr	r2, [pc, #488]	; (8004f34 <HAL_DMA_IRQHandler+0xa08>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d04a      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a79      	ldr	r2, [pc, #484]	; (8004f38 <HAL_DMA_IRQHandler+0xa0c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d045      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a77      	ldr	r2, [pc, #476]	; (8004f3c <HAL_DMA_IRQHandler+0xa10>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d040      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a76      	ldr	r2, [pc, #472]	; (8004f40 <HAL_DMA_IRQHandler+0xa14>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d03b      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a74      	ldr	r2, [pc, #464]	; (8004f44 <HAL_DMA_IRQHandler+0xa18>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d036      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a73      	ldr	r2, [pc, #460]	; (8004f48 <HAL_DMA_IRQHandler+0xa1c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d031      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a71      	ldr	r2, [pc, #452]	; (8004f4c <HAL_DMA_IRQHandler+0xa20>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02c      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a70      	ldr	r2, [pc, #448]	; (8004f50 <HAL_DMA_IRQHandler+0xa24>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d027      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6e      	ldr	r2, [pc, #440]	; (8004f54 <HAL_DMA_IRQHandler+0xa28>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6d      	ldr	r2, [pc, #436]	; (8004f58 <HAL_DMA_IRQHandler+0xa2c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6b      	ldr	r2, [pc, #428]	; (8004f5c <HAL_DMA_IRQHandler+0xa30>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a6a      	ldr	r2, [pc, #424]	; (8004f60 <HAL_DMA_IRQHandler+0xa34>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a68      	ldr	r2, [pc, #416]	; (8004f64 <HAL_DMA_IRQHandler+0xa38>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a67      	ldr	r2, [pc, #412]	; (8004f68 <HAL_DMA_IRQHandler+0xa3c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a65      	ldr	r2, [pc, #404]	; (8004f6c <HAL_DMA_IRQHandler+0xa40>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x8b8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a64      	ldr	r2, [pc, #400]	; (8004f70 <HAL_DMA_IRQHandler+0xa44>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <HAL_DMA_IRQHandler+0x8ca>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e007      	b.n	8004e06 <HAL_DMA_IRQHandler+0x8da>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d307      	bcc.n	8004e22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f2      	bne.n	8004e06 <HAL_DMA_IRQHandler+0x8da>
 8004e20:	e000      	b.n	8004e24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2203      	movs	r2, #3
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e3a:	e003      	b.n	8004e44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8272 	beq.w	800533a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	4798      	blx	r3
 8004e5e:	e26c      	b.n	800533a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a43      	ldr	r2, [pc, #268]	; (8004f74 <HAL_DMA_IRQHandler+0xa48>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a42      	ldr	r2, [pc, #264]	; (8004f78 <HAL_DMA_IRQHandler+0xa4c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d01d      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a40      	ldr	r2, [pc, #256]	; (8004f7c <HAL_DMA_IRQHandler+0xa50>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <HAL_DMA_IRQHandler+0xa54>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a3d      	ldr	r2, [pc, #244]	; (8004f84 <HAL_DMA_IRQHandler+0xa58>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a3c      	ldr	r2, [pc, #240]	; (8004f88 <HAL_DMA_IRQHandler+0xa5c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3a      	ldr	r2, [pc, #232]	; (8004f8c <HAL_DMA_IRQHandler+0xa60>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x984>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a39      	ldr	r2, [pc, #228]	; (8004f90 <HAL_DMA_IRQHandler+0xa64>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x988>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x98a>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 823f 	beq.w	800533a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2204      	movs	r2, #4
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80cd 	beq.w	8005074 <HAL_DMA_IRQHandler+0xb48>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80c7 	beq.w	8005074 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2204      	movs	r2, #4
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d049      	beq.n	8004f94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8210 	beq.w	8005334 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f1c:	e20a      	b.n	8005334 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8206 	beq.w	8005334 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f30:	e200      	b.n	8005334 <HAL_DMA_IRQHandler+0xe08>
 8004f32:	bf00      	nop
 8004f34:	40020010 	.word	0x40020010
 8004f38:	40020028 	.word	0x40020028
 8004f3c:	40020040 	.word	0x40020040
 8004f40:	40020058 	.word	0x40020058
 8004f44:	40020070 	.word	0x40020070
 8004f48:	40020088 	.word	0x40020088
 8004f4c:	400200a0 	.word	0x400200a0
 8004f50:	400200b8 	.word	0x400200b8
 8004f54:	40020410 	.word	0x40020410
 8004f58:	40020428 	.word	0x40020428
 8004f5c:	40020440 	.word	0x40020440
 8004f60:	40020458 	.word	0x40020458
 8004f64:	40020470 	.word	0x40020470
 8004f68:	40020488 	.word	0x40020488
 8004f6c:	400204a0 	.word	0x400204a0
 8004f70:	400204b8 	.word	0x400204b8
 8004f74:	58025408 	.word	0x58025408
 8004f78:	5802541c 	.word	0x5802541c
 8004f7c:	58025430 	.word	0x58025430
 8004f80:	58025444 	.word	0x58025444
 8004f84:	58025458 	.word	0x58025458
 8004f88:	5802546c 	.word	0x5802546c
 8004f8c:	58025480 	.word	0x58025480
 8004f90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d160      	bne.n	8005060 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a7f      	ldr	r2, [pc, #508]	; (80051a0 <HAL_DMA_IRQHandler+0xc74>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d04a      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7d      	ldr	r2, [pc, #500]	; (80051a4 <HAL_DMA_IRQHandler+0xc78>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d045      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a7c      	ldr	r2, [pc, #496]	; (80051a8 <HAL_DMA_IRQHandler+0xc7c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d040      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a7a      	ldr	r2, [pc, #488]	; (80051ac <HAL_DMA_IRQHandler+0xc80>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d03b      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a79      	ldr	r2, [pc, #484]	; (80051b0 <HAL_DMA_IRQHandler+0xc84>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d036      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a77      	ldr	r2, [pc, #476]	; (80051b4 <HAL_DMA_IRQHandler+0xc88>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d031      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a76      	ldr	r2, [pc, #472]	; (80051b8 <HAL_DMA_IRQHandler+0xc8c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d02c      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a74      	ldr	r2, [pc, #464]	; (80051bc <HAL_DMA_IRQHandler+0xc90>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d027      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a73      	ldr	r2, [pc, #460]	; (80051c0 <HAL_DMA_IRQHandler+0xc94>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a71      	ldr	r2, [pc, #452]	; (80051c4 <HAL_DMA_IRQHandler+0xc98>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a70      	ldr	r2, [pc, #448]	; (80051c8 <HAL_DMA_IRQHandler+0xc9c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a6e      	ldr	r2, [pc, #440]	; (80051cc <HAL_DMA_IRQHandler+0xca0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6d      	ldr	r2, [pc, #436]	; (80051d0 <HAL_DMA_IRQHandler+0xca4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6b      	ldr	r2, [pc, #428]	; (80051d4 <HAL_DMA_IRQHandler+0xca8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6a      	ldr	r2, [pc, #424]	; (80051d8 <HAL_DMA_IRQHandler+0xcac>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_DMA_IRQHandler+0xb12>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a68      	ldr	r2, [pc, #416]	; (80051dc <HAL_DMA_IRQHandler+0xcb0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <HAL_DMA_IRQHandler+0xb24>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0208 	bic.w	r2, r2, #8
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e007      	b.n	8005060 <HAL_DMA_IRQHandler+0xb34>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0204 	bic.w	r2, r2, #4
 800505e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8165 	beq.w	8005334 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005072:	e15f      	b.n	8005334 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2202      	movs	r2, #2
 800507e:	409a      	lsls	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80c5 	beq.w	8005214 <HAL_DMA_IRQHandler+0xce8>
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80bf 	beq.w	8005214 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2202      	movs	r2, #2
 80050a0:	409a      	lsls	r2, r3
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d018      	beq.n	80050e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 813a 	beq.w	8005338 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050cc:	e134      	b.n	8005338 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8130 	beq.w	8005338 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e0:	e12a      	b.n	8005338 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 8089 	bne.w	8005200 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <HAL_DMA_IRQHandler+0xc74>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d04a      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <HAL_DMA_IRQHandler+0xc78>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d045      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <HAL_DMA_IRQHandler+0xc7c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d040      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a26      	ldr	r2, [pc, #152]	; (80051ac <HAL_DMA_IRQHandler+0xc80>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d03b      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <HAL_DMA_IRQHandler+0xc84>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d036      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <HAL_DMA_IRQHandler+0xc88>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d031      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <HAL_DMA_IRQHandler+0xc8c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d02c      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <HAL_DMA_IRQHandler+0xc90>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d027      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_DMA_IRQHandler+0xc94>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <HAL_DMA_IRQHandler+0xc98>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <HAL_DMA_IRQHandler+0xc9c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <HAL_DMA_IRQHandler+0xca0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_DMA_IRQHandler+0xca4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <HAL_DMA_IRQHandler+0xca8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_DMA_IRQHandler+0xcac>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_DMA_IRQHandler+0xc62>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <HAL_DMA_IRQHandler+0xcb0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d128      	bne.n	80051e0 <HAL_DMA_IRQHandler+0xcb4>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0214 	bic.w	r2, r2, #20
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e027      	b.n	80051f0 <HAL_DMA_IRQHandler+0xcc4>
 80051a0:	40020010 	.word	0x40020010
 80051a4:	40020028 	.word	0x40020028
 80051a8:	40020040 	.word	0x40020040
 80051ac:	40020058 	.word	0x40020058
 80051b0:	40020070 	.word	0x40020070
 80051b4:	40020088 	.word	0x40020088
 80051b8:	400200a0 	.word	0x400200a0
 80051bc:	400200b8 	.word	0x400200b8
 80051c0:	40020410 	.word	0x40020410
 80051c4:	40020428 	.word	0x40020428
 80051c8:	40020440 	.word	0x40020440
 80051cc:	40020458 	.word	0x40020458
 80051d0:	40020470 	.word	0x40020470
 80051d4:	40020488 	.word	0x40020488
 80051d8:	400204a0 	.word	0x400204a0
 80051dc:	400204b8 	.word	0x400204b8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 020a 	bic.w	r2, r2, #10
 80051ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8097 	beq.w	8005338 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005212:	e091      	b.n	8005338 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2208      	movs	r2, #8
 800521e:	409a      	lsls	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8088 	beq.w	800533a <HAL_DMA_IRQHandler+0xe0e>
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8082 	beq.w	800533a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a41      	ldr	r2, [pc, #260]	; (8005340 <HAL_DMA_IRQHandler+0xe14>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d04a      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3f      	ldr	r2, [pc, #252]	; (8005344 <HAL_DMA_IRQHandler+0xe18>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d045      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3e      	ldr	r2, [pc, #248]	; (8005348 <HAL_DMA_IRQHandler+0xe1c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d040      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a3c      	ldr	r2, [pc, #240]	; (800534c <HAL_DMA_IRQHandler+0xe20>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d03b      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a3b      	ldr	r2, [pc, #236]	; (8005350 <HAL_DMA_IRQHandler+0xe24>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d036      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a39      	ldr	r2, [pc, #228]	; (8005354 <HAL_DMA_IRQHandler+0xe28>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a38      	ldr	r2, [pc, #224]	; (8005358 <HAL_DMA_IRQHandler+0xe2c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d02c      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a36      	ldr	r2, [pc, #216]	; (800535c <HAL_DMA_IRQHandler+0xe30>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d027      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a35      	ldr	r2, [pc, #212]	; (8005360 <HAL_DMA_IRQHandler+0xe34>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a33      	ldr	r2, [pc, #204]	; (8005364 <HAL_DMA_IRQHandler+0xe38>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01d      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a32      	ldr	r2, [pc, #200]	; (8005368 <HAL_DMA_IRQHandler+0xe3c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a30      	ldr	r2, [pc, #192]	; (800536c <HAL_DMA_IRQHandler+0xe40>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2f      	ldr	r2, [pc, #188]	; (8005370 <HAL_DMA_IRQHandler+0xe44>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2d      	ldr	r2, [pc, #180]	; (8005374 <HAL_DMA_IRQHandler+0xe48>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <HAL_DMA_IRQHandler+0xe4c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xdaa>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_DMA_IRQHandler+0xe50>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d108      	bne.n	80052e8 <HAL_DMA_IRQHandler+0xdbc>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 021c 	bic.w	r2, r2, #28
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e007      	b.n	80052f8 <HAL_DMA_IRQHandler+0xdcc>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 020e 	bic.w	r2, r2, #14
 80052f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	2201      	movs	r2, #1
 8005302:	409a      	lsls	r2, r3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
 800532e:	e004      	b.n	800533a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005330:	bf00      	nop
 8005332:	e002      	b.n	800533a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005334:	bf00      	nop
 8005336:	e000      	b.n	800533a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005338:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800533a:	3728      	adds	r7, #40	; 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8

08005380 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005398:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7f      	ldr	r2, [pc, #508]	; (800559c <DMA_SetConfig+0x21c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d072      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7d      	ldr	r2, [pc, #500]	; (80055a0 <DMA_SetConfig+0x220>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d06d      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7c      	ldr	r2, [pc, #496]	; (80055a4 <DMA_SetConfig+0x224>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d068      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a7a      	ldr	r2, [pc, #488]	; (80055a8 <DMA_SetConfig+0x228>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d063      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a79      	ldr	r2, [pc, #484]	; (80055ac <DMA_SetConfig+0x22c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d05e      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a77      	ldr	r2, [pc, #476]	; (80055b0 <DMA_SetConfig+0x230>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d059      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a76      	ldr	r2, [pc, #472]	; (80055b4 <DMA_SetConfig+0x234>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d054      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a74      	ldr	r2, [pc, #464]	; (80055b8 <DMA_SetConfig+0x238>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d04f      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a73      	ldr	r2, [pc, #460]	; (80055bc <DMA_SetConfig+0x23c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d04a      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a71      	ldr	r2, [pc, #452]	; (80055c0 <DMA_SetConfig+0x240>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d045      	beq.n	800548a <DMA_SetConfig+0x10a>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a70      	ldr	r2, [pc, #448]	; (80055c4 <DMA_SetConfig+0x244>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d040      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <DMA_SetConfig+0x248>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d03b      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6d      	ldr	r2, [pc, #436]	; (80055cc <DMA_SetConfig+0x24c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d036      	beq.n	800548a <DMA_SetConfig+0x10a>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a6b      	ldr	r2, [pc, #428]	; (80055d0 <DMA_SetConfig+0x250>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d031      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <DMA_SetConfig+0x254>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d02c      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a68      	ldr	r2, [pc, #416]	; (80055d8 <DMA_SetConfig+0x258>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d027      	beq.n	800548a <DMA_SetConfig+0x10a>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a67      	ldr	r2, [pc, #412]	; (80055dc <DMA_SetConfig+0x25c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a65      	ldr	r2, [pc, #404]	; (80055e0 <DMA_SetConfig+0x260>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <DMA_SetConfig+0x10a>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a64      	ldr	r2, [pc, #400]	; (80055e4 <DMA_SetConfig+0x264>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a62      	ldr	r2, [pc, #392]	; (80055e8 <DMA_SetConfig+0x268>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a61      	ldr	r2, [pc, #388]	; (80055ec <DMA_SetConfig+0x26c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <DMA_SetConfig+0x10a>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5f      	ldr	r2, [pc, #380]	; (80055f0 <DMA_SetConfig+0x270>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5e      	ldr	r2, [pc, #376]	; (80055f4 <DMA_SetConfig+0x274>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <DMA_SetConfig+0x10a>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a5c      	ldr	r2, [pc, #368]	; (80055f8 <DMA_SetConfig+0x278>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <DMA_SetConfig+0x10e>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <DMA_SetConfig+0x110>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800549c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a39      	ldr	r2, [pc, #228]	; (800559c <DMA_SetConfig+0x21c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d04a      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a38      	ldr	r2, [pc, #224]	; (80055a0 <DMA_SetConfig+0x220>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d045      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a36      	ldr	r2, [pc, #216]	; (80055a4 <DMA_SetConfig+0x224>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d040      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <DMA_SetConfig+0x228>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d03b      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a33      	ldr	r2, [pc, #204]	; (80055ac <DMA_SetConfig+0x22c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d036      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a32      	ldr	r2, [pc, #200]	; (80055b0 <DMA_SetConfig+0x230>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d031      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a30      	ldr	r2, [pc, #192]	; (80055b4 <DMA_SetConfig+0x234>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02c      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2f      	ldr	r2, [pc, #188]	; (80055b8 <DMA_SetConfig+0x238>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d027      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <DMA_SetConfig+0x23c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <DMA_SetConfig+0x240>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <DMA_SetConfig+0x244>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <DMA_SetConfig+0x248>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <DMA_SetConfig+0x24c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <DMA_SetConfig+0x250>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <DMA_SetConfig+0x254>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <DMA_SetConfig+0x1d0>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a23      	ldr	r2, [pc, #140]	; (80055d8 <DMA_SetConfig+0x258>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <DMA_SetConfig+0x1d4>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <DMA_SetConfig+0x1d6>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d059      	beq.n	800560e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	223f      	movs	r2, #63	; 0x3f
 8005564:	409a      	lsls	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005578:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d138      	bne.n	80055fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800559a:	e086      	b.n	80056aa <DMA_SetConfig+0x32a>
 800559c:	40020010 	.word	0x40020010
 80055a0:	40020028 	.word	0x40020028
 80055a4:	40020040 	.word	0x40020040
 80055a8:	40020058 	.word	0x40020058
 80055ac:	40020070 	.word	0x40020070
 80055b0:	40020088 	.word	0x40020088
 80055b4:	400200a0 	.word	0x400200a0
 80055b8:	400200b8 	.word	0x400200b8
 80055bc:	40020410 	.word	0x40020410
 80055c0:	40020428 	.word	0x40020428
 80055c4:	40020440 	.word	0x40020440
 80055c8:	40020458 	.word	0x40020458
 80055cc:	40020470 	.word	0x40020470
 80055d0:	40020488 	.word	0x40020488
 80055d4:	400204a0 	.word	0x400204a0
 80055d8:	400204b8 	.word	0x400204b8
 80055dc:	58025408 	.word	0x58025408
 80055e0:	5802541c 	.word	0x5802541c
 80055e4:	58025430 	.word	0x58025430
 80055e8:	58025444 	.word	0x58025444
 80055ec:	58025458 	.word	0x58025458
 80055f0:	5802546c 	.word	0x5802546c
 80055f4:	58025480 	.word	0x58025480
 80055f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	60da      	str	r2, [r3, #12]
}
 800560c:	e04d      	b.n	80056aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a29      	ldr	r2, [pc, #164]	; (80056b8 <DMA_SetConfig+0x338>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d022      	beq.n	800565e <DMA_SetConfig+0x2de>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <DMA_SetConfig+0x33c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01d      	beq.n	800565e <DMA_SetConfig+0x2de>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <DMA_SetConfig+0x340>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d018      	beq.n	800565e <DMA_SetConfig+0x2de>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <DMA_SetConfig+0x344>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <DMA_SetConfig+0x2de>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a23      	ldr	r2, [pc, #140]	; (80056c8 <DMA_SetConfig+0x348>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <DMA_SetConfig+0x2de>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a21      	ldr	r2, [pc, #132]	; (80056cc <DMA_SetConfig+0x34c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <DMA_SetConfig+0x2de>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <DMA_SetConfig+0x350>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <DMA_SetConfig+0x2de>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <DMA_SetConfig+0x354>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <DMA_SetConfig+0x2e2>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <DMA_SetConfig+0x2e4>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d108      	bne.n	800569a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	60da      	str	r2, [r3, #12]
}
 8005698:	e007      	b.n	80056aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	58025408 	.word	0x58025408
 80056bc:	5802541c 	.word	0x5802541c
 80056c0:	58025430 	.word	0x58025430
 80056c4:	58025444 	.word	0x58025444
 80056c8:	58025458 	.word	0x58025458
 80056cc:	5802546c 	.word	0x5802546c
 80056d0:	58025480 	.word	0x58025480
 80056d4:	58025494 	.word	0x58025494

080056d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a42      	ldr	r2, [pc, #264]	; (80057f0 <DMA_CalcBaseAndBitshift+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d04a      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a41      	ldr	r2, [pc, #260]	; (80057f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d045      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <DMA_CalcBaseAndBitshift+0x120>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d040      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <DMA_CalcBaseAndBitshift+0x124>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d03b      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3c      	ldr	r2, [pc, #240]	; (8005800 <DMA_CalcBaseAndBitshift+0x128>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d036      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a3b      	ldr	r2, [pc, #236]	; (8005804 <DMA_CalcBaseAndBitshift+0x12c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d031      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a39      	ldr	r2, [pc, #228]	; (8005808 <DMA_CalcBaseAndBitshift+0x130>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d02c      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <DMA_CalcBaseAndBitshift+0x134>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d027      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a36      	ldr	r2, [pc, #216]	; (8005810 <DMA_CalcBaseAndBitshift+0x138>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a35      	ldr	r2, [pc, #212]	; (8005814 <DMA_CalcBaseAndBitshift+0x13c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01d      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a33      	ldr	r2, [pc, #204]	; (8005818 <DMA_CalcBaseAndBitshift+0x140>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a32      	ldr	r2, [pc, #200]	; (800581c <DMA_CalcBaseAndBitshift+0x144>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a30      	ldr	r2, [pc, #192]	; (8005820 <DMA_CalcBaseAndBitshift+0x148>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <DMA_CalcBaseAndBitshift+0x14c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2d      	ldr	r2, [pc, #180]	; (8005828 <DMA_CalcBaseAndBitshift+0x150>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <DMA_CalcBaseAndBitshift+0xa8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <DMA_CalcBaseAndBitshift+0x154>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <DMA_CalcBaseAndBitshift+0xac>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <DMA_CalcBaseAndBitshift+0xae>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d024      	beq.n	80057d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	3b10      	subs	r3, #16
 8005792:	4a27      	ldr	r2, [pc, #156]	; (8005830 <DMA_CalcBaseAndBitshift+0x158>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	4a24      	ldr	r2, [pc, #144]	; (8005834 <DMA_CalcBaseAndBitshift+0x15c>)
 80057a4:	5cd3      	ldrb	r3, [r2, r3]
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d908      	bls.n	80057c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <DMA_CalcBaseAndBitshift+0x160>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	1d1a      	adds	r2, r3, #4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	659a      	str	r2, [r3, #88]	; 0x58
 80057c2:	e00d      	b.n	80057e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <DMA_CalcBaseAndBitshift+0x160>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6593      	str	r3, [r2, #88]	; 0x58
 80057d2:	e005      	b.n	80057e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40020010 	.word	0x40020010
 80057f4:	40020028 	.word	0x40020028
 80057f8:	40020040 	.word	0x40020040
 80057fc:	40020058 	.word	0x40020058
 8005800:	40020070 	.word	0x40020070
 8005804:	40020088 	.word	0x40020088
 8005808:	400200a0 	.word	0x400200a0
 800580c:	400200b8 	.word	0x400200b8
 8005810:	40020410 	.word	0x40020410
 8005814:	40020428 	.word	0x40020428
 8005818:	40020440 	.word	0x40020440
 800581c:	40020458 	.word	0x40020458
 8005820:	40020470 	.word	0x40020470
 8005824:	40020488 	.word	0x40020488
 8005828:	400204a0 	.word	0x400204a0
 800582c:	400204b8 	.word	0x400204b8
 8005830:	aaaaaaab 	.word	0xaaaaaaab
 8005834:	08012ef0 	.word	0x08012ef0
 8005838:	fffffc00 	.word	0xfffffc00

0800583c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d120      	bne.n	8005892 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	2b03      	cmp	r3, #3
 8005856:	d858      	bhi.n	800590a <DMA_CheckFifoParam+0xce>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <DMA_CheckFifoParam+0x24>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005871 	.word	0x08005871
 8005864:	08005883 	.word	0x08005883
 8005868:	08005871 	.word	0x08005871
 800586c:	0800590b 	.word	0x0800590b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d048      	beq.n	800590e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005880:	e045      	b.n	800590e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800588a:	d142      	bne.n	8005912 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005890:	e03f      	b.n	8005912 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d123      	bne.n	80058e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d838      	bhi.n	8005916 <DMA_CheckFifoParam+0xda>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <DMA_CheckFifoParam+0x70>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058bd 	.word	0x080058bd
 80058b0:	080058c3 	.word	0x080058c3
 80058b4:	080058bd 	.word	0x080058bd
 80058b8:	080058d5 	.word	0x080058d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
        break;
 80058c0:	e030      	b.n	8005924 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d025      	beq.n	800591a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058d2:	e022      	b.n	800591a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058dc:	d11f      	bne.n	800591e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e2:	e01c      	b.n	800591e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d902      	bls.n	80058f2 <DMA_CheckFifoParam+0xb6>
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d003      	beq.n	80058f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058f0:	e018      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
        break;
 80058f6:	e015      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
    break;
 8005908:	e00b      	b.n	8005922 <DMA_CheckFifoParam+0xe6>
        break;
 800590a:	bf00      	nop
 800590c:	e00a      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        break;
 800590e:	bf00      	nop
 8005910:	e008      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        break;
 8005912:	bf00      	nop
 8005914:	e006      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        break;
 8005916:	bf00      	nop
 8005918:	e004      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        break;
 800591a:	bf00      	nop
 800591c:	e002      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
        break;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <DMA_CheckFifoParam+0xe8>
    break;
 8005922:	bf00      	nop
    }
  }

  return status;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop

08005934 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a38      	ldr	r2, [pc, #224]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a36      	ldr	r2, [pc, #216]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01d      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a33      	ldr	r2, [pc, #204]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a32      	ldr	r2, [pc, #200]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2d      	ldr	r2, [pc, #180]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01a      	beq.n	80059d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	3b08      	subs	r3, #8
 80059a4:	4a28      	ldr	r2, [pc, #160]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	2201      	movs	r2, #1
 80059ca:	409a      	lsls	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059d0:	e024      	b.n	8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	3b10      	subs	r3, #16
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d806      	bhi.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d902      	bls.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3308      	adds	r3, #8
 80059f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2201      	movs	r2, #1
 8005a16:	409a      	lsls	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	58025408 	.word	0x58025408
 8005a2c:	5802541c 	.word	0x5802541c
 8005a30:	58025430 	.word	0x58025430
 8005a34:	58025444 	.word	0x58025444
 8005a38:	58025458 	.word	0x58025458
 8005a3c:	5802546c 	.word	0x5802546c
 8005a40:	58025480 	.word	0x58025480
 8005a44:	58025494 	.word	0x58025494
 8005a48:	cccccccd 	.word	0xcccccccd
 8005a4c:	16009600 	.word	0x16009600
 8005a50:	58025880 	.word	0x58025880
 8005a54:	aaaaaaab 	.word	0xaaaaaaab
 8005a58:	400204b8 	.word	0x400204b8
 8005a5c:	4002040f 	.word	0x4002040f
 8005a60:	10008200 	.word	0x10008200
 8005a64:	40020880 	.word	0x40020880

08005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d04a      	beq.n	8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d847      	bhi.n	8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005af0:	671a      	str	r2, [r3, #112]	; 0x70
 8005af2:	e009      	b.n	8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b06:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	409a      	lsls	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	58025408 	.word	0x58025408
 8005b24:	5802541c 	.word	0x5802541c
 8005b28:	58025430 	.word	0x58025430
 8005b2c:	58025444 	.word	0x58025444
 8005b30:	58025458 	.word	0x58025458
 8005b34:	5802546c 	.word	0x5802546c
 8005b38:	58025480 	.word	0x58025480
 8005b3c:	58025494 	.word	0x58025494
 8005b40:	1600963f 	.word	0x1600963f
 8005b44:	58025940 	.word	0x58025940
 8005b48:	1000823f 	.word	0x1000823f
 8005b4c:	40020940 	.word	0x40020940

08005b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b089      	sub	sp, #36	; 0x24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b5e:	4b89      	ldr	r3, [pc, #548]	; (8005d84 <HAL_GPIO_Init+0x234>)
 8005b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b62:	e194      	b.n	8005e8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	4013      	ands	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8186 	beq.w	8005e88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d005      	beq.n	8005b94 <HAL_GPIO_Init+0x44>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d130      	bne.n	8005bf6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bca:	2201      	movs	r2, #1
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	f003 0201 	and.w	r2, r3, #1
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d017      	beq.n	8005c32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d123      	bne.n	8005c86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	08da      	lsrs	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3208      	adds	r2, #8
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	220f      	movs	r2, #15
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	08da      	lsrs	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3208      	adds	r2, #8
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2203      	movs	r2, #3
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0203 	and.w	r2, r3, #3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80e0 	beq.w	8005e88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc8:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_GPIO_Init+0x238>)
 8005cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_GPIO_Init+0x238>)
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cd8:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_GPIO_Init+0x238>)
 8005cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ce6:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <HAL_GPIO_Init+0x23c>)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	089b      	lsrs	r3, r3, #2
 8005cec:	3302      	adds	r3, #2
 8005cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <HAL_GPIO_Init+0x240>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d052      	beq.n	8005db8 <HAL_GPIO_Init+0x268>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <HAL_GPIO_Init+0x244>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_GPIO_Init+0x22e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <HAL_GPIO_Init+0x248>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02b      	beq.n	8005d7a <HAL_GPIO_Init+0x22a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <HAL_GPIO_Init+0x24c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d025      	beq.n	8005d76 <HAL_GPIO_Init+0x226>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_GPIO_Init+0x250>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01f      	beq.n	8005d72 <HAL_GPIO_Init+0x222>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_GPIO_Init+0x254>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d019      	beq.n	8005d6e <HAL_GPIO_Init+0x21e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <HAL_GPIO_Init+0x258>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_GPIO_Init+0x21a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a19      	ldr	r2, [pc, #100]	; (8005dac <HAL_GPIO_Init+0x25c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00d      	beq.n	8005d66 <HAL_GPIO_Init+0x216>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_GPIO_Init+0x260>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <HAL_GPIO_Init+0x212>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <HAL_GPIO_Init+0x264>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <HAL_GPIO_Init+0x20e>
 8005d5a:	2309      	movs	r3, #9
 8005d5c:	e02d      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d5e:	230a      	movs	r3, #10
 8005d60:	e02b      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d62:	2308      	movs	r3, #8
 8005d64:	e029      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d66:	2307      	movs	r3, #7
 8005d68:	e027      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d6a:	2306      	movs	r3, #6
 8005d6c:	e025      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d6e:	2305      	movs	r3, #5
 8005d70:	e023      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d72:	2304      	movs	r3, #4
 8005d74:	e021      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d76:	2303      	movs	r3, #3
 8005d78:	e01f      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e01d      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e01b      	b.n	8005dba <HAL_GPIO_Init+0x26a>
 8005d82:	bf00      	nop
 8005d84:	58000080 	.word	0x58000080
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	58000400 	.word	0x58000400
 8005d90:	58020000 	.word	0x58020000
 8005d94:	58020400 	.word	0x58020400
 8005d98:	58020800 	.word	0x58020800
 8005d9c:	58020c00 	.word	0x58020c00
 8005da0:	58021000 	.word	0x58021000
 8005da4:	58021400 	.word	0x58021400
 8005da8:	58021800 	.word	0x58021800
 8005dac:	58021c00 	.word	0x58021c00
 8005db0:	58022000 	.word	0x58022000
 8005db4:	58022400 	.word	0x58022400
 8005db8:	2300      	movs	r3, #0
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	f002 0203 	and.w	r2, r2, #3
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	4093      	lsls	r3, r2
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dca:	4938      	ldr	r1, [pc, #224]	; (8005eac <HAL_GPIO_Init+0x35c>)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4013      	ands	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f ae63 	bne.w	8005b64 <HAL_GPIO_Init+0x14>
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3724      	adds	r7, #36	; 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	58000400 	.word	0x58000400

08005eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ecc:	e003      	b.n	8005ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ece:	887b      	ldrh	r3, [r7, #2]
 8005ed0:	041a      	lsls	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	619a      	str	r2, [r3, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ef4:	887a      	ldrh	r2, [r7, #2]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	041a      	lsls	r2, r3, #16
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	43d9      	mvns	r1, r3
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	400b      	ands	r3, r1
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	619a      	str	r2, [r3, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f18:	b08f      	sub	sp, #60	; 0x3c
 8005f1a:	af0a      	add	r7, sp, #40	; 0x28
 8005f1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e116      	b.n	8006156 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f009 fc96 	bl	800f874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f005 fdfd 	bl	800bb66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	687e      	ldr	r6, [r7, #4]
 8005f74:	466d      	mov	r5, sp
 8005f76:	f106 0410 	add.w	r4, r6, #16
 8005f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f8a:	1d33      	adds	r3, r6, #4
 8005f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f005 fcc8 	bl	800b924 <USB_CoreInit>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e0d7      	b.n	8006156 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2100      	movs	r1, #0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f005 fdeb 	bl	800bb88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
 8005fb6:	e04a      	b.n	800604e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	333d      	adds	r3, #61	; 0x3d
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fcc:	7bfa      	ldrb	r2, [r7, #15]
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	333c      	adds	r3, #60	; 0x3c
 8005fdc:	7bfa      	ldrb	r2, [r7, #15]
 8005fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fe0:	7bfa      	ldrb	r2, [r7, #15]
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	b298      	uxth	r0, r3
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3356      	adds	r3, #86	; 0x56
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ff8:	7bfa      	ldrb	r2, [r7, #15]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3340      	adds	r3, #64	; 0x40
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800600c:	7bfa      	ldrb	r2, [r7, #15]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3344      	adds	r3, #68	; 0x44
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006020:	7bfa      	ldrb	r2, [r7, #15]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3348      	adds	r3, #72	; 0x48
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	334c      	adds	r3, #76	; 0x4c
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	3301      	adds	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d3af      	bcc.n	8005fb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e044      	b.n	80060e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800608a:	7bfa      	ldrb	r2, [r7, #15]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060cc:	7bfa      	ldrb	r2, [r7, #15]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	3301      	adds	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	7bfa      	ldrb	r2, [r7, #15]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d3b5      	bcc.n	800605e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	687e      	ldr	r6, [r7, #4]
 80060fa:	466d      	mov	r5, sp
 80060fc:	f106 0410 	add.w	r4, r6, #16
 8006100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800610c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006110:	1d33      	adds	r3, r6, #4
 8006112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006114:	6838      	ldr	r0, [r7, #0]
 8006116:	f005 fd83 	bl	800bc20 <USB_DevInit>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e014      	b.n	8006156 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b01      	cmp	r3, #1
 8006142:	d102      	bne.n	800614a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f96f 	bl	8007428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f006 fdc5 	bl	800ccde <USB_DevDisconnect>

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800615e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_PCD_Start+0x1c>
 8006176:	2302      	movs	r3, #2
 8006178:	e022      	b.n	80061c0 <HAL_PCD_Start+0x62>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f005 fccc 	bl	800bb44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f006 fd73 	bl	800cc9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061c8:	b590      	push	{r4, r7, lr}
 80061ca:	b08d      	sub	sp, #52	; 0x34
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f006 fe31 	bl	800ce46 <USB_GetMode>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 84b7 	bne.w	8006b5a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f006 fd95 	bl	800cd20 <USB_ReadInterrupts>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 84ad 	beq.w	8006b58 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f006 fd82 	bl	800cd20 <USB_ReadInterrupts>
 800621c:	4603      	mov	r3, r0
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d107      	bne.n	8006236 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f002 0202 	and.w	r2, r2, #2
 8006234:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f006 fd70 	bl	800cd20 <USB_ReadInterrupts>
 8006240:	4603      	mov	r3, r0
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b10      	cmp	r3, #16
 8006248:	d161      	bne.n	800630e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0210 	bic.w	r2, r2, #16
 8006258:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f003 020f 	and.w	r2, r3, #15
 8006266:	4613      	mov	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4413      	add	r3, r2
 8006276:	3304      	adds	r3, #4
 8006278:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	0c5b      	lsrs	r3, r3, #17
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	2b02      	cmp	r3, #2
 8006284:	d124      	bne.n	80062d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d035      	beq.n	80062fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	091b      	lsrs	r3, r3, #4
 800629a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800629c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	6a38      	ldr	r0, [r7, #32]
 80062a6:	f006 fba7 	bl	800c9f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b6:	441a      	add	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062c8:	441a      	add	r2, r3
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	615a      	str	r2, [r3, #20]
 80062ce:	e016      	b.n	80062fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	0c5b      	lsrs	r3, r3, #17
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d110      	bne.n	80062fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062e2:	2208      	movs	r2, #8
 80062e4:	4619      	mov	r1, r3
 80062e6:	6a38      	ldr	r0, [r7, #32]
 80062e8:	f006 fb86 	bl	800c9f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f8:	441a      	add	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0210 	orr.w	r2, r2, #16
 800630c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f006 fd04 	bl	800cd20 <USB_ReadInterrupts>
 8006318:	4603      	mov	r3, r0
 800631a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800631e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006322:	f040 80a7 	bne.w	8006474 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f006 fd09 	bl	800cd46 <USB_ReadDevAllOutEpInterrupt>
 8006334:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006336:	e099      	b.n	800646c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 808e 	beq.w	8006460 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f006 fd2d 	bl	800cdae <USB_ReadDevOutEPInterrupt>
 8006354:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00c      	beq.n	800637a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	461a      	mov	r2, r3
 800636e:	2301      	movs	r3, #1
 8006370:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fed1 	bl	800711c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00c      	beq.n	800639e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	461a      	mov	r2, r3
 8006392:	2308      	movs	r3, #8
 8006394:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 ffa7 	bl	80072ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	2310      	movs	r3, #16
 80063b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d030      	beq.n	8006426 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	2b80      	cmp	r3, #128	; 0x80
 80063ce:	d109      	bne.n	80063e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80063e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e6:	4613      	mov	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	3304      	adds	r3, #4
 80063f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d108      	bne.n	8006414 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2200      	movs	r2, #0
 8006406:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	b2db      	uxtb	r3, r3
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f009 fb56 	bl	800fac0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	2302      	movs	r3, #2
 8006424:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	2320      	movs	r3, #32
 8006440:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	461a      	mov	r2, r3
 800645a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800645e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	3301      	adds	r3, #1
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	f47f af62 	bne.w	8006338 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f006 fc51 	bl	800cd20 <USB_ReadInterrupts>
 800647e:	4603      	mov	r3, r0
 8006480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006488:	f040 80db 	bne.w	8006642 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f006 fc72 	bl	800cd7a <USB_ReadDevAllInEpInterrupt>
 8006496:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800649c:	e0cd      	b.n	800663a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80c2 	beq.w	800662e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f006 fc98 	bl	800cdea <USB_ReadDevInEPInterrupt>
 80064ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d057      	beq.n	8006576 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	2201      	movs	r2, #1
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	43db      	mvns	r3, r3
 80064e0:	69f9      	ldr	r1, [r7, #28]
 80064e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064e6:	4013      	ands	r3, r2
 80064e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f6:	461a      	mov	r2, r3
 80064f8:	2301      	movs	r3, #1
 80064fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d132      	bne.n	800656a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	4613      	mov	r3, r2
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	3348      	adds	r3, #72	; 0x48
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4403      	add	r3, r0
 8006524:	3344      	adds	r3, #68	; 0x44
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4419      	add	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4403      	add	r3, r0
 8006538:	3348      	adds	r3, #72	; 0x48
 800653a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	d113      	bne.n	800656a <HAL_PCD_IRQHandler+0x3a2>
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	334c      	adds	r3, #76	; 0x4c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d108      	bne.n	800656a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006562:	461a      	mov	r2, r3
 8006564:	2101      	movs	r1, #1
 8006566:	f006 fca1 	bl	800ceac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f009 fa20 	bl	800f9b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658c:	461a      	mov	r2, r3
 800658e:	2308      	movs	r3, #8
 8006590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	461a      	mov	r2, r3
 80065aa:	2310      	movs	r3, #16
 80065ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	461a      	mov	r2, r3
 80065c6:	2340      	movs	r3, #64	; 0x40
 80065c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d023      	beq.n	800661c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80065d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065d6:	6a38      	ldr	r0, [r7, #32]
 80065d8:	f005 fc80 	bl	800bedc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	4613      	mov	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	3338      	adds	r3, #56	; 0x38
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	3304      	adds	r3, #4
 80065ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d108      	bne.n	800660a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f009 fa6d 	bl	800fae4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006616:	461a      	mov	r2, r3
 8006618:	2302      	movs	r3, #2
 800661a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006626:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fcea 	bl	8007002 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	3301      	adds	r3, #1
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2b00      	cmp	r3, #0
 800663e:	f47f af2e 	bne.w	800649e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f006 fb6a 	bl	800cd20 <USB_ReadInterrupts>
 800664c:	4603      	mov	r3, r0
 800664e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006656:	d122      	bne.n	800669e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006672:	2b01      	cmp	r3, #1
 8006674:	d108      	bne.n	8006688 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fef5 	bl	8007470 <HAL_PCDEx_LPM_Callback>
 8006686:	e002      	b.n	800668e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f009 fa0b 	bl	800faa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800669c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f006 fb3c 	bl	800cd20 <USB_ReadInterrupts>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d112      	bne.n	80066da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d102      	bne.n	80066ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f009 f9c7 	bl	800fa58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80066d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f006 fb1e 	bl	800cd20 <USB_ReadInterrupts>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ee:	d121      	bne.n	8006734 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80066fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d111      	bne.n	800672e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006718:	089b      	lsrs	r3, r3, #2
 800671a:	f003 020f 	and.w	r2, r3, #15
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006724:	2101      	movs	r1, #1
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fea2 	bl	8007470 <HAL_PCDEx_LPM_Callback>
 800672c:	e002      	b.n	8006734 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f009 f992 	bl	800fa58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f006 faf1 	bl	800cd20 <USB_ReadInterrupts>
 800673e:	4603      	mov	r3, r0
 8006740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006748:	f040 80b7 	bne.w	80068ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2110      	movs	r1, #16
 8006766:	4618      	mov	r0, r3
 8006768:	f005 fbb8 	bl	800bedc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800676c:	2300      	movs	r3, #0
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006770:	e046      	b.n	8006800 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	461a      	mov	r2, r3
 8006780:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006784:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	440a      	add	r2, r1
 800679c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	461a      	mov	r2, r3
 80067b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	3301      	adds	r3, #1
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006806:	429a      	cmp	r2, r3
 8006808:	d3b3      	bcc.n	8006772 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006818:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800681c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006836:	f043 030b 	orr.w	r3, r3, #11
 800683a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684c:	f043 030b 	orr.w	r3, r3, #11
 8006850:	6453      	str	r3, [r2, #68]	; 0x44
 8006852:	e015      	b.n	8006880 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	4619      	mov	r1, r3
 8006864:	f242 032b 	movw	r3, #8235	; 0x202b
 8006868:	4313      	orrs	r3, r2
 800686a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687a:	f043 030b 	orr.w	r3, r3, #11
 800687e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006892:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068a4:	461a      	mov	r2, r3
 80068a6:	f006 fb01 	bl	800ceac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80068b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f006 fa2e 	bl	800cd20 <USB_ReadInterrupts>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ce:	d124      	bne.n	800691a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f006 fac5 	bl	800ce64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f005 fb79 	bl	800bfd6 <USB_GetDevSpeed>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681c      	ldr	r4, [r3, #0]
 80068f0:	f001 fd9e 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 80068f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	4620      	mov	r0, r4
 8006900:	f005 f87e 	bl	800ba00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f009 f87e 	bl	800fa06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006918:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f006 f9fe 	bl	800cd20 <USB_ReadInterrupts>
 8006924:	4603      	mov	r3, r0
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b08      	cmp	r3, #8
 800692c:	d10a      	bne.n	8006944 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f009 f85b 	bl	800f9ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f002 0208 	and.w	r2, r2, #8
 8006942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f006 f9e9 	bl	800cd20 <USB_ReadInterrupts>
 800694e:	4603      	mov	r3, r0
 8006950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d122      	bne.n	800699e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006964:	2301      	movs	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	e014      	b.n	8006994 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d105      	bne.n	800698e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	b2db      	uxtb	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fb09 	bl	8006fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	3301      	adds	r3, #1
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699a:	429a      	cmp	r2, r3
 800699c:	d3e5      	bcc.n	800696a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f006 f9bc 	bl	800cd20 <USB_ReadInterrupts>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b2:	d13b      	bne.n	8006a2c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069b4:	2301      	movs	r3, #1
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
 80069b8:	e02b      	b.n	8006a12 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	3340      	adds	r3, #64	; 0x40
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d115      	bne.n	8006a0c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80069e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da12      	bge.n	8006a0c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ea:	4613      	mov	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	333f      	adds	r3, #63	; 0x3f
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 faca 	bl	8006fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	3301      	adds	r3, #1
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3ce      	bcc.n	80069ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f006 f975 	bl	800cd20 <USB_ReadInterrupts>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a40:	d155      	bne.n	8006aee <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a42:	2301      	movs	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	e045      	b.n	8006ad4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d12e      	bne.n	8006ace <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da2b      	bge.n	8006ace <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006a82:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d121      	bne.n	8006ace <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8e:	4613      	mov	r3, r2
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aca:	6053      	str	r3, [r2, #4]
            break;
 8006acc:	e007      	b.n	8006ade <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d3b4      	bcc.n	8006a48 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f006 f914 	bl	800cd20 <USB_ReadInterrupts>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d10a      	bne.n	8006b1a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f008 ffff 	bl	800fb08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f006 f8fe 	bl	800cd20 <USB_ReadInterrupts>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d115      	bne.n	8006b5a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f008 ffef 	bl	800fb24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6859      	ldr	r1, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	e000      	b.n	8006b5a <HAL_PCD_IRQHandler+0x992>
      return;
 8006b58:	bf00      	nop
    }
  }
}
 8006b5a:	3734      	adds	r7, #52	; 0x34
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}

08006b60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_PCD_SetAddress+0x1a>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e013      	b.n	8006ba2 <HAL_PCD_SetAddress+0x42>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f006 f85c 	bl	800cc50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	70fb      	strb	r3, [r7, #3]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	803b      	strh	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da0f      	bge.n	8006bf0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	f003 020f 	and.w	r2, r3, #15
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	3338      	adds	r3, #56	; 0x38
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	3304      	adds	r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	705a      	strb	r2, [r3, #1]
 8006bee:	e00f      	b.n	8006c10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4413      	add	r3, r2
 8006c06:	3304      	adds	r3, #4
 8006c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c1c:	883a      	ldrh	r2, [r7, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	78ba      	ldrb	r2, [r7, #2]
 8006c26:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c3a:	78bb      	ldrb	r3, [r7, #2]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d102      	bne.n	8006c46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_PCD_EP_Open+0xaa>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e00e      	b.n	8006c72 <HAL_PCD_EP_Open+0xc8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68f9      	ldr	r1, [r7, #12]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f005 f9dc 	bl	800c020 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006c70:	7afb      	ldrb	r3, [r7, #11]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da0f      	bge.n	8006cae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	3338      	adds	r3, #56	; 0x38
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	705a      	strb	r2, [r3, #1]
 8006cac:	e00f      	b.n	8006cce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	f003 020f 	and.w	r2, r3, #15
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_PCD_EP_Close+0x6e>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e00e      	b.n	8006d06 <HAL_PCD_EP_Close+0x8c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68f9      	ldr	r1, [r7, #12]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f005 fa1a 	bl	800c130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	4613      	mov	r3, r2
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	3304      	adds	r3, #4
 8006d36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2200      	movs	r2, #0
 8006d48:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d102      	bne.n	8006d6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	f005 fab6 	bl	800c2e8 <USB_EPStartXfer>

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8006da8:	681b      	ldr	r3, [r3, #0]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	3338      	adds	r3, #56	; 0x38
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3304      	adds	r3, #4
 8006ddc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2200      	movs	r2, #0
 8006dee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2201      	movs	r2, #1
 8006df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d102      	bne.n	8006e10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	f005 fa63 	bl	800c2e8 <USB_EPStartXfer>

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d901      	bls.n	8006e4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e050      	b.n	8006eec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da0f      	bge.n	8006e72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	3338      	adds	r3, #56	; 0x38
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	4413      	add	r3, r2
 8006e66:	3304      	adds	r3, #4
 8006e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	705a      	strb	r2, [r3, #1]
 8006e70:	e00d      	b.n	8006e8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	4613      	mov	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	3304      	adds	r3, #4
 8006e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_PCD_EP_SetStall+0x82>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e01e      	b.n	8006eec <HAL_PCD_EP_SetStall+0xc0>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f005 fdf3 	bl	800caa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	b2d9      	uxtb	r1, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006edc:	461a      	mov	r2, r3
 8006ede:	f005 ffe5 	bl	800ceac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 020f 	and.w	r2, r3, #15
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d901      	bls.n	8006f12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e042      	b.n	8006f98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da0f      	bge.n	8006f3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	3338      	adds	r3, #56	; 0x38
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	705a      	strb	r2, [r3, #1]
 8006f38:	e00f      	b.n	8006f5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4413      	add	r3, r2
 8006f50:	3304      	adds	r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <HAL_PCD_EP_ClrStall+0x86>
 8006f76:	2302      	movs	r3, #2
 8006f78:	e00e      	b.n	8006f98 <HAL_PCD_EP_ClrStall+0xa4>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f005 fdfb 	bl	800cb84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	da0c      	bge.n	8006fce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	f003 020f 	and.w	r2, r3, #15
 8006fba:	4613      	mov	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	3338      	adds	r3, #56	; 0x38
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3304      	adds	r3, #4
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e00c      	b.n	8006fe8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68f9      	ldr	r1, [r7, #12]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f005 fc1a 	bl	800c828 <USB_EPStopXfer>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b08a      	sub	sp, #40	; 0x28
 8007006:	af02      	add	r7, sp, #8
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	3338      	adds	r3, #56	; 0x38
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	3304      	adds	r3, #4
 8007028:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d901      	bls.n	800703a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e06c      	b.n	8007114 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	429a      	cmp	r2, r3
 800704e:	d902      	bls.n	8007056 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3303      	adds	r3, #3
 800705a:	089b      	lsrs	r3, r3, #2
 800705c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800705e:	e02b      	b.n	80070b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	429a      	cmp	r2, r3
 8007074:	d902      	bls.n	800707c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	3303      	adds	r3, #3
 8007080:	089b      	lsrs	r3, r3, #2
 8007082:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68d9      	ldr	r1, [r3, #12]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007094:	b2db      	uxtb	r3, r3
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4603      	mov	r3, r0
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f005 fc6e 	bl	800c97c <USB_WritePacket>

    ep->xfer_buff  += len;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	441a      	add	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	441a      	add	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d809      	bhi.n	80070e2 <PCD_WriteEmptyTxFifo+0xe0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d203      	bcs.n	80070e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1be      	bne.n	8007060 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d811      	bhi.n	8007112 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	2201      	movs	r2, #1
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	43db      	mvns	r3, r3
 8007108:	6939      	ldr	r1, [r7, #16]
 800710a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710e:	4013      	ands	r3, r2
 8007110:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	333c      	adds	r3, #60	; 0x3c
 8007134:	3304      	adds	r3, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d17b      	bne.n	800724a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d015      	beq.n	8007188 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4a61      	ldr	r2, [pc, #388]	; (80072e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	f240 80b9 	bls.w	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80b3 	beq.w	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	461a      	mov	r2, r3
 8007180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007184:	6093      	str	r3, [r2, #8]
 8007186:	e0a7      	b.n	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	461a      	mov	r2, r3
 80071a0:	2320      	movs	r3, #32
 80071a2:	6093      	str	r3, [r2, #8]
 80071a4:	e098      	b.n	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8093 	bne.w	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4a4b      	ldr	r2, [pc, #300]	; (80072e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d90f      	bls.n	80071da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	461a      	mov	r2, r3
 80071d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d6:	6093      	str	r3, [r2, #8]
 80071d8:	e07e      	b.n	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	4413      	add	r3, r2
 80071ec:	3304      	adds	r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	0159      	lsls	r1, r3, #5
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	440b      	add	r3, r1
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d114      	bne.n	800723c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007224:	461a      	mov	r2, r3
 8007226:	2101      	movs	r1, #1
 8007228:	f005 fe40 	bl	800ceac <USB_EP0_OutStart>
 800722c:	e006      	b.n	800723c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	441a      	add	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f008 fb9c 	bl	800f980 <HAL_PCD_DataOutStageCallback>
 8007248:	e046      	b.n	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	4a26      	ldr	r2, [pc, #152]	; (80072e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d124      	bne.n	800729c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	461a      	mov	r2, r3
 800726a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726e:	6093      	str	r3, [r2, #8]
 8007270:	e032      	b.n	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	461a      	mov	r2, r3
 800728a:	2320      	movs	r3, #32
 800728c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f008 fb73 	bl	800f980 <HAL_PCD_DataOutStageCallback>
 800729a:	e01d      	b.n	80072d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d114      	bne.n	80072cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d108      	bne.n	80072cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072c4:	461a      	mov	r2, r3
 80072c6:	2100      	movs	r1, #0
 80072c8:	f005 fdf0 	bl	800ceac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f008 fb54 	bl	800f980 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	4f54300a 	.word	0x4f54300a
 80072e8:	4f54310a 	.word	0x4f54310a

080072ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	333c      	adds	r3, #60	; 0x3c
 8007304:	3304      	adds	r3, #4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a15      	ldr	r2, [pc, #84]	; (8007374 <PCD_EP_OutSetupPacket_int+0x88>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d90e      	bls.n	8007340 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007338:	461a      	mov	r2, r3
 800733a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800733e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f008 fb0b 	bl	800f95c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <PCD_EP_OutSetupPacket_int+0x88>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d90c      	bls.n	8007368 <PCD_EP_OutSetupPacket_int+0x7c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d108      	bne.n	8007368 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007360:	461a      	mov	r2, r3
 8007362:	2101      	movs	r1, #1
 8007364:	f005 fda2 	bl	800ceac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	4f54300a 	.word	0x4f54300a

08007378 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
 8007384:	4613      	mov	r3, r2
 8007386:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007396:	883b      	ldrh	r3, [r7, #0]
 8007398:	0419      	lsls	r1, r3, #16
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28
 80073a4:	e028      	b.n	80073f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4413      	add	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	e00d      	b.n	80073d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	3340      	adds	r3, #64	; 0x40
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	3301      	adds	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	3b01      	subs	r3, #1
 80073dc:	429a      	cmp	r2, r3
 80073de:	d3ec      	bcc.n	80073ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80073e0:	883b      	ldrh	r3, [r7, #0]
 80073e2:	0418      	lsls	r0, r3, #16
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	4302      	orrs	r2, r0
 80073f0:	3340      	adds	r3, #64	; 0x40
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	887a      	ldrh	r2, [r7, #2]
 8007418:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <HAL_PCDEx_ActivateLPM+0x44>)
 8007458:	4313      	orrs	r3, r2
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	10000003 	.word	0x10000003

08007470 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007490:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <HAL_PWREx_ConfigSupply+0x70>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b04      	cmp	r3, #4
 800749a:	d00a      	beq.n	80074b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800749c:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <HAL_PWREx_ConfigSupply+0x70>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d001      	beq.n	80074ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e01f      	b.n	80074ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e01d      	b.n	80074ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <HAL_PWREx_ConfigSupply+0x70>)
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f023 0207 	bic.w	r2, r3, #7
 80074ba:	490f      	ldr	r1, [pc, #60]	; (80074f8 <HAL_PWREx_ConfigSupply+0x70>)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074c2:	f7fa f8ad 	bl	8001620 <HAL_GetTick>
 80074c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074c8:	e009      	b.n	80074de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074ca:	f7fa f8a9 	bl	8001620 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074d8:	d901      	bls.n	80074de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e007      	b.n	80074ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <HAL_PWREx_ConfigSupply+0x70>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ea:	d1ee      	bne.n	80074ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	58024800 	.word	0x58024800

080074fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a04      	ldr	r2, [pc, #16]	; (8007518 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800750a:	60d3      	str	r3, [r2, #12]
}
 800750c:	bf00      	nop
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	58024800 	.word	0x58024800

0800751c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	; 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d102      	bne.n	8007530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f000 bc48 	b.w	8007dc0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8088 	beq.w	800764e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800753e:	4b99      	ldr	r3, [pc, #612]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007548:	4b96      	ldr	r3, [pc, #600]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	2b10      	cmp	r3, #16
 8007552:	d007      	beq.n	8007564 <HAL_RCC_OscConfig+0x48>
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	2b18      	cmp	r3, #24
 8007558:	d111      	bne.n	800757e <HAL_RCC_OscConfig+0x62>
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d10c      	bne.n	800757e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007564:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d06d      	beq.n	800764c <HAL_RCC_OscConfig+0x130>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d169      	bne.n	800764c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	f000 bc21 	b.w	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007586:	d106      	bne.n	8007596 <HAL_RCC_OscConfig+0x7a>
 8007588:	4b86      	ldr	r3, [pc, #536]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a85      	ldr	r2, [pc, #532]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800758e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e02e      	b.n	80075f4 <HAL_RCC_OscConfig+0xd8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x9c>
 800759e:	4b81      	ldr	r3, [pc, #516]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a80      	ldr	r2, [pc, #512]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4b7e      	ldr	r3, [pc, #504]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a7d      	ldr	r2, [pc, #500]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e01d      	b.n	80075f4 <HAL_RCC_OscConfig+0xd8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCC_OscConfig+0xc0>
 80075c2:	4b78      	ldr	r3, [pc, #480]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a77      	ldr	r2, [pc, #476]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	4b75      	ldr	r3, [pc, #468]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a74      	ldr	r2, [pc, #464]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e00b      	b.n	80075f4 <HAL_RCC_OscConfig+0xd8>
 80075dc:	4b71      	ldr	r3, [pc, #452]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a70      	ldr	r2, [pc, #448]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	4b6e      	ldr	r3, [pc, #440]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a6d      	ldr	r2, [pc, #436]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80075ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d013      	beq.n	8007624 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fc:	f7fa f810 	bl	8001620 <HAL_GetTick>
 8007600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007604:	f7fa f80c 	bl	8001620 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b64      	cmp	r3, #100	; 0x64
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e3d4      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007616:	4b63      	ldr	r3, [pc, #396]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <HAL_RCC_OscConfig+0xe8>
 8007622:	e014      	b.n	800764e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7f9 fffc 	bl	8001620 <HAL_GetTick>
 8007628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800762c:	f7f9 fff8 	bl	8001620 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b64      	cmp	r3, #100	; 0x64
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e3c0      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800763e:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x110>
 800764a:	e000      	b.n	800764e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80ca 	beq.w	80077f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800765c:	4b51      	ldr	r3, [pc, #324]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007664:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007666:	4b4f      	ldr	r3, [pc, #316]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <HAL_RCC_OscConfig+0x166>
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	2b18      	cmp	r3, #24
 8007676:	d156      	bne.n	8007726 <HAL_RCC_OscConfig+0x20a>
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d151      	bne.n	8007726 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007682:	4b48      	ldr	r3, [pc, #288]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_RCC_OscConfig+0x17e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e392      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800769a:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f023 0219 	bic.w	r2, r3, #25
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	493f      	ldr	r1, [pc, #252]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ac:	f7f9 ffb8 	bl	8001620 <HAL_GetTick>
 80076b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076b4:	f7f9 ffb4 	bl	8001620 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e37c      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076c6:	4b37      	ldr	r3, [pc, #220]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f0      	beq.n	80076b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d2:	f7f9 ffd5 	bl	8001680 <HAL_GetREVID>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80076dc:	4293      	cmp	r3, r2
 80076de:	d817      	bhi.n	8007710 <HAL_RCC_OscConfig+0x1f4>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d108      	bne.n	80076fa <HAL_RCC_OscConfig+0x1de>
 80076e8:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80076f0:	4a2c      	ldr	r2, [pc, #176]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80076f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076f8:	e07a      	b.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fa:	4b2a      	ldr	r3, [pc, #168]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	031b      	lsls	r3, r3, #12
 8007708:	4926      	ldr	r1, [pc, #152]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800770a:	4313      	orrs	r3, r2
 800770c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800770e:	e06f      	b.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007710:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	4921      	ldr	r1, [pc, #132]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007720:	4313      	orrs	r3, r2
 8007722:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007724:	e064      	b.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d047      	beq.n	80077be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f023 0219 	bic.w	r2, r3, #25
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	491a      	ldr	r1, [pc, #104]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7f9 ff6e 	bl	8001620 <HAL_GetTick>
 8007744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007748:	f7f9 ff6a 	bl	8001620 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e332      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007766:	f7f9 ff8b 	bl	8001680 <HAL_GetREVID>
 800776a:	4603      	mov	r3, r0
 800776c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007770:	4293      	cmp	r3, r2
 8007772:	d819      	bhi.n	80077a8 <HAL_RCC_OscConfig+0x28c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d108      	bne.n	800778e <HAL_RCC_OscConfig+0x272>
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007784:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800778a:	6053      	str	r3, [r2, #4]
 800778c:	e030      	b.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	031b      	lsls	r3, r3, #12
 800779c:	4901      	ldr	r1, [pc, #4]	; (80077a4 <HAL_RCC_OscConfig+0x288>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	604b      	str	r3, [r1, #4]
 80077a2:	e025      	b.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
 80077a4:	58024400 	.word	0x58024400
 80077a8:	4b9a      	ldr	r3, [pc, #616]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	061b      	lsls	r3, r3, #24
 80077b6:	4997      	ldr	r1, [pc, #604]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	604b      	str	r3, [r1, #4]
 80077bc:	e018      	b.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077be:	4b95      	ldr	r3, [pc, #596]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a94      	ldr	r2, [pc, #592]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ca:	f7f9 ff29 	bl	8001620 <HAL_GetTick>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d2:	f7f9 ff25 	bl	8001620 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e2ed      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077e4:	4b8b      	ldr	r3, [pc, #556]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f0      	bne.n	80077d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80a9 	beq.w	8007950 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077fe:	4b85      	ldr	r3, [pc, #532]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007806:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007808:	4b82      	ldr	r3, [pc, #520]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d007      	beq.n	8007824 <HAL_RCC_OscConfig+0x308>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b18      	cmp	r3, #24
 8007818:	d13a      	bne.n	8007890 <HAL_RCC_OscConfig+0x374>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	2b01      	cmp	r3, #1
 8007822:	d135      	bne.n	8007890 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007824:	4b7b      	ldr	r3, [pc, #492]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_OscConfig+0x320>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d001      	beq.n	800783c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e2c1      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800783c:	f7f9 ff20 	bl	8001680 <HAL_GetREVID>
 8007840:	4603      	mov	r3, r0
 8007842:	f241 0203 	movw	r2, #4099	; 0x1003
 8007846:	4293      	cmp	r3, r2
 8007848:	d817      	bhi.n	800787a <HAL_RCC_OscConfig+0x35e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	2b20      	cmp	r3, #32
 8007850:	d108      	bne.n	8007864 <HAL_RCC_OscConfig+0x348>
 8007852:	4b70      	ldr	r3, [pc, #448]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800785a:	4a6e      	ldr	r2, [pc, #440]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800785c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007860:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007862:	e075      	b.n	8007950 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007864:	4b6b      	ldr	r3, [pc, #428]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	069b      	lsls	r3, r3, #26
 8007872:	4968      	ldr	r1, [pc, #416]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007874:	4313      	orrs	r3, r2
 8007876:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007878:	e06a      	b.n	8007950 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800787a:	4b66      	ldr	r3, [pc, #408]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	061b      	lsls	r3, r3, #24
 8007888:	4962      	ldr	r1, [pc, #392]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800788a:	4313      	orrs	r3, r2
 800788c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800788e:	e05f      	b.n	8007950 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d042      	beq.n	800791e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007898:	4b5e      	ldr	r3, [pc, #376]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a5d      	ldr	r2, [pc, #372]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a4:	f7f9 febc 	bl	8001620 <HAL_GetTick>
 80078a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80078ac:	f7f9 feb8 	bl	8001620 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e280      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078be:	4b55      	ldr	r3, [pc, #340]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078ca:	f7f9 fed9 	bl	8001680 <HAL_GetREVID>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d817      	bhi.n	8007908 <HAL_RCC_OscConfig+0x3ec>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d108      	bne.n	80078f2 <HAL_RCC_OscConfig+0x3d6>
 80078e0:	4b4c      	ldr	r3, [pc, #304]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078e8:	4a4a      	ldr	r2, [pc, #296]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80078ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ee:	6053      	str	r3, [r2, #4]
 80078f0:	e02e      	b.n	8007950 <HAL_RCC_OscConfig+0x434>
 80078f2:	4b48      	ldr	r3, [pc, #288]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	069b      	lsls	r3, r3, #26
 8007900:	4944      	ldr	r1, [pc, #272]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007902:	4313      	orrs	r3, r2
 8007904:	604b      	str	r3, [r1, #4]
 8007906:	e023      	b.n	8007950 <HAL_RCC_OscConfig+0x434>
 8007908:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	061b      	lsls	r3, r3, #24
 8007916:	493f      	ldr	r1, [pc, #252]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007918:	4313      	orrs	r3, r2
 800791a:	60cb      	str	r3, [r1, #12]
 800791c:	e018      	b.n	8007950 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800791e:	4b3d      	ldr	r3, [pc, #244]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3c      	ldr	r2, [pc, #240]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792a:	f7f9 fe79 	bl	8001620 <HAL_GetTick>
 800792e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007932:	f7f9 fe75 	bl	8001620 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e23d      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007944:	4b33      	ldr	r3, [pc, #204]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f0      	bne.n	8007932 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d036      	beq.n	80079ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d019      	beq.n	8007998 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007964:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007968:	4a2a      	ldr	r2, [pc, #168]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007970:	f7f9 fe56 	bl	8001620 <HAL_GetTick>
 8007974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007978:	f7f9 fe52 	bl	8001620 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e21a      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800798a:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800798c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0f0      	beq.n	8007978 <HAL_RCC_OscConfig+0x45c>
 8007996:	e018      	b.n	80079ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800799a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799c:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a4:	f7f9 fe3c 	bl	8001620 <HAL_GetTick>
 80079a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079ac:	f7f9 fe38 	bl	8001620 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e200      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80079c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f0      	bne.n	80079ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d039      	beq.n	8007a4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01c      	beq.n	8007a18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079de:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 80079e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079ea:	f7f9 fe19 	bl	8001620 <HAL_GetTick>
 80079ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079f0:	e008      	b.n	8007a04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079f2:	f7f9 fe15 	bl	8001620 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e1dd      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a04:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <HAL_RCC_OscConfig+0x4f8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0f0      	beq.n	80079f2 <HAL_RCC_OscConfig+0x4d6>
 8007a10:	e01b      	b.n	8007a4a <HAL_RCC_OscConfig+0x52e>
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a18:	4b9b      	ldr	r3, [pc, #620]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a9a      	ldr	r2, [pc, #616]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a24:	f7f9 fdfc 	bl	8001620 <HAL_GetTick>
 8007a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a2c:	f7f9 fdf8 	bl	8001620 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e1c0      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a3e:	4b92      	ldr	r3, [pc, #584]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8081 	beq.w	8007b5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a58:	4b8c      	ldr	r3, [pc, #560]	; (8007c8c <HAL_RCC_OscConfig+0x770>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a8b      	ldr	r2, [pc, #556]	; (8007c8c <HAL_RCC_OscConfig+0x770>)
 8007a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a64:	f7f9 fddc 	bl	8001620 <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a6c:	f7f9 fdd8 	bl	8001620 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b64      	cmp	r3, #100	; 0x64
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e1a0      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a7e:	4b83      	ldr	r3, [pc, #524]	; (8007c8c <HAL_RCC_OscConfig+0x770>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0f0      	beq.n	8007a6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d106      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x584>
 8007a92:	4b7d      	ldr	r3, [pc, #500]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	4a7c      	ldr	r2, [pc, #496]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9e:	e02d      	b.n	8007afc <HAL_RCC_OscConfig+0x5e0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x5a6>
 8007aa8:	4b77      	ldr	r3, [pc, #476]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	4a76      	ldr	r2, [pc, #472]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007aae:	f023 0301 	bic.w	r3, r3, #1
 8007ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab4:	4b74      	ldr	r3, [pc, #464]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab8:	4a73      	ldr	r2, [pc, #460]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007aba:	f023 0304 	bic.w	r3, r3, #4
 8007abe:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac0:	e01c      	b.n	8007afc <HAL_RCC_OscConfig+0x5e0>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x5c8>
 8007aca:	4b6f      	ldr	r3, [pc, #444]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ace:	4a6e      	ldr	r2, [pc, #440]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007ad0:	f043 0304 	orr.w	r3, r3, #4
 8007ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad6:	4b6c      	ldr	r3, [pc, #432]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	4a6b      	ldr	r2, [pc, #428]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae2:	e00b      	b.n	8007afc <HAL_RCC_OscConfig+0x5e0>
 8007ae4:	4b68      	ldr	r3, [pc, #416]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	4a67      	ldr	r2, [pc, #412]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007aea:	f023 0301 	bic.w	r3, r3, #1
 8007aee:	6713      	str	r3, [r2, #112]	; 0x70
 8007af0:	4b65      	ldr	r3, [pc, #404]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af4:	4a64      	ldr	r2, [pc, #400]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007af6:	f023 0304 	bic.w	r3, r3, #4
 8007afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d015      	beq.n	8007b30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b04:	f7f9 fd8c 	bl	8001620 <HAL_GetTick>
 8007b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b0a:	e00a      	b.n	8007b22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b0c:	f7f9 fd88 	bl	8001620 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e14e      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b22:	4b59      	ldr	r3, [pc, #356]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0ee      	beq.n	8007b0c <HAL_RCC_OscConfig+0x5f0>
 8007b2e:	e014      	b.n	8007b5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b30:	f7f9 fd76 	bl	8001620 <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b36:	e00a      	b.n	8007b4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b38:	f7f9 fd72 	bl	8001620 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e138      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b4e:	4b4e      	ldr	r3, [pc, #312]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1ee      	bne.n	8007b38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 812d 	beq.w	8007dbe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b64:	4b48      	ldr	r3, [pc, #288]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b6c:	2b18      	cmp	r3, #24
 8007b6e:	f000 80bd 	beq.w	8007cec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	f040 809e 	bne.w	8007cb8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7c:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a41      	ldr	r2, [pc, #260]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7f9 fd4a 	bl	8001620 <HAL_GetTick>
 8007b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b90:	f7f9 fd46 	bl	8001620 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e10e      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ba2:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bae:	4b36      	ldr	r3, [pc, #216]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bb2:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <HAL_RCC_OscConfig+0x774>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bbe:	0112      	lsls	r2, r2, #4
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	4931      	ldr	r1, [pc, #196]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	061b      	lsls	r3, r3, #24
 8007bf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bf8:	4923      	ldr	r1, [pc, #140]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007bfe:	4b22      	ldr	r3, [pc, #136]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c0a:	4b1f      	ldr	r3, [pc, #124]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c0e:	4b21      	ldr	r3, [pc, #132]	; (8007c94 <HAL_RCC_OscConfig+0x778>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c16:	00d2      	lsls	r2, r2, #3
 8007c18:	491b      	ldr	r1, [pc, #108]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c1e:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f023 020c 	bic.w	r2, r3, #12
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	4917      	ldr	r1, [pc, #92]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c30:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f023 0202 	bic.w	r2, r3, #2
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3c:	4912      	ldr	r1, [pc, #72]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c42:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	4a10      	ldr	r2, [pc, #64]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4e:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	4a0d      	ldr	r2, [pc, #52]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	4a0a      	ldr	r2, [pc, #40]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007c66:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c6c:	f043 0301 	orr.w	r3, r3, #1
 8007c70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <HAL_RCC_OscConfig+0x76c>)
 8007c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c7e:	f7f9 fccf 	bl	8001620 <HAL_GetTick>
 8007c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c84:	e011      	b.n	8007caa <HAL_RCC_OscConfig+0x78e>
 8007c86:	bf00      	nop
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	58024800 	.word	0x58024800
 8007c90:	fffffc0c 	.word	0xfffffc0c
 8007c94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c98:	f7f9 fcc2 	bl	8001620 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e08a      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007caa:	4b47      	ldr	r3, [pc, #284]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <HAL_RCC_OscConfig+0x77c>
 8007cb6:	e082      	b.n	8007dbe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb8:	4b43      	ldr	r3, [pc, #268]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a42      	ldr	r2, [pc, #264]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc4:	f7f9 fcac 	bl	8001620 <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ccc:	f7f9 fca8 	bl	8001620 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e070      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cde:	4b3a      	ldr	r3, [pc, #232]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1f0      	bne.n	8007ccc <HAL_RCC_OscConfig+0x7b0>
 8007cea:	e068      	b.n	8007dbe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007cec:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cf2:	4b35      	ldr	r3, [pc, #212]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d031      	beq.n	8007d64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f003 0203 	and.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d12a      	bne.n	8007d64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	091b      	lsrs	r3, r3, #4
 8007d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d122      	bne.n	8007d64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d11a      	bne.n	8007d64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	0a5b      	lsrs	r3, r3, #9
 8007d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d111      	bne.n	8007d64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d108      	bne.n	8007d64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	0e1b      	lsrs	r3, r3, #24
 8007d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e02b      	b.n	8007dc0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007d68:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6c:	08db      	lsrs	r3, r3, #3
 8007d6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d01f      	beq.n	8007dbe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	4a11      	ldr	r2, [pc, #68]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d8a:	f7f9 fc49 	bl	8001620 <HAL_GetTick>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007d90:	bf00      	nop
 8007d92:	f7f9 fc45 	bl	8001620 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d0f9      	beq.n	8007d92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <HAL_RCC_OscConfig+0x8b0>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007daa:	00d2      	lsls	r2, r2, #3
 8007dac:	4906      	ldr	r1, [pc, #24]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	4a04      	ldr	r2, [pc, #16]	; (8007dc8 <HAL_RCC_OscConfig+0x8ac>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3730      	adds	r7, #48	; 0x30
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	58024400 	.word	0x58024400
 8007dcc:	ffff0007 	.word	0xffff0007

08007dd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e19c      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007de4:	4b8a      	ldr	r3, [pc, #552]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d910      	bls.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b87      	ldr	r3, [pc, #540]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 020f 	bic.w	r2, r3, #15
 8007dfa:	4985      	ldr	r1, [pc, #532]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e02:	4b83      	ldr	r3, [pc, #524]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e184      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d010      	beq.n	8007e42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d908      	bls.n	8007e42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e30:	4b78      	ldr	r3, [pc, #480]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	4975      	ldr	r1, [pc, #468]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0308 	and.w	r3, r3, #8
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d010      	beq.n	8007e70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	4b70      	ldr	r3, [pc, #448]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d908      	bls.n	8007e70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e5e:	4b6d      	ldr	r3, [pc, #436]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	496a      	ldr	r1, [pc, #424]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d010      	beq.n	8007e9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	4b64      	ldr	r3, [pc, #400]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d908      	bls.n	8007e9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e8c:	4b61      	ldr	r3, [pc, #388]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	495e      	ldr	r1, [pc, #376]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d010      	beq.n	8007ecc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	4b59      	ldr	r3, [pc, #356]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d908      	bls.n	8007ecc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007eba:	4b56      	ldr	r3, [pc, #344]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	4953      	ldr	r1, [pc, #332]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d010      	beq.n	8007efa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	4b4d      	ldr	r3, [pc, #308]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d908      	bls.n	8007efa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ee8:	4b4a      	ldr	r3, [pc, #296]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	f023 020f 	bic.w	r2, r3, #15
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	4947      	ldr	r1, [pc, #284]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d055      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f06:	4b43      	ldr	r3, [pc, #268]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	4940      	ldr	r1, [pc, #256]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f20:	4b3c      	ldr	r3, [pc, #240]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d121      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e0f6      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d107      	bne.n	8007f48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f38:	4b36      	ldr	r3, [pc, #216]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d115      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0ea      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d107      	bne.n	8007f60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f50:	4b30      	ldr	r3, [pc, #192]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d109      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e0de      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f60:	4b2c      	ldr	r3, [pc, #176]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e0d6      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f023 0207 	bic.w	r2, r3, #7
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	4925      	ldr	r1, [pc, #148]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f82:	f7f9 fb4d 	bl	8001620 <HAL_GetTick>
 8007f86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f88:	e00a      	b.n	8007fa0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8a:	f7f9 fb49 	bl	8001620 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d901      	bls.n	8007fa0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e0be      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa0:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d1eb      	bne.n	8007f8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d010      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	4b14      	ldr	r3, [pc, #80]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d208      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f023 020f 	bic.w	r2, r3, #15
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	490e      	ldr	r1, [pc, #56]	; (8008014 <HAL_RCC_ClockConfig+0x244>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d214      	bcs.n	8008018 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fee:	4b08      	ldr	r3, [pc, #32]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f023 020f 	bic.w	r2, r3, #15
 8007ff6:	4906      	ldr	r1, [pc, #24]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ffe:	4b04      	ldr	r3, [pc, #16]	; (8008010 <HAL_RCC_ClockConfig+0x240>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d005      	beq.n	8008018 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e086      	b.n	800811e <HAL_RCC_ClockConfig+0x34e>
 8008010:	52002000 	.word	0x52002000
 8008014:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	4b3f      	ldr	r3, [pc, #252]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008030:	429a      	cmp	r2, r3
 8008032:	d208      	bcs.n	8008046 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008034:	4b3c      	ldr	r3, [pc, #240]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	4939      	ldr	r1, [pc, #228]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008042:	4313      	orrs	r3, r2
 8008044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d010      	beq.n	8008074 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	4b34      	ldr	r3, [pc, #208]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800805e:	429a      	cmp	r2, r3
 8008060:	d208      	bcs.n	8008074 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008062:	4b31      	ldr	r3, [pc, #196]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	492e      	ldr	r1, [pc, #184]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008070:	4313      	orrs	r3, r2
 8008072:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d010      	beq.n	80080a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	4b28      	ldr	r3, [pc, #160]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800808c:	429a      	cmp	r2, r3
 800808e:	d208      	bcs.n	80080a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008090:	4b25      	ldr	r3, [pc, #148]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	4922      	ldr	r1, [pc, #136]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d010      	beq.n	80080d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69da      	ldr	r2, [r3, #28]
 80080b2:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d208      	bcs.n	80080d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080be:	4b1a      	ldr	r3, [pc, #104]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	4917      	ldr	r1, [pc, #92]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80080d0:	f000 f834 	bl	800813c <HAL_RCC_GetSysClockFreq>
 80080d4:	4602      	mov	r2, r0
 80080d6:	4b14      	ldr	r3, [pc, #80]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	4912      	ldr	r1, [pc, #72]	; (800812c <HAL_RCC_ClockConfig+0x35c>)
 80080e2:	5ccb      	ldrb	r3, [r1, r3]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <HAL_RCC_ClockConfig+0x358>)
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	4a0d      	ldr	r2, [pc, #52]	; (800812c <HAL_RCC_ClockConfig+0x35c>)
 80080f8:	5cd3      	ldrb	r3, [r2, r3]
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	fa22 f303 	lsr.w	r3, r2, r3
 8008104:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <HAL_RCC_ClockConfig+0x360>)
 8008106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008108:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <HAL_RCC_ClockConfig+0x364>)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <HAL_RCC_ClockConfig+0x368>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7f8 ff12 	bl	8000f3c <HAL_InitTick>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	08012ee0 	.word	0x08012ee0
 8008130:	24000004 	.word	0x24000004
 8008134:	24000000 	.word	0x24000000
 8008138:	24000008 	.word	0x24000008

0800813c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800813c:	b480      	push	{r7}
 800813e:	b089      	sub	sp, #36	; 0x24
 8008140:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008142:	4bb3      	ldr	r3, [pc, #716]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800814a:	2b18      	cmp	r3, #24
 800814c:	f200 8155 	bhi.w	80083fa <HAL_RCC_GetSysClockFreq+0x2be>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	080081bd 	.word	0x080081bd
 800815c:	080083fb 	.word	0x080083fb
 8008160:	080083fb 	.word	0x080083fb
 8008164:	080083fb 	.word	0x080083fb
 8008168:	080083fb 	.word	0x080083fb
 800816c:	080083fb 	.word	0x080083fb
 8008170:	080083fb 	.word	0x080083fb
 8008174:	080083fb 	.word	0x080083fb
 8008178:	080081e3 	.word	0x080081e3
 800817c:	080083fb 	.word	0x080083fb
 8008180:	080083fb 	.word	0x080083fb
 8008184:	080083fb 	.word	0x080083fb
 8008188:	080083fb 	.word	0x080083fb
 800818c:	080083fb 	.word	0x080083fb
 8008190:	080083fb 	.word	0x080083fb
 8008194:	080083fb 	.word	0x080083fb
 8008198:	080081e9 	.word	0x080081e9
 800819c:	080083fb 	.word	0x080083fb
 80081a0:	080083fb 	.word	0x080083fb
 80081a4:	080083fb 	.word	0x080083fb
 80081a8:	080083fb 	.word	0x080083fb
 80081ac:	080083fb 	.word	0x080083fb
 80081b0:	080083fb 	.word	0x080083fb
 80081b4:	080083fb 	.word	0x080083fb
 80081b8:	080081ef 	.word	0x080081ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081bc:	4b94      	ldr	r3, [pc, #592]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081c8:	4b91      	ldr	r3, [pc, #580]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	08db      	lsrs	r3, r3, #3
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	4a90      	ldr	r2, [pc, #576]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081d4:	fa22 f303 	lsr.w	r3, r2, r3
 80081d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80081da:	e111      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80081dc:	4b8d      	ldr	r3, [pc, #564]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081de:	61bb      	str	r3, [r7, #24]
      break;
 80081e0:	e10e      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80081e2:	4b8d      	ldr	r3, [pc, #564]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081e4:	61bb      	str	r3, [r7, #24]
      break;
 80081e6:	e10b      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80081e8:	4b8c      	ldr	r3, [pc, #560]	; (800841c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081ea:	61bb      	str	r3, [r7, #24]
      break;
 80081ec:	e108      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081ee:	4b88      	ldr	r3, [pc, #544]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80081f8:	4b85      	ldr	r3, [pc, #532]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008202:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008204:	4b82      	ldr	r3, [pc, #520]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800820e:	4b80      	ldr	r3, [pc, #512]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008212:	08db      	lsrs	r3, r3, #3
 8008214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	fb02 f303 	mul.w	r3, r2, r3
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 80e1 	beq.w	80083f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b02      	cmp	r3, #2
 8008236:	f000 8083 	beq.w	8008340 <HAL_RCC_GetSysClockFreq+0x204>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b02      	cmp	r3, #2
 800823e:	f200 80a1 	bhi.w	8008384 <HAL_RCC_GetSysClockFreq+0x248>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_RCC_GetSysClockFreq+0x114>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d056      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800824e:	e099      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008250:	4b6f      	ldr	r3, [pc, #444]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d02d      	beq.n	80082b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800825c:	4b6c      	ldr	r3, [pc, #432]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	08db      	lsrs	r3, r3, #3
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	4a6b      	ldr	r2, [pc, #428]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
 800826c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008286:	4b62      	ldr	r3, [pc, #392]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008296:	ed97 6a02 	vldr	s12, [r7, #8]
 800829a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008420 <HAL_RCC_GetSysClockFreq+0x2e4>
 800829e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80082b6:	e087      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e8>
 80082c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ca:	4b51      	ldr	r3, [pc, #324]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082da:	ed97 6a02 	vldr	s12, [r7, #8]
 80082de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008420 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082fa:	e065      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008428 <HAL_RCC_GetSysClockFreq+0x2ec>
 800830a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830e:	4b40      	ldr	r3, [pc, #256]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008322:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008420 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800833e:	e043      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800842c <HAL_RCC_GetSysClockFreq+0x2f0>
 800834e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008352:	4b2f      	ldr	r3, [pc, #188]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008362:	ed97 6a02 	vldr	s12, [r7, #8]
 8008366:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008420 <HAL_RCC_GetSysClockFreq+0x2e4>
 800836a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008382:	e021      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008428 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008396:	4b1e      	ldr	r3, [pc, #120]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008420 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	0a5b      	lsrs	r3, r3, #9
 80083ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d2:	3301      	adds	r3, #1
 80083d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ec:	ee17 3a90 	vmov	r3, s15
 80083f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80083f2:	e005      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	61bb      	str	r3, [r7, #24]
      break;
 80083f8:	e002      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083fc:	61bb      	str	r3, [r7, #24]
      break;
 80083fe:	bf00      	nop
  }

  return sysclockfreq;
 8008400:	69bb      	ldr	r3, [r7, #24]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3724      	adds	r7, #36	; 0x24
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	58024400 	.word	0x58024400
 8008414:	03d09000 	.word	0x03d09000
 8008418:	003d0900 	.word	0x003d0900
 800841c:	017d7840 	.word	0x017d7840
 8008420:	46000000 	.word	0x46000000
 8008424:	4c742400 	.word	0x4c742400
 8008428:	4a742400 	.word	0x4a742400
 800842c:	4bbebc20 	.word	0x4bbebc20

08008430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008436:	f7ff fe81 	bl	800813c <HAL_RCC_GetSysClockFreq>
 800843a:	4602      	mov	r2, r0
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <HAL_RCC_GetHCLKFreq+0x50>)
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	0a1b      	lsrs	r3, r3, #8
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	490f      	ldr	r1, [pc, #60]	; (8008484 <HAL_RCC_GetHCLKFreq+0x54>)
 8008448:	5ccb      	ldrb	r3, [r1, r3]
 800844a:	f003 031f 	and.w	r3, r3, #31
 800844e:	fa22 f303 	lsr.w	r3, r2, r3
 8008452:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <HAL_RCC_GetHCLKFreq+0x50>)
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	4a09      	ldr	r2, [pc, #36]	; (8008484 <HAL_RCC_GetHCLKFreq+0x54>)
 800845e:	5cd3      	ldrb	r3, [r2, r3]
 8008460:	f003 031f 	and.w	r3, r3, #31
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	fa22 f303 	lsr.w	r3, r2, r3
 800846a:	4a07      	ldr	r2, [pc, #28]	; (8008488 <HAL_RCC_GetHCLKFreq+0x58>)
 800846c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800846e:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008474:	4b04      	ldr	r3, [pc, #16]	; (8008488 <HAL_RCC_GetHCLKFreq+0x58>)
 8008476:	681b      	ldr	r3, [r3, #0]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	58024400 	.word	0x58024400
 8008484:	08012ee0 	.word	0x08012ee0
 8008488:	24000004 	.word	0x24000004
 800848c:	24000000 	.word	0x24000000

08008490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008494:	f7ff ffcc 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 8008498:	4602      	mov	r2, r0
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	091b      	lsrs	r3, r3, #4
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	4904      	ldr	r1, [pc, #16]	; (80084b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80084a6:	5ccb      	ldrb	r3, [r1, r3]
 80084a8:	f003 031f 	and.w	r3, r3, #31
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	58024400 	.word	0x58024400
 80084b8:	08012ee0 	.word	0x08012ee0

080084bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	223f      	movs	r2, #63	; 0x3f
 80084ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084cc:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0207 	and.w	r2, r3, #7
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80084d8:	4b17      	ldr	r3, [pc, #92]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80084e4:	4b14      	ldr	r3, [pc, #80]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80084f0:	4b11      	ldr	r3, [pc, #68]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80084fc:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008508:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <HAL_RCC_GetClockConfig+0x7c>)
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <HAL_RCC_GetClockConfig+0x80>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 020f 	and.w	r2, r3, #15
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	601a      	str	r2, [r3, #0]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	58024400 	.word	0x58024400
 800853c:	52002000 	.word	0x52002000

08008540 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008544:	b0ca      	sub	sp, #296	; 0x128
 8008546:	af00      	add	r7, sp, #0
 8008548:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008552:	2300      	movs	r3, #0
 8008554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008564:	2500      	movs	r5, #0
 8008566:	ea54 0305 	orrs.w	r3, r4, r5
 800856a:	d049      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008576:	d02f      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008578:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800857c:	d828      	bhi.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800857e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008582:	d01a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008588:	d822      	bhi.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800858e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008592:	d007      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008594:	e01c      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008596:	4bb8      	ldr	r3, [pc, #736]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	4ab7      	ldr	r2, [pc, #732]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800859c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085a2:	e01a      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a8:	3308      	adds	r3, #8
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 fb61 	bl	800ac74 <RCCEx_PLL2_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085b8:	e00f      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085be:	3328      	adds	r3, #40	; 0x28
 80085c0:	2102      	movs	r1, #2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f002 fc08 	bl	800add8 <RCCEx_PLL3_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085ce:	e004      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085d6:	e000      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80085d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085e2:	4ba5      	ldr	r3, [pc, #660]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f0:	4aa1      	ldr	r2, [pc, #644]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085f2:	430b      	orrs	r3, r1
 80085f4:	6513      	str	r3, [r2, #80]	; 0x50
 80085f6:	e003      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800860c:	f04f 0900 	mov.w	r9, #0
 8008610:	ea58 0309 	orrs.w	r3, r8, r9
 8008614:	d047      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861c:	2b04      	cmp	r3, #4
 800861e:	d82a      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800863d 	.word	0x0800863d
 800862c:	0800864b 	.word	0x0800864b
 8008630:	08008661 	.word	0x08008661
 8008634:	0800867f 	.word	0x0800867f
 8008638:	0800867f 	.word	0x0800867f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863c:	4b8e      	ldr	r3, [pc, #568]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a8d      	ldr	r2, [pc, #564]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008648:	e01a      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864e:	3308      	adds	r3, #8
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f002 fb0e 	bl	800ac74 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800865e:	e00f      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008664:	3328      	adds	r3, #40	; 0x28
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f002 fbb5 	bl	800add8 <RCCEx_PLL3_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008674:	e004      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800867c:	e000      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800867e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008688:	4b7b      	ldr	r3, [pc, #492]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	f023 0107 	bic.w	r1, r3, #7
 8008690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008696:	4a78      	ldr	r2, [pc, #480]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008698:	430b      	orrs	r3, r1
 800869a:	6513      	str	r3, [r2, #80]	; 0x50
 800869c:	e003      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80086a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80086b2:	f04f 0b00 	mov.w	fp, #0
 80086b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80086ba:	d04c      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80086bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c6:	d030      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80086c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086cc:	d829      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086ce:	2bc0      	cmp	r3, #192	; 0xc0
 80086d0:	d02d      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80086d2:	2bc0      	cmp	r3, #192	; 0xc0
 80086d4:	d825      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d018      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80086da:	2b80      	cmp	r3, #128	; 0x80
 80086dc:	d821      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80086e2:	2b40      	cmp	r3, #64	; 0x40
 80086e4:	d007      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80086e6:	e01c      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e8:	4b63      	ldr	r3, [pc, #396]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a62      	ldr	r2, [pc, #392]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086f4:	e01c      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fa:	3308      	adds	r3, #8
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f002 fab8 	bl	800ac74 <RCCEx_PLL2_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800870a:	e011      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008710:	3328      	adds	r3, #40	; 0x28
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f002 fb5f 	bl	800add8 <RCCEx_PLL3_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008720:	e006      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008728:	e002      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800872e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008738:	4b4f      	ldr	r3, [pc, #316]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800873a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008746:	4a4c      	ldr	r2, [pc, #304]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008748:	430b      	orrs	r3, r1
 800874a:	6513      	str	r3, [r2, #80]	; 0x50
 800874c:	e003      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008762:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800876c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d053      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800877e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008782:	d035      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008788:	d82e      	bhi.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800878a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800878e:	d031      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008790:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008794:	d828      	bhi.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800879a:	d01a      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800879c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087a0:	d822      	bhi.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80087a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087aa:	d007      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80087ac:	e01c      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ae:	4b32      	ldr	r3, [pc, #200]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	4a31      	ldr	r2, [pc, #196]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087ba:	e01c      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c0:	3308      	adds	r3, #8
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f002 fa55 	bl	800ac74 <RCCEx_PLL2_Config>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087d0:	e011      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d6:	3328      	adds	r3, #40	; 0x28
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fafc 	bl	800add8 <RCCEx_PLL3_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087e6:	e006      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087ee:	e002      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087f0:	bf00      	nop
 80087f2:	e000      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10b      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087fe:	4b1e      	ldr	r3, [pc, #120]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008802:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800880e:	4a1a      	ldr	r2, [pc, #104]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008810:	430b      	orrs	r3, r1
 8008812:	6593      	str	r3, [r2, #88]	; 0x58
 8008814:	e003      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800881a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800882a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800882e:	2300      	movs	r3, #0
 8008830:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008834:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008838:	460b      	mov	r3, r1
 800883a:	4313      	orrs	r3, r2
 800883c:	d056      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800884a:	d038      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800884c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008850:	d831      	bhi.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008856:	d034      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800885c:	d82b      	bhi.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800885e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008862:	d01d      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008868:	d825      	bhi.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800886e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008872:	d00a      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008874:	e01f      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800887c:	4ba2      	ldr	r3, [pc, #648]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	4aa1      	ldr	r2, [pc, #644]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008888:	e01c      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888e:	3308      	adds	r3, #8
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f002 f9ee 	bl	800ac74 <RCCEx_PLL2_Config>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800889e:	e011      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a4:	3328      	adds	r3, #40	; 0x28
 80088a6:	2100      	movs	r1, #0
 80088a8:	4618      	mov	r0, r3
 80088aa:	f002 fa95 	bl	800add8 <RCCEx_PLL3_Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088b4:	e006      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088bc:	e002      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088be:	bf00      	nop
 80088c0:	e000      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10b      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088cc:	4b8e      	ldr	r3, [pc, #568]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80088d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088dc:	4a8a      	ldr	r2, [pc, #552]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088de:	430b      	orrs	r3, r1
 80088e0:	6593      	str	r3, [r2, #88]	; 0x58
 80088e2:	e003      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80088f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008902:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008906:	460b      	mov	r3, r1
 8008908:	4313      	orrs	r3, r2
 800890a:	d03a      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008912:	2b30      	cmp	r3, #48	; 0x30
 8008914:	d01f      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008916:	2b30      	cmp	r3, #48	; 0x30
 8008918:	d819      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800891a:	2b20      	cmp	r3, #32
 800891c:	d00c      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800891e:	2b20      	cmp	r3, #32
 8008920:	d815      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d019      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008926:	2b10      	cmp	r3, #16
 8008928:	d111      	bne.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800892a:	4b77      	ldr	r3, [pc, #476]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	4a76      	ldr	r2, [pc, #472]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008934:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008936:	e011      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893c:	3308      	adds	r3, #8
 800893e:	2102      	movs	r1, #2
 8008940:	4618      	mov	r0, r3
 8008942:	f002 f997 	bl	800ac74 <RCCEx_PLL2_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800894c:	e006      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008954:	e002      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800895a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008964:	4b68      	ldr	r3, [pc, #416]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008968:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008972:	4a65      	ldr	r2, [pc, #404]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008974:	430b      	orrs	r3, r1
 8008976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008978:	e003      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800897e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800898e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008992:	2300      	movs	r3, #0
 8008994:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008998:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800899c:	460b      	mov	r3, r1
 800899e:	4313      	orrs	r3, r2
 80089a0:	d051      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ac:	d035      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80089ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089b2:	d82e      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089b8:	d031      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80089ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089be:	d828      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c4:	d01a      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80089c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ca:	d822      	bhi.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80089d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d4:	d007      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80089d6:	e01c      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d8:	4b4b      	ldr	r3, [pc, #300]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	4a4a      	ldr	r2, [pc, #296]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089e4:	e01c      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ea:	3308      	adds	r3, #8
 80089ec:	2100      	movs	r1, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f002 f940 	bl	800ac74 <RCCEx_PLL2_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089fa:	e011      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a00:	3328      	adds	r3, #40	; 0x28
 8008a02:	2100      	movs	r1, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f002 f9e7 	bl	800add8 <RCCEx_PLL3_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a10:	e006      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a18:	e002      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a28:	4b37      	ldr	r3, [pc, #220]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a36:	4a34      	ldr	r2, [pc, #208]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8008a3c:	e003      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d056      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a70:	d033      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a76:	d82c      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a7c:	d02f      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a82:	d826      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a88:	d02b      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008a8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a8e:	d820      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a94:	d012      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a9a:	d81a      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d022      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa4:	d115      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aaa:	3308      	adds	r3, #8
 8008aac:	2101      	movs	r1, #1
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f002 f8e0 	bl	800ac74 <RCCEx_PLL2_Config>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008aba:	e015      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac0:	3328      	adds	r3, #40	; 0x28
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 f987 	bl	800add8 <RCCEx_PLL3_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ad0:	e00a      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ad8:	e006      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ada:	bf00      	nop
 8008adc:	e004      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ade:	bf00      	nop
 8008ae0:	e002      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ae2:	bf00      	nop
 8008ae4:	e000      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10d      	bne.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008af0:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008afe:	4a02      	ldr	r2, [pc, #8]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6513      	str	r3, [r2, #80]	; 0x50
 8008b04:	e006      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b24:	2300      	movs	r3, #0
 8008b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4313      	orrs	r3, r2
 8008b32:	d055      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b40:	d033      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b46:	d82c      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4c:	d02f      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b52:	d826      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b58:	d02b      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b5e:	d820      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b64:	d012      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b6a:	d81a      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d022      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b74:	d115      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f002 f878 	bl	800ac74 <RCCEx_PLL2_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b8a:	e015      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	3328      	adds	r3, #40	; 0x28
 8008b92:	2101      	movs	r1, #1
 8008b94:	4618      	mov	r0, r3
 8008b96:	f002 f91f 	bl	800add8 <RCCEx_PLL3_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ba0:	e00a      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ba8:	e006      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008baa:	bf00      	nop
 8008bac:	e004      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bae:	bf00      	nop
 8008bb0:	e002      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bb2:	bf00      	nop
 8008bb4:	e000      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bc0:	4ba3      	ldr	r3, [pc, #652]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bd0:	4a9f      	ldr	r2, [pc, #636]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8008bd6:	e003      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d037      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0a:	d00e      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c10:	d816      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d018      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c1a:	d111      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1c:	4b8c      	ldr	r3, [pc, #560]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	4a8b      	ldr	r2, [pc, #556]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c28:	e00f      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2e:	3308      	adds	r3, #8
 8008c30:	2101      	movs	r1, #1
 8008c32:	4618      	mov	r0, r3
 8008c34:	f002 f81e 	bl	800ac74 <RCCEx_PLL2_Config>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c46:	e000      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c52:	4b7f      	ldr	r3, [pc, #508]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c60:	4a7b      	ldr	r2, [pc, #492]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c62:	430b      	orrs	r3, r1
 8008c64:	6513      	str	r3, [r2, #80]	; 0x50
 8008c66:	e003      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	d039      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d81c      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008c9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cb1 	.word	0x08008cb1
 8008ca8:	08008cbf 	.word	0x08008cbf
 8008cac:	08008cdd 	.word	0x08008cdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb0:	4b67      	ldr	r3, [pc, #412]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4a66      	ldr	r2, [pc, #408]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cbc:	e00f      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	2102      	movs	r1, #2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 ffd4 	bl	800ac74 <RCCEx_PLL2_Config>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cd2:	e004      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cda:	e000      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ce6:	4b5a      	ldr	r3, [pc, #360]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cea:	f023 0103 	bic.w	r1, r3, #3
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cf4:	4a56      	ldr	r2, [pc, #344]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cfa:	e003      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f000 809f 	beq.w	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d26:	4b4b      	ldr	r3, [pc, #300]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a4a      	ldr	r2, [pc, #296]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d32:	f7f8 fc75 	bl	8001620 <HAL_GetTick>
 8008d36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d3a:	e00b      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d3c:	f7f8 fc70 	bl	8001620 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b64      	cmp	r3, #100	; 0x64
 8008d4a:	d903      	bls.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d52:	e005      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d54:	4b3f      	ldr	r3, [pc, #252]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ed      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d179      	bne.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d68:	4b39      	ldr	r3, [pc, #228]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d74:	4053      	eors	r3, r2
 8008d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d015      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d7e:	4b34      	ldr	r3, [pc, #208]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d8a:	4b31      	ldr	r3, [pc, #196]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8e:	4a30      	ldr	r2, [pc, #192]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d96:	4b2e      	ldr	r3, [pc, #184]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9a:	4a2d      	ldr	r2, [pc, #180]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008da0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008da2:	4a2b      	ldr	r2, [pc, #172]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008da8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db6:	d118      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7f8 fc32 	bl	8001620 <HAL_GetTick>
 8008dbc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dc0:	e00d      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc2:	f7f8 fc2d 	bl	8001620 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d903      	bls.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008ddc:	e005      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dde:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0eb      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d129      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e02:	d10e      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e14:	091a      	lsrs	r2, r3, #4
 8008e16:	4b10      	ldr	r3, [pc, #64]	; (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	4a0d      	ldr	r2, [pc, #52]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6113      	str	r3, [r2, #16]
 8008e20:	e005      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e2c:	6113      	str	r3, [r2, #16]
 8008e2e:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e3e:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e40:	430b      	orrs	r3, r1
 8008e42:	6713      	str	r3, [r2, #112]	; 0x70
 8008e44:	e00e      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008e4e:	e009      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008e50:	58024400 	.word	0x58024400
 8008e54:	58024800 	.word	0x58024800
 8008e58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f002 0301 	and.w	r3, r2, #1
 8008e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f000 8089 	beq.w	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e8c:	2b28      	cmp	r3, #40	; 0x28
 8008e8e:	d86b      	bhi.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008f71 	.word	0x08008f71
 8008e9c:	08008f69 	.word	0x08008f69
 8008ea0:	08008f69 	.word	0x08008f69
 8008ea4:	08008f69 	.word	0x08008f69
 8008ea8:	08008f69 	.word	0x08008f69
 8008eac:	08008f69 	.word	0x08008f69
 8008eb0:	08008f69 	.word	0x08008f69
 8008eb4:	08008f69 	.word	0x08008f69
 8008eb8:	08008f3d 	.word	0x08008f3d
 8008ebc:	08008f69 	.word	0x08008f69
 8008ec0:	08008f69 	.word	0x08008f69
 8008ec4:	08008f69 	.word	0x08008f69
 8008ec8:	08008f69 	.word	0x08008f69
 8008ecc:	08008f69 	.word	0x08008f69
 8008ed0:	08008f69 	.word	0x08008f69
 8008ed4:	08008f69 	.word	0x08008f69
 8008ed8:	08008f53 	.word	0x08008f53
 8008edc:	08008f69 	.word	0x08008f69
 8008ee0:	08008f69 	.word	0x08008f69
 8008ee4:	08008f69 	.word	0x08008f69
 8008ee8:	08008f69 	.word	0x08008f69
 8008eec:	08008f69 	.word	0x08008f69
 8008ef0:	08008f69 	.word	0x08008f69
 8008ef4:	08008f69 	.word	0x08008f69
 8008ef8:	08008f71 	.word	0x08008f71
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	08008f69 	.word	0x08008f69
 8008f04:	08008f69 	.word	0x08008f69
 8008f08:	08008f69 	.word	0x08008f69
 8008f0c:	08008f69 	.word	0x08008f69
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	08008f69 	.word	0x08008f69
 8008f18:	08008f71 	.word	0x08008f71
 8008f1c:	08008f69 	.word	0x08008f69
 8008f20:	08008f69 	.word	0x08008f69
 8008f24:	08008f69 	.word	0x08008f69
 8008f28:	08008f69 	.word	0x08008f69
 8008f2c:	08008f69 	.word	0x08008f69
 8008f30:	08008f69 	.word	0x08008f69
 8008f34:	08008f69 	.word	0x08008f69
 8008f38:	08008f71 	.word	0x08008f71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f40:	3308      	adds	r3, #8
 8008f42:	2101      	movs	r1, #1
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 fe95 	bl	800ac74 <RCCEx_PLL2_Config>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f50:	e00f      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f56:	3328      	adds	r3, #40	; 0x28
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f001 ff3c 	bl	800add8 <RCCEx_PLL3_Config>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f66:	e004      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f6e:	e000      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f7a:	4bbf      	ldr	r3, [pc, #764]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f88:	4abb      	ldr	r2, [pc, #748]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	6553      	str	r3, [r2, #84]	; 0x54
 8008f8e:	e003      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	f002 0302 	and.w	r3, r2, #2
 8008fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008fae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	d041      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fbe:	2b05      	cmp	r3, #5
 8008fc0:	d824      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008fc2:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08009015 	.word	0x08009015
 8008fcc:	08008fe1 	.word	0x08008fe1
 8008fd0:	08008ff7 	.word	0x08008ff7
 8008fd4:	08009015 	.word	0x08009015
 8008fd8:	08009015 	.word	0x08009015
 8008fdc:	08009015 	.word	0x08009015
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 fe43 	bl	800ac74 <RCCEx_PLL2_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ff4:	e00f      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	3328      	adds	r3, #40	; 0x28
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 feea 	bl	800add8 <RCCEx_PLL3_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800900a:	e004      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009012:	e000      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800901e:	4b96      	ldr	r3, [pc, #600]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009022:	f023 0107 	bic.w	r1, r3, #7
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902c:	4a92      	ldr	r2, [pc, #584]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800902e:	430b      	orrs	r3, r1
 8009030:	6553      	str	r3, [r2, #84]	; 0x54
 8009032:	e003      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f002 0304 	and.w	r3, r2, #4
 8009048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800904c:	2300      	movs	r3, #0
 800904e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009052:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009056:	460b      	mov	r3, r1
 8009058:	4313      	orrs	r3, r2
 800905a:	d044      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009064:	2b05      	cmp	r3, #5
 8009066:	d825      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	080090bd 	.word	0x080090bd
 8009074:	08009089 	.word	0x08009089
 8009078:	0800909f 	.word	0x0800909f
 800907c:	080090bd 	.word	0x080090bd
 8009080:	080090bd 	.word	0x080090bd
 8009084:	080090bd 	.word	0x080090bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	3308      	adds	r3, #8
 800908e:	2101      	movs	r1, #1
 8009090:	4618      	mov	r0, r3
 8009092:	f001 fdef 	bl	800ac74 <RCCEx_PLL2_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800909c:	e00f      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a2:	3328      	adds	r3, #40	; 0x28
 80090a4:	2101      	movs	r1, #1
 80090a6:	4618      	mov	r0, r3
 80090a8:	f001 fe96 	bl	800add8 <RCCEx_PLL3_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090b2:	e004      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80090bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090c6:	4b6c      	ldr	r3, [pc, #432]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ca:	f023 0107 	bic.w	r1, r3, #7
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090d6:	4a68      	ldr	r2, [pc, #416]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090d8:	430b      	orrs	r3, r1
 80090da:	6593      	str	r3, [r2, #88]	; 0x58
 80090dc:	e003      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f002 0320 	and.w	r3, r2, #32
 80090f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090f6:	2300      	movs	r3, #0
 80090f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009100:	460b      	mov	r3, r1
 8009102:	4313      	orrs	r3, r2
 8009104:	d055      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009112:	d033      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009118:	d82c      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d02f      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009124:	d826      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800912a:	d02b      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800912c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009130:	d820      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009136:	d012      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913c:	d81a      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d022      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009146:	d115      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914c:	3308      	adds	r3, #8
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f001 fd8f 	bl	800ac74 <RCCEx_PLL2_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800915c:	e015      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009162:	3328      	adds	r3, #40	; 0x28
 8009164:	2102      	movs	r1, #2
 8009166:	4618      	mov	r0, r3
 8009168:	f001 fe36 	bl	800add8 <RCCEx_PLL3_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009172:	e00a      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800917a:	e006      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800917c:	bf00      	nop
 800917e:	e004      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009180:	bf00      	nop
 8009182:	e002      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009184:	bf00      	nop
 8009186:	e000      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800918a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009192:	4b39      	ldr	r3, [pc, #228]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009196:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800919e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a2:	4a35      	ldr	r2, [pc, #212]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091a4:	430b      	orrs	r3, r1
 80091a6:	6553      	str	r3, [r2, #84]	; 0x54
 80091a8:	e003      	b.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80091be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091c2:	2300      	movs	r3, #0
 80091c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4313      	orrs	r3, r2
 80091d0:	d058      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80091de:	d033      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80091e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80091e4:	d82c      	bhi.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ea:	d02f      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80091ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f0:	d826      	bhi.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091f6:	d02b      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80091f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091fc:	d820      	bhi.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009202:	d012      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009208:	d81a      	bhi.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d022      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800920e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009212:	d115      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009218:	3308      	adds	r3, #8
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f001 fd29 	bl	800ac74 <RCCEx_PLL2_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009228:	e015      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922e:	3328      	adds	r3, #40	; 0x28
 8009230:	2102      	movs	r1, #2
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fdd0 	bl	800add8 <RCCEx_PLL3_Config>
 8009238:	4603      	mov	r3, r0
 800923a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800923e:	e00a      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009246:	e006      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009248:	bf00      	nop
 800924a:	e004      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800924c:	bf00      	nop
 800924e:	e002      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009250:	bf00      	nop
 8009252:	e000      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10e      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009262:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800926a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800926e:	4a02      	ldr	r2, [pc, #8]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009270:	430b      	orrs	r3, r1
 8009272:	6593      	str	r3, [r2, #88]	; 0x58
 8009274:	e006      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009276:	bf00      	nop
 8009278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009294:	2300      	movs	r3, #0
 8009296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800929a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800929e:	460b      	mov	r3, r1
 80092a0:	4313      	orrs	r3, r2
 80092a2:	d055      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80092a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80092b0:	d033      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80092b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80092b6:	d82c      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092bc:	d02f      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80092be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c2:	d826      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80092c8:	d02b      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80092ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80092ce:	d820      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092d4:	d012      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80092d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092da:	d81a      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d022      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80092e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092e4:	d115      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ea:	3308      	adds	r3, #8
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 fcc0 	bl	800ac74 <RCCEx_PLL2_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092fa:	e015      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	3328      	adds	r3, #40	; 0x28
 8009302:	2102      	movs	r1, #2
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fd67 	bl	800add8 <RCCEx_PLL3_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009310:	e00a      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009318:	e006      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800931a:	bf00      	nop
 800931c:	e004      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800931e:	bf00      	nop
 8009320:	e002      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009322:	bf00      	nop
 8009324:	e000      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10b      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009330:	4ba1      	ldr	r3, [pc, #644]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009334:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009340:	4a9d      	ldr	r2, [pc, #628]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009342:	430b      	orrs	r3, r1
 8009344:	6593      	str	r3, [r2, #88]	; 0x58
 8009346:	e003      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800934c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f002 0308 	and.w	r3, r2, #8
 800935c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009360:	2300      	movs	r3, #0
 8009362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009366:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800936a:	460b      	mov	r3, r1
 800936c:	4313      	orrs	r3, r2
 800936e:	d01e      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800937c:	d10c      	bne.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009382:	3328      	adds	r3, #40	; 0x28
 8009384:	2102      	movs	r1, #2
 8009386:	4618      	mov	r0, r3
 8009388:	f001 fd26 	bl	800add8 <RCCEx_PLL3_Config>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009398:	4b87      	ldr	r3, [pc, #540]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800939a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093a8:	4a83      	ldr	r2, [pc, #524]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093aa:	430b      	orrs	r3, r1
 80093ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f002 0310 	and.w	r3, r2, #16
 80093ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80093be:	2300      	movs	r3, #0
 80093c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80093c8:	460b      	mov	r3, r1
 80093ca:	4313      	orrs	r3, r2
 80093cc:	d01e      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093da:	d10c      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e0:	3328      	adds	r3, #40	; 0x28
 80093e2:	2102      	movs	r1, #2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fcf7 	bl	800add8 <RCCEx_PLL3_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093f6:	4b70      	ldr	r3, [pc, #448]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009406:	4a6c      	ldr	r2, [pc, #432]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009408:	430b      	orrs	r3, r1
 800940a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800940c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800941c:	2300      	movs	r3, #0
 800941e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009422:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009426:	460b      	mov	r3, r1
 8009428:	4313      	orrs	r3, r2
 800942a:	d03e      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009438:	d022      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800943a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800943e:	d81b      	bhi.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009448:	d00b      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800944a:	e015      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800944c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009450:	3308      	adds	r3, #8
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f001 fc0d 	bl	800ac74 <RCCEx_PLL2_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009460:	e00f      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009466:	3328      	adds	r3, #40	; 0x28
 8009468:	2102      	movs	r1, #2
 800946a:	4618      	mov	r0, r3
 800946c:	f001 fcb4 	bl	800add8 <RCCEx_PLL3_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009476:	e004      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800947e:	e000      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800948a:	4b4b      	ldr	r3, [pc, #300]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800949a:	4a47      	ldr	r2, [pc, #284]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6593      	str	r3, [r2, #88]	; 0x58
 80094a0:	e003      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80094b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80094b8:	2300      	movs	r3, #0
 80094ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80094c0:	460b      	mov	r3, r1
 80094c2:	4313      	orrs	r3, r2
 80094c4:	d03b      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094d2:	d01f      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80094d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094d8:	d818      	bhi.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80094da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094de:	d003      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80094e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094e4:	d007      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80094e6:	e011      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e8:	4b33      	ldr	r3, [pc, #204]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	4a32      	ldr	r2, [pc, #200]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80094f4:	e00f      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fa:	3328      	adds	r3, #40	; 0x28
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 fc6a 	bl	800add8 <RCCEx_PLL3_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800950a:	e004      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009512:	e000      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800951e:	4b26      	ldr	r3, [pc, #152]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009522:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800952a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952e:	4a22      	ldr	r2, [pc, #136]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009530:	430b      	orrs	r3, r1
 8009532:	6553      	str	r3, [r2, #84]	; 0x54
 8009534:	e003      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800953a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800953e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800954a:	673b      	str	r3, [r7, #112]	; 0x70
 800954c:	2300      	movs	r3, #0
 800954e:	677b      	str	r3, [r7, #116]	; 0x74
 8009550:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009554:	460b      	mov	r3, r1
 8009556:	4313      	orrs	r3, r2
 8009558:	d034      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009568:	d007      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800956a:	e011      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956c:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a11      	ldr	r2, [pc, #68]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009578:	e00e      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957e:	3308      	adds	r3, #8
 8009580:	2102      	movs	r1, #2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fb76 	bl	800ac74 <RCCEx_PLL2_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800958e:	e003      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10d      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ae:	4a02      	ldr	r2, [pc, #8]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095b0:	430b      	orrs	r3, r1
 80095b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80095b4:	e006      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80095b6:	bf00      	nop
 80095b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80095d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80095d2:	2300      	movs	r3, #0
 80095d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80095da:	460b      	mov	r3, r1
 80095dc:	4313      	orrs	r3, r2
 80095de:	d00c      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e4:	3328      	adds	r3, #40	; 0x28
 80095e6:	2102      	movs	r1, #2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 fbf5 	bl	800add8 <RCCEx_PLL3_Config>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009606:	663b      	str	r3, [r7, #96]	; 0x60
 8009608:	2300      	movs	r3, #0
 800960a:	667b      	str	r3, [r7, #100]	; 0x64
 800960c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009610:	460b      	mov	r3, r1
 8009612:	4313      	orrs	r3, r2
 8009614:	d038      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800961e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009622:	d018      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009628:	d811      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800962a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800962e:	d014      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009634:	d80b      	bhi.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d011      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800963a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963e:	d106      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009640:	4bc3      	ldr	r3, [pc, #780]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	4ac2      	ldr	r2, [pc, #776]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800964a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800964c:	e008      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009654:	e004      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009656:	bf00      	nop
 8009658:	e002      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800965a:	bf00      	nop
 800965c:	e000      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800965e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009668:	4bb9      	ldr	r3, [pc, #740]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800966a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009678:	4ab5      	ldr	r2, [pc, #724]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800967a:	430b      	orrs	r3, r1
 800967c:	6553      	str	r3, [r2, #84]	; 0x54
 800967e:	e003      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009694:	65bb      	str	r3, [r7, #88]	; 0x58
 8009696:	2300      	movs	r3, #0
 8009698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800969a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800969e:	460b      	mov	r3, r1
 80096a0:	4313      	orrs	r3, r2
 80096a2:	d009      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096a4:	4baa      	ldr	r3, [pc, #680]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096b2:	4aa7      	ldr	r2, [pc, #668]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80096c4:	653b      	str	r3, [r7, #80]	; 0x50
 80096c6:	2300      	movs	r3, #0
 80096c8:	657b      	str	r3, [r7, #84]	; 0x54
 80096ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80096ce:	460b      	mov	r3, r1
 80096d0:	4313      	orrs	r3, r2
 80096d2:	d00a      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80096d4:	4b9e      	ldr	r3, [pc, #632]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80096e4:	4a9a      	ldr	r2, [pc, #616]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096e6:	430b      	orrs	r3, r1
 80096e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80096f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096f8:	2300      	movs	r3, #0
 80096fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009700:	460b      	mov	r3, r1
 8009702:	4313      	orrs	r3, r2
 8009704:	d009      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009706:	4b92      	ldr	r3, [pc, #584]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009714:	4a8e      	ldr	r2, [pc, #568]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009716:	430b      	orrs	r3, r1
 8009718:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800971a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009726:	643b      	str	r3, [r7, #64]	; 0x40
 8009728:	2300      	movs	r3, #0
 800972a:	647b      	str	r3, [r7, #68]	; 0x44
 800972c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009730:	460b      	mov	r3, r1
 8009732:	4313      	orrs	r3, r2
 8009734:	d00e      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009736:	4b86      	ldr	r3, [pc, #536]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	4a85      	ldr	r2, [pc, #532]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800973c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009740:	6113      	str	r3, [r2, #16]
 8009742:	4b83      	ldr	r3, [pc, #524]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009744:	6919      	ldr	r1, [r3, #16]
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800974e:	4a80      	ldr	r2, [pc, #512]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009750:	430b      	orrs	r3, r1
 8009752:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009760:	63bb      	str	r3, [r7, #56]	; 0x38
 8009762:	2300      	movs	r3, #0
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009766:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800976a:	460b      	mov	r3, r1
 800976c:	4313      	orrs	r3, r2
 800976e:	d009      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009770:	4b77      	ldr	r3, [pc, #476]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009774:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977e:	4a74      	ldr	r2, [pc, #464]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009780:	430b      	orrs	r3, r1
 8009782:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009790:	633b      	str	r3, [r7, #48]	; 0x30
 8009792:	2300      	movs	r3, #0
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
 8009796:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800979a:	460b      	mov	r3, r1
 800979c:	4313      	orrs	r3, r2
 800979e:	d00a      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097a0:	4b6b      	ldr	r3, [pc, #428]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80097a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b0:	4a67      	ldr	r2, [pc, #412]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097b2:	430b      	orrs	r3, r1
 80097b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	2100      	movs	r1, #0
 80097c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80097cc:	460b      	mov	r3, r1
 80097ce:	4313      	orrs	r3, r2
 80097d0:	d011      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d6:	3308      	adds	r3, #8
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f001 fa4a 	bl	800ac74 <RCCEx_PLL2_Config>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80097e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	2100      	movs	r1, #0
 8009800:	6239      	str	r1, [r7, #32]
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
 8009808:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800980c:	460b      	mov	r3, r1
 800980e:	4313      	orrs	r3, r2
 8009810:	d011      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009816:	3308      	adds	r3, #8
 8009818:	2101      	movs	r1, #1
 800981a:	4618      	mov	r0, r3
 800981c:	f001 fa2a 	bl	800ac74 <RCCEx_PLL2_Config>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	2100      	movs	r1, #0
 8009840:	61b9      	str	r1, [r7, #24]
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	61fb      	str	r3, [r7, #28]
 8009848:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800984c:	460b      	mov	r3, r1
 800984e:	4313      	orrs	r3, r2
 8009850:	d011      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009856:	3308      	adds	r3, #8
 8009858:	2102      	movs	r1, #2
 800985a:	4618      	mov	r0, r3
 800985c:	f001 fa0a 	bl	800ac74 <RCCEx_PLL2_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800986e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	2100      	movs	r1, #0
 8009880:	6139      	str	r1, [r7, #16]
 8009882:	f003 0308 	and.w	r3, r3, #8
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800988c:	460b      	mov	r3, r1
 800988e:	4313      	orrs	r3, r2
 8009890:	d011      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009896:	3328      	adds	r3, #40	; 0x28
 8009898:	2100      	movs	r1, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fa9c 	bl	800add8 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80098a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80098b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	2100      	movs	r1, #0
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	f003 0310 	and.w	r3, r3, #16
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80098cc:	460b      	mov	r3, r1
 80098ce:	4313      	orrs	r3, r2
 80098d0:	d011      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d6:	3328      	adds	r3, #40	; 0x28
 80098d8:	2101      	movs	r1, #1
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fa7c 	bl	800add8 <RCCEx_PLL3_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80098e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	2100      	movs	r1, #0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	607b      	str	r3, [r7, #4]
 8009908:	e9d7 1200 	ldrd	r1, r2, [r7]
 800990c:	460b      	mov	r3, r1
 800990e:	4313      	orrs	r3, r2
 8009910:	d011      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009916:	3328      	adds	r3, #40	; 0x28
 8009918:	2102      	movs	r1, #2
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fa5c 	bl	800add8 <RCCEx_PLL3_Config>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009936:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	e000      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
}
 8009944:	4618      	mov	r0, r3
 8009946:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800994a:	46bd      	mov	sp, r7
 800994c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009950:	58024400 	.word	0x58024400

08009954 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b090      	sub	sp, #64	; 0x40
 8009958:	af00      	add	r7, sp, #0
 800995a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800995e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009962:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009966:	430b      	orrs	r3, r1
 8009968:	f040 8094 	bne.w	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800996c:	4b9e      	ldr	r3, [pc, #632]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800996e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	2b04      	cmp	r3, #4
 800997a:	f200 8087 	bhi.w	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	08009999 	.word	0x08009999
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099e9 	.word	0x080099e9
 8009990:	08009a85 	.word	0x08009a85
 8009994:	08009a11 	.word	0x08009a11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009998:	4b93      	ldr	r3, [pc, #588]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099a4:	d108      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 f810 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b4:	f000 bd45 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099bc:	f000 bd41 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099c0:	4b89      	ldr	r3, [pc, #548]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099cc:	d108      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ce:	f107 0318 	add.w	r3, r7, #24
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fd54 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099dc:	f000 bd31 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e4:	f000 bd2d 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099e8:	4b7f      	ldr	r3, [pc, #508]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099f4:	d108      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 fe94 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a04:	f000 bd1d 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a0c:	f000 bd19 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a10:	4b75      	ldr	r3, [pc, #468]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a1a:	4b73      	ldr	r3, [pc, #460]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0304 	and.w	r3, r3, #4
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d10c      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d109      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a2c:	4b6e      	ldr	r3, [pc, #440]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	08db      	lsrs	r3, r3, #3
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	4a6d      	ldr	r2, [pc, #436]	; (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a38:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3e:	e01f      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a40:	4b69      	ldr	r3, [pc, #420]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4c:	d106      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a54:	d102      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a56:	4b66      	ldr	r3, [pc, #408]	; (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a5a:	e011      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a5c:	4b62      	ldr	r3, [pc, #392]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a68:	d106      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a70:	d102      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a72:	4b60      	ldr	r3, [pc, #384]	; (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a76:	e003      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a7c:	f000 bce1 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a80:	f000 bcdf 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a84:	4b5c      	ldr	r3, [pc, #368]	; (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a88:	f000 bcdb 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a90:	f000 bcd7 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a98:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009a9c:	430b      	orrs	r3, r1
 8009a9e:	f040 80ad 	bne.w	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009aa2:	4b51      	ldr	r3, [pc, #324]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009aaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab2:	d056      	beq.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aba:	f200 8090 	bhi.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ac2:	f000 8088 	beq.w	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8009aca:	f200 8088 	bhi.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	2b80      	cmp	r3, #128	; 0x80
 8009ad2:	d032      	beq.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	2b80      	cmp	r3, #128	; 0x80
 8009ad8:	f200 8081 	bhi.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	2b40      	cmp	r3, #64	; 0x40
 8009ae6:	d014      	beq.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009ae8:	e079      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009aea:	4b3f      	ldr	r3, [pc, #252]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009af6:	d108      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 ff67 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b06:	f000 bc9c 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b0e:	f000 bc98 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b12:	4b35      	ldr	r3, [pc, #212]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b1e:	d108      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b20:	f107 0318 	add.w	r3, r7, #24
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fcab 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b2e:	f000 bc88 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b36:	f000 bc84 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b3a:	4b2b      	ldr	r3, [pc, #172]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b46:	d108      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b48:	f107 030c 	add.w	r3, r7, #12
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 fdeb 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b56:	f000 bc74 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b5e:	f000 bc70 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b62:	4b21      	ldr	r3, [pc, #132]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b6c:	4b1e      	ldr	r3, [pc, #120]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0304 	and.w	r3, r3, #4
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d10c      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d109      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b7e:	4b1a      	ldr	r3, [pc, #104]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	08db      	lsrs	r3, r3, #3
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	4a18      	ldr	r2, [pc, #96]	; (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b90:	e01f      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b92:	4b15      	ldr	r3, [pc, #84]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9e:	d106      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ba6:	d102      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ba8:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bac:	e011      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bba:	d106      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc2:	d102      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bc8:	e003      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009bce:	f000 bc38 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bd2:	f000 bc36 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bd6:	4b08      	ldr	r3, [pc, #32]	; (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bda:	f000 bc32 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009be2:	f000 bc2e 	b.w	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009be6:	bf00      	nop
 8009be8:	58024400 	.word	0x58024400
 8009bec:	03d09000 	.word	0x03d09000
 8009bf0:	003d0900 	.word	0x003d0900
 8009bf4:	017d7840 	.word	0x017d7840
 8009bf8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c00:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009c04:	430b      	orrs	r3, r1
 8009c06:	f040 809c 	bne.w	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009c0a:	4b9e      	ldr	r3, [pc, #632]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c1a:	d054      	beq.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c22:	f200 808b 	bhi.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c2c:	f000 8083 	beq.w	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c36:	f200 8081 	bhi.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c40:	d02f      	beq.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c48:	d878      	bhi.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d004      	beq.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c56:	d012      	beq.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009c58:	e070      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c5a:	4b8a      	ldr	r3, [pc, #552]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c66:	d107      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 feaf 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c76:	e3e4      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c7c:	e3e1      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c7e:	4b81      	ldr	r3, [pc, #516]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c8a:	d107      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8c:	f107 0318 	add.w	r3, r7, #24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fbf5 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c9a:	e3d2      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca0:	e3cf      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ca2:	4b78      	ldr	r3, [pc, #480]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cae:	d107      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb0:	f107 030c 	add.w	r3, r7, #12
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fd37 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbe:	e3c0      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cc4:	e3bd      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cc6:	4b6f      	ldr	r3, [pc, #444]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd0:	4b6c      	ldr	r3, [pc, #432]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d10c      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ce2:	4b68      	ldr	r3, [pc, #416]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	08db      	lsrs	r3, r3, #3
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	4a66      	ldr	r2, [pc, #408]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009cee:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf4:	e01e      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cf6:	4b63      	ldr	r3, [pc, #396]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d02:	d106      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d0a:	d102      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d0c:	4b5f      	ldr	r3, [pc, #380]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d10:	e010      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d12:	4b5c      	ldr	r3, [pc, #368]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d1e:	d106      	bne.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d26:	d102      	bne.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d28:	4b59      	ldr	r3, [pc, #356]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2c:	e002      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d32:	e386      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d34:	e385      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d36:	4b57      	ldr	r3, [pc, #348]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d3a:	e382      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d40:	e37f      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d46:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009d4a:	430b      	orrs	r3, r1
 8009d4c:	f040 80a7 	bne.w	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009d50:	4b4c      	ldr	r3, [pc, #304]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d60:	d055      	beq.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d68:	f200 8096 	bhi.w	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d72:	f000 8084 	beq.w	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d7c:	f200 808c 	bhi.w	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d86:	d030      	beq.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d8e:	f200 8083 	bhi.w	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d004      	beq.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d9e:	d012      	beq.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009da0:	e07a      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009da2:	4b38      	ldr	r3, [pc, #224]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dae:	d107      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fe0b 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dbe:	e340      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc4:	e33d      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dc6:	4b2f      	ldr	r3, [pc, #188]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dd2:	d107      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dd4:	f107 0318 	add.w	r3, r7, #24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fb51 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009de2:	e32e      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de8:	e32b      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dea:	4b26      	ldr	r3, [pc, #152]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009df6:	d107      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df8:	f107 030c 	add.w	r3, r7, #12
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fc93 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e06:	e31c      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e0c:	e319      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e0e:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e18:	4b1a      	ldr	r3, [pc, #104]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d10c      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d109      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e2a:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	08db      	lsrs	r3, r3, #3
 8009e30:	f003 0303 	and.w	r3, r3, #3
 8009e34:	4a14      	ldr	r2, [pc, #80]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3c:	e01e      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e3e:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4a:	d106      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e52:	d102      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e54:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e58:	e010      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e66:	d106      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e6e:	d102      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e70:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e74:	e002      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e7a:	e2e2      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e7c:	e2e1      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e7e:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e82:	e2de      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e84:	58024400 	.word	0x58024400
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	003d0900 	.word	0x003d0900
 8009e90:	017d7840 	.word	0x017d7840
 8009e94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e9c:	e2d1      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ea2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	f040 809c 	bne.w	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009eac:	4b93      	ldr	r3, [pc, #588]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009eb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ebc:	d054      	beq.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ec4:	f200 808b 	bhi.w	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ece:	f000 8083 	beq.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ed8:	f200 8081 	bhi.w	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ee2:	d02f      	beq.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eea:	d878      	bhi.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef8:	d012      	beq.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009efa:	e070      	b.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009efc:	4b7f      	ldr	r3, [pc, #508]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f08:	d107      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 fd5e 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f18:	e293      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f1e:	e290      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f20:	4b76      	ldr	r3, [pc, #472]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f2c:	d107      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2e:	f107 0318 	add.w	r3, r7, #24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 faa4 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f3c:	e281      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f42:	e27e      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f44:	4b6d      	ldr	r3, [pc, #436]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f50:	d107      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f52:	f107 030c 	add.w	r3, r7, #12
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fbe6 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f60:	e26f      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f66:	e26c      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f68:	4b64      	ldr	r3, [pc, #400]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f72:	4b62      	ldr	r3, [pc, #392]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d10c      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d109      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f84:	4b5d      	ldr	r3, [pc, #372]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	4a5c      	ldr	r2, [pc, #368]	; (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f96:	e01e      	b.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f98:	4b58      	ldr	r3, [pc, #352]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa4:	d106      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fac:	d102      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fae:	4b55      	ldr	r3, [pc, #340]	; (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb2:	e010      	b.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fb4:	4b51      	ldr	r3, [pc, #324]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fc0:	d106      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc8:	d102      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fca:	4b4f      	ldr	r3, [pc, #316]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fce:	e002      	b.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fd4:	e235      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fd6:	e234      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fd8:	4b4c      	ldr	r3, [pc, #304]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fdc:	e231      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe2:	e22e      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009fec:	430b      	orrs	r3, r1
 8009fee:	f040 808f 	bne.w	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009ff2:	4b42      	ldr	r3, [pc, #264]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009ffa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a002:	d06b      	beq.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a00a:	d874      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a012:	d056      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a01a:	d86c      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a022:	d03b      	beq.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a02a:	d864      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a032:	d021      	beq.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a03a:	d85c      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a048:	d004      	beq.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a04a:	e054      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a04c:	f7fe fa20 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 800a050:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a052:	e1f6      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a054:	4b29      	ldr	r3, [pc, #164]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a060:	d107      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a062:	f107 0318 	add.w	r3, r7, #24
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fa0a 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a070:	e1e7      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a076:	e1e4      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a078:	4b20      	ldr	r3, [pc, #128]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a084:	d107      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a086:	f107 030c 	add.w	r3, r7, #12
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fb4c 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a094:	e1d5      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09a:	e1d2      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a09c:	4b17      	ldr	r3, [pc, #92]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d109      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0a8:	4b14      	ldr	r3, [pc, #80]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	08db      	lsrs	r3, r3, #3
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	4a13      	ldr	r2, [pc, #76]	; (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	e1c2      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c0:	e1bf      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ce:	d102      	bne.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d4:	e1b5      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0da:	e1b2      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e8:	d102      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ee:	e1a8      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f4:	e1a5      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0fa:	e1a2      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0fc:	58024400 	.word	0x58024400
 800a100:	03d09000 	.word	0x03d09000
 800a104:	003d0900 	.word	0x003d0900
 800a108:	017d7840 	.word	0x017d7840
 800a10c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a114:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a118:	430b      	orrs	r3, r1
 800a11a:	d173      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a11c:	4b9c      	ldr	r3, [pc, #624]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a124:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a12c:	d02f      	beq.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a134:	d863      	bhi.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a142:	d012      	beq.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a144:	e05b      	b.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a146:	4b92      	ldr	r3, [pc, #584]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a14e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a152:	d107      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a154:	f107 0318 	add.w	r3, r7, #24
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 f991 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a162:	e16e      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a168:	e16b      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a16a:	4b89      	ldr	r3, [pc, #548]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a176:	d107      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a178:	f107 030c 	add.w	r3, r7, #12
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 fad3 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a186:	e15c      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18c:	e159      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a18e:	4b80      	ldr	r3, [pc, #512]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a196:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a198:	4b7d      	ldr	r3, [pc, #500]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d10c      	bne.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1aa:	4b79      	ldr	r3, [pc, #484]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	08db      	lsrs	r3, r3, #3
 800a1b0:	f003 0303 	and.w	r3, r3, #3
 800a1b4:	4a77      	ldr	r2, [pc, #476]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1bc:	e01e      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1be:	4b74      	ldr	r3, [pc, #464]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ca:	d106      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d2:	d102      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1d4:	4b70      	ldr	r3, [pc, #448]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1d8:	e010      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1da:	4b6d      	ldr	r3, [pc, #436]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1e6:	d106      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ee:	d102      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1f0:	4b6a      	ldr	r3, [pc, #424]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1f4:	e002      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a1fa:	e122      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1fc:	e121      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a202:	e11e      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a208:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a20c:	430b      	orrs	r3, r1
 800a20e:	d133      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a210:	4b5f      	ldr	r3, [pc, #380]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a218:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d004      	beq.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a226:	d012      	beq.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a228:	e023      	b.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a22a:	4b59      	ldr	r3, [pc, #356]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a236:	d107      	bne.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 fbc7 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a246:	e0fc      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a24c:	e0f9      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a24e:	4b50      	ldr	r3, [pc, #320]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a25a:	d107      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25c:	f107 0318 	add.w	r3, r7, #24
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f90d 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a26a:	e0ea      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a270:	e0e7      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a276:	e0e4      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a280:	430b      	orrs	r3, r1
 800a282:	f040 808d 	bne.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a286:	4b42      	ldr	r3, [pc, #264]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a28e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a296:	d06b      	beq.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a29e:	d874      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a6:	d056      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ae:	d86c      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2b6:	d03b      	beq.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2be:	d864      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2c6:	d021      	beq.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ce:	d85c      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d004      	beq.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2dc:	d004      	beq.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a2de:	e054      	b.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a2e0:	f000 f8b8 	bl	800a454 <HAL_RCCEx_GetD3PCLK1Freq>
 800a2e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2e6:	e0ac      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2e8:	4b29      	ldr	r3, [pc, #164]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2f4:	d107      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2f6:	f107 0318 	add.w	r3, r7, #24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f8c0 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a304:	e09d      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a30a:	e09a      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a30c:	4b20      	ldr	r3, [pc, #128]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a318:	d107      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fa02 	bl	800a728 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a328:	e08b      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a32e:	e088      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a330:	4b17      	ldr	r3, [pc, #92]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d109      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a33c:	4b14      	ldr	r3, [pc, #80]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	08db      	lsrs	r3, r3, #3
 800a342:	f003 0303 	and.w	r3, r3, #3
 800a346:	4a13      	ldr	r2, [pc, #76]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a348:	fa22 f303 	lsr.w	r3, r2, r3
 800a34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a34e:	e078      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a354:	e075      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a356:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a362:	d102      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a364:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a368:	e06b      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36e:	e068      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a370:	4b07      	ldr	r3, [pc, #28]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a37c:	d102      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a37e:	4b07      	ldr	r3, [pc, #28]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a382:	e05e      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a388:	e05b      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38e:	e058      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a390:	58024400 	.word	0x58024400
 800a394:	03d09000 	.word	0x03d09000
 800a398:	003d0900 	.word	0x003d0900
 800a39c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	d148      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a3ac:	4b27      	ldr	r3, [pc, #156]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3bc:	d02a      	beq.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3c4:	d838      	bhi.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3d2:	d00d      	beq.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a3d4:	e030      	b.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3e2:	d102      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3e8:	e02b      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ee:	e028      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3f0:	4b16      	ldr	r3, [pc, #88]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3fc:	d107      	bne.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fae4 	bl	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a40c:	e019      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a412:	e016      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a414:	4b0d      	ldr	r3, [pc, #52]	; (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a41c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a420:	d107      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a422:	f107 0318 	add.w	r3, r7, #24
 800a426:	4618      	mov	r0, r3
 800a428:	f000 f82a 	bl	800a480 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a430:	e007      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a436:	e004      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a43c:	e001      	b.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a444:	4618      	mov	r0, r3
 800a446:	3740      	adds	r7, #64	; 0x40
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	58024400 	.word	0x58024400
 800a450:	017d7840 	.word	0x017d7840

0800a454 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a458:	f7fd ffea 	bl	8008430 <HAL_RCC_GetHCLKFreq>
 800a45c:	4602      	mov	r2, r0
 800a45e:	4b06      	ldr	r3, [pc, #24]	; (800a478 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	091b      	lsrs	r3, r3, #4
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	4904      	ldr	r1, [pc, #16]	; (800a47c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a46a:	5ccb      	ldrb	r3, [r1, r3]
 800a46c:	f003 031f 	and.w	r3, r3, #31
 800a470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a474:	4618      	mov	r0, r3
 800a476:	bd80      	pop	{r7, pc}
 800a478:	58024400 	.word	0x58024400
 800a47c:	08012ee0 	.word	0x08012ee0

0800a480 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a480:	b480      	push	{r7}
 800a482:	b089      	sub	sp, #36	; 0x24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a488:	4ba1      	ldr	r3, [pc, #644]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48c:	f003 0303 	and.w	r3, r3, #3
 800a490:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a492:	4b9f      	ldr	r3, [pc, #636]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	0b1b      	lsrs	r3, r3, #12
 800a498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a49c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a49e:	4b9c      	ldr	r3, [pc, #624]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a2:	091b      	lsrs	r3, r3, #4
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a4aa:	4b99      	ldr	r3, [pc, #612]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	08db      	lsrs	r3, r3, #3
 800a4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8111 	beq.w	800a6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	f000 8083 	beq.w	800a5dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	f200 80a1 	bhi.w	800a620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d056      	beq.n	800a598 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4ea:	e099      	b.n	800a620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ec:	4b88      	ldr	r3, [pc, #544]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d02d      	beq.n	800a554 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f8:	4b85      	ldr	r3, [pc, #532]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	4a84      	ldr	r2, [pc, #528]	; (800a714 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
 800a508:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a522:	4b7b      	ldr	r3, [pc, #492]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a532:	ed97 6a03 	vldr	s12, [r7, #12]
 800a536:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a552:	e087      	b.n	800a664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a71c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a566:	4b6a      	ldr	r3, [pc, #424]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a576:	ed97 6a03 	vldr	s12, [r7, #12]
 800a57a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a596:	e065      	b.n	800a664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5aa:	4b59      	ldr	r3, [pc, #356]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5da:	e043      	b.n	800a664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	4b48      	ldr	r3, [pc, #288]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a602:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a61e:	e021      	b.n	800a664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a632:	4b37      	ldr	r3, [pc, #220]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	ed97 6a03 	vldr	s12, [r7, #12]
 800a646:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a662:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a664:	4b2a      	ldr	r3, [pc, #168]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a668:	0a5b      	lsrs	r3, r3, #9
 800a66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a68a:	ee17 2a90 	vmov	r2, s15
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a692:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	0c1b      	lsrs	r3, r3, #16
 800a698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a69c:	ee07 3a90 	vmov	s15, r3
 800a6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b8:	ee17 2a90 	vmov	r2, s15
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a6c0:	4b13      	ldr	r3, [pc, #76]	; (800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	0e1b      	lsrs	r3, r3, #24
 800a6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e6:	ee17 2a90 	vmov	r2, s15
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a6ee:	e008      	b.n	800a702 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	609a      	str	r2, [r3, #8]
}
 800a702:	bf00      	nop
 800a704:	3724      	adds	r7, #36	; 0x24
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	58024400 	.word	0x58024400
 800a714:	03d09000 	.word	0x03d09000
 800a718:	46000000 	.word	0x46000000
 800a71c:	4c742400 	.word	0x4c742400
 800a720:	4a742400 	.word	0x4a742400
 800a724:	4bbebc20 	.word	0x4bbebc20

0800a728 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a728:	b480      	push	{r7}
 800a72a:	b089      	sub	sp, #36	; 0x24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a730:	4ba1      	ldr	r3, [pc, #644]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a734:	f003 0303 	and.w	r3, r3, #3
 800a738:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a73a:	4b9f      	ldr	r3, [pc, #636]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73e:	0d1b      	lsrs	r3, r3, #20
 800a740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a744:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a746:	4b9c      	ldr	r3, [pc, #624]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	0a1b      	lsrs	r3, r3, #8
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a752:	4b99      	ldr	r3, [pc, #612]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 8111 	beq.w	800a998 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	f000 8083 	beq.w	800a884 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	2b02      	cmp	r3, #2
 800a782:	f200 80a1 	bhi.w	800a8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d056      	beq.n	800a840 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a792:	e099      	b.n	800a8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a794:	4b88      	ldr	r3, [pc, #544]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0320 	and.w	r3, r3, #32
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d02d      	beq.n	800a7fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7a0:	4b85      	ldr	r3, [pc, #532]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	08db      	lsrs	r3, r3, #3
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	4a84      	ldr	r2, [pc, #528]	; (800a9bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	ee07 3a90 	vmov	s15, r3
 800a7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ca:	4b7b      	ldr	r3, [pc, #492]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7fa:	e087      	b.n	800a90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	ee07 3a90 	vmov	s15, r3
 800a802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a806:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80e:	4b6a      	ldr	r3, [pc, #424]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a816:	ee07 3a90 	vmov	s15, r3
 800a81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a822:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a83e:	e065      	b.n	800a90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	ee07 3a90 	vmov	s15, r3
 800a846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a852:	4b59      	ldr	r3, [pc, #356]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a862:	ed97 6a03 	vldr	s12, [r7, #12]
 800a866:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a882:	e043      	b.n	800a90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a896:	4b48      	ldr	r3, [pc, #288]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c6:	e021      	b.n	800a90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b37      	ldr	r3, [pc, #220]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a90a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a90c:	4b2a      	ldr	r3, [pc, #168]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a910:	0a5b      	lsrs	r3, r3, #9
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a926:	edd7 6a07 	vldr	s13, [r7, #28]
 800a92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a932:	ee17 2a90 	vmov	r2, s15
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a93a:	4b1f      	ldr	r3, [pc, #124]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93e:	0c1b      	lsrs	r3, r3, #16
 800a940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a944:	ee07 3a90 	vmov	s15, r3
 800a948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a950:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a954:	edd7 6a07 	vldr	s13, [r7, #28]
 800a958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a95c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a960:	ee17 2a90 	vmov	r2, s15
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a968:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	0e1b      	lsrs	r3, r3, #24
 800a96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a97e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a982:	edd7 6a07 	vldr	s13, [r7, #28]
 800a986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a98e:	ee17 2a90 	vmov	r2, s15
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a996:	e008      	b.n	800a9aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	609a      	str	r2, [r3, #8]
}
 800a9aa:	bf00      	nop
 800a9ac:	3724      	adds	r7, #36	; 0x24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	46000000 	.word	0x46000000
 800a9c4:	4c742400 	.word	0x4c742400
 800a9c8:	4a742400 	.word	0x4a742400
 800a9cc:	4bbebc20 	.word	0x4bbebc20

0800a9d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b089      	sub	sp, #36	; 0x24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9d8:	4ba0      	ldr	r3, [pc, #640]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a9e2:	4b9e      	ldr	r3, [pc, #632]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	091b      	lsrs	r3, r3, #4
 800a9e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a9ee:	4b9b      	ldr	r3, [pc, #620]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9f8:	4b98      	ldr	r3, [pc, #608]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	fb02 f303 	mul.w	r3, r2, r3
 800aa08:	ee07 3a90 	vmov	s15, r3
 800aa0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 8111 	beq.w	800ac3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	f000 8083 	beq.w	800ab2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	f200 80a1 	bhi.w	800ab6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d056      	beq.n	800aae6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aa38:	e099      	b.n	800ab6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa3a:	4b88      	ldr	r3, [pc, #544]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02d      	beq.n	800aaa2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa46:	4b85      	ldr	r3, [pc, #532]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	08db      	lsrs	r3, r3, #3
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	4a83      	ldr	r2, [pc, #524]	; (800ac60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa52:	fa22 f303 	lsr.w	r3, r2, r3
 800aa56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	ee07 3a90 	vmov	s15, r3
 800aa68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa70:	4b7a      	ldr	r3, [pc, #488]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa80:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa84:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aaa0:	e087      	b.n	800abb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab4:	4b69      	ldr	r3, [pc, #420]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aacc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aadc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aae4:	e065      	b.n	800abb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aaf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf8:	4b58      	ldr	r3, [pc, #352]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab00:	ee07 3a90 	vmov	s15, r3
 800ab04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab08:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab28:	e043      	b.n	800abb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	ee07 3a90 	vmov	s15, r3
 800ab30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ab38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3c:	4b47      	ldr	r3, [pc, #284]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab50:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab6c:	e021      	b.n	800abb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab78:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ac68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab80:	4b36      	ldr	r3, [pc, #216]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab88:	ee07 3a90 	vmov	s15, r3
 800ab8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab94:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abb2:	4b2a      	ldr	r3, [pc, #168]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb6:	0a5b      	lsrs	r3, r3, #9
 800abb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbc:	ee07 3a90 	vmov	s15, r3
 800abc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd8:	ee17 2a90 	vmov	r2, s15
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800abe0:	4b1e      	ldr	r3, [pc, #120]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800abfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac06:	ee17 2a90 	vmov	r2, s15
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	0e1b      	lsrs	r3, r3, #24
 800ac14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac18:	ee07 3a90 	vmov	s15, r3
 800ac1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac28:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac34:	ee17 2a90 	vmov	r2, s15
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac3c:	e008      	b.n	800ac50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	609a      	str	r2, [r3, #8]
}
 800ac50:	bf00      	nop
 800ac52:	3724      	adds	r7, #36	; 0x24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	46000000 	.word	0x46000000
 800ac68:	4c742400 	.word	0x4c742400
 800ac6c:	4a742400 	.word	0x4a742400
 800ac70:	4bbebc20 	.word	0x4bbebc20

0800ac74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac82:	4b53      	ldr	r3, [pc, #332]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ac84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d101      	bne.n	800ac92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e099      	b.n	800adc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac92:	4b4f      	ldr	r3, [pc, #316]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a4e      	ldr	r2, [pc, #312]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ac98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac9e:	f7f6 fcbf 	bl	8001620 <HAL_GetTick>
 800aca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aca4:	e008      	b.n	800acb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aca6:	f7f6 fcbb 	bl	8001620 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d901      	bls.n	800acb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e086      	b.n	800adc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acb8:	4b45      	ldr	r3, [pc, #276]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1f0      	bne.n	800aca6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acc4:	4b42      	ldr	r3, [pc, #264]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	031b      	lsls	r3, r3, #12
 800acd2:	493f      	ldr	r1, [pc, #252]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	628b      	str	r3, [r1, #40]	; 0x28
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	3b01      	subs	r3, #1
 800acde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	025b      	lsls	r3, r3, #9
 800acea:	b29b      	uxth	r3, r3
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	041b      	lsls	r3, r3, #16
 800acf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	061b      	lsls	r3, r3, #24
 800ad04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad08:	4931      	ldr	r1, [pc, #196]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad0e:	4b30      	ldr	r3, [pc, #192]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	492d      	ldr	r1, [pc, #180]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad20:	4b2b      	ldr	r3, [pc, #172]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	f023 0220 	bic.w	r2, r3, #32
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	4928      	ldr	r1, [pc, #160]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad32:	4b27      	ldr	r3, [pc, #156]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	4a26      	ldr	r2, [pc, #152]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad38:	f023 0310 	bic.w	r3, r3, #16
 800ad3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad3e:	4b24      	ldr	r3, [pc, #144]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad42:	4b24      	ldr	r3, [pc, #144]	; (800add4 <RCCEx_PLL2_Config+0x160>)
 800ad44:	4013      	ands	r3, r2
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	69d2      	ldr	r2, [r2, #28]
 800ad4a:	00d2      	lsls	r2, r2, #3
 800ad4c:	4920      	ldr	r1, [pc, #128]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad52:	4b1f      	ldr	r3, [pc, #124]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad56:	4a1e      	ldr	r2, [pc, #120]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad58:	f043 0310 	orr.w	r3, r3, #16
 800ad5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad64:	4b1a      	ldr	r3, [pc, #104]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	4a19      	ldr	r2, [pc, #100]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad70:	e00f      	b.n	800ad92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d106      	bne.n	800ad86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad78:	4b15      	ldr	r3, [pc, #84]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a14      	ldr	r2, [pc, #80]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad84:	e005      	b.n	800ad92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8a:	4a11      	ldr	r2, [pc, #68]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad92:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a0e      	ldr	r2, [pc, #56]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800ad98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad9e:	f7f6 fc3f 	bl	8001620 <HAL_GetTick>
 800ada2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ada4:	e008      	b.n	800adb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ada6:	f7f6 fc3b 	bl	8001620 <HAL_GetTick>
 800adaa:	4602      	mov	r2, r0
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d901      	bls.n	800adb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e006      	b.n	800adc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <RCCEx_PLL2_Config+0x15c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0f0      	beq.n	800ada6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	58024400 	.word	0x58024400
 800add4:	ffff0007 	.word	0xffff0007

0800add8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ade6:	4b53      	ldr	r3, [pc, #332]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d101      	bne.n	800adf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e099      	b.n	800af2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adf6:	4b4f      	ldr	r3, [pc, #316]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a4e      	ldr	r2, [pc, #312]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800adfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae02:	f7f6 fc0d 	bl	8001620 <HAL_GetTick>
 800ae06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae08:	e008      	b.n	800ae1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae0a:	f7f6 fc09 	bl	8001620 <HAL_GetTick>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d901      	bls.n	800ae1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e086      	b.n	800af2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae1c:	4b45      	ldr	r3, [pc, #276]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1f0      	bne.n	800ae0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae28:	4b42      	ldr	r3, [pc, #264]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	051b      	lsls	r3, r3, #20
 800ae36:	493f      	ldr	r1, [pc, #252]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	628b      	str	r3, [r1, #40]	; 0x28
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	025b      	lsls	r3, r3, #9
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	431a      	orrs	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	3b01      	subs	r3, #1
 800ae58:	041b      	lsls	r3, r3, #16
 800ae5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	061b      	lsls	r3, r3, #24
 800ae68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae6c:	4931      	ldr	r1, [pc, #196]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae72:	4b30      	ldr	r3, [pc, #192]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	492d      	ldr	r1, [pc, #180]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae80:	4313      	orrs	r3, r2
 800ae82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae84:	4b2b      	ldr	r3, [pc, #172]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	4928      	ldr	r1, [pc, #160]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae96:	4b27      	ldr	r3, [pc, #156]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	4a26      	ldr	r2, [pc, #152]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800ae9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aea2:	4b24      	ldr	r3, [pc, #144]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aea6:	4b24      	ldr	r3, [pc, #144]	; (800af38 <RCCEx_PLL3_Config+0x160>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	69d2      	ldr	r2, [r2, #28]
 800aeae:	00d2      	lsls	r2, r2, #3
 800aeb0:	4920      	ldr	r1, [pc, #128]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeb6:	4b1f      	ldr	r3, [pc, #124]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeba:	4a1e      	ldr	r2, [pc, #120]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d106      	bne.n	800aed6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aec8:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aecc:	4a19      	ldr	r2, [pc, #100]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aed4:	e00f      	b.n	800aef6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d106      	bne.n	800aeea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aedc:	4b15      	ldr	r3, [pc, #84]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a14      	ldr	r2, [pc, #80]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aee8:	e005      	b.n	800aef6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aeea:	4b12      	ldr	r3, [pc, #72]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	4a11      	ldr	r2, [pc, #68]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aef4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aef6:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a0e      	ldr	r2, [pc, #56]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800aefc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af02:	f7f6 fb8d 	bl	8001620 <HAL_GetTick>
 800af06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af08:	e008      	b.n	800af1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af0a:	f7f6 fb89 	bl	8001620 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	2b02      	cmp	r3, #2
 800af16:	d901      	bls.n	800af1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e006      	b.n	800af2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af1c:	4b05      	ldr	r3, [pc, #20]	; (800af34 <RCCEx_PLL3_Config+0x15c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0f0      	beq.n	800af0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af28:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	58024400 	.word	0x58024400
 800af38:	ffff0007 	.word	0xffff0007

0800af3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e049      	b.n	800afe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7f6 faa4 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2202      	movs	r2, #2
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3304      	adds	r3, #4
 800af78:	4619      	mov	r1, r3
 800af7a:	4610      	mov	r0, r2
 800af7c:	f000 faee 	bl	800b55c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b01      	cmp	r3, #1
 800affe:	d001      	beq.n	800b004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e054      	b.n	800b0ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0201 	orr.w	r2, r2, #1
 800b01a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a26      	ldr	r2, [pc, #152]	; (800b0bc <HAL_TIM_Base_Start_IT+0xd0>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d022      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b02e:	d01d      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a22      	ldr	r2, [pc, #136]	; (800b0c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d018      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a21      	ldr	r2, [pc, #132]	; (800b0c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d013      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a1f      	ldr	r2, [pc, #124]	; (800b0c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d00e      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a1e      	ldr	r2, [pc, #120]	; (800b0cc <HAL_TIM_Base_Start_IT+0xe0>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d009      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a1c      	ldr	r2, [pc, #112]	; (800b0d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d004      	beq.n	800b06c <HAL_TIM_Base_Start_IT+0x80>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1b      	ldr	r2, [pc, #108]	; (800b0d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d115      	bne.n	800b098 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	4b19      	ldr	r3, [pc, #100]	; (800b0d8 <HAL_TIM_Base_Start_IT+0xec>)
 800b074:	4013      	ands	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b06      	cmp	r3, #6
 800b07c:	d015      	beq.n	800b0aa <HAL_TIM_Base_Start_IT+0xbe>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b084:	d011      	beq.n	800b0aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f042 0201 	orr.w	r2, r2, #1
 800b094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b096:	e008      	b.n	800b0aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0201 	orr.w	r2, r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	e000      	b.n	800b0ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	40010000 	.word	0x40010000
 800b0c0:	40000400 	.word	0x40000400
 800b0c4:	40000800 	.word	0x40000800
 800b0c8:	40000c00 	.word	0x40000c00
 800b0cc:	40010400 	.word	0x40010400
 800b0d0:	40001800 	.word	0x40001800
 800b0d4:	40014000 	.word	0x40014000
 800b0d8:	00010007 	.word	0x00010007

0800b0dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d122      	bne.n	800b138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	f003 0302 	and.w	r3, r3, #2
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d11b      	bne.n	800b138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f06f 0202 	mvn.w	r2, #2
 800b108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f9fe 	bl	800b520 <HAL_TIM_IC_CaptureCallback>
 800b124:	e005      	b.n	800b132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f9f0 	bl	800b50c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fa01 	bl	800b534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	f003 0304 	and.w	r3, r3, #4
 800b142:	2b04      	cmp	r3, #4
 800b144:	d122      	bne.n	800b18c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b04      	cmp	r3, #4
 800b152:	d11b      	bne.n	800b18c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f06f 0204 	mvn.w	r2, #4
 800b15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2202      	movs	r2, #2
 800b162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f9d4 	bl	800b520 <HAL_TIM_IC_CaptureCallback>
 800b178:	e005      	b.n	800b186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f9c6 	bl	800b50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f9d7 	bl	800b534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	f003 0308 	and.w	r3, r3, #8
 800b196:	2b08      	cmp	r3, #8
 800b198:	d122      	bne.n	800b1e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b08      	cmp	r3, #8
 800b1a6:	d11b      	bne.n	800b1e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f06f 0208 	mvn.w	r2, #8
 800b1b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2204      	movs	r2, #4
 800b1b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f9aa 	bl	800b520 <HAL_TIM_IC_CaptureCallback>
 800b1cc:	e005      	b.n	800b1da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f99c 	bl	800b50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f9ad 	bl	800b534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	f003 0310 	and.w	r3, r3, #16
 800b1ea:	2b10      	cmp	r3, #16
 800b1ec:	d122      	bne.n	800b234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f003 0310 	and.w	r3, r3, #16
 800b1f8:	2b10      	cmp	r3, #16
 800b1fa:	d11b      	bne.n	800b234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f06f 0210 	mvn.w	r2, #16
 800b204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2208      	movs	r2, #8
 800b20a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b216:	2b00      	cmp	r3, #0
 800b218:	d003      	beq.n	800b222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f980 	bl	800b520 <HAL_TIM_IC_CaptureCallback>
 800b220:	e005      	b.n	800b22e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f972 	bl	800b50c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f983 	bl	800b534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d10e      	bne.n	800b260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f003 0301 	and.w	r3, r3, #1
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d107      	bne.n	800b260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f06f 0201 	mvn.w	r2, #1
 800b258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7f5 fdb8 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b26a:	2b80      	cmp	r3, #128	; 0x80
 800b26c:	d10e      	bne.n	800b28c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b278:	2b80      	cmp	r3, #128	; 0x80
 800b27a:	d107      	bne.n	800b28c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fb38 	bl	800b8fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b29a:	d10e      	bne.n	800b2ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a6:	2b80      	cmp	r3, #128	; 0x80
 800b2a8:	d107      	bne.n	800b2ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fb2b 	bl	800b910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c4:	2b40      	cmp	r3, #64	; 0x40
 800b2c6:	d10e      	bne.n	800b2e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d2:	2b40      	cmp	r3, #64	; 0x40
 800b2d4:	d107      	bne.n	800b2e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f931 	bl	800b548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	d10e      	bne.n	800b312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d107      	bne.n	800b312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f06f 0220 	mvn.w	r2, #32
 800b30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 faeb 	bl	800b8e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_TIM_ConfigClockSource+0x1c>
 800b334:	2302      	movs	r3, #2
 800b336:	e0dc      	b.n	800b4f2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	4b6a      	ldr	r3, [pc, #424]	; (800b4fc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b354:	4013      	ands	r3, r2
 800b356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b35e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a64      	ldr	r2, [pc, #400]	; (800b500 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	f000 80a9 	beq.w	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b374:	4a62      	ldr	r2, [pc, #392]	; (800b500 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b376:	4293      	cmp	r3, r2
 800b378:	f200 80ae 	bhi.w	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b37c:	4a61      	ldr	r2, [pc, #388]	; (800b504 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	f000 80a1 	beq.w	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b384:	4a5f      	ldr	r2, [pc, #380]	; (800b504 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b386:	4293      	cmp	r3, r2
 800b388:	f200 80a6 	bhi.w	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b38c:	4a5e      	ldr	r2, [pc, #376]	; (800b508 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	f000 8099 	beq.w	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b394:	4a5c      	ldr	r2, [pc, #368]	; (800b508 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b396:	4293      	cmp	r3, r2
 800b398:	f200 809e 	bhi.w	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b39c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3a0:	f000 8091 	beq.w	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3a8:	f200 8096 	bhi.w	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3b0:	f000 8089 	beq.w	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3b8:	f200 808e 	bhi.w	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c0:	d03e      	beq.n	800b440 <HAL_TIM_ConfigClockSource+0x124>
 800b3c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c6:	f200 8087 	bhi.w	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ce:	f000 8086 	beq.w	800b4de <HAL_TIM_ConfigClockSource+0x1c2>
 800b3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d6:	d87f      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3d8:	2b70      	cmp	r3, #112	; 0x70
 800b3da:	d01a      	beq.n	800b412 <HAL_TIM_ConfigClockSource+0xf6>
 800b3dc:	2b70      	cmp	r3, #112	; 0x70
 800b3de:	d87b      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e0:	2b60      	cmp	r3, #96	; 0x60
 800b3e2:	d050      	beq.n	800b486 <HAL_TIM_ConfigClockSource+0x16a>
 800b3e4:	2b60      	cmp	r3, #96	; 0x60
 800b3e6:	d877      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e8:	2b50      	cmp	r3, #80	; 0x50
 800b3ea:	d03c      	beq.n	800b466 <HAL_TIM_ConfigClockSource+0x14a>
 800b3ec:	2b50      	cmp	r3, #80	; 0x50
 800b3ee:	d873      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	d058      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x18a>
 800b3f4:	2b40      	cmp	r3, #64	; 0x40
 800b3f6:	d86f      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f8:	2b30      	cmp	r3, #48	; 0x30
 800b3fa:	d064      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3fc:	2b30      	cmp	r3, #48	; 0x30
 800b3fe:	d86b      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b400:	2b20      	cmp	r3, #32
 800b402:	d060      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b404:	2b20      	cmp	r3, #32
 800b406:	d867      	bhi.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d05c      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d05a      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b410:	e062      	b.n	800b4d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b422:	f000 f9b3 	bl	800b78c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	609a      	str	r2, [r3, #8]
      break;
 800b43e:	e04f      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b450:	f000 f99c 	bl	800b78c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689a      	ldr	r2, [r3, #8]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b462:	609a      	str	r2, [r3, #8]
      break;
 800b464:	e03c      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b472:	461a      	mov	r2, r3
 800b474:	f000 f90c 	bl	800b690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2150      	movs	r1, #80	; 0x50
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 f966 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b484:	e02c      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b492:	461a      	mov	r2, r3
 800b494:	f000 f92b 	bl	800b6ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2160      	movs	r1, #96	; 0x60
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f956 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b4a4:	e01c      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f000 f8ec 	bl	800b690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2140      	movs	r1, #64	; 0x40
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 f946 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b4c4:	e00c      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	f000 f93d 	bl	800b750 <TIM_ITRx_SetConfig>
      break;
 800b4d6:	e003      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
      break;
 800b4dc:	e000      	b.n	800b4e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b4de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	ffceff88 	.word	0xffceff88
 800b500:	00100040 	.word	0x00100040
 800b504:	00100030 	.word	0x00100030
 800b508:	00100020 	.word	0x00100020

0800b50c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a40      	ldr	r2, [pc, #256]	; (800b670 <TIM_Base_SetConfig+0x114>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d013      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b57a:	d00f      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a3d      	ldr	r2, [pc, #244]	; (800b674 <TIM_Base_SetConfig+0x118>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00b      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a3c      	ldr	r2, [pc, #240]	; (800b678 <TIM_Base_SetConfig+0x11c>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d007      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a3b      	ldr	r2, [pc, #236]	; (800b67c <TIM_Base_SetConfig+0x120>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d003      	beq.n	800b59c <TIM_Base_SetConfig+0x40>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a3a      	ldr	r2, [pc, #232]	; (800b680 <TIM_Base_SetConfig+0x124>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d108      	bne.n	800b5ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a2f      	ldr	r2, [pc, #188]	; (800b670 <TIM_Base_SetConfig+0x114>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d01f      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5bc:	d01b      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a2c      	ldr	r2, [pc, #176]	; (800b674 <TIM_Base_SetConfig+0x118>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d017      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a2b      	ldr	r2, [pc, #172]	; (800b678 <TIM_Base_SetConfig+0x11c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d013      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a2a      	ldr	r2, [pc, #168]	; (800b67c <TIM_Base_SetConfig+0x120>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00f      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a29      	ldr	r2, [pc, #164]	; (800b680 <TIM_Base_SetConfig+0x124>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d00b      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a28      	ldr	r2, [pc, #160]	; (800b684 <TIM_Base_SetConfig+0x128>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d007      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a27      	ldr	r2, [pc, #156]	; (800b688 <TIM_Base_SetConfig+0x12c>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d003      	beq.n	800b5f6 <TIM_Base_SetConfig+0x9a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a26      	ldr	r2, [pc, #152]	; (800b68c <TIM_Base_SetConfig+0x130>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d108      	bne.n	800b608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	4313      	orrs	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a10      	ldr	r2, [pc, #64]	; (800b670 <TIM_Base_SetConfig+0x114>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d00f      	beq.n	800b654 <TIM_Base_SetConfig+0xf8>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a12      	ldr	r2, [pc, #72]	; (800b680 <TIM_Base_SetConfig+0x124>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d00b      	beq.n	800b654 <TIM_Base_SetConfig+0xf8>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a11      	ldr	r2, [pc, #68]	; (800b684 <TIM_Base_SetConfig+0x128>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d007      	beq.n	800b654 <TIM_Base_SetConfig+0xf8>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a10      	ldr	r2, [pc, #64]	; (800b688 <TIM_Base_SetConfig+0x12c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d003      	beq.n	800b654 <TIM_Base_SetConfig+0xf8>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a0f      	ldr	r2, [pc, #60]	; (800b68c <TIM_Base_SetConfig+0x130>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d103      	bne.n	800b65c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	615a      	str	r2, [r3, #20]
}
 800b662:	bf00      	nop
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	40010000 	.word	0x40010000
 800b674:	40000400 	.word	0x40000400
 800b678:	40000800 	.word	0x40000800
 800b67c:	40000c00 	.word	0x40000c00
 800b680:	40010400 	.word	0x40010400
 800b684:	40014000 	.word	0x40014000
 800b688:	40014400 	.word	0x40014400
 800b68c:	40014800 	.word	0x40014800

0800b690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	f023 0201 	bic.w	r2, r3, #1
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	011b      	lsls	r3, r3, #4
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f023 030a 	bic.w	r3, r3, #10
 800b6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b087      	sub	sp, #28
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	60b9      	str	r1, [r7, #8]
 800b6f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	f023 0210 	bic.w	r2, r3, #16
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	031b      	lsls	r3, r3, #12
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b72a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	011b      	lsls	r3, r3, #4
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	4313      	orrs	r3, r2
 800b734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	621a      	str	r2, [r3, #32]
}
 800b742:	bf00      	nop
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
	...

0800b750 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	4b09      	ldr	r3, [pc, #36]	; (800b788 <TIM_ITRx_SetConfig+0x38>)
 800b764:	4013      	ands	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	f043 0307 	orr.w	r3, r3, #7
 800b772:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	609a      	str	r2, [r3, #8]
}
 800b77a:	bf00      	nop
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	ffcfff8f 	.word	0xffcfff8f

0800b78c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	021a      	lsls	r2, r3, #8
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	609a      	str	r2, [r3, #8]
}
 800b7c0:	bf00      	nop
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d101      	bne.n	800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	e06d      	b.n	800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a30      	ldr	r2, [pc, #192]	; (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d004      	beq.n	800b818 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a2f      	ldr	r2, [pc, #188]	; (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d108      	bne.n	800b82a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b81e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b830:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a20      	ldr	r2, [pc, #128]	; (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d022      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b856:	d01d      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d018      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a1c      	ldr	r2, [pc, #112]	; (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d013      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a1a      	ldr	r2, [pc, #104]	; (800b8dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00e      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a15      	ldr	r2, [pc, #84]	; (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d009      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a16      	ldr	r2, [pc, #88]	; (800b8e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d004      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a15      	ldr	r2, [pc, #84]	; (800b8e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d10c      	bne.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b89a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	40010000 	.word	0x40010000
 800b8d0:	40010400 	.word	0x40010400
 800b8d4:	40000400 	.word	0x40000400
 800b8d8:	40000800 	.word	0x40000800
 800b8dc:	40000c00 	.word	0x40000c00
 800b8e0:	40001800 	.word	0x40001800
 800b8e4:	40014000 	.word	0x40014000

0800b8e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b924:	b084      	sub	sp, #16
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	f107 001c 	add.w	r0, r7, #28
 800b932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d120      	bne.n	800b97e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68da      	ldr	r2, [r3, #12]
 800b94c:	4b2a      	ldr	r3, [pc, #168]	; (800b9f8 <USB_CoreInit+0xd4>)
 800b94e:	4013      	ands	r3, r2
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b962:	2b01      	cmp	r3, #1
 800b964:	d105      	bne.n	800b972 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f001 faf8 	bl	800cf68 <USB_CoreReset>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]
 800b97c:	e01a      	b.n	800b9b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f001 faec 	bl	800cf68 <USB_CoreReset>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b9a6:	e005      	b.n	800b9b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d116      	bne.n	800b9e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9c8:	4b0c      	ldr	r3, [pc, #48]	; (800b9fc <USB_CoreInit+0xd8>)
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f043 0206 	orr.w	r2, r3, #6
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	f043 0220 	orr.w	r2, r3, #32
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9f4:	b004      	add	sp, #16
 800b9f6:	4770      	bx	lr
 800b9f8:	ffbdffbf 	.word	0xffbdffbf
 800b9fc:	03ee0000 	.word	0x03ee0000

0800ba00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d165      	bne.n	800bae0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	4a41      	ldr	r2, [pc, #260]	; (800bb1c <USB_SetTurnaroundTime+0x11c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d906      	bls.n	800ba2a <USB_SetTurnaroundTime+0x2a>
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4a40      	ldr	r2, [pc, #256]	; (800bb20 <USB_SetTurnaroundTime+0x120>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d202      	bcs.n	800ba2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ba24:	230f      	movs	r3, #15
 800ba26:	617b      	str	r3, [r7, #20]
 800ba28:	e062      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	4a3c      	ldr	r2, [pc, #240]	; (800bb20 <USB_SetTurnaroundTime+0x120>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d306      	bcc.n	800ba40 <USB_SetTurnaroundTime+0x40>
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	4a3b      	ldr	r2, [pc, #236]	; (800bb24 <USB_SetTurnaroundTime+0x124>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d202      	bcs.n	800ba40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ba3a:	230e      	movs	r3, #14
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	e057      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	4a38      	ldr	r2, [pc, #224]	; (800bb24 <USB_SetTurnaroundTime+0x124>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d306      	bcc.n	800ba56 <USB_SetTurnaroundTime+0x56>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	4a37      	ldr	r2, [pc, #220]	; (800bb28 <USB_SetTurnaroundTime+0x128>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d202      	bcs.n	800ba56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ba50:	230d      	movs	r3, #13
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	e04c      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	4a33      	ldr	r2, [pc, #204]	; (800bb28 <USB_SetTurnaroundTime+0x128>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d306      	bcc.n	800ba6c <USB_SetTurnaroundTime+0x6c>
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	4a32      	ldr	r2, [pc, #200]	; (800bb2c <USB_SetTurnaroundTime+0x12c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d802      	bhi.n	800ba6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ba66:	230c      	movs	r3, #12
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	e041      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	4a2f      	ldr	r2, [pc, #188]	; (800bb2c <USB_SetTurnaroundTime+0x12c>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d906      	bls.n	800ba82 <USB_SetTurnaroundTime+0x82>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4a2e      	ldr	r2, [pc, #184]	; (800bb30 <USB_SetTurnaroundTime+0x130>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d802      	bhi.n	800ba82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ba7c:	230b      	movs	r3, #11
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	e036      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4a2a      	ldr	r2, [pc, #168]	; (800bb30 <USB_SetTurnaroundTime+0x130>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d906      	bls.n	800ba98 <USB_SetTurnaroundTime+0x98>
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	4a29      	ldr	r2, [pc, #164]	; (800bb34 <USB_SetTurnaroundTime+0x134>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d802      	bhi.n	800ba98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ba92:	230a      	movs	r3, #10
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e02b      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	4a26      	ldr	r2, [pc, #152]	; (800bb34 <USB_SetTurnaroundTime+0x134>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d906      	bls.n	800baae <USB_SetTurnaroundTime+0xae>
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4a25      	ldr	r2, [pc, #148]	; (800bb38 <USB_SetTurnaroundTime+0x138>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d202      	bcs.n	800baae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800baa8:	2309      	movs	r3, #9
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	e020      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	4a21      	ldr	r2, [pc, #132]	; (800bb38 <USB_SetTurnaroundTime+0x138>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d306      	bcc.n	800bac4 <USB_SetTurnaroundTime+0xc4>
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4a20      	ldr	r2, [pc, #128]	; (800bb3c <USB_SetTurnaroundTime+0x13c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d802      	bhi.n	800bac4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800babe:	2308      	movs	r3, #8
 800bac0:	617b      	str	r3, [r7, #20]
 800bac2:	e015      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	4a1d      	ldr	r2, [pc, #116]	; (800bb3c <USB_SetTurnaroundTime+0x13c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d906      	bls.n	800bada <USB_SetTurnaroundTime+0xda>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	4a1c      	ldr	r2, [pc, #112]	; (800bb40 <USB_SetTurnaroundTime+0x140>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d202      	bcs.n	800bada <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bad4:	2307      	movs	r3, #7
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	e00a      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bada:	2306      	movs	r3, #6
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	e007      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bae6:	2309      	movs	r3, #9
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e001      	b.n	800baf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800baec:	2309      	movs	r3, #9
 800baee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	029b      	lsls	r3, r3, #10
 800bb04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	371c      	adds	r7, #28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	00d8acbf 	.word	0x00d8acbf
 800bb20:	00e4e1c0 	.word	0x00e4e1c0
 800bb24:	00f42400 	.word	0x00f42400
 800bb28:	01067380 	.word	0x01067380
 800bb2c:	011a499f 	.word	0x011a499f
 800bb30:	01312cff 	.word	0x01312cff
 800bb34:	014ca43f 	.word	0x014ca43f
 800bb38:	016e3600 	.word	0x016e3600
 800bb3c:	01a6ab1f 	.word	0x01a6ab1f
 800bb40:	01e84800 	.word	0x01e84800

0800bb44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	f043 0201 	orr.w	r2, r3, #1
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f023 0201 	bic.w	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d115      	bne.n	800bbd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	f7f5 fd3e 	bl	8001638 <HAL_Delay>
      ms++;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f001 f93f 	bl	800ce46 <USB_GetMode>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d01e      	beq.n	800bc0c <USB_SetCurrentMode+0x84>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b31      	cmp	r3, #49	; 0x31
 800bbd2:	d9f0      	bls.n	800bbb6 <USB_SetCurrentMode+0x2e>
 800bbd4:	e01a      	b.n	800bc0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d115      	bne.n	800bc08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbe8:	2001      	movs	r0, #1
 800bbea:	f7f5 fd25 	bl	8001638 <HAL_Delay>
      ms++;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f001 f926 	bl	800ce46 <USB_GetMode>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <USB_SetCurrentMode+0x84>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2b31      	cmp	r3, #49	; 0x31
 800bc04:	d9f0      	bls.n	800bbe8 <USB_SetCurrentMode+0x60>
 800bc06:	e001      	b.n	800bc0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e005      	b.n	800bc18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b32      	cmp	r3, #50	; 0x32
 800bc10:	d101      	bne.n	800bc16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e000      	b.n	800bc18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc20:	b084      	sub	sp, #16
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b086      	sub	sp, #24
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bc2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	613b      	str	r3, [r7, #16]
 800bc3e:	e009      	b.n	800bc54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	3340      	adds	r3, #64	; 0x40
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	3301      	adds	r3, #1
 800bc52:	613b      	str	r3, [r7, #16]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b0e      	cmp	r3, #14
 800bc58:	d9f2      	bls.n	800bc40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d11c      	bne.n	800bc9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc6e:	f043 0302 	orr.w	r3, r3, #2
 800bc72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	e005      	b.n	800bca6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcac:	461a      	mov	r2, r3
 800bcae:	2300      	movs	r3, #0
 800bcb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb8:	4619      	mov	r1, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	680b      	ldr	r3, [r1, #0]
 800bcc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d10c      	bne.n	800bce6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d104      	bne.n	800bcdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f965 	bl	800bfa4 <USB_SetDevSpeed>
 800bcda:	e008      	b.n	800bcee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bcdc:	2101      	movs	r1, #1
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f960 	bl	800bfa4 <USB_SetDevSpeed>
 800bce4:	e003      	b.n	800bcee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bce6:	2103      	movs	r1, #3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f95b 	bl	800bfa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bcee:	2110      	movs	r1, #16
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f8f3 	bl	800bedc <USB_FlushTxFifo>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f91f 	bl	800bf44 <USB_FlushRxFifo>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd16:	461a      	mov	r2, r3
 800bd18:	2300      	movs	r3, #0
 800bd1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd22:	461a      	mov	r2, r3
 800bd24:	2300      	movs	r3, #0
 800bd26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2e:	461a      	mov	r2, r3
 800bd30:	2300      	movs	r3, #0
 800bd32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd34:	2300      	movs	r3, #0
 800bd36:	613b      	str	r3, [r7, #16]
 800bd38:	e043      	b.n	800bdc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd50:	d118      	bne.n	800bd84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd64:	461a      	mov	r2, r3
 800bd66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	e013      	b.n	800bd96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	e008      	b.n	800bd96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd90:	461a      	mov	r2, r3
 800bd92:	2300      	movs	r3, #0
 800bd94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	015a      	lsls	r2, r3, #5
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda2:	461a      	mov	r2, r3
 800bda4:	2300      	movs	r3, #0
 800bda6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	015a      	lsls	r2, r3, #5
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bdba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	613b      	str	r3, [r7, #16]
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d3b7      	bcc.n	800bd3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdca:	2300      	movs	r3, #0
 800bdcc:	613b      	str	r3, [r7, #16]
 800bdce:	e043      	b.n	800be58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bde2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bde6:	d118      	bne.n	800be1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	e013      	b.n	800be2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	015a      	lsls	r2, r3, #5
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4413      	add	r3, r2
 800be0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be10:	461a      	mov	r2, r3
 800be12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	e008      	b.n	800be2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4413      	add	r3, r2
 800be22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be26:	461a      	mov	r2, r3
 800be28:	2300      	movs	r3, #0
 800be2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be38:	461a      	mov	r2, r3
 800be3a:	2300      	movs	r3, #0
 800be3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	015a      	lsls	r2, r3, #5
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	4413      	add	r3, r2
 800be46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4a:	461a      	mov	r2, r3
 800be4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	3301      	adds	r3, #1
 800be56:	613b      	str	r3, [r7, #16]
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	693a      	ldr	r2, [r7, #16]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d3b7      	bcc.n	800bdd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800be80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	f043 0210 	orr.w	r2, r3, #16
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	699a      	ldr	r2, [r3, #24]
 800be98:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <USB_DevInit+0x2b4>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d005      	beq.n	800beb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	f043 0208 	orr.w	r2, r3, #8
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800beb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d105      	bne.n	800bec4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	699a      	ldr	r2, [r3, #24]
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <USB_DevInit+0x2b8>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bed0:	b004      	add	sp, #16
 800bed2:	4770      	bx	lr
 800bed4:	803c3800 	.word	0x803c3800
 800bed8:	40000004 	.word	0x40000004

0800bedc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3301      	adds	r3, #1
 800beee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4a13      	ldr	r2, [pc, #76]	; (800bf40 <USB_FlushTxFifo+0x64>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d901      	bls.n	800befc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e01b      	b.n	800bf34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	daf2      	bge.n	800beea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	019b      	lsls	r3, r3, #6
 800bf0c:	f043 0220 	orr.w	r2, r3, #32
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3301      	adds	r3, #1
 800bf18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <USB_FlushTxFifo+0x64>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d901      	bls.n	800bf26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e006      	b.n	800bf34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0320 	and.w	r3, r3, #32
 800bf2e:	2b20      	cmp	r3, #32
 800bf30:	d0f0      	beq.n	800bf14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	00030d40 	.word	0x00030d40

0800bf44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3301      	adds	r3, #1
 800bf54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4a11      	ldr	r2, [pc, #68]	; (800bfa0 <USB_FlushRxFifo+0x5c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d901      	bls.n	800bf62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e018      	b.n	800bf94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	daf2      	bge.n	800bf50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2210      	movs	r2, #16
 800bf72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	3301      	adds	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	4a08      	ldr	r2, [pc, #32]	; (800bfa0 <USB_FlushRxFifo+0x5c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d901      	bls.n	800bf86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e006      	b.n	800bf94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	f003 0310 	and.w	r3, r3, #16
 800bf8e:	2b10      	cmp	r3, #16
 800bf90:	d0f0      	beq.n	800bf74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	00030d40 	.word	0x00030d40

0800bfa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	68f9      	ldr	r1, [r7, #12]
 800bfc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b087      	sub	sp, #28
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	f003 0306 	and.w	r3, r3, #6
 800bfee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d102      	bne.n	800bffc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bff6:	2300      	movs	r3, #0
 800bff8:	75fb      	strb	r3, [r7, #23]
 800bffa:	e00a      	b.n	800c012 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d002      	beq.n	800c008 <USB_GetDevSpeed+0x32>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b06      	cmp	r3, #6
 800c006:	d102      	bne.n	800c00e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c008:	2302      	movs	r3, #2
 800c00a:	75fb      	strb	r3, [r7, #23]
 800c00c:	e001      	b.n	800c012 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c00e:	230f      	movs	r3, #15
 800c010:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c012:	7dfb      	ldrb	r3, [r7, #23]
}
 800c014:	4618      	mov	r0, r3
 800c016:	371c      	adds	r7, #28
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	785b      	ldrb	r3, [r3, #1]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d139      	bne.n	800c0b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c042:	69da      	ldr	r2, [r3, #28]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	f003 030f 	and.w	r3, r3, #15
 800c04c:	2101      	movs	r1, #1
 800c04e:	fa01 f303 	lsl.w	r3, r1, r3
 800c052:	b29b      	uxth	r3, r3
 800c054:	68f9      	ldr	r1, [r7, #12]
 800c056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c05a:	4313      	orrs	r3, r2
 800c05c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d153      	bne.n	800c11c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	791b      	ldrb	r3, [r3, #4]
 800c08e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c090:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	059b      	lsls	r3, r3, #22
 800c096:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c098:	431a      	orrs	r2, r3
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	0159      	lsls	r1, r3, #5
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	440b      	add	r3, r1
 800c0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	4b20      	ldr	r3, [pc, #128]	; (800c12c <USB_ActivateEndpoint+0x10c>)
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	600b      	str	r3, [r1, #0]
 800c0ae:	e035      	b.n	800c11c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b6:	69da      	ldr	r2, [r3, #28]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	f003 030f 	and.w	r3, r3, #15
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0c6:	041b      	lsls	r3, r3, #16
 800c0c8:	68f9      	ldr	r1, [r7, #12]
 800c0ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d119      	bne.n	800c11c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	015a      	lsls	r2, r3, #5
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	791b      	ldrb	r3, [r3, #4]
 800c102:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c104:	430b      	orrs	r3, r1
 800c106:	431a      	orrs	r2, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	0159      	lsls	r1, r3, #5
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	440b      	add	r3, r1
 800c110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c114:	4619      	mov	r1, r3
 800c116:	4b05      	ldr	r3, [pc, #20]	; (800c12c <USB_ActivateEndpoint+0x10c>)
 800c118:	4313      	orrs	r3, r2
 800c11a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	10008000 	.word	0x10008000

0800c130 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	785b      	ldrb	r3, [r3, #1]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d161      	bne.n	800c210 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c15e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c162:	d11f      	bne.n	800c1a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	0151      	lsls	r1, r2, #5
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	440a      	add	r2, r1
 800c17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c17e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c182:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	0151      	lsls	r1, r2, #5
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	440a      	add	r2, r1
 800c19a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c19e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f003 030f 	and.w	r3, r3, #15
 800c1b4:	2101      	movs	r1, #1
 800c1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	43db      	mvns	r3, r3
 800c1be:	68f9      	ldr	r1, [r7, #12]
 800c1c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ce:	69da      	ldr	r2, [r3, #28]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	f003 030f 	and.w	r3, r3, #15
 800c1d8:	2101      	movs	r1, #1
 800c1da:	fa01 f303 	lsl.w	r3, r1, r3
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	43db      	mvns	r3, r3
 800c1e2:	68f9      	ldr	r1, [r7, #12]
 800c1e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	0159      	lsls	r1, r3, #5
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	440b      	add	r3, r1
 800c202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c206:	4619      	mov	r1, r3
 800c208:	4b35      	ldr	r3, [pc, #212]	; (800c2e0 <USB_DeactivateEndpoint+0x1b0>)
 800c20a:	4013      	ands	r3, r2
 800c20c:	600b      	str	r3, [r1, #0]
 800c20e:	e060      	b.n	800c2d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c226:	d11f      	bne.n	800c268 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	015a      	lsls	r2, r3, #5
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	0151      	lsls	r1, r2, #5
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	440a      	add	r2, r1
 800c23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c246:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	015a      	lsls	r2, r3, #5
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4413      	add	r3, r2
 800c250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	0151      	lsls	r1, r2, #5
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	440a      	add	r2, r1
 800c25e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	f003 030f 	and.w	r3, r3, #15
 800c278:	2101      	movs	r1, #1
 800c27a:	fa01 f303 	lsl.w	r3, r1, r3
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	43db      	mvns	r3, r3
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c288:	4013      	ands	r3, r2
 800c28a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c292:	69da      	ldr	r2, [r3, #28]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 030f 	and.w	r3, r3, #15
 800c29c:	2101      	movs	r1, #1
 800c29e:	fa01 f303 	lsl.w	r3, r1, r3
 800c2a2:	041b      	lsls	r3, r3, #16
 800c2a4:	43db      	mvns	r3, r3
 800c2a6:	68f9      	ldr	r1, [r7, #12]
 800c2a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	0159      	lsls	r1, r3, #5
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	440b      	add	r3, r1
 800c2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <USB_DeactivateEndpoint+0x1b4>)
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	ec337800 	.word	0xec337800
 800c2e4:	eff37800 	.word	0xeff37800

0800c2e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08a      	sub	sp, #40	; 0x28
 800c2ec:	af02      	add	r7, sp, #8
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	785b      	ldrb	r3, [r3, #1]
 800c304:	2b01      	cmp	r3, #1
 800c306:	f040 8181 	bne.w	800c60c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d132      	bne.n	800c378 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	015a      	lsls	r2, r3, #5
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	4413      	add	r3, r2
 800c31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31e:	691a      	ldr	r2, [r3, #16]
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	0159      	lsls	r1, r3, #5
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	440b      	add	r3, r1
 800c328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32c:	4619      	mov	r1, r3
 800c32e:	4ba5      	ldr	r3, [pc, #660]	; (800c5c4 <USB_EPStartXfer+0x2dc>)
 800c330:	4013      	ands	r3, r2
 800c332:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	0151      	lsls	r1, r2, #5
 800c346:	69fa      	ldr	r2, [r7, #28]
 800c348:	440a      	add	r2, r1
 800c34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c34e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c360:	691a      	ldr	r2, [r3, #16]
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	0159      	lsls	r1, r3, #5
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	440b      	add	r3, r1
 800c36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36e:	4619      	mov	r1, r3
 800c370:	4b95      	ldr	r3, [pc, #596]	; (800c5c8 <USB_EPStartXfer+0x2e0>)
 800c372:	4013      	ands	r3, r2
 800c374:	610b      	str	r3, [r1, #16]
 800c376:	e092      	b.n	800c49e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	015a      	lsls	r2, r3, #5
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	4413      	add	r3, r2
 800c380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c384:	691a      	ldr	r2, [r3, #16]
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	0159      	lsls	r1, r3, #5
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	440b      	add	r3, r1
 800c38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c392:	4619      	mov	r1, r3
 800c394:	4b8c      	ldr	r3, [pc, #560]	; (800c5c8 <USB_EPStartXfer+0x2e0>)
 800c396:	4013      	ands	r3, r2
 800c398:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	0159      	lsls	r1, r3, #5
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	440b      	add	r3, r1
 800c3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4b83      	ldr	r3, [pc, #524]	; (800c5c4 <USB_EPStartXfer+0x2dc>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d11a      	bne.n	800c3f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	691a      	ldr	r2, [r3, #16]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d903      	bls.n	800c3d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	0151      	lsls	r1, r2, #5
 800c3e8:	69fa      	ldr	r2, [r7, #28]
 800c3ea:	440a      	add	r2, r1
 800c3ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3f4:	6113      	str	r3, [r2, #16]
 800c3f6:	e01b      	b.n	800c430 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	6919      	ldr	r1, [r3, #16]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	440b      	add	r3, r1
 800c410:	1e59      	subs	r1, r3, #1
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	fbb1 f3f3 	udiv	r3, r1, r3
 800c41a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c41c:	4b6b      	ldr	r3, [pc, #428]	; (800c5cc <USB_EPStartXfer+0x2e4>)
 800c41e:	400b      	ands	r3, r1
 800c420:	69b9      	ldr	r1, [r7, #24]
 800c422:	0148      	lsls	r0, r1, #5
 800c424:	69f9      	ldr	r1, [r7, #28]
 800c426:	4401      	add	r1, r0
 800c428:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c42c:	4313      	orrs	r3, r2
 800c42e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	015a      	lsls	r2, r3, #5
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4413      	add	r3, r2
 800c438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c43c:	691a      	ldr	r2, [r3, #16]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c446:	69b9      	ldr	r1, [r7, #24]
 800c448:	0148      	lsls	r0, r1, #5
 800c44a:	69f9      	ldr	r1, [r7, #28]
 800c44c:	4401      	add	r1, r0
 800c44e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c452:	4313      	orrs	r3, r2
 800c454:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	791b      	ldrb	r3, [r3, #4]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d11f      	bne.n	800c49e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	015a      	lsls	r2, r3, #5
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	4413      	add	r3, r2
 800c466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	0151      	lsls	r1, r2, #5
 800c470:	69fa      	ldr	r2, [r7, #28]
 800c472:	440a      	add	r2, r1
 800c474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c478:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c47c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	015a      	lsls	r2, r3, #5
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	4413      	add	r3, r2
 800c486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	69ba      	ldr	r2, [r7, #24]
 800c48e:	0151      	lsls	r1, r2, #5
 800c490:	69fa      	ldr	r2, [r7, #28]
 800c492:	440a      	add	r2, r1
 800c494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c49c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d14b      	bne.n	800c53c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d009      	beq.n	800c4c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	015a      	lsls	r2, r3, #5
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	791b      	ldrb	r3, [r3, #4]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d128      	bne.n	800c51a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d110      	bne.n	800c4fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69ba      	ldr	r2, [r7, #24]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	69fa      	ldr	r2, [r7, #28]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	e00f      	b.n	800c51a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	69ba      	ldr	r2, [r7, #24]
 800c50a:	0151      	lsls	r1, r2, #5
 800c50c:	69fa      	ldr	r2, [r7, #28]
 800c50e:	440a      	add	r2, r1
 800c510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c518:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	0151      	lsls	r1, r2, #5
 800c52c:	69fa      	ldr	r2, [r7, #28]
 800c52e:	440a      	add	r2, r1
 800c530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	e16a      	b.n	800c812 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	0151      	lsls	r1, r2, #5
 800c54e:	69fa      	ldr	r2, [r7, #28]
 800c550:	440a      	add	r2, r1
 800c552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c55a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	791b      	ldrb	r3, [r3, #4]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d015      	beq.n	800c590 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 8152 	beq.w	800c812 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	2101      	movs	r1, #1
 800c580:	fa01 f303 	lsl.w	r3, r1, r3
 800c584:	69f9      	ldr	r1, [r7, #28]
 800c586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c58a:	4313      	orrs	r3, r2
 800c58c:	634b      	str	r3, [r1, #52]	; 0x34
 800c58e:	e140      	b.n	800c812 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d117      	bne.n	800c5d0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	0151      	lsls	r1, r2, #5
 800c5b2:	69fa      	ldr	r2, [r7, #28]
 800c5b4:	440a      	add	r2, r1
 800c5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5be:	6013      	str	r3, [r2, #0]
 800c5c0:	e016      	b.n	800c5f0 <USB_EPStartXfer+0x308>
 800c5c2:	bf00      	nop
 800c5c4:	e007ffff 	.word	0xe007ffff
 800c5c8:	fff80000 	.word	0xfff80000
 800c5cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	0151      	lsls	r1, r2, #5
 800c5e2:	69fa      	ldr	r2, [r7, #28]
 800c5e4:	440a      	add	r2, r1
 800c5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	68d9      	ldr	r1, [r3, #12]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	781a      	ldrb	r2, [r3, #0]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	b298      	uxth	r0, r3
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	4603      	mov	r3, r0
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f000 f9b9 	bl	800c97c <USB_WritePacket>
 800c60a:	e102      	b.n	800c812 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c618:	691a      	ldr	r2, [r3, #16]
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	0159      	lsls	r1, r3, #5
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	440b      	add	r3, r1
 800c622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c626:	4619      	mov	r1, r3
 800c628:	4b7c      	ldr	r3, [pc, #496]	; (800c81c <USB_EPStartXfer+0x534>)
 800c62a:	4013      	ands	r3, r2
 800c62c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63a:	691a      	ldr	r2, [r3, #16]
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	0159      	lsls	r1, r3, #5
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	440b      	add	r3, r1
 800c644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c648:	4619      	mov	r1, r3
 800c64a:	4b75      	ldr	r3, [pc, #468]	; (800c820 <USB_EPStartXfer+0x538>)
 800c64c:	4013      	ands	r3, r2
 800c64e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d12f      	bne.n	800c6b6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	689a      	ldr	r2, [r3, #8]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	689a      	ldr	r2, [r3, #8]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	4413      	add	r3, r2
 800c676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67a:	691a      	ldr	r2, [r3, #16]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c684:	69b9      	ldr	r1, [r7, #24]
 800c686:	0148      	lsls	r0, r1, #5
 800c688:	69f9      	ldr	r1, [r7, #28]
 800c68a:	4401      	add	r1, r0
 800c68c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c690:	4313      	orrs	r3, r2
 800c692:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	69ba      	ldr	r2, [r7, #24]
 800c6a4:	0151      	lsls	r1, r2, #5
 800c6a6:	69fa      	ldr	r2, [r7, #28]
 800c6a8:	440a      	add	r2, r1
 800c6aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6b2:	6113      	str	r3, [r2, #16]
 800c6b4:	e05f      	b.n	800c776 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d123      	bne.n	800c706 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	015a      	lsls	r2, r3, #5
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ca:	691a      	ldr	r2, [r3, #16]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6d4:	69b9      	ldr	r1, [r7, #24]
 800c6d6:	0148      	lsls	r0, r1, #5
 800c6d8:	69f9      	ldr	r1, [r7, #28]
 800c6da:	4401      	add	r1, r0
 800c6dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	0151      	lsls	r1, r2, #5
 800c6f6:	69fa      	ldr	r2, [r7, #28]
 800c6f8:	440a      	add	r2, r1
 800c6fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c702:	6113      	str	r3, [r2, #16]
 800c704:	e037      	b.n	800c776 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	691a      	ldr	r2, [r3, #16]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	4413      	add	r3, r2
 800c710:	1e5a      	subs	r2, r3, #1
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	fbb2 f3f3 	udiv	r3, r2, r3
 800c71a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	8afa      	ldrh	r2, [r7, #22]
 800c722:	fb03 f202 	mul.w	r2, r3, r2
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	4413      	add	r3, r2
 800c732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	8afb      	ldrh	r3, [r7, #22]
 800c73a:	04d9      	lsls	r1, r3, #19
 800c73c:	4b39      	ldr	r3, [pc, #228]	; (800c824 <USB_EPStartXfer+0x53c>)
 800c73e:	400b      	ands	r3, r1
 800c740:	69b9      	ldr	r1, [r7, #24]
 800c742:	0148      	lsls	r0, r1, #5
 800c744:	69f9      	ldr	r1, [r7, #28]
 800c746:	4401      	add	r1, r0
 800c748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c74c:	4313      	orrs	r3, r2
 800c74e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c75c:	691a      	ldr	r2, [r3, #16]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c766:	69b9      	ldr	r1, [r7, #24]
 800c768:	0148      	lsls	r0, r1, #5
 800c76a:	69f9      	ldr	r1, [r7, #28]
 800c76c:	4401      	add	r1, r0
 800c76e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c772:	4313      	orrs	r3, r2
 800c774:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d10d      	bne.n	800c798 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d009      	beq.n	800c798 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	68d9      	ldr	r1, [r3, #12]
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	015a      	lsls	r2, r3, #5
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	4413      	add	r3, r2
 800c790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c794:	460a      	mov	r2, r1
 800c796:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	791b      	ldrb	r3, [r3, #4]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d128      	bne.n	800c7f2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d110      	bne.n	800c7d2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	0151      	lsls	r1, r2, #5
 800c7c2:	69fa      	ldr	r2, [r7, #28]
 800c7c4:	440a      	add	r2, r1
 800c7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	e00f      	b.n	800c7f2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	69ba      	ldr	r2, [r7, #24]
 800c7e2:	0151      	lsls	r1, r2, #5
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	440a      	add	r2, r1
 800c7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	015a      	lsls	r2, r3, #5
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	0151      	lsls	r1, r2, #5
 800c804:	69fa      	ldr	r2, [r7, #28]
 800c806:	440a      	add	r2, r1
 800c808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c80c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c810:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3720      	adds	r7, #32
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	fff80000 	.word	0xfff80000
 800c820:	e007ffff 	.word	0xe007ffff
 800c824:	1ff80000 	.word	0x1ff80000

0800c828 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c828:	b480      	push	{r7}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	785b      	ldrb	r3, [r3, #1]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d14a      	bne.n	800c8dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c85a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c85e:	f040 8086 	bne.w	800c96e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	015a      	lsls	r2, r3, #5
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	4413      	add	r3, r2
 800c86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	0151      	lsls	r1, r2, #5
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	440a      	add	r2, r1
 800c87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c884:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	7812      	ldrb	r2, [r2, #0]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d902      	bls.n	800c8c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c8be:	e056      	b.n	800c96e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8d8:	d0e7      	beq.n	800c8aa <USB_EPStopXfer+0x82>
 800c8da:	e048      	b.n	800c96e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	015a      	lsls	r2, r3, #5
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8f4:	d13b      	bne.n	800c96e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	7812      	ldrb	r2, [r2, #0]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c918:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	683a      	ldr	r2, [r7, #0]
 800c92c:	7812      	ldrb	r2, [r2, #0]
 800c92e:	0151      	lsls	r1, r2, #5
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	440a      	add	r2, r1
 800c934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c93c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3301      	adds	r3, #1
 800c942:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f242 7210 	movw	r2, #10000	; 0x2710
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d902      	bls.n	800c954 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	75fb      	strb	r3, [r7, #23]
          break;
 800c952:	e00c      	b.n	800c96e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	015a      	lsls	r2, r3, #5
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	4413      	add	r3, r2
 800c95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c96c:	d0e7      	beq.n	800c93e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c970:	4618      	mov	r0, r3
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b089      	sub	sp, #36	; 0x24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4611      	mov	r1, r2
 800c988:	461a      	mov	r2, r3
 800c98a:	460b      	mov	r3, r1
 800c98c:	71fb      	strb	r3, [r7, #7]
 800c98e:	4613      	mov	r3, r2
 800c990:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c99a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d123      	bne.n	800c9ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c9a2:	88bb      	ldrh	r3, [r7, #4]
 800c9a4:	3303      	adds	r3, #3
 800c9a6:	089b      	lsrs	r3, r3, #2
 800c9a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	61bb      	str	r3, [r7, #24]
 800c9ae:	e018      	b.n	800c9e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	031a      	lsls	r2, r3, #12
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9bc:	461a      	mov	r2, r3
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	61bb      	str	r3, [r7, #24]
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d3e2      	bcc.n	800c9b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3724      	adds	r7, #36	; 0x24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b08b      	sub	sp, #44	; 0x2c
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	4613      	mov	r3, r2
 800ca04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ca0e:	88fb      	ldrh	r3, [r7, #6]
 800ca10:	089b      	lsrs	r3, r3, #2
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ca16:	88fb      	ldrh	r3, [r7, #6]
 800ca18:	f003 0303 	and.w	r3, r3, #3
 800ca1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	623b      	str	r3, [r7, #32]
 800ca22:	e014      	b.n	800ca4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	3301      	adds	r3, #1
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	3301      	adds	r3, #1
 800ca3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	3301      	adds	r3, #1
 800ca40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	3301      	adds	r3, #1
 800ca46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	623b      	str	r3, [r7, #32]
 800ca4e:	6a3a      	ldr	r2, [r7, #32]
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d3e6      	bcc.n	800ca24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ca56:	8bfb      	ldrh	r3, [r7, #30]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d01e      	beq.n	800ca9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca66:	461a      	mov	r2, r3
 800ca68:	f107 0310 	add.w	r3, r7, #16
 800ca6c:	6812      	ldr	r2, [r2, #0]
 800ca6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	fa22 f303 	lsr.w	r3, r2, r3
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	701a      	strb	r2, [r3, #0]
      i++;
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	3301      	adds	r3, #1
 800ca86:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca8e:	8bfb      	ldrh	r3, [r7, #30]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca94:	8bfb      	ldrh	r3, [r7, #30]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1ea      	bne.n	800ca70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	372c      	adds	r7, #44	; 0x2c
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d12c      	bne.n	800cb1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	015a      	lsls	r2, r3, #5
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	4413      	add	r3, r2
 800cacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	db12      	blt.n	800cafc <USB_EPSetStall+0x54>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00f      	beq.n	800cafc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	0151      	lsls	r1, r2, #5
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	440a      	add	r2, r1
 800caf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cafa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	0151      	lsls	r1, r2, #5
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	440a      	add	r2, r1
 800cb12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	e02b      	b.n	800cb76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	db12      	blt.n	800cb56 <USB_EPSetStall+0xae>
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00f      	beq.n	800cb56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	0151      	lsls	r1, r2, #5
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	440a      	add	r2, r1
 800cb4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	015a      	lsls	r2, r3, #5
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	0151      	lsls	r1, r2, #5
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	440a      	add	r2, r1
 800cb6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d128      	bne.n	800cbf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	0151      	lsls	r1, r2, #5
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	440a      	add	r2, r1
 800cbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	791b      	ldrb	r3, [r3, #4]
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	d003      	beq.n	800cbd0 <USB_EPClearStall+0x4c>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	791b      	ldrb	r3, [r3, #4]
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d138      	bne.n	800cc42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	015a      	lsls	r2, r3, #5
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	0151      	lsls	r1, r2, #5
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	440a      	add	r2, r1
 800cbe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	e027      	b.n	800cc42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	0151      	lsls	r1, r2, #5
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	440a      	add	r2, r1
 800cc08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	791b      	ldrb	r3, [r3, #4]
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d003      	beq.n	800cc22 <USB_EPClearStall+0x9e>
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	791b      	ldrb	r3, [r3, #4]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d10f      	bne.n	800cc42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	0151      	lsls	r1, r2, #5
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	440a      	add	r2, r1
 800cc38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	011b      	lsls	r3, r3, #4
 800cc80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc84:	68f9      	ldr	r1, [r7, #12]
 800cc86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ccb6:	f023 0303 	bic.w	r3, r3, #3
 800ccba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccca:	f023 0302 	bic.w	r3, r3, #2
 800ccce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ccf8:	f023 0303 	bic.w	r3, r3, #3
 800ccfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd0c:	f043 0302 	orr.w	r3, r3, #2
 800cd10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	699b      	ldr	r3, [r3, #24]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4013      	ands	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cd38:	68fb      	ldr	r3, [r7, #12]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3714      	adds	r7, #20
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b085      	sub	sp, #20
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	4013      	ands	r3, r2
 800cd68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	0c1b      	lsrs	r3, r3, #16
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b085      	sub	sp, #20
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	b29b      	uxth	r3, r3
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	4013      	ands	r3, r2
 800cdda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cddc:	68bb      	ldr	r3, [r7, #8]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b087      	sub	sp, #28
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	f003 030f 	and.w	r3, r3, #15
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	fa22 f303 	lsr.w	r3, r2, r3
 800ce1a:	01db      	lsls	r3, r3, #7
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ce24:	78fb      	ldrb	r3, [r7, #3]
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	4013      	ands	r3, r2
 800ce36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce38:	68bb      	ldr	r3, [r7, #8]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	f003 0301 	and.w	r3, r3, #1
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
	...

0800ce64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <USB_ActivateSetup+0x44>)
 800ce82:	4013      	ands	r3, r2
 800ce84:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	fffff800 	.word	0xfffff800

0800ceac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	333c      	adds	r3, #60	; 0x3c
 800cec2:	3304      	adds	r3, #4
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	4a26      	ldr	r2, [pc, #152]	; (800cf64 <USB_EP0_OutStart+0xb8>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d90a      	bls.n	800cee6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cedc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cee0:	d101      	bne.n	800cee6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	e037      	b.n	800cf56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceec:	461a      	mov	r2, r3
 800ceee:	2300      	movs	r3, #0
 800cef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf14:	f043 0318 	orr.w	r3, r3, #24
 800cf18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cf2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cf2e:	7afb      	ldrb	r3, [r7, #11]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d10f      	bne.n	800cf54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cf52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	371c      	adds	r7, #28
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	4f54300a 	.word	0x4f54300a

0800cf68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a13      	ldr	r2, [pc, #76]	; (800cfcc <USB_CoreReset+0x64>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d901      	bls.n	800cf86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e01b      	b.n	800cfbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	daf2      	bge.n	800cf74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f043 0201 	orr.w	r2, r3, #1
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4a09      	ldr	r2, [pc, #36]	; (800cfcc <USB_CoreReset+0x64>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d901      	bls.n	800cfb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cfac:	2303      	movs	r3, #3
 800cfae:	e006      	b.n	800cfbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d0f0      	beq.n	800cf9e <USB_CoreReset+0x36>

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	00030d40 	.word	0x00030d40

0800cfd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cfdc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cfe0:	f002 ff3c 	bl	800fe5c <USBD_static_malloc>
 800cfe4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d109      	bne.n	800d000 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	32b0      	adds	r2, #176	; 0xb0
 800cff6:	2100      	movs	r1, #0
 800cff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cffc:	2302      	movs	r3, #2
 800cffe:	e0d4      	b.n	800d1aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d000:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d004:	2100      	movs	r1, #0
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f003 fe11 	bl	8010c2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	32b0      	adds	r2, #176	; 0xb0
 800d016:	68f9      	ldr	r1, [r7, #12]
 800d018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	32b0      	adds	r2, #176	; 0xb0
 800d026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7c1b      	ldrb	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d138      	bne.n	800d0aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d038:	4b5e      	ldr	r3, [pc, #376]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d03a:	7819      	ldrb	r1, [r3, #0]
 800d03c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d040:	2202      	movs	r2, #2
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f002 fde7 	bl	800fc16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d048:	4b5a      	ldr	r3, [pc, #360]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f003 020f 	and.w	r2, r3, #15
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	4613      	mov	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4413      	add	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	440b      	add	r3, r1
 800d05c:	3324      	adds	r3, #36	; 0x24
 800d05e:	2201      	movs	r2, #1
 800d060:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d062:	4b55      	ldr	r3, [pc, #340]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d064:	7819      	ldrb	r1, [r3, #0]
 800d066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d06a:	2202      	movs	r2, #2
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f002 fdd2 	bl	800fc16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d072:	4b51      	ldr	r3, [pc, #324]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	f003 020f 	and.w	r2, r3, #15
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	440b      	add	r3, r1
 800d086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d08a:	2201      	movs	r2, #1
 800d08c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d08e:	4b4b      	ldr	r3, [pc, #300]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	f003 020f 	and.w	r2, r3, #15
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	3326      	adds	r3, #38	; 0x26
 800d0a4:	2210      	movs	r2, #16
 800d0a6:	801a      	strh	r2, [r3, #0]
 800d0a8:	e035      	b.n	800d116 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d0aa:	4b42      	ldr	r3, [pc, #264]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d0ac:	7819      	ldrb	r1, [r3, #0]
 800d0ae:	2340      	movs	r3, #64	; 0x40
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f002 fdaf 	bl	800fc16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d0b8:	4b3e      	ldr	r3, [pc, #248]	; (800d1b4 <USBD_CDC_Init+0x1e4>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	f003 020f 	and.w	r2, r3, #15
 800d0c0:	6879      	ldr	r1, [r7, #4]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	440b      	add	r3, r1
 800d0cc:	3324      	adds	r3, #36	; 0x24
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d0d2:	4b39      	ldr	r3, [pc, #228]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d0d4:	7819      	ldrb	r1, [r3, #0]
 800d0d6:	2340      	movs	r3, #64	; 0x40
 800d0d8:	2202      	movs	r2, #2
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f002 fd9b 	bl	800fc16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d0e0:	4b35      	ldr	r3, [pc, #212]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	f003 020f 	and.w	r2, r3, #15
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	440b      	add	r3, r1
 800d0f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0fc:	4b2f      	ldr	r3, [pc, #188]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 020f 	and.w	r2, r3, #15
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	3326      	adds	r3, #38	; 0x26
 800d112:	2210      	movs	r2, #16
 800d114:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d116:	4b29      	ldr	r3, [pc, #164]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d118:	7819      	ldrb	r1, [r3, #0]
 800d11a:	2308      	movs	r3, #8
 800d11c:	2203      	movs	r2, #3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f002 fd79 	bl	800fc16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d124:	4b25      	ldr	r3, [pc, #148]	; (800d1bc <USBD_CDC_Init+0x1ec>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f003 020f 	and.w	r2, r3, #15
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	440b      	add	r3, r1
 800d138:	3324      	adds	r3, #36	; 0x24
 800d13a:	2201      	movs	r2, #1
 800d13c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	33b0      	adds	r3, #176	; 0xb0
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d174:	2302      	movs	r3, #2
 800d176:	e018      	b.n	800d1aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7c1b      	ldrb	r3, [r3, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d180:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d182:	7819      	ldrb	r1, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f002 fe30 	bl	800fdf4 <USBD_LL_PrepareReceive>
 800d194:	e008      	b.n	800d1a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d196:	4b08      	ldr	r3, [pc, #32]	; (800d1b8 <USBD_CDC_Init+0x1e8>)
 800d198:	7819      	ldrb	r1, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1a0:	2340      	movs	r3, #64	; 0x40
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f002 fe26 	bl	800fdf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	24000097 	.word	0x24000097
 800d1b8:	24000098 	.word	0x24000098
 800d1bc:	24000099 	.word	0x24000099

0800d1c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d1cc:	4b3a      	ldr	r3, [pc, #232]	; (800d2b8 <USBD_CDC_DeInit+0xf8>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f002 fd45 	bl	800fc62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d1d8:	4b37      	ldr	r3, [pc, #220]	; (800d2b8 <USBD_CDC_DeInit+0xf8>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f003 020f 	and.w	r2, r3, #15
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	3324      	adds	r3, #36	; 0x24
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d1f2:	4b32      	ldr	r3, [pc, #200]	; (800d2bc <USBD_CDC_DeInit+0xfc>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f002 fd32 	bl	800fc62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d1fe:	4b2f      	ldr	r3, [pc, #188]	; (800d2bc <USBD_CDC_DeInit+0xfc>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 020f 	and.w	r2, r3, #15
 800d206:	6879      	ldr	r1, [r7, #4]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d216:	2200      	movs	r2, #0
 800d218:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d21a:	4b29      	ldr	r3, [pc, #164]	; (800d2c0 <USBD_CDC_DeInit+0x100>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f002 fd1e 	bl	800fc62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d226:	4b26      	ldr	r3, [pc, #152]	; (800d2c0 <USBD_CDC_DeInit+0x100>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	f003 020f 	and.w	r2, r3, #15
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	440b      	add	r3, r1
 800d23a:	3324      	adds	r3, #36	; 0x24
 800d23c:	2200      	movs	r2, #0
 800d23e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d240:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <USBD_CDC_DeInit+0x100>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	f003 020f 	and.w	r2, r3, #15
 800d248:	6879      	ldr	r1, [r7, #4]
 800d24a:	4613      	mov	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4413      	add	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	440b      	add	r3, r1
 800d254:	3326      	adds	r3, #38	; 0x26
 800d256:	2200      	movs	r2, #0
 800d258:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	32b0      	adds	r2, #176	; 0xb0
 800d264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01f      	beq.n	800d2ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	33b0      	adds	r3, #176	; 0xb0
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	32b0      	adds	r2, #176	; 0xb0
 800d28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d28e:	4618      	mov	r0, r3
 800d290:	f002 fdf2 	bl	800fe78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	32b0      	adds	r2, #176	; 0xb0
 800d29e:	2100      	movs	r1, #0
 800d2a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	24000097 	.word	0x24000097
 800d2bc:	24000098 	.word	0x24000098
 800d2c0:	24000099 	.word	0x24000099

0800d2c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	32b0      	adds	r2, #176	; 0xb0
 800d2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e0bf      	b.n	800d474 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d050      	beq.n	800d3a2 <USBD_CDC_Setup+0xde>
 800d300:	2b20      	cmp	r3, #32
 800d302:	f040 80af 	bne.w	800d464 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	88db      	ldrh	r3, [r3, #6]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d03a      	beq.n	800d384 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	b25b      	sxtb	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	da1b      	bge.n	800d350 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	33b0      	adds	r3, #176	; 0xb0
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d32e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	88d2      	ldrh	r2, [r2, #6]
 800d334:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	88db      	ldrh	r3, [r3, #6]
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	bf28      	it	cs
 800d33e:	2307      	movcs	r3, #7
 800d340:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	89fa      	ldrh	r2, [r7, #14]
 800d346:	4619      	mov	r1, r3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f001 fdb3 	bl	800eeb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d34e:	e090      	b.n	800d472 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	785a      	ldrb	r2, [r3, #1]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	88db      	ldrh	r3, [r3, #6]
 800d35e:	2b3f      	cmp	r3, #63	; 0x3f
 800d360:	d803      	bhi.n	800d36a <USBD_CDC_Setup+0xa6>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	88db      	ldrh	r3, [r3, #6]
 800d366:	b2da      	uxtb	r2, r3
 800d368:	e000      	b.n	800d36c <USBD_CDC_Setup+0xa8>
 800d36a:	2240      	movs	r2, #64	; 0x40
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d372:	6939      	ldr	r1, [r7, #16]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d37a:	461a      	mov	r2, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 fdc5 	bl	800ef0c <USBD_CtlPrepareRx>
      break;
 800d382:	e076      	b.n	800d472 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	33b0      	adds	r3, #176	; 0xb0
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	7850      	ldrb	r0, [r2, #1]
 800d39a:	2200      	movs	r2, #0
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	4798      	blx	r3
      break;
 800d3a0:	e067      	b.n	800d472 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	2b0b      	cmp	r3, #11
 800d3a8:	d851      	bhi.n	800d44e <USBD_CDC_Setup+0x18a>
 800d3aa:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <USBD_CDC_Setup+0xec>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3e1 	.word	0x0800d3e1
 800d3b4:	0800d45d 	.word	0x0800d45d
 800d3b8:	0800d44f 	.word	0x0800d44f
 800d3bc:	0800d44f 	.word	0x0800d44f
 800d3c0:	0800d44f 	.word	0x0800d44f
 800d3c4:	0800d44f 	.word	0x0800d44f
 800d3c8:	0800d44f 	.word	0x0800d44f
 800d3cc:	0800d44f 	.word	0x0800d44f
 800d3d0:	0800d44f 	.word	0x0800d44f
 800d3d4:	0800d44f 	.word	0x0800d44f
 800d3d8:	0800d40b 	.word	0x0800d40b
 800d3dc:	0800d435 	.word	0x0800d435
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d107      	bne.n	800d3fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3ec:	f107 030a 	add.w	r3, r7, #10
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 fd5d 	bl	800eeb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3fa:	e032      	b.n	800d462 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 fce7 	bl	800edd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	75fb      	strb	r3, [r7, #23]
          break;
 800d408:	e02b      	b.n	800d462 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d410:	b2db      	uxtb	r3, r3
 800d412:	2b03      	cmp	r3, #3
 800d414:	d107      	bne.n	800d426 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d416:	f107 030d 	add.w	r3, r7, #13
 800d41a:	2201      	movs	r2, #1
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f001 fd48 	bl	800eeb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d424:	e01d      	b.n	800d462 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 fcd2 	bl	800edd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d42e:	2303      	movs	r3, #3
 800d430:	75fb      	strb	r3, [r7, #23]
          break;
 800d432:	e016      	b.n	800d462 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d00f      	beq.n	800d460 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f001 fcc5 	bl	800edd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d448:	2303      	movs	r3, #3
 800d44a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d44c:	e008      	b.n	800d460 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 fcbe 	bl	800edd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d456:	2303      	movs	r3, #3
 800d458:	75fb      	strb	r3, [r7, #23]
          break;
 800d45a:	e002      	b.n	800d462 <USBD_CDC_Setup+0x19e>
          break;
 800d45c:	bf00      	nop
 800d45e:	e008      	b.n	800d472 <USBD_CDC_Setup+0x1ae>
          break;
 800d460:	bf00      	nop
      }
      break;
 800d462:	e006      	b.n	800d472 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d464:	6839      	ldr	r1, [r7, #0]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fcb3 	bl	800edd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d46c:	2303      	movs	r3, #3
 800d46e:	75fb      	strb	r3, [r7, #23]
      break;
 800d470:	bf00      	nop
  }

  return (uint8_t)ret;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d48e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	32b0      	adds	r2, #176	; 0xb0
 800d49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e065      	b.n	800d572 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	32b0      	adds	r2, #176	; 0xb0
 800d4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	f003 020f 	and.w	r2, r3, #15
 800d4bc:	6879      	ldr	r1, [r7, #4]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	440b      	add	r3, r1
 800d4c8:	3318      	adds	r3, #24
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d02f      	beq.n	800d530 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	f003 020f 	and.w	r2, r3, #15
 800d4d6:	6879      	ldr	r1, [r7, #4]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	440b      	add	r3, r1
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	78fb      	ldrb	r3, [r7, #3]
 800d4e8:	f003 010f 	and.w	r1, r3, #15
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	440b      	add	r3, r1
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4403      	add	r3, r0
 800d4f8:	3344      	adds	r3, #68	; 0x44
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800d500:	fb01 f303 	mul.w	r3, r1, r3
 800d504:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d506:	2b00      	cmp	r3, #0
 800d508:	d112      	bne.n	800d530 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d50a:	78fb      	ldrb	r3, [r7, #3]
 800d50c:	f003 020f 	and.w	r2, r3, #15
 800d510:	6879      	ldr	r1, [r7, #4]
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	440b      	add	r3, r1
 800d51c:	3318      	adds	r3, #24
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d522:	78f9      	ldrb	r1, [r7, #3]
 800d524:	2300      	movs	r3, #0
 800d526:	2200      	movs	r2, #0
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f002 fc42 	bl	800fdb2 <USBD_LL_Transmit>
 800d52e:	e01f      	b.n	800d570 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2200      	movs	r2, #0
 800d534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	33b0      	adds	r3, #176	; 0xb0
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4413      	add	r3, r2
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d010      	beq.n	800d570 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	33b0      	adds	r3, #176	; 0xb0
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d56c:	78fa      	ldrb	r2, [r7, #3]
 800d56e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b084      	sub	sp, #16
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	32b0      	adds	r2, #176	; 0xb0
 800d590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d594:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	32b0      	adds	r2, #176	; 0xb0
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e01a      	b.n	800d5e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d5ac:	78fb      	ldrb	r3, [r7, #3]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f002 fc40 	bl	800fe36 <USBD_LL_GetRxDataSize>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	33b0      	adds	r3, #176	; 0xb0
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d5dc:	4611      	mov	r1, r2
 800d5de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	32b0      	adds	r2, #176	; 0xb0
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d608:	2303      	movs	r3, #3
 800d60a:	e025      	b.n	800d658 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	33b0      	adds	r3, #176	; 0xb0
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01a      	beq.n	800d656 <USBD_CDC_EP0_RxReady+0x6c>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d626:	2bff      	cmp	r3, #255	; 0xff
 800d628:	d015      	beq.n	800d656 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	33b0      	adds	r3, #176	; 0xb0
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d642:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d64a:	b292      	uxth	r2, r2
 800d64c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	22ff      	movs	r2, #255	; 0xff
 800d652:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d668:	2182      	movs	r1, #130	; 0x82
 800d66a:	4818      	ldr	r0, [pc, #96]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d66c:	f000 fd4f 	bl	800e10e <USBD_GetEpDesc>
 800d670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d672:	2101      	movs	r1, #1
 800d674:	4815      	ldr	r0, [pc, #84]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d676:	f000 fd4a 	bl	800e10e <USBD_GetEpDesc>
 800d67a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d67c:	2181      	movs	r1, #129	; 0x81
 800d67e:	4813      	ldr	r0, [pc, #76]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d680:	f000 fd45 	bl	800e10e <USBD_GetEpDesc>
 800d684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2210      	movs	r2, #16
 800d690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d006      	beq.n	800d6a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6a0:	711a      	strb	r2, [r3, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d006      	beq.n	800d6ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6b4:	711a      	strb	r2, [r3, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2243      	movs	r2, #67	; 0x43
 800d6be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6c0:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3718      	adds	r7, #24
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	24000054 	.word	0x24000054

0800d6d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d6d8:	2182      	movs	r1, #130	; 0x82
 800d6da:	4818      	ldr	r0, [pc, #96]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6dc:	f000 fd17 	bl	800e10e <USBD_GetEpDesc>
 800d6e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	4815      	ldr	r0, [pc, #84]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6e6:	f000 fd12 	bl	800e10e <USBD_GetEpDesc>
 800d6ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d6ec:	2181      	movs	r1, #129	; 0x81
 800d6ee:	4813      	ldr	r0, [pc, #76]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6f0:	f000 fd0d 	bl	800e10e <USBD_GetEpDesc>
 800d6f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2210      	movs	r2, #16
 800d700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2200      	movs	r2, #0
 800d70c:	711a      	strb	r2, [r3, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	f042 0202 	orr.w	r2, r2, #2
 800d714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	711a      	strb	r2, [r3, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f042 0202 	orr.w	r2, r2, #2
 800d728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2243      	movs	r2, #67	; 0x43
 800d72e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d730:	4b02      	ldr	r3, [pc, #8]	; (800d73c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	24000054 	.word	0x24000054

0800d740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d748:	2182      	movs	r1, #130	; 0x82
 800d74a:	4818      	ldr	r0, [pc, #96]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d74c:	f000 fcdf 	bl	800e10e <USBD_GetEpDesc>
 800d750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d752:	2101      	movs	r1, #1
 800d754:	4815      	ldr	r0, [pc, #84]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d756:	f000 fcda 	bl	800e10e <USBD_GetEpDesc>
 800d75a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d75c:	2181      	movs	r1, #129	; 0x81
 800d75e:	4813      	ldr	r0, [pc, #76]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d760:	f000 fcd5 	bl	800e10e <USBD_GetEpDesc>
 800d764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	2210      	movs	r2, #16
 800d770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d006      	beq.n	800d786 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d780:	711a      	strb	r2, [r3, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d006      	beq.n	800d79a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d794:	711a      	strb	r2, [r3, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2243      	movs	r2, #67	; 0x43
 800d79e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7a0:	4b02      	ldr	r3, [pc, #8]	; (800d7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3718      	adds	r7, #24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	24000054 	.word	0x24000054

0800d7b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	220a      	movs	r2, #10
 800d7bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d7be:	4b03      	ldr	r3, [pc, #12]	; (800d7cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	24000010 	.word	0x24000010

0800d7d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e009      	b.n	800d7f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	33b0      	adds	r3, #176	; 0xb0
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d804:	b480      	push	{r7}
 800d806:	b087      	sub	sp, #28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	32b0      	adds	r2, #176	; 0xb0
 800d81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d81e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d101      	bne.n	800d82a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d826:	2303      	movs	r3, #3
 800d828:	e008      	b.n	800d83c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	371c      	adds	r7, #28
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	32b0      	adds	r2, #176	; 0xb0
 800d85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d860:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d868:	2303      	movs	r3, #3
 800d86a:	e004      	b.n	800d876 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
	...

0800d884 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	32b0      	adds	r2, #176	; 0xb0
 800d896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d89a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d89c:	2301      	movs	r3, #1
 800d89e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	e025      	b.n	800d8f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d11f      	bne.n	800d8f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d8bc:	4b10      	ldr	r3, [pc, #64]	; (800d900 <USBD_CDC_TransmitPacket+0x7c>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	f003 020f 	and.w	r2, r3, #15
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	4413      	add	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4403      	add	r3, r0
 800d8d6:	3318      	adds	r3, #24
 800d8d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d8da:	4b09      	ldr	r3, [pc, #36]	; (800d900 <USBD_CDC_TransmitPacket+0x7c>)
 800d8dc:	7819      	ldrb	r1, [r3, #0]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f002 fa61 	bl	800fdb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	24000097 	.word	0x24000097

0800d904 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	32b0      	adds	r2, #176	; 0xb0
 800d916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	32b0      	adds	r2, #176	; 0xb0
 800d926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d92e:	2303      	movs	r3, #3
 800d930:	e018      	b.n	800d964 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	7c1b      	ldrb	r3, [r3, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10a      	bne.n	800d950 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d93a:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <USBD_CDC_ReceivePacket+0x68>)
 800d93c:	7819      	ldrb	r1, [r3, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d944:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f002 fa53 	bl	800fdf4 <USBD_LL_PrepareReceive>
 800d94e:	e008      	b.n	800d962 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d950:	4b06      	ldr	r3, [pc, #24]	; (800d96c <USBD_CDC_ReceivePacket+0x68>)
 800d952:	7819      	ldrb	r1, [r3, #0]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d95a:	2340      	movs	r3, #64	; 0x40
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f002 fa49 	bl	800fdf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	24000098 	.word	0x24000098

0800d970 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	4613      	mov	r3, r2
 800d97c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d101      	bne.n	800d988 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d984:	2303      	movs	r3, #3
 800d986:	e01f      	b.n	800d9c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	79fa      	ldrb	r2, [r7, #7]
 800d9ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f002 f8bf 	bl	800fb40 <USBD_LL_Init>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	e025      	b.n	800da34 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	683a      	ldr	r2, [r7, #0]
 800d9ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	32ae      	adds	r2, #174	; 0xae
 800d9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00f      	beq.n	800da24 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	32ae      	adds	r2, #174	; 0xae
 800da0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	f107 020e 	add.w	r2, r7, #14
 800da18:	4610      	mov	r0, r2
 800da1a:	4798      	blx	r3
 800da1c:	4602      	mov	r2, r0
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f002 f8cb 	bl	800fbe0 <USBD_LL_Start>
 800da4a:	4603      	mov	r3, r0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da5c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	460b      	mov	r3, r1
 800da74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da76:	2300      	movs	r3, #0
 800da78:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da80:	2b00      	cmp	r3, #0
 800da82:	d009      	beq.n	800da98 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	78fa      	ldrb	r2, [r7, #3]
 800da8e:	4611      	mov	r1, r2
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	4798      	blx	r3
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da98:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	78fa      	ldrb	r2, [r7, #3]
 800dabc:	4611      	mov	r1, r2
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	4798      	blx	r3
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dac8:	2303      	movs	r3, #3
 800daca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f001 f938 	bl	800ed5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dafc:	461a      	mov	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db0a:	f003 031f 	and.w	r3, r3, #31
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d01a      	beq.n	800db48 <USBD_LL_SetupStage+0x72>
 800db12:	2b02      	cmp	r3, #2
 800db14:	d822      	bhi.n	800db5c <USBD_LL_SetupStage+0x86>
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <USBD_LL_SetupStage+0x4a>
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d00a      	beq.n	800db34 <USBD_LL_SetupStage+0x5e>
 800db1e:	e01d      	b.n	800db5c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fb65 	bl	800e1f8 <USBD_StdDevReq>
 800db2e:	4603      	mov	r3, r0
 800db30:	73fb      	strb	r3, [r7, #15]
      break;
 800db32:	e020      	b.n	800db76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fbcd 	bl	800e2dc <USBD_StdItfReq>
 800db42:	4603      	mov	r3, r0
 800db44:	73fb      	strb	r3, [r7, #15]
      break;
 800db46:	e016      	b.n	800db76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fc2f 	bl	800e3b4 <USBD_StdEPReq>
 800db56:	4603      	mov	r3, r0
 800db58:	73fb      	strb	r3, [r7, #15]
      break;
 800db5a:	e00c      	b.n	800db76 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db66:	b2db      	uxtb	r3, r3
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f002 f898 	bl	800fca0 <USBD_LL_StallEP>
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]
      break;
 800db74:	bf00      	nop
  }

  return ret;
 800db76:	7bfb      	ldrb	r3, [r7, #15]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	460b      	mov	r3, r1
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800db92:	7afb      	ldrb	r3, [r7, #11]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d16e      	bne.n	800dc76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800db9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dba6:	2b03      	cmp	r3, #3
 800dba8:	f040 8098 	bne.w	800dcdc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	689a      	ldr	r2, [r3, #8]
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d913      	bls.n	800dbe0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	689a      	ldr	r2, [r3, #8]
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	1ad2      	subs	r2, r2, r3
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	bf28      	it	cs
 800dbd2:	4613      	movcs	r3, r2
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	6879      	ldr	r1, [r7, #4]
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f001 f9b4 	bl	800ef46 <USBD_CtlContinueRx>
 800dbde:	e07d      	b.n	800dcdc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbe6:	f003 031f 	and.w	r3, r3, #31
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d014      	beq.n	800dc18 <USBD_LL_DataOutStage+0x98>
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d81d      	bhi.n	800dc2e <USBD_LL_DataOutStage+0xae>
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d002      	beq.n	800dbfc <USBD_LL_DataOutStage+0x7c>
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d003      	beq.n	800dc02 <USBD_LL_DataOutStage+0x82>
 800dbfa:	e018      	b.n	800dc2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	75bb      	strb	r3, [r7, #22]
            break;
 800dc00:	e018      	b.n	800dc34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f000 fa64 	bl	800e0da <USBD_CoreFindIF>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75bb      	strb	r3, [r7, #22]
            break;
 800dc16:	e00d      	b.n	800dc34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	4619      	mov	r1, r3
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f000 fa66 	bl	800e0f4 <USBD_CoreFindEP>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	75bb      	strb	r3, [r7, #22]
            break;
 800dc2c:	e002      	b.n	800dc34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	75bb      	strb	r3, [r7, #22]
            break;
 800dc32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dc34:	7dbb      	ldrb	r3, [r7, #22]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d119      	bne.n	800dc6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d113      	bne.n	800dc6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dc46:	7dba      	ldrb	r2, [r7, #22]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	32ae      	adds	r2, #174	; 0xae
 800dc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dc56:	7dba      	ldrb	r2, [r7, #22]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dc5e:	7dba      	ldrb	r2, [r7, #22]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	32ae      	adds	r2, #174	; 0xae
 800dc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f001 f97a 	bl	800ef68 <USBD_CtlSendStatus>
 800dc74:	e032      	b.n	800dcdc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dc76:	7afb      	ldrb	r3, [r7, #11]
 800dc78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	4619      	mov	r1, r3
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f000 fa37 	bl	800e0f4 <USBD_CoreFindEP>
 800dc86:	4603      	mov	r3, r0
 800dc88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc8a:	7dbb      	ldrb	r3, [r7, #22]
 800dc8c:	2bff      	cmp	r3, #255	; 0xff
 800dc8e:	d025      	beq.n	800dcdc <USBD_LL_DataOutStage+0x15c>
 800dc90:	7dbb      	ldrb	r3, [r7, #22]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d122      	bne.n	800dcdc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d117      	bne.n	800dcd2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dca2:	7dba      	ldrb	r2, [r7, #22]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	32ae      	adds	r2, #174	; 0xae
 800dca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00f      	beq.n	800dcd2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dcb2:	7dba      	ldrb	r2, [r7, #22]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dcba:	7dba      	ldrb	r2, [r7, #22]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	32ae      	adds	r2, #174	; 0xae
 800dcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	7afa      	ldrb	r2, [r7, #11]
 800dcc8:	4611      	mov	r1, r2
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	4798      	blx	r3
 800dcce:	4603      	mov	r3, r0
 800dcd0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	e000      	b.n	800dcde <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b086      	sub	sp, #24
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	60f8      	str	r0, [r7, #12]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	607a      	str	r2, [r7, #4]
 800dcf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dcf4:	7afb      	ldrb	r3, [r7, #11]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d16f      	bne.n	800ddda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3314      	adds	r3, #20
 800dcfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d15a      	bne.n	800ddc0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	689a      	ldr	r2, [r3, #8]
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d914      	bls.n	800dd40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	689a      	ldr	r2, [r3, #8]
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	1ad2      	subs	r2, r2, r3
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f001 f8dc 	bl	800eeea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd32:	2300      	movs	r3, #0
 800dd34:	2200      	movs	r2, #0
 800dd36:	2100      	movs	r1, #0
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f002 f85b 	bl	800fdf4 <USBD_LL_PrepareReceive>
 800dd3e:	e03f      	b.n	800ddc0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	68da      	ldr	r2, [r3, #12]
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d11c      	bne.n	800dd86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d316      	bcc.n	800dd86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d20f      	bcs.n	800dd86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd66:	2200      	movs	r2, #0
 800dd68:	2100      	movs	r1, #0
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f001 f8bd 	bl	800eeea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd78:	2300      	movs	r3, #0
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f002 f838 	bl	800fdf4 <USBD_LL_PrepareReceive>
 800dd84:	e01c      	b.n	800ddc0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d10f      	bne.n	800ddb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d009      	beq.n	800ddb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddb2:	2180      	movs	r1, #128	; 0x80
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f001 ff73 	bl	800fca0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f001 f8e7 	bl	800ef8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d03a      	beq.n	800de40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff fe42 	bl	800da54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ddd8:	e032      	b.n	800de40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ddda:	7afb      	ldrb	r3, [r7, #11]
 800dddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	4619      	mov	r1, r3
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f000 f985 	bl	800e0f4 <USBD_CoreFindEP>
 800ddea:	4603      	mov	r3, r0
 800ddec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
 800ddf0:	2bff      	cmp	r3, #255	; 0xff
 800ddf2:	d025      	beq.n	800de40 <USBD_LL_DataInStage+0x15a>
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d122      	bne.n	800de40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b03      	cmp	r3, #3
 800de04:	d11c      	bne.n	800de40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de06:	7dfa      	ldrb	r2, [r7, #23]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	32ae      	adds	r2, #174	; 0xae
 800de0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d014      	beq.n	800de40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800de16:	7dfa      	ldrb	r2, [r7, #23]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800de1e:	7dfa      	ldrb	r2, [r7, #23]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	32ae      	adds	r2, #174	; 0xae
 800de24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	7afa      	ldrb	r2, [r7, #11]
 800de2c:	4611      	mov	r1, r2
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	4798      	blx	r3
 800de32:	4603      	mov	r3, r0
 800de34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800de36:	7dbb      	ldrb	r3, [r7, #22]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800de3c:	7dbb      	ldrb	r3, [r7, #22]
 800de3e:	e000      	b.n	800de42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b084      	sub	sp, #16
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800de52:	2300      	movs	r3, #0
 800de54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de82:	2b00      	cmp	r3, #0
 800de84:	d014      	beq.n	800deb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00e      	beq.n	800deb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	6852      	ldr	r2, [r2, #4]
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	4611      	mov	r1, r2
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	4798      	blx	r3
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800deac:	2303      	movs	r3, #3
 800deae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	2200      	movs	r2, #0
 800deb4:	2100      	movs	r1, #0
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f001 fead 	bl	800fc16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2240      	movs	r2, #64	; 0x40
 800dec8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800decc:	2340      	movs	r3, #64	; 0x40
 800dece:	2200      	movs	r2, #0
 800ded0:	2180      	movs	r1, #128	; 0x80
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f001 fe9f 	bl	800fc16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2240      	movs	r2, #64	; 0x40
 800dee2:	621a      	str	r2, [r3, #32]

  return ret;
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800deee:	b480      	push	{r7}
 800def0:	b083      	sub	sp, #12
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	460b      	mov	r3, r1
 800def8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	78fa      	ldrb	r2, [r7, #3]
 800defe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	370c      	adds	r7, #12
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr

0800df0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df0e:	b480      	push	{r7}
 800df10:	b083      	sub	sp, #12
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b04      	cmp	r3, #4
 800df20:	d006      	beq.n	800df30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2204      	movs	r2, #4
 800df34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b04      	cmp	r3, #4
 800df58:	d106      	bne.n	800df68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df60:	b2da      	uxtb	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b082      	sub	sp, #8
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b03      	cmp	r3, #3
 800df88:	d110      	bne.n	800dfac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00b      	beq.n	800dfac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d005      	beq.n	800dfac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfa6:	69db      	ldr	r3, [r3, #28]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b082      	sub	sp, #8
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	32ae      	adds	r2, #174	; 0xae
 800dfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	e01c      	b.n	800e012 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d115      	bne.n	800e010 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	32ae      	adds	r2, #174	; 0xae
 800dfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff2:	6a1b      	ldr	r3, [r3, #32]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00b      	beq.n	800e010 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	32ae      	adds	r2, #174	; 0xae
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	6a1b      	ldr	r3, [r3, #32]
 800e008:	78fa      	ldrb	r2, [r7, #3]
 800e00a:	4611      	mov	r1, r2
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3708      	adds	r7, #8
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	460b      	mov	r3, r1
 800e024:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	32ae      	adds	r2, #174	; 0xae
 800e030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	e01c      	b.n	800e076 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b03      	cmp	r3, #3
 800e046:	d115      	bne.n	800e074 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	32ae      	adds	r2, #174	; 0xae
 800e052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00b      	beq.n	800e074 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	32ae      	adds	r2, #174	; 0xae
 800e066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06c:	78fa      	ldrb	r2, [r7, #3]
 800e06e:	4611      	mov	r1, r2
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e07e:	b480      	push	{r7}
 800e080:	b083      	sub	sp, #12
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00e      	beq.n	800e0d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	6852      	ldr	r2, [r2, #4]
 800e0be:	b2d2      	uxtb	r2, r2
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	4798      	blx	r3
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b083      	sub	sp, #12
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e0e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e100:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e102:	4618      	mov	r0, r3
 800e104:	370c      	adds	r7, #12
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b086      	sub	sp, #24
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e122:	2300      	movs	r3, #0
 800e124:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	885b      	ldrh	r3, [r3, #2]
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	b29b      	uxth	r3, r3
 800e132:	429a      	cmp	r2, r3
 800e134:	d920      	bls.n	800e178 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e13e:	e013      	b.n	800e168 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e140:	f107 030a 	add.w	r3, r7, #10
 800e144:	4619      	mov	r1, r3
 800e146:	6978      	ldr	r0, [r7, #20]
 800e148:	f000 f81b 	bl	800e182 <USBD_GetNextDesc>
 800e14c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b05      	cmp	r3, #5
 800e154:	d108      	bne.n	800e168 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	789b      	ldrb	r3, [r3, #2]
 800e15e:	78fa      	ldrb	r2, [r7, #3]
 800e160:	429a      	cmp	r2, r3
 800e162:	d008      	beq.n	800e176 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e164:	2300      	movs	r3, #0
 800e166:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	885b      	ldrh	r3, [r3, #2]
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	897b      	ldrh	r3, [r7, #10]
 800e170:	429a      	cmp	r2, r3
 800e172:	d8e5      	bhi.n	800e140 <USBD_GetEpDesc+0x32>
 800e174:	e000      	b.n	800e178 <USBD_GetEpDesc+0x6a>
          break;
 800e176:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e178:	693b      	ldr	r3, [r7, #16]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e182:	b480      	push	{r7}
 800e184:	b085      	sub	sp, #20
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	881a      	ldrh	r2, [r3, #0]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	4413      	add	r3, r2
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e1da:	8a3b      	ldrh	r3, [r7, #16]
 800e1dc:	021b      	lsls	r3, r3, #8
 800e1de:	b21a      	sxth	r2, r3
 800e1e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	b21b      	sxth	r3, r3
 800e1e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e1ea:	89fb      	ldrh	r3, [r7, #14]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	371c      	adds	r7, #28
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e20e:	2b40      	cmp	r3, #64	; 0x40
 800e210:	d005      	beq.n	800e21e <USBD_StdDevReq+0x26>
 800e212:	2b40      	cmp	r3, #64	; 0x40
 800e214:	d857      	bhi.n	800e2c6 <USBD_StdDevReq+0xce>
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00f      	beq.n	800e23a <USBD_StdDevReq+0x42>
 800e21a:	2b20      	cmp	r3, #32
 800e21c:	d153      	bne.n	800e2c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	32ae      	adds	r2, #174	; 0xae
 800e228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	4798      	blx	r3
 800e234:	4603      	mov	r3, r0
 800e236:	73fb      	strb	r3, [r7, #15]
      break;
 800e238:	e04a      	b.n	800e2d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	785b      	ldrb	r3, [r3, #1]
 800e23e:	2b09      	cmp	r3, #9
 800e240:	d83b      	bhi.n	800e2ba <USBD_StdDevReq+0xc2>
 800e242:	a201      	add	r2, pc, #4	; (adr r2, 800e248 <USBD_StdDevReq+0x50>)
 800e244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e248:	0800e29d 	.word	0x0800e29d
 800e24c:	0800e2b1 	.word	0x0800e2b1
 800e250:	0800e2bb 	.word	0x0800e2bb
 800e254:	0800e2a7 	.word	0x0800e2a7
 800e258:	0800e2bb 	.word	0x0800e2bb
 800e25c:	0800e27b 	.word	0x0800e27b
 800e260:	0800e271 	.word	0x0800e271
 800e264:	0800e2bb 	.word	0x0800e2bb
 800e268:	0800e293 	.word	0x0800e293
 800e26c:	0800e285 	.word	0x0800e285
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fa3c 	bl	800e6f0 <USBD_GetDescriptor>
          break;
 800e278:	e024      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fbcb 	bl	800ea18 <USBD_SetAddress>
          break;
 800e282:	e01f      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fc0a 	bl	800eaa0 <USBD_SetConfig>
 800e28c:	4603      	mov	r3, r0
 800e28e:	73fb      	strb	r3, [r7, #15]
          break;
 800e290:	e018      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fcad 	bl	800ebf4 <USBD_GetConfig>
          break;
 800e29a:	e013      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fcde 	bl	800ec60 <USBD_GetStatus>
          break;
 800e2a4:	e00e      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fd0d 	bl	800ecc8 <USBD_SetFeature>
          break;
 800e2ae:	e009      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fd31 	bl	800ed1a <USBD_ClrFeature>
          break;
 800e2b8:	e004      	b.n	800e2c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fd88 	bl	800edd2 <USBD_CtlError>
          break;
 800e2c2:	bf00      	nop
      }
      break;
 800e2c4:	e004      	b.n	800e2d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fd82 	bl	800edd2 <USBD_CtlError>
      break;
 800e2ce:	bf00      	nop
  }

  return ret;
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop

0800e2dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2f2:	2b40      	cmp	r3, #64	; 0x40
 800e2f4:	d005      	beq.n	800e302 <USBD_StdItfReq+0x26>
 800e2f6:	2b40      	cmp	r3, #64	; 0x40
 800e2f8:	d852      	bhi.n	800e3a0 <USBD_StdItfReq+0xc4>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <USBD_StdItfReq+0x26>
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	d14e      	bne.n	800e3a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	3b01      	subs	r3, #1
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d840      	bhi.n	800e392 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	889b      	ldrh	r3, [r3, #4]
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b01      	cmp	r3, #1
 800e318:	d836      	bhi.n	800e388 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	889b      	ldrh	r3, [r3, #4]
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	4619      	mov	r1, r3
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff fed9 	bl	800e0da <USBD_CoreFindIF>
 800e328:	4603      	mov	r3, r0
 800e32a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e32c:	7bbb      	ldrb	r3, [r7, #14]
 800e32e:	2bff      	cmp	r3, #255	; 0xff
 800e330:	d01d      	beq.n	800e36e <USBD_StdItfReq+0x92>
 800e332:	7bbb      	ldrb	r3, [r7, #14]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d11a      	bne.n	800e36e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e338:	7bba      	ldrb	r2, [r7, #14]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	32ae      	adds	r2, #174	; 0xae
 800e33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00f      	beq.n	800e368 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e348:	7bba      	ldrb	r2, [r7, #14]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e350:	7bba      	ldrb	r2, [r7, #14]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	32ae      	adds	r2, #174	; 0xae
 800e356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	4798      	blx	r3
 800e362:	4603      	mov	r3, r0
 800e364:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e366:	e004      	b.n	800e372 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e368:	2303      	movs	r3, #3
 800e36a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e36c:	e001      	b.n	800e372 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e36e:	2303      	movs	r3, #3
 800e370:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	88db      	ldrh	r3, [r3, #6]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d110      	bne.n	800e39c <USBD_StdItfReq+0xc0>
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10d      	bne.n	800e39c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fdf1 	bl	800ef68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e386:	e009      	b.n	800e39c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fd21 	bl	800edd2 <USBD_CtlError>
          break;
 800e390:	e004      	b.n	800e39c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fd1c 	bl	800edd2 <USBD_CtlError>
          break;
 800e39a:	e000      	b.n	800e39e <USBD_StdItfReq+0xc2>
          break;
 800e39c:	bf00      	nop
      }
      break;
 800e39e:	e004      	b.n	800e3aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fd15 	bl	800edd2 <USBD_CtlError>
      break;
 800e3a8:	bf00      	nop
  }

  return ret;
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	889b      	ldrh	r3, [r3, #4]
 800e3c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3d0:	2b40      	cmp	r3, #64	; 0x40
 800e3d2:	d007      	beq.n	800e3e4 <USBD_StdEPReq+0x30>
 800e3d4:	2b40      	cmp	r3, #64	; 0x40
 800e3d6:	f200 817f 	bhi.w	800e6d8 <USBD_StdEPReq+0x324>
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d02a      	beq.n	800e434 <USBD_StdEPReq+0x80>
 800e3de:	2b20      	cmp	r3, #32
 800e3e0:	f040 817a 	bne.w	800e6d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e3e4:	7bbb      	ldrb	r3, [r7, #14]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff fe83 	bl	800e0f4 <USBD_CoreFindEP>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3f2:	7b7b      	ldrb	r3, [r7, #13]
 800e3f4:	2bff      	cmp	r3, #255	; 0xff
 800e3f6:	f000 8174 	beq.w	800e6e2 <USBD_StdEPReq+0x32e>
 800e3fa:	7b7b      	ldrb	r3, [r7, #13]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f040 8170 	bne.w	800e6e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e402:	7b7a      	ldrb	r2, [r7, #13]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e40a:	7b7a      	ldrb	r2, [r7, #13]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	32ae      	adds	r2, #174	; 0xae
 800e410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 8163 	beq.w	800e6e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e41c:	7b7a      	ldrb	r2, [r7, #13]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	32ae      	adds	r2, #174	; 0xae
 800e422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	4798      	blx	r3
 800e42e:	4603      	mov	r3, r0
 800e430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e432:	e156      	b.n	800e6e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	785b      	ldrb	r3, [r3, #1]
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d008      	beq.n	800e44e <USBD_StdEPReq+0x9a>
 800e43c:	2b03      	cmp	r3, #3
 800e43e:	f300 8145 	bgt.w	800e6cc <USBD_StdEPReq+0x318>
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 809b 	beq.w	800e57e <USBD_StdEPReq+0x1ca>
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d03c      	beq.n	800e4c6 <USBD_StdEPReq+0x112>
 800e44c:	e13e      	b.n	800e6cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b02      	cmp	r3, #2
 800e458:	d002      	beq.n	800e460 <USBD_StdEPReq+0xac>
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d016      	beq.n	800e48c <USBD_StdEPReq+0xd8>
 800e45e:	e02c      	b.n	800e4ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e460:	7bbb      	ldrb	r3, [r7, #14]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00d      	beq.n	800e482 <USBD_StdEPReq+0xce>
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	2b80      	cmp	r3, #128	; 0x80
 800e46a:	d00a      	beq.n	800e482 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e46c:	7bbb      	ldrb	r3, [r7, #14]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f001 fc15 	bl	800fca0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e476:	2180      	movs	r1, #128	; 0x80
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f001 fc11 	bl	800fca0 <USBD_LL_StallEP>
 800e47e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e480:	e020      	b.n	800e4c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e482:	6839      	ldr	r1, [r7, #0]
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 fca4 	bl	800edd2 <USBD_CtlError>
              break;
 800e48a:	e01b      	b.n	800e4c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	885b      	ldrh	r3, [r3, #2]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10e      	bne.n	800e4b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00b      	beq.n	800e4b2 <USBD_StdEPReq+0xfe>
 800e49a:	7bbb      	ldrb	r3, [r7, #14]
 800e49c:	2b80      	cmp	r3, #128	; 0x80
 800e49e:	d008      	beq.n	800e4b2 <USBD_StdEPReq+0xfe>
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	88db      	ldrh	r3, [r3, #6]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d104      	bne.n	800e4b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 fbf7 	bl	800fca0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fd58 	bl	800ef68 <USBD_CtlSendStatus>

              break;
 800e4b8:	e004      	b.n	800e4c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fc88 	bl	800edd2 <USBD_CtlError>
              break;
 800e4c2:	bf00      	nop
          }
          break;
 800e4c4:	e107      	b.n	800e6d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d002      	beq.n	800e4d8 <USBD_StdEPReq+0x124>
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d016      	beq.n	800e504 <USBD_StdEPReq+0x150>
 800e4d6:	e04b      	b.n	800e570 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4d8:	7bbb      	ldrb	r3, [r7, #14]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00d      	beq.n	800e4fa <USBD_StdEPReq+0x146>
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	2b80      	cmp	r3, #128	; 0x80
 800e4e2:	d00a      	beq.n	800e4fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4e4:	7bbb      	ldrb	r3, [r7, #14]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f001 fbd9 	bl	800fca0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4ee:	2180      	movs	r1, #128	; 0x80
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f001 fbd5 	bl	800fca0 <USBD_LL_StallEP>
 800e4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4f8:	e040      	b.n	800e57c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fc68 	bl	800edd2 <USBD_CtlError>
              break;
 800e502:	e03b      	b.n	800e57c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	885b      	ldrh	r3, [r3, #2]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d136      	bne.n	800e57a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e512:	2b00      	cmp	r3, #0
 800e514:	d004      	beq.n	800e520 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e516:	7bbb      	ldrb	r3, [r7, #14]
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f001 fbdf 	bl	800fcde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fd21 	bl	800ef68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	4619      	mov	r1, r3
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7ff fde2 	bl	800e0f4 <USBD_CoreFindEP>
 800e530:	4603      	mov	r3, r0
 800e532:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e534:	7b7b      	ldrb	r3, [r7, #13]
 800e536:	2bff      	cmp	r3, #255	; 0xff
 800e538:	d01f      	beq.n	800e57a <USBD_StdEPReq+0x1c6>
 800e53a:	7b7b      	ldrb	r3, [r7, #13]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d11c      	bne.n	800e57a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e540:	7b7a      	ldrb	r2, [r7, #13]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e548:	7b7a      	ldrb	r2, [r7, #13]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	32ae      	adds	r2, #174	; 0xae
 800e54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d010      	beq.n	800e57a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e558:	7b7a      	ldrb	r2, [r7, #13]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	32ae      	adds	r2, #174	; 0xae
 800e55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	4798      	blx	r3
 800e56a:	4603      	mov	r3, r0
 800e56c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e56e:	e004      	b.n	800e57a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fc2d 	bl	800edd2 <USBD_CtlError>
              break;
 800e578:	e000      	b.n	800e57c <USBD_StdEPReq+0x1c8>
              break;
 800e57a:	bf00      	nop
          }
          break;
 800e57c:	e0ab      	b.n	800e6d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b02      	cmp	r3, #2
 800e588:	d002      	beq.n	800e590 <USBD_StdEPReq+0x1dc>
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d032      	beq.n	800e5f4 <USBD_StdEPReq+0x240>
 800e58e:	e097      	b.n	800e6c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e590:	7bbb      	ldrb	r3, [r7, #14]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d007      	beq.n	800e5a6 <USBD_StdEPReq+0x1f2>
 800e596:	7bbb      	ldrb	r3, [r7, #14]
 800e598:	2b80      	cmp	r3, #128	; 0x80
 800e59a:	d004      	beq.n	800e5a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fc17 	bl	800edd2 <USBD_CtlError>
                break;
 800e5a4:	e091      	b.n	800e6ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	da0b      	bge.n	800e5c6 <USBD_StdEPReq+0x212>
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4413      	add	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	3310      	adds	r3, #16
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	e00b      	b.n	800e5de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e5c6:	7bbb      	ldrb	r3, [r7, #14]
 800e5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	4413      	add	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	4413      	add	r3, r2
 800e5dc:	3304      	adds	r3, #4
 800e5de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2202      	movs	r2, #2
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fc61 	bl	800eeb4 <USBD_CtlSendData>
              break;
 800e5f2:	e06a      	b.n	800e6ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da11      	bge.n	800e620 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e5fc:	7bbb      	ldrb	r3, [r7, #14]
 800e5fe:	f003 020f 	and.w	r2, r3, #15
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	440b      	add	r3, r1
 800e60e:	3324      	adds	r3, #36	; 0x24
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d117      	bne.n	800e646 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fbda 	bl	800edd2 <USBD_CtlError>
                  break;
 800e61e:	e054      	b.n	800e6ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e620:	7bbb      	ldrb	r3, [r7, #14]
 800e622:	f003 020f 	and.w	r2, r3, #15
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	440b      	add	r3, r1
 800e632:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d104      	bne.n	800e646 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e63c:	6839      	ldr	r1, [r7, #0]
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 fbc7 	bl	800edd2 <USBD_CtlError>
                  break;
 800e644:	e041      	b.n	800e6ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	da0b      	bge.n	800e666 <USBD_StdEPReq+0x2b2>
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	3310      	adds	r3, #16
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	4413      	add	r3, r2
 800e662:	3304      	adds	r3, #4
 800e664:	e00b      	b.n	800e67e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e66c:	4613      	mov	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	4413      	add	r3, r2
 800e67c:	3304      	adds	r3, #4
 800e67e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e680:	7bbb      	ldrb	r3, [r7, #14]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <USBD_StdEPReq+0x2d8>
 800e686:	7bbb      	ldrb	r3, [r7, #14]
 800e688:	2b80      	cmp	r3, #128	; 0x80
 800e68a:	d103      	bne.n	800e694 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2200      	movs	r2, #0
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	e00e      	b.n	800e6b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e694:	7bbb      	ldrb	r3, [r7, #14]
 800e696:	4619      	mov	r1, r3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f001 fb3f 	bl	800fd1c <USBD_LL_IsStallEP>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d003      	beq.n	800e6ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	e002      	b.n	800e6b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fbfb 	bl	800eeb4 <USBD_CtlSendData>
              break;
 800e6be:	e004      	b.n	800e6ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fb85 	bl	800edd2 <USBD_CtlError>
              break;
 800e6c8:	bf00      	nop
          }
          break;
 800e6ca:	e004      	b.n	800e6d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e6cc:	6839      	ldr	r1, [r7, #0]
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 fb7f 	bl	800edd2 <USBD_CtlError>
          break;
 800e6d4:	bf00      	nop
      }
      break;
 800e6d6:	e005      	b.n	800e6e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fb79 	bl	800edd2 <USBD_CtlError>
      break;
 800e6e0:	e000      	b.n	800e6e4 <USBD_StdEPReq+0x330>
      break;
 800e6e2:	bf00      	nop
  }

  return ret;
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e6fe:	2300      	movs	r3, #0
 800e700:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e702:	2300      	movs	r3, #0
 800e704:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	885b      	ldrh	r3, [r3, #2]
 800e70a:	0a1b      	lsrs	r3, r3, #8
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	3b01      	subs	r3, #1
 800e710:	2b0e      	cmp	r3, #14
 800e712:	f200 8152 	bhi.w	800e9ba <USBD_GetDescriptor+0x2ca>
 800e716:	a201      	add	r2, pc, #4	; (adr r2, 800e71c <USBD_GetDescriptor+0x2c>)
 800e718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71c:	0800e78d 	.word	0x0800e78d
 800e720:	0800e7a5 	.word	0x0800e7a5
 800e724:	0800e7e5 	.word	0x0800e7e5
 800e728:	0800e9bb 	.word	0x0800e9bb
 800e72c:	0800e9bb 	.word	0x0800e9bb
 800e730:	0800e95b 	.word	0x0800e95b
 800e734:	0800e987 	.word	0x0800e987
 800e738:	0800e9bb 	.word	0x0800e9bb
 800e73c:	0800e9bb 	.word	0x0800e9bb
 800e740:	0800e9bb 	.word	0x0800e9bb
 800e744:	0800e9bb 	.word	0x0800e9bb
 800e748:	0800e9bb 	.word	0x0800e9bb
 800e74c:	0800e9bb 	.word	0x0800e9bb
 800e750:	0800e9bb 	.word	0x0800e9bb
 800e754:	0800e759 	.word	0x0800e759
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e75e:	69db      	ldr	r3, [r3, #28]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00b      	beq.n	800e77c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e76a:	69db      	ldr	r3, [r3, #28]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	7c12      	ldrb	r2, [r2, #16]
 800e770:	f107 0108 	add.w	r1, r7, #8
 800e774:	4610      	mov	r0, r2
 800e776:	4798      	blx	r3
 800e778:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e77a:	e126      	b.n	800e9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fb27 	bl	800edd2 <USBD_CtlError>
        err++;
 800e784:	7afb      	ldrb	r3, [r7, #11]
 800e786:	3301      	adds	r3, #1
 800e788:	72fb      	strb	r3, [r7, #11]
      break;
 800e78a:	e11e      	b.n	800e9ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	7c12      	ldrb	r2, [r2, #16]
 800e798:	f107 0108 	add.w	r1, r7, #8
 800e79c:	4610      	mov	r0, r2
 800e79e:	4798      	blx	r3
 800e7a0:	60f8      	str	r0, [r7, #12]
      break;
 800e7a2:	e112      	b.n	800e9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7c1b      	ldrb	r3, [r3, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10d      	bne.n	800e7c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b4:	f107 0208 	add.w	r2, r7, #8
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	4798      	blx	r3
 800e7bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e7c6:	e100      	b.n	800e9ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d0:	f107 0208 	add.w	r2, r7, #8
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4798      	blx	r3
 800e7d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	2202      	movs	r2, #2
 800e7e0:	701a      	strb	r2, [r3, #0]
      break;
 800e7e2:	e0f2      	b.n	800e9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	885b      	ldrh	r3, [r3, #2]
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b05      	cmp	r3, #5
 800e7ec:	f200 80ac 	bhi.w	800e948 <USBD_GetDescriptor+0x258>
 800e7f0:	a201      	add	r2, pc, #4	; (adr r2, 800e7f8 <USBD_GetDescriptor+0x108>)
 800e7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f6:	bf00      	nop
 800e7f8:	0800e811 	.word	0x0800e811
 800e7fc:	0800e845 	.word	0x0800e845
 800e800:	0800e879 	.word	0x0800e879
 800e804:	0800e8ad 	.word	0x0800e8ad
 800e808:	0800e8e1 	.word	0x0800e8e1
 800e80c:	0800e915 	.word	0x0800e915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00b      	beq.n	800e834 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	7c12      	ldrb	r2, [r2, #16]
 800e828:	f107 0108 	add.w	r1, r7, #8
 800e82c:	4610      	mov	r0, r2
 800e82e:	4798      	blx	r3
 800e830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e832:	e091      	b.n	800e958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e834:	6839      	ldr	r1, [r7, #0]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 facb 	bl	800edd2 <USBD_CtlError>
            err++;
 800e83c:	7afb      	ldrb	r3, [r7, #11]
 800e83e:	3301      	adds	r3, #1
 800e840:	72fb      	strb	r3, [r7, #11]
          break;
 800e842:	e089      	b.n	800e958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00b      	beq.n	800e868 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	7c12      	ldrb	r2, [r2, #16]
 800e85c:	f107 0108 	add.w	r1, r7, #8
 800e860:	4610      	mov	r0, r2
 800e862:	4798      	blx	r3
 800e864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e866:	e077      	b.n	800e958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fab1 	bl	800edd2 <USBD_CtlError>
            err++;
 800e870:	7afb      	ldrb	r3, [r7, #11]
 800e872:	3301      	adds	r3, #1
 800e874:	72fb      	strb	r3, [r7, #11]
          break;
 800e876:	e06f      	b.n	800e958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00b      	beq.n	800e89c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	7c12      	ldrb	r2, [r2, #16]
 800e890:	f107 0108 	add.w	r1, r7, #8
 800e894:	4610      	mov	r0, r2
 800e896:	4798      	blx	r3
 800e898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e89a:	e05d      	b.n	800e958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fa97 	bl	800edd2 <USBD_CtlError>
            err++;
 800e8a4:	7afb      	ldrb	r3, [r7, #11]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e8aa:	e055      	b.n	800e958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00b      	beq.n	800e8d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	7c12      	ldrb	r2, [r2, #16]
 800e8c4:	f107 0108 	add.w	r1, r7, #8
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4798      	blx	r3
 800e8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ce:	e043      	b.n	800e958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8d0:	6839      	ldr	r1, [r7, #0]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 fa7d 	bl	800edd2 <USBD_CtlError>
            err++;
 800e8d8:	7afb      	ldrb	r3, [r7, #11]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8de:	e03b      	b.n	800e958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00b      	beq.n	800e904 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	7c12      	ldrb	r2, [r2, #16]
 800e8f8:	f107 0108 	add.w	r1, r7, #8
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
 800e900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e902:	e029      	b.n	800e958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 fa63 	bl	800edd2 <USBD_CtlError>
            err++;
 800e90c:	7afb      	ldrb	r3, [r7, #11]
 800e90e:	3301      	adds	r3, #1
 800e910:	72fb      	strb	r3, [r7, #11]
          break;
 800e912:	e021      	b.n	800e958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00b      	beq.n	800e938 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	7c12      	ldrb	r2, [r2, #16]
 800e92c:	f107 0108 	add.w	r1, r7, #8
 800e930:	4610      	mov	r0, r2
 800e932:	4798      	blx	r3
 800e934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e936:	e00f      	b.n	800e958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e938:	6839      	ldr	r1, [r7, #0]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fa49 	bl	800edd2 <USBD_CtlError>
            err++;
 800e940:	7afb      	ldrb	r3, [r7, #11]
 800e942:	3301      	adds	r3, #1
 800e944:	72fb      	strb	r3, [r7, #11]
          break;
 800e946:	e007      	b.n	800e958 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 fa41 	bl	800edd2 <USBD_CtlError>
          err++;
 800e950:	7afb      	ldrb	r3, [r7, #11]
 800e952:	3301      	adds	r3, #1
 800e954:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e956:	bf00      	nop
      }
      break;
 800e958:	e037      	b.n	800e9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	7c1b      	ldrb	r3, [r3, #16]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d109      	bne.n	800e976 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96a:	f107 0208 	add.w	r2, r7, #8
 800e96e:	4610      	mov	r0, r2
 800e970:	4798      	blx	r3
 800e972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e974:	e029      	b.n	800e9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fa2a 	bl	800edd2 <USBD_CtlError>
        err++;
 800e97e:	7afb      	ldrb	r3, [r7, #11]
 800e980:	3301      	adds	r3, #1
 800e982:	72fb      	strb	r3, [r7, #11]
      break;
 800e984:	e021      	b.n	800e9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	7c1b      	ldrb	r3, [r3, #16]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10d      	bne.n	800e9aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e996:	f107 0208 	add.w	r2, r7, #8
 800e99a:	4610      	mov	r0, r2
 800e99c:	4798      	blx	r3
 800e99e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	2207      	movs	r2, #7
 800e9a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9a8:	e00f      	b.n	800e9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 fa10 	bl	800edd2 <USBD_CtlError>
        err++;
 800e9b2:	7afb      	ldrb	r3, [r7, #11]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e9b8:	e007      	b.n	800e9ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e9ba:	6839      	ldr	r1, [r7, #0]
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 fa08 	bl	800edd2 <USBD_CtlError>
      err++;
 800e9c2:	7afb      	ldrb	r3, [r7, #11]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e9c8:	bf00      	nop
  }

  if (err != 0U)
 800e9ca:	7afb      	ldrb	r3, [r7, #11]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d11e      	bne.n	800ea0e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	88db      	ldrh	r3, [r3, #6]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d016      	beq.n	800ea06 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e9d8:	893b      	ldrh	r3, [r7, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00e      	beq.n	800e9fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	88da      	ldrh	r2, [r3, #6]
 800e9e2:	893b      	ldrh	r3, [r7, #8]
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	bf28      	it	cs
 800e9e8:	4613      	movcs	r3, r2
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e9ee:	893b      	ldrh	r3, [r7, #8]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	68f9      	ldr	r1, [r7, #12]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 fa5d 	bl	800eeb4 <USBD_CtlSendData>
 800e9fa:	e009      	b.n	800ea10 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f9e7 	bl	800edd2 <USBD_CtlError>
 800ea04:	e004      	b.n	800ea10 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 faae 	bl	800ef68 <USBD_CtlSendStatus>
 800ea0c:	e000      	b.n	800ea10 <USBD_GetDescriptor+0x320>
    return;
 800ea0e:	bf00      	nop
  }
}
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop

0800ea18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	889b      	ldrh	r3, [r3, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d131      	bne.n	800ea8e <USBD_SetAddress+0x76>
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	88db      	ldrh	r3, [r3, #6]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d12d      	bne.n	800ea8e <USBD_SetAddress+0x76>
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	885b      	ldrh	r3, [r3, #2]
 800ea36:	2b7f      	cmp	r3, #127	; 0x7f
 800ea38:	d829      	bhi.n	800ea8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	885b      	ldrh	r3, [r3, #2]
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	2b03      	cmp	r3, #3
 800ea50:	d104      	bne.n	800ea5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f9bc 	bl	800edd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea5a:	e01d      	b.n	800ea98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7bfa      	ldrb	r2, [r7, #15]
 800ea60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea64:	7bfb      	ldrb	r3, [r7, #15]
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f001 f983 	bl	800fd74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fa7a 	bl	800ef68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d004      	beq.n	800ea84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2202      	movs	r2, #2
 800ea7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea82:	e009      	b.n	800ea98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea8c:	e004      	b.n	800ea98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f99e 	bl	800edd2 <USBD_CtlError>
  }
}
 800ea96:	bf00      	nop
 800ea98:	bf00      	nop
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	885b      	ldrh	r3, [r3, #2]
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	4b4e      	ldr	r3, [pc, #312]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eab6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eab8:	4b4d      	ldr	r3, [pc, #308]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d905      	bls.n	800eacc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f985 	bl	800edd2 <USBD_CtlError>
    return USBD_FAIL;
 800eac8:	2303      	movs	r3, #3
 800eaca:	e08c      	b.n	800ebe6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d002      	beq.n	800eade <USBD_SetConfig+0x3e>
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d029      	beq.n	800eb30 <USBD_SetConfig+0x90>
 800eadc:	e075      	b.n	800ebca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eade:	4b44      	ldr	r3, [pc, #272]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d020      	beq.n	800eb28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eae6:	4b42      	ldr	r3, [pc, #264]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	461a      	mov	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eaf0:	4b3f      	ldr	r3, [pc, #252]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7fe ffb7 	bl	800da6a <USBD_SetClassConfig>
 800eafc:	4603      	mov	r3, r0
 800eafe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d008      	beq.n	800eb18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eb06:	6839      	ldr	r1, [r7, #0]
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f962 	bl	800edd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2202      	movs	r2, #2
 800eb12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb16:	e065      	b.n	800ebe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 fa25 	bl	800ef68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2203      	movs	r2, #3
 800eb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb26:	e05d      	b.n	800ebe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fa1d 	bl	800ef68 <USBD_CtlSendStatus>
      break;
 800eb2e:	e059      	b.n	800ebe4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb30:	4b2f      	ldr	r3, [pc, #188]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d112      	bne.n	800eb5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2202      	movs	r2, #2
 800eb3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb40:	4b2b      	ldr	r3, [pc, #172]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	461a      	mov	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb4a:	4b29      	ldr	r3, [pc, #164]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7fe ffa6 	bl	800daa2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 fa06 	bl	800ef68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb5c:	e042      	b.n	800ebe4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eb5e:	4b24      	ldr	r3, [pc, #144]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	461a      	mov	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d02a      	beq.n	800ebc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	4619      	mov	r1, r3
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7fe ff94 	bl	800daa2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb7a:	4b1d      	ldr	r3, [pc, #116]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb84:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <USBD_SetConfig+0x150>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7fe ff6d 	bl	800da6a <USBD_SetClassConfig>
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00f      	beq.n	800ebba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f918 	bl	800edd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7fe ff79 	bl	800daa2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebb8:	e014      	b.n	800ebe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f9d4 	bl	800ef68 <USBD_CtlSendStatus>
      break;
 800ebc0:	e010      	b.n	800ebe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f9d0 	bl	800ef68 <USBD_CtlSendStatus>
      break;
 800ebc8:	e00c      	b.n	800ebe4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ebca:	6839      	ldr	r1, [r7, #0]
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f900 	bl	800edd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebd2:	4b07      	ldr	r3, [pc, #28]	; (800ebf0 <USBD_SetConfig+0x150>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7fe ff62 	bl	800daa2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ebde:	2303      	movs	r3, #3
 800ebe0:	73fb      	strb	r3, [r7, #15]
      break;
 800ebe2:	bf00      	nop
  }

  return ret;
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	24000530 	.word	0x24000530

0800ebf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	88db      	ldrh	r3, [r3, #6]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d004      	beq.n	800ec10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec06:	6839      	ldr	r1, [r7, #0]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f8e2 	bl	800edd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec0e:	e023      	b.n	800ec58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	dc02      	bgt.n	800ec22 <USBD_GetConfig+0x2e>
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	dc03      	bgt.n	800ec28 <USBD_GetConfig+0x34>
 800ec20:	e015      	b.n	800ec4e <USBD_GetConfig+0x5a>
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	d00b      	beq.n	800ec3e <USBD_GetConfig+0x4a>
 800ec26:	e012      	b.n	800ec4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	3308      	adds	r3, #8
 800ec32:	2201      	movs	r2, #1
 800ec34:	4619      	mov	r1, r3
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 f93c 	bl	800eeb4 <USBD_CtlSendData>
        break;
 800ec3c:	e00c      	b.n	800ec58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	3304      	adds	r3, #4
 800ec42:	2201      	movs	r2, #1
 800ec44:	4619      	mov	r1, r3
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f934 	bl	800eeb4 <USBD_CtlSendData>
        break;
 800ec4c:	e004      	b.n	800ec58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f8be 	bl	800edd2 <USBD_CtlError>
        break;
 800ec56:	bf00      	nop
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	3b01      	subs	r3, #1
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d81e      	bhi.n	800ecb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	88db      	ldrh	r3, [r3, #6]
 800ec7c:	2b02      	cmp	r3, #2
 800ec7e:	d004      	beq.n	800ec8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f8a5 	bl	800edd2 <USBD_CtlError>
        break;
 800ec88:	e01a      	b.n	800ecc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d005      	beq.n	800eca6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	f043 0202 	orr.w	r2, r3, #2
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	330c      	adds	r3, #12
 800ecaa:	2202      	movs	r2, #2
 800ecac:	4619      	mov	r1, r3
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f900 	bl	800eeb4 <USBD_CtlSendData>
      break;
 800ecb4:	e004      	b.n	800ecc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 f88a 	bl	800edd2 <USBD_CtlError>
      break;
 800ecbe:	bf00      	nop
  }
}
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	885b      	ldrh	r3, [r3, #2]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d107      	bne.n	800ecea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 f940 	bl	800ef68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ece8:	e013      	b.n	800ed12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	885b      	ldrh	r3, [r3, #2]
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	d10b      	bne.n	800ed0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	889b      	ldrh	r3, [r3, #4]
 800ecf6:	0a1b      	lsrs	r3, r3, #8
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f930 	bl	800ef68 <USBD_CtlSendStatus>
}
 800ed08:	e003      	b.n	800ed12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f860 	bl	800edd2 <USBD_CtlError>
}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b082      	sub	sp, #8
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
 800ed22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d80b      	bhi.n	800ed4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	885b      	ldrh	r3, [r3, #2]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d10c      	bne.n	800ed54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 f910 	bl	800ef68 <USBD_CtlSendStatus>
      }
      break;
 800ed48:	e004      	b.n	800ed54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed4a:	6839      	ldr	r1, [r7, #0]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f840 	bl	800edd2 <USBD_CtlError>
      break;
 800ed52:	e000      	b.n	800ed56 <USBD_ClrFeature+0x3c>
      break;
 800ed54:	bf00      	nop
  }
}
 800ed56:	bf00      	nop
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	781a      	ldrb	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	3301      	adds	r3, #1
 800ed78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	781a      	ldrb	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3301      	adds	r3, #1
 800ed86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff fa17 	bl	800e1bc <SWAPBYTE>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	461a      	mov	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f7ff fa0a 	bl	800e1bc <SWAPBYTE>
 800eda8:	4603      	mov	r3, r0
 800edaa:	461a      	mov	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3301      	adds	r3, #1
 800edb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f7ff f9fd 	bl	800e1bc <SWAPBYTE>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	80da      	strh	r2, [r3, #6]
}
 800edca:	bf00      	nop
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b082      	sub	sp, #8
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eddc:	2180      	movs	r1, #128	; 0x80
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 ff5e 	bl	800fca0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ede4:	2100      	movs	r1, #0
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 ff5a 	bl	800fca0 <USBD_LL_StallEP>
}
 800edec:	bf00      	nop
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee00:	2300      	movs	r3, #0
 800ee02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d036      	beq.n	800ee78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee0e:	6938      	ldr	r0, [r7, #16]
 800ee10:	f000 f836 	bl	800ee80 <USBD_GetLen>
 800ee14:	4603      	mov	r3, r0
 800ee16:	3301      	adds	r3, #1
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	005b      	lsls	r3, r3, #1
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	4413      	add	r3, r2
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	7812      	ldrb	r2, [r2, #0]
 800ee2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	3301      	adds	r3, #1
 800ee32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
 800ee36:	68ba      	ldr	r2, [r7, #8]
 800ee38:	4413      	add	r3, r2
 800ee3a:	2203      	movs	r2, #3
 800ee3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee3e:	7dfb      	ldrb	r3, [r7, #23]
 800ee40:	3301      	adds	r3, #1
 800ee42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee44:	e013      	b.n	800ee6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee46:	7dfb      	ldrb	r3, [r7, #23]
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	693a      	ldr	r2, [r7, #16]
 800ee4e:	7812      	ldrb	r2, [r2, #0]
 800ee50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	3301      	adds	r3, #1
 800ee56:	613b      	str	r3, [r7, #16]
    idx++;
 800ee58:	7dfb      	ldrb	r3, [r7, #23]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee5e:	7dfb      	ldrb	r3, [r7, #23]
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	4413      	add	r3, r2
 800ee64:	2200      	movs	r2, #0
 800ee66:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d1e7      	bne.n	800ee46 <USBD_GetString+0x52>
 800ee76:	e000      	b.n	800ee7a <USBD_GetString+0x86>
    return;
 800ee78:	bf00      	nop
  }
}
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee90:	e005      	b.n	800ee9e <USBD_GetLen+0x1e>
  {
    len++;
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	3301      	adds	r3, #1
 800ee96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1f5      	bne.n	800ee92 <USBD_GetLen+0x12>
  }

  return len;
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	2100      	movs	r1, #0
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f000 ff69 	bl	800fdb2 <USBD_LL_Transmit>

  return USBD_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b084      	sub	sp, #16
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	60f8      	str	r0, [r7, #12]
 800eef2:	60b9      	str	r1, [r7, #8]
 800eef4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	2100      	movs	r1, #0
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f000 ff58 	bl	800fdb2 <USBD_LL_Transmit>

  return USBD_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2203      	movs	r2, #3
 800ef1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	2100      	movs	r1, #0
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f000 ff5c 	bl	800fdf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b084      	sub	sp, #16
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	60f8      	str	r0, [r7, #12]
 800ef4e:	60b9      	str	r1, [r7, #8]
 800ef50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	2100      	movs	r1, #0
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f000 ff4b 	bl	800fdf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2204      	movs	r2, #4
 800ef74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef78:	2300      	movs	r3, #0
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 ff17 	bl	800fdb2 <USBD_LL_Transmit>

  return USBD_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b082      	sub	sp, #8
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2205      	movs	r2, #5
 800ef9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef9e:	2300      	movs	r3, #0
 800efa0:	2200      	movs	r2, #0
 800efa2:	2100      	movs	r1, #0
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 ff25 	bl	800fdf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <pll_Init>:
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 * @return
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	ed87 0a01 	vstr	s0, [r7, #4]
 800efc2:	4613      	mov	r3, r2
 800efc4:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f04f 0200 	mov.w	r2, #0
 800efcc:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f04f 0200 	mov.w	r2, #0
 800efd4:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f04f 0200 	mov.w	r2, #0
 800efdc:	609a      	str	r2, [r3, #8]

    signal->sogi_d_1 = 0.f;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f04f 0200 	mov.w	r2, #0
 800efe4:	611a      	str	r2, [r3, #16]
    signal->sogi_d_2 = 0.f;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f04f 0200 	mov.w	r2, #0
 800efec:	615a      	str	r2, [r3, #20]

    signal->sogi_q_1 = 0.f;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f04f 0200 	mov.w	r2, #0
 800eff4:	61da      	str	r2, [r3, #28]
    signal->sogi_q_2 = 0.f;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f04f 0200 	mov.w	r2, #0
 800effc:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f04f 0200 	mov.w	r2, #0
 800f004:	62da      	str	r2, [r3, #44]	; 0x2c

    config->omiga = 2 * PI * f; // f典型值50
 800f006:	edd7 7a01 	vldr	s15, [r7, #4]
 800f00a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f170 <pll_Init+0x1bc>
 800f00e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 800f018:	887b      	ldrh	r3, [r7, #2]
 800f01a:	ee07 3a90 	vmov	s15, r3
 800f01e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	4a50      	ldr	r2, [pc, #320]	; (800f174 <pll_Init+0x1c0>)
 800f034:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	f04f 0200 	mov.w	r2, #0
 800f03c:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	edd3 7a00 	vldr	s15, [r3]
 800f044:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	edd3 7a01 	vldr	s15, [r3, #4]
 800f052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f062:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	edd3 7a00 	vldr	s15, [r3]
 800f06c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	edd3 7a01 	vldr	s15, [r3, #4]
 800f076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	ed93 7a00 	vldr	s14, [r3]
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	edd3 7a01 	vldr	s15, [r3, #4]
 800f08c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	edd3 7a00 	vldr	s15, [r3]
 800f096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f0bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0c0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f0c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f0d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f0dc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f0e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f0f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f112:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f116:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f11a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f12a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f12e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f132:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	4a0d      	ldr	r2, [pc, #52]	; (800f178 <pll_Init+0x1c4>)
 800f144:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	4a0c      	ldr	r2, [pc, #48]	; (800f17c <pll_Init+0x1c8>)
 800f14a:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	f04f 0200 	mov.w	r2, #0
 800f152:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f04f 0200 	mov.w	r2, #0
 800f15a:	639a      	str	r2, [r3, #56]	; 0x38
    signal->pid_out = 0.f;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f04f 0200 	mov.w	r2, #0
 800f162:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	40c90fdb 	.word	0x40c90fdb
 800f174:	3fb4fdf4 	.word	0x3fb4fdf4
 800f178:	428d78c3 	.word	0x428d78c3
 800f17c:	46758fb9 	.word	0x46758fb9

0800f180 <pll_Control>:
 * @param config: 配置指针
 * @param ccr: PWM控制时钟 示例:htim1->Instance->CCR1
 * @return
 */
void pll_Control(pll_Signal *signal, pll_Config *config)
{
 800f180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f182:	ed2d 8b02 	vpush	{d8}
 800f186:	b089      	sub	sp, #36	; 0x24
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    sogi(signal);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 f8e8 	bl	800f364 <sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal->sogi_d_0, signal->sogi_q_0 / 382 * 3, &signal->park_d, &signal->park_q, arm_sin_f32(signal->theta), arm_cos_f32(signal->theta));
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68de      	ldr	r6, [r3, #12]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	ed93 7a06 	vldr	s14, [r3, #24]
 800f19e:	eddf 6a42 	vldr	s13, [pc, #264]	; 800f2a8 <pll_Control+0x128>
 800f1a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f1a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f1aa:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f103 0524 	add.w	r5, r3, #36	; 0x24
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1c0:	eeb0 0a67 	vmov.f32	s0, s15
 800f1c4:	f000 fe8e 	bl	800fee4 <arm_sin_f32>
 800f1c8:	eef0 8a40 	vmov.f32	s17, s0
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f1d6:	f000 fecb 	bl	800ff70 <arm_cos_f32>
 800f1da:	eef0 7a40 	vmov.f32	s15, s0
 800f1de:	61fe      	str	r6, [r7, #28]
 800f1e0:	ed87 8a06 	vstr	s16, [r7, #24]
 800f1e4:	617d      	str	r5, [r7, #20]
 800f1e6:	613c      	str	r4, [r7, #16]
 800f1e8:	edc7 8a03 	vstr	s17, [r7, #12]
 800f1ec:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800f1f0:	ed97 7a07 	vldr	s14, [r7, #28]
 800f1f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800f1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1fc:	edd7 6a06 	vldr	s13, [r7, #24]
 800f200:	edd7 7a03 	vldr	s15, [r7, #12]
 800f204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800f212:	edd7 7a07 	vldr	s15, [r7, #28]
 800f216:	eeb1 7a67 	vneg.f32	s14, s15
 800f21a:	edd7 7a03 	vldr	s15, [r7, #12]
 800f21e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f222:	edd7 6a06 	vldr	s13, [r7, #24]
 800f226:	edd7 7a02 	vldr	s15, [r7, #8]
 800f22a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f22e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	edc3 7a00 	vstr	s15, [r3]
  }
 800f238:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal, config);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f835 	bl	800f2ac <pll_Pid>

    signal->theta += (signal->pid_out + config->omiga) * config->Ts;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	edd3 7a00 	vldr	s15, [r3]
 800f254:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f25e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f262:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    signal->theta = (float)fmod(signal->theta, 2 * PI);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f272:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f276:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 800f2a0 <pll_Control+0x120>
 800f27a:	eeb0 0b47 	vmov.f64	d0, d7
 800f27e:	f003 fc97 	bl	8012bb0 <fmod>
 800f282:	eeb0 7b40 	vmov.f64	d7, d0
 800f286:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800f290:	bf00      	nop
 800f292:	3724      	adds	r7, #36	; 0x24
 800f294:	46bd      	mov	sp, r7
 800f296:	ecbd 8b02 	vpop	{d8}
 800f29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f29c:	f3af 8000 	nop.w
 800f2a0:	60000000 	.word	0x60000000
 800f2a4:	401921fb 	.word	0x401921fb
 800f2a8:	43bf0000 	.word	0x43bf0000

0800f2ac <pll_Pid>:
 * @param signal: 信号指针
 * @param config: 配置指针
 * @return
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	edd3 6a04 	vldr	s13, [r3, #16]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800f2e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	edd3 6a05 	vldr	s13, [r3, #20]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f2fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f300:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800f310:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f354 <pll_Pid+0xa8>
 800f314:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31c:	dd03      	ble.n	800f326 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a0d      	ldr	r2, [pc, #52]	; (800f358 <pll_Pid+0xac>)
 800f322:	631a      	str	r2, [r3, #48]	; 0x30
 800f324:	e00c      	b.n	800f340 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800f32c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800f35c <pll_Pid+0xb0>
 800f330:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f338:	d502      	bpl.n	800f340 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4a08      	ldr	r2, [pc, #32]	; (800f360 <pll_Pid+0xb4>)
 800f33e:	631a      	str	r2, [r3, #48]	; 0x30

    signal->pid_err[1] = signal->pid_err[0];
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	431d1463 	.word	0x431d1463
 800f358:	431d1463 	.word	0x431d1463
 800f35c:	c27b53d2 	.word	0xc27b53d2
 800f360:	c27b53d2 	.word	0xc27b53d2

0800f364 <sogi>:
/*
SOGI变换
调用频繁，使用内联函数可增加效率
*/
void sogi(pll_Signal *signal)
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
    signal->sogi_d_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_d_1 + signal->a2 * signal->sogi_d_2;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	edd3 7a00 	vldr	s15, [r3]
 800f378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	edd3 7a02 	vldr	s15, [r3, #8]
 800f388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f38c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	edd3 7a04 	vldr	s15, [r3, #16]
 800f39c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	edd3 7a05 	vldr	s15, [r3, #20]
 800f3b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_q_0 = signal->b0 * signal->u_0 + 2 * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_q_1 + signal->a2 * signal->sogi_q_2;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	edd3 7a00 	vldr	s15, [r3]
 800f3ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800f3d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	edd3 7a02 	vldr	s15, [r3, #8]
 800f3f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	edd3 7a07 	vldr	s15, [r3, #28]
 800f406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f40a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	edd3 7a08 	vldr	s15, [r3, #32]
 800f41a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	685a      	ldr	r2, [r3, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	605a      	str	r2, [r3, #4]
    signal->sogi_d_2 = signal->sogi_d_1;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	691a      	ldr	r2, [r3, #16]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	615a      	str	r2, [r3, #20]
    signal->sogi_d_1 = signal->sogi_d_0;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	68da      	ldr	r2, [r3, #12]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	611a      	str	r2, [r3, #16]
    signal->sogi_q_2 = signal->sogi_q_1;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	69da      	ldr	r2, [r3, #28]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	621a      	str	r2, [r3, #32]
    signal->sogi_q_1 = signal->sogi_q_0;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	699a      	ldr	r2, [r3, #24]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	61da      	str	r2, [r3, #28]
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f468:	2200      	movs	r2, #0
 800f46a:	4913      	ldr	r1, [pc, #76]	; (800f4b8 <MX_USB_DEVICE_Init+0x54>)
 800f46c:	4813      	ldr	r0, [pc, #76]	; (800f4bc <MX_USB_DEVICE_Init+0x58>)
 800f46e:	f7fe fa7f 	bl	800d970 <USBD_Init>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f478:	f7f1 fd40 	bl	8000efc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f47c:	4910      	ldr	r1, [pc, #64]	; (800f4c0 <MX_USB_DEVICE_Init+0x5c>)
 800f47e:	480f      	ldr	r0, [pc, #60]	; (800f4bc <MX_USB_DEVICE_Init+0x58>)
 800f480:	f7fe faa6 	bl	800d9d0 <USBD_RegisterClass>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f48a:	f7f1 fd37 	bl	8000efc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f48e:	490d      	ldr	r1, [pc, #52]	; (800f4c4 <MX_USB_DEVICE_Init+0x60>)
 800f490:	480a      	ldr	r0, [pc, #40]	; (800f4bc <MX_USB_DEVICE_Init+0x58>)
 800f492:	f7fe f99d 	bl	800d7d0 <USBD_CDC_RegisterInterface>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f49c:	f7f1 fd2e 	bl	8000efc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4a0:	4806      	ldr	r0, [pc, #24]	; (800f4bc <MX_USB_DEVICE_Init+0x58>)
 800f4a2:	f7fe facb 	bl	800da3c <USBD_Start>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4ac:	f7f1 fd26 	bl	8000efc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f4b0:	f7f8 f824 	bl	80074fc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4b4:	bf00      	nop
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	240000b0 	.word	0x240000b0
 800f4bc:	24000534 	.word	0x24000534
 800f4c0:	2400001c 	.word	0x2400001c
 800f4c4:	2400009c 	.word	0x2400009c

0800f4c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	4905      	ldr	r1, [pc, #20]	; (800f4e4 <CDC_Init_FS+0x1c>)
 800f4d0:	4805      	ldr	r0, [pc, #20]	; (800f4e8 <CDC_Init_FS+0x20>)
 800f4d2:	f7fe f997 	bl	800d804 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4d6:	4905      	ldr	r1, [pc, #20]	; (800f4ec <CDC_Init_FS+0x24>)
 800f4d8:	4803      	ldr	r0, [pc, #12]	; (800f4e8 <CDC_Init_FS+0x20>)
 800f4da:	f7fe f9b5 	bl	800d848 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f4de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	24001010 	.word	0x24001010
 800f4e8:	24000534 	.word	0x24000534
 800f4ec:	24000810 	.word	0x24000810

0800f4f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f4f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	6039      	str	r1, [r7, #0]
 800f50a:	71fb      	strb	r3, [r7, #7]
 800f50c:	4613      	mov	r3, r2
 800f50e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	2b23      	cmp	r3, #35	; 0x23
 800f514:	d84a      	bhi.n	800f5ac <CDC_Control_FS+0xac>
 800f516:	a201      	add	r2, pc, #4	; (adr r2, 800f51c <CDC_Control_FS+0x1c>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f5ad 	.word	0x0800f5ad
 800f520:	0800f5ad 	.word	0x0800f5ad
 800f524:	0800f5ad 	.word	0x0800f5ad
 800f528:	0800f5ad 	.word	0x0800f5ad
 800f52c:	0800f5ad 	.word	0x0800f5ad
 800f530:	0800f5ad 	.word	0x0800f5ad
 800f534:	0800f5ad 	.word	0x0800f5ad
 800f538:	0800f5ad 	.word	0x0800f5ad
 800f53c:	0800f5ad 	.word	0x0800f5ad
 800f540:	0800f5ad 	.word	0x0800f5ad
 800f544:	0800f5ad 	.word	0x0800f5ad
 800f548:	0800f5ad 	.word	0x0800f5ad
 800f54c:	0800f5ad 	.word	0x0800f5ad
 800f550:	0800f5ad 	.word	0x0800f5ad
 800f554:	0800f5ad 	.word	0x0800f5ad
 800f558:	0800f5ad 	.word	0x0800f5ad
 800f55c:	0800f5ad 	.word	0x0800f5ad
 800f560:	0800f5ad 	.word	0x0800f5ad
 800f564:	0800f5ad 	.word	0x0800f5ad
 800f568:	0800f5ad 	.word	0x0800f5ad
 800f56c:	0800f5ad 	.word	0x0800f5ad
 800f570:	0800f5ad 	.word	0x0800f5ad
 800f574:	0800f5ad 	.word	0x0800f5ad
 800f578:	0800f5ad 	.word	0x0800f5ad
 800f57c:	0800f5ad 	.word	0x0800f5ad
 800f580:	0800f5ad 	.word	0x0800f5ad
 800f584:	0800f5ad 	.word	0x0800f5ad
 800f588:	0800f5ad 	.word	0x0800f5ad
 800f58c:	0800f5ad 	.word	0x0800f5ad
 800f590:	0800f5ad 	.word	0x0800f5ad
 800f594:	0800f5ad 	.word	0x0800f5ad
 800f598:	0800f5ad 	.word	0x0800f5ad
 800f59c:	0800f5ad 	.word	0x0800f5ad
 800f5a0:	0800f5ad 	.word	0x0800f5ad
 800f5a4:	0800f5ad 	.word	0x0800f5ad
 800f5a8:	0800f5ad 	.word	0x0800f5ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5ac:	bf00      	nop
  }

  return (USBD_OK);
 800f5ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	4805      	ldr	r0, [pc, #20]	; (800f5e0 <CDC_Receive_FS+0x24>)
 800f5ca:	f7fe f93d 	bl	800d848 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f5ce:	4804      	ldr	r0, [pc, #16]	; (800f5e0 <CDC_Receive_FS+0x24>)
 800f5d0:	f7fe f998 	bl	800d904 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f5d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	24000534 	.word	0x24000534

0800f5e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f5f4:	4b0d      	ldr	r3, [pc, #52]	; (800f62c <CDC_Transmit_FS+0x48>)
 800f5f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f606:	2301      	movs	r3, #1
 800f608:	e00b      	b.n	800f622 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f60a:	887b      	ldrh	r3, [r7, #2]
 800f60c:	461a      	mov	r2, r3
 800f60e:	6879      	ldr	r1, [r7, #4]
 800f610:	4806      	ldr	r0, [pc, #24]	; (800f62c <CDC_Transmit_FS+0x48>)
 800f612:	f7fe f8f7 	bl	800d804 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f616:	4805      	ldr	r0, [pc, #20]	; (800f62c <CDC_Transmit_FS+0x48>)
 800f618:	f7fe f934 	bl	800d884 <USBD_CDC_TransmitPacket>
 800f61c:	4603      	mov	r3, r0
 800f61e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f620:	7bfb      	ldrb	r3, [r7, #15]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	24000534 	.word	0x24000534

0800f630 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f630:	b480      	push	{r7}
 800f632:	b087      	sub	sp, #28
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	4613      	mov	r3, r2
 800f63c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f646:	4618      	mov	r0, r3
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
	...

0800f654 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	6039      	str	r1, [r7, #0]
 800f65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2212      	movs	r2, #18
 800f664:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f666:	4b03      	ldr	r3, [pc, #12]	; (800f674 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f668:	4618      	mov	r0, r3
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	240000d0 	.word	0x240000d0

0800f678 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	6039      	str	r1, [r7, #0]
 800f682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	2204      	movs	r2, #4
 800f688:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f68a:	4b03      	ldr	r3, [pc, #12]	; (800f698 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr
 800f698:	240000e4 	.word	0x240000e4

0800f69c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	6039      	str	r1, [r7, #0]
 800f6a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d105      	bne.n	800f6ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	4907      	ldr	r1, [pc, #28]	; (800f6d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6b2:	4808      	ldr	r0, [pc, #32]	; (800f6d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6b4:	f7ff fb9e 	bl	800edf4 <USBD_GetString>
 800f6b8:	e004      	b.n	800f6c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	4904      	ldr	r1, [pc, #16]	; (800f6d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6be:	4805      	ldr	r0, [pc, #20]	; (800f6d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6c0:	f7ff fb98 	bl	800edf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6c4:	4b02      	ldr	r3, [pc, #8]	; (800f6d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	24001810 	.word	0x24001810
 800f6d4:	08012e98 	.word	0x08012e98

0800f6d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	6039      	str	r1, [r7, #0]
 800f6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f6e4:	683a      	ldr	r2, [r7, #0]
 800f6e6:	4904      	ldr	r1, [pc, #16]	; (800f6f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6e8:	4804      	ldr	r0, [pc, #16]	; (800f6fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6ea:	f7ff fb83 	bl	800edf4 <USBD_GetString>
  return USBD_StrDesc;
 800f6ee:	4b02      	ldr	r3, [pc, #8]	; (800f6f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	24001810 	.word	0x24001810
 800f6fc:	08012eb0 	.word	0x08012eb0

0800f700 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	6039      	str	r1, [r7, #0]
 800f70a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	221a      	movs	r2, #26
 800f710:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f712:	f000 f843 	bl	800f79c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f716:	4b02      	ldr	r3, [pc, #8]	; (800f720 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	240000e8 	.word	0x240000e8

0800f724 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	4603      	mov	r3, r0
 800f72c:	6039      	str	r1, [r7, #0]
 800f72e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d105      	bne.n	800f742 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	4907      	ldr	r1, [pc, #28]	; (800f758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f73a:	4808      	ldr	r0, [pc, #32]	; (800f75c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f73c:	f7ff fb5a 	bl	800edf4 <USBD_GetString>
 800f740:	e004      	b.n	800f74c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	4904      	ldr	r1, [pc, #16]	; (800f758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f746:	4805      	ldr	r0, [pc, #20]	; (800f75c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f748:	f7ff fb54 	bl	800edf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f74c:	4b02      	ldr	r3, [pc, #8]	; (800f758 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	24001810 	.word	0x24001810
 800f75c:	08012ec4 	.word	0x08012ec4

0800f760 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	4603      	mov	r3, r0
 800f768:	6039      	str	r1, [r7, #0]
 800f76a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f76c:	79fb      	ldrb	r3, [r7, #7]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d105      	bne.n	800f77e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	4907      	ldr	r1, [pc, #28]	; (800f794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f776:	4808      	ldr	r0, [pc, #32]	; (800f798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f778:	f7ff fb3c 	bl	800edf4 <USBD_GetString>
 800f77c:	e004      	b.n	800f788 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	4904      	ldr	r1, [pc, #16]	; (800f794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f782:	4805      	ldr	r0, [pc, #20]	; (800f798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f784:	f7ff fb36 	bl	800edf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f788:	4b02      	ldr	r3, [pc, #8]	; (800f794 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	24001810 	.word	0x24001810
 800f798:	08012ed0 	.word	0x08012ed0

0800f79c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7a2:	4b0f      	ldr	r3, [pc, #60]	; (800f7e0 <Get_SerialNum+0x44>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7a8:	4b0e      	ldr	r3, [pc, #56]	; (800f7e4 <Get_SerialNum+0x48>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7ae:	4b0e      	ldr	r3, [pc, #56]	; (800f7e8 <Get_SerialNum+0x4c>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d009      	beq.n	800f7d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7c2:	2208      	movs	r2, #8
 800f7c4:	4909      	ldr	r1, [pc, #36]	; (800f7ec <Get_SerialNum+0x50>)
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f000 f814 	bl	800f7f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7cc:	2204      	movs	r2, #4
 800f7ce:	4908      	ldr	r1, [pc, #32]	; (800f7f0 <Get_SerialNum+0x54>)
 800f7d0:	68b8      	ldr	r0, [r7, #8]
 800f7d2:	f000 f80f 	bl	800f7f4 <IntToUnicode>
  }
}
 800f7d6:	bf00      	nop
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	1ff1e800 	.word	0x1ff1e800
 800f7e4:	1ff1e804 	.word	0x1ff1e804
 800f7e8:	1ff1e808 	.word	0x1ff1e808
 800f7ec:	240000ea 	.word	0x240000ea
 800f7f0:	240000fa 	.word	0x240000fa

0800f7f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4613      	mov	r3, r2
 800f800:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f806:	2300      	movs	r3, #0
 800f808:	75fb      	strb	r3, [r7, #23]
 800f80a:	e027      	b.n	800f85c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	0f1b      	lsrs	r3, r3, #28
 800f810:	2b09      	cmp	r3, #9
 800f812:	d80b      	bhi.n	800f82c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	0f1b      	lsrs	r3, r3, #28
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	7dfb      	ldrb	r3, [r7, #23]
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	4619      	mov	r1, r3
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	440b      	add	r3, r1
 800f824:	3230      	adds	r2, #48	; 0x30
 800f826:	b2d2      	uxtb	r2, r2
 800f828:	701a      	strb	r2, [r3, #0]
 800f82a:	e00a      	b.n	800f842 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	0f1b      	lsrs	r3, r3, #28
 800f830:	b2da      	uxtb	r2, r3
 800f832:	7dfb      	ldrb	r3, [r7, #23]
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	4619      	mov	r1, r3
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	440b      	add	r3, r1
 800f83c:	3237      	adds	r2, #55	; 0x37
 800f83e:	b2d2      	uxtb	r2, r2
 800f840:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	011b      	lsls	r3, r3, #4
 800f846:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f848:	7dfb      	ldrb	r3, [r7, #23]
 800f84a:	005b      	lsls	r3, r3, #1
 800f84c:	3301      	adds	r3, #1
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	4413      	add	r3, r2
 800f852:	2200      	movs	r2, #0
 800f854:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f856:	7dfb      	ldrb	r3, [r7, #23]
 800f858:	3301      	adds	r3, #1
 800f85a:	75fb      	strb	r3, [r7, #23]
 800f85c:	7dfa      	ldrb	r2, [r7, #23]
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	429a      	cmp	r2, r3
 800f862:	d3d3      	bcc.n	800f80c <IntToUnicode+0x18>
  }
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop
 800f868:	371c      	adds	r7, #28
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
	...

0800f874 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b0ba      	sub	sp, #232	; 0xe8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f87c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f880:	2200      	movs	r2, #0
 800f882:	601a      	str	r2, [r3, #0]
 800f884:	605a      	str	r2, [r3, #4]
 800f886:	609a      	str	r2, [r3, #8]
 800f888:	60da      	str	r2, [r3, #12]
 800f88a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f88c:	f107 0310 	add.w	r3, r7, #16
 800f890:	22c0      	movs	r2, #192	; 0xc0
 800f892:	2100      	movs	r1, #0
 800f894:	4618      	mov	r0, r3
 800f896:	f001 f9ca 	bl	8010c2e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4a2c      	ldr	r2, [pc, #176]	; (800f950 <HAL_PCD_MspInit+0xdc>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d151      	bne.n	800f948 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f8a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f8a8:	f04f 0300 	mov.w	r3, #0
 800f8ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800f8b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f8b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f8b8:	f107 0310 	add.w	r3, r7, #16
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7f8 fe3f 	bl	8008540 <HAL_RCCEx_PeriphCLKConfig>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f8c8:	f7f1 fb18 	bl	8000efc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f8cc:	f7f7 fe16 	bl	80074fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8d0:	4b20      	ldr	r3, [pc, #128]	; (800f954 <HAL_PCD_MspInit+0xe0>)
 800f8d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8d6:	4a1f      	ldr	r2, [pc, #124]	; (800f954 <HAL_PCD_MspInit+0xe0>)
 800f8d8:	f043 0301 	orr.w	r3, r3, #1
 800f8dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f8e0:	4b1c      	ldr	r3, [pc, #112]	; (800f954 <HAL_PCD_MspInit+0xe0>)
 800f8e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8e6:	f003 0301 	and.w	r3, r3, #1
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f8ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f8f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f902:	2300      	movs	r3, #0
 800f904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f908:	230a      	movs	r3, #10
 800f90a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f90e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f912:	4619      	mov	r1, r3
 800f914:	4810      	ldr	r0, [pc, #64]	; (800f958 <HAL_PCD_MspInit+0xe4>)
 800f916:	f7f6 f91b 	bl	8005b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f91a:	4b0e      	ldr	r3, [pc, #56]	; (800f954 <HAL_PCD_MspInit+0xe0>)
 800f91c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f920:	4a0c      	ldr	r2, [pc, #48]	; (800f954 <HAL_PCD_MspInit+0xe0>)
 800f922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f92a:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <HAL_PCD_MspInit+0xe0>)
 800f92c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f934:	60bb      	str	r3, [r7, #8]
 800f936:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f938:	2200      	movs	r2, #0
 800f93a:	2100      	movs	r1, #0
 800f93c:	2065      	movs	r0, #101	; 0x65
 800f93e:	f7f3 fd45 	bl	80033cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f942:	2065      	movs	r0, #101	; 0x65
 800f944:	f7f3 fd5c 	bl	8003400 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f948:	bf00      	nop
 800f94a:	37e8      	adds	r7, #232	; 0xe8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	40080000 	.word	0x40080000
 800f954:	58024400 	.word	0x58024400
 800f958:	58020000 	.word	0x58020000

0800f95c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f970:	4619      	mov	r1, r3
 800f972:	4610      	mov	r0, r2
 800f974:	f7fe f8af 	bl	800dad6 <USBD_LL_SetupStage>
}
 800f978:	bf00      	nop
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	460b      	mov	r3, r1
 800f98a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f992:	78fa      	ldrb	r2, [r7, #3]
 800f994:	6879      	ldr	r1, [r7, #4]
 800f996:	4613      	mov	r3, r2
 800f998:	00db      	lsls	r3, r3, #3
 800f99a:	4413      	add	r3, r2
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	440b      	add	r3, r1
 800f9a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	78fb      	ldrb	r3, [r7, #3]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	f7fe f8e9 	bl	800db80 <USBD_LL_DataOutStage>
}
 800f9ae:	bf00      	nop
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b082      	sub	sp, #8
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	460b      	mov	r3, r1
 800f9c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9c8:	78fa      	ldrb	r2, [r7, #3]
 800f9ca:	6879      	ldr	r1, [r7, #4]
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	4413      	add	r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	440b      	add	r3, r1
 800f9d6:	3348      	adds	r3, #72	; 0x48
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	78fb      	ldrb	r3, [r7, #3]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	f7fe f982 	bl	800dce6 <USBD_LL_DataInStage>
}
 800f9e2:	bf00      	nop
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b082      	sub	sp, #8
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fe fabc 	bl	800df76 <USBD_LL_SOF>
}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d102      	bne.n	800fa20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	73fb      	strb	r3, [r7, #15]
 800fa1e:	e008      	b.n	800fa32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d102      	bne.n	800fa2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	73fb      	strb	r3, [r7, #15]
 800fa2c:	e001      	b.n	800fa32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fa2e:	f7f1 fa65 	bl	8000efc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa38:	7bfa      	ldrb	r2, [r7, #15]
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fe fa56 	bl	800deee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fe f9fe 	bl	800de4a <USBD_LL_Reset>
}
 800fa4e:	bf00      	nop
 800fa50:	3710      	adds	r7, #16
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
	...

0800fa58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe fa51 	bl	800df0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	6812      	ldr	r2, [r2, #0]
 800fa7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa7e:	f043 0301 	orr.w	r3, r3, #1
 800fa82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6a1b      	ldr	r3, [r3, #32]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d005      	beq.n	800fa98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa8c:	4b04      	ldr	r3, [pc, #16]	; (800faa0 <HAL_PCD_SuspendCallback+0x48>)
 800fa8e:	691b      	ldr	r3, [r3, #16]
 800fa90:	4a03      	ldr	r2, [pc, #12]	; (800faa0 <HAL_PCD_SuspendCallback+0x48>)
 800fa92:	f043 0306 	orr.w	r3, r3, #6
 800fa96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	e000ed00 	.word	0xe000ed00

0800faa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fa47 	bl	800df46 <USBD_LL_Resume>
}
 800fab8:	bf00      	nop
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fad2:	78fa      	ldrb	r2, [r7, #3]
 800fad4:	4611      	mov	r1, r2
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fe fa9f 	bl	800e01a <USBD_LL_IsoOUTIncomplete>
}
 800fadc:	bf00      	nop
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	460b      	mov	r3, r1
 800faee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800faf6:	78fa      	ldrb	r2, [r7, #3]
 800faf8:	4611      	mov	r1, r2
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fe fa5b 	bl	800dfb6 <USBD_LL_IsoINIncomplete>
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fab1 	bl	800e07e <USBD_LL_DevConnected>
}
 800fb1c:	bf00      	nop
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe faae 	bl	800e094 <USBD_LL_DevDisconnected>
}
 800fb38:	bf00      	nop
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d13e      	bne.n	800fbce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb50:	4a21      	ldr	r2, [pc, #132]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a1f      	ldr	r2, [pc, #124]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb60:	4b1d      	ldr	r3, [pc, #116]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb62:	4a1e      	ldr	r2, [pc, #120]	; (800fbdc <USBD_LL_Init+0x9c>)
 800fb64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fb66:	4b1c      	ldr	r3, [pc, #112]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb68:	2209      	movs	r2, #9
 800fb6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb6c:	4b1a      	ldr	r3, [pc, #104]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb6e:	2202      	movs	r2, #2
 800fb70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb72:	4b19      	ldr	r3, [pc, #100]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb78:	4b17      	ldr	r3, [pc, #92]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb7a:	2202      	movs	r2, #2
 800fb7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb7e:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb84:	4b14      	ldr	r3, [pc, #80]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb8a:	4b13      	ldr	r3, [pc, #76]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fb90:	4b11      	ldr	r3, [pc, #68]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fb96:	4b10      	ldr	r3, [pc, #64]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb9c:	4b0e      	ldr	r3, [pc, #56]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fba2:	480d      	ldr	r0, [pc, #52]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fba4:	f7f6 f9b7 	bl	8005f16 <HAL_PCD_Init>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fbae:	f7f1 f9a5 	bl	8000efc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fbb2:	2180      	movs	r1, #128	; 0x80
 800fbb4:	4808      	ldr	r0, [pc, #32]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fbb6:	f7f7 fc26 	bl	8007406 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fbba:	2240      	movs	r2, #64	; 0x40
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	4806      	ldr	r0, [pc, #24]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fbc0:	f7f7 fbda 	bl	8007378 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fbc4:	2280      	movs	r2, #128	; 0x80
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	4803      	ldr	r0, [pc, #12]	; (800fbd8 <USBD_LL_Init+0x98>)
 800fbca:	f7f7 fbd5 	bl	8007378 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	24001a10 	.word	0x24001a10
 800fbdc:	40080000 	.word	0x40080000

0800fbe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbec:	2300      	movs	r3, #0
 800fbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7f6 fab1 	bl	800615e <HAL_PCD_Start>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f000 f942 	bl	800fe8c <USBD_Get_USB_Status>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b084      	sub	sp, #16
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	4608      	mov	r0, r1
 800fc20:	4611      	mov	r1, r2
 800fc22:	461a      	mov	r2, r3
 800fc24:	4603      	mov	r3, r0
 800fc26:	70fb      	strb	r3, [r7, #3]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	70bb      	strb	r3, [r7, #2]
 800fc2c:	4613      	mov	r3, r2
 800fc2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc34:	2300      	movs	r3, #0
 800fc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc3e:	78bb      	ldrb	r3, [r7, #2]
 800fc40:	883a      	ldrh	r2, [r7, #0]
 800fc42:	78f9      	ldrb	r1, [r7, #3]
 800fc44:	f7f6 ffb1 	bl	8006baa <HAL_PCD_EP_Open>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc4c:	7bfb      	ldrb	r3, [r7, #15]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f000 f91c 	bl	800fe8c <USBD_Get_USB_Status>
 800fc54:	4603      	mov	r3, r0
 800fc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc58:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3710      	adds	r7, #16
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b084      	sub	sp, #16
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc72:	2300      	movs	r3, #0
 800fc74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc7c:	78fa      	ldrb	r2, [r7, #3]
 800fc7e:	4611      	mov	r1, r2
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7f6 fffa 	bl	8006c7a <HAL_PCD_EP_Close>
 800fc86:	4603      	mov	r3, r0
 800fc88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc8a:	7bfb      	ldrb	r3, [r7, #15]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f000 f8fd 	bl	800fe8c <USBD_Get_USB_Status>
 800fc92:	4603      	mov	r3, r0
 800fc94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc96:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcba:	78fa      	ldrb	r2, [r7, #3]
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7f7 f8b4 	bl	8006e2c <HAL_PCD_EP_SetStall>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f000 f8de 	bl	800fe8c <USBD_Get_USB_Status>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3710      	adds	r7, #16
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b084      	sub	sp, #16
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	460b      	mov	r3, r1
 800fce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcea:	2300      	movs	r3, #0
 800fcec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcf8:	78fa      	ldrb	r2, [r7, #3]
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f7 f8f9 	bl	8006ef4 <HAL_PCD_EP_ClrStall>
 800fd02:	4603      	mov	r3, r0
 800fd04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd06:	7bfb      	ldrb	r3, [r7, #15]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f000 f8bf 	bl	800fe8c <USBD_Get_USB_Status>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd12:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	460b      	mov	r3, r1
 800fd26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	da0b      	bge.n	800fd50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd38:	78fb      	ldrb	r3, [r7, #3]
 800fd3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd3e:	68f9      	ldr	r1, [r7, #12]
 800fd40:	4613      	mov	r3, r2
 800fd42:	00db      	lsls	r3, r3, #3
 800fd44:	4413      	add	r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	440b      	add	r3, r1
 800fd4a:	333e      	adds	r3, #62	; 0x3e
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	e00b      	b.n	800fd68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd50:	78fb      	ldrb	r3, [r7, #3]
 800fd52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd56:	68f9      	ldr	r1, [r7, #12]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	00db      	lsls	r3, r3, #3
 800fd5c:	4413      	add	r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	440b      	add	r3, r1
 800fd62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd8e:	78fa      	ldrb	r2, [r7, #3]
 800fd90:	4611      	mov	r1, r2
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f6 fee4 	bl	8006b60 <HAL_PCD_SetAddress>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f000 f874 	bl	800fe8c <USBD_Get_USB_Status>
 800fda4:	4603      	mov	r3, r0
 800fda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b086      	sub	sp, #24
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	60f8      	str	r0, [r7, #12]
 800fdba:	607a      	str	r2, [r7, #4]
 800fdbc:	603b      	str	r3, [r7, #0]
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdd0:	7af9      	ldrb	r1, [r7, #11]
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	f7f6 ffee 	bl	8006db6 <HAL_PCD_EP_Transmit>
 800fdda:	4603      	mov	r3, r0
 800fddc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdde:	7dfb      	ldrb	r3, [r7, #23]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 f853 	bl	800fe8c <USBD_Get_USB_Status>
 800fde6:	4603      	mov	r3, r0
 800fde8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdea:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3718      	adds	r7, #24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	607a      	str	r2, [r7, #4]
 800fdfe:	603b      	str	r3, [r7, #0]
 800fe00:	460b      	mov	r3, r1
 800fe02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe12:	7af9      	ldrb	r1, [r7, #11]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	f7f6 ff79 	bl	8006d0e <HAL_PCD_EP_Receive>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe20:	7dfb      	ldrb	r3, [r7, #23]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f000 f832 	bl	800fe8c <USBD_Get_USB_Status>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3718      	adds	r7, #24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b082      	sub	sp, #8
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
 800fe3e:	460b      	mov	r3, r1
 800fe40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe48:	78fa      	ldrb	r2, [r7, #3]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f6 ff9a 	bl	8006d86 <HAL_PCD_EP_GetRxCount>
 800fe52:	4603      	mov	r3, r0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe64:	4b03      	ldr	r3, [pc, #12]	; (800fe74 <USBD_static_malloc+0x18>)
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	370c      	adds	r7, #12
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	24001f1c 	.word	0x24001f1c

0800fe78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	4603      	mov	r3, r0
 800fe94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe96:	2300      	movs	r3, #0
 800fe98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	2b03      	cmp	r3, #3
 800fe9e:	d817      	bhi.n	800fed0 <USBD_Get_USB_Status+0x44>
 800fea0:	a201      	add	r2, pc, #4	; (adr r2, 800fea8 <USBD_Get_USB_Status+0x1c>)
 800fea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea6:	bf00      	nop
 800fea8:	0800feb9 	.word	0x0800feb9
 800feac:	0800febf 	.word	0x0800febf
 800feb0:	0800fec5 	.word	0x0800fec5
 800feb4:	0800fecb 	.word	0x0800fecb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800feb8:	2300      	movs	r3, #0
 800feba:	73fb      	strb	r3, [r7, #15]
    break;
 800febc:	e00b      	b.n	800fed6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800febe:	2303      	movs	r3, #3
 800fec0:	73fb      	strb	r3, [r7, #15]
    break;
 800fec2:	e008      	b.n	800fed6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fec4:	2301      	movs	r3, #1
 800fec6:	73fb      	strb	r3, [r7, #15]
    break;
 800fec8:	e005      	b.n	800fed6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800feca:	2303      	movs	r3, #3
 800fecc:	73fb      	strb	r3, [r7, #15]
    break;
 800fece:	e002      	b.n	800fed6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fed0:	2303      	movs	r3, #3
 800fed2:	73fb      	strb	r3, [r7, #15]
    break;
 800fed4:	bf00      	nop
  }
  return usb_status;
 800fed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3714      	adds	r7, #20
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <arm_sin_f32>:
 800fee4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ff64 <arm_sin_f32+0x80>
 800fee8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800feec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fef0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef8:	d504      	bpl.n	800ff04 <arm_sin_f32+0x20>
 800fefa:	ee17 3a90 	vmov	r3, s15
 800fefe:	3b01      	subs	r3, #1
 800ff00:	ee07 3a90 	vmov	s15, r3
 800ff04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff08:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ff68 <arm_sin_f32+0x84>
 800ff0c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ff10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff14:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ff18:	ee17 3a10 	vmov	r3, s14
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff22:	d21a      	bcs.n	800ff5a <arm_sin_f32+0x76>
 800ff24:	ee07 3a10 	vmov	s14, r3
 800ff28:	1c59      	adds	r1, r3, #1
 800ff2a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ff2e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ff32:	4a0e      	ldr	r2, [pc, #56]	; (800ff6c <arm_sin_f32+0x88>)
 800ff34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ff38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ff40:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ff44:	edd3 6a00 	vldr	s13, [r3]
 800ff48:	ed92 7a00 	vldr	s14, [r2]
 800ff4c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ff50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff54:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff58:	4770      	bx	lr
 800ff5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ff5e:	2101      	movs	r1, #1
 800ff60:	2300      	movs	r3, #0
 800ff62:	e7e6      	b.n	800ff32 <arm_sin_f32+0x4e>
 800ff64:	3e22f983 	.word	0x3e22f983
 800ff68:	44000000 	.word	0x44000000
 800ff6c:	08012ef8 	.word	0x08012ef8

0800ff70 <arm_cos_f32>:
 800ff70:	eddf 7a21 	vldr	s15, [pc, #132]	; 800fff8 <arm_cos_f32+0x88>
 800ff74:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800ff78:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff7c:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ff80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ff84:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ff88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8c:	d504      	bpl.n	800ff98 <arm_cos_f32+0x28>
 800ff8e:	ee17 3a90 	vmov	r3, s15
 800ff92:	3b01      	subs	r3, #1
 800ff94:	ee07 3a90 	vmov	s15, r3
 800ff98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff9c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800fffc <arm_cos_f32+0x8c>
 800ffa0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ffa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ffa8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ffac:	ee17 3a10 	vmov	r3, s14
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffb6:	d21a      	bcs.n	800ffee <arm_cos_f32+0x7e>
 800ffb8:	ee07 3a10 	vmov	s14, r3
 800ffbc:	1c59      	adds	r1, r3, #1
 800ffbe:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ffc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ffc6:	4a0e      	ldr	r2, [pc, #56]	; (8010000 <arm_cos_f32+0x90>)
 800ffc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ffcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffd0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ffd4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ffd8:	edd3 6a00 	vldr	s13, [r3]
 800ffdc:	ed92 7a00 	vldr	s14, [r2]
 800ffe0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ffe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffe8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ffec:	4770      	bx	lr
 800ffee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fff2:	2101      	movs	r1, #1
 800fff4:	2300      	movs	r3, #0
 800fff6:	e7e6      	b.n	800ffc6 <arm_cos_f32+0x56>
 800fff8:	3e22f983 	.word	0x3e22f983
 800fffc:	44000000 	.word	0x44000000
 8010000:	08012ef8 	.word	0x08012ef8

08010004 <malloc>:
 8010004:	4b02      	ldr	r3, [pc, #8]	; (8010010 <malloc+0xc>)
 8010006:	4601      	mov	r1, r0
 8010008:	6818      	ldr	r0, [r3, #0]
 801000a:	f000 b823 	b.w	8010054 <_malloc_r>
 801000e:	bf00      	nop
 8010010:	2400015c 	.word	0x2400015c

08010014 <sbrk_aligned>:
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	4e0e      	ldr	r6, [pc, #56]	; (8010050 <sbrk_aligned+0x3c>)
 8010018:	460c      	mov	r4, r1
 801001a:	6831      	ldr	r1, [r6, #0]
 801001c:	4605      	mov	r5, r0
 801001e:	b911      	cbnz	r1, 8010026 <sbrk_aligned+0x12>
 8010020:	f000 fe46 	bl	8010cb0 <_sbrk_r>
 8010024:	6030      	str	r0, [r6, #0]
 8010026:	4621      	mov	r1, r4
 8010028:	4628      	mov	r0, r5
 801002a:	f000 fe41 	bl	8010cb0 <_sbrk_r>
 801002e:	1c43      	adds	r3, r0, #1
 8010030:	d00a      	beq.n	8010048 <sbrk_aligned+0x34>
 8010032:	1cc4      	adds	r4, r0, #3
 8010034:	f024 0403 	bic.w	r4, r4, #3
 8010038:	42a0      	cmp	r0, r4
 801003a:	d007      	beq.n	801004c <sbrk_aligned+0x38>
 801003c:	1a21      	subs	r1, r4, r0
 801003e:	4628      	mov	r0, r5
 8010040:	f000 fe36 	bl	8010cb0 <_sbrk_r>
 8010044:	3001      	adds	r0, #1
 8010046:	d101      	bne.n	801004c <sbrk_aligned+0x38>
 8010048:	f04f 34ff 	mov.w	r4, #4294967295
 801004c:	4620      	mov	r0, r4
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	24002140 	.word	0x24002140

08010054 <_malloc_r>:
 8010054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010058:	1ccd      	adds	r5, r1, #3
 801005a:	f025 0503 	bic.w	r5, r5, #3
 801005e:	3508      	adds	r5, #8
 8010060:	2d0c      	cmp	r5, #12
 8010062:	bf38      	it	cc
 8010064:	250c      	movcc	r5, #12
 8010066:	2d00      	cmp	r5, #0
 8010068:	4607      	mov	r7, r0
 801006a:	db01      	blt.n	8010070 <_malloc_r+0x1c>
 801006c:	42a9      	cmp	r1, r5
 801006e:	d905      	bls.n	801007c <_malloc_r+0x28>
 8010070:	230c      	movs	r3, #12
 8010072:	603b      	str	r3, [r7, #0]
 8010074:	2600      	movs	r6, #0
 8010076:	4630      	mov	r0, r6
 8010078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801007c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010150 <_malloc_r+0xfc>
 8010080:	f000 f868 	bl	8010154 <__malloc_lock>
 8010084:	f8d8 3000 	ldr.w	r3, [r8]
 8010088:	461c      	mov	r4, r3
 801008a:	bb5c      	cbnz	r4, 80100e4 <_malloc_r+0x90>
 801008c:	4629      	mov	r1, r5
 801008e:	4638      	mov	r0, r7
 8010090:	f7ff ffc0 	bl	8010014 <sbrk_aligned>
 8010094:	1c43      	adds	r3, r0, #1
 8010096:	4604      	mov	r4, r0
 8010098:	d155      	bne.n	8010146 <_malloc_r+0xf2>
 801009a:	f8d8 4000 	ldr.w	r4, [r8]
 801009e:	4626      	mov	r6, r4
 80100a0:	2e00      	cmp	r6, #0
 80100a2:	d145      	bne.n	8010130 <_malloc_r+0xdc>
 80100a4:	2c00      	cmp	r4, #0
 80100a6:	d048      	beq.n	801013a <_malloc_r+0xe6>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	4631      	mov	r1, r6
 80100ac:	4638      	mov	r0, r7
 80100ae:	eb04 0903 	add.w	r9, r4, r3
 80100b2:	f000 fdfd 	bl	8010cb0 <_sbrk_r>
 80100b6:	4581      	cmp	r9, r0
 80100b8:	d13f      	bne.n	801013a <_malloc_r+0xe6>
 80100ba:	6821      	ldr	r1, [r4, #0]
 80100bc:	1a6d      	subs	r5, r5, r1
 80100be:	4629      	mov	r1, r5
 80100c0:	4638      	mov	r0, r7
 80100c2:	f7ff ffa7 	bl	8010014 <sbrk_aligned>
 80100c6:	3001      	adds	r0, #1
 80100c8:	d037      	beq.n	801013a <_malloc_r+0xe6>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	442b      	add	r3, r5
 80100ce:	6023      	str	r3, [r4, #0]
 80100d0:	f8d8 3000 	ldr.w	r3, [r8]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d038      	beq.n	801014a <_malloc_r+0xf6>
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	42a2      	cmp	r2, r4
 80100dc:	d12b      	bne.n	8010136 <_malloc_r+0xe2>
 80100de:	2200      	movs	r2, #0
 80100e0:	605a      	str	r2, [r3, #4]
 80100e2:	e00f      	b.n	8010104 <_malloc_r+0xb0>
 80100e4:	6822      	ldr	r2, [r4, #0]
 80100e6:	1b52      	subs	r2, r2, r5
 80100e8:	d41f      	bmi.n	801012a <_malloc_r+0xd6>
 80100ea:	2a0b      	cmp	r2, #11
 80100ec:	d917      	bls.n	801011e <_malloc_r+0xca>
 80100ee:	1961      	adds	r1, r4, r5
 80100f0:	42a3      	cmp	r3, r4
 80100f2:	6025      	str	r5, [r4, #0]
 80100f4:	bf18      	it	ne
 80100f6:	6059      	strne	r1, [r3, #4]
 80100f8:	6863      	ldr	r3, [r4, #4]
 80100fa:	bf08      	it	eq
 80100fc:	f8c8 1000 	streq.w	r1, [r8]
 8010100:	5162      	str	r2, [r4, r5]
 8010102:	604b      	str	r3, [r1, #4]
 8010104:	4638      	mov	r0, r7
 8010106:	f104 060b 	add.w	r6, r4, #11
 801010a:	f000 f829 	bl	8010160 <__malloc_unlock>
 801010e:	f026 0607 	bic.w	r6, r6, #7
 8010112:	1d23      	adds	r3, r4, #4
 8010114:	1af2      	subs	r2, r6, r3
 8010116:	d0ae      	beq.n	8010076 <_malloc_r+0x22>
 8010118:	1b9b      	subs	r3, r3, r6
 801011a:	50a3      	str	r3, [r4, r2]
 801011c:	e7ab      	b.n	8010076 <_malloc_r+0x22>
 801011e:	42a3      	cmp	r3, r4
 8010120:	6862      	ldr	r2, [r4, #4]
 8010122:	d1dd      	bne.n	80100e0 <_malloc_r+0x8c>
 8010124:	f8c8 2000 	str.w	r2, [r8]
 8010128:	e7ec      	b.n	8010104 <_malloc_r+0xb0>
 801012a:	4623      	mov	r3, r4
 801012c:	6864      	ldr	r4, [r4, #4]
 801012e:	e7ac      	b.n	801008a <_malloc_r+0x36>
 8010130:	4634      	mov	r4, r6
 8010132:	6876      	ldr	r6, [r6, #4]
 8010134:	e7b4      	b.n	80100a0 <_malloc_r+0x4c>
 8010136:	4613      	mov	r3, r2
 8010138:	e7cc      	b.n	80100d4 <_malloc_r+0x80>
 801013a:	230c      	movs	r3, #12
 801013c:	603b      	str	r3, [r7, #0]
 801013e:	4638      	mov	r0, r7
 8010140:	f000 f80e 	bl	8010160 <__malloc_unlock>
 8010144:	e797      	b.n	8010076 <_malloc_r+0x22>
 8010146:	6025      	str	r5, [r4, #0]
 8010148:	e7dc      	b.n	8010104 <_malloc_r+0xb0>
 801014a:	605b      	str	r3, [r3, #4]
 801014c:	deff      	udf	#255	; 0xff
 801014e:	bf00      	nop
 8010150:	2400213c 	.word	0x2400213c

08010154 <__malloc_lock>:
 8010154:	4801      	ldr	r0, [pc, #4]	; (801015c <__malloc_lock+0x8>)
 8010156:	f000 bdf8 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 801015a:	bf00      	nop
 801015c:	24002284 	.word	0x24002284

08010160 <__malloc_unlock>:
 8010160:	4801      	ldr	r0, [pc, #4]	; (8010168 <__malloc_unlock+0x8>)
 8010162:	f000 bdf3 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010166:	bf00      	nop
 8010168:	24002284 	.word	0x24002284

0801016c <__cvt>:
 801016c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801016e:	ed2d 8b02 	vpush	{d8}
 8010172:	eeb0 8b40 	vmov.f64	d8, d0
 8010176:	b085      	sub	sp, #20
 8010178:	4617      	mov	r7, r2
 801017a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801017c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801017e:	ee18 2a90 	vmov	r2, s17
 8010182:	f025 0520 	bic.w	r5, r5, #32
 8010186:	2a00      	cmp	r2, #0
 8010188:	bfb6      	itet	lt
 801018a:	222d      	movlt	r2, #45	; 0x2d
 801018c:	2200      	movge	r2, #0
 801018e:	eeb1 8b40 	vneglt.f64	d8, d0
 8010192:	2d46      	cmp	r5, #70	; 0x46
 8010194:	460c      	mov	r4, r1
 8010196:	701a      	strb	r2, [r3, #0]
 8010198:	d004      	beq.n	80101a4 <__cvt+0x38>
 801019a:	2d45      	cmp	r5, #69	; 0x45
 801019c:	d100      	bne.n	80101a0 <__cvt+0x34>
 801019e:	3401      	adds	r4, #1
 80101a0:	2102      	movs	r1, #2
 80101a2:	e000      	b.n	80101a6 <__cvt+0x3a>
 80101a4:	2103      	movs	r1, #3
 80101a6:	ab03      	add	r3, sp, #12
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	ab02      	add	r3, sp, #8
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	4622      	mov	r2, r4
 80101b0:	4633      	mov	r3, r6
 80101b2:	eeb0 0b48 	vmov.f64	d0, d8
 80101b6:	f000 fe53 	bl	8010e60 <_dtoa_r>
 80101ba:	2d47      	cmp	r5, #71	; 0x47
 80101bc:	d101      	bne.n	80101c2 <__cvt+0x56>
 80101be:	07fb      	lsls	r3, r7, #31
 80101c0:	d51a      	bpl.n	80101f8 <__cvt+0x8c>
 80101c2:	2d46      	cmp	r5, #70	; 0x46
 80101c4:	eb00 0204 	add.w	r2, r0, r4
 80101c8:	d10c      	bne.n	80101e4 <__cvt+0x78>
 80101ca:	7803      	ldrb	r3, [r0, #0]
 80101cc:	2b30      	cmp	r3, #48	; 0x30
 80101ce:	d107      	bne.n	80101e0 <__cvt+0x74>
 80101d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80101d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d8:	bf1c      	itt	ne
 80101da:	f1c4 0401 	rsbne	r4, r4, #1
 80101de:	6034      	strne	r4, [r6, #0]
 80101e0:	6833      	ldr	r3, [r6, #0]
 80101e2:	441a      	add	r2, r3
 80101e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80101e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ec:	bf08      	it	eq
 80101ee:	9203      	streq	r2, [sp, #12]
 80101f0:	2130      	movs	r1, #48	; 0x30
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d307      	bcc.n	8010208 <__cvt+0x9c>
 80101f8:	9b03      	ldr	r3, [sp, #12]
 80101fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101fc:	1a1b      	subs	r3, r3, r0
 80101fe:	6013      	str	r3, [r2, #0]
 8010200:	b005      	add	sp, #20
 8010202:	ecbd 8b02 	vpop	{d8}
 8010206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010208:	1c5c      	adds	r4, r3, #1
 801020a:	9403      	str	r4, [sp, #12]
 801020c:	7019      	strb	r1, [r3, #0]
 801020e:	e7f0      	b.n	80101f2 <__cvt+0x86>

08010210 <__exponent>:
 8010210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010212:	4603      	mov	r3, r0
 8010214:	2900      	cmp	r1, #0
 8010216:	bfb8      	it	lt
 8010218:	4249      	neglt	r1, r1
 801021a:	f803 2b02 	strb.w	r2, [r3], #2
 801021e:	bfb4      	ite	lt
 8010220:	222d      	movlt	r2, #45	; 0x2d
 8010222:	222b      	movge	r2, #43	; 0x2b
 8010224:	2909      	cmp	r1, #9
 8010226:	7042      	strb	r2, [r0, #1]
 8010228:	dd2a      	ble.n	8010280 <__exponent+0x70>
 801022a:	f10d 0207 	add.w	r2, sp, #7
 801022e:	4617      	mov	r7, r2
 8010230:	260a      	movs	r6, #10
 8010232:	4694      	mov	ip, r2
 8010234:	fb91 f5f6 	sdiv	r5, r1, r6
 8010238:	fb06 1415 	mls	r4, r6, r5, r1
 801023c:	3430      	adds	r4, #48	; 0x30
 801023e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010242:	460c      	mov	r4, r1
 8010244:	2c63      	cmp	r4, #99	; 0x63
 8010246:	f102 32ff 	add.w	r2, r2, #4294967295
 801024a:	4629      	mov	r1, r5
 801024c:	dcf1      	bgt.n	8010232 <__exponent+0x22>
 801024e:	3130      	adds	r1, #48	; 0x30
 8010250:	f1ac 0402 	sub.w	r4, ip, #2
 8010254:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010258:	1c41      	adds	r1, r0, #1
 801025a:	4622      	mov	r2, r4
 801025c:	42ba      	cmp	r2, r7
 801025e:	d30a      	bcc.n	8010276 <__exponent+0x66>
 8010260:	f10d 0209 	add.w	r2, sp, #9
 8010264:	eba2 020c 	sub.w	r2, r2, ip
 8010268:	42bc      	cmp	r4, r7
 801026a:	bf88      	it	hi
 801026c:	2200      	movhi	r2, #0
 801026e:	4413      	add	r3, r2
 8010270:	1a18      	subs	r0, r3, r0
 8010272:	b003      	add	sp, #12
 8010274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010276:	f812 5b01 	ldrb.w	r5, [r2], #1
 801027a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801027e:	e7ed      	b.n	801025c <__exponent+0x4c>
 8010280:	2330      	movs	r3, #48	; 0x30
 8010282:	3130      	adds	r1, #48	; 0x30
 8010284:	7083      	strb	r3, [r0, #2]
 8010286:	70c1      	strb	r1, [r0, #3]
 8010288:	1d03      	adds	r3, r0, #4
 801028a:	e7f1      	b.n	8010270 <__exponent+0x60>
 801028c:	0000      	movs	r0, r0
	...

08010290 <_printf_float>:
 8010290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010294:	b08b      	sub	sp, #44	; 0x2c
 8010296:	460c      	mov	r4, r1
 8010298:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801029c:	4616      	mov	r6, r2
 801029e:	461f      	mov	r7, r3
 80102a0:	4605      	mov	r5, r0
 80102a2:	f000 fccd 	bl	8010c40 <_localeconv_r>
 80102a6:	f8d0 b000 	ldr.w	fp, [r0]
 80102aa:	4658      	mov	r0, fp
 80102ac:	f7f0 f868 	bl	8000380 <strlen>
 80102b0:	2300      	movs	r3, #0
 80102b2:	9308      	str	r3, [sp, #32]
 80102b4:	f8d8 3000 	ldr.w	r3, [r8]
 80102b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80102bc:	6822      	ldr	r2, [r4, #0]
 80102be:	3307      	adds	r3, #7
 80102c0:	f023 0307 	bic.w	r3, r3, #7
 80102c4:	f103 0108 	add.w	r1, r3, #8
 80102c8:	f8c8 1000 	str.w	r1, [r8]
 80102cc:	ed93 0b00 	vldr	d0, [r3]
 80102d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010530 <_printf_float+0x2a0>
 80102d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80102d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80102dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80102e4:	4682      	mov	sl, r0
 80102e6:	dd24      	ble.n	8010332 <_printf_float+0xa2>
 80102e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80102ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f0:	d502      	bpl.n	80102f8 <_printf_float+0x68>
 80102f2:	232d      	movs	r3, #45	; 0x2d
 80102f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102f8:	498f      	ldr	r1, [pc, #572]	; (8010538 <_printf_float+0x2a8>)
 80102fa:	4b90      	ldr	r3, [pc, #576]	; (801053c <_printf_float+0x2ac>)
 80102fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010300:	bf94      	ite	ls
 8010302:	4688      	movls	r8, r1
 8010304:	4698      	movhi	r8, r3
 8010306:	2303      	movs	r3, #3
 8010308:	6123      	str	r3, [r4, #16]
 801030a:	f022 0204 	bic.w	r2, r2, #4
 801030e:	2300      	movs	r3, #0
 8010310:	6022      	str	r2, [r4, #0]
 8010312:	9304      	str	r3, [sp, #16]
 8010314:	9700      	str	r7, [sp, #0]
 8010316:	4633      	mov	r3, r6
 8010318:	aa09      	add	r2, sp, #36	; 0x24
 801031a:	4621      	mov	r1, r4
 801031c:	4628      	mov	r0, r5
 801031e:	f000 f9d1 	bl	80106c4 <_printf_common>
 8010322:	3001      	adds	r0, #1
 8010324:	f040 808a 	bne.w	801043c <_printf_float+0x1ac>
 8010328:	f04f 30ff 	mov.w	r0, #4294967295
 801032c:	b00b      	add	sp, #44	; 0x2c
 801032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010332:	eeb4 0b40 	vcmp.f64	d0, d0
 8010336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801033a:	d709      	bvc.n	8010350 <_printf_float+0xc0>
 801033c:	ee10 3a90 	vmov	r3, s1
 8010340:	2b00      	cmp	r3, #0
 8010342:	bfbc      	itt	lt
 8010344:	232d      	movlt	r3, #45	; 0x2d
 8010346:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801034a:	497d      	ldr	r1, [pc, #500]	; (8010540 <_printf_float+0x2b0>)
 801034c:	4b7d      	ldr	r3, [pc, #500]	; (8010544 <_printf_float+0x2b4>)
 801034e:	e7d5      	b.n	80102fc <_printf_float+0x6c>
 8010350:	6863      	ldr	r3, [r4, #4]
 8010352:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010356:	9104      	str	r1, [sp, #16]
 8010358:	1c59      	adds	r1, r3, #1
 801035a:	d13c      	bne.n	80103d6 <_printf_float+0x146>
 801035c:	2306      	movs	r3, #6
 801035e:	6063      	str	r3, [r4, #4]
 8010360:	2300      	movs	r3, #0
 8010362:	9303      	str	r3, [sp, #12]
 8010364:	ab08      	add	r3, sp, #32
 8010366:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801036a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801036e:	ab07      	add	r3, sp, #28
 8010370:	6861      	ldr	r1, [r4, #4]
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	6022      	str	r2, [r4, #0]
 8010376:	f10d 031b 	add.w	r3, sp, #27
 801037a:	4628      	mov	r0, r5
 801037c:	f7ff fef6 	bl	801016c <__cvt>
 8010380:	9b04      	ldr	r3, [sp, #16]
 8010382:	9907      	ldr	r1, [sp, #28]
 8010384:	2b47      	cmp	r3, #71	; 0x47
 8010386:	4680      	mov	r8, r0
 8010388:	d108      	bne.n	801039c <_printf_float+0x10c>
 801038a:	1cc8      	adds	r0, r1, #3
 801038c:	db02      	blt.n	8010394 <_printf_float+0x104>
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	4299      	cmp	r1, r3
 8010392:	dd41      	ble.n	8010418 <_printf_float+0x188>
 8010394:	f1a9 0902 	sub.w	r9, r9, #2
 8010398:	fa5f f989 	uxtb.w	r9, r9
 801039c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80103a0:	d820      	bhi.n	80103e4 <_printf_float+0x154>
 80103a2:	3901      	subs	r1, #1
 80103a4:	464a      	mov	r2, r9
 80103a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80103aa:	9107      	str	r1, [sp, #28]
 80103ac:	f7ff ff30 	bl	8010210 <__exponent>
 80103b0:	9a08      	ldr	r2, [sp, #32]
 80103b2:	9004      	str	r0, [sp, #16]
 80103b4:	1813      	adds	r3, r2, r0
 80103b6:	2a01      	cmp	r2, #1
 80103b8:	6123      	str	r3, [r4, #16]
 80103ba:	dc02      	bgt.n	80103c2 <_printf_float+0x132>
 80103bc:	6822      	ldr	r2, [r4, #0]
 80103be:	07d2      	lsls	r2, r2, #31
 80103c0:	d501      	bpl.n	80103c6 <_printf_float+0x136>
 80103c2:	3301      	adds	r3, #1
 80103c4:	6123      	str	r3, [r4, #16]
 80103c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d0a2      	beq.n	8010314 <_printf_float+0x84>
 80103ce:	232d      	movs	r3, #45	; 0x2d
 80103d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103d4:	e79e      	b.n	8010314 <_printf_float+0x84>
 80103d6:	9904      	ldr	r1, [sp, #16]
 80103d8:	2947      	cmp	r1, #71	; 0x47
 80103da:	d1c1      	bne.n	8010360 <_printf_float+0xd0>
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d1bf      	bne.n	8010360 <_printf_float+0xd0>
 80103e0:	2301      	movs	r3, #1
 80103e2:	e7bc      	b.n	801035e <_printf_float+0xce>
 80103e4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80103e8:	d118      	bne.n	801041c <_printf_float+0x18c>
 80103ea:	2900      	cmp	r1, #0
 80103ec:	6863      	ldr	r3, [r4, #4]
 80103ee:	dd0b      	ble.n	8010408 <_printf_float+0x178>
 80103f0:	6121      	str	r1, [r4, #16]
 80103f2:	b913      	cbnz	r3, 80103fa <_printf_float+0x16a>
 80103f4:	6822      	ldr	r2, [r4, #0]
 80103f6:	07d0      	lsls	r0, r2, #31
 80103f8:	d502      	bpl.n	8010400 <_printf_float+0x170>
 80103fa:	3301      	adds	r3, #1
 80103fc:	440b      	add	r3, r1
 80103fe:	6123      	str	r3, [r4, #16]
 8010400:	2300      	movs	r3, #0
 8010402:	65a1      	str	r1, [r4, #88]	; 0x58
 8010404:	9304      	str	r3, [sp, #16]
 8010406:	e7de      	b.n	80103c6 <_printf_float+0x136>
 8010408:	b913      	cbnz	r3, 8010410 <_printf_float+0x180>
 801040a:	6822      	ldr	r2, [r4, #0]
 801040c:	07d2      	lsls	r2, r2, #31
 801040e:	d501      	bpl.n	8010414 <_printf_float+0x184>
 8010410:	3302      	adds	r3, #2
 8010412:	e7f4      	b.n	80103fe <_printf_float+0x16e>
 8010414:	2301      	movs	r3, #1
 8010416:	e7f2      	b.n	80103fe <_printf_float+0x16e>
 8010418:	f04f 0967 	mov.w	r9, #103	; 0x67
 801041c:	9b08      	ldr	r3, [sp, #32]
 801041e:	4299      	cmp	r1, r3
 8010420:	db05      	blt.n	801042e <_printf_float+0x19e>
 8010422:	6823      	ldr	r3, [r4, #0]
 8010424:	6121      	str	r1, [r4, #16]
 8010426:	07d8      	lsls	r0, r3, #31
 8010428:	d5ea      	bpl.n	8010400 <_printf_float+0x170>
 801042a:	1c4b      	adds	r3, r1, #1
 801042c:	e7e7      	b.n	80103fe <_printf_float+0x16e>
 801042e:	2900      	cmp	r1, #0
 8010430:	bfd4      	ite	le
 8010432:	f1c1 0202 	rsble	r2, r1, #2
 8010436:	2201      	movgt	r2, #1
 8010438:	4413      	add	r3, r2
 801043a:	e7e0      	b.n	80103fe <_printf_float+0x16e>
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	055a      	lsls	r2, r3, #21
 8010440:	d407      	bmi.n	8010452 <_printf_float+0x1c2>
 8010442:	6923      	ldr	r3, [r4, #16]
 8010444:	4642      	mov	r2, r8
 8010446:	4631      	mov	r1, r6
 8010448:	4628      	mov	r0, r5
 801044a:	47b8      	blx	r7
 801044c:	3001      	adds	r0, #1
 801044e:	d12a      	bne.n	80104a6 <_printf_float+0x216>
 8010450:	e76a      	b.n	8010328 <_printf_float+0x98>
 8010452:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010456:	f240 80e0 	bls.w	801061a <_printf_float+0x38a>
 801045a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801045e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010466:	d133      	bne.n	80104d0 <_printf_float+0x240>
 8010468:	4a37      	ldr	r2, [pc, #220]	; (8010548 <_printf_float+0x2b8>)
 801046a:	2301      	movs	r3, #1
 801046c:	4631      	mov	r1, r6
 801046e:	4628      	mov	r0, r5
 8010470:	47b8      	blx	r7
 8010472:	3001      	adds	r0, #1
 8010474:	f43f af58 	beq.w	8010328 <_printf_float+0x98>
 8010478:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801047c:	429a      	cmp	r2, r3
 801047e:	db02      	blt.n	8010486 <_printf_float+0x1f6>
 8010480:	6823      	ldr	r3, [r4, #0]
 8010482:	07d8      	lsls	r0, r3, #31
 8010484:	d50f      	bpl.n	80104a6 <_printf_float+0x216>
 8010486:	4653      	mov	r3, sl
 8010488:	465a      	mov	r2, fp
 801048a:	4631      	mov	r1, r6
 801048c:	4628      	mov	r0, r5
 801048e:	47b8      	blx	r7
 8010490:	3001      	adds	r0, #1
 8010492:	f43f af49 	beq.w	8010328 <_printf_float+0x98>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	f104 091a 	add.w	r9, r4, #26
 801049e:	9b08      	ldr	r3, [sp, #32]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	4543      	cmp	r3, r8
 80104a4:	dc09      	bgt.n	80104ba <_printf_float+0x22a>
 80104a6:	6823      	ldr	r3, [r4, #0]
 80104a8:	079b      	lsls	r3, r3, #30
 80104aa:	f100 8106 	bmi.w	80106ba <_printf_float+0x42a>
 80104ae:	68e0      	ldr	r0, [r4, #12]
 80104b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b2:	4298      	cmp	r0, r3
 80104b4:	bfb8      	it	lt
 80104b6:	4618      	movlt	r0, r3
 80104b8:	e738      	b.n	801032c <_printf_float+0x9c>
 80104ba:	2301      	movs	r3, #1
 80104bc:	464a      	mov	r2, r9
 80104be:	4631      	mov	r1, r6
 80104c0:	4628      	mov	r0, r5
 80104c2:	47b8      	blx	r7
 80104c4:	3001      	adds	r0, #1
 80104c6:	f43f af2f 	beq.w	8010328 <_printf_float+0x98>
 80104ca:	f108 0801 	add.w	r8, r8, #1
 80104ce:	e7e6      	b.n	801049e <_printf_float+0x20e>
 80104d0:	9b07      	ldr	r3, [sp, #28]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	dc3a      	bgt.n	801054c <_printf_float+0x2bc>
 80104d6:	4a1c      	ldr	r2, [pc, #112]	; (8010548 <_printf_float+0x2b8>)
 80104d8:	2301      	movs	r3, #1
 80104da:	4631      	mov	r1, r6
 80104dc:	4628      	mov	r0, r5
 80104de:	47b8      	blx	r7
 80104e0:	3001      	adds	r0, #1
 80104e2:	f43f af21 	beq.w	8010328 <_printf_float+0x98>
 80104e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	d102      	bne.n	80104f4 <_printf_float+0x264>
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	07d9      	lsls	r1, r3, #31
 80104f2:	d5d8      	bpl.n	80104a6 <_printf_float+0x216>
 80104f4:	4653      	mov	r3, sl
 80104f6:	465a      	mov	r2, fp
 80104f8:	4631      	mov	r1, r6
 80104fa:	4628      	mov	r0, r5
 80104fc:	47b8      	blx	r7
 80104fe:	3001      	adds	r0, #1
 8010500:	f43f af12 	beq.w	8010328 <_printf_float+0x98>
 8010504:	f04f 0900 	mov.w	r9, #0
 8010508:	f104 0a1a 	add.w	sl, r4, #26
 801050c:	9b07      	ldr	r3, [sp, #28]
 801050e:	425b      	negs	r3, r3
 8010510:	454b      	cmp	r3, r9
 8010512:	dc01      	bgt.n	8010518 <_printf_float+0x288>
 8010514:	9b08      	ldr	r3, [sp, #32]
 8010516:	e795      	b.n	8010444 <_printf_float+0x1b4>
 8010518:	2301      	movs	r3, #1
 801051a:	4652      	mov	r2, sl
 801051c:	4631      	mov	r1, r6
 801051e:	4628      	mov	r0, r5
 8010520:	47b8      	blx	r7
 8010522:	3001      	adds	r0, #1
 8010524:	f43f af00 	beq.w	8010328 <_printf_float+0x98>
 8010528:	f109 0901 	add.w	r9, r9, #1
 801052c:	e7ee      	b.n	801050c <_printf_float+0x27c>
 801052e:	bf00      	nop
 8010530:	ffffffff 	.word	0xffffffff
 8010534:	7fefffff 	.word	0x7fefffff
 8010538:	080136fc 	.word	0x080136fc
 801053c:	08013700 	.word	0x08013700
 8010540:	08013704 	.word	0x08013704
 8010544:	08013708 	.word	0x08013708
 8010548:	0801370c 	.word	0x0801370c
 801054c:	9a08      	ldr	r2, [sp, #32]
 801054e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010550:	429a      	cmp	r2, r3
 8010552:	bfa8      	it	ge
 8010554:	461a      	movge	r2, r3
 8010556:	2a00      	cmp	r2, #0
 8010558:	4691      	mov	r9, r2
 801055a:	dc38      	bgt.n	80105ce <_printf_float+0x33e>
 801055c:	2300      	movs	r3, #0
 801055e:	9305      	str	r3, [sp, #20]
 8010560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010564:	f104 021a 	add.w	r2, r4, #26
 8010568:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801056a:	9905      	ldr	r1, [sp, #20]
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	eba3 0309 	sub.w	r3, r3, r9
 8010572:	428b      	cmp	r3, r1
 8010574:	dc33      	bgt.n	80105de <_printf_float+0x34e>
 8010576:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801057a:	429a      	cmp	r2, r3
 801057c:	db3c      	blt.n	80105f8 <_printf_float+0x368>
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	07da      	lsls	r2, r3, #31
 8010582:	d439      	bmi.n	80105f8 <_printf_float+0x368>
 8010584:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010588:	eba2 0903 	sub.w	r9, r2, r3
 801058c:	9b04      	ldr	r3, [sp, #16]
 801058e:	1ad2      	subs	r2, r2, r3
 8010590:	4591      	cmp	r9, r2
 8010592:	bfa8      	it	ge
 8010594:	4691      	movge	r9, r2
 8010596:	f1b9 0f00 	cmp.w	r9, #0
 801059a:	dc35      	bgt.n	8010608 <_printf_float+0x378>
 801059c:	f04f 0800 	mov.w	r8, #0
 80105a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105a4:	f104 0a1a 	add.w	sl, r4, #26
 80105a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80105ac:	1a9b      	subs	r3, r3, r2
 80105ae:	eba3 0309 	sub.w	r3, r3, r9
 80105b2:	4543      	cmp	r3, r8
 80105b4:	f77f af77 	ble.w	80104a6 <_printf_float+0x216>
 80105b8:	2301      	movs	r3, #1
 80105ba:	4652      	mov	r2, sl
 80105bc:	4631      	mov	r1, r6
 80105be:	4628      	mov	r0, r5
 80105c0:	47b8      	blx	r7
 80105c2:	3001      	adds	r0, #1
 80105c4:	f43f aeb0 	beq.w	8010328 <_printf_float+0x98>
 80105c8:	f108 0801 	add.w	r8, r8, #1
 80105cc:	e7ec      	b.n	80105a8 <_printf_float+0x318>
 80105ce:	4613      	mov	r3, r2
 80105d0:	4631      	mov	r1, r6
 80105d2:	4642      	mov	r2, r8
 80105d4:	4628      	mov	r0, r5
 80105d6:	47b8      	blx	r7
 80105d8:	3001      	adds	r0, #1
 80105da:	d1bf      	bne.n	801055c <_printf_float+0x2cc>
 80105dc:	e6a4      	b.n	8010328 <_printf_float+0x98>
 80105de:	2301      	movs	r3, #1
 80105e0:	4631      	mov	r1, r6
 80105e2:	4628      	mov	r0, r5
 80105e4:	9204      	str	r2, [sp, #16]
 80105e6:	47b8      	blx	r7
 80105e8:	3001      	adds	r0, #1
 80105ea:	f43f ae9d 	beq.w	8010328 <_printf_float+0x98>
 80105ee:	9b05      	ldr	r3, [sp, #20]
 80105f0:	9a04      	ldr	r2, [sp, #16]
 80105f2:	3301      	adds	r3, #1
 80105f4:	9305      	str	r3, [sp, #20]
 80105f6:	e7b7      	b.n	8010568 <_printf_float+0x2d8>
 80105f8:	4653      	mov	r3, sl
 80105fa:	465a      	mov	r2, fp
 80105fc:	4631      	mov	r1, r6
 80105fe:	4628      	mov	r0, r5
 8010600:	47b8      	blx	r7
 8010602:	3001      	adds	r0, #1
 8010604:	d1be      	bne.n	8010584 <_printf_float+0x2f4>
 8010606:	e68f      	b.n	8010328 <_printf_float+0x98>
 8010608:	9a04      	ldr	r2, [sp, #16]
 801060a:	464b      	mov	r3, r9
 801060c:	4442      	add	r2, r8
 801060e:	4631      	mov	r1, r6
 8010610:	4628      	mov	r0, r5
 8010612:	47b8      	blx	r7
 8010614:	3001      	adds	r0, #1
 8010616:	d1c1      	bne.n	801059c <_printf_float+0x30c>
 8010618:	e686      	b.n	8010328 <_printf_float+0x98>
 801061a:	9a08      	ldr	r2, [sp, #32]
 801061c:	2a01      	cmp	r2, #1
 801061e:	dc01      	bgt.n	8010624 <_printf_float+0x394>
 8010620:	07db      	lsls	r3, r3, #31
 8010622:	d537      	bpl.n	8010694 <_printf_float+0x404>
 8010624:	2301      	movs	r3, #1
 8010626:	4642      	mov	r2, r8
 8010628:	4631      	mov	r1, r6
 801062a:	4628      	mov	r0, r5
 801062c:	47b8      	blx	r7
 801062e:	3001      	adds	r0, #1
 8010630:	f43f ae7a 	beq.w	8010328 <_printf_float+0x98>
 8010634:	4653      	mov	r3, sl
 8010636:	465a      	mov	r2, fp
 8010638:	4631      	mov	r1, r6
 801063a:	4628      	mov	r0, r5
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	f43f ae72 	beq.w	8010328 <_printf_float+0x98>
 8010644:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010648:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010650:	9b08      	ldr	r3, [sp, #32]
 8010652:	d01a      	beq.n	801068a <_printf_float+0x3fa>
 8010654:	3b01      	subs	r3, #1
 8010656:	f108 0201 	add.w	r2, r8, #1
 801065a:	4631      	mov	r1, r6
 801065c:	4628      	mov	r0, r5
 801065e:	47b8      	blx	r7
 8010660:	3001      	adds	r0, #1
 8010662:	d10e      	bne.n	8010682 <_printf_float+0x3f2>
 8010664:	e660      	b.n	8010328 <_printf_float+0x98>
 8010666:	2301      	movs	r3, #1
 8010668:	464a      	mov	r2, r9
 801066a:	4631      	mov	r1, r6
 801066c:	4628      	mov	r0, r5
 801066e:	47b8      	blx	r7
 8010670:	3001      	adds	r0, #1
 8010672:	f43f ae59 	beq.w	8010328 <_printf_float+0x98>
 8010676:	f108 0801 	add.w	r8, r8, #1
 801067a:	9b08      	ldr	r3, [sp, #32]
 801067c:	3b01      	subs	r3, #1
 801067e:	4543      	cmp	r3, r8
 8010680:	dcf1      	bgt.n	8010666 <_printf_float+0x3d6>
 8010682:	9b04      	ldr	r3, [sp, #16]
 8010684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010688:	e6dd      	b.n	8010446 <_printf_float+0x1b6>
 801068a:	f04f 0800 	mov.w	r8, #0
 801068e:	f104 091a 	add.w	r9, r4, #26
 8010692:	e7f2      	b.n	801067a <_printf_float+0x3ea>
 8010694:	2301      	movs	r3, #1
 8010696:	4642      	mov	r2, r8
 8010698:	e7df      	b.n	801065a <_printf_float+0x3ca>
 801069a:	2301      	movs	r3, #1
 801069c:	464a      	mov	r2, r9
 801069e:	4631      	mov	r1, r6
 80106a0:	4628      	mov	r0, r5
 80106a2:	47b8      	blx	r7
 80106a4:	3001      	adds	r0, #1
 80106a6:	f43f ae3f 	beq.w	8010328 <_printf_float+0x98>
 80106aa:	f108 0801 	add.w	r8, r8, #1
 80106ae:	68e3      	ldr	r3, [r4, #12]
 80106b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106b2:	1a5b      	subs	r3, r3, r1
 80106b4:	4543      	cmp	r3, r8
 80106b6:	dcf0      	bgt.n	801069a <_printf_float+0x40a>
 80106b8:	e6f9      	b.n	80104ae <_printf_float+0x21e>
 80106ba:	f04f 0800 	mov.w	r8, #0
 80106be:	f104 0919 	add.w	r9, r4, #25
 80106c2:	e7f4      	b.n	80106ae <_printf_float+0x41e>

080106c4 <_printf_common>:
 80106c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c8:	4616      	mov	r6, r2
 80106ca:	4699      	mov	r9, r3
 80106cc:	688a      	ldr	r2, [r1, #8]
 80106ce:	690b      	ldr	r3, [r1, #16]
 80106d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106d4:	4293      	cmp	r3, r2
 80106d6:	bfb8      	it	lt
 80106d8:	4613      	movlt	r3, r2
 80106da:	6033      	str	r3, [r6, #0]
 80106dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106e0:	4607      	mov	r7, r0
 80106e2:	460c      	mov	r4, r1
 80106e4:	b10a      	cbz	r2, 80106ea <_printf_common+0x26>
 80106e6:	3301      	adds	r3, #1
 80106e8:	6033      	str	r3, [r6, #0]
 80106ea:	6823      	ldr	r3, [r4, #0]
 80106ec:	0699      	lsls	r1, r3, #26
 80106ee:	bf42      	ittt	mi
 80106f0:	6833      	ldrmi	r3, [r6, #0]
 80106f2:	3302      	addmi	r3, #2
 80106f4:	6033      	strmi	r3, [r6, #0]
 80106f6:	6825      	ldr	r5, [r4, #0]
 80106f8:	f015 0506 	ands.w	r5, r5, #6
 80106fc:	d106      	bne.n	801070c <_printf_common+0x48>
 80106fe:	f104 0a19 	add.w	sl, r4, #25
 8010702:	68e3      	ldr	r3, [r4, #12]
 8010704:	6832      	ldr	r2, [r6, #0]
 8010706:	1a9b      	subs	r3, r3, r2
 8010708:	42ab      	cmp	r3, r5
 801070a:	dc26      	bgt.n	801075a <_printf_common+0x96>
 801070c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010710:	1e13      	subs	r3, r2, #0
 8010712:	6822      	ldr	r2, [r4, #0]
 8010714:	bf18      	it	ne
 8010716:	2301      	movne	r3, #1
 8010718:	0692      	lsls	r2, r2, #26
 801071a:	d42b      	bmi.n	8010774 <_printf_common+0xb0>
 801071c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010720:	4649      	mov	r1, r9
 8010722:	4638      	mov	r0, r7
 8010724:	47c0      	blx	r8
 8010726:	3001      	adds	r0, #1
 8010728:	d01e      	beq.n	8010768 <_printf_common+0xa4>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	6922      	ldr	r2, [r4, #16]
 801072e:	f003 0306 	and.w	r3, r3, #6
 8010732:	2b04      	cmp	r3, #4
 8010734:	bf02      	ittt	eq
 8010736:	68e5      	ldreq	r5, [r4, #12]
 8010738:	6833      	ldreq	r3, [r6, #0]
 801073a:	1aed      	subeq	r5, r5, r3
 801073c:	68a3      	ldr	r3, [r4, #8]
 801073e:	bf0c      	ite	eq
 8010740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010744:	2500      	movne	r5, #0
 8010746:	4293      	cmp	r3, r2
 8010748:	bfc4      	itt	gt
 801074a:	1a9b      	subgt	r3, r3, r2
 801074c:	18ed      	addgt	r5, r5, r3
 801074e:	2600      	movs	r6, #0
 8010750:	341a      	adds	r4, #26
 8010752:	42b5      	cmp	r5, r6
 8010754:	d11a      	bne.n	801078c <_printf_common+0xc8>
 8010756:	2000      	movs	r0, #0
 8010758:	e008      	b.n	801076c <_printf_common+0xa8>
 801075a:	2301      	movs	r3, #1
 801075c:	4652      	mov	r2, sl
 801075e:	4649      	mov	r1, r9
 8010760:	4638      	mov	r0, r7
 8010762:	47c0      	blx	r8
 8010764:	3001      	adds	r0, #1
 8010766:	d103      	bne.n	8010770 <_printf_common+0xac>
 8010768:	f04f 30ff 	mov.w	r0, #4294967295
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	3501      	adds	r5, #1
 8010772:	e7c6      	b.n	8010702 <_printf_common+0x3e>
 8010774:	18e1      	adds	r1, r4, r3
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	2030      	movs	r0, #48	; 0x30
 801077a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801077e:	4422      	add	r2, r4
 8010780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010788:	3302      	adds	r3, #2
 801078a:	e7c7      	b.n	801071c <_printf_common+0x58>
 801078c:	2301      	movs	r3, #1
 801078e:	4622      	mov	r2, r4
 8010790:	4649      	mov	r1, r9
 8010792:	4638      	mov	r0, r7
 8010794:	47c0      	blx	r8
 8010796:	3001      	adds	r0, #1
 8010798:	d0e6      	beq.n	8010768 <_printf_common+0xa4>
 801079a:	3601      	adds	r6, #1
 801079c:	e7d9      	b.n	8010752 <_printf_common+0x8e>
	...

080107a0 <_printf_i>:
 80107a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107a4:	7e0f      	ldrb	r7, [r1, #24]
 80107a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107a8:	2f78      	cmp	r7, #120	; 0x78
 80107aa:	4691      	mov	r9, r2
 80107ac:	4680      	mov	r8, r0
 80107ae:	460c      	mov	r4, r1
 80107b0:	469a      	mov	sl, r3
 80107b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80107b6:	d807      	bhi.n	80107c8 <_printf_i+0x28>
 80107b8:	2f62      	cmp	r7, #98	; 0x62
 80107ba:	d80a      	bhi.n	80107d2 <_printf_i+0x32>
 80107bc:	2f00      	cmp	r7, #0
 80107be:	f000 80d4 	beq.w	801096a <_printf_i+0x1ca>
 80107c2:	2f58      	cmp	r7, #88	; 0x58
 80107c4:	f000 80c0 	beq.w	8010948 <_printf_i+0x1a8>
 80107c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80107d0:	e03a      	b.n	8010848 <_printf_i+0xa8>
 80107d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80107d6:	2b15      	cmp	r3, #21
 80107d8:	d8f6      	bhi.n	80107c8 <_printf_i+0x28>
 80107da:	a101      	add	r1, pc, #4	; (adr r1, 80107e0 <_printf_i+0x40>)
 80107dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107e0:	08010839 	.word	0x08010839
 80107e4:	0801084d 	.word	0x0801084d
 80107e8:	080107c9 	.word	0x080107c9
 80107ec:	080107c9 	.word	0x080107c9
 80107f0:	080107c9 	.word	0x080107c9
 80107f4:	080107c9 	.word	0x080107c9
 80107f8:	0801084d 	.word	0x0801084d
 80107fc:	080107c9 	.word	0x080107c9
 8010800:	080107c9 	.word	0x080107c9
 8010804:	080107c9 	.word	0x080107c9
 8010808:	080107c9 	.word	0x080107c9
 801080c:	08010951 	.word	0x08010951
 8010810:	08010879 	.word	0x08010879
 8010814:	0801090b 	.word	0x0801090b
 8010818:	080107c9 	.word	0x080107c9
 801081c:	080107c9 	.word	0x080107c9
 8010820:	08010973 	.word	0x08010973
 8010824:	080107c9 	.word	0x080107c9
 8010828:	08010879 	.word	0x08010879
 801082c:	080107c9 	.word	0x080107c9
 8010830:	080107c9 	.word	0x080107c9
 8010834:	08010913 	.word	0x08010913
 8010838:	682b      	ldr	r3, [r5, #0]
 801083a:	1d1a      	adds	r2, r3, #4
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	602a      	str	r2, [r5, #0]
 8010840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010848:	2301      	movs	r3, #1
 801084a:	e09f      	b.n	801098c <_printf_i+0x1ec>
 801084c:	6820      	ldr	r0, [r4, #0]
 801084e:	682b      	ldr	r3, [r5, #0]
 8010850:	0607      	lsls	r7, r0, #24
 8010852:	f103 0104 	add.w	r1, r3, #4
 8010856:	6029      	str	r1, [r5, #0]
 8010858:	d501      	bpl.n	801085e <_printf_i+0xbe>
 801085a:	681e      	ldr	r6, [r3, #0]
 801085c:	e003      	b.n	8010866 <_printf_i+0xc6>
 801085e:	0646      	lsls	r6, r0, #25
 8010860:	d5fb      	bpl.n	801085a <_printf_i+0xba>
 8010862:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010866:	2e00      	cmp	r6, #0
 8010868:	da03      	bge.n	8010872 <_printf_i+0xd2>
 801086a:	232d      	movs	r3, #45	; 0x2d
 801086c:	4276      	negs	r6, r6
 801086e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010872:	485a      	ldr	r0, [pc, #360]	; (80109dc <_printf_i+0x23c>)
 8010874:	230a      	movs	r3, #10
 8010876:	e012      	b.n	801089e <_printf_i+0xfe>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	6820      	ldr	r0, [r4, #0]
 801087c:	1d19      	adds	r1, r3, #4
 801087e:	6029      	str	r1, [r5, #0]
 8010880:	0605      	lsls	r5, r0, #24
 8010882:	d501      	bpl.n	8010888 <_printf_i+0xe8>
 8010884:	681e      	ldr	r6, [r3, #0]
 8010886:	e002      	b.n	801088e <_printf_i+0xee>
 8010888:	0641      	lsls	r1, r0, #25
 801088a:	d5fb      	bpl.n	8010884 <_printf_i+0xe4>
 801088c:	881e      	ldrh	r6, [r3, #0]
 801088e:	4853      	ldr	r0, [pc, #332]	; (80109dc <_printf_i+0x23c>)
 8010890:	2f6f      	cmp	r7, #111	; 0x6f
 8010892:	bf0c      	ite	eq
 8010894:	2308      	moveq	r3, #8
 8010896:	230a      	movne	r3, #10
 8010898:	2100      	movs	r1, #0
 801089a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801089e:	6865      	ldr	r5, [r4, #4]
 80108a0:	60a5      	str	r5, [r4, #8]
 80108a2:	2d00      	cmp	r5, #0
 80108a4:	bfa2      	ittt	ge
 80108a6:	6821      	ldrge	r1, [r4, #0]
 80108a8:	f021 0104 	bicge.w	r1, r1, #4
 80108ac:	6021      	strge	r1, [r4, #0]
 80108ae:	b90e      	cbnz	r6, 80108b4 <_printf_i+0x114>
 80108b0:	2d00      	cmp	r5, #0
 80108b2:	d04b      	beq.n	801094c <_printf_i+0x1ac>
 80108b4:	4615      	mov	r5, r2
 80108b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80108ba:	fb03 6711 	mls	r7, r3, r1, r6
 80108be:	5dc7      	ldrb	r7, [r0, r7]
 80108c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108c4:	4637      	mov	r7, r6
 80108c6:	42bb      	cmp	r3, r7
 80108c8:	460e      	mov	r6, r1
 80108ca:	d9f4      	bls.n	80108b6 <_printf_i+0x116>
 80108cc:	2b08      	cmp	r3, #8
 80108ce:	d10b      	bne.n	80108e8 <_printf_i+0x148>
 80108d0:	6823      	ldr	r3, [r4, #0]
 80108d2:	07de      	lsls	r6, r3, #31
 80108d4:	d508      	bpl.n	80108e8 <_printf_i+0x148>
 80108d6:	6923      	ldr	r3, [r4, #16]
 80108d8:	6861      	ldr	r1, [r4, #4]
 80108da:	4299      	cmp	r1, r3
 80108dc:	bfde      	ittt	le
 80108de:	2330      	movle	r3, #48	; 0x30
 80108e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108e8:	1b52      	subs	r2, r2, r5
 80108ea:	6122      	str	r2, [r4, #16]
 80108ec:	f8cd a000 	str.w	sl, [sp]
 80108f0:	464b      	mov	r3, r9
 80108f2:	aa03      	add	r2, sp, #12
 80108f4:	4621      	mov	r1, r4
 80108f6:	4640      	mov	r0, r8
 80108f8:	f7ff fee4 	bl	80106c4 <_printf_common>
 80108fc:	3001      	adds	r0, #1
 80108fe:	d14a      	bne.n	8010996 <_printf_i+0x1f6>
 8010900:	f04f 30ff 	mov.w	r0, #4294967295
 8010904:	b004      	add	sp, #16
 8010906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	f043 0320 	orr.w	r3, r3, #32
 8010910:	6023      	str	r3, [r4, #0]
 8010912:	4833      	ldr	r0, [pc, #204]	; (80109e0 <_printf_i+0x240>)
 8010914:	2778      	movs	r7, #120	; 0x78
 8010916:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801091a:	6823      	ldr	r3, [r4, #0]
 801091c:	6829      	ldr	r1, [r5, #0]
 801091e:	061f      	lsls	r7, r3, #24
 8010920:	f851 6b04 	ldr.w	r6, [r1], #4
 8010924:	d402      	bmi.n	801092c <_printf_i+0x18c>
 8010926:	065f      	lsls	r7, r3, #25
 8010928:	bf48      	it	mi
 801092a:	b2b6      	uxthmi	r6, r6
 801092c:	07df      	lsls	r7, r3, #31
 801092e:	bf48      	it	mi
 8010930:	f043 0320 	orrmi.w	r3, r3, #32
 8010934:	6029      	str	r1, [r5, #0]
 8010936:	bf48      	it	mi
 8010938:	6023      	strmi	r3, [r4, #0]
 801093a:	b91e      	cbnz	r6, 8010944 <_printf_i+0x1a4>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	f023 0320 	bic.w	r3, r3, #32
 8010942:	6023      	str	r3, [r4, #0]
 8010944:	2310      	movs	r3, #16
 8010946:	e7a7      	b.n	8010898 <_printf_i+0xf8>
 8010948:	4824      	ldr	r0, [pc, #144]	; (80109dc <_printf_i+0x23c>)
 801094a:	e7e4      	b.n	8010916 <_printf_i+0x176>
 801094c:	4615      	mov	r5, r2
 801094e:	e7bd      	b.n	80108cc <_printf_i+0x12c>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	6826      	ldr	r6, [r4, #0]
 8010954:	6961      	ldr	r1, [r4, #20]
 8010956:	1d18      	adds	r0, r3, #4
 8010958:	6028      	str	r0, [r5, #0]
 801095a:	0635      	lsls	r5, r6, #24
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	d501      	bpl.n	8010964 <_printf_i+0x1c4>
 8010960:	6019      	str	r1, [r3, #0]
 8010962:	e002      	b.n	801096a <_printf_i+0x1ca>
 8010964:	0670      	lsls	r0, r6, #25
 8010966:	d5fb      	bpl.n	8010960 <_printf_i+0x1c0>
 8010968:	8019      	strh	r1, [r3, #0]
 801096a:	2300      	movs	r3, #0
 801096c:	6123      	str	r3, [r4, #16]
 801096e:	4615      	mov	r5, r2
 8010970:	e7bc      	b.n	80108ec <_printf_i+0x14c>
 8010972:	682b      	ldr	r3, [r5, #0]
 8010974:	1d1a      	adds	r2, r3, #4
 8010976:	602a      	str	r2, [r5, #0]
 8010978:	681d      	ldr	r5, [r3, #0]
 801097a:	6862      	ldr	r2, [r4, #4]
 801097c:	2100      	movs	r1, #0
 801097e:	4628      	mov	r0, r5
 8010980:	f7ef fcae 	bl	80002e0 <memchr>
 8010984:	b108      	cbz	r0, 801098a <_printf_i+0x1ea>
 8010986:	1b40      	subs	r0, r0, r5
 8010988:	6060      	str	r0, [r4, #4]
 801098a:	6863      	ldr	r3, [r4, #4]
 801098c:	6123      	str	r3, [r4, #16]
 801098e:	2300      	movs	r3, #0
 8010990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010994:	e7aa      	b.n	80108ec <_printf_i+0x14c>
 8010996:	6923      	ldr	r3, [r4, #16]
 8010998:	462a      	mov	r2, r5
 801099a:	4649      	mov	r1, r9
 801099c:	4640      	mov	r0, r8
 801099e:	47d0      	blx	sl
 80109a0:	3001      	adds	r0, #1
 80109a2:	d0ad      	beq.n	8010900 <_printf_i+0x160>
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	079b      	lsls	r3, r3, #30
 80109a8:	d413      	bmi.n	80109d2 <_printf_i+0x232>
 80109aa:	68e0      	ldr	r0, [r4, #12]
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	4298      	cmp	r0, r3
 80109b0:	bfb8      	it	lt
 80109b2:	4618      	movlt	r0, r3
 80109b4:	e7a6      	b.n	8010904 <_printf_i+0x164>
 80109b6:	2301      	movs	r3, #1
 80109b8:	4632      	mov	r2, r6
 80109ba:	4649      	mov	r1, r9
 80109bc:	4640      	mov	r0, r8
 80109be:	47d0      	blx	sl
 80109c0:	3001      	adds	r0, #1
 80109c2:	d09d      	beq.n	8010900 <_printf_i+0x160>
 80109c4:	3501      	adds	r5, #1
 80109c6:	68e3      	ldr	r3, [r4, #12]
 80109c8:	9903      	ldr	r1, [sp, #12]
 80109ca:	1a5b      	subs	r3, r3, r1
 80109cc:	42ab      	cmp	r3, r5
 80109ce:	dcf2      	bgt.n	80109b6 <_printf_i+0x216>
 80109d0:	e7eb      	b.n	80109aa <_printf_i+0x20a>
 80109d2:	2500      	movs	r5, #0
 80109d4:	f104 0619 	add.w	r6, r4, #25
 80109d8:	e7f5      	b.n	80109c6 <_printf_i+0x226>
 80109da:	bf00      	nop
 80109dc:	0801370e 	.word	0x0801370e
 80109e0:	0801371f 	.word	0x0801371f

080109e4 <std>:
 80109e4:	2300      	movs	r3, #0
 80109e6:	b510      	push	{r4, lr}
 80109e8:	4604      	mov	r4, r0
 80109ea:	e9c0 3300 	strd	r3, r3, [r0]
 80109ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109f2:	6083      	str	r3, [r0, #8]
 80109f4:	8181      	strh	r1, [r0, #12]
 80109f6:	6643      	str	r3, [r0, #100]	; 0x64
 80109f8:	81c2      	strh	r2, [r0, #14]
 80109fa:	6183      	str	r3, [r0, #24]
 80109fc:	4619      	mov	r1, r3
 80109fe:	2208      	movs	r2, #8
 8010a00:	305c      	adds	r0, #92	; 0x5c
 8010a02:	f000 f914 	bl	8010c2e <memset>
 8010a06:	4b0d      	ldr	r3, [pc, #52]	; (8010a3c <std+0x58>)
 8010a08:	6263      	str	r3, [r4, #36]	; 0x24
 8010a0a:	4b0d      	ldr	r3, [pc, #52]	; (8010a40 <std+0x5c>)
 8010a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a0e:	4b0d      	ldr	r3, [pc, #52]	; (8010a44 <std+0x60>)
 8010a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a12:	4b0d      	ldr	r3, [pc, #52]	; (8010a48 <std+0x64>)
 8010a14:	6323      	str	r3, [r4, #48]	; 0x30
 8010a16:	4b0d      	ldr	r3, [pc, #52]	; (8010a4c <std+0x68>)
 8010a18:	6224      	str	r4, [r4, #32]
 8010a1a:	429c      	cmp	r4, r3
 8010a1c:	d006      	beq.n	8010a2c <std+0x48>
 8010a1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010a22:	4294      	cmp	r4, r2
 8010a24:	d002      	beq.n	8010a2c <std+0x48>
 8010a26:	33d0      	adds	r3, #208	; 0xd0
 8010a28:	429c      	cmp	r4, r3
 8010a2a:	d105      	bne.n	8010a38 <std+0x54>
 8010a2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a34:	f000 b988 	b.w	8010d48 <__retarget_lock_init_recursive>
 8010a38:	bd10      	pop	{r4, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08010ba9 	.word	0x08010ba9
 8010a40:	08010bcb 	.word	0x08010bcb
 8010a44:	08010c03 	.word	0x08010c03
 8010a48:	08010c27 	.word	0x08010c27
 8010a4c:	24002144 	.word	0x24002144

08010a50 <stdio_exit_handler>:
 8010a50:	4a02      	ldr	r2, [pc, #8]	; (8010a5c <stdio_exit_handler+0xc>)
 8010a52:	4903      	ldr	r1, [pc, #12]	; (8010a60 <stdio_exit_handler+0x10>)
 8010a54:	4803      	ldr	r0, [pc, #12]	; (8010a64 <stdio_exit_handler+0x14>)
 8010a56:	f000 b869 	b.w	8010b2c <_fwalk_sglue>
 8010a5a:	bf00      	nop
 8010a5c:	24000104 	.word	0x24000104
 8010a60:	08012485 	.word	0x08012485
 8010a64:	24000110 	.word	0x24000110

08010a68 <cleanup_stdio>:
 8010a68:	6841      	ldr	r1, [r0, #4]
 8010a6a:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <cleanup_stdio+0x34>)
 8010a6c:	4299      	cmp	r1, r3
 8010a6e:	b510      	push	{r4, lr}
 8010a70:	4604      	mov	r4, r0
 8010a72:	d001      	beq.n	8010a78 <cleanup_stdio+0x10>
 8010a74:	f001 fd06 	bl	8012484 <_fflush_r>
 8010a78:	68a1      	ldr	r1, [r4, #8]
 8010a7a:	4b09      	ldr	r3, [pc, #36]	; (8010aa0 <cleanup_stdio+0x38>)
 8010a7c:	4299      	cmp	r1, r3
 8010a7e:	d002      	beq.n	8010a86 <cleanup_stdio+0x1e>
 8010a80:	4620      	mov	r0, r4
 8010a82:	f001 fcff 	bl	8012484 <_fflush_r>
 8010a86:	68e1      	ldr	r1, [r4, #12]
 8010a88:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <cleanup_stdio+0x3c>)
 8010a8a:	4299      	cmp	r1, r3
 8010a8c:	d004      	beq.n	8010a98 <cleanup_stdio+0x30>
 8010a8e:	4620      	mov	r0, r4
 8010a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a94:	f001 bcf6 	b.w	8012484 <_fflush_r>
 8010a98:	bd10      	pop	{r4, pc}
 8010a9a:	bf00      	nop
 8010a9c:	24002144 	.word	0x24002144
 8010aa0:	240021ac 	.word	0x240021ac
 8010aa4:	24002214 	.word	0x24002214

08010aa8 <global_stdio_init.part.0>:
 8010aa8:	b510      	push	{r4, lr}
 8010aaa:	4b0b      	ldr	r3, [pc, #44]	; (8010ad8 <global_stdio_init.part.0+0x30>)
 8010aac:	4c0b      	ldr	r4, [pc, #44]	; (8010adc <global_stdio_init.part.0+0x34>)
 8010aae:	4a0c      	ldr	r2, [pc, #48]	; (8010ae0 <global_stdio_init.part.0+0x38>)
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	2104      	movs	r1, #4
 8010ab8:	f7ff ff94 	bl	80109e4 <std>
 8010abc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010ac0:	2201      	movs	r2, #1
 8010ac2:	2109      	movs	r1, #9
 8010ac4:	f7ff ff8e 	bl	80109e4 <std>
 8010ac8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010acc:	2202      	movs	r2, #2
 8010ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ad2:	2112      	movs	r1, #18
 8010ad4:	f7ff bf86 	b.w	80109e4 <std>
 8010ad8:	2400227c 	.word	0x2400227c
 8010adc:	24002144 	.word	0x24002144
 8010ae0:	08010a51 	.word	0x08010a51

08010ae4 <__sfp_lock_acquire>:
 8010ae4:	4801      	ldr	r0, [pc, #4]	; (8010aec <__sfp_lock_acquire+0x8>)
 8010ae6:	f000 b930 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8010aea:	bf00      	nop
 8010aec:	24002285 	.word	0x24002285

08010af0 <__sfp_lock_release>:
 8010af0:	4801      	ldr	r0, [pc, #4]	; (8010af8 <__sfp_lock_release+0x8>)
 8010af2:	f000 b92b 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010af6:	bf00      	nop
 8010af8:	24002285 	.word	0x24002285

08010afc <__sinit>:
 8010afc:	b510      	push	{r4, lr}
 8010afe:	4604      	mov	r4, r0
 8010b00:	f7ff fff0 	bl	8010ae4 <__sfp_lock_acquire>
 8010b04:	6a23      	ldr	r3, [r4, #32]
 8010b06:	b11b      	cbz	r3, 8010b10 <__sinit+0x14>
 8010b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b0c:	f7ff bff0 	b.w	8010af0 <__sfp_lock_release>
 8010b10:	4b04      	ldr	r3, [pc, #16]	; (8010b24 <__sinit+0x28>)
 8010b12:	6223      	str	r3, [r4, #32]
 8010b14:	4b04      	ldr	r3, [pc, #16]	; (8010b28 <__sinit+0x2c>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1f5      	bne.n	8010b08 <__sinit+0xc>
 8010b1c:	f7ff ffc4 	bl	8010aa8 <global_stdio_init.part.0>
 8010b20:	e7f2      	b.n	8010b08 <__sinit+0xc>
 8010b22:	bf00      	nop
 8010b24:	08010a69 	.word	0x08010a69
 8010b28:	2400227c 	.word	0x2400227c

08010b2c <_fwalk_sglue>:
 8010b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b30:	4607      	mov	r7, r0
 8010b32:	4688      	mov	r8, r1
 8010b34:	4614      	mov	r4, r2
 8010b36:	2600      	movs	r6, #0
 8010b38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8010b40:	d505      	bpl.n	8010b4e <_fwalk_sglue+0x22>
 8010b42:	6824      	ldr	r4, [r4, #0]
 8010b44:	2c00      	cmp	r4, #0
 8010b46:	d1f7      	bne.n	8010b38 <_fwalk_sglue+0xc>
 8010b48:	4630      	mov	r0, r6
 8010b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b4e:	89ab      	ldrh	r3, [r5, #12]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d907      	bls.n	8010b64 <_fwalk_sglue+0x38>
 8010b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	d003      	beq.n	8010b64 <_fwalk_sglue+0x38>
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	4638      	mov	r0, r7
 8010b60:	47c0      	blx	r8
 8010b62:	4306      	orrs	r6, r0
 8010b64:	3568      	adds	r5, #104	; 0x68
 8010b66:	e7e9      	b.n	8010b3c <_fwalk_sglue+0x10>

08010b68 <siprintf>:
 8010b68:	b40e      	push	{r1, r2, r3}
 8010b6a:	b500      	push	{lr}
 8010b6c:	b09c      	sub	sp, #112	; 0x70
 8010b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8010b70:	9002      	str	r0, [sp, #8]
 8010b72:	9006      	str	r0, [sp, #24]
 8010b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b78:	4809      	ldr	r0, [pc, #36]	; (8010ba0 <siprintf+0x38>)
 8010b7a:	9107      	str	r1, [sp, #28]
 8010b7c:	9104      	str	r1, [sp, #16]
 8010b7e:	4909      	ldr	r1, [pc, #36]	; (8010ba4 <siprintf+0x3c>)
 8010b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b84:	9105      	str	r1, [sp, #20]
 8010b86:	6800      	ldr	r0, [r0, #0]
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	a902      	add	r1, sp, #8
 8010b8c:	f001 faf6 	bl	801217c <_svfiprintf_r>
 8010b90:	9b02      	ldr	r3, [sp, #8]
 8010b92:	2200      	movs	r2, #0
 8010b94:	701a      	strb	r2, [r3, #0]
 8010b96:	b01c      	add	sp, #112	; 0x70
 8010b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b9c:	b003      	add	sp, #12
 8010b9e:	4770      	bx	lr
 8010ba0:	2400015c 	.word	0x2400015c
 8010ba4:	ffff0208 	.word	0xffff0208

08010ba8 <__sread>:
 8010ba8:	b510      	push	{r4, lr}
 8010baa:	460c      	mov	r4, r1
 8010bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb0:	f000 f86c 	bl	8010c8c <_read_r>
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	bfab      	itete	ge
 8010bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010bba:	89a3      	ldrhlt	r3, [r4, #12]
 8010bbc:	181b      	addge	r3, r3, r0
 8010bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010bc2:	bfac      	ite	ge
 8010bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010bc6:	81a3      	strhlt	r3, [r4, #12]
 8010bc8:	bd10      	pop	{r4, pc}

08010bca <__swrite>:
 8010bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bce:	461f      	mov	r7, r3
 8010bd0:	898b      	ldrh	r3, [r1, #12]
 8010bd2:	05db      	lsls	r3, r3, #23
 8010bd4:	4605      	mov	r5, r0
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	4616      	mov	r6, r2
 8010bda:	d505      	bpl.n	8010be8 <__swrite+0x1e>
 8010bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010be0:	2302      	movs	r3, #2
 8010be2:	2200      	movs	r2, #0
 8010be4:	f000 f840 	bl	8010c68 <_lseek_r>
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bf2:	81a3      	strh	r3, [r4, #12]
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bfe:	f000 b867 	b.w	8010cd0 <_write_r>

08010c02 <__sseek>:
 8010c02:	b510      	push	{r4, lr}
 8010c04:	460c      	mov	r4, r1
 8010c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c0a:	f000 f82d 	bl	8010c68 <_lseek_r>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	bf15      	itete	ne
 8010c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c1e:	81a3      	strheq	r3, [r4, #12]
 8010c20:	bf18      	it	ne
 8010c22:	81a3      	strhne	r3, [r4, #12]
 8010c24:	bd10      	pop	{r4, pc}

08010c26 <__sclose>:
 8010c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c2a:	f000 b80d 	b.w	8010c48 <_close_r>

08010c2e <memset>:
 8010c2e:	4402      	add	r2, r0
 8010c30:	4603      	mov	r3, r0
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d100      	bne.n	8010c38 <memset+0xa>
 8010c36:	4770      	bx	lr
 8010c38:	f803 1b01 	strb.w	r1, [r3], #1
 8010c3c:	e7f9      	b.n	8010c32 <memset+0x4>
	...

08010c40 <_localeconv_r>:
 8010c40:	4800      	ldr	r0, [pc, #0]	; (8010c44 <_localeconv_r+0x4>)
 8010c42:	4770      	bx	lr
 8010c44:	24000250 	.word	0x24000250

08010c48 <_close_r>:
 8010c48:	b538      	push	{r3, r4, r5, lr}
 8010c4a:	4d06      	ldr	r5, [pc, #24]	; (8010c64 <_close_r+0x1c>)
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4604      	mov	r4, r0
 8010c50:	4608      	mov	r0, r1
 8010c52:	602b      	str	r3, [r5, #0]
 8010c54:	f7f0 fa97 	bl	8001186 <_close>
 8010c58:	1c43      	adds	r3, r0, #1
 8010c5a:	d102      	bne.n	8010c62 <_close_r+0x1a>
 8010c5c:	682b      	ldr	r3, [r5, #0]
 8010c5e:	b103      	cbz	r3, 8010c62 <_close_r+0x1a>
 8010c60:	6023      	str	r3, [r4, #0]
 8010c62:	bd38      	pop	{r3, r4, r5, pc}
 8010c64:	24002280 	.word	0x24002280

08010c68 <_lseek_r>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	4d07      	ldr	r5, [pc, #28]	; (8010c88 <_lseek_r+0x20>)
 8010c6c:	4604      	mov	r4, r0
 8010c6e:	4608      	mov	r0, r1
 8010c70:	4611      	mov	r1, r2
 8010c72:	2200      	movs	r2, #0
 8010c74:	602a      	str	r2, [r5, #0]
 8010c76:	461a      	mov	r2, r3
 8010c78:	f7f0 faac 	bl	80011d4 <_lseek>
 8010c7c:	1c43      	adds	r3, r0, #1
 8010c7e:	d102      	bne.n	8010c86 <_lseek_r+0x1e>
 8010c80:	682b      	ldr	r3, [r5, #0]
 8010c82:	b103      	cbz	r3, 8010c86 <_lseek_r+0x1e>
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	bd38      	pop	{r3, r4, r5, pc}
 8010c88:	24002280 	.word	0x24002280

08010c8c <_read_r>:
 8010c8c:	b538      	push	{r3, r4, r5, lr}
 8010c8e:	4d07      	ldr	r5, [pc, #28]	; (8010cac <_read_r+0x20>)
 8010c90:	4604      	mov	r4, r0
 8010c92:	4608      	mov	r0, r1
 8010c94:	4611      	mov	r1, r2
 8010c96:	2200      	movs	r2, #0
 8010c98:	602a      	str	r2, [r5, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	f7f0 fa3a 	bl	8001114 <_read>
 8010ca0:	1c43      	adds	r3, r0, #1
 8010ca2:	d102      	bne.n	8010caa <_read_r+0x1e>
 8010ca4:	682b      	ldr	r3, [r5, #0]
 8010ca6:	b103      	cbz	r3, 8010caa <_read_r+0x1e>
 8010ca8:	6023      	str	r3, [r4, #0]
 8010caa:	bd38      	pop	{r3, r4, r5, pc}
 8010cac:	24002280 	.word	0x24002280

08010cb0 <_sbrk_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4d06      	ldr	r5, [pc, #24]	; (8010ccc <_sbrk_r+0x1c>)
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	4608      	mov	r0, r1
 8010cba:	602b      	str	r3, [r5, #0]
 8010cbc:	f7f0 fa98 	bl	80011f0 <_sbrk>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d102      	bne.n	8010cca <_sbrk_r+0x1a>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	b103      	cbz	r3, 8010cca <_sbrk_r+0x1a>
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	24002280 	.word	0x24002280

08010cd0 <_write_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4d07      	ldr	r5, [pc, #28]	; (8010cf0 <_write_r+0x20>)
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	4608      	mov	r0, r1
 8010cd8:	4611      	mov	r1, r2
 8010cda:	2200      	movs	r2, #0
 8010cdc:	602a      	str	r2, [r5, #0]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	f7f0 fa35 	bl	800114e <_write>
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	d102      	bne.n	8010cee <_write_r+0x1e>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	b103      	cbz	r3, 8010cee <_write_r+0x1e>
 8010cec:	6023      	str	r3, [r4, #0]
 8010cee:	bd38      	pop	{r3, r4, r5, pc}
 8010cf0:	24002280 	.word	0x24002280

08010cf4 <__errno>:
 8010cf4:	4b01      	ldr	r3, [pc, #4]	; (8010cfc <__errno+0x8>)
 8010cf6:	6818      	ldr	r0, [r3, #0]
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	2400015c 	.word	0x2400015c

08010d00 <__libc_init_array>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	4d0d      	ldr	r5, [pc, #52]	; (8010d38 <__libc_init_array+0x38>)
 8010d04:	4c0d      	ldr	r4, [pc, #52]	; (8010d3c <__libc_init_array+0x3c>)
 8010d06:	1b64      	subs	r4, r4, r5
 8010d08:	10a4      	asrs	r4, r4, #2
 8010d0a:	2600      	movs	r6, #0
 8010d0c:	42a6      	cmp	r6, r4
 8010d0e:	d109      	bne.n	8010d24 <__libc_init_array+0x24>
 8010d10:	4d0b      	ldr	r5, [pc, #44]	; (8010d40 <__libc_init_array+0x40>)
 8010d12:	4c0c      	ldr	r4, [pc, #48]	; (8010d44 <__libc_init_array+0x44>)
 8010d14:	f002 f87e 	bl	8012e14 <_init>
 8010d18:	1b64      	subs	r4, r4, r5
 8010d1a:	10a4      	asrs	r4, r4, #2
 8010d1c:	2600      	movs	r6, #0
 8010d1e:	42a6      	cmp	r6, r4
 8010d20:	d105      	bne.n	8010d2e <__libc_init_array+0x2e>
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d28:	4798      	blx	r3
 8010d2a:	3601      	adds	r6, #1
 8010d2c:	e7ee      	b.n	8010d0c <__libc_init_array+0xc>
 8010d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d32:	4798      	blx	r3
 8010d34:	3601      	adds	r6, #1
 8010d36:	e7f2      	b.n	8010d1e <__libc_init_array+0x1e>
 8010d38:	08013a80 	.word	0x08013a80
 8010d3c:	08013a80 	.word	0x08013a80
 8010d40:	08013a80 	.word	0x08013a80
 8010d44:	08013a84 	.word	0x08013a84

08010d48 <__retarget_lock_init_recursive>:
 8010d48:	4770      	bx	lr

08010d4a <__retarget_lock_acquire_recursive>:
 8010d4a:	4770      	bx	lr

08010d4c <__retarget_lock_release_recursive>:
 8010d4c:	4770      	bx	lr

08010d4e <quorem>:
 8010d4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d52:	6903      	ldr	r3, [r0, #16]
 8010d54:	690c      	ldr	r4, [r1, #16]
 8010d56:	42a3      	cmp	r3, r4
 8010d58:	4607      	mov	r7, r0
 8010d5a:	db7e      	blt.n	8010e5a <quorem+0x10c>
 8010d5c:	3c01      	subs	r4, #1
 8010d5e:	f101 0814 	add.w	r8, r1, #20
 8010d62:	f100 0514 	add.w	r5, r0, #20
 8010d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d6a:	9301      	str	r3, [sp, #4]
 8010d6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d74:	3301      	adds	r3, #1
 8010d76:	429a      	cmp	r2, r3
 8010d78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010d7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d80:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d84:	d331      	bcc.n	8010dea <quorem+0x9c>
 8010d86:	f04f 0e00 	mov.w	lr, #0
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	46ac      	mov	ip, r5
 8010d8e:	46f2      	mov	sl, lr
 8010d90:	f850 2b04 	ldr.w	r2, [r0], #4
 8010d94:	b293      	uxth	r3, r2
 8010d96:	fb06 e303 	mla	r3, r6, r3, lr
 8010d9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d9e:	0c1a      	lsrs	r2, r3, #16
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	ebaa 0303 	sub.w	r3, sl, r3
 8010da6:	f8dc a000 	ldr.w	sl, [ip]
 8010daa:	fa13 f38a 	uxtah	r3, r3, sl
 8010dae:	fb06 220e 	mla	r2, r6, lr, r2
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	9b00      	ldr	r3, [sp, #0]
 8010db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010dba:	b292      	uxth	r2, r2
 8010dbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010dc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8010dc8:	4581      	cmp	r9, r0
 8010dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010dce:	f84c 3b04 	str.w	r3, [ip], #4
 8010dd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010dd6:	d2db      	bcs.n	8010d90 <quorem+0x42>
 8010dd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8010ddc:	b92b      	cbnz	r3, 8010dea <quorem+0x9c>
 8010dde:	9b01      	ldr	r3, [sp, #4]
 8010de0:	3b04      	subs	r3, #4
 8010de2:	429d      	cmp	r5, r3
 8010de4:	461a      	mov	r2, r3
 8010de6:	d32c      	bcc.n	8010e42 <quorem+0xf4>
 8010de8:	613c      	str	r4, [r7, #16]
 8010dea:	4638      	mov	r0, r7
 8010dec:	f001 f86c 	bl	8011ec8 <__mcmp>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	db22      	blt.n	8010e3a <quorem+0xec>
 8010df4:	3601      	adds	r6, #1
 8010df6:	4629      	mov	r1, r5
 8010df8:	2000      	movs	r0, #0
 8010dfa:	f858 2b04 	ldr.w	r2, [r8], #4
 8010dfe:	f8d1 c000 	ldr.w	ip, [r1]
 8010e02:	b293      	uxth	r3, r2
 8010e04:	1ac3      	subs	r3, r0, r3
 8010e06:	0c12      	lsrs	r2, r2, #16
 8010e08:	fa13 f38c 	uxtah	r3, r3, ip
 8010e0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010e10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e1a:	45c1      	cmp	r9, r8
 8010e1c:	f841 3b04 	str.w	r3, [r1], #4
 8010e20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e24:	d2e9      	bcs.n	8010dfa <quorem+0xac>
 8010e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e2e:	b922      	cbnz	r2, 8010e3a <quorem+0xec>
 8010e30:	3b04      	subs	r3, #4
 8010e32:	429d      	cmp	r5, r3
 8010e34:	461a      	mov	r2, r3
 8010e36:	d30a      	bcc.n	8010e4e <quorem+0x100>
 8010e38:	613c      	str	r4, [r7, #16]
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	b003      	add	sp, #12
 8010e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e42:	6812      	ldr	r2, [r2, #0]
 8010e44:	3b04      	subs	r3, #4
 8010e46:	2a00      	cmp	r2, #0
 8010e48:	d1ce      	bne.n	8010de8 <quorem+0x9a>
 8010e4a:	3c01      	subs	r4, #1
 8010e4c:	e7c9      	b.n	8010de2 <quorem+0x94>
 8010e4e:	6812      	ldr	r2, [r2, #0]
 8010e50:	3b04      	subs	r3, #4
 8010e52:	2a00      	cmp	r2, #0
 8010e54:	d1f0      	bne.n	8010e38 <quorem+0xea>
 8010e56:	3c01      	subs	r4, #1
 8010e58:	e7eb      	b.n	8010e32 <quorem+0xe4>
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	e7ee      	b.n	8010e3c <quorem+0xee>
	...

08010e60 <_dtoa_r>:
 8010e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e64:	ed2d 8b02 	vpush	{d8}
 8010e68:	69c5      	ldr	r5, [r0, #28]
 8010e6a:	b091      	sub	sp, #68	; 0x44
 8010e6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010e70:	ec59 8b10 	vmov	r8, r9, d0
 8010e74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010e76:	9106      	str	r1, [sp, #24]
 8010e78:	4606      	mov	r6, r0
 8010e7a:	9208      	str	r2, [sp, #32]
 8010e7c:	930c      	str	r3, [sp, #48]	; 0x30
 8010e7e:	b975      	cbnz	r5, 8010e9e <_dtoa_r+0x3e>
 8010e80:	2010      	movs	r0, #16
 8010e82:	f7ff f8bf 	bl	8010004 <malloc>
 8010e86:	4602      	mov	r2, r0
 8010e88:	61f0      	str	r0, [r6, #28]
 8010e8a:	b920      	cbnz	r0, 8010e96 <_dtoa_r+0x36>
 8010e8c:	4ba6      	ldr	r3, [pc, #664]	; (8011128 <_dtoa_r+0x2c8>)
 8010e8e:	21ef      	movs	r1, #239	; 0xef
 8010e90:	48a6      	ldr	r0, [pc, #664]	; (801112c <_dtoa_r+0x2cc>)
 8010e92:	f001 fb47 	bl	8012524 <__assert_func>
 8010e96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010e9a:	6005      	str	r5, [r0, #0]
 8010e9c:	60c5      	str	r5, [r0, #12]
 8010e9e:	69f3      	ldr	r3, [r6, #28]
 8010ea0:	6819      	ldr	r1, [r3, #0]
 8010ea2:	b151      	cbz	r1, 8010eba <_dtoa_r+0x5a>
 8010ea4:	685a      	ldr	r2, [r3, #4]
 8010ea6:	604a      	str	r2, [r1, #4]
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	4093      	lsls	r3, r2
 8010eac:	608b      	str	r3, [r1, #8]
 8010eae:	4630      	mov	r0, r6
 8010eb0:	f000 fdce 	bl	8011a50 <_Bfree>
 8010eb4:	69f3      	ldr	r3, [r6, #28]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	601a      	str	r2, [r3, #0]
 8010eba:	f1b9 0300 	subs.w	r3, r9, #0
 8010ebe:	bfbb      	ittet	lt
 8010ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010ec4:	9303      	strlt	r3, [sp, #12]
 8010ec6:	2300      	movge	r3, #0
 8010ec8:	2201      	movlt	r2, #1
 8010eca:	bfac      	ite	ge
 8010ecc:	6023      	strge	r3, [r4, #0]
 8010ece:	6022      	strlt	r2, [r4, #0]
 8010ed0:	4b97      	ldr	r3, [pc, #604]	; (8011130 <_dtoa_r+0x2d0>)
 8010ed2:	9c03      	ldr	r4, [sp, #12]
 8010ed4:	43a3      	bics	r3, r4
 8010ed6:	d11c      	bne.n	8010f12 <_dtoa_r+0xb2>
 8010ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010eda:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ede:	6013      	str	r3, [r2, #0]
 8010ee0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010ee4:	ea53 0308 	orrs.w	r3, r3, r8
 8010ee8:	f000 84fb 	beq.w	80118e2 <_dtoa_r+0xa82>
 8010eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010eee:	b963      	cbnz	r3, 8010f0a <_dtoa_r+0xaa>
 8010ef0:	4b90      	ldr	r3, [pc, #576]	; (8011134 <_dtoa_r+0x2d4>)
 8010ef2:	e020      	b.n	8010f36 <_dtoa_r+0xd6>
 8010ef4:	4b90      	ldr	r3, [pc, #576]	; (8011138 <_dtoa_r+0x2d8>)
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	3308      	adds	r3, #8
 8010efa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010efc:	6013      	str	r3, [r2, #0]
 8010efe:	9801      	ldr	r0, [sp, #4]
 8010f00:	b011      	add	sp, #68	; 0x44
 8010f02:	ecbd 8b02 	vpop	{d8}
 8010f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f0a:	4b8a      	ldr	r3, [pc, #552]	; (8011134 <_dtoa_r+0x2d4>)
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	3303      	adds	r3, #3
 8010f10:	e7f3      	b.n	8010efa <_dtoa_r+0x9a>
 8010f12:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010f16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1e:	d10c      	bne.n	8010f3a <_dtoa_r+0xda>
 8010f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f22:	2301      	movs	r3, #1
 8010f24:	6013      	str	r3, [r2, #0]
 8010f26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f000 84d7 	beq.w	80118dc <_dtoa_r+0xa7c>
 8010f2e:	4b83      	ldr	r3, [pc, #524]	; (801113c <_dtoa_r+0x2dc>)
 8010f30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	e7e1      	b.n	8010efe <_dtoa_r+0x9e>
 8010f3a:	aa0e      	add	r2, sp, #56	; 0x38
 8010f3c:	a90f      	add	r1, sp, #60	; 0x3c
 8010f3e:	4630      	mov	r0, r6
 8010f40:	eeb0 0b48 	vmov.f64	d0, d8
 8010f44:	f001 f866 	bl	8012014 <__d2b>
 8010f48:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f4e:	4605      	mov	r5, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d046      	beq.n	8010fe2 <_dtoa_r+0x182>
 8010f54:	eeb0 7b48 	vmov.f64	d7, d8
 8010f58:	ee18 1a90 	vmov	r1, s17
 8010f5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010f60:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010f64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010f68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	ee07 1a90 	vmov	s15, r1
 8010f72:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8010f76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011110 <_dtoa_r+0x2b0>
 8010f7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010f7e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011118 <_dtoa_r+0x2b8>
 8010f82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010f86:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011120 <_dtoa_r+0x2c0>
 8010f8a:	ee07 3a90 	vmov	s15, r3
 8010f8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010f92:	eeb0 7b46 	vmov.f64	d7, d6
 8010f96:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010f9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010f9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa6:	ee16 ba90 	vmov	fp, s13
 8010faa:	9009      	str	r0, [sp, #36]	; 0x24
 8010fac:	d508      	bpl.n	8010fc0 <_dtoa_r+0x160>
 8010fae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010fb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8010fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fba:	bf18      	it	ne
 8010fbc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010fc0:	f1bb 0f16 	cmp.w	fp, #22
 8010fc4:	d82b      	bhi.n	801101e <_dtoa_r+0x1be>
 8010fc6:	495e      	ldr	r1, [pc, #376]	; (8011140 <_dtoa_r+0x2e0>)
 8010fc8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010fcc:	ed91 7b00 	vldr	d7, [r1]
 8010fd0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd8:	d501      	bpl.n	8010fde <_dtoa_r+0x17e>
 8010fda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010fde:	2100      	movs	r1, #0
 8010fe0:	e01e      	b.n	8011020 <_dtoa_r+0x1c0>
 8010fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fe4:	4413      	add	r3, r2
 8010fe6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8010fea:	2920      	cmp	r1, #32
 8010fec:	bfc1      	itttt	gt
 8010fee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8010ff2:	408c      	lslgt	r4, r1
 8010ff4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8010ff8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8010ffc:	bfd6      	itet	le
 8010ffe:	f1c1 0120 	rsble	r1, r1, #32
 8011002:	4321      	orrgt	r1, r4
 8011004:	fa08 f101 	lslle.w	r1, r8, r1
 8011008:	ee07 1a90 	vmov	s15, r1
 801100c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011010:	3b01      	subs	r3, #1
 8011012:	ee17 1a90 	vmov	r1, s15
 8011016:	2001      	movs	r0, #1
 8011018:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801101c:	e7a7      	b.n	8010f6e <_dtoa_r+0x10e>
 801101e:	2101      	movs	r1, #1
 8011020:	1ad2      	subs	r2, r2, r3
 8011022:	1e53      	subs	r3, r2, #1
 8011024:	9305      	str	r3, [sp, #20]
 8011026:	bf45      	ittet	mi
 8011028:	f1c2 0301 	rsbmi	r3, r2, #1
 801102c:	9304      	strmi	r3, [sp, #16]
 801102e:	2300      	movpl	r3, #0
 8011030:	2300      	movmi	r3, #0
 8011032:	bf4c      	ite	mi
 8011034:	9305      	strmi	r3, [sp, #20]
 8011036:	9304      	strpl	r3, [sp, #16]
 8011038:	f1bb 0f00 	cmp.w	fp, #0
 801103c:	910b      	str	r1, [sp, #44]	; 0x2c
 801103e:	db18      	blt.n	8011072 <_dtoa_r+0x212>
 8011040:	9b05      	ldr	r3, [sp, #20]
 8011042:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011046:	445b      	add	r3, fp
 8011048:	9305      	str	r3, [sp, #20]
 801104a:	2300      	movs	r3, #0
 801104c:	9a06      	ldr	r2, [sp, #24]
 801104e:	2a09      	cmp	r2, #9
 8011050:	d848      	bhi.n	80110e4 <_dtoa_r+0x284>
 8011052:	2a05      	cmp	r2, #5
 8011054:	bfc4      	itt	gt
 8011056:	3a04      	subgt	r2, #4
 8011058:	9206      	strgt	r2, [sp, #24]
 801105a:	9a06      	ldr	r2, [sp, #24]
 801105c:	f1a2 0202 	sub.w	r2, r2, #2
 8011060:	bfcc      	ite	gt
 8011062:	2400      	movgt	r4, #0
 8011064:	2401      	movle	r4, #1
 8011066:	2a03      	cmp	r2, #3
 8011068:	d847      	bhi.n	80110fa <_dtoa_r+0x29a>
 801106a:	e8df f002 	tbb	[pc, r2]
 801106e:	2d0b      	.short	0x2d0b
 8011070:	392b      	.short	0x392b
 8011072:	9b04      	ldr	r3, [sp, #16]
 8011074:	2200      	movs	r2, #0
 8011076:	eba3 030b 	sub.w	r3, r3, fp
 801107a:	9304      	str	r3, [sp, #16]
 801107c:	920a      	str	r2, [sp, #40]	; 0x28
 801107e:	f1cb 0300 	rsb	r3, fp, #0
 8011082:	e7e3      	b.n	801104c <_dtoa_r+0x1ec>
 8011084:	2200      	movs	r2, #0
 8011086:	9207      	str	r2, [sp, #28]
 8011088:	9a08      	ldr	r2, [sp, #32]
 801108a:	2a00      	cmp	r2, #0
 801108c:	dc38      	bgt.n	8011100 <_dtoa_r+0x2a0>
 801108e:	f04f 0a01 	mov.w	sl, #1
 8011092:	46d1      	mov	r9, sl
 8011094:	4652      	mov	r2, sl
 8011096:	f8cd a020 	str.w	sl, [sp, #32]
 801109a:	69f7      	ldr	r7, [r6, #28]
 801109c:	2100      	movs	r1, #0
 801109e:	2004      	movs	r0, #4
 80110a0:	f100 0c14 	add.w	ip, r0, #20
 80110a4:	4594      	cmp	ip, r2
 80110a6:	d930      	bls.n	801110a <_dtoa_r+0x2aa>
 80110a8:	6079      	str	r1, [r7, #4]
 80110aa:	4630      	mov	r0, r6
 80110ac:	930d      	str	r3, [sp, #52]	; 0x34
 80110ae:	f000 fc8f 	bl	80119d0 <_Balloc>
 80110b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110b4:	9001      	str	r0, [sp, #4]
 80110b6:	4602      	mov	r2, r0
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d145      	bne.n	8011148 <_dtoa_r+0x2e8>
 80110bc:	4b21      	ldr	r3, [pc, #132]	; (8011144 <_dtoa_r+0x2e4>)
 80110be:	f240 11af 	movw	r1, #431	; 0x1af
 80110c2:	e6e5      	b.n	8010e90 <_dtoa_r+0x30>
 80110c4:	2201      	movs	r2, #1
 80110c6:	e7de      	b.n	8011086 <_dtoa_r+0x226>
 80110c8:	2200      	movs	r2, #0
 80110ca:	9207      	str	r2, [sp, #28]
 80110cc:	9a08      	ldr	r2, [sp, #32]
 80110ce:	eb0b 0a02 	add.w	sl, fp, r2
 80110d2:	f10a 0901 	add.w	r9, sl, #1
 80110d6:	464a      	mov	r2, r9
 80110d8:	2a01      	cmp	r2, #1
 80110da:	bfb8      	it	lt
 80110dc:	2201      	movlt	r2, #1
 80110de:	e7dc      	b.n	801109a <_dtoa_r+0x23a>
 80110e0:	2201      	movs	r2, #1
 80110e2:	e7f2      	b.n	80110ca <_dtoa_r+0x26a>
 80110e4:	2401      	movs	r4, #1
 80110e6:	2200      	movs	r2, #0
 80110e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80110ec:	f04f 3aff 	mov.w	sl, #4294967295
 80110f0:	2100      	movs	r1, #0
 80110f2:	46d1      	mov	r9, sl
 80110f4:	2212      	movs	r2, #18
 80110f6:	9108      	str	r1, [sp, #32]
 80110f8:	e7cf      	b.n	801109a <_dtoa_r+0x23a>
 80110fa:	2201      	movs	r2, #1
 80110fc:	9207      	str	r2, [sp, #28]
 80110fe:	e7f5      	b.n	80110ec <_dtoa_r+0x28c>
 8011100:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011104:	46d1      	mov	r9, sl
 8011106:	4652      	mov	r2, sl
 8011108:	e7c7      	b.n	801109a <_dtoa_r+0x23a>
 801110a:	3101      	adds	r1, #1
 801110c:	0040      	lsls	r0, r0, #1
 801110e:	e7c7      	b.n	80110a0 <_dtoa_r+0x240>
 8011110:	636f4361 	.word	0x636f4361
 8011114:	3fd287a7 	.word	0x3fd287a7
 8011118:	8b60c8b3 	.word	0x8b60c8b3
 801111c:	3fc68a28 	.word	0x3fc68a28
 8011120:	509f79fb 	.word	0x509f79fb
 8011124:	3fd34413 	.word	0x3fd34413
 8011128:	0801373d 	.word	0x0801373d
 801112c:	08013754 	.word	0x08013754
 8011130:	7ff00000 	.word	0x7ff00000
 8011134:	08013739 	.word	0x08013739
 8011138:	08013730 	.word	0x08013730
 801113c:	0801370d 	.word	0x0801370d
 8011140:	08013840 	.word	0x08013840
 8011144:	080137ac 	.word	0x080137ac
 8011148:	69f2      	ldr	r2, [r6, #28]
 801114a:	9901      	ldr	r1, [sp, #4]
 801114c:	6011      	str	r1, [r2, #0]
 801114e:	f1b9 0f0e 	cmp.w	r9, #14
 8011152:	d86c      	bhi.n	801122e <_dtoa_r+0x3ce>
 8011154:	2c00      	cmp	r4, #0
 8011156:	d06a      	beq.n	801122e <_dtoa_r+0x3ce>
 8011158:	f1bb 0f00 	cmp.w	fp, #0
 801115c:	f340 80a0 	ble.w	80112a0 <_dtoa_r+0x440>
 8011160:	4ac1      	ldr	r2, [pc, #772]	; (8011468 <_dtoa_r+0x608>)
 8011162:	f00b 010f 	and.w	r1, fp, #15
 8011166:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801116a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801116e:	ed92 7b00 	vldr	d7, [r2]
 8011172:	ea4f 122b 	mov.w	r2, fp, asr #4
 8011176:	f000 8087 	beq.w	8011288 <_dtoa_r+0x428>
 801117a:	49bc      	ldr	r1, [pc, #752]	; (801146c <_dtoa_r+0x60c>)
 801117c:	ed91 6b08 	vldr	d6, [r1, #32]
 8011180:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011184:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011188:	f002 020f 	and.w	r2, r2, #15
 801118c:	2103      	movs	r1, #3
 801118e:	48b7      	ldr	r0, [pc, #732]	; (801146c <_dtoa_r+0x60c>)
 8011190:	2a00      	cmp	r2, #0
 8011192:	d17b      	bne.n	801128c <_dtoa_r+0x42c>
 8011194:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011198:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801119c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111a6:	2a00      	cmp	r2, #0
 80111a8:	f000 80a0 	beq.w	80112ec <_dtoa_r+0x48c>
 80111ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80111b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80111b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b8:	f140 8098 	bpl.w	80112ec <_dtoa_r+0x48c>
 80111bc:	f1b9 0f00 	cmp.w	r9, #0
 80111c0:	f000 8094 	beq.w	80112ec <_dtoa_r+0x48c>
 80111c4:	f1ba 0f00 	cmp.w	sl, #0
 80111c8:	dd2f      	ble.n	801122a <_dtoa_r+0x3ca>
 80111ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80111ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80111da:	3101      	adds	r1, #1
 80111dc:	4654      	mov	r4, sl
 80111de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80111e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80111e6:	ee07 1a90 	vmov	s15, r1
 80111ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80111ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 80111f2:	ee15 7a90 	vmov	r7, s11
 80111f6:	ec51 0b15 	vmov	r0, r1, d5
 80111fa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80111fe:	2c00      	cmp	r4, #0
 8011200:	d177      	bne.n	80112f2 <_dtoa_r+0x492>
 8011202:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011206:	ee36 6b47 	vsub.f64	d6, d6, d7
 801120a:	ec41 0b17 	vmov	d7, r0, r1
 801120e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011216:	f300 826a 	bgt.w	80116ee <_dtoa_r+0x88e>
 801121a:	eeb1 7b47 	vneg.f64	d7, d7
 801121e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011226:	f100 8260 	bmi.w	80116ea <_dtoa_r+0x88a>
 801122a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801122e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011230:	2a00      	cmp	r2, #0
 8011232:	f2c0 811d 	blt.w	8011470 <_dtoa_r+0x610>
 8011236:	f1bb 0f0e 	cmp.w	fp, #14
 801123a:	f300 8119 	bgt.w	8011470 <_dtoa_r+0x610>
 801123e:	4b8a      	ldr	r3, [pc, #552]	; (8011468 <_dtoa_r+0x608>)
 8011240:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011244:	ed93 6b00 	vldr	d6, [r3]
 8011248:	9b08      	ldr	r3, [sp, #32]
 801124a:	2b00      	cmp	r3, #0
 801124c:	f280 80b7 	bge.w	80113be <_dtoa_r+0x55e>
 8011250:	f1b9 0f00 	cmp.w	r9, #0
 8011254:	f300 80b3 	bgt.w	80113be <_dtoa_r+0x55e>
 8011258:	f040 8246 	bne.w	80116e8 <_dtoa_r+0x888>
 801125c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011260:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011264:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011268:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011270:	464c      	mov	r4, r9
 8011272:	464f      	mov	r7, r9
 8011274:	f280 821c 	bge.w	80116b0 <_dtoa_r+0x850>
 8011278:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801127c:	2331      	movs	r3, #49	; 0x31
 801127e:	f808 3b01 	strb.w	r3, [r8], #1
 8011282:	f10b 0b01 	add.w	fp, fp, #1
 8011286:	e218      	b.n	80116ba <_dtoa_r+0x85a>
 8011288:	2102      	movs	r1, #2
 801128a:	e780      	b.n	801118e <_dtoa_r+0x32e>
 801128c:	07d4      	lsls	r4, r2, #31
 801128e:	d504      	bpl.n	801129a <_dtoa_r+0x43a>
 8011290:	ed90 6b00 	vldr	d6, [r0]
 8011294:	3101      	adds	r1, #1
 8011296:	ee27 7b06 	vmul.f64	d7, d7, d6
 801129a:	1052      	asrs	r2, r2, #1
 801129c:	3008      	adds	r0, #8
 801129e:	e777      	b.n	8011190 <_dtoa_r+0x330>
 80112a0:	d022      	beq.n	80112e8 <_dtoa_r+0x488>
 80112a2:	f1cb 0200 	rsb	r2, fp, #0
 80112a6:	4970      	ldr	r1, [pc, #448]	; (8011468 <_dtoa_r+0x608>)
 80112a8:	f002 000f 	and.w	r0, r2, #15
 80112ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80112b0:	ed91 7b00 	vldr	d7, [r1]
 80112b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80112b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112bc:	486b      	ldr	r0, [pc, #428]	; (801146c <_dtoa_r+0x60c>)
 80112be:	1112      	asrs	r2, r2, #4
 80112c0:	2400      	movs	r4, #0
 80112c2:	2102      	movs	r1, #2
 80112c4:	b92a      	cbnz	r2, 80112d2 <_dtoa_r+0x472>
 80112c6:	2c00      	cmp	r4, #0
 80112c8:	f43f af6a 	beq.w	80111a0 <_dtoa_r+0x340>
 80112cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112d0:	e766      	b.n	80111a0 <_dtoa_r+0x340>
 80112d2:	07d7      	lsls	r7, r2, #31
 80112d4:	d505      	bpl.n	80112e2 <_dtoa_r+0x482>
 80112d6:	ed90 6b00 	vldr	d6, [r0]
 80112da:	3101      	adds	r1, #1
 80112dc:	2401      	movs	r4, #1
 80112de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80112e2:	1052      	asrs	r2, r2, #1
 80112e4:	3008      	adds	r0, #8
 80112e6:	e7ed      	b.n	80112c4 <_dtoa_r+0x464>
 80112e8:	2102      	movs	r1, #2
 80112ea:	e759      	b.n	80111a0 <_dtoa_r+0x340>
 80112ec:	465a      	mov	r2, fp
 80112ee:	464c      	mov	r4, r9
 80112f0:	e775      	b.n	80111de <_dtoa_r+0x37e>
 80112f2:	ec41 0b17 	vmov	d7, r0, r1
 80112f6:	495c      	ldr	r1, [pc, #368]	; (8011468 <_dtoa_r+0x608>)
 80112f8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80112fc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8011300:	9901      	ldr	r1, [sp, #4]
 8011302:	440c      	add	r4, r1
 8011304:	9907      	ldr	r1, [sp, #28]
 8011306:	b351      	cbz	r1, 801135e <_dtoa_r+0x4fe>
 8011308:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801130c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011310:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011314:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011318:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801131c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011320:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011324:	ee14 1a90 	vmov	r1, s9
 8011328:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801132c:	3130      	adds	r1, #48	; 0x30
 801132e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011332:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133a:	f808 1b01 	strb.w	r1, [r8], #1
 801133e:	d439      	bmi.n	80113b4 <_dtoa_r+0x554>
 8011340:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011344:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134c:	d472      	bmi.n	8011434 <_dtoa_r+0x5d4>
 801134e:	45a0      	cmp	r8, r4
 8011350:	f43f af6b 	beq.w	801122a <_dtoa_r+0x3ca>
 8011354:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011358:	ee26 6b03 	vmul.f64	d6, d6, d3
 801135c:	e7e0      	b.n	8011320 <_dtoa_r+0x4c0>
 801135e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011362:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011366:	4620      	mov	r0, r4
 8011368:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801136c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011370:	ee14 1a90 	vmov	r1, s9
 8011374:	3130      	adds	r1, #48	; 0x30
 8011376:	f808 1b01 	strb.w	r1, [r8], #1
 801137a:	45a0      	cmp	r8, r4
 801137c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011380:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011384:	d118      	bne.n	80113b8 <_dtoa_r+0x558>
 8011386:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801138a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801138e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011396:	dc4d      	bgt.n	8011434 <_dtoa_r+0x5d4>
 8011398:	ee35 5b47 	vsub.f64	d5, d5, d7
 801139c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80113a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a4:	f57f af41 	bpl.w	801122a <_dtoa_r+0x3ca>
 80113a8:	4680      	mov	r8, r0
 80113aa:	3801      	subs	r0, #1
 80113ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80113b0:	2b30      	cmp	r3, #48	; 0x30
 80113b2:	d0f9      	beq.n	80113a8 <_dtoa_r+0x548>
 80113b4:	4693      	mov	fp, r2
 80113b6:	e02a      	b.n	801140e <_dtoa_r+0x5ae>
 80113b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80113bc:	e7d6      	b.n	801136c <_dtoa_r+0x50c>
 80113be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80113c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80113ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80113ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80113d2:	ee15 3a10 	vmov	r3, s10
 80113d6:	3330      	adds	r3, #48	; 0x30
 80113d8:	f808 3b01 	strb.w	r3, [r8], #1
 80113dc:	9b01      	ldr	r3, [sp, #4]
 80113de:	eba8 0303 	sub.w	r3, r8, r3
 80113e2:	4599      	cmp	r9, r3
 80113e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80113e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80113ec:	d133      	bne.n	8011456 <_dtoa_r+0x5f6>
 80113ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80113f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113fa:	dc1a      	bgt.n	8011432 <_dtoa_r+0x5d2>
 80113fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8011400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011404:	d103      	bne.n	801140e <_dtoa_r+0x5ae>
 8011406:	ee15 3a10 	vmov	r3, s10
 801140a:	07d9      	lsls	r1, r3, #31
 801140c:	d411      	bmi.n	8011432 <_dtoa_r+0x5d2>
 801140e:	4629      	mov	r1, r5
 8011410:	4630      	mov	r0, r6
 8011412:	f000 fb1d 	bl	8011a50 <_Bfree>
 8011416:	2300      	movs	r3, #0
 8011418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801141a:	f888 3000 	strb.w	r3, [r8]
 801141e:	f10b 0301 	add.w	r3, fp, #1
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011426:	2b00      	cmp	r3, #0
 8011428:	f43f ad69 	beq.w	8010efe <_dtoa_r+0x9e>
 801142c:	f8c3 8000 	str.w	r8, [r3]
 8011430:	e565      	b.n	8010efe <_dtoa_r+0x9e>
 8011432:	465a      	mov	r2, fp
 8011434:	4643      	mov	r3, r8
 8011436:	4698      	mov	r8, r3
 8011438:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801143c:	2939      	cmp	r1, #57	; 0x39
 801143e:	d106      	bne.n	801144e <_dtoa_r+0x5ee>
 8011440:	9901      	ldr	r1, [sp, #4]
 8011442:	4299      	cmp	r1, r3
 8011444:	d1f7      	bne.n	8011436 <_dtoa_r+0x5d6>
 8011446:	9801      	ldr	r0, [sp, #4]
 8011448:	2130      	movs	r1, #48	; 0x30
 801144a:	3201      	adds	r2, #1
 801144c:	7001      	strb	r1, [r0, #0]
 801144e:	7819      	ldrb	r1, [r3, #0]
 8011450:	3101      	adds	r1, #1
 8011452:	7019      	strb	r1, [r3, #0]
 8011454:	e7ae      	b.n	80113b4 <_dtoa_r+0x554>
 8011456:	ee27 7b04 	vmul.f64	d7, d7, d4
 801145a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011462:	d1b2      	bne.n	80113ca <_dtoa_r+0x56a>
 8011464:	e7d3      	b.n	801140e <_dtoa_r+0x5ae>
 8011466:	bf00      	nop
 8011468:	08013840 	.word	0x08013840
 801146c:	08013818 	.word	0x08013818
 8011470:	9907      	ldr	r1, [sp, #28]
 8011472:	2900      	cmp	r1, #0
 8011474:	f000 80d0 	beq.w	8011618 <_dtoa_r+0x7b8>
 8011478:	9906      	ldr	r1, [sp, #24]
 801147a:	2901      	cmp	r1, #1
 801147c:	f300 80b4 	bgt.w	80115e8 <_dtoa_r+0x788>
 8011480:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011482:	2900      	cmp	r1, #0
 8011484:	f000 80ac 	beq.w	80115e0 <_dtoa_r+0x780>
 8011488:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801148c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011490:	461c      	mov	r4, r3
 8011492:	9309      	str	r3, [sp, #36]	; 0x24
 8011494:	9b04      	ldr	r3, [sp, #16]
 8011496:	4413      	add	r3, r2
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	9b05      	ldr	r3, [sp, #20]
 801149c:	2101      	movs	r1, #1
 801149e:	4413      	add	r3, r2
 80114a0:	4630      	mov	r0, r6
 80114a2:	9305      	str	r3, [sp, #20]
 80114a4:	f000 fb8a 	bl	8011bbc <__i2b>
 80114a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114aa:	4607      	mov	r7, r0
 80114ac:	f1b8 0f00 	cmp.w	r8, #0
 80114b0:	d00d      	beq.n	80114ce <_dtoa_r+0x66e>
 80114b2:	9a05      	ldr	r2, [sp, #20]
 80114b4:	2a00      	cmp	r2, #0
 80114b6:	dd0a      	ble.n	80114ce <_dtoa_r+0x66e>
 80114b8:	4542      	cmp	r2, r8
 80114ba:	9904      	ldr	r1, [sp, #16]
 80114bc:	bfa8      	it	ge
 80114be:	4642      	movge	r2, r8
 80114c0:	1a89      	subs	r1, r1, r2
 80114c2:	9104      	str	r1, [sp, #16]
 80114c4:	9905      	ldr	r1, [sp, #20]
 80114c6:	eba8 0802 	sub.w	r8, r8, r2
 80114ca:	1a8a      	subs	r2, r1, r2
 80114cc:	9205      	str	r2, [sp, #20]
 80114ce:	b303      	cbz	r3, 8011512 <_dtoa_r+0x6b2>
 80114d0:	9a07      	ldr	r2, [sp, #28]
 80114d2:	2a00      	cmp	r2, #0
 80114d4:	f000 80a5 	beq.w	8011622 <_dtoa_r+0x7c2>
 80114d8:	2c00      	cmp	r4, #0
 80114da:	dd13      	ble.n	8011504 <_dtoa_r+0x6a4>
 80114dc:	4639      	mov	r1, r7
 80114de:	4622      	mov	r2, r4
 80114e0:	4630      	mov	r0, r6
 80114e2:	930d      	str	r3, [sp, #52]	; 0x34
 80114e4:	f000 fc2a 	bl	8011d3c <__pow5mult>
 80114e8:	462a      	mov	r2, r5
 80114ea:	4601      	mov	r1, r0
 80114ec:	4607      	mov	r7, r0
 80114ee:	4630      	mov	r0, r6
 80114f0:	f000 fb7a 	bl	8011be8 <__multiply>
 80114f4:	4629      	mov	r1, r5
 80114f6:	9009      	str	r0, [sp, #36]	; 0x24
 80114f8:	4630      	mov	r0, r6
 80114fa:	f000 faa9 	bl	8011a50 <_Bfree>
 80114fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011502:	4615      	mov	r5, r2
 8011504:	1b1a      	subs	r2, r3, r4
 8011506:	d004      	beq.n	8011512 <_dtoa_r+0x6b2>
 8011508:	4629      	mov	r1, r5
 801150a:	4630      	mov	r0, r6
 801150c:	f000 fc16 	bl	8011d3c <__pow5mult>
 8011510:	4605      	mov	r5, r0
 8011512:	2101      	movs	r1, #1
 8011514:	4630      	mov	r0, r6
 8011516:	f000 fb51 	bl	8011bbc <__i2b>
 801151a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801151c:	2b00      	cmp	r3, #0
 801151e:	4604      	mov	r4, r0
 8011520:	f340 8081 	ble.w	8011626 <_dtoa_r+0x7c6>
 8011524:	461a      	mov	r2, r3
 8011526:	4601      	mov	r1, r0
 8011528:	4630      	mov	r0, r6
 801152a:	f000 fc07 	bl	8011d3c <__pow5mult>
 801152e:	9b06      	ldr	r3, [sp, #24]
 8011530:	2b01      	cmp	r3, #1
 8011532:	4604      	mov	r4, r0
 8011534:	dd7a      	ble.n	801162c <_dtoa_r+0x7cc>
 8011536:	2300      	movs	r3, #0
 8011538:	9309      	str	r3, [sp, #36]	; 0x24
 801153a:	6922      	ldr	r2, [r4, #16]
 801153c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011540:	6910      	ldr	r0, [r2, #16]
 8011542:	f000 faed 	bl	8011b20 <__hi0bits>
 8011546:	f1c0 0020 	rsb	r0, r0, #32
 801154a:	9b05      	ldr	r3, [sp, #20]
 801154c:	4418      	add	r0, r3
 801154e:	f010 001f 	ands.w	r0, r0, #31
 8011552:	f000 8093 	beq.w	801167c <_dtoa_r+0x81c>
 8011556:	f1c0 0220 	rsb	r2, r0, #32
 801155a:	2a04      	cmp	r2, #4
 801155c:	f340 8085 	ble.w	801166a <_dtoa_r+0x80a>
 8011560:	9b04      	ldr	r3, [sp, #16]
 8011562:	f1c0 001c 	rsb	r0, r0, #28
 8011566:	4403      	add	r3, r0
 8011568:	9304      	str	r3, [sp, #16]
 801156a:	9b05      	ldr	r3, [sp, #20]
 801156c:	4480      	add	r8, r0
 801156e:	4403      	add	r3, r0
 8011570:	9305      	str	r3, [sp, #20]
 8011572:	9b04      	ldr	r3, [sp, #16]
 8011574:	2b00      	cmp	r3, #0
 8011576:	dd05      	ble.n	8011584 <_dtoa_r+0x724>
 8011578:	4629      	mov	r1, r5
 801157a:	461a      	mov	r2, r3
 801157c:	4630      	mov	r0, r6
 801157e:	f000 fc37 	bl	8011df0 <__lshift>
 8011582:	4605      	mov	r5, r0
 8011584:	9b05      	ldr	r3, [sp, #20]
 8011586:	2b00      	cmp	r3, #0
 8011588:	dd05      	ble.n	8011596 <_dtoa_r+0x736>
 801158a:	4621      	mov	r1, r4
 801158c:	461a      	mov	r2, r3
 801158e:	4630      	mov	r0, r6
 8011590:	f000 fc2e 	bl	8011df0 <__lshift>
 8011594:	4604      	mov	r4, r0
 8011596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d071      	beq.n	8011680 <_dtoa_r+0x820>
 801159c:	4621      	mov	r1, r4
 801159e:	4628      	mov	r0, r5
 80115a0:	f000 fc92 	bl	8011ec8 <__mcmp>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	da6b      	bge.n	8011680 <_dtoa_r+0x820>
 80115a8:	2300      	movs	r3, #0
 80115aa:	4629      	mov	r1, r5
 80115ac:	220a      	movs	r2, #10
 80115ae:	4630      	mov	r0, r6
 80115b0:	f000 fa70 	bl	8011a94 <__multadd>
 80115b4:	9b07      	ldr	r3, [sp, #28]
 80115b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80115ba:	4605      	mov	r5, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 8197 	beq.w	80118f0 <_dtoa_r+0xa90>
 80115c2:	4639      	mov	r1, r7
 80115c4:	2300      	movs	r3, #0
 80115c6:	220a      	movs	r2, #10
 80115c8:	4630      	mov	r0, r6
 80115ca:	f000 fa63 	bl	8011a94 <__multadd>
 80115ce:	f1ba 0f00 	cmp.w	sl, #0
 80115d2:	4607      	mov	r7, r0
 80115d4:	f300 8093 	bgt.w	80116fe <_dtoa_r+0x89e>
 80115d8:	9b06      	ldr	r3, [sp, #24]
 80115da:	2b02      	cmp	r3, #2
 80115dc:	dc57      	bgt.n	801168e <_dtoa_r+0x82e>
 80115de:	e08e      	b.n	80116fe <_dtoa_r+0x89e>
 80115e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80115e6:	e751      	b.n	801148c <_dtoa_r+0x62c>
 80115e8:	f109 34ff 	add.w	r4, r9, #4294967295
 80115ec:	42a3      	cmp	r3, r4
 80115ee:	bfbf      	itttt	lt
 80115f0:	1ae2      	sublt	r2, r4, r3
 80115f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80115f4:	189b      	addlt	r3, r3, r2
 80115f6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80115f8:	bfae      	itee	ge
 80115fa:	1b1c      	subge	r4, r3, r4
 80115fc:	4623      	movlt	r3, r4
 80115fe:	2400      	movlt	r4, #0
 8011600:	f1b9 0f00 	cmp.w	r9, #0
 8011604:	bfb5      	itete	lt
 8011606:	9a04      	ldrlt	r2, [sp, #16]
 8011608:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801160c:	eba2 0809 	sublt.w	r8, r2, r9
 8011610:	464a      	movge	r2, r9
 8011612:	bfb8      	it	lt
 8011614:	2200      	movlt	r2, #0
 8011616:	e73c      	b.n	8011492 <_dtoa_r+0x632>
 8011618:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801161c:	9f07      	ldr	r7, [sp, #28]
 801161e:	461c      	mov	r4, r3
 8011620:	e744      	b.n	80114ac <_dtoa_r+0x64c>
 8011622:	461a      	mov	r2, r3
 8011624:	e770      	b.n	8011508 <_dtoa_r+0x6a8>
 8011626:	9b06      	ldr	r3, [sp, #24]
 8011628:	2b01      	cmp	r3, #1
 801162a:	dc18      	bgt.n	801165e <_dtoa_r+0x7fe>
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	b9b3      	cbnz	r3, 801165e <_dtoa_r+0x7fe>
 8011630:	9b03      	ldr	r3, [sp, #12]
 8011632:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011636:	b9a2      	cbnz	r2, 8011662 <_dtoa_r+0x802>
 8011638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801163c:	0d12      	lsrs	r2, r2, #20
 801163e:	0512      	lsls	r2, r2, #20
 8011640:	b18a      	cbz	r2, 8011666 <_dtoa_r+0x806>
 8011642:	9b04      	ldr	r3, [sp, #16]
 8011644:	3301      	adds	r3, #1
 8011646:	9304      	str	r3, [sp, #16]
 8011648:	9b05      	ldr	r3, [sp, #20]
 801164a:	3301      	adds	r3, #1
 801164c:	9305      	str	r3, [sp, #20]
 801164e:	2301      	movs	r3, #1
 8011650:	9309      	str	r3, [sp, #36]	; 0x24
 8011652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011654:	2b00      	cmp	r3, #0
 8011656:	f47f af70 	bne.w	801153a <_dtoa_r+0x6da>
 801165a:	2001      	movs	r0, #1
 801165c:	e775      	b.n	801154a <_dtoa_r+0x6ea>
 801165e:	2300      	movs	r3, #0
 8011660:	e7f6      	b.n	8011650 <_dtoa_r+0x7f0>
 8011662:	9b02      	ldr	r3, [sp, #8]
 8011664:	e7f4      	b.n	8011650 <_dtoa_r+0x7f0>
 8011666:	9209      	str	r2, [sp, #36]	; 0x24
 8011668:	e7f3      	b.n	8011652 <_dtoa_r+0x7f2>
 801166a:	d082      	beq.n	8011572 <_dtoa_r+0x712>
 801166c:	9b04      	ldr	r3, [sp, #16]
 801166e:	321c      	adds	r2, #28
 8011670:	4413      	add	r3, r2
 8011672:	9304      	str	r3, [sp, #16]
 8011674:	9b05      	ldr	r3, [sp, #20]
 8011676:	4490      	add	r8, r2
 8011678:	4413      	add	r3, r2
 801167a:	e779      	b.n	8011570 <_dtoa_r+0x710>
 801167c:	4602      	mov	r2, r0
 801167e:	e7f5      	b.n	801166c <_dtoa_r+0x80c>
 8011680:	f1b9 0f00 	cmp.w	r9, #0
 8011684:	dc36      	bgt.n	80116f4 <_dtoa_r+0x894>
 8011686:	9b06      	ldr	r3, [sp, #24]
 8011688:	2b02      	cmp	r3, #2
 801168a:	dd33      	ble.n	80116f4 <_dtoa_r+0x894>
 801168c:	46ca      	mov	sl, r9
 801168e:	f1ba 0f00 	cmp.w	sl, #0
 8011692:	d10d      	bne.n	80116b0 <_dtoa_r+0x850>
 8011694:	4621      	mov	r1, r4
 8011696:	4653      	mov	r3, sl
 8011698:	2205      	movs	r2, #5
 801169a:	4630      	mov	r0, r6
 801169c:	f000 f9fa 	bl	8011a94 <__multadd>
 80116a0:	4601      	mov	r1, r0
 80116a2:	4604      	mov	r4, r0
 80116a4:	4628      	mov	r0, r5
 80116a6:	f000 fc0f 	bl	8011ec8 <__mcmp>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f73f ade4 	bgt.w	8011278 <_dtoa_r+0x418>
 80116b0:	9b08      	ldr	r3, [sp, #32]
 80116b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80116b6:	ea6f 0b03 	mvn.w	fp, r3
 80116ba:	f04f 0900 	mov.w	r9, #0
 80116be:	4621      	mov	r1, r4
 80116c0:	4630      	mov	r0, r6
 80116c2:	f000 f9c5 	bl	8011a50 <_Bfree>
 80116c6:	2f00      	cmp	r7, #0
 80116c8:	f43f aea1 	beq.w	801140e <_dtoa_r+0x5ae>
 80116cc:	f1b9 0f00 	cmp.w	r9, #0
 80116d0:	d005      	beq.n	80116de <_dtoa_r+0x87e>
 80116d2:	45b9      	cmp	r9, r7
 80116d4:	d003      	beq.n	80116de <_dtoa_r+0x87e>
 80116d6:	4649      	mov	r1, r9
 80116d8:	4630      	mov	r0, r6
 80116da:	f000 f9b9 	bl	8011a50 <_Bfree>
 80116de:	4639      	mov	r1, r7
 80116e0:	4630      	mov	r0, r6
 80116e2:	f000 f9b5 	bl	8011a50 <_Bfree>
 80116e6:	e692      	b.n	801140e <_dtoa_r+0x5ae>
 80116e8:	2400      	movs	r4, #0
 80116ea:	4627      	mov	r7, r4
 80116ec:	e7e0      	b.n	80116b0 <_dtoa_r+0x850>
 80116ee:	4693      	mov	fp, r2
 80116f0:	4627      	mov	r7, r4
 80116f2:	e5c1      	b.n	8011278 <_dtoa_r+0x418>
 80116f4:	9b07      	ldr	r3, [sp, #28]
 80116f6:	46ca      	mov	sl, r9
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	f000 8100 	beq.w	80118fe <_dtoa_r+0xa9e>
 80116fe:	f1b8 0f00 	cmp.w	r8, #0
 8011702:	dd05      	ble.n	8011710 <_dtoa_r+0x8b0>
 8011704:	4639      	mov	r1, r7
 8011706:	4642      	mov	r2, r8
 8011708:	4630      	mov	r0, r6
 801170a:	f000 fb71 	bl	8011df0 <__lshift>
 801170e:	4607      	mov	r7, r0
 8011710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011712:	2b00      	cmp	r3, #0
 8011714:	d05d      	beq.n	80117d2 <_dtoa_r+0x972>
 8011716:	6879      	ldr	r1, [r7, #4]
 8011718:	4630      	mov	r0, r6
 801171a:	f000 f959 	bl	80119d0 <_Balloc>
 801171e:	4680      	mov	r8, r0
 8011720:	b928      	cbnz	r0, 801172e <_dtoa_r+0x8ce>
 8011722:	4b82      	ldr	r3, [pc, #520]	; (801192c <_dtoa_r+0xacc>)
 8011724:	4602      	mov	r2, r0
 8011726:	f240 21ef 	movw	r1, #751	; 0x2ef
 801172a:	f7ff bbb1 	b.w	8010e90 <_dtoa_r+0x30>
 801172e:	693a      	ldr	r2, [r7, #16]
 8011730:	3202      	adds	r2, #2
 8011732:	0092      	lsls	r2, r2, #2
 8011734:	f107 010c 	add.w	r1, r7, #12
 8011738:	300c      	adds	r0, #12
 801173a:	f000 fee5 	bl	8012508 <memcpy>
 801173e:	2201      	movs	r2, #1
 8011740:	4641      	mov	r1, r8
 8011742:	4630      	mov	r0, r6
 8011744:	f000 fb54 	bl	8011df0 <__lshift>
 8011748:	9b01      	ldr	r3, [sp, #4]
 801174a:	3301      	adds	r3, #1
 801174c:	9304      	str	r3, [sp, #16]
 801174e:	9b01      	ldr	r3, [sp, #4]
 8011750:	4453      	add	r3, sl
 8011752:	9308      	str	r3, [sp, #32]
 8011754:	9b02      	ldr	r3, [sp, #8]
 8011756:	f003 0301 	and.w	r3, r3, #1
 801175a:	46b9      	mov	r9, r7
 801175c:	9307      	str	r3, [sp, #28]
 801175e:	4607      	mov	r7, r0
 8011760:	9b04      	ldr	r3, [sp, #16]
 8011762:	4621      	mov	r1, r4
 8011764:	3b01      	subs	r3, #1
 8011766:	4628      	mov	r0, r5
 8011768:	9302      	str	r3, [sp, #8]
 801176a:	f7ff faf0 	bl	8010d4e <quorem>
 801176e:	4603      	mov	r3, r0
 8011770:	3330      	adds	r3, #48	; 0x30
 8011772:	9005      	str	r0, [sp, #20]
 8011774:	4649      	mov	r1, r9
 8011776:	4628      	mov	r0, r5
 8011778:	9309      	str	r3, [sp, #36]	; 0x24
 801177a:	f000 fba5 	bl	8011ec8 <__mcmp>
 801177e:	463a      	mov	r2, r7
 8011780:	4682      	mov	sl, r0
 8011782:	4621      	mov	r1, r4
 8011784:	4630      	mov	r0, r6
 8011786:	f000 fbbb 	bl	8011f00 <__mdiff>
 801178a:	68c2      	ldr	r2, [r0, #12]
 801178c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801178e:	4680      	mov	r8, r0
 8011790:	bb0a      	cbnz	r2, 80117d6 <_dtoa_r+0x976>
 8011792:	4601      	mov	r1, r0
 8011794:	4628      	mov	r0, r5
 8011796:	f000 fb97 	bl	8011ec8 <__mcmp>
 801179a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801179c:	4602      	mov	r2, r0
 801179e:	4641      	mov	r1, r8
 80117a0:	4630      	mov	r0, r6
 80117a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80117a6:	f000 f953 	bl	8011a50 <_Bfree>
 80117aa:	9b06      	ldr	r3, [sp, #24]
 80117ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80117b2:	ea43 0102 	orr.w	r1, r3, r2
 80117b6:	9b07      	ldr	r3, [sp, #28]
 80117b8:	4319      	orrs	r1, r3
 80117ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117bc:	d10d      	bne.n	80117da <_dtoa_r+0x97a>
 80117be:	2b39      	cmp	r3, #57	; 0x39
 80117c0:	d029      	beq.n	8011816 <_dtoa_r+0x9b6>
 80117c2:	f1ba 0f00 	cmp.w	sl, #0
 80117c6:	dd01      	ble.n	80117cc <_dtoa_r+0x96c>
 80117c8:	9b05      	ldr	r3, [sp, #20]
 80117ca:	3331      	adds	r3, #49	; 0x31
 80117cc:	9a02      	ldr	r2, [sp, #8]
 80117ce:	7013      	strb	r3, [r2, #0]
 80117d0:	e775      	b.n	80116be <_dtoa_r+0x85e>
 80117d2:	4638      	mov	r0, r7
 80117d4:	e7b8      	b.n	8011748 <_dtoa_r+0x8e8>
 80117d6:	2201      	movs	r2, #1
 80117d8:	e7e1      	b.n	801179e <_dtoa_r+0x93e>
 80117da:	f1ba 0f00 	cmp.w	sl, #0
 80117de:	db06      	blt.n	80117ee <_dtoa_r+0x98e>
 80117e0:	9906      	ldr	r1, [sp, #24]
 80117e2:	ea41 0a0a 	orr.w	sl, r1, sl
 80117e6:	9907      	ldr	r1, [sp, #28]
 80117e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80117ec:	d120      	bne.n	8011830 <_dtoa_r+0x9d0>
 80117ee:	2a00      	cmp	r2, #0
 80117f0:	ddec      	ble.n	80117cc <_dtoa_r+0x96c>
 80117f2:	4629      	mov	r1, r5
 80117f4:	2201      	movs	r2, #1
 80117f6:	4630      	mov	r0, r6
 80117f8:	9304      	str	r3, [sp, #16]
 80117fa:	f000 faf9 	bl	8011df0 <__lshift>
 80117fe:	4621      	mov	r1, r4
 8011800:	4605      	mov	r5, r0
 8011802:	f000 fb61 	bl	8011ec8 <__mcmp>
 8011806:	2800      	cmp	r0, #0
 8011808:	9b04      	ldr	r3, [sp, #16]
 801180a:	dc02      	bgt.n	8011812 <_dtoa_r+0x9b2>
 801180c:	d1de      	bne.n	80117cc <_dtoa_r+0x96c>
 801180e:	07da      	lsls	r2, r3, #31
 8011810:	d5dc      	bpl.n	80117cc <_dtoa_r+0x96c>
 8011812:	2b39      	cmp	r3, #57	; 0x39
 8011814:	d1d8      	bne.n	80117c8 <_dtoa_r+0x968>
 8011816:	9a02      	ldr	r2, [sp, #8]
 8011818:	2339      	movs	r3, #57	; 0x39
 801181a:	7013      	strb	r3, [r2, #0]
 801181c:	4643      	mov	r3, r8
 801181e:	4698      	mov	r8, r3
 8011820:	3b01      	subs	r3, #1
 8011822:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011826:	2a39      	cmp	r2, #57	; 0x39
 8011828:	d051      	beq.n	80118ce <_dtoa_r+0xa6e>
 801182a:	3201      	adds	r2, #1
 801182c:	701a      	strb	r2, [r3, #0]
 801182e:	e746      	b.n	80116be <_dtoa_r+0x85e>
 8011830:	2a00      	cmp	r2, #0
 8011832:	dd03      	ble.n	801183c <_dtoa_r+0x9dc>
 8011834:	2b39      	cmp	r3, #57	; 0x39
 8011836:	d0ee      	beq.n	8011816 <_dtoa_r+0x9b6>
 8011838:	3301      	adds	r3, #1
 801183a:	e7c7      	b.n	80117cc <_dtoa_r+0x96c>
 801183c:	9a04      	ldr	r2, [sp, #16]
 801183e:	9908      	ldr	r1, [sp, #32]
 8011840:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011844:	428a      	cmp	r2, r1
 8011846:	d02b      	beq.n	80118a0 <_dtoa_r+0xa40>
 8011848:	4629      	mov	r1, r5
 801184a:	2300      	movs	r3, #0
 801184c:	220a      	movs	r2, #10
 801184e:	4630      	mov	r0, r6
 8011850:	f000 f920 	bl	8011a94 <__multadd>
 8011854:	45b9      	cmp	r9, r7
 8011856:	4605      	mov	r5, r0
 8011858:	f04f 0300 	mov.w	r3, #0
 801185c:	f04f 020a 	mov.w	r2, #10
 8011860:	4649      	mov	r1, r9
 8011862:	4630      	mov	r0, r6
 8011864:	d107      	bne.n	8011876 <_dtoa_r+0xa16>
 8011866:	f000 f915 	bl	8011a94 <__multadd>
 801186a:	4681      	mov	r9, r0
 801186c:	4607      	mov	r7, r0
 801186e:	9b04      	ldr	r3, [sp, #16]
 8011870:	3301      	adds	r3, #1
 8011872:	9304      	str	r3, [sp, #16]
 8011874:	e774      	b.n	8011760 <_dtoa_r+0x900>
 8011876:	f000 f90d 	bl	8011a94 <__multadd>
 801187a:	4639      	mov	r1, r7
 801187c:	4681      	mov	r9, r0
 801187e:	2300      	movs	r3, #0
 8011880:	220a      	movs	r2, #10
 8011882:	4630      	mov	r0, r6
 8011884:	f000 f906 	bl	8011a94 <__multadd>
 8011888:	4607      	mov	r7, r0
 801188a:	e7f0      	b.n	801186e <_dtoa_r+0xa0e>
 801188c:	f1ba 0f00 	cmp.w	sl, #0
 8011890:	9a01      	ldr	r2, [sp, #4]
 8011892:	bfcc      	ite	gt
 8011894:	46d0      	movgt	r8, sl
 8011896:	f04f 0801 	movle.w	r8, #1
 801189a:	4490      	add	r8, r2
 801189c:	f04f 0900 	mov.w	r9, #0
 80118a0:	4629      	mov	r1, r5
 80118a2:	2201      	movs	r2, #1
 80118a4:	4630      	mov	r0, r6
 80118a6:	9302      	str	r3, [sp, #8]
 80118a8:	f000 faa2 	bl	8011df0 <__lshift>
 80118ac:	4621      	mov	r1, r4
 80118ae:	4605      	mov	r5, r0
 80118b0:	f000 fb0a 	bl	8011ec8 <__mcmp>
 80118b4:	2800      	cmp	r0, #0
 80118b6:	dcb1      	bgt.n	801181c <_dtoa_r+0x9bc>
 80118b8:	d102      	bne.n	80118c0 <_dtoa_r+0xa60>
 80118ba:	9b02      	ldr	r3, [sp, #8]
 80118bc:	07db      	lsls	r3, r3, #31
 80118be:	d4ad      	bmi.n	801181c <_dtoa_r+0x9bc>
 80118c0:	4643      	mov	r3, r8
 80118c2:	4698      	mov	r8, r3
 80118c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118c8:	2a30      	cmp	r2, #48	; 0x30
 80118ca:	d0fa      	beq.n	80118c2 <_dtoa_r+0xa62>
 80118cc:	e6f7      	b.n	80116be <_dtoa_r+0x85e>
 80118ce:	9a01      	ldr	r2, [sp, #4]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d1a4      	bne.n	801181e <_dtoa_r+0x9be>
 80118d4:	f10b 0b01 	add.w	fp, fp, #1
 80118d8:	2331      	movs	r3, #49	; 0x31
 80118da:	e778      	b.n	80117ce <_dtoa_r+0x96e>
 80118dc:	4b14      	ldr	r3, [pc, #80]	; (8011930 <_dtoa_r+0xad0>)
 80118de:	f7ff bb2a 	b.w	8010f36 <_dtoa_r+0xd6>
 80118e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f47f ab05 	bne.w	8010ef4 <_dtoa_r+0x94>
 80118ea:	4b12      	ldr	r3, [pc, #72]	; (8011934 <_dtoa_r+0xad4>)
 80118ec:	f7ff bb23 	b.w	8010f36 <_dtoa_r+0xd6>
 80118f0:	f1ba 0f00 	cmp.w	sl, #0
 80118f4:	dc03      	bgt.n	80118fe <_dtoa_r+0xa9e>
 80118f6:	9b06      	ldr	r3, [sp, #24]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	f73f aec8 	bgt.w	801168e <_dtoa_r+0x82e>
 80118fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011902:	4621      	mov	r1, r4
 8011904:	4628      	mov	r0, r5
 8011906:	f7ff fa22 	bl	8010d4e <quorem>
 801190a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801190e:	f808 3b01 	strb.w	r3, [r8], #1
 8011912:	9a01      	ldr	r2, [sp, #4]
 8011914:	eba8 0202 	sub.w	r2, r8, r2
 8011918:	4592      	cmp	sl, r2
 801191a:	ddb7      	ble.n	801188c <_dtoa_r+0xa2c>
 801191c:	4629      	mov	r1, r5
 801191e:	2300      	movs	r3, #0
 8011920:	220a      	movs	r2, #10
 8011922:	4630      	mov	r0, r6
 8011924:	f000 f8b6 	bl	8011a94 <__multadd>
 8011928:	4605      	mov	r5, r0
 801192a:	e7ea      	b.n	8011902 <_dtoa_r+0xaa2>
 801192c:	080137ac 	.word	0x080137ac
 8011930:	0801370c 	.word	0x0801370c
 8011934:	08013730 	.word	0x08013730

08011938 <_free_r>:
 8011938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801193a:	2900      	cmp	r1, #0
 801193c:	d044      	beq.n	80119c8 <_free_r+0x90>
 801193e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011942:	9001      	str	r0, [sp, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	f1a1 0404 	sub.w	r4, r1, #4
 801194a:	bfb8      	it	lt
 801194c:	18e4      	addlt	r4, r4, r3
 801194e:	f7fe fc01 	bl	8010154 <__malloc_lock>
 8011952:	4a1e      	ldr	r2, [pc, #120]	; (80119cc <_free_r+0x94>)
 8011954:	9801      	ldr	r0, [sp, #4]
 8011956:	6813      	ldr	r3, [r2, #0]
 8011958:	b933      	cbnz	r3, 8011968 <_free_r+0x30>
 801195a:	6063      	str	r3, [r4, #4]
 801195c:	6014      	str	r4, [r2, #0]
 801195e:	b003      	add	sp, #12
 8011960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011964:	f7fe bbfc 	b.w	8010160 <__malloc_unlock>
 8011968:	42a3      	cmp	r3, r4
 801196a:	d908      	bls.n	801197e <_free_r+0x46>
 801196c:	6825      	ldr	r5, [r4, #0]
 801196e:	1961      	adds	r1, r4, r5
 8011970:	428b      	cmp	r3, r1
 8011972:	bf01      	itttt	eq
 8011974:	6819      	ldreq	r1, [r3, #0]
 8011976:	685b      	ldreq	r3, [r3, #4]
 8011978:	1949      	addeq	r1, r1, r5
 801197a:	6021      	streq	r1, [r4, #0]
 801197c:	e7ed      	b.n	801195a <_free_r+0x22>
 801197e:	461a      	mov	r2, r3
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	b10b      	cbz	r3, 8011988 <_free_r+0x50>
 8011984:	42a3      	cmp	r3, r4
 8011986:	d9fa      	bls.n	801197e <_free_r+0x46>
 8011988:	6811      	ldr	r1, [r2, #0]
 801198a:	1855      	adds	r5, r2, r1
 801198c:	42a5      	cmp	r5, r4
 801198e:	d10b      	bne.n	80119a8 <_free_r+0x70>
 8011990:	6824      	ldr	r4, [r4, #0]
 8011992:	4421      	add	r1, r4
 8011994:	1854      	adds	r4, r2, r1
 8011996:	42a3      	cmp	r3, r4
 8011998:	6011      	str	r1, [r2, #0]
 801199a:	d1e0      	bne.n	801195e <_free_r+0x26>
 801199c:	681c      	ldr	r4, [r3, #0]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	6053      	str	r3, [r2, #4]
 80119a2:	440c      	add	r4, r1
 80119a4:	6014      	str	r4, [r2, #0]
 80119a6:	e7da      	b.n	801195e <_free_r+0x26>
 80119a8:	d902      	bls.n	80119b0 <_free_r+0x78>
 80119aa:	230c      	movs	r3, #12
 80119ac:	6003      	str	r3, [r0, #0]
 80119ae:	e7d6      	b.n	801195e <_free_r+0x26>
 80119b0:	6825      	ldr	r5, [r4, #0]
 80119b2:	1961      	adds	r1, r4, r5
 80119b4:	428b      	cmp	r3, r1
 80119b6:	bf04      	itt	eq
 80119b8:	6819      	ldreq	r1, [r3, #0]
 80119ba:	685b      	ldreq	r3, [r3, #4]
 80119bc:	6063      	str	r3, [r4, #4]
 80119be:	bf04      	itt	eq
 80119c0:	1949      	addeq	r1, r1, r5
 80119c2:	6021      	streq	r1, [r4, #0]
 80119c4:	6054      	str	r4, [r2, #4]
 80119c6:	e7ca      	b.n	801195e <_free_r+0x26>
 80119c8:	b003      	add	sp, #12
 80119ca:	bd30      	pop	{r4, r5, pc}
 80119cc:	2400213c 	.word	0x2400213c

080119d0 <_Balloc>:
 80119d0:	b570      	push	{r4, r5, r6, lr}
 80119d2:	69c6      	ldr	r6, [r0, #28]
 80119d4:	4604      	mov	r4, r0
 80119d6:	460d      	mov	r5, r1
 80119d8:	b976      	cbnz	r6, 80119f8 <_Balloc+0x28>
 80119da:	2010      	movs	r0, #16
 80119dc:	f7fe fb12 	bl	8010004 <malloc>
 80119e0:	4602      	mov	r2, r0
 80119e2:	61e0      	str	r0, [r4, #28]
 80119e4:	b920      	cbnz	r0, 80119f0 <_Balloc+0x20>
 80119e6:	4b18      	ldr	r3, [pc, #96]	; (8011a48 <_Balloc+0x78>)
 80119e8:	4818      	ldr	r0, [pc, #96]	; (8011a4c <_Balloc+0x7c>)
 80119ea:	216b      	movs	r1, #107	; 0x6b
 80119ec:	f000 fd9a 	bl	8012524 <__assert_func>
 80119f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119f4:	6006      	str	r6, [r0, #0]
 80119f6:	60c6      	str	r6, [r0, #12]
 80119f8:	69e6      	ldr	r6, [r4, #28]
 80119fa:	68f3      	ldr	r3, [r6, #12]
 80119fc:	b183      	cbz	r3, 8011a20 <_Balloc+0x50>
 80119fe:	69e3      	ldr	r3, [r4, #28]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a06:	b9b8      	cbnz	r0, 8011a38 <_Balloc+0x68>
 8011a08:	2101      	movs	r1, #1
 8011a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8011a0e:	1d72      	adds	r2, r6, #5
 8011a10:	0092      	lsls	r2, r2, #2
 8011a12:	4620      	mov	r0, r4
 8011a14:	f000 fda4 	bl	8012560 <_calloc_r>
 8011a18:	b160      	cbz	r0, 8011a34 <_Balloc+0x64>
 8011a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a1e:	e00e      	b.n	8011a3e <_Balloc+0x6e>
 8011a20:	2221      	movs	r2, #33	; 0x21
 8011a22:	2104      	movs	r1, #4
 8011a24:	4620      	mov	r0, r4
 8011a26:	f000 fd9b 	bl	8012560 <_calloc_r>
 8011a2a:	69e3      	ldr	r3, [r4, #28]
 8011a2c:	60f0      	str	r0, [r6, #12]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1e4      	bne.n	80119fe <_Balloc+0x2e>
 8011a34:	2000      	movs	r0, #0
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	6802      	ldr	r2, [r0, #0]
 8011a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a44:	e7f7      	b.n	8011a36 <_Balloc+0x66>
 8011a46:	bf00      	nop
 8011a48:	0801373d 	.word	0x0801373d
 8011a4c:	080137bd 	.word	0x080137bd

08011a50 <_Bfree>:
 8011a50:	b570      	push	{r4, r5, r6, lr}
 8011a52:	69c6      	ldr	r6, [r0, #28]
 8011a54:	4605      	mov	r5, r0
 8011a56:	460c      	mov	r4, r1
 8011a58:	b976      	cbnz	r6, 8011a78 <_Bfree+0x28>
 8011a5a:	2010      	movs	r0, #16
 8011a5c:	f7fe fad2 	bl	8010004 <malloc>
 8011a60:	4602      	mov	r2, r0
 8011a62:	61e8      	str	r0, [r5, #28]
 8011a64:	b920      	cbnz	r0, 8011a70 <_Bfree+0x20>
 8011a66:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <_Bfree+0x3c>)
 8011a68:	4809      	ldr	r0, [pc, #36]	; (8011a90 <_Bfree+0x40>)
 8011a6a:	218f      	movs	r1, #143	; 0x8f
 8011a6c:	f000 fd5a 	bl	8012524 <__assert_func>
 8011a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a74:	6006      	str	r6, [r0, #0]
 8011a76:	60c6      	str	r6, [r0, #12]
 8011a78:	b13c      	cbz	r4, 8011a8a <_Bfree+0x3a>
 8011a7a:	69eb      	ldr	r3, [r5, #28]
 8011a7c:	6862      	ldr	r2, [r4, #4]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a84:	6021      	str	r1, [r4, #0]
 8011a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a8a:	bd70      	pop	{r4, r5, r6, pc}
 8011a8c:	0801373d 	.word	0x0801373d
 8011a90:	080137bd 	.word	0x080137bd

08011a94 <__multadd>:
 8011a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a98:	690d      	ldr	r5, [r1, #16]
 8011a9a:	4607      	mov	r7, r0
 8011a9c:	460c      	mov	r4, r1
 8011a9e:	461e      	mov	r6, r3
 8011aa0:	f101 0c14 	add.w	ip, r1, #20
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8011aaa:	b299      	uxth	r1, r3
 8011aac:	fb02 6101 	mla	r1, r2, r1, r6
 8011ab0:	0c1e      	lsrs	r6, r3, #16
 8011ab2:	0c0b      	lsrs	r3, r1, #16
 8011ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8011ab8:	b289      	uxth	r1, r1
 8011aba:	3001      	adds	r0, #1
 8011abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ac0:	4285      	cmp	r5, r0
 8011ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8011ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011aca:	dcec      	bgt.n	8011aa6 <__multadd+0x12>
 8011acc:	b30e      	cbz	r6, 8011b12 <__multadd+0x7e>
 8011ace:	68a3      	ldr	r3, [r4, #8]
 8011ad0:	42ab      	cmp	r3, r5
 8011ad2:	dc19      	bgt.n	8011b08 <__multadd+0x74>
 8011ad4:	6861      	ldr	r1, [r4, #4]
 8011ad6:	4638      	mov	r0, r7
 8011ad8:	3101      	adds	r1, #1
 8011ada:	f7ff ff79 	bl	80119d0 <_Balloc>
 8011ade:	4680      	mov	r8, r0
 8011ae0:	b928      	cbnz	r0, 8011aee <__multadd+0x5a>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	4b0c      	ldr	r3, [pc, #48]	; (8011b18 <__multadd+0x84>)
 8011ae6:	480d      	ldr	r0, [pc, #52]	; (8011b1c <__multadd+0x88>)
 8011ae8:	21ba      	movs	r1, #186	; 0xba
 8011aea:	f000 fd1b 	bl	8012524 <__assert_func>
 8011aee:	6922      	ldr	r2, [r4, #16]
 8011af0:	3202      	adds	r2, #2
 8011af2:	f104 010c 	add.w	r1, r4, #12
 8011af6:	0092      	lsls	r2, r2, #2
 8011af8:	300c      	adds	r0, #12
 8011afa:	f000 fd05 	bl	8012508 <memcpy>
 8011afe:	4621      	mov	r1, r4
 8011b00:	4638      	mov	r0, r7
 8011b02:	f7ff ffa5 	bl	8011a50 <_Bfree>
 8011b06:	4644      	mov	r4, r8
 8011b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	615e      	str	r6, [r3, #20]
 8011b10:	6125      	str	r5, [r4, #16]
 8011b12:	4620      	mov	r0, r4
 8011b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b18:	080137ac 	.word	0x080137ac
 8011b1c:	080137bd 	.word	0x080137bd

08011b20 <__hi0bits>:
 8011b20:	0c03      	lsrs	r3, r0, #16
 8011b22:	041b      	lsls	r3, r3, #16
 8011b24:	b9d3      	cbnz	r3, 8011b5c <__hi0bits+0x3c>
 8011b26:	0400      	lsls	r0, r0, #16
 8011b28:	2310      	movs	r3, #16
 8011b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011b2e:	bf04      	itt	eq
 8011b30:	0200      	lsleq	r0, r0, #8
 8011b32:	3308      	addeq	r3, #8
 8011b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011b38:	bf04      	itt	eq
 8011b3a:	0100      	lsleq	r0, r0, #4
 8011b3c:	3304      	addeq	r3, #4
 8011b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011b42:	bf04      	itt	eq
 8011b44:	0080      	lsleq	r0, r0, #2
 8011b46:	3302      	addeq	r3, #2
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	db05      	blt.n	8011b58 <__hi0bits+0x38>
 8011b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011b50:	f103 0301 	add.w	r3, r3, #1
 8011b54:	bf08      	it	eq
 8011b56:	2320      	moveq	r3, #32
 8011b58:	4618      	mov	r0, r3
 8011b5a:	4770      	bx	lr
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e7e4      	b.n	8011b2a <__hi0bits+0xa>

08011b60 <__lo0bits>:
 8011b60:	6803      	ldr	r3, [r0, #0]
 8011b62:	f013 0207 	ands.w	r2, r3, #7
 8011b66:	d00c      	beq.n	8011b82 <__lo0bits+0x22>
 8011b68:	07d9      	lsls	r1, r3, #31
 8011b6a:	d422      	bmi.n	8011bb2 <__lo0bits+0x52>
 8011b6c:	079a      	lsls	r2, r3, #30
 8011b6e:	bf49      	itett	mi
 8011b70:	085b      	lsrmi	r3, r3, #1
 8011b72:	089b      	lsrpl	r3, r3, #2
 8011b74:	6003      	strmi	r3, [r0, #0]
 8011b76:	2201      	movmi	r2, #1
 8011b78:	bf5c      	itt	pl
 8011b7a:	6003      	strpl	r3, [r0, #0]
 8011b7c:	2202      	movpl	r2, #2
 8011b7e:	4610      	mov	r0, r2
 8011b80:	4770      	bx	lr
 8011b82:	b299      	uxth	r1, r3
 8011b84:	b909      	cbnz	r1, 8011b8a <__lo0bits+0x2a>
 8011b86:	0c1b      	lsrs	r3, r3, #16
 8011b88:	2210      	movs	r2, #16
 8011b8a:	b2d9      	uxtb	r1, r3
 8011b8c:	b909      	cbnz	r1, 8011b92 <__lo0bits+0x32>
 8011b8e:	3208      	adds	r2, #8
 8011b90:	0a1b      	lsrs	r3, r3, #8
 8011b92:	0719      	lsls	r1, r3, #28
 8011b94:	bf04      	itt	eq
 8011b96:	091b      	lsreq	r3, r3, #4
 8011b98:	3204      	addeq	r2, #4
 8011b9a:	0799      	lsls	r1, r3, #30
 8011b9c:	bf04      	itt	eq
 8011b9e:	089b      	lsreq	r3, r3, #2
 8011ba0:	3202      	addeq	r2, #2
 8011ba2:	07d9      	lsls	r1, r3, #31
 8011ba4:	d403      	bmi.n	8011bae <__lo0bits+0x4e>
 8011ba6:	085b      	lsrs	r3, r3, #1
 8011ba8:	f102 0201 	add.w	r2, r2, #1
 8011bac:	d003      	beq.n	8011bb6 <__lo0bits+0x56>
 8011bae:	6003      	str	r3, [r0, #0]
 8011bb0:	e7e5      	b.n	8011b7e <__lo0bits+0x1e>
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	e7e3      	b.n	8011b7e <__lo0bits+0x1e>
 8011bb6:	2220      	movs	r2, #32
 8011bb8:	e7e1      	b.n	8011b7e <__lo0bits+0x1e>
	...

08011bbc <__i2b>:
 8011bbc:	b510      	push	{r4, lr}
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	2101      	movs	r1, #1
 8011bc2:	f7ff ff05 	bl	80119d0 <_Balloc>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	b928      	cbnz	r0, 8011bd6 <__i2b+0x1a>
 8011bca:	4b05      	ldr	r3, [pc, #20]	; (8011be0 <__i2b+0x24>)
 8011bcc:	4805      	ldr	r0, [pc, #20]	; (8011be4 <__i2b+0x28>)
 8011bce:	f240 1145 	movw	r1, #325	; 0x145
 8011bd2:	f000 fca7 	bl	8012524 <__assert_func>
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	6144      	str	r4, [r0, #20]
 8011bda:	6103      	str	r3, [r0, #16]
 8011bdc:	bd10      	pop	{r4, pc}
 8011bde:	bf00      	nop
 8011be0:	080137ac 	.word	0x080137ac
 8011be4:	080137bd 	.word	0x080137bd

08011be8 <__multiply>:
 8011be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	4691      	mov	r9, r2
 8011bee:	690a      	ldr	r2, [r1, #16]
 8011bf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	bfb8      	it	lt
 8011bf8:	460b      	movlt	r3, r1
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	bfbc      	itt	lt
 8011bfe:	464c      	movlt	r4, r9
 8011c00:	4699      	movlt	r9, r3
 8011c02:	6927      	ldr	r7, [r4, #16]
 8011c04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c08:	68a3      	ldr	r3, [r4, #8]
 8011c0a:	6861      	ldr	r1, [r4, #4]
 8011c0c:	eb07 060a 	add.w	r6, r7, sl
 8011c10:	42b3      	cmp	r3, r6
 8011c12:	b085      	sub	sp, #20
 8011c14:	bfb8      	it	lt
 8011c16:	3101      	addlt	r1, #1
 8011c18:	f7ff feda 	bl	80119d0 <_Balloc>
 8011c1c:	b930      	cbnz	r0, 8011c2c <__multiply+0x44>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	4b44      	ldr	r3, [pc, #272]	; (8011d34 <__multiply+0x14c>)
 8011c22:	4845      	ldr	r0, [pc, #276]	; (8011d38 <__multiply+0x150>)
 8011c24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011c28:	f000 fc7c 	bl	8012524 <__assert_func>
 8011c2c:	f100 0514 	add.w	r5, r0, #20
 8011c30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c34:	462b      	mov	r3, r5
 8011c36:	2200      	movs	r2, #0
 8011c38:	4543      	cmp	r3, r8
 8011c3a:	d321      	bcc.n	8011c80 <__multiply+0x98>
 8011c3c:	f104 0314 	add.w	r3, r4, #20
 8011c40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011c44:	f109 0314 	add.w	r3, r9, #20
 8011c48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011c4c:	9202      	str	r2, [sp, #8]
 8011c4e:	1b3a      	subs	r2, r7, r4
 8011c50:	3a15      	subs	r2, #21
 8011c52:	f022 0203 	bic.w	r2, r2, #3
 8011c56:	3204      	adds	r2, #4
 8011c58:	f104 0115 	add.w	r1, r4, #21
 8011c5c:	428f      	cmp	r7, r1
 8011c5e:	bf38      	it	cc
 8011c60:	2204      	movcc	r2, #4
 8011c62:	9201      	str	r2, [sp, #4]
 8011c64:	9a02      	ldr	r2, [sp, #8]
 8011c66:	9303      	str	r3, [sp, #12]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d80c      	bhi.n	8011c86 <__multiply+0x9e>
 8011c6c:	2e00      	cmp	r6, #0
 8011c6e:	dd03      	ble.n	8011c78 <__multiply+0x90>
 8011c70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d05b      	beq.n	8011d30 <__multiply+0x148>
 8011c78:	6106      	str	r6, [r0, #16]
 8011c7a:	b005      	add	sp, #20
 8011c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c80:	f843 2b04 	str.w	r2, [r3], #4
 8011c84:	e7d8      	b.n	8011c38 <__multiply+0x50>
 8011c86:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c8a:	f1ba 0f00 	cmp.w	sl, #0
 8011c8e:	d024      	beq.n	8011cda <__multiply+0xf2>
 8011c90:	f104 0e14 	add.w	lr, r4, #20
 8011c94:	46a9      	mov	r9, r5
 8011c96:	f04f 0c00 	mov.w	ip, #0
 8011c9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c9e:	f8d9 1000 	ldr.w	r1, [r9]
 8011ca2:	fa1f fb82 	uxth.w	fp, r2
 8011ca6:	b289      	uxth	r1, r1
 8011ca8:	fb0a 110b 	mla	r1, sl, fp, r1
 8011cac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8011cb4:	4461      	add	r1, ip
 8011cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cba:	fb0a c20b 	mla	r2, sl, fp, ip
 8011cbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011cc2:	b289      	uxth	r1, r1
 8011cc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cc8:	4577      	cmp	r7, lr
 8011cca:	f849 1b04 	str.w	r1, [r9], #4
 8011cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cd2:	d8e2      	bhi.n	8011c9a <__multiply+0xb2>
 8011cd4:	9a01      	ldr	r2, [sp, #4]
 8011cd6:	f845 c002 	str.w	ip, [r5, r2]
 8011cda:	9a03      	ldr	r2, [sp, #12]
 8011cdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	f1b9 0f00 	cmp.w	r9, #0
 8011ce6:	d021      	beq.n	8011d2c <__multiply+0x144>
 8011ce8:	6829      	ldr	r1, [r5, #0]
 8011cea:	f104 0c14 	add.w	ip, r4, #20
 8011cee:	46ae      	mov	lr, r5
 8011cf0:	f04f 0a00 	mov.w	sl, #0
 8011cf4:	f8bc b000 	ldrh.w	fp, [ip]
 8011cf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011cfc:	fb09 220b 	mla	r2, r9, fp, r2
 8011d00:	4452      	add	r2, sl
 8011d02:	b289      	uxth	r1, r1
 8011d04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011d08:	f84e 1b04 	str.w	r1, [lr], #4
 8011d0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d14:	f8be 1000 	ldrh.w	r1, [lr]
 8011d18:	fb09 110a 	mla	r1, r9, sl, r1
 8011d1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011d20:	4567      	cmp	r7, ip
 8011d22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d26:	d8e5      	bhi.n	8011cf4 <__multiply+0x10c>
 8011d28:	9a01      	ldr	r2, [sp, #4]
 8011d2a:	50a9      	str	r1, [r5, r2]
 8011d2c:	3504      	adds	r5, #4
 8011d2e:	e799      	b.n	8011c64 <__multiply+0x7c>
 8011d30:	3e01      	subs	r6, #1
 8011d32:	e79b      	b.n	8011c6c <__multiply+0x84>
 8011d34:	080137ac 	.word	0x080137ac
 8011d38:	080137bd 	.word	0x080137bd

08011d3c <__pow5mult>:
 8011d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d40:	4615      	mov	r5, r2
 8011d42:	f012 0203 	ands.w	r2, r2, #3
 8011d46:	4606      	mov	r6, r0
 8011d48:	460f      	mov	r7, r1
 8011d4a:	d007      	beq.n	8011d5c <__pow5mult+0x20>
 8011d4c:	4c25      	ldr	r4, [pc, #148]	; (8011de4 <__pow5mult+0xa8>)
 8011d4e:	3a01      	subs	r2, #1
 8011d50:	2300      	movs	r3, #0
 8011d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d56:	f7ff fe9d 	bl	8011a94 <__multadd>
 8011d5a:	4607      	mov	r7, r0
 8011d5c:	10ad      	asrs	r5, r5, #2
 8011d5e:	d03d      	beq.n	8011ddc <__pow5mult+0xa0>
 8011d60:	69f4      	ldr	r4, [r6, #28]
 8011d62:	b97c      	cbnz	r4, 8011d84 <__pow5mult+0x48>
 8011d64:	2010      	movs	r0, #16
 8011d66:	f7fe f94d 	bl	8010004 <malloc>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	61f0      	str	r0, [r6, #28]
 8011d6e:	b928      	cbnz	r0, 8011d7c <__pow5mult+0x40>
 8011d70:	4b1d      	ldr	r3, [pc, #116]	; (8011de8 <__pow5mult+0xac>)
 8011d72:	481e      	ldr	r0, [pc, #120]	; (8011dec <__pow5mult+0xb0>)
 8011d74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011d78:	f000 fbd4 	bl	8012524 <__assert_func>
 8011d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d80:	6004      	str	r4, [r0, #0]
 8011d82:	60c4      	str	r4, [r0, #12]
 8011d84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d8c:	b94c      	cbnz	r4, 8011da2 <__pow5mult+0x66>
 8011d8e:	f240 2171 	movw	r1, #625	; 0x271
 8011d92:	4630      	mov	r0, r6
 8011d94:	f7ff ff12 	bl	8011bbc <__i2b>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d9e:	4604      	mov	r4, r0
 8011da0:	6003      	str	r3, [r0, #0]
 8011da2:	f04f 0900 	mov.w	r9, #0
 8011da6:	07eb      	lsls	r3, r5, #31
 8011da8:	d50a      	bpl.n	8011dc0 <__pow5mult+0x84>
 8011daa:	4639      	mov	r1, r7
 8011dac:	4622      	mov	r2, r4
 8011dae:	4630      	mov	r0, r6
 8011db0:	f7ff ff1a 	bl	8011be8 <__multiply>
 8011db4:	4639      	mov	r1, r7
 8011db6:	4680      	mov	r8, r0
 8011db8:	4630      	mov	r0, r6
 8011dba:	f7ff fe49 	bl	8011a50 <_Bfree>
 8011dbe:	4647      	mov	r7, r8
 8011dc0:	106d      	asrs	r5, r5, #1
 8011dc2:	d00b      	beq.n	8011ddc <__pow5mult+0xa0>
 8011dc4:	6820      	ldr	r0, [r4, #0]
 8011dc6:	b938      	cbnz	r0, 8011dd8 <__pow5mult+0x9c>
 8011dc8:	4622      	mov	r2, r4
 8011dca:	4621      	mov	r1, r4
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7ff ff0b 	bl	8011be8 <__multiply>
 8011dd2:	6020      	str	r0, [r4, #0]
 8011dd4:	f8c0 9000 	str.w	r9, [r0]
 8011dd8:	4604      	mov	r4, r0
 8011dda:	e7e4      	b.n	8011da6 <__pow5mult+0x6a>
 8011ddc:	4638      	mov	r0, r7
 8011dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011de2:	bf00      	nop
 8011de4:	08013908 	.word	0x08013908
 8011de8:	0801373d 	.word	0x0801373d
 8011dec:	080137bd 	.word	0x080137bd

08011df0 <__lshift>:
 8011df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011df4:	460c      	mov	r4, r1
 8011df6:	6849      	ldr	r1, [r1, #4]
 8011df8:	6923      	ldr	r3, [r4, #16]
 8011dfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dfe:	68a3      	ldr	r3, [r4, #8]
 8011e00:	4607      	mov	r7, r0
 8011e02:	4691      	mov	r9, r2
 8011e04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e08:	f108 0601 	add.w	r6, r8, #1
 8011e0c:	42b3      	cmp	r3, r6
 8011e0e:	db0b      	blt.n	8011e28 <__lshift+0x38>
 8011e10:	4638      	mov	r0, r7
 8011e12:	f7ff fddd 	bl	80119d0 <_Balloc>
 8011e16:	4605      	mov	r5, r0
 8011e18:	b948      	cbnz	r0, 8011e2e <__lshift+0x3e>
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	4b28      	ldr	r3, [pc, #160]	; (8011ec0 <__lshift+0xd0>)
 8011e1e:	4829      	ldr	r0, [pc, #164]	; (8011ec4 <__lshift+0xd4>)
 8011e20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011e24:	f000 fb7e 	bl	8012524 <__assert_func>
 8011e28:	3101      	adds	r1, #1
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	e7ee      	b.n	8011e0c <__lshift+0x1c>
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f100 0114 	add.w	r1, r0, #20
 8011e34:	f100 0210 	add.w	r2, r0, #16
 8011e38:	4618      	mov	r0, r3
 8011e3a:	4553      	cmp	r3, sl
 8011e3c:	db33      	blt.n	8011ea6 <__lshift+0xb6>
 8011e3e:	6920      	ldr	r0, [r4, #16]
 8011e40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e44:	f104 0314 	add.w	r3, r4, #20
 8011e48:	f019 091f 	ands.w	r9, r9, #31
 8011e4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e54:	d02b      	beq.n	8011eae <__lshift+0xbe>
 8011e56:	f1c9 0e20 	rsb	lr, r9, #32
 8011e5a:	468a      	mov	sl, r1
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	fa00 f009 	lsl.w	r0, r0, r9
 8011e64:	4310      	orrs	r0, r2
 8011e66:	f84a 0b04 	str.w	r0, [sl], #4
 8011e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e6e:	459c      	cmp	ip, r3
 8011e70:	fa22 f20e 	lsr.w	r2, r2, lr
 8011e74:	d8f3      	bhi.n	8011e5e <__lshift+0x6e>
 8011e76:	ebac 0304 	sub.w	r3, ip, r4
 8011e7a:	3b15      	subs	r3, #21
 8011e7c:	f023 0303 	bic.w	r3, r3, #3
 8011e80:	3304      	adds	r3, #4
 8011e82:	f104 0015 	add.w	r0, r4, #21
 8011e86:	4584      	cmp	ip, r0
 8011e88:	bf38      	it	cc
 8011e8a:	2304      	movcc	r3, #4
 8011e8c:	50ca      	str	r2, [r1, r3]
 8011e8e:	b10a      	cbz	r2, 8011e94 <__lshift+0xa4>
 8011e90:	f108 0602 	add.w	r6, r8, #2
 8011e94:	3e01      	subs	r6, #1
 8011e96:	4638      	mov	r0, r7
 8011e98:	612e      	str	r6, [r5, #16]
 8011e9a:	4621      	mov	r1, r4
 8011e9c:	f7ff fdd8 	bl	8011a50 <_Bfree>
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea6:	f842 0f04 	str.w	r0, [r2, #4]!
 8011eaa:	3301      	adds	r3, #1
 8011eac:	e7c5      	b.n	8011e3a <__lshift+0x4a>
 8011eae:	3904      	subs	r1, #4
 8011eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8011eb8:	459c      	cmp	ip, r3
 8011eba:	d8f9      	bhi.n	8011eb0 <__lshift+0xc0>
 8011ebc:	e7ea      	b.n	8011e94 <__lshift+0xa4>
 8011ebe:	bf00      	nop
 8011ec0:	080137ac 	.word	0x080137ac
 8011ec4:	080137bd 	.word	0x080137bd

08011ec8 <__mcmp>:
 8011ec8:	b530      	push	{r4, r5, lr}
 8011eca:	6902      	ldr	r2, [r0, #16]
 8011ecc:	690c      	ldr	r4, [r1, #16]
 8011ece:	1b12      	subs	r2, r2, r4
 8011ed0:	d10e      	bne.n	8011ef0 <__mcmp+0x28>
 8011ed2:	f100 0314 	add.w	r3, r0, #20
 8011ed6:	3114      	adds	r1, #20
 8011ed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011edc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ee8:	42a5      	cmp	r5, r4
 8011eea:	d003      	beq.n	8011ef4 <__mcmp+0x2c>
 8011eec:	d305      	bcc.n	8011efa <__mcmp+0x32>
 8011eee:	2201      	movs	r2, #1
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	bd30      	pop	{r4, r5, pc}
 8011ef4:	4283      	cmp	r3, r0
 8011ef6:	d3f3      	bcc.n	8011ee0 <__mcmp+0x18>
 8011ef8:	e7fa      	b.n	8011ef0 <__mcmp+0x28>
 8011efa:	f04f 32ff 	mov.w	r2, #4294967295
 8011efe:	e7f7      	b.n	8011ef0 <__mcmp+0x28>

08011f00 <__mdiff>:
 8011f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	460c      	mov	r4, r1
 8011f06:	4606      	mov	r6, r0
 8011f08:	4611      	mov	r1, r2
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	4690      	mov	r8, r2
 8011f0e:	f7ff ffdb 	bl	8011ec8 <__mcmp>
 8011f12:	1e05      	subs	r5, r0, #0
 8011f14:	d110      	bne.n	8011f38 <__mdiff+0x38>
 8011f16:	4629      	mov	r1, r5
 8011f18:	4630      	mov	r0, r6
 8011f1a:	f7ff fd59 	bl	80119d0 <_Balloc>
 8011f1e:	b930      	cbnz	r0, 8011f2e <__mdiff+0x2e>
 8011f20:	4b3a      	ldr	r3, [pc, #232]	; (801200c <__mdiff+0x10c>)
 8011f22:	4602      	mov	r2, r0
 8011f24:	f240 2137 	movw	r1, #567	; 0x237
 8011f28:	4839      	ldr	r0, [pc, #228]	; (8012010 <__mdiff+0x110>)
 8011f2a:	f000 fafb 	bl	8012524 <__assert_func>
 8011f2e:	2301      	movs	r3, #1
 8011f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f38:	bfa4      	itt	ge
 8011f3a:	4643      	movge	r3, r8
 8011f3c:	46a0      	movge	r8, r4
 8011f3e:	4630      	mov	r0, r6
 8011f40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011f44:	bfa6      	itte	ge
 8011f46:	461c      	movge	r4, r3
 8011f48:	2500      	movge	r5, #0
 8011f4a:	2501      	movlt	r5, #1
 8011f4c:	f7ff fd40 	bl	80119d0 <_Balloc>
 8011f50:	b920      	cbnz	r0, 8011f5c <__mdiff+0x5c>
 8011f52:	4b2e      	ldr	r3, [pc, #184]	; (801200c <__mdiff+0x10c>)
 8011f54:	4602      	mov	r2, r0
 8011f56:	f240 2145 	movw	r1, #581	; 0x245
 8011f5a:	e7e5      	b.n	8011f28 <__mdiff+0x28>
 8011f5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f60:	6926      	ldr	r6, [r4, #16]
 8011f62:	60c5      	str	r5, [r0, #12]
 8011f64:	f104 0914 	add.w	r9, r4, #20
 8011f68:	f108 0514 	add.w	r5, r8, #20
 8011f6c:	f100 0e14 	add.w	lr, r0, #20
 8011f70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f78:	f108 0210 	add.w	r2, r8, #16
 8011f7c:	46f2      	mov	sl, lr
 8011f7e:	2100      	movs	r1, #0
 8011f80:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f88:	fa11 f88b 	uxtah	r8, r1, fp
 8011f8c:	b299      	uxth	r1, r3
 8011f8e:	0c1b      	lsrs	r3, r3, #16
 8011f90:	eba8 0801 	sub.w	r8, r8, r1
 8011f94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f9c:	fa1f f888 	uxth.w	r8, r8
 8011fa0:	1419      	asrs	r1, r3, #16
 8011fa2:	454e      	cmp	r6, r9
 8011fa4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011fa8:	f84a 3b04 	str.w	r3, [sl], #4
 8011fac:	d8e8      	bhi.n	8011f80 <__mdiff+0x80>
 8011fae:	1b33      	subs	r3, r6, r4
 8011fb0:	3b15      	subs	r3, #21
 8011fb2:	f023 0303 	bic.w	r3, r3, #3
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	3415      	adds	r4, #21
 8011fba:	42a6      	cmp	r6, r4
 8011fbc:	bf38      	it	cc
 8011fbe:	2304      	movcc	r3, #4
 8011fc0:	441d      	add	r5, r3
 8011fc2:	4473      	add	r3, lr
 8011fc4:	469e      	mov	lr, r3
 8011fc6:	462e      	mov	r6, r5
 8011fc8:	4566      	cmp	r6, ip
 8011fca:	d30e      	bcc.n	8011fea <__mdiff+0xea>
 8011fcc:	f10c 0203 	add.w	r2, ip, #3
 8011fd0:	1b52      	subs	r2, r2, r5
 8011fd2:	f022 0203 	bic.w	r2, r2, #3
 8011fd6:	3d03      	subs	r5, #3
 8011fd8:	45ac      	cmp	ip, r5
 8011fda:	bf38      	it	cc
 8011fdc:	2200      	movcc	r2, #0
 8011fde:	4413      	add	r3, r2
 8011fe0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011fe4:	b17a      	cbz	r2, 8012006 <__mdiff+0x106>
 8011fe6:	6107      	str	r7, [r0, #16]
 8011fe8:	e7a4      	b.n	8011f34 <__mdiff+0x34>
 8011fea:	f856 8b04 	ldr.w	r8, [r6], #4
 8011fee:	fa11 f288 	uxtah	r2, r1, r8
 8011ff2:	1414      	asrs	r4, r2, #16
 8011ff4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011ff8:	b292      	uxth	r2, r2
 8011ffa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ffe:	f84e 2b04 	str.w	r2, [lr], #4
 8012002:	1421      	asrs	r1, r4, #16
 8012004:	e7e0      	b.n	8011fc8 <__mdiff+0xc8>
 8012006:	3f01      	subs	r7, #1
 8012008:	e7ea      	b.n	8011fe0 <__mdiff+0xe0>
 801200a:	bf00      	nop
 801200c:	080137ac 	.word	0x080137ac
 8012010:	080137bd 	.word	0x080137bd

08012014 <__d2b>:
 8012014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012018:	460f      	mov	r7, r1
 801201a:	2101      	movs	r1, #1
 801201c:	ec59 8b10 	vmov	r8, r9, d0
 8012020:	4616      	mov	r6, r2
 8012022:	f7ff fcd5 	bl	80119d0 <_Balloc>
 8012026:	4604      	mov	r4, r0
 8012028:	b930      	cbnz	r0, 8012038 <__d2b+0x24>
 801202a:	4602      	mov	r2, r0
 801202c:	4b24      	ldr	r3, [pc, #144]	; (80120c0 <__d2b+0xac>)
 801202e:	4825      	ldr	r0, [pc, #148]	; (80120c4 <__d2b+0xb0>)
 8012030:	f240 310f 	movw	r1, #783	; 0x30f
 8012034:	f000 fa76 	bl	8012524 <__assert_func>
 8012038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801203c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012040:	bb2d      	cbnz	r5, 801208e <__d2b+0x7a>
 8012042:	9301      	str	r3, [sp, #4]
 8012044:	f1b8 0300 	subs.w	r3, r8, #0
 8012048:	d026      	beq.n	8012098 <__d2b+0x84>
 801204a:	4668      	mov	r0, sp
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	f7ff fd87 	bl	8011b60 <__lo0bits>
 8012052:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012056:	b1e8      	cbz	r0, 8012094 <__d2b+0x80>
 8012058:	f1c0 0320 	rsb	r3, r0, #32
 801205c:	fa02 f303 	lsl.w	r3, r2, r3
 8012060:	430b      	orrs	r3, r1
 8012062:	40c2      	lsrs	r2, r0
 8012064:	6163      	str	r3, [r4, #20]
 8012066:	9201      	str	r2, [sp, #4]
 8012068:	9b01      	ldr	r3, [sp, #4]
 801206a:	61a3      	str	r3, [r4, #24]
 801206c:	2b00      	cmp	r3, #0
 801206e:	bf14      	ite	ne
 8012070:	2202      	movne	r2, #2
 8012072:	2201      	moveq	r2, #1
 8012074:	6122      	str	r2, [r4, #16]
 8012076:	b1bd      	cbz	r5, 80120a8 <__d2b+0x94>
 8012078:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801207c:	4405      	add	r5, r0
 801207e:	603d      	str	r5, [r7, #0]
 8012080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012084:	6030      	str	r0, [r6, #0]
 8012086:	4620      	mov	r0, r4
 8012088:	b003      	add	sp, #12
 801208a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012092:	e7d6      	b.n	8012042 <__d2b+0x2e>
 8012094:	6161      	str	r1, [r4, #20]
 8012096:	e7e7      	b.n	8012068 <__d2b+0x54>
 8012098:	a801      	add	r0, sp, #4
 801209a:	f7ff fd61 	bl	8011b60 <__lo0bits>
 801209e:	9b01      	ldr	r3, [sp, #4]
 80120a0:	6163      	str	r3, [r4, #20]
 80120a2:	3020      	adds	r0, #32
 80120a4:	2201      	movs	r2, #1
 80120a6:	e7e5      	b.n	8012074 <__d2b+0x60>
 80120a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120b0:	6038      	str	r0, [r7, #0]
 80120b2:	6918      	ldr	r0, [r3, #16]
 80120b4:	f7ff fd34 	bl	8011b20 <__hi0bits>
 80120b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120bc:	e7e2      	b.n	8012084 <__d2b+0x70>
 80120be:	bf00      	nop
 80120c0:	080137ac 	.word	0x080137ac
 80120c4:	080137bd 	.word	0x080137bd

080120c8 <__ssputs_r>:
 80120c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120cc:	688e      	ldr	r6, [r1, #8]
 80120ce:	461f      	mov	r7, r3
 80120d0:	42be      	cmp	r6, r7
 80120d2:	680b      	ldr	r3, [r1, #0]
 80120d4:	4682      	mov	sl, r0
 80120d6:	460c      	mov	r4, r1
 80120d8:	4690      	mov	r8, r2
 80120da:	d82c      	bhi.n	8012136 <__ssputs_r+0x6e>
 80120dc:	898a      	ldrh	r2, [r1, #12]
 80120de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80120e2:	d026      	beq.n	8012132 <__ssputs_r+0x6a>
 80120e4:	6965      	ldr	r5, [r4, #20]
 80120e6:	6909      	ldr	r1, [r1, #16]
 80120e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120ec:	eba3 0901 	sub.w	r9, r3, r1
 80120f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120f4:	1c7b      	adds	r3, r7, #1
 80120f6:	444b      	add	r3, r9
 80120f8:	106d      	asrs	r5, r5, #1
 80120fa:	429d      	cmp	r5, r3
 80120fc:	bf38      	it	cc
 80120fe:	461d      	movcc	r5, r3
 8012100:	0553      	lsls	r3, r2, #21
 8012102:	d527      	bpl.n	8012154 <__ssputs_r+0x8c>
 8012104:	4629      	mov	r1, r5
 8012106:	f7fd ffa5 	bl	8010054 <_malloc_r>
 801210a:	4606      	mov	r6, r0
 801210c:	b360      	cbz	r0, 8012168 <__ssputs_r+0xa0>
 801210e:	6921      	ldr	r1, [r4, #16]
 8012110:	464a      	mov	r2, r9
 8012112:	f000 f9f9 	bl	8012508 <memcpy>
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012120:	81a3      	strh	r3, [r4, #12]
 8012122:	6126      	str	r6, [r4, #16]
 8012124:	6165      	str	r5, [r4, #20]
 8012126:	444e      	add	r6, r9
 8012128:	eba5 0509 	sub.w	r5, r5, r9
 801212c:	6026      	str	r6, [r4, #0]
 801212e:	60a5      	str	r5, [r4, #8]
 8012130:	463e      	mov	r6, r7
 8012132:	42be      	cmp	r6, r7
 8012134:	d900      	bls.n	8012138 <__ssputs_r+0x70>
 8012136:	463e      	mov	r6, r7
 8012138:	6820      	ldr	r0, [r4, #0]
 801213a:	4632      	mov	r2, r6
 801213c:	4641      	mov	r1, r8
 801213e:	f000 f9c9 	bl	80124d4 <memmove>
 8012142:	68a3      	ldr	r3, [r4, #8]
 8012144:	1b9b      	subs	r3, r3, r6
 8012146:	60a3      	str	r3, [r4, #8]
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	4433      	add	r3, r6
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	2000      	movs	r0, #0
 8012150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012154:	462a      	mov	r2, r5
 8012156:	f000 fa2b 	bl	80125b0 <_realloc_r>
 801215a:	4606      	mov	r6, r0
 801215c:	2800      	cmp	r0, #0
 801215e:	d1e0      	bne.n	8012122 <__ssputs_r+0x5a>
 8012160:	6921      	ldr	r1, [r4, #16]
 8012162:	4650      	mov	r0, sl
 8012164:	f7ff fbe8 	bl	8011938 <_free_r>
 8012168:	230c      	movs	r3, #12
 801216a:	f8ca 3000 	str.w	r3, [sl]
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012174:	81a3      	strh	r3, [r4, #12]
 8012176:	f04f 30ff 	mov.w	r0, #4294967295
 801217a:	e7e9      	b.n	8012150 <__ssputs_r+0x88>

0801217c <_svfiprintf_r>:
 801217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012180:	4698      	mov	r8, r3
 8012182:	898b      	ldrh	r3, [r1, #12]
 8012184:	061b      	lsls	r3, r3, #24
 8012186:	b09d      	sub	sp, #116	; 0x74
 8012188:	4607      	mov	r7, r0
 801218a:	460d      	mov	r5, r1
 801218c:	4614      	mov	r4, r2
 801218e:	d50e      	bpl.n	80121ae <_svfiprintf_r+0x32>
 8012190:	690b      	ldr	r3, [r1, #16]
 8012192:	b963      	cbnz	r3, 80121ae <_svfiprintf_r+0x32>
 8012194:	2140      	movs	r1, #64	; 0x40
 8012196:	f7fd ff5d 	bl	8010054 <_malloc_r>
 801219a:	6028      	str	r0, [r5, #0]
 801219c:	6128      	str	r0, [r5, #16]
 801219e:	b920      	cbnz	r0, 80121aa <_svfiprintf_r+0x2e>
 80121a0:	230c      	movs	r3, #12
 80121a2:	603b      	str	r3, [r7, #0]
 80121a4:	f04f 30ff 	mov.w	r0, #4294967295
 80121a8:	e0d0      	b.n	801234c <_svfiprintf_r+0x1d0>
 80121aa:	2340      	movs	r3, #64	; 0x40
 80121ac:	616b      	str	r3, [r5, #20]
 80121ae:	2300      	movs	r3, #0
 80121b0:	9309      	str	r3, [sp, #36]	; 0x24
 80121b2:	2320      	movs	r3, #32
 80121b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80121bc:	2330      	movs	r3, #48	; 0x30
 80121be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012364 <_svfiprintf_r+0x1e8>
 80121c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121c6:	f04f 0901 	mov.w	r9, #1
 80121ca:	4623      	mov	r3, r4
 80121cc:	469a      	mov	sl, r3
 80121ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121d2:	b10a      	cbz	r2, 80121d8 <_svfiprintf_r+0x5c>
 80121d4:	2a25      	cmp	r2, #37	; 0x25
 80121d6:	d1f9      	bne.n	80121cc <_svfiprintf_r+0x50>
 80121d8:	ebba 0b04 	subs.w	fp, sl, r4
 80121dc:	d00b      	beq.n	80121f6 <_svfiprintf_r+0x7a>
 80121de:	465b      	mov	r3, fp
 80121e0:	4622      	mov	r2, r4
 80121e2:	4629      	mov	r1, r5
 80121e4:	4638      	mov	r0, r7
 80121e6:	f7ff ff6f 	bl	80120c8 <__ssputs_r>
 80121ea:	3001      	adds	r0, #1
 80121ec:	f000 80a9 	beq.w	8012342 <_svfiprintf_r+0x1c6>
 80121f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121f2:	445a      	add	r2, fp
 80121f4:	9209      	str	r2, [sp, #36]	; 0x24
 80121f6:	f89a 3000 	ldrb.w	r3, [sl]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f000 80a1 	beq.w	8012342 <_svfiprintf_r+0x1c6>
 8012200:	2300      	movs	r3, #0
 8012202:	f04f 32ff 	mov.w	r2, #4294967295
 8012206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801220a:	f10a 0a01 	add.w	sl, sl, #1
 801220e:	9304      	str	r3, [sp, #16]
 8012210:	9307      	str	r3, [sp, #28]
 8012212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012216:	931a      	str	r3, [sp, #104]	; 0x68
 8012218:	4654      	mov	r4, sl
 801221a:	2205      	movs	r2, #5
 801221c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012220:	4850      	ldr	r0, [pc, #320]	; (8012364 <_svfiprintf_r+0x1e8>)
 8012222:	f7ee f85d 	bl	80002e0 <memchr>
 8012226:	9a04      	ldr	r2, [sp, #16]
 8012228:	b9d8      	cbnz	r0, 8012262 <_svfiprintf_r+0xe6>
 801222a:	06d0      	lsls	r0, r2, #27
 801222c:	bf44      	itt	mi
 801222e:	2320      	movmi	r3, #32
 8012230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012234:	0711      	lsls	r1, r2, #28
 8012236:	bf44      	itt	mi
 8012238:	232b      	movmi	r3, #43	; 0x2b
 801223a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801223e:	f89a 3000 	ldrb.w	r3, [sl]
 8012242:	2b2a      	cmp	r3, #42	; 0x2a
 8012244:	d015      	beq.n	8012272 <_svfiprintf_r+0xf6>
 8012246:	9a07      	ldr	r2, [sp, #28]
 8012248:	4654      	mov	r4, sl
 801224a:	2000      	movs	r0, #0
 801224c:	f04f 0c0a 	mov.w	ip, #10
 8012250:	4621      	mov	r1, r4
 8012252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012256:	3b30      	subs	r3, #48	; 0x30
 8012258:	2b09      	cmp	r3, #9
 801225a:	d94d      	bls.n	80122f8 <_svfiprintf_r+0x17c>
 801225c:	b1b0      	cbz	r0, 801228c <_svfiprintf_r+0x110>
 801225e:	9207      	str	r2, [sp, #28]
 8012260:	e014      	b.n	801228c <_svfiprintf_r+0x110>
 8012262:	eba0 0308 	sub.w	r3, r0, r8
 8012266:	fa09 f303 	lsl.w	r3, r9, r3
 801226a:	4313      	orrs	r3, r2
 801226c:	9304      	str	r3, [sp, #16]
 801226e:	46a2      	mov	sl, r4
 8012270:	e7d2      	b.n	8012218 <_svfiprintf_r+0x9c>
 8012272:	9b03      	ldr	r3, [sp, #12]
 8012274:	1d19      	adds	r1, r3, #4
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	9103      	str	r1, [sp, #12]
 801227a:	2b00      	cmp	r3, #0
 801227c:	bfbb      	ittet	lt
 801227e:	425b      	neglt	r3, r3
 8012280:	f042 0202 	orrlt.w	r2, r2, #2
 8012284:	9307      	strge	r3, [sp, #28]
 8012286:	9307      	strlt	r3, [sp, #28]
 8012288:	bfb8      	it	lt
 801228a:	9204      	strlt	r2, [sp, #16]
 801228c:	7823      	ldrb	r3, [r4, #0]
 801228e:	2b2e      	cmp	r3, #46	; 0x2e
 8012290:	d10c      	bne.n	80122ac <_svfiprintf_r+0x130>
 8012292:	7863      	ldrb	r3, [r4, #1]
 8012294:	2b2a      	cmp	r3, #42	; 0x2a
 8012296:	d134      	bne.n	8012302 <_svfiprintf_r+0x186>
 8012298:	9b03      	ldr	r3, [sp, #12]
 801229a:	1d1a      	adds	r2, r3, #4
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	9203      	str	r2, [sp, #12]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	bfb8      	it	lt
 80122a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80122a8:	3402      	adds	r4, #2
 80122aa:	9305      	str	r3, [sp, #20]
 80122ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012374 <_svfiprintf_r+0x1f8>
 80122b0:	7821      	ldrb	r1, [r4, #0]
 80122b2:	2203      	movs	r2, #3
 80122b4:	4650      	mov	r0, sl
 80122b6:	f7ee f813 	bl	80002e0 <memchr>
 80122ba:	b138      	cbz	r0, 80122cc <_svfiprintf_r+0x150>
 80122bc:	9b04      	ldr	r3, [sp, #16]
 80122be:	eba0 000a 	sub.w	r0, r0, sl
 80122c2:	2240      	movs	r2, #64	; 0x40
 80122c4:	4082      	lsls	r2, r0
 80122c6:	4313      	orrs	r3, r2
 80122c8:	3401      	adds	r4, #1
 80122ca:	9304      	str	r3, [sp, #16]
 80122cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d0:	4825      	ldr	r0, [pc, #148]	; (8012368 <_svfiprintf_r+0x1ec>)
 80122d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122d6:	2206      	movs	r2, #6
 80122d8:	f7ee f802 	bl	80002e0 <memchr>
 80122dc:	2800      	cmp	r0, #0
 80122de:	d038      	beq.n	8012352 <_svfiprintf_r+0x1d6>
 80122e0:	4b22      	ldr	r3, [pc, #136]	; (801236c <_svfiprintf_r+0x1f0>)
 80122e2:	bb1b      	cbnz	r3, 801232c <_svfiprintf_r+0x1b0>
 80122e4:	9b03      	ldr	r3, [sp, #12]
 80122e6:	3307      	adds	r3, #7
 80122e8:	f023 0307 	bic.w	r3, r3, #7
 80122ec:	3308      	adds	r3, #8
 80122ee:	9303      	str	r3, [sp, #12]
 80122f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f2:	4433      	add	r3, r6
 80122f4:	9309      	str	r3, [sp, #36]	; 0x24
 80122f6:	e768      	b.n	80121ca <_svfiprintf_r+0x4e>
 80122f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80122fc:	460c      	mov	r4, r1
 80122fe:	2001      	movs	r0, #1
 8012300:	e7a6      	b.n	8012250 <_svfiprintf_r+0xd4>
 8012302:	2300      	movs	r3, #0
 8012304:	3401      	adds	r4, #1
 8012306:	9305      	str	r3, [sp, #20]
 8012308:	4619      	mov	r1, r3
 801230a:	f04f 0c0a 	mov.w	ip, #10
 801230e:	4620      	mov	r0, r4
 8012310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012314:	3a30      	subs	r2, #48	; 0x30
 8012316:	2a09      	cmp	r2, #9
 8012318:	d903      	bls.n	8012322 <_svfiprintf_r+0x1a6>
 801231a:	2b00      	cmp	r3, #0
 801231c:	d0c6      	beq.n	80122ac <_svfiprintf_r+0x130>
 801231e:	9105      	str	r1, [sp, #20]
 8012320:	e7c4      	b.n	80122ac <_svfiprintf_r+0x130>
 8012322:	fb0c 2101 	mla	r1, ip, r1, r2
 8012326:	4604      	mov	r4, r0
 8012328:	2301      	movs	r3, #1
 801232a:	e7f0      	b.n	801230e <_svfiprintf_r+0x192>
 801232c:	ab03      	add	r3, sp, #12
 801232e:	9300      	str	r3, [sp, #0]
 8012330:	462a      	mov	r2, r5
 8012332:	4b0f      	ldr	r3, [pc, #60]	; (8012370 <_svfiprintf_r+0x1f4>)
 8012334:	a904      	add	r1, sp, #16
 8012336:	4638      	mov	r0, r7
 8012338:	f7fd ffaa 	bl	8010290 <_printf_float>
 801233c:	1c42      	adds	r2, r0, #1
 801233e:	4606      	mov	r6, r0
 8012340:	d1d6      	bne.n	80122f0 <_svfiprintf_r+0x174>
 8012342:	89ab      	ldrh	r3, [r5, #12]
 8012344:	065b      	lsls	r3, r3, #25
 8012346:	f53f af2d 	bmi.w	80121a4 <_svfiprintf_r+0x28>
 801234a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801234c:	b01d      	add	sp, #116	; 0x74
 801234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012352:	ab03      	add	r3, sp, #12
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	462a      	mov	r2, r5
 8012358:	4b05      	ldr	r3, [pc, #20]	; (8012370 <_svfiprintf_r+0x1f4>)
 801235a:	a904      	add	r1, sp, #16
 801235c:	4638      	mov	r0, r7
 801235e:	f7fe fa1f 	bl	80107a0 <_printf_i>
 8012362:	e7eb      	b.n	801233c <_svfiprintf_r+0x1c0>
 8012364:	08013914 	.word	0x08013914
 8012368:	0801391e 	.word	0x0801391e
 801236c:	08010291 	.word	0x08010291
 8012370:	080120c9 	.word	0x080120c9
 8012374:	0801391a 	.word	0x0801391a

08012378 <__sflush_r>:
 8012378:	898a      	ldrh	r2, [r1, #12]
 801237a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237e:	4605      	mov	r5, r0
 8012380:	0710      	lsls	r0, r2, #28
 8012382:	460c      	mov	r4, r1
 8012384:	d458      	bmi.n	8012438 <__sflush_r+0xc0>
 8012386:	684b      	ldr	r3, [r1, #4]
 8012388:	2b00      	cmp	r3, #0
 801238a:	dc05      	bgt.n	8012398 <__sflush_r+0x20>
 801238c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801238e:	2b00      	cmp	r3, #0
 8012390:	dc02      	bgt.n	8012398 <__sflush_r+0x20>
 8012392:	2000      	movs	r0, #0
 8012394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801239a:	2e00      	cmp	r6, #0
 801239c:	d0f9      	beq.n	8012392 <__sflush_r+0x1a>
 801239e:	2300      	movs	r3, #0
 80123a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123a4:	682f      	ldr	r7, [r5, #0]
 80123a6:	6a21      	ldr	r1, [r4, #32]
 80123a8:	602b      	str	r3, [r5, #0]
 80123aa:	d032      	beq.n	8012412 <__sflush_r+0x9a>
 80123ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123ae:	89a3      	ldrh	r3, [r4, #12]
 80123b0:	075a      	lsls	r2, r3, #29
 80123b2:	d505      	bpl.n	80123c0 <__sflush_r+0x48>
 80123b4:	6863      	ldr	r3, [r4, #4]
 80123b6:	1ac0      	subs	r0, r0, r3
 80123b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123ba:	b10b      	cbz	r3, 80123c0 <__sflush_r+0x48>
 80123bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123be:	1ac0      	subs	r0, r0, r3
 80123c0:	2300      	movs	r3, #0
 80123c2:	4602      	mov	r2, r0
 80123c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123c6:	6a21      	ldr	r1, [r4, #32]
 80123c8:	4628      	mov	r0, r5
 80123ca:	47b0      	blx	r6
 80123cc:	1c43      	adds	r3, r0, #1
 80123ce:	89a3      	ldrh	r3, [r4, #12]
 80123d0:	d106      	bne.n	80123e0 <__sflush_r+0x68>
 80123d2:	6829      	ldr	r1, [r5, #0]
 80123d4:	291d      	cmp	r1, #29
 80123d6:	d82b      	bhi.n	8012430 <__sflush_r+0xb8>
 80123d8:	4a29      	ldr	r2, [pc, #164]	; (8012480 <__sflush_r+0x108>)
 80123da:	410a      	asrs	r2, r1
 80123dc:	07d6      	lsls	r6, r2, #31
 80123de:	d427      	bmi.n	8012430 <__sflush_r+0xb8>
 80123e0:	2200      	movs	r2, #0
 80123e2:	6062      	str	r2, [r4, #4]
 80123e4:	04d9      	lsls	r1, r3, #19
 80123e6:	6922      	ldr	r2, [r4, #16]
 80123e8:	6022      	str	r2, [r4, #0]
 80123ea:	d504      	bpl.n	80123f6 <__sflush_r+0x7e>
 80123ec:	1c42      	adds	r2, r0, #1
 80123ee:	d101      	bne.n	80123f4 <__sflush_r+0x7c>
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	b903      	cbnz	r3, 80123f6 <__sflush_r+0x7e>
 80123f4:	6560      	str	r0, [r4, #84]	; 0x54
 80123f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123f8:	602f      	str	r7, [r5, #0]
 80123fa:	2900      	cmp	r1, #0
 80123fc:	d0c9      	beq.n	8012392 <__sflush_r+0x1a>
 80123fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012402:	4299      	cmp	r1, r3
 8012404:	d002      	beq.n	801240c <__sflush_r+0x94>
 8012406:	4628      	mov	r0, r5
 8012408:	f7ff fa96 	bl	8011938 <_free_r>
 801240c:	2000      	movs	r0, #0
 801240e:	6360      	str	r0, [r4, #52]	; 0x34
 8012410:	e7c0      	b.n	8012394 <__sflush_r+0x1c>
 8012412:	2301      	movs	r3, #1
 8012414:	4628      	mov	r0, r5
 8012416:	47b0      	blx	r6
 8012418:	1c41      	adds	r1, r0, #1
 801241a:	d1c8      	bne.n	80123ae <__sflush_r+0x36>
 801241c:	682b      	ldr	r3, [r5, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d0c5      	beq.n	80123ae <__sflush_r+0x36>
 8012422:	2b1d      	cmp	r3, #29
 8012424:	d001      	beq.n	801242a <__sflush_r+0xb2>
 8012426:	2b16      	cmp	r3, #22
 8012428:	d101      	bne.n	801242e <__sflush_r+0xb6>
 801242a:	602f      	str	r7, [r5, #0]
 801242c:	e7b1      	b.n	8012392 <__sflush_r+0x1a>
 801242e:	89a3      	ldrh	r3, [r4, #12]
 8012430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012434:	81a3      	strh	r3, [r4, #12]
 8012436:	e7ad      	b.n	8012394 <__sflush_r+0x1c>
 8012438:	690f      	ldr	r7, [r1, #16]
 801243a:	2f00      	cmp	r7, #0
 801243c:	d0a9      	beq.n	8012392 <__sflush_r+0x1a>
 801243e:	0793      	lsls	r3, r2, #30
 8012440:	680e      	ldr	r6, [r1, #0]
 8012442:	bf08      	it	eq
 8012444:	694b      	ldreq	r3, [r1, #20]
 8012446:	600f      	str	r7, [r1, #0]
 8012448:	bf18      	it	ne
 801244a:	2300      	movne	r3, #0
 801244c:	eba6 0807 	sub.w	r8, r6, r7
 8012450:	608b      	str	r3, [r1, #8]
 8012452:	f1b8 0f00 	cmp.w	r8, #0
 8012456:	dd9c      	ble.n	8012392 <__sflush_r+0x1a>
 8012458:	6a21      	ldr	r1, [r4, #32]
 801245a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801245c:	4643      	mov	r3, r8
 801245e:	463a      	mov	r2, r7
 8012460:	4628      	mov	r0, r5
 8012462:	47b0      	blx	r6
 8012464:	2800      	cmp	r0, #0
 8012466:	dc06      	bgt.n	8012476 <__sflush_r+0xfe>
 8012468:	89a3      	ldrh	r3, [r4, #12]
 801246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801246e:	81a3      	strh	r3, [r4, #12]
 8012470:	f04f 30ff 	mov.w	r0, #4294967295
 8012474:	e78e      	b.n	8012394 <__sflush_r+0x1c>
 8012476:	4407      	add	r7, r0
 8012478:	eba8 0800 	sub.w	r8, r8, r0
 801247c:	e7e9      	b.n	8012452 <__sflush_r+0xda>
 801247e:	bf00      	nop
 8012480:	dfbffffe 	.word	0xdfbffffe

08012484 <_fflush_r>:
 8012484:	b538      	push	{r3, r4, r5, lr}
 8012486:	690b      	ldr	r3, [r1, #16]
 8012488:	4605      	mov	r5, r0
 801248a:	460c      	mov	r4, r1
 801248c:	b913      	cbnz	r3, 8012494 <_fflush_r+0x10>
 801248e:	2500      	movs	r5, #0
 8012490:	4628      	mov	r0, r5
 8012492:	bd38      	pop	{r3, r4, r5, pc}
 8012494:	b118      	cbz	r0, 801249e <_fflush_r+0x1a>
 8012496:	6a03      	ldr	r3, [r0, #32]
 8012498:	b90b      	cbnz	r3, 801249e <_fflush_r+0x1a>
 801249a:	f7fe fb2f 	bl	8010afc <__sinit>
 801249e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d0f3      	beq.n	801248e <_fflush_r+0xa>
 80124a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124a8:	07d0      	lsls	r0, r2, #31
 80124aa:	d404      	bmi.n	80124b6 <_fflush_r+0x32>
 80124ac:	0599      	lsls	r1, r3, #22
 80124ae:	d402      	bmi.n	80124b6 <_fflush_r+0x32>
 80124b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124b2:	f7fe fc4a 	bl	8010d4a <__retarget_lock_acquire_recursive>
 80124b6:	4628      	mov	r0, r5
 80124b8:	4621      	mov	r1, r4
 80124ba:	f7ff ff5d 	bl	8012378 <__sflush_r>
 80124be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124c0:	07da      	lsls	r2, r3, #31
 80124c2:	4605      	mov	r5, r0
 80124c4:	d4e4      	bmi.n	8012490 <_fflush_r+0xc>
 80124c6:	89a3      	ldrh	r3, [r4, #12]
 80124c8:	059b      	lsls	r3, r3, #22
 80124ca:	d4e1      	bmi.n	8012490 <_fflush_r+0xc>
 80124cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ce:	f7fe fc3d 	bl	8010d4c <__retarget_lock_release_recursive>
 80124d2:	e7dd      	b.n	8012490 <_fflush_r+0xc>

080124d4 <memmove>:
 80124d4:	4288      	cmp	r0, r1
 80124d6:	b510      	push	{r4, lr}
 80124d8:	eb01 0402 	add.w	r4, r1, r2
 80124dc:	d902      	bls.n	80124e4 <memmove+0x10>
 80124de:	4284      	cmp	r4, r0
 80124e0:	4623      	mov	r3, r4
 80124e2:	d807      	bhi.n	80124f4 <memmove+0x20>
 80124e4:	1e43      	subs	r3, r0, #1
 80124e6:	42a1      	cmp	r1, r4
 80124e8:	d008      	beq.n	80124fc <memmove+0x28>
 80124ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124f2:	e7f8      	b.n	80124e6 <memmove+0x12>
 80124f4:	4402      	add	r2, r0
 80124f6:	4601      	mov	r1, r0
 80124f8:	428a      	cmp	r2, r1
 80124fa:	d100      	bne.n	80124fe <memmove+0x2a>
 80124fc:	bd10      	pop	{r4, pc}
 80124fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012506:	e7f7      	b.n	80124f8 <memmove+0x24>

08012508 <memcpy>:
 8012508:	440a      	add	r2, r1
 801250a:	4291      	cmp	r1, r2
 801250c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012510:	d100      	bne.n	8012514 <memcpy+0xc>
 8012512:	4770      	bx	lr
 8012514:	b510      	push	{r4, lr}
 8012516:	f811 4b01 	ldrb.w	r4, [r1], #1
 801251a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801251e:	4291      	cmp	r1, r2
 8012520:	d1f9      	bne.n	8012516 <memcpy+0xe>
 8012522:	bd10      	pop	{r4, pc}

08012524 <__assert_func>:
 8012524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012526:	4614      	mov	r4, r2
 8012528:	461a      	mov	r2, r3
 801252a:	4b09      	ldr	r3, [pc, #36]	; (8012550 <__assert_func+0x2c>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4605      	mov	r5, r0
 8012530:	68d8      	ldr	r0, [r3, #12]
 8012532:	b14c      	cbz	r4, 8012548 <__assert_func+0x24>
 8012534:	4b07      	ldr	r3, [pc, #28]	; (8012554 <__assert_func+0x30>)
 8012536:	9100      	str	r1, [sp, #0]
 8012538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801253c:	4906      	ldr	r1, [pc, #24]	; (8012558 <__assert_func+0x34>)
 801253e:	462b      	mov	r3, r5
 8012540:	f000 f872 	bl	8012628 <fiprintf>
 8012544:	f000 f882 	bl	801264c <abort>
 8012548:	4b04      	ldr	r3, [pc, #16]	; (801255c <__assert_func+0x38>)
 801254a:	461c      	mov	r4, r3
 801254c:	e7f3      	b.n	8012536 <__assert_func+0x12>
 801254e:	bf00      	nop
 8012550:	2400015c 	.word	0x2400015c
 8012554:	0801392f 	.word	0x0801392f
 8012558:	0801393c 	.word	0x0801393c
 801255c:	0801396a 	.word	0x0801396a

08012560 <_calloc_r>:
 8012560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012562:	fba1 2402 	umull	r2, r4, r1, r2
 8012566:	b94c      	cbnz	r4, 801257c <_calloc_r+0x1c>
 8012568:	4611      	mov	r1, r2
 801256a:	9201      	str	r2, [sp, #4]
 801256c:	f7fd fd72 	bl	8010054 <_malloc_r>
 8012570:	9a01      	ldr	r2, [sp, #4]
 8012572:	4605      	mov	r5, r0
 8012574:	b930      	cbnz	r0, 8012584 <_calloc_r+0x24>
 8012576:	4628      	mov	r0, r5
 8012578:	b003      	add	sp, #12
 801257a:	bd30      	pop	{r4, r5, pc}
 801257c:	220c      	movs	r2, #12
 801257e:	6002      	str	r2, [r0, #0]
 8012580:	2500      	movs	r5, #0
 8012582:	e7f8      	b.n	8012576 <_calloc_r+0x16>
 8012584:	4621      	mov	r1, r4
 8012586:	f7fe fb52 	bl	8010c2e <memset>
 801258a:	e7f4      	b.n	8012576 <_calloc_r+0x16>

0801258c <__ascii_mbtowc>:
 801258c:	b082      	sub	sp, #8
 801258e:	b901      	cbnz	r1, 8012592 <__ascii_mbtowc+0x6>
 8012590:	a901      	add	r1, sp, #4
 8012592:	b142      	cbz	r2, 80125a6 <__ascii_mbtowc+0x1a>
 8012594:	b14b      	cbz	r3, 80125aa <__ascii_mbtowc+0x1e>
 8012596:	7813      	ldrb	r3, [r2, #0]
 8012598:	600b      	str	r3, [r1, #0]
 801259a:	7812      	ldrb	r2, [r2, #0]
 801259c:	1e10      	subs	r0, r2, #0
 801259e:	bf18      	it	ne
 80125a0:	2001      	movne	r0, #1
 80125a2:	b002      	add	sp, #8
 80125a4:	4770      	bx	lr
 80125a6:	4610      	mov	r0, r2
 80125a8:	e7fb      	b.n	80125a2 <__ascii_mbtowc+0x16>
 80125aa:	f06f 0001 	mvn.w	r0, #1
 80125ae:	e7f8      	b.n	80125a2 <__ascii_mbtowc+0x16>

080125b0 <_realloc_r>:
 80125b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b4:	4680      	mov	r8, r0
 80125b6:	4614      	mov	r4, r2
 80125b8:	460e      	mov	r6, r1
 80125ba:	b921      	cbnz	r1, 80125c6 <_realloc_r+0x16>
 80125bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125c0:	4611      	mov	r1, r2
 80125c2:	f7fd bd47 	b.w	8010054 <_malloc_r>
 80125c6:	b92a      	cbnz	r2, 80125d4 <_realloc_r+0x24>
 80125c8:	f7ff f9b6 	bl	8011938 <_free_r>
 80125cc:	4625      	mov	r5, r4
 80125ce:	4628      	mov	r0, r5
 80125d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d4:	f000 f841 	bl	801265a <_malloc_usable_size_r>
 80125d8:	4284      	cmp	r4, r0
 80125da:	4607      	mov	r7, r0
 80125dc:	d802      	bhi.n	80125e4 <_realloc_r+0x34>
 80125de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125e2:	d812      	bhi.n	801260a <_realloc_r+0x5a>
 80125e4:	4621      	mov	r1, r4
 80125e6:	4640      	mov	r0, r8
 80125e8:	f7fd fd34 	bl	8010054 <_malloc_r>
 80125ec:	4605      	mov	r5, r0
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d0ed      	beq.n	80125ce <_realloc_r+0x1e>
 80125f2:	42bc      	cmp	r4, r7
 80125f4:	4622      	mov	r2, r4
 80125f6:	4631      	mov	r1, r6
 80125f8:	bf28      	it	cs
 80125fa:	463a      	movcs	r2, r7
 80125fc:	f7ff ff84 	bl	8012508 <memcpy>
 8012600:	4631      	mov	r1, r6
 8012602:	4640      	mov	r0, r8
 8012604:	f7ff f998 	bl	8011938 <_free_r>
 8012608:	e7e1      	b.n	80125ce <_realloc_r+0x1e>
 801260a:	4635      	mov	r5, r6
 801260c:	e7df      	b.n	80125ce <_realloc_r+0x1e>

0801260e <__ascii_wctomb>:
 801260e:	b149      	cbz	r1, 8012624 <__ascii_wctomb+0x16>
 8012610:	2aff      	cmp	r2, #255	; 0xff
 8012612:	bf85      	ittet	hi
 8012614:	238a      	movhi	r3, #138	; 0x8a
 8012616:	6003      	strhi	r3, [r0, #0]
 8012618:	700a      	strbls	r2, [r1, #0]
 801261a:	f04f 30ff 	movhi.w	r0, #4294967295
 801261e:	bf98      	it	ls
 8012620:	2001      	movls	r0, #1
 8012622:	4770      	bx	lr
 8012624:	4608      	mov	r0, r1
 8012626:	4770      	bx	lr

08012628 <fiprintf>:
 8012628:	b40e      	push	{r1, r2, r3}
 801262a:	b503      	push	{r0, r1, lr}
 801262c:	4601      	mov	r1, r0
 801262e:	ab03      	add	r3, sp, #12
 8012630:	4805      	ldr	r0, [pc, #20]	; (8012648 <fiprintf+0x20>)
 8012632:	f853 2b04 	ldr.w	r2, [r3], #4
 8012636:	6800      	ldr	r0, [r0, #0]
 8012638:	9301      	str	r3, [sp, #4]
 801263a:	f000 f83f 	bl	80126bc <_vfiprintf_r>
 801263e:	b002      	add	sp, #8
 8012640:	f85d eb04 	ldr.w	lr, [sp], #4
 8012644:	b003      	add	sp, #12
 8012646:	4770      	bx	lr
 8012648:	2400015c 	.word	0x2400015c

0801264c <abort>:
 801264c:	b508      	push	{r3, lr}
 801264e:	2006      	movs	r0, #6
 8012650:	f000 fa0c 	bl	8012a6c <raise>
 8012654:	2001      	movs	r0, #1
 8012656:	f7ee fd53 	bl	8001100 <_exit>

0801265a <_malloc_usable_size_r>:
 801265a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801265e:	1f18      	subs	r0, r3, #4
 8012660:	2b00      	cmp	r3, #0
 8012662:	bfbc      	itt	lt
 8012664:	580b      	ldrlt	r3, [r1, r0]
 8012666:	18c0      	addlt	r0, r0, r3
 8012668:	4770      	bx	lr

0801266a <__sfputc_r>:
 801266a:	6893      	ldr	r3, [r2, #8]
 801266c:	3b01      	subs	r3, #1
 801266e:	2b00      	cmp	r3, #0
 8012670:	b410      	push	{r4}
 8012672:	6093      	str	r3, [r2, #8]
 8012674:	da08      	bge.n	8012688 <__sfputc_r+0x1e>
 8012676:	6994      	ldr	r4, [r2, #24]
 8012678:	42a3      	cmp	r3, r4
 801267a:	db01      	blt.n	8012680 <__sfputc_r+0x16>
 801267c:	290a      	cmp	r1, #10
 801267e:	d103      	bne.n	8012688 <__sfputc_r+0x1e>
 8012680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012684:	f000 b934 	b.w	80128f0 <__swbuf_r>
 8012688:	6813      	ldr	r3, [r2, #0]
 801268a:	1c58      	adds	r0, r3, #1
 801268c:	6010      	str	r0, [r2, #0]
 801268e:	7019      	strb	r1, [r3, #0]
 8012690:	4608      	mov	r0, r1
 8012692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012696:	4770      	bx	lr

08012698 <__sfputs_r>:
 8012698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801269a:	4606      	mov	r6, r0
 801269c:	460f      	mov	r7, r1
 801269e:	4614      	mov	r4, r2
 80126a0:	18d5      	adds	r5, r2, r3
 80126a2:	42ac      	cmp	r4, r5
 80126a4:	d101      	bne.n	80126aa <__sfputs_r+0x12>
 80126a6:	2000      	movs	r0, #0
 80126a8:	e007      	b.n	80126ba <__sfputs_r+0x22>
 80126aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126ae:	463a      	mov	r2, r7
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff ffda 	bl	801266a <__sfputc_r>
 80126b6:	1c43      	adds	r3, r0, #1
 80126b8:	d1f3      	bne.n	80126a2 <__sfputs_r+0xa>
 80126ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080126bc <_vfiprintf_r>:
 80126bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c0:	460d      	mov	r5, r1
 80126c2:	b09d      	sub	sp, #116	; 0x74
 80126c4:	4614      	mov	r4, r2
 80126c6:	4698      	mov	r8, r3
 80126c8:	4606      	mov	r6, r0
 80126ca:	b118      	cbz	r0, 80126d4 <_vfiprintf_r+0x18>
 80126cc:	6a03      	ldr	r3, [r0, #32]
 80126ce:	b90b      	cbnz	r3, 80126d4 <_vfiprintf_r+0x18>
 80126d0:	f7fe fa14 	bl	8010afc <__sinit>
 80126d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126d6:	07d9      	lsls	r1, r3, #31
 80126d8:	d405      	bmi.n	80126e6 <_vfiprintf_r+0x2a>
 80126da:	89ab      	ldrh	r3, [r5, #12]
 80126dc:	059a      	lsls	r2, r3, #22
 80126de:	d402      	bmi.n	80126e6 <_vfiprintf_r+0x2a>
 80126e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126e2:	f7fe fb32 	bl	8010d4a <__retarget_lock_acquire_recursive>
 80126e6:	89ab      	ldrh	r3, [r5, #12]
 80126e8:	071b      	lsls	r3, r3, #28
 80126ea:	d501      	bpl.n	80126f0 <_vfiprintf_r+0x34>
 80126ec:	692b      	ldr	r3, [r5, #16]
 80126ee:	b99b      	cbnz	r3, 8012718 <_vfiprintf_r+0x5c>
 80126f0:	4629      	mov	r1, r5
 80126f2:	4630      	mov	r0, r6
 80126f4:	f000 f93a 	bl	801296c <__swsetup_r>
 80126f8:	b170      	cbz	r0, 8012718 <_vfiprintf_r+0x5c>
 80126fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126fc:	07dc      	lsls	r4, r3, #31
 80126fe:	d504      	bpl.n	801270a <_vfiprintf_r+0x4e>
 8012700:	f04f 30ff 	mov.w	r0, #4294967295
 8012704:	b01d      	add	sp, #116	; 0x74
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801270a:	89ab      	ldrh	r3, [r5, #12]
 801270c:	0598      	lsls	r0, r3, #22
 801270e:	d4f7      	bmi.n	8012700 <_vfiprintf_r+0x44>
 8012710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012712:	f7fe fb1b 	bl	8010d4c <__retarget_lock_release_recursive>
 8012716:	e7f3      	b.n	8012700 <_vfiprintf_r+0x44>
 8012718:	2300      	movs	r3, #0
 801271a:	9309      	str	r3, [sp, #36]	; 0x24
 801271c:	2320      	movs	r3, #32
 801271e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012722:	f8cd 800c 	str.w	r8, [sp, #12]
 8012726:	2330      	movs	r3, #48	; 0x30
 8012728:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80128dc <_vfiprintf_r+0x220>
 801272c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012730:	f04f 0901 	mov.w	r9, #1
 8012734:	4623      	mov	r3, r4
 8012736:	469a      	mov	sl, r3
 8012738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801273c:	b10a      	cbz	r2, 8012742 <_vfiprintf_r+0x86>
 801273e:	2a25      	cmp	r2, #37	; 0x25
 8012740:	d1f9      	bne.n	8012736 <_vfiprintf_r+0x7a>
 8012742:	ebba 0b04 	subs.w	fp, sl, r4
 8012746:	d00b      	beq.n	8012760 <_vfiprintf_r+0xa4>
 8012748:	465b      	mov	r3, fp
 801274a:	4622      	mov	r2, r4
 801274c:	4629      	mov	r1, r5
 801274e:	4630      	mov	r0, r6
 8012750:	f7ff ffa2 	bl	8012698 <__sfputs_r>
 8012754:	3001      	adds	r0, #1
 8012756:	f000 80a9 	beq.w	80128ac <_vfiprintf_r+0x1f0>
 801275a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801275c:	445a      	add	r2, fp
 801275e:	9209      	str	r2, [sp, #36]	; 0x24
 8012760:	f89a 3000 	ldrb.w	r3, [sl]
 8012764:	2b00      	cmp	r3, #0
 8012766:	f000 80a1 	beq.w	80128ac <_vfiprintf_r+0x1f0>
 801276a:	2300      	movs	r3, #0
 801276c:	f04f 32ff 	mov.w	r2, #4294967295
 8012770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012774:	f10a 0a01 	add.w	sl, sl, #1
 8012778:	9304      	str	r3, [sp, #16]
 801277a:	9307      	str	r3, [sp, #28]
 801277c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012780:	931a      	str	r3, [sp, #104]	; 0x68
 8012782:	4654      	mov	r4, sl
 8012784:	2205      	movs	r2, #5
 8012786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801278a:	4854      	ldr	r0, [pc, #336]	; (80128dc <_vfiprintf_r+0x220>)
 801278c:	f7ed fda8 	bl	80002e0 <memchr>
 8012790:	9a04      	ldr	r2, [sp, #16]
 8012792:	b9d8      	cbnz	r0, 80127cc <_vfiprintf_r+0x110>
 8012794:	06d1      	lsls	r1, r2, #27
 8012796:	bf44      	itt	mi
 8012798:	2320      	movmi	r3, #32
 801279a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801279e:	0713      	lsls	r3, r2, #28
 80127a0:	bf44      	itt	mi
 80127a2:	232b      	movmi	r3, #43	; 0x2b
 80127a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127a8:	f89a 3000 	ldrb.w	r3, [sl]
 80127ac:	2b2a      	cmp	r3, #42	; 0x2a
 80127ae:	d015      	beq.n	80127dc <_vfiprintf_r+0x120>
 80127b0:	9a07      	ldr	r2, [sp, #28]
 80127b2:	4654      	mov	r4, sl
 80127b4:	2000      	movs	r0, #0
 80127b6:	f04f 0c0a 	mov.w	ip, #10
 80127ba:	4621      	mov	r1, r4
 80127bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127c0:	3b30      	subs	r3, #48	; 0x30
 80127c2:	2b09      	cmp	r3, #9
 80127c4:	d94d      	bls.n	8012862 <_vfiprintf_r+0x1a6>
 80127c6:	b1b0      	cbz	r0, 80127f6 <_vfiprintf_r+0x13a>
 80127c8:	9207      	str	r2, [sp, #28]
 80127ca:	e014      	b.n	80127f6 <_vfiprintf_r+0x13a>
 80127cc:	eba0 0308 	sub.w	r3, r0, r8
 80127d0:	fa09 f303 	lsl.w	r3, r9, r3
 80127d4:	4313      	orrs	r3, r2
 80127d6:	9304      	str	r3, [sp, #16]
 80127d8:	46a2      	mov	sl, r4
 80127da:	e7d2      	b.n	8012782 <_vfiprintf_r+0xc6>
 80127dc:	9b03      	ldr	r3, [sp, #12]
 80127de:	1d19      	adds	r1, r3, #4
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	9103      	str	r1, [sp, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	bfbb      	ittet	lt
 80127e8:	425b      	neglt	r3, r3
 80127ea:	f042 0202 	orrlt.w	r2, r2, #2
 80127ee:	9307      	strge	r3, [sp, #28]
 80127f0:	9307      	strlt	r3, [sp, #28]
 80127f2:	bfb8      	it	lt
 80127f4:	9204      	strlt	r2, [sp, #16]
 80127f6:	7823      	ldrb	r3, [r4, #0]
 80127f8:	2b2e      	cmp	r3, #46	; 0x2e
 80127fa:	d10c      	bne.n	8012816 <_vfiprintf_r+0x15a>
 80127fc:	7863      	ldrb	r3, [r4, #1]
 80127fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012800:	d134      	bne.n	801286c <_vfiprintf_r+0x1b0>
 8012802:	9b03      	ldr	r3, [sp, #12]
 8012804:	1d1a      	adds	r2, r3, #4
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	9203      	str	r2, [sp, #12]
 801280a:	2b00      	cmp	r3, #0
 801280c:	bfb8      	it	lt
 801280e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012812:	3402      	adds	r4, #2
 8012814:	9305      	str	r3, [sp, #20]
 8012816:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80128ec <_vfiprintf_r+0x230>
 801281a:	7821      	ldrb	r1, [r4, #0]
 801281c:	2203      	movs	r2, #3
 801281e:	4650      	mov	r0, sl
 8012820:	f7ed fd5e 	bl	80002e0 <memchr>
 8012824:	b138      	cbz	r0, 8012836 <_vfiprintf_r+0x17a>
 8012826:	9b04      	ldr	r3, [sp, #16]
 8012828:	eba0 000a 	sub.w	r0, r0, sl
 801282c:	2240      	movs	r2, #64	; 0x40
 801282e:	4082      	lsls	r2, r0
 8012830:	4313      	orrs	r3, r2
 8012832:	3401      	adds	r4, #1
 8012834:	9304      	str	r3, [sp, #16]
 8012836:	f814 1b01 	ldrb.w	r1, [r4], #1
 801283a:	4829      	ldr	r0, [pc, #164]	; (80128e0 <_vfiprintf_r+0x224>)
 801283c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012840:	2206      	movs	r2, #6
 8012842:	f7ed fd4d 	bl	80002e0 <memchr>
 8012846:	2800      	cmp	r0, #0
 8012848:	d03f      	beq.n	80128ca <_vfiprintf_r+0x20e>
 801284a:	4b26      	ldr	r3, [pc, #152]	; (80128e4 <_vfiprintf_r+0x228>)
 801284c:	bb1b      	cbnz	r3, 8012896 <_vfiprintf_r+0x1da>
 801284e:	9b03      	ldr	r3, [sp, #12]
 8012850:	3307      	adds	r3, #7
 8012852:	f023 0307 	bic.w	r3, r3, #7
 8012856:	3308      	adds	r3, #8
 8012858:	9303      	str	r3, [sp, #12]
 801285a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801285c:	443b      	add	r3, r7
 801285e:	9309      	str	r3, [sp, #36]	; 0x24
 8012860:	e768      	b.n	8012734 <_vfiprintf_r+0x78>
 8012862:	fb0c 3202 	mla	r2, ip, r2, r3
 8012866:	460c      	mov	r4, r1
 8012868:	2001      	movs	r0, #1
 801286a:	e7a6      	b.n	80127ba <_vfiprintf_r+0xfe>
 801286c:	2300      	movs	r3, #0
 801286e:	3401      	adds	r4, #1
 8012870:	9305      	str	r3, [sp, #20]
 8012872:	4619      	mov	r1, r3
 8012874:	f04f 0c0a 	mov.w	ip, #10
 8012878:	4620      	mov	r0, r4
 801287a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801287e:	3a30      	subs	r2, #48	; 0x30
 8012880:	2a09      	cmp	r2, #9
 8012882:	d903      	bls.n	801288c <_vfiprintf_r+0x1d0>
 8012884:	2b00      	cmp	r3, #0
 8012886:	d0c6      	beq.n	8012816 <_vfiprintf_r+0x15a>
 8012888:	9105      	str	r1, [sp, #20]
 801288a:	e7c4      	b.n	8012816 <_vfiprintf_r+0x15a>
 801288c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012890:	4604      	mov	r4, r0
 8012892:	2301      	movs	r3, #1
 8012894:	e7f0      	b.n	8012878 <_vfiprintf_r+0x1bc>
 8012896:	ab03      	add	r3, sp, #12
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	462a      	mov	r2, r5
 801289c:	4b12      	ldr	r3, [pc, #72]	; (80128e8 <_vfiprintf_r+0x22c>)
 801289e:	a904      	add	r1, sp, #16
 80128a0:	4630      	mov	r0, r6
 80128a2:	f7fd fcf5 	bl	8010290 <_printf_float>
 80128a6:	4607      	mov	r7, r0
 80128a8:	1c78      	adds	r0, r7, #1
 80128aa:	d1d6      	bne.n	801285a <_vfiprintf_r+0x19e>
 80128ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128ae:	07d9      	lsls	r1, r3, #31
 80128b0:	d405      	bmi.n	80128be <_vfiprintf_r+0x202>
 80128b2:	89ab      	ldrh	r3, [r5, #12]
 80128b4:	059a      	lsls	r2, r3, #22
 80128b6:	d402      	bmi.n	80128be <_vfiprintf_r+0x202>
 80128b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128ba:	f7fe fa47 	bl	8010d4c <__retarget_lock_release_recursive>
 80128be:	89ab      	ldrh	r3, [r5, #12]
 80128c0:	065b      	lsls	r3, r3, #25
 80128c2:	f53f af1d 	bmi.w	8012700 <_vfiprintf_r+0x44>
 80128c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128c8:	e71c      	b.n	8012704 <_vfiprintf_r+0x48>
 80128ca:	ab03      	add	r3, sp, #12
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	462a      	mov	r2, r5
 80128d0:	4b05      	ldr	r3, [pc, #20]	; (80128e8 <_vfiprintf_r+0x22c>)
 80128d2:	a904      	add	r1, sp, #16
 80128d4:	4630      	mov	r0, r6
 80128d6:	f7fd ff63 	bl	80107a0 <_printf_i>
 80128da:	e7e4      	b.n	80128a6 <_vfiprintf_r+0x1ea>
 80128dc:	08013914 	.word	0x08013914
 80128e0:	0801391e 	.word	0x0801391e
 80128e4:	08010291 	.word	0x08010291
 80128e8:	08012699 	.word	0x08012699
 80128ec:	0801391a 	.word	0x0801391a

080128f0 <__swbuf_r>:
 80128f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f2:	460e      	mov	r6, r1
 80128f4:	4614      	mov	r4, r2
 80128f6:	4605      	mov	r5, r0
 80128f8:	b118      	cbz	r0, 8012902 <__swbuf_r+0x12>
 80128fa:	6a03      	ldr	r3, [r0, #32]
 80128fc:	b90b      	cbnz	r3, 8012902 <__swbuf_r+0x12>
 80128fe:	f7fe f8fd 	bl	8010afc <__sinit>
 8012902:	69a3      	ldr	r3, [r4, #24]
 8012904:	60a3      	str	r3, [r4, #8]
 8012906:	89a3      	ldrh	r3, [r4, #12]
 8012908:	071a      	lsls	r2, r3, #28
 801290a:	d525      	bpl.n	8012958 <__swbuf_r+0x68>
 801290c:	6923      	ldr	r3, [r4, #16]
 801290e:	b31b      	cbz	r3, 8012958 <__swbuf_r+0x68>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	6922      	ldr	r2, [r4, #16]
 8012914:	1a98      	subs	r0, r3, r2
 8012916:	6963      	ldr	r3, [r4, #20]
 8012918:	b2f6      	uxtb	r6, r6
 801291a:	4283      	cmp	r3, r0
 801291c:	4637      	mov	r7, r6
 801291e:	dc04      	bgt.n	801292a <__swbuf_r+0x3a>
 8012920:	4621      	mov	r1, r4
 8012922:	4628      	mov	r0, r5
 8012924:	f7ff fdae 	bl	8012484 <_fflush_r>
 8012928:	b9e0      	cbnz	r0, 8012964 <__swbuf_r+0x74>
 801292a:	68a3      	ldr	r3, [r4, #8]
 801292c:	3b01      	subs	r3, #1
 801292e:	60a3      	str	r3, [r4, #8]
 8012930:	6823      	ldr	r3, [r4, #0]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	6022      	str	r2, [r4, #0]
 8012936:	701e      	strb	r6, [r3, #0]
 8012938:	6962      	ldr	r2, [r4, #20]
 801293a:	1c43      	adds	r3, r0, #1
 801293c:	429a      	cmp	r2, r3
 801293e:	d004      	beq.n	801294a <__swbuf_r+0x5a>
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	07db      	lsls	r3, r3, #31
 8012944:	d506      	bpl.n	8012954 <__swbuf_r+0x64>
 8012946:	2e0a      	cmp	r6, #10
 8012948:	d104      	bne.n	8012954 <__swbuf_r+0x64>
 801294a:	4621      	mov	r1, r4
 801294c:	4628      	mov	r0, r5
 801294e:	f7ff fd99 	bl	8012484 <_fflush_r>
 8012952:	b938      	cbnz	r0, 8012964 <__swbuf_r+0x74>
 8012954:	4638      	mov	r0, r7
 8012956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012958:	4621      	mov	r1, r4
 801295a:	4628      	mov	r0, r5
 801295c:	f000 f806 	bl	801296c <__swsetup_r>
 8012960:	2800      	cmp	r0, #0
 8012962:	d0d5      	beq.n	8012910 <__swbuf_r+0x20>
 8012964:	f04f 37ff 	mov.w	r7, #4294967295
 8012968:	e7f4      	b.n	8012954 <__swbuf_r+0x64>
	...

0801296c <__swsetup_r>:
 801296c:	b538      	push	{r3, r4, r5, lr}
 801296e:	4b2a      	ldr	r3, [pc, #168]	; (8012a18 <__swsetup_r+0xac>)
 8012970:	4605      	mov	r5, r0
 8012972:	6818      	ldr	r0, [r3, #0]
 8012974:	460c      	mov	r4, r1
 8012976:	b118      	cbz	r0, 8012980 <__swsetup_r+0x14>
 8012978:	6a03      	ldr	r3, [r0, #32]
 801297a:	b90b      	cbnz	r3, 8012980 <__swsetup_r+0x14>
 801297c:	f7fe f8be 	bl	8010afc <__sinit>
 8012980:	89a3      	ldrh	r3, [r4, #12]
 8012982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012986:	0718      	lsls	r0, r3, #28
 8012988:	d422      	bmi.n	80129d0 <__swsetup_r+0x64>
 801298a:	06d9      	lsls	r1, r3, #27
 801298c:	d407      	bmi.n	801299e <__swsetup_r+0x32>
 801298e:	2309      	movs	r3, #9
 8012990:	602b      	str	r3, [r5, #0]
 8012992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012996:	81a3      	strh	r3, [r4, #12]
 8012998:	f04f 30ff 	mov.w	r0, #4294967295
 801299c:	e034      	b.n	8012a08 <__swsetup_r+0x9c>
 801299e:	0758      	lsls	r0, r3, #29
 80129a0:	d512      	bpl.n	80129c8 <__swsetup_r+0x5c>
 80129a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129a4:	b141      	cbz	r1, 80129b8 <__swsetup_r+0x4c>
 80129a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129aa:	4299      	cmp	r1, r3
 80129ac:	d002      	beq.n	80129b4 <__swsetup_r+0x48>
 80129ae:	4628      	mov	r0, r5
 80129b0:	f7fe ffc2 	bl	8011938 <_free_r>
 80129b4:	2300      	movs	r3, #0
 80129b6:	6363      	str	r3, [r4, #52]	; 0x34
 80129b8:	89a3      	ldrh	r3, [r4, #12]
 80129ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80129be:	81a3      	strh	r3, [r4, #12]
 80129c0:	2300      	movs	r3, #0
 80129c2:	6063      	str	r3, [r4, #4]
 80129c4:	6923      	ldr	r3, [r4, #16]
 80129c6:	6023      	str	r3, [r4, #0]
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	f043 0308 	orr.w	r3, r3, #8
 80129ce:	81a3      	strh	r3, [r4, #12]
 80129d0:	6923      	ldr	r3, [r4, #16]
 80129d2:	b94b      	cbnz	r3, 80129e8 <__swsetup_r+0x7c>
 80129d4:	89a3      	ldrh	r3, [r4, #12]
 80129d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80129da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129de:	d003      	beq.n	80129e8 <__swsetup_r+0x7c>
 80129e0:	4621      	mov	r1, r4
 80129e2:	4628      	mov	r0, r5
 80129e4:	f000 f884 	bl	8012af0 <__smakebuf_r>
 80129e8:	89a0      	ldrh	r0, [r4, #12]
 80129ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129ee:	f010 0301 	ands.w	r3, r0, #1
 80129f2:	d00a      	beq.n	8012a0a <__swsetup_r+0x9e>
 80129f4:	2300      	movs	r3, #0
 80129f6:	60a3      	str	r3, [r4, #8]
 80129f8:	6963      	ldr	r3, [r4, #20]
 80129fa:	425b      	negs	r3, r3
 80129fc:	61a3      	str	r3, [r4, #24]
 80129fe:	6923      	ldr	r3, [r4, #16]
 8012a00:	b943      	cbnz	r3, 8012a14 <__swsetup_r+0xa8>
 8012a02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012a06:	d1c4      	bne.n	8012992 <__swsetup_r+0x26>
 8012a08:	bd38      	pop	{r3, r4, r5, pc}
 8012a0a:	0781      	lsls	r1, r0, #30
 8012a0c:	bf58      	it	pl
 8012a0e:	6963      	ldrpl	r3, [r4, #20]
 8012a10:	60a3      	str	r3, [r4, #8]
 8012a12:	e7f4      	b.n	80129fe <__swsetup_r+0x92>
 8012a14:	2000      	movs	r0, #0
 8012a16:	e7f7      	b.n	8012a08 <__swsetup_r+0x9c>
 8012a18:	2400015c 	.word	0x2400015c

08012a1c <_raise_r>:
 8012a1c:	291f      	cmp	r1, #31
 8012a1e:	b538      	push	{r3, r4, r5, lr}
 8012a20:	4604      	mov	r4, r0
 8012a22:	460d      	mov	r5, r1
 8012a24:	d904      	bls.n	8012a30 <_raise_r+0x14>
 8012a26:	2316      	movs	r3, #22
 8012a28:	6003      	str	r3, [r0, #0]
 8012a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012a32:	b112      	cbz	r2, 8012a3a <_raise_r+0x1e>
 8012a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a38:	b94b      	cbnz	r3, 8012a4e <_raise_r+0x32>
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f000 f830 	bl	8012aa0 <_getpid_r>
 8012a40:	462a      	mov	r2, r5
 8012a42:	4601      	mov	r1, r0
 8012a44:	4620      	mov	r0, r4
 8012a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a4a:	f000 b817 	b.w	8012a7c <_kill_r>
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	d00a      	beq.n	8012a68 <_raise_r+0x4c>
 8012a52:	1c59      	adds	r1, r3, #1
 8012a54:	d103      	bne.n	8012a5e <_raise_r+0x42>
 8012a56:	2316      	movs	r3, #22
 8012a58:	6003      	str	r3, [r0, #0]
 8012a5a:	2001      	movs	r0, #1
 8012a5c:	e7e7      	b.n	8012a2e <_raise_r+0x12>
 8012a5e:	2400      	movs	r4, #0
 8012a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a64:	4628      	mov	r0, r5
 8012a66:	4798      	blx	r3
 8012a68:	2000      	movs	r0, #0
 8012a6a:	e7e0      	b.n	8012a2e <_raise_r+0x12>

08012a6c <raise>:
 8012a6c:	4b02      	ldr	r3, [pc, #8]	; (8012a78 <raise+0xc>)
 8012a6e:	4601      	mov	r1, r0
 8012a70:	6818      	ldr	r0, [r3, #0]
 8012a72:	f7ff bfd3 	b.w	8012a1c <_raise_r>
 8012a76:	bf00      	nop
 8012a78:	2400015c 	.word	0x2400015c

08012a7c <_kill_r>:
 8012a7c:	b538      	push	{r3, r4, r5, lr}
 8012a7e:	4d07      	ldr	r5, [pc, #28]	; (8012a9c <_kill_r+0x20>)
 8012a80:	2300      	movs	r3, #0
 8012a82:	4604      	mov	r4, r0
 8012a84:	4608      	mov	r0, r1
 8012a86:	4611      	mov	r1, r2
 8012a88:	602b      	str	r3, [r5, #0]
 8012a8a:	f7ee fb29 	bl	80010e0 <_kill>
 8012a8e:	1c43      	adds	r3, r0, #1
 8012a90:	d102      	bne.n	8012a98 <_kill_r+0x1c>
 8012a92:	682b      	ldr	r3, [r5, #0]
 8012a94:	b103      	cbz	r3, 8012a98 <_kill_r+0x1c>
 8012a96:	6023      	str	r3, [r4, #0]
 8012a98:	bd38      	pop	{r3, r4, r5, pc}
 8012a9a:	bf00      	nop
 8012a9c:	24002280 	.word	0x24002280

08012aa0 <_getpid_r>:
 8012aa0:	f7ee bb16 	b.w	80010d0 <_getpid>

08012aa4 <__swhatbuf_r>:
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	460c      	mov	r4, r1
 8012aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aac:	2900      	cmp	r1, #0
 8012aae:	b096      	sub	sp, #88	; 0x58
 8012ab0:	4615      	mov	r5, r2
 8012ab2:	461e      	mov	r6, r3
 8012ab4:	da0d      	bge.n	8012ad2 <__swhatbuf_r+0x2e>
 8012ab6:	89a3      	ldrh	r3, [r4, #12]
 8012ab8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012abc:	f04f 0100 	mov.w	r1, #0
 8012ac0:	bf0c      	ite	eq
 8012ac2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012ac6:	2340      	movne	r3, #64	; 0x40
 8012ac8:	2000      	movs	r0, #0
 8012aca:	6031      	str	r1, [r6, #0]
 8012acc:	602b      	str	r3, [r5, #0]
 8012ace:	b016      	add	sp, #88	; 0x58
 8012ad0:	bd70      	pop	{r4, r5, r6, pc}
 8012ad2:	466a      	mov	r2, sp
 8012ad4:	f000 f848 	bl	8012b68 <_fstat_r>
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	dbec      	blt.n	8012ab6 <__swhatbuf_r+0x12>
 8012adc:	9901      	ldr	r1, [sp, #4]
 8012ade:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012ae2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012ae6:	4259      	negs	r1, r3
 8012ae8:	4159      	adcs	r1, r3
 8012aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012aee:	e7eb      	b.n	8012ac8 <__swhatbuf_r+0x24>

08012af0 <__smakebuf_r>:
 8012af0:	898b      	ldrh	r3, [r1, #12]
 8012af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012af4:	079d      	lsls	r5, r3, #30
 8012af6:	4606      	mov	r6, r0
 8012af8:	460c      	mov	r4, r1
 8012afa:	d507      	bpl.n	8012b0c <__smakebuf_r+0x1c>
 8012afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b00:	6023      	str	r3, [r4, #0]
 8012b02:	6123      	str	r3, [r4, #16]
 8012b04:	2301      	movs	r3, #1
 8012b06:	6163      	str	r3, [r4, #20]
 8012b08:	b002      	add	sp, #8
 8012b0a:	bd70      	pop	{r4, r5, r6, pc}
 8012b0c:	ab01      	add	r3, sp, #4
 8012b0e:	466a      	mov	r2, sp
 8012b10:	f7ff ffc8 	bl	8012aa4 <__swhatbuf_r>
 8012b14:	9900      	ldr	r1, [sp, #0]
 8012b16:	4605      	mov	r5, r0
 8012b18:	4630      	mov	r0, r6
 8012b1a:	f7fd fa9b 	bl	8010054 <_malloc_r>
 8012b1e:	b948      	cbnz	r0, 8012b34 <__smakebuf_r+0x44>
 8012b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b24:	059a      	lsls	r2, r3, #22
 8012b26:	d4ef      	bmi.n	8012b08 <__smakebuf_r+0x18>
 8012b28:	f023 0303 	bic.w	r3, r3, #3
 8012b2c:	f043 0302 	orr.w	r3, r3, #2
 8012b30:	81a3      	strh	r3, [r4, #12]
 8012b32:	e7e3      	b.n	8012afc <__smakebuf_r+0xc>
 8012b34:	89a3      	ldrh	r3, [r4, #12]
 8012b36:	6020      	str	r0, [r4, #0]
 8012b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b3c:	81a3      	strh	r3, [r4, #12]
 8012b3e:	9b00      	ldr	r3, [sp, #0]
 8012b40:	6163      	str	r3, [r4, #20]
 8012b42:	9b01      	ldr	r3, [sp, #4]
 8012b44:	6120      	str	r0, [r4, #16]
 8012b46:	b15b      	cbz	r3, 8012b60 <__smakebuf_r+0x70>
 8012b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	f000 f81d 	bl	8012b8c <_isatty_r>
 8012b52:	b128      	cbz	r0, 8012b60 <__smakebuf_r+0x70>
 8012b54:	89a3      	ldrh	r3, [r4, #12]
 8012b56:	f023 0303 	bic.w	r3, r3, #3
 8012b5a:	f043 0301 	orr.w	r3, r3, #1
 8012b5e:	81a3      	strh	r3, [r4, #12]
 8012b60:	89a3      	ldrh	r3, [r4, #12]
 8012b62:	431d      	orrs	r5, r3
 8012b64:	81a5      	strh	r5, [r4, #12]
 8012b66:	e7cf      	b.n	8012b08 <__smakebuf_r+0x18>

08012b68 <_fstat_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4d07      	ldr	r5, [pc, #28]	; (8012b88 <_fstat_r+0x20>)
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4604      	mov	r4, r0
 8012b70:	4608      	mov	r0, r1
 8012b72:	4611      	mov	r1, r2
 8012b74:	602b      	str	r3, [r5, #0]
 8012b76:	f7ee fb12 	bl	800119e <_fstat>
 8012b7a:	1c43      	adds	r3, r0, #1
 8012b7c:	d102      	bne.n	8012b84 <_fstat_r+0x1c>
 8012b7e:	682b      	ldr	r3, [r5, #0]
 8012b80:	b103      	cbz	r3, 8012b84 <_fstat_r+0x1c>
 8012b82:	6023      	str	r3, [r4, #0]
 8012b84:	bd38      	pop	{r3, r4, r5, pc}
 8012b86:	bf00      	nop
 8012b88:	24002280 	.word	0x24002280

08012b8c <_isatty_r>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	4d06      	ldr	r5, [pc, #24]	; (8012ba8 <_isatty_r+0x1c>)
 8012b90:	2300      	movs	r3, #0
 8012b92:	4604      	mov	r4, r0
 8012b94:	4608      	mov	r0, r1
 8012b96:	602b      	str	r3, [r5, #0]
 8012b98:	f7ee fb11 	bl	80011be <_isatty>
 8012b9c:	1c43      	adds	r3, r0, #1
 8012b9e:	d102      	bne.n	8012ba6 <_isatty_r+0x1a>
 8012ba0:	682b      	ldr	r3, [r5, #0]
 8012ba2:	b103      	cbz	r3, 8012ba6 <_isatty_r+0x1a>
 8012ba4:	6023      	str	r3, [r4, #0]
 8012ba6:	bd38      	pop	{r3, r4, r5, pc}
 8012ba8:	24002280 	.word	0x24002280
 8012bac:	00000000 	.word	0x00000000

08012bb0 <fmod>:
 8012bb0:	b508      	push	{r3, lr}
 8012bb2:	ed2d 8b04 	vpush	{d8-d9}
 8012bb6:	eeb0 9b40 	vmov.f64	d9, d0
 8012bba:	eeb0 8b41 	vmov.f64	d8, d1
 8012bbe:	f000 f81b 	bl	8012bf8 <__ieee754_fmod>
 8012bc2:	eeb4 9b48 	vcmp.f64	d9, d8
 8012bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bca:	d60c      	bvs.n	8012be6 <fmod+0x36>
 8012bcc:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8012bf0 <fmod+0x40>
 8012bd0:	eeb4 8b49 	vcmp.f64	d8, d9
 8012bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd8:	d105      	bne.n	8012be6 <fmod+0x36>
 8012bda:	f7fe f88b 	bl	8010cf4 <__errno>
 8012bde:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012be2:	2321      	movs	r3, #33	; 0x21
 8012be4:	6003      	str	r3, [r0, #0]
 8012be6:	ecbd 8b04 	vpop	{d8-d9}
 8012bea:	bd08      	pop	{r3, pc}
 8012bec:	f3af 8000 	nop.w
	...

08012bf8 <__ieee754_fmod>:
 8012bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012bfc:	ed8d 1b00 	vstr	d1, [sp]
 8012c00:	e9dd 6500 	ldrd	r6, r5, [sp]
 8012c04:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8012c08:	ea57 0306 	orrs.w	r3, r7, r6
 8012c0c:	46b6      	mov	lr, r6
 8012c0e:	d00d      	beq.n	8012c2c <__ieee754_fmod+0x34>
 8012c10:	ee10 ca90 	vmov	ip, s1
 8012c14:	4b79      	ldr	r3, [pc, #484]	; (8012dfc <__ieee754_fmod+0x204>)
 8012c16:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 8012c1a:	4598      	cmp	r8, r3
 8012c1c:	dc06      	bgt.n	8012c2c <__ieee754_fmod+0x34>
 8012c1e:	4273      	negs	r3, r6
 8012c20:	4a77      	ldr	r2, [pc, #476]	; (8012e00 <__ieee754_fmod+0x208>)
 8012c22:	4333      	orrs	r3, r6
 8012c24:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d908      	bls.n	8012c3e <__ieee754_fmod+0x46>
 8012c2c:	ed9d 7b00 	vldr	d7, [sp]
 8012c30:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012c34:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8012c38:	b003      	add	sp, #12
 8012c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c3e:	45b8      	cmp	r8, r7
 8012c40:	ee10 9a10 	vmov	r9, s0
 8012c44:	ee10 1a10 	vmov	r1, s0
 8012c48:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 8012c4c:	dc09      	bgt.n	8012c62 <__ieee754_fmod+0x6a>
 8012c4e:	dbf3      	blt.n	8012c38 <__ieee754_fmod+0x40>
 8012c50:	45b1      	cmp	r9, r6
 8012c52:	d3f1      	bcc.n	8012c38 <__ieee754_fmod+0x40>
 8012c54:	d105      	bne.n	8012c62 <__ieee754_fmod+0x6a>
 8012c56:	4b6b      	ldr	r3, [pc, #428]	; (8012e04 <__ieee754_fmod+0x20c>)
 8012c58:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8012c5c:	ed93 0b00 	vldr	d0, [r3]
 8012c60:	e7ea      	b.n	8012c38 <__ieee754_fmod+0x40>
 8012c62:	4a67      	ldr	r2, [pc, #412]	; (8012e00 <__ieee754_fmod+0x208>)
 8012c64:	ea1c 0f02 	tst.w	ip, r2
 8012c68:	d14a      	bne.n	8012d00 <__ieee754_fmod+0x108>
 8012c6a:	f1b8 0f00 	cmp.w	r8, #0
 8012c6e:	d13f      	bne.n	8012cf0 <__ieee754_fmod+0xf8>
 8012c70:	4865      	ldr	r0, [pc, #404]	; (8012e08 <__ieee754_fmod+0x210>)
 8012c72:	464b      	mov	r3, r9
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	dc38      	bgt.n	8012cea <__ieee754_fmod+0xf2>
 8012c78:	4215      	tst	r5, r2
 8012c7a:	d150      	bne.n	8012d1e <__ieee754_fmod+0x126>
 8012c7c:	2f00      	cmp	r7, #0
 8012c7e:	d147      	bne.n	8012d10 <__ieee754_fmod+0x118>
 8012c80:	4a61      	ldr	r2, [pc, #388]	; (8012e08 <__ieee754_fmod+0x210>)
 8012c82:	4633      	mov	r3, r6
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	dc40      	bgt.n	8012d0a <__ieee754_fmod+0x112>
 8012c88:	4b60      	ldr	r3, [pc, #384]	; (8012e0c <__ieee754_fmod+0x214>)
 8012c8a:	4298      	cmp	r0, r3
 8012c8c:	db4b      	blt.n	8012d26 <__ieee754_fmod+0x12e>
 8012c8e:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8012c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012c96:	f8df c174 	ldr.w	ip, [pc, #372]	; 8012e0c <__ieee754_fmod+0x214>
 8012c9a:	4562      	cmp	r2, ip
 8012c9c:	db58      	blt.n	8012d50 <__ieee754_fmod+0x158>
 8012c9e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012ca2:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8012ca6:	1a80      	subs	r0, r0, r2
 8012ca8:	1b5e      	subs	r6, r3, r5
 8012caa:	eba1 070e 	sub.w	r7, r1, lr
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d164      	bne.n	8012d7c <__ieee754_fmod+0x184>
 8012cb2:	4571      	cmp	r1, lr
 8012cb4:	bf38      	it	cc
 8012cb6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8012cba:	2e00      	cmp	r6, #0
 8012cbc:	bfa4      	itt	ge
 8012cbe:	4639      	movge	r1, r7
 8012cc0:	4633      	movge	r3, r6
 8012cc2:	ea53 0001 	orrs.w	r0, r3, r1
 8012cc6:	d0c6      	beq.n	8012c56 <__ieee754_fmod+0x5e>
 8012cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012ccc:	db6b      	blt.n	8012da6 <__ieee754_fmod+0x1ae>
 8012cce:	484f      	ldr	r0, [pc, #316]	; (8012e0c <__ieee754_fmod+0x214>)
 8012cd0:	4282      	cmp	r2, r0
 8012cd2:	db6e      	blt.n	8012db2 <__ieee754_fmod+0x1ba>
 8012cd4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012cd8:	4323      	orrs	r3, r4
 8012cda:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8012cde:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	ec45 4b10 	vmov	d0, r4, r5
 8012ce8:	e7a6      	b.n	8012c38 <__ieee754_fmod+0x40>
 8012cea:	3801      	subs	r0, #1
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	e7c1      	b.n	8012c74 <__ieee754_fmod+0x7c>
 8012cf0:	4846      	ldr	r0, [pc, #280]	; (8012e0c <__ieee754_fmod+0x214>)
 8012cf2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	ddbe      	ble.n	8012c78 <__ieee754_fmod+0x80>
 8012cfa:	3801      	subs	r0, #1
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	e7fa      	b.n	8012cf6 <__ieee754_fmod+0xfe>
 8012d00:	ea4f 5028 	mov.w	r0, r8, asr #20
 8012d04:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012d08:	e7b6      	b.n	8012c78 <__ieee754_fmod+0x80>
 8012d0a:	3a01      	subs	r2, #1
 8012d0c:	005b      	lsls	r3, r3, #1
 8012d0e:	e7b9      	b.n	8012c84 <__ieee754_fmod+0x8c>
 8012d10:	4a3e      	ldr	r2, [pc, #248]	; (8012e0c <__ieee754_fmod+0x214>)
 8012d12:	02fb      	lsls	r3, r7, #11
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	ddb7      	ble.n	8012c88 <__ieee754_fmod+0x90>
 8012d18:	3a01      	subs	r2, #1
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	e7fa      	b.n	8012d14 <__ieee754_fmod+0x11c>
 8012d1e:	153a      	asrs	r2, r7, #20
 8012d20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012d24:	e7b0      	b.n	8012c88 <__ieee754_fmod+0x90>
 8012d26:	eba3 0c00 	sub.w	ip, r3, r0
 8012d2a:	f1bc 0f1f 	cmp.w	ip, #31
 8012d2e:	dc09      	bgt.n	8012d44 <__ieee754_fmod+0x14c>
 8012d30:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 8012d34:	fa08 f10c 	lsl.w	r1, r8, ip
 8012d38:	fa29 f303 	lsr.w	r3, r9, r3
 8012d3c:	430b      	orrs	r3, r1
 8012d3e:	fa09 f10c 	lsl.w	r1, r9, ip
 8012d42:	e7a8      	b.n	8012c96 <__ieee754_fmod+0x9e>
 8012d44:	4b32      	ldr	r3, [pc, #200]	; (8012e10 <__ieee754_fmod+0x218>)
 8012d46:	1a1b      	subs	r3, r3, r0
 8012d48:	fa09 f303 	lsl.w	r3, r9, r3
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	e7a2      	b.n	8012c96 <__ieee754_fmod+0x9e>
 8012d50:	ebac 0c02 	sub.w	ip, ip, r2
 8012d54:	f1bc 0f1f 	cmp.w	ip, #31
 8012d58:	dc09      	bgt.n	8012d6e <__ieee754_fmod+0x176>
 8012d5a:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8012d5e:	fa07 f70c 	lsl.w	r7, r7, ip
 8012d62:	fa26 f505 	lsr.w	r5, r6, r5
 8012d66:	433d      	orrs	r5, r7
 8012d68:	fa06 fe0c 	lsl.w	lr, r6, ip
 8012d6c:	e79b      	b.n	8012ca6 <__ieee754_fmod+0xae>
 8012d6e:	4d28      	ldr	r5, [pc, #160]	; (8012e10 <__ieee754_fmod+0x218>)
 8012d70:	1aad      	subs	r5, r5, r2
 8012d72:	fa06 f505 	lsl.w	r5, r6, r5
 8012d76:	f04f 0e00 	mov.w	lr, #0
 8012d7a:	e794      	b.n	8012ca6 <__ieee754_fmod+0xae>
 8012d7c:	4571      	cmp	r1, lr
 8012d7e:	bf38      	it	cc
 8012d80:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8012d84:	2e00      	cmp	r6, #0
 8012d86:	da05      	bge.n	8012d94 <__ieee754_fmod+0x19c>
 8012d88:	0fce      	lsrs	r6, r1, #31
 8012d8a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8012d8e:	0049      	lsls	r1, r1, #1
 8012d90:	3801      	subs	r0, #1
 8012d92:	e789      	b.n	8012ca8 <__ieee754_fmod+0xb0>
 8012d94:	ea56 0307 	orrs.w	r3, r6, r7
 8012d98:	f43f af5d 	beq.w	8012c56 <__ieee754_fmod+0x5e>
 8012d9c:	0ffb      	lsrs	r3, r7, #31
 8012d9e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8012da2:	0079      	lsls	r1, r7, #1
 8012da4:	e7f4      	b.n	8012d90 <__ieee754_fmod+0x198>
 8012da6:	0fc8      	lsrs	r0, r1, #31
 8012da8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012dac:	0049      	lsls	r1, r1, #1
 8012dae:	3a01      	subs	r2, #1
 8012db0:	e78a      	b.n	8012cc8 <__ieee754_fmod+0xd0>
 8012db2:	1a80      	subs	r0, r0, r2
 8012db4:	2814      	cmp	r0, #20
 8012db6:	dc0c      	bgt.n	8012dd2 <__ieee754_fmod+0x1da>
 8012db8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8012dbc:	fa03 f202 	lsl.w	r2, r3, r2
 8012dc0:	40c1      	lsrs	r1, r0
 8012dc2:	430a      	orrs	r2, r1
 8012dc4:	4103      	asrs	r3, r0
 8012dc6:	ea43 0104 	orr.w	r1, r3, r4
 8012dca:	4610      	mov	r0, r2
 8012dcc:	ec41 0b10 	vmov	d0, r0, r1
 8012dd0:	e732      	b.n	8012c38 <__ieee754_fmod+0x40>
 8012dd2:	281f      	cmp	r0, #31
 8012dd4:	dc07      	bgt.n	8012de6 <__ieee754_fmod+0x1ee>
 8012dd6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8012dda:	40c1      	lsrs	r1, r0
 8012ddc:	fa03 f202 	lsl.w	r2, r3, r2
 8012de0:	430a      	orrs	r2, r1
 8012de2:	4623      	mov	r3, r4
 8012de4:	e7ef      	b.n	8012dc6 <__ieee754_fmod+0x1ce>
 8012de6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8012dea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012dee:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8012df2:	32e2      	adds	r2, #226	; 0xe2
 8012df4:	fa43 f202 	asr.w	r2, r3, r2
 8012df8:	e7f3      	b.n	8012de2 <__ieee754_fmod+0x1ea>
 8012dfa:	bf00      	nop
 8012dfc:	7fefffff 	.word	0x7fefffff
 8012e00:	7ff00000 	.word	0x7ff00000
 8012e04:	08013a70 	.word	0x08013a70
 8012e08:	fffffbed 	.word	0xfffffbed
 8012e0c:	fffffc02 	.word	0xfffffc02
 8012e10:	fffffbe2 	.word	0xfffffbe2

08012e14 <_init>:
 8012e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e16:	bf00      	nop
 8012e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e1a:	bc08      	pop	{r3}
 8012e1c:	469e      	mov	lr, r3
 8012e1e:	4770      	bx	lr

08012e20 <_fini>:
 8012e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e22:	bf00      	nop
 8012e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e26:	bc08      	pop	{r3}
 8012e28:	469e      	mov	lr, r3
 8012e2a:	4770      	bx	lr
