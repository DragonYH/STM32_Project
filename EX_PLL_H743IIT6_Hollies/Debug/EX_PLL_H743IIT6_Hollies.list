
EX_PLL_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000209c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800234c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  0800235c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  0800235c  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c8f3  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001900  00000000  00000000  0002c974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b50  00000000  00000000  0002e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008b9  00000000  00000000  0002edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000356dc  00000000  00000000  0002f681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d999  00000000  00000000  00064d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159911  00000000  00000000  000726f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002f08  00000000  00000000  001cc008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  001cef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800231c 	.word	0x0800231c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800231c 	.word	0x0800231c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002de:	f000 f953 	bl	8000588 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80002e2:	4b35      	ldr	r3, [pc, #212]	; (80003b8 <main+0xe0>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d11b      	bne.n	8000326 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ee:	f3bf 8f4f 	dsb	sy
}
 80002f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f4:	f3bf 8f6f 	isb	sy
}
 80002f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002fa:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <main+0xe0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000302:	f3bf 8f4f 	dsb	sy
}
 8000306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000308:	f3bf 8f6f 	isb	sy
}
 800030c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800030e:	4b2a      	ldr	r3, [pc, #168]	; (80003b8 <main+0xe0>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a29      	ldr	r2, [pc, #164]	; (80003b8 <main+0xe0>)
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800031a:	f3bf 8f4f 	dsb	sy
}
 800031e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000320:	f3bf 8f6f 	isb	sy
}
 8000324:	e000      	b.n	8000328 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000326:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <main+0xe0>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000330:	2b00      	cmp	r3, #0
 8000332:	d138      	bne.n	80003a6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <main+0xe0>)
 8000336:	2200      	movs	r2, #0
 8000338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800033c:	f3bf 8f4f 	dsb	sy
}
 8000340:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <main+0xe0>)
 8000344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000348:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	0b5b      	lsrs	r3, r3, #13
 800034e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000352:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	08db      	lsrs	r3, r3, #3
 8000358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800035c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	015a      	lsls	r2, r3, #5
 8000362:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000366:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800036c:	4912      	ldr	r1, [pc, #72]	; (80003b8 <main+0xe0>)
 800036e:	4313      	orrs	r3, r2
 8000370:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	1e5a      	subs	r2, r3, #1
 8000378:	607a      	str	r2, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1ef      	bne.n	800035e <main+0x86>
    } while(sets-- != 0U);
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	1e5a      	subs	r2, r3, #1
 8000382:	60ba      	str	r2, [r7, #8]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1e5      	bne.n	8000354 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000388:	f3bf 8f4f 	dsb	sy
}
 800038c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <main+0xe0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <main+0xe0>)
 8000394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000398:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800039a:	f3bf 8f4f 	dsb	sy
}
 800039e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003a0:	f3bf 8f6f 	isb	sy
}
 80003a4:	e000      	b.n	80003a8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 faa2 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f806 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f8b2 	bl	8000518 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0xdc>
 80003b6:	bf00      	nop
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09e      	sub	sp, #120	; 0x78
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c6:	224c      	movs	r2, #76	; 0x4c
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 ff7a 	bl	80022c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	2220      	movs	r2, #32
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 ff73 	bl	80022c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003de:	2002      	movs	r0, #2
 80003e0:	f000 fc4a 	bl	8000c78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e4:	2300      	movs	r3, #0
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	4b48      	ldr	r3, [pc, #288]	; (800050c <SystemClock_Config+0x150>)
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	4a47      	ldr	r2, [pc, #284]	; (800050c <SystemClock_Config+0x150>)
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003f4:	4b45      	ldr	r3, [pc, #276]	; (800050c <SystemClock_Config+0x150>)
 80003f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	4b44      	ldr	r3, [pc, #272]	; (8000510 <SystemClock_Config+0x154>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a43      	ldr	r2, [pc, #268]	; (8000510 <SystemClock_Config+0x154>)
 8000404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b41      	ldr	r3, [pc, #260]	; (8000510 <SystemClock_Config+0x154>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000416:	bf00      	nop
 8000418:	4b3d      	ldr	r3, [pc, #244]	; (8000510 <SystemClock_Config+0x154>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000424:	d1f8      	bne.n	8000418 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	4b3b      	ldr	r3, [pc, #236]	; (8000514 <SystemClock_Config+0x158>)
 8000428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800042c:	4a39      	ldr	r2, [pc, #228]	; (8000514 <SystemClock_Config+0x158>)
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <SystemClock_Config+0x158>)
 8000438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800043c:	f003 0302 	and.w	r3, r3, #2
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000444:	2300      	movs	r3, #0
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	4b31      	ldr	r3, [pc, #196]	; (8000510 <SystemClock_Config+0x154>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a30      	ldr	r2, [pc, #192]	; (8000510 <SystemClock_Config+0x154>)
 800044e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <SystemClock_Config+0x154>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <SystemClock_Config+0x150>)
 8000460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000462:	4a2a      	ldr	r2, [pc, #168]	; (800050c <SystemClock_Config+0x150>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	62d3      	str	r3, [r2, #44]	; 0x2c
 800046a:	4b28      	ldr	r3, [pc, #160]	; (800050c <SystemClock_Config+0x150>)
 800046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000476:	bf00      	nop
 8000478:	4b25      	ldr	r3, [pc, #148]	; (8000510 <SystemClock_Config+0x154>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000484:	d1f8      	bne.n	8000478 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000486:	2301      	movs	r3, #1
 8000488:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	2302      	movs	r3, #2
 8000496:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000498:	2305      	movs	r3, #5
 800049a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800049c:	23c0      	movs	r3, #192	; 0xc0
 800049e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004ac:	2308      	movs	r3, #8
 80004ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fc15 	bl	8000cec <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x110>
  {
    Error_Handler();
 80004c8:	f000 f89e 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	233f      	movs	r3, #63	; 0x3f
 80004ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2303      	movs	r3, #3
 80004d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004d8:	2308      	movs	r3, #8
 80004da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004dc:	2340      	movs	r3, #64	; 0x40
 80004de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004ea:	2340      	movs	r3, #64	; 0x40
 80004ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2104      	movs	r1, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 f853 	bl	80015a0 <HAL_RCC_ClockConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000500:	f000 f882 	bl	8000608 <Error_Handler>
  }
}
 8000504:	bf00      	nop
 8000506:	3778      	adds	r7, #120	; 0x78
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	58000400 	.word	0x58000400
 8000510:	58024800 	.word	0x58024800
 8000514:	58024400 	.word	0x58024400

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_GPIO_Init+0x6c>)
 8000520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <MX_GPIO_Init+0x6c>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_GPIO_Init+0x6c>)
 8000530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_GPIO_Init+0x6c>)
 800053e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000542:	4a10      	ldr	r2, [pc, #64]	; (8000584 <MX_GPIO_Init+0x6c>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_GPIO_Init+0x6c>)
 800054e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MX_GPIO_Init+0x6c>)
 800055c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <MX_GPIO_Init+0x6c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_GPIO_Init+0x6c>)
 800056c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	58024400 	.word	0x58024400

08000588 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800059a:	f000 faf1 	bl	8000b80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800059e:	2301      	movs	r3, #1
 80005a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80005a6:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80005aa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80005ac:	2312      	movs	r3, #18
 80005ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80005b8:	2303      	movs	r3, #3
 80005ba:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fb0e 	bl	8000bf0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005d4:	2004      	movs	r0, #4
 80005d6:	f000 faeb 	bl	8000bb0 <HAL_MPU_Enable>

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d101      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f6:	f000 f9b7 	bl	8000968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40001000 	.word	0x40001000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_MspInit+0x30>)
 800061c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_MspInit+0x30>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_MspInit+0x30>)
 800062c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	58024400 	.word	0x58024400

08000648 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	; 0x40
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b0f      	cmp	r3, #15
 8000654:	d827      	bhi.n	80006a6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000656:	2200      	movs	r2, #0
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	2036      	movs	r0, #54	; 0x36
 800065c:	f000 fa68 	bl	8000b30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000660:	2036      	movs	r0, #54	; 0x36
 8000662:	f000 fa7f 	bl	8000b64 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <HAL_InitTick+0xc4>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <HAL_InitTick+0xc8>)
 800066e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <HAL_InitTick+0xc8>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <HAL_InitTick+0xc8>)
 800067e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800068a:	f107 0210 	add.w	r2, r7, #16
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 faf9 	bl	8001c8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800069e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d106      	bne.n	80006b2 <HAL_InitTick+0x6a>
 80006a4:	e001      	b.n	80006aa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e02b      	b.n	8000702 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006aa:	f001 fad9 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80006ae:	63f8      	str	r0, [r7, #60]	; 0x3c
 80006b0:	e004      	b.n	80006bc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006b2:	f001 fad5 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80006b6:	4603      	mov	r3, r0
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <HAL_InitTick+0xcc>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	0c9b      	lsrs	r3, r3, #18
 80006c6:	3b01      	subs	r3, #1
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_InitTick+0xd0>)
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <HAL_InitTick+0xd4>)
 80006ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_InitTick+0xd0>)
 80006d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <HAL_InitTick+0xd0>)
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_InitTick+0xd0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_InitTick+0xd0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_InitTick+0xd0>)
 80006ec:	f001 fb10 	bl	8001d10 <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d104      	bne.n	8000700 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <HAL_InitTick+0xd0>)
 80006f8:	f001 fb6c 	bl	8001dd4 <HAL_TIM_Base_Start_IT>
 80006fc:	4603      	mov	r3, r0
 80006fe:	e000      	b.n	8000702 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3740      	adds	r7, #64	; 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	24000008 	.word	0x24000008
 8000710:	58024400 	.word	0x58024400
 8000714:	431bde83 	.word	0x431bde83
 8000718:	2400002c 	.word	0x2400002c
 800071c:	40001000 	.word	0x40001000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <TIM6_DAC_IRQHandler+0x10>)
 800077e:	f001 fba1 	bl	8001ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2400002c 	.word	0x2400002c

0800078c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000790:	4b37      	ldr	r3, [pc, #220]	; (8000870 <SystemInit+0xe4>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a36      	ldr	r2, [pc, #216]	; (8000870 <SystemInit+0xe4>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007a0:	4b34      	ldr	r3, [pc, #208]	; (8000874 <SystemInit+0xe8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 030f 	and.w	r3, r3, #15
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d807      	bhi.n	80007bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007ac:	4b31      	ldr	r3, [pc, #196]	; (8000874 <SystemInit+0xe8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f023 030f 	bic.w	r3, r3, #15
 80007b4:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <SystemInit+0xe8>)
 80007b6:	f043 0307 	orr.w	r3, r3, #7
 80007ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <SystemInit+0xec>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <SystemInit+0xec>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <SystemInit+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <SystemInit+0xec>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4929      	ldr	r1, [pc, #164]	; (8000878 <SystemInit+0xec>)
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <SystemInit+0xf0>)
 80007d6:	4013      	ands	r3, r2
 80007d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemInit+0xe8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <SystemInit+0xe8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f023 030f 	bic.w	r3, r3, #15
 80007ee:	4a21      	ldr	r2, [pc, #132]	; (8000874 <SystemInit+0xe8>)
 80007f0:	f043 0307 	orr.w	r3, r3, #7
 80007f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SystemInit+0xec>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SystemInit+0xec>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <SystemInit+0xec>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <SystemInit+0xec>)
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <SystemInit+0xf4>)
 800080c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <SystemInit+0xec>)
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <SystemInit+0xf8>)
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <SystemInit+0xec>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <SystemInit+0xfc>)
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <SystemInit+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <SystemInit+0xec>)
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <SystemInit+0xfc>)
 8000824:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <SystemInit+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <SystemInit+0xec>)
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <SystemInit+0xfc>)
 8000830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <SystemInit+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <SystemInit+0xec>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <SystemInit+0xec>)
 800083e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000842:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <SystemInit+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <SystemInit+0x100>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <SystemInit+0x104>)
 8000850:	4013      	ands	r3, r2
 8000852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000856:	d202      	bcs.n	800085e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <SystemInit+0x108>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <SystemInit+0x10c>)
 8000860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000864:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00
 8000874:	52002000 	.word	0x52002000
 8000878:	58024400 	.word	0x58024400
 800087c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000880:	02020200 	.word	0x02020200
 8000884:	01ff0000 	.word	0x01ff0000
 8000888:	01010280 	.word	0x01010280
 800088c:	5c001000 	.word	0x5c001000
 8000890:	ffff0000 	.word	0xffff0000
 8000894:	51008108 	.word	0x51008108
 8000898:	52004000 	.word	0x52004000

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a0:	f7ff ff74 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f001 fd03 	bl	80022d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fd03 	bl	80002d8 <main>
  bx  lr
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008dc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008e0:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 80008e4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008e8:	2400007c 	.word	0x2400007c

080008ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC3_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f6:	2003      	movs	r0, #3
 80008f8:	f000 f90f 	bl	8000b1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008fc:	f001 f806 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8000900:	4602      	mov	r2, r0
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_Init+0x68>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	4913      	ldr	r1, [pc, #76]	; (800095c <HAL_Init+0x6c>)
 800090e:	5ccb      	ldrb	r3, [r1, r3]
 8000910:	f003 031f 	and.w	r3, r3, #31
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_Init+0x68>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_Init+0x6c>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	fa22 f303 	lsr.w	r3, r2, r3
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_Init+0x70>)
 8000932:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_Init+0x74>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093a:	200f      	movs	r0, #15
 800093c:	f7ff fe84 	bl	8000648 <HAL_InitTick>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e002      	b.n	8000950 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800094a:	f7ff fe63 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58024400 	.word	0x58024400
 800095c:	08002334 	.word	0x08002334
 8000960:	24000004 	.word	0x24000004
 8000964:	24000000 	.word	0x24000000

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2400000c 	.word	0x2400000c
 800098c:	24000078 	.word	0x24000078

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	24000078 	.word	0x24000078

080009a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetREVID+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	0c1b      	lsrs	r3, r3, #16
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	5c001000 	.word	0x5c001000

080009c0 <__NVIC_SetPriorityGrouping>:
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <__NVIC_SetPriorityGrouping+0x40>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x40>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	05fa0000 	.word	0x05fa0000

08000a08 <__NVIC_GetPriorityGrouping>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_EnableIRQ>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0b      	blt.n	8000a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f003 021f 	and.w	r2, r3, #31
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <__NVIC_EnableIRQ+0x38>)
 8000a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	2001      	movs	r0, #1
 8000a46:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ff4c 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3e:	f7ff ff63 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	6978      	ldr	r0, [r7, #20]
 8000b4a:	f7ff ffb3 	bl	8000ab4 <NVIC_EncodePriority>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff82 	bl	8000a60 <__NVIC_SetPriority>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff56 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b84:	f3bf 8f5f 	dmb	sy
}
 8000b88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_MPU_Disable+0x28>)
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8e:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_MPU_Disable+0x28>)
 8000b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b94:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_MPU_Disable+0x2c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	e000ed90 	.word	0xe000ed90

08000bb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_MPU_Enable+0x38>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_MPU_Enable+0x3c>)
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_MPU_Enable+0x3c>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bcc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bce:	f3bf 8f4f 	dsb	sy
}
 8000bd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bd4:	f3bf 8f6f 	isb	sy
}
 8000bd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed90 	.word	0xe000ed90
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	785a      	ldrb	r2, [r3, #1]
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_MPU_ConfigRegion+0x84>)
 8000bfe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d029      	beq.n	8000c5c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_MPU_ConfigRegion+0x84>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7b1b      	ldrb	r3, [r3, #12]
 8000c14:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7adb      	ldrb	r3, [r3, #11]
 8000c1a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7a9b      	ldrb	r3, [r3, #10]
 8000c22:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7b5b      	ldrb	r3, [r3, #13]
 8000c2a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7b9b      	ldrb	r3, [r3, #14]
 8000c32:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7bdb      	ldrb	r3, [r3, #15]
 8000c3a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7a5b      	ldrb	r3, [r3, #9]
 8000c42:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7a1b      	ldrb	r3, [r3, #8]
 8000c4a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c4c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c56:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c58:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c5a:	e005      	b.n	8000c68 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_MPU_ConfigRegion+0x84>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <HAL_MPU_ConfigRegion+0x84>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed90 	.word	0xe000ed90

08000c78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d00a      	beq.n	8000ca2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d001      	beq.n	8000c9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e01f      	b.n	8000cde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e01d      	b.n	8000cde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	f023 0207 	bic.w	r2, r3, #7
 8000caa:	490f      	ldr	r1, [pc, #60]	; (8000ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000cb2:	f7ff fe6d 	bl	8000990 <HAL_GetTick>
 8000cb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cb8:	e009      	b.n	8000cce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000cba:	f7ff fe69 	bl	8000990 <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc8:	d901      	bls.n	8000cce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e007      	b.n	8000cde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_PWREx_ConfigSupply+0x70>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cda:	d1ee      	bne.n	8000cba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024800 	.word	0x58024800

08000cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f000 bc48 	b.w	8001590 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 8088 	beq.w	8000e1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0e:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d18:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d007      	beq.n	8000d34 <HAL_RCC_OscConfig+0x48>
 8000d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d26:	2b18      	cmp	r3, #24
 8000d28:	d111      	bne.n	8000d4e <HAL_RCC_OscConfig+0x62>
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d10c      	bne.n	8000d4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	4b8f      	ldr	r3, [pc, #572]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d06d      	beq.n	8000e1c <HAL_RCC_OscConfig+0x130>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d169      	bne.n	8000e1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f000 bc21 	b.w	8001590 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d56:	d106      	bne.n	8000d66 <HAL_RCC_OscConfig+0x7a>
 8000d58:	4b86      	ldr	r3, [pc, #536]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a85      	ldr	r2, [pc, #532]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e02e      	b.n	8000dc4 <HAL_RCC_OscConfig+0xd8>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x9c>
 8000d6e:	4b81      	ldr	r3, [pc, #516]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a80      	ldr	r2, [pc, #512]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a7d      	ldr	r2, [pc, #500]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e01d      	b.n	8000dc4 <HAL_RCC_OscConfig+0xd8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0xc0>
 8000d92:	4b78      	ldr	r3, [pc, #480]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a77      	ldr	r2, [pc, #476]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a74      	ldr	r2, [pc, #464]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e00b      	b.n	8000dc4 <HAL_RCC_OscConfig+0xd8>
 8000dac:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a70      	ldr	r2, [pc, #448]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a6d      	ldr	r2, [pc, #436]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d013      	beq.n	8000df4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fde0 	bl	8000990 <HAL_GetTick>
 8000dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fddc 	bl	8000990 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e3d4      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000de6:	4b63      	ldr	r3, [pc, #396]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f0      	beq.n	8000dd4 <HAL_RCC_OscConfig+0xe8>
 8000df2:	e014      	b.n	8000e1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df4:	f7ff fdcc 	bl	8000990 <HAL_GetTick>
 8000df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fdc8 	bl	8000990 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	; 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e3c0      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e0e:	4b59      	ldr	r3, [pc, #356]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x110>
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 80ca 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e2c:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e36:	4b4f      	ldr	r3, [pc, #316]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <HAL_RCC_OscConfig+0x166>
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	2b18      	cmp	r3, #24
 8000e46:	d156      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x20a>
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d151      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e52:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <HAL_RCC_OscConfig+0x17e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e392      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e6a:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 0219 	bic.w	r2, r3, #25
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	493f      	ldr	r1, [pc, #252]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fd88 	bl	8000990 <HAL_GetTick>
 8000e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fd84 	bl	8000990 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e37c      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea2:	f7ff fd81 	bl	80009a8 <HAL_GetREVID>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f241 0203 	movw	r2, #4099	; 0x1003
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d817      	bhi.n	8000ee0 <HAL_RCC_OscConfig+0x1f4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	2b40      	cmp	r3, #64	; 0x40
 8000eb6:	d108      	bne.n	8000eca <HAL_RCC_OscConfig+0x1de>
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ec8:	e07a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	031b      	lsls	r3, r3, #12
 8000ed8:	4926      	ldr	r1, [pc, #152]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ede:	e06f      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	061b      	lsls	r3, r3, #24
 8000eee:	4921      	ldr	r1, [pc, #132]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ef4:	e064      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d047      	beq.n	8000f8e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 0219 	bic.w	r2, r3, #25
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	491a      	ldr	r1, [pc, #104]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f10:	f7ff fd3e 	bl	8000990 <HAL_GetTick>
 8000f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fd3a 	bl	8000990 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e332      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	f7ff fd37 	bl	80009a8 <HAL_GetREVID>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d819      	bhi.n	8000f78 <HAL_RCC_OscConfig+0x28c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b40      	cmp	r3, #64	; 0x40
 8000f4a:	d108      	bne.n	8000f5e <HAL_RCC_OscConfig+0x272>
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5a:	6053      	str	r3, [r2, #4]
 8000f5c:	e030      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	031b      	lsls	r3, r3, #12
 8000f6c:	4901      	ldr	r1, [pc, #4]	; (8000f74 <HAL_RCC_OscConfig+0x288>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]
 8000f72:	e025      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
 8000f74:	58024400 	.word	0x58024400
 8000f78:	4b9a      	ldr	r3, [pc, #616]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	4997      	ldr	r1, [pc, #604]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	e018      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b95      	ldr	r3, [pc, #596]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fcf9 	bl	8000990 <HAL_GetTick>
 8000f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fcf5 	bl	8000990 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e2ed      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fb4:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a9 	beq.w	8001120 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fce:	4b85      	ldr	r3, [pc, #532]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fd8:	4b82      	ldr	r3, [pc, #520]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d007      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x308>
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b18      	cmp	r3, #24
 8000fe8:	d13a      	bne.n	8001060 <HAL_RCC_OscConfig+0x374>
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d135      	bne.n	8001060 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ff4:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_OscConfig+0x320>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	2b80      	cmp	r3, #128	; 0x80
 8001006:	d001      	beq.n	800100c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e2c1      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800100c:	f7ff fccc 	bl	80009a8 <HAL_GetREVID>
 8001010:	4603      	mov	r3, r0
 8001012:	f241 0203 	movw	r2, #4099	; 0x1003
 8001016:	4293      	cmp	r3, r2
 8001018:	d817      	bhi.n	800104a <HAL_RCC_OscConfig+0x35e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	2b20      	cmp	r3, #32
 8001020:	d108      	bne.n	8001034 <HAL_RCC_OscConfig+0x348>
 8001022:	4b70      	ldr	r3, [pc, #448]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800102a:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800102c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001030:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001032:	e075      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	069b      	lsls	r3, r3, #26
 8001042:	4968      	ldr	r1, [pc, #416]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001048:	e06a      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800104a:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	4962      	ldr	r1, [pc, #392]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800105e:	e05f      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d042      	beq.n	80010ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001068:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a5d      	ldr	r2, [pc, #372]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800106e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fc8c 	bl	8000990 <HAL_GetTick>
 8001078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800107c:	f7ff fc88 	bl	8000990 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e280      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800108e:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800109a:	f7ff fc85 	bl	80009a8 <HAL_GetREVID>
 800109e:	4603      	mov	r3, r0
 80010a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d817      	bhi.n	80010d8 <HAL_RCC_OscConfig+0x3ec>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d108      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3d6>
 80010b0:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010b8:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010be:	6053      	str	r3, [r2, #4]
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
 80010c2:	4b48      	ldr	r3, [pc, #288]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	069b      	lsls	r3, r3, #26
 80010d0:	4944      	ldr	r1, [pc, #272]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
 80010d6:	e023      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
 80010d8:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	061b      	lsls	r3, r3, #24
 80010e6:	493f      	ldr	r1, [pc, #252]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
 80010ec:	e018      	b.n	8001120 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a3c      	ldr	r2, [pc, #240]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80010f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc49 	bl	8000990 <HAL_GetTick>
 80010fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001102:	f7ff fc45 	bl	8000990 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e23d      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d036      	beq.n	800119a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d019      	beq.n	8001168 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001138:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001140:	f7ff fc26 	bl	8000990 <HAL_GetTick>
 8001144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fc22 	bl	8000990 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e21a      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800115c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x45c>
 8001166:	e018      	b.n	800119a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800116a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001174:	f7ff fc0c 	bl	8000990 <HAL_GetTick>
 8001178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc08 	bl	8000990 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e200      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8001190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d039      	beq.n	800121a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fbe9 	bl	8000990 <HAL_GetTick>
 80011be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011c2:	f7ff fbe5 	bl	8000990 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e1dd      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4d6>
 80011e0:	e01b      	b.n	800121a <HAL_RCC_OscConfig+0x52e>
 80011e2:	bf00      	nop
 80011e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011e8:	4b9b      	ldr	r3, [pc, #620]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a9a      	ldr	r2, [pc, #616]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80011ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fbcc 	bl	8000990 <HAL_GetTick>
 80011f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011fc:	f7ff fbc8 	bl	8000990 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1c0      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800120e:	4b92      	ldr	r3, [pc, #584]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8081 	beq.w	800132a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001228:	4b8c      	ldr	r3, [pc, #560]	; (800145c <HAL_RCC_OscConfig+0x770>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a8b      	ldr	r2, [pc, #556]	; (800145c <HAL_RCC_OscConfig+0x770>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001234:	f7ff fbac 	bl	8000990 <HAL_GetTick>
 8001238:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123c:	f7ff fba8 	bl	8000990 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1a0      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800124e:	4b83      	ldr	r3, [pc, #524]	; (800145c <HAL_RCC_OscConfig+0x770>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x584>
 8001262:	4b7d      	ldr	r3, [pc, #500]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001266:	4a7c      	ldr	r2, [pc, #496]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6713      	str	r3, [r2, #112]	; 0x70
 800126e:	e02d      	b.n	80012cc <HAL_RCC_OscConfig+0x5e0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0x5a6>
 8001278:	4b77      	ldr	r3, [pc, #476]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a76      	ldr	r2, [pc, #472]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
 8001284:	4b74      	ldr	r3, [pc, #464]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	4a73      	ldr	r2, [pc, #460]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800128a:	f023 0304 	bic.w	r3, r3, #4
 800128e:	6713      	str	r3, [r2, #112]	; 0x70
 8001290:	e01c      	b.n	80012cc <HAL_RCC_OscConfig+0x5e0>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5c8>
 800129a:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800129c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129e:	4a6e      	ldr	r2, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6713      	str	r3, [r2, #112]	; 0x70
 80012a6:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012aa:	4a6b      	ldr	r2, [pc, #428]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6713      	str	r3, [r2, #112]	; 0x70
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0x5e0>
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b8:	4a67      	ldr	r2, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6713      	str	r3, [r2, #112]	; 0x70
 80012c0:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c4:	4a64      	ldr	r2, [pc, #400]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012c6:	f023 0304 	bic.w	r3, r3, #4
 80012ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d015      	beq.n	8001300 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d4:	f7ff fb5c 	bl	8000990 <HAL_GetTick>
 80012d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f7ff fb58 	bl	8000990 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e14e      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012f2:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0ee      	beq.n	80012dc <HAL_RCC_OscConfig+0x5f0>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001300:	f7ff fb46 	bl	8000990 <HAL_GetTick>
 8001304:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001306:	e00a      	b.n	800131e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001308:	f7ff fb42 	bl	8000990 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e138      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800131e:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ee      	bne.n	8001308 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 812d 	beq.w	800158e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001334:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800133c:	2b18      	cmp	r3, #24
 800133e:	f000 80bd 	beq.w	80014bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b02      	cmp	r3, #2
 8001348:	f040 809e 	bne.w	8001488 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a41      	ldr	r2, [pc, #260]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fb1a 	bl	8000990 <HAL_GetTick>
 800135c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb16 	bl	8000990 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e10e      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_RCC_OscConfig+0x774>)
 8001384:	4013      	ands	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	430a      	orrs	r2, r1
 8001392:	4931      	ldr	r1, [pc, #196]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001394:	4313      	orrs	r3, r2
 8001396:	628b      	str	r3, [r1, #40]	; 0x28
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	3b01      	subs	r3, #1
 800139e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a6:	3b01      	subs	r3, #1
 80013a8:	025b      	lsls	r3, r3, #9
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	3b01      	subs	r3, #1
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c0:	3b01      	subs	r3, #1
 80013c2:	061b      	lsls	r3, r3, #24
 80013c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80013c8:	4923      	ldr	r1, [pc, #140]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_RCC_OscConfig+0x778>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013e6:	00d2      	lsls	r2, r2, #3
 80013e8:	491b      	ldr	r1, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f023 020c 	bic.w	r2, r3, #12
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4917      	ldr	r1, [pc, #92]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f023 0202 	bic.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	4912      	ldr	r1, [pc, #72]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800140e:	4313      	orrs	r3, r2
 8001410:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_RCC_OscConfig+0x76c>)
 8001448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fa9f 	bl	8000990 <HAL_GetTick>
 8001452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001454:	e011      	b.n	800147a <HAL_RCC_OscConfig+0x78e>
 8001456:	bf00      	nop
 8001458:	58024400 	.word	0x58024400
 800145c:	58024800 	.word	0x58024800
 8001460:	fffffc0c 	.word	0xfffffc0c
 8001464:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fa92 	bl	8000990 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e08a      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x77c>
 8001486:	e082      	b.n	800158e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001488:	4b43      	ldr	r3, [pc, #268]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a42      	ldr	r2, [pc, #264]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fa7c 	bl	8000990 <HAL_GetTick>
 8001498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fa78 	bl	8000990 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e070      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ae:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x7b0>
 80014ba:	e068      	b.n	800158e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d031      	beq.n	8001534 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d12a      	bne.n	8001534 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d122      	bne.n	8001534 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d11a      	bne.n	8001534 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	0a5b      	lsrs	r3, r3, #9
 8001502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d111      	bne.n	8001534 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d108      	bne.n	8001534 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	0e1b      	lsrs	r3, r3, #24
 8001526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e02b      	b.n	8001590 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 800153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001542:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	429a      	cmp	r2, r3
 800154c:	d01f      	beq.n	800158e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800155a:	f7ff fa19 	bl	8000990 <HAL_GetTick>
 800155e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001560:	bf00      	nop
 8001562:	f7ff fa15 	bl	8000990 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4293      	cmp	r3, r2
 800156c:	d0f9      	beq.n	8001562 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 8001570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_OscConfig+0x8b0>)
 8001574:	4013      	ands	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800157a:	00d2      	lsls	r2, r2, #3
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 800157e:	4313      	orrs	r3, r2
 8001580:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_RCC_OscConfig+0x8ac>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58024400 	.word	0x58024400
 800159c:	ffff0007 	.word	0xffff0007

080015a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e19c      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b8a      	ldr	r3, [pc, #552]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d910      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 020f 	bic.w	r2, r3, #15
 80015ca:	4985      	ldr	r1, [pc, #532]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e184      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d010      	beq.n	8001612 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d908      	bls.n	8001612 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001600:	4b78      	ldr	r3, [pc, #480]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4975      	ldr	r1, [pc, #468]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800160e:	4313      	orrs	r3, r2
 8001610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d010      	beq.n	8001640 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800162a:	429a      	cmp	r2, r3
 800162c:	d908      	bls.n	8001640 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	496a      	ldr	r1, [pc, #424]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800163c:	4313      	orrs	r3, r2
 800163e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d010      	beq.n	800166e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	4b64      	ldr	r3, [pc, #400]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001658:	429a      	cmp	r2, r3
 800165a:	d908      	bls.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800165c:	4b61      	ldr	r3, [pc, #388]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	495e      	ldr	r1, [pc, #376]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800166a:	4313      	orrs	r3, r2
 800166c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d010      	beq.n	800169c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001686:	429a      	cmp	r2, r3
 8001688:	d908      	bls.n	800169c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800168a:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4953      	ldr	r1, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001698:	4313      	orrs	r3, r2
 800169a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d010      	beq.n	80016ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d908      	bls.n	80016ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f023 020f 	bic.w	r2, r3, #15
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4947      	ldr	r1, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d055      	beq.n	8001782 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80016d6:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4940      	ldr	r1, [pc, #256]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d121      	bne.n	8001740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0f6      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d115      	bne.n	8001740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0ea      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0de      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0d6      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f023 0207 	bic.w	r2, r3, #7
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 800174e:	4313      	orrs	r3, r2
 8001750:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001752:	f7ff f91d 	bl	8000990 <HAL_GetTick>
 8001756:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001758:	e00a      	b.n	8001770 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7ff f919 	bl	8000990 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e0be      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	429a      	cmp	r2, r3
 8001780:	d1eb      	bne.n	800175a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d010      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	429a      	cmp	r2, r3
 800179c:	d208      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f023 020f 	bic.w	r2, r3, #15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x244>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d214      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 020f 	bic.w	r2, r3, #15
 80017c6:	4906      	ldr	r1, [pc, #24]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_RCC_ClockConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e086      	b.n	80018ee <HAL_RCC_ClockConfig+0x34e>
 80017e0:	52002000 	.word	0x52002000
 80017e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d010      	beq.n	8001816 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001800:	429a      	cmp	r2, r3
 8001802:	d208      	bcs.n	8001816 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	4939      	ldr	r1, [pc, #228]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001812:	4313      	orrs	r3, r2
 8001814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800182e:	429a      	cmp	r2, r3
 8001830:	d208      	bcs.n	8001844 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	492e      	ldr	r1, [pc, #184]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001840:	4313      	orrs	r3, r2
 8001842:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d010      	beq.n	8001872 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800185c:	429a      	cmp	r2, r3
 800185e:	d208      	bcs.n	8001872 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4922      	ldr	r1, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 800186e:	4313      	orrs	r3, r2
 8001870:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b00      	cmp	r3, #0
 800187c:	d010      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800188a:	429a      	cmp	r2, r3
 800188c:	d208      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4917      	ldr	r1, [pc, #92]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 800189c:	4313      	orrs	r3, r2
 800189e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018a0:	f000 f834 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	4912      	ldr	r1, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x35c>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x358>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_RCC_ClockConfig+0x35c>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x360>)
 80018d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x364>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_ClockConfig+0x368>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe feb0 	bl	8000648 <HAL_InitTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	58024400 	.word	0x58024400
 80018fc:	08002334 	.word	0x08002334
 8001900:	24000004 	.word	0x24000004
 8001904:	24000000 	.word	0x24000000
 8001908:	24000008 	.word	0x24000008

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001912:	4bb3      	ldr	r3, [pc, #716]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191a:	2b18      	cmp	r3, #24
 800191c:	f200 8155 	bhi.w	8001bca <HAL_RCC_GetSysClockFreq+0x2be>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	0800198d 	.word	0x0800198d
 800192c:	08001bcb 	.word	0x08001bcb
 8001930:	08001bcb 	.word	0x08001bcb
 8001934:	08001bcb 	.word	0x08001bcb
 8001938:	08001bcb 	.word	0x08001bcb
 800193c:	08001bcb 	.word	0x08001bcb
 8001940:	08001bcb 	.word	0x08001bcb
 8001944:	08001bcb 	.word	0x08001bcb
 8001948:	080019b3 	.word	0x080019b3
 800194c:	08001bcb 	.word	0x08001bcb
 8001950:	08001bcb 	.word	0x08001bcb
 8001954:	08001bcb 	.word	0x08001bcb
 8001958:	08001bcb 	.word	0x08001bcb
 800195c:	08001bcb 	.word	0x08001bcb
 8001960:	08001bcb 	.word	0x08001bcb
 8001964:	08001bcb 	.word	0x08001bcb
 8001968:	080019b9 	.word	0x080019b9
 800196c:	08001bcb 	.word	0x08001bcb
 8001970:	08001bcb 	.word	0x08001bcb
 8001974:	08001bcb 	.word	0x08001bcb
 8001978:	08001bcb 	.word	0x08001bcb
 800197c:	08001bcb 	.word	0x08001bcb
 8001980:	08001bcb 	.word	0x08001bcb
 8001984:	08001bcb 	.word	0x08001bcb
 8001988:	080019bf 	.word	0x080019bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800198c:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001998:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	4a90      	ldr	r2, [pc, #576]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80019aa:	e111      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019ac:	4b8d      	ldr	r3, [pc, #564]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019ae:	61bb      	str	r3, [r7, #24]
      break;
 80019b0:	e10e      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80019b2:	4b8d      	ldr	r3, [pc, #564]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80019b4:	61bb      	str	r3, [r7, #24]
      break;
 80019b6:	e10b      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80019b8:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80019ba:	61bb      	str	r3, [r7, #24]
      break;
 80019bc:	e108      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019be:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80019c8:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80019d4:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80019de:	4b80      	ldr	r3, [pc, #512]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80e1 	beq.w	8001bc4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f000 8083 	beq.w	8001b10 <HAL_RCC_GetSysClockFreq+0x204>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f200 80a1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x248>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x114>
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d056      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001a1e:	e099      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d02d      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	4a6b      	ldr	r2, [pc, #428]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a56:	4b62      	ldr	r3, [pc, #392]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a6a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001a86:	e087      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001bf4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a9a:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aae:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001aca:	e065      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001bf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001af2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b0e:	e043      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001bfc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b52:	e021      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001bf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	0a5b      	lsrs	r3, r3, #9
 8001b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bbc:	ee17 3a90 	vmov	r3, s15
 8001bc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
      break;
 8001bc8:	e002      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001bcc:	61bb      	str	r3, [r7, #24]
      break;
 8001bce:	bf00      	nop
  }

  return sysclockfreq;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	58024400 	.word	0x58024400
 8001be4:	03d09000 	.word	0x03d09000
 8001be8:	003d0900 	.word	0x003d0900
 8001bec:	017d7840 	.word	0x017d7840
 8001bf0:	46000000 	.word	0x46000000
 8001bf4:	4c742400 	.word	0x4c742400
 8001bf8:	4a742400 	.word	0x4a742400
 8001bfc:	4bbebc20 	.word	0x4bbebc20

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001c06:	f7ff fe81 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x50>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490f      	ldr	r1, [pc, #60]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x54>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x50>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x54>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	58024400 	.word	0x58024400
 8001c54:	08002334 	.word	0x08002334
 8001c58:	24000004 	.word	0x24000004
 8001c5c:	24000000 	.word	0x24000000

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001c64:	f7ff ffcc 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4904      	ldr	r1, [pc, #16]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	08002334 	.word	0x08002334

08001c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	223f      	movs	r2, #63	; 0x3f
 8001c9a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0207 	and.w	r2, r3, #7
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_RCC_GetClockConfig+0x7c>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetClockConfig+0x80>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	601a      	str	r2, [r3, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	52002000 	.word	0x52002000

08001d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e049      	b.n	8001db6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f841 	bl	8001dbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f000 fa00 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e054      	b.n	8001e96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d01d      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <HAL_TIM_Base_Start_IT+0xd8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_TIM_Base_Start_IT+0xe8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d115      	bne.n	8001e80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xec>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d015      	beq.n	8001e92 <HAL_TIM_Base_Start_IT+0xbe>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d011      	beq.n	8001e92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7e:	e008      	b.n	8001e92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e000      	b.n	8001e94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40001800 	.word	0x40001800
 8001ebc:	40014000 	.word	0x40014000
 8001ec0:	00010007 	.word	0x00010007

08001ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0202 	mvn.w	r2, #2
 8001ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f905 	bl	8002116 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8f7 	bl	8002102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f908 	bl	800212a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0204 	mvn.w	r2, #4
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8db 	bl	8002116 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8cd 	bl	8002102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8de 	bl	800212a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0208 	mvn.w	r2, #8
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8b1 	bl	8002116 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8a3 	bl	8002102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8b4 	bl	800212a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0210 	mvn.w	r2, #16
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f887 	bl	8002116 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f879 	bl	8002102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f88a 	bl	800212a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe face 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f914 	bl	800229c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d10e      	bne.n	80020a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d107      	bne.n	80020a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800209a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f907 	bl	80022b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d10e      	bne.n	80020ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d107      	bne.n	80020ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f838 	bl	800213e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d10e      	bne.n	80020fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d107      	bne.n	80020fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f06f 0220 	mvn.w	r2, #32
 80020f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8c7 	bl	8002288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a40      	ldr	r2, [pc, #256]	; (8002268 <TIM_Base_SetConfig+0x114>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002172:	d00f      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3d      	ldr	r2, [pc, #244]	; (800226c <TIM_Base_SetConfig+0x118>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00b      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3c      	ldr	r2, [pc, #240]	; (8002270 <TIM_Base_SetConfig+0x11c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <TIM_Base_SetConfig+0x120>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <TIM_Base_SetConfig+0x124>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d108      	bne.n	80021a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <TIM_Base_SetConfig+0x114>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d01b      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2c      	ldr	r2, [pc, #176]	; (800226c <TIM_Base_SetConfig+0x118>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d017      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <TIM_Base_SetConfig+0x11c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <TIM_Base_SetConfig+0x120>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00f      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a29      	ldr	r2, [pc, #164]	; (8002278 <TIM_Base_SetConfig+0x124>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00b      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <TIM_Base_SetConfig+0x128>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <TIM_Base_SetConfig+0x12c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <TIM_Base_SetConfig+0x9a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a26      	ldr	r2, [pc, #152]	; (8002284 <TIM_Base_SetConfig+0x130>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d108      	bne.n	8002200 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <TIM_Base_SetConfig+0x114>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00f      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <TIM_Base_SetConfig+0x124>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00b      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <TIM_Base_SetConfig+0x128>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <TIM_Base_SetConfig+0x12c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <TIM_Base_SetConfig+0x130>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40010400 	.word	0x40010400
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800

08002288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <memset>:
 80022c4:	4402      	add	r2, r0
 80022c6:	4603      	mov	r3, r0
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d100      	bne.n	80022ce <memset+0xa>
 80022cc:	4770      	bx	lr
 80022ce:	f803 1b01 	strb.w	r1, [r3], #1
 80022d2:	e7f9      	b.n	80022c8 <memset+0x4>

080022d4 <__libc_init_array>:
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4d0d      	ldr	r5, [pc, #52]	; (800230c <__libc_init_array+0x38>)
 80022d8:	4c0d      	ldr	r4, [pc, #52]	; (8002310 <__libc_init_array+0x3c>)
 80022da:	1b64      	subs	r4, r4, r5
 80022dc:	10a4      	asrs	r4, r4, #2
 80022de:	2600      	movs	r6, #0
 80022e0:	42a6      	cmp	r6, r4
 80022e2:	d109      	bne.n	80022f8 <__libc_init_array+0x24>
 80022e4:	4d0b      	ldr	r5, [pc, #44]	; (8002314 <__libc_init_array+0x40>)
 80022e6:	4c0c      	ldr	r4, [pc, #48]	; (8002318 <__libc_init_array+0x44>)
 80022e8:	f000 f818 	bl	800231c <_init>
 80022ec:	1b64      	subs	r4, r4, r5
 80022ee:	10a4      	asrs	r4, r4, #2
 80022f0:	2600      	movs	r6, #0
 80022f2:	42a6      	cmp	r6, r4
 80022f4:	d105      	bne.n	8002302 <__libc_init_array+0x2e>
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fc:	4798      	blx	r3
 80022fe:	3601      	adds	r6, #1
 8002300:	e7ee      	b.n	80022e0 <__libc_init_array+0xc>
 8002302:	f855 3b04 	ldr.w	r3, [r5], #4
 8002306:	4798      	blx	r3
 8002308:	3601      	adds	r6, #1
 800230a:	e7f2      	b.n	80022f2 <__libc_init_array+0x1e>
 800230c:	08002344 	.word	0x08002344
 8002310:	08002344 	.word	0x08002344
 8002314:	08002344 	.word	0x08002344
 8002318:	08002348 	.word	0x08002348

0800231c <_init>:
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231e:	bf00      	nop
 8002320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002322:	bc08      	pop	{r3}
 8002324:	469e      	mov	lr, r3
 8002326:	4770      	bx	lr

08002328 <_fini>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr
