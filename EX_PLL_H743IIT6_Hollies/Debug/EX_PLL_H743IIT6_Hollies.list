
EX_PLL_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b44  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  08013de8  08013de8  00023de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08014a38  08014a38  00024a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08014a3c  08014a3c  00024a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002d0  24000000  08014a40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fbc  240002d0  08014d10  000302d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000504  2400228c  08014d10  0003228c  2**0
                  ALLOC
  8 ._D3_Area     00000002  38000000  38000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.attributes 0000002e  00000000  00000000  00040002  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029bac  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005992  00000000  00000000  00069c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c68  00000000  00000000  0006f628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000154d  00000000  00000000  00071290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e821  00000000  00000000  000727dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000292f4  00000000  00000000  000b0ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001797ee  00000000  00000000  000da2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008534  00000000  00000000  00253ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0025c014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  0025c074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0025c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013dcc 	.word	0x08013dcc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08013dcc 	.word	0x08013dcc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b36      	ldr	r3, [pc, #216]	; (8000490 <MX_ADC1_Init+0x100>)
 80003b6:	4a37      	ldr	r2, [pc, #220]	; (8000494 <MX_ADC1_Init+0x104>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b35      	ldr	r3, [pc, #212]	; (8000490 <MX_ADC1_Init+0x100>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <MX_ADC1_Init+0x100>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c8:	4b31      	ldr	r3, [pc, #196]	; (8000490 <MX_ADC1_Init+0x100>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ce:	4b30      	ldr	r3, [pc, #192]	; (8000490 <MX_ADC1_Init+0x100>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <MX_ADC1_Init+0x100>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <MX_ADC1_Init+0x100>)
 80003dc:	2201      	movs	r2, #1
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <MX_ADC1_Init+0x100>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <MX_ADC1_Init+0x100>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <MX_ADC1_Init+0x100>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <MX_ADC1_Init+0x100>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_ADC1_Init+0x100>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_ADC1_Init+0x100>)
 8000400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000404:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_ADC1_Init+0x100>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_ADC1_Init+0x100>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <MX_ADC1_Init+0x100>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_ADC1_Init+0x100>)
 800041c:	2240      	movs	r2, #64	; 0x40
 800041e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_ADC1_Init+0x100>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_ADC1_Init+0x100>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	4818      	ldr	r0, [pc, #96]	; (8000490 <MX_ADC1_Init+0x100>)
 800042e:	f001 fc43 	bl	8001cb8 <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 fd9e 	bl	8000f78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4812      	ldr	r0, [pc, #72]	; (8000490 <MX_ADC1_Init+0x100>)
 8000448:	f002 ff1e 	bl	8003288 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 fd91 	bl	8000f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_ADC1_Init+0x108>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800045e:	2306      	movs	r3, #6
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_ADC1_Init+0x100>)
 800047a:	f002 f86d 	bl	8002558 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fd78 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	; 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	240002ec 	.word	0x240002ec
 8000494:	40022000 	.word	0x40022000
 8000498:	0c900008 	.word	0x0c900008

0800049c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
 80004b0:	615a      	str	r2, [r3, #20]
 80004b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <MX_ADC3_Init+0xd0>)
 80004b6:	4a2e      	ldr	r2, [pc, #184]	; (8000570 <MX_ADC3_Init+0xd4>)
 80004b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80004ba:	4b2c      	ldr	r3, [pc, #176]	; (800056c <MX_ADC3_Init+0xd0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <MX_ADC3_Init+0xd0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c6:	4b29      	ldr	r3, [pc, #164]	; (800056c <MX_ADC3_Init+0xd0>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <MX_ADC3_Init+0xd0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <MX_ADC3_Init+0xd0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <MX_ADC3_Init+0xd0>)
 80004da:	2201      	movs	r2, #1
 80004dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <MX_ADC3_Init+0xd0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_ADC3_Init+0xd0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <MX_ADC3_Init+0xd0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_ADC3_Init+0xd0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_ADC3_Init+0xd0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_ADC3_Init+0xd0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_ADC3_Init+0xd0>)
 8000504:	2201      	movs	r2, #1
 8000506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = 15;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_ADC3_Init+0xd0>)
 800050c:	220f      	movs	r2, #15
 800050e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_ADC3_Init+0xd0>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_ADC3_Init+0xd0>)
 8000518:	2200      	movs	r2, #0
 800051a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_ADC3_Init+0xd0>)
 800051e:	2201      	movs	r2, #1
 8000520:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <MX_ADC3_Init+0xd0>)
 8000524:	f001 fbc8 	bl	8001cb8 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800052e:	f000 fd23 	bl	8000f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_ADC3_Init+0xd8>)
 8000534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000536:	2306      	movs	r3, #6
 8000538:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800053a:	2307      	movs	r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800053e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000542:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000544:	2304      	movs	r3, #4
 8000546:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_ADC3_Init+0xd0>)
 8000556:	f001 ffff 	bl	8002558 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000560:	f000 fd0a 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	24000350 	.word	0x24000350
 8000570:	58026000 	.word	0x58026000
 8000574:	cb840000 	.word	0xcb840000

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a3b      	ldr	r2, [pc, #236]	; (8000684 <HAL_ADC_MspInit+0x10c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d15b      	bne.n	8000652 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800059a:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <HAL_ADC_MspInit+0x110>)
 800059c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005a0:	4a39      	ldr	r2, [pc, #228]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005aa:	4b37      	ldr	r3, [pc, #220]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005be:	4a32      	ldr	r2, [pc, #200]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_ADC_MspInit+0x110>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4828      	ldr	r0, [pc, #160]	; (800068c <HAL_ADC_MspInit+0x114>)
 80005ea:	f005 fba5 	bl	8005d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <HAL_ADC_MspInit+0x118>)
 80005f0:	4a28      	ldr	r2, [pc, #160]	; (8000694 <HAL_ADC_MspInit+0x11c>)
 80005f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <HAL_ADC_MspInit+0x118>)
 80005f6:	2209      	movs	r2, #9
 80005f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <HAL_ADC_MspInit+0x118>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000614:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000624:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000636:	f003 faa7 	bl	8003b88 <HAL_DMA_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8000640:	f000 fc9a 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <HAL_ADC_MspInit+0x118>)
 8000648:	64da      	str	r2, [r3, #76]	; 0x4c
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <HAL_ADC_MspInit+0x118>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000650:	e013      	b.n	800067a <HAL_ADC_MspInit+0x102>
  else if(adcHandle->Instance==ADC3)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <HAL_ADC_MspInit+0x120>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d10e      	bne.n	800067a <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_ADC_MspInit+0x110>)
 800065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <HAL_ADC_MspInit+0x110>)
 8000664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_ADC_MspInit+0x110>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000
 8000688:	58024400 	.word	0x58024400
 800068c:	58020000 	.word	0x58020000
 8000690:	240003b4 	.word	0x240003b4
 8000694:	40020028 	.word	0x40020028
 8000698:	58026000 	.word	0x58026000

0800069c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2224      	movs	r2, #36	; 0x24
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f011 fa9c 	bl	8011be6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_DAC1_Init+0x5c>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_DAC1_Init+0x60>)
 80006b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <MX_DAC1_Init+0x5c>)
 80006b6:	f003 f821 	bl	80036fc <HAL_DAC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006c0:	f000 fc5a 	bl	8000f78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_DAC1_Init+0x5c>)
 80006e0:	f003 f90a 	bl	80038f8 <HAL_DAC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 fc45 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2400042c 	.word	0x2400042c
 80006fc:	40007400 	.word	0x40007400

08000700 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <HAL_DAC_MspInit+0x90>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d131      	bne.n	8000786 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <HAL_DAC_MspInit+0x94>)
 800072a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800072e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_DAC_MspInit+0x94>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800075e:	2310      	movs	r3, #16
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000762:	2303      	movs	r3, #3
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <HAL_DAC_MspInit+0x98>)
 8000772:	f005 fae1 	bl	8005d38 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f002 ff1a 	bl	80035b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000780:	2036      	movs	r0, #54	; 0x36
 8000782:	f002 ff31 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40007400 	.word	0x40007400
 8000794:	58024400 	.word	0x58024400
 8000798:	58020000 	.word	0x58020000

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_DMA_Init+0x3c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	200c      	movs	r0, #12
 80007c6:	f002 fef5 	bl	80035b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007ca:	200c      	movs	r0, #12
 80007cc:	f002 ff0c 	bl	80035e8 <HAL_NVIC_EnableIRQ>

}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58024400 	.word	0x58024400

080007dc <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_GPIO_Init+0xbc>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a27      	ldr	r2, [pc, #156]	; (8000898 <MX_GPIO_Init+0xbc>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0xbc>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <MX_GPIO_Init+0xbc>)
 8000854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_GPIO_Init+0xbc>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0xc0>)
 8000870:	f005 fc12 	bl	8006098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xc0>)
 800088c:	f005 fa54 	bl	8005d38 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024400 	.word	0x58024400
 800089c:	58022000 	.word	0x58022000

080008a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b2      	sub	sp, #200	; 0xc8
 80008a4:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008a6:	f000 fa5f 	bl	8000d68 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008aa:	4bb1      	ldr	r3, [pc, #708]	; (8000b70 <main+0x2d0>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11b      	bne.n	80008ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b6:	f3bf 8f4f 	dsb	sy
}
 80008ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008bc:	f3bf 8f6f 	isb	sy
}
 80008c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008c2:	4bab      	ldr	r3, [pc, #684]	; (8000b70 <main+0x2d0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d0:	f3bf 8f6f 	isb	sy
}
 80008d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008d6:	4ba6      	ldr	r3, [pc, #664]	; (8000b70 <main+0x2d0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4aa5      	ldr	r2, [pc, #660]	; (8000b70 <main+0x2d0>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008e2:	f3bf 8f4f 	dsb	sy
}
 80008e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e8:	f3bf 8f6f 	isb	sy
}
 80008ec:	e000      	b.n	80008f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008f0:	4b9f      	ldr	r3, [pc, #636]	; (8000b70 <main+0x2d0>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d143      	bne.n	8000984 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008fc:	4b9c      	ldr	r3, [pc, #624]	; (8000b70 <main+0x2d0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000904:	f3bf 8f4f 	dsb	sy
}
 8000908:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800090a:	4b99      	ldr	r3, [pc, #612]	; (8000b70 <main+0x2d0>)
 800090c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000918:	0b5b      	lsrs	r3, r3, #13
 800091a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800091e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800092c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000934:	015a      	lsls	r2, r3, #5
 8000936:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800093a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800093c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000940:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000942:	498b      	ldr	r1, [pc, #556]	; (8000b70 <main+0x2d0>)
 8000944:	4313      	orrs	r3, r2
 8000946:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800094a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1eb      	bne.n	8000930 <main+0x90>
    } while(sets-- != 0U);
 8000958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1dd      	bne.n	8000922 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 8000966:	f3bf 8f4f 	dsb	sy
}
 800096a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800096c:	4b80      	ldr	r3, [pc, #512]	; (8000b70 <main+0x2d0>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	4a7f      	ldr	r2, [pc, #508]	; (8000b70 <main+0x2d0>)
 8000972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000976:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000978:	f3bf 8f4f 	dsb	sy
}
 800097c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097e:	f3bf 8f6f 	isb	sy
}
 8000982:	e000      	b.n	8000986 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000984:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 feef 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f90f 	bl	8000bac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800098e:	f000 f9bb 	bl	8000d08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff ff23 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000996:	f7ff ff01 	bl	800079c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800099a:	f00f fd3f 	bl	801041c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800099e:	f7ff fcf7 	bl	8000390 <MX_ADC1_Init>
  MX_DAC1_Init();
 80009a2:	f7ff fe7b 	bl	800069c <MX_DAC1_Init>
  MX_TIM2_Init();
 80009a6:	f000 fd1f 	bl	80013e8 <MX_TIM2_Init>
  MX_ADC3_Init();
 80009aa:	f7ff fd77 	bl	800049c <MX_ADC3_Init>
  MX_TIM8_Init();
 80009ae:	f000 fd69 	bl	8001484 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间�?
  signal_1 = (pll_Signal *)malloc(sizeof(pll_Signal));
 80009b2:	2054      	movs	r0, #84	; 0x54
 80009b4:	f010 fb02 	bl	8010fbc <malloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b6d      	ldr	r3, [pc, #436]	; (8000b74 <main+0x2d4>)
 80009be:	601a      	str	r2, [r3, #0]
  signal_config_1 = (pll_Config *)malloc(sizeof(pll_Config));
 80009c0:	2020      	movs	r0, #32
 80009c2:	f010 fafb 	bl	8010fbc <malloc>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b6b      	ldr	r3, [pc, #428]	; (8000b78 <main+0x2d8>)
 80009cc:	601a      	str	r2, [r3, #0]
  uint16_t temprature = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  float temp_result = 0;
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  // 串口输出数组
  uint8_t buf[128] = {0};
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	227c      	movs	r2, #124	; 0x7c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f011 f8fc 	bl	8011be6 <memset>
  // 锁相环初始化
  pll_Init(signal_1, signal_config_1, 50, 20000);
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <main+0x2d4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a61      	ldr	r2, [pc, #388]	; (8000b78 <main+0x2d8>)
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009fa:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8000b7c <main+0x2dc>
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00f fab2 	bl	800ff68 <pll_Init>
  // DAC模拟输出初始化�?
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	485c      	ldr	r0, [pc, #368]	; (8000b80 <main+0x2e0>)
 8000a0e:	f002 ff43 	bl	8003898 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a12:	2100      	movs	r1, #0
 8000a14:	485a      	ldr	r0, [pc, #360]	; (8000b80 <main+0x2e0>)
 8000a16:	f002 fe93 	bl	8003740 <HAL_DAC_Start>
  // ADC校准并开启�?
  HAL_Delay(200);
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f000 ff00 	bl	8001820 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000a20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a24:	2100      	movs	r1, #0
 8000a26:	4857      	ldr	r0, [pc, #348]	; (8000b84 <main+0x2e4>)
 8000a28:	f002 fbca 	bl	80031c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000a2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a34:	4853      	ldr	r0, [pc, #332]	; (8000b84 <main+0x2e4>)
 8000a36:	f002 fbc3 	bl	80031c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4952      	ldr	r1, [pc, #328]	; (8000b88 <main+0x2e8>)
 8000a3e:	4851      	ldr	r0, [pc, #324]	; (8000b84 <main+0x2e4>)
 8000a40:	f001 fc9a 	bl	8002378 <HAL_ADC_Start_DMA>

  HAL_Delay(1000);
 8000a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a48:	f000 feea 	bl	8001820 <HAL_Delay>
  // 打开互补SPWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	484f      	ldr	r0, [pc, #316]	; (8000b8c <main+0x2ec>)
 8000a50:	f00a fc9a 	bl	800b388 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8000a54:	2100      	movs	r1, #0
 8000a56:	484d      	ldr	r0, [pc, #308]	; (8000b8c <main+0x2ec>)
 8000a58:	f00b fd2c 	bl	800c4b4 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8000a5c:	484c      	ldr	r0, [pc, #304]	; (8000b90 <main+0x2f0>)
 8000a5e:	f00a fbb9 	bl	800b1d4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // MPU温度读取
    HAL_ADC_Start(&hadc3);
 8000a62:	484c      	ldr	r0, [pc, #304]	; (8000b94 <main+0x2f4>)
 8000a64:	f001 faca 	bl	8001ffc <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK) // 判断是否转换完成
 8000a68:	210a      	movs	r1, #10
 8000a6a:	484a      	ldr	r0, [pc, #296]	; (8000b94 <main+0x2f4>)
 8000a6c:	f001 fb90 	bl	8002190 <HAL_ADC_PollForConversion>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d126      	bne.n	8000ac4 <main+0x224>
    {
      temprature = HAL_ADC_GetValue(&hadc3); // 读出转换结果
 8000a76:	4847      	ldr	r0, [pc, #284]	; (8000b94 <main+0x2f4>)
 8000a78:	f001 fd42 	bl	8002500 <HAL_ADC_GetValue>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      temp_result = ((110.0 - 30.0) / (*(unsigned short *)(0x1FF1E840) - *(unsigned short *)(0x1FF1E820))) * (temprature - *(unsigned short *)(0x1FF1E820)) + 30;
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <main+0x2f8>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <main+0x2fc>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	ee07 3a90 	vmov	s15, r3
 8000a92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a96:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8000b68 <main+0x2c8>
 8000a9a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a9e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8000aa2:	4a3e      	ldr	r2, [pc, #248]	; (8000b9c <main+0x2fc>)
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab4:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8000ab8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    }
    // 虚拟串口输出日志
    sprintf((char *)buf, "x1=0,theta= %f,u0= %.3f, sogi_d= %.3f, sogi_q= %.3f, park_q= %.3f, park_d= %.3f, temprature= %.3f, \n", signal_1->theta, signal_1->u_0, signal_1->sogi_d_0, signal_1->sogi_q_0 / 382 * 3, signal_1->park_q, signal_1->park_d, temp_result);
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <main+0x2d4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000acc:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <main+0x2d4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	edd3 7a00 	vldr	s15, [r3]
 8000ad8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <main+0x2d4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ae4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <main+0x2d4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	ed93 5a06 	vldr	s10, [r3, #24]
 8000af0:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8000ba0 <main+0x300>
 8000af4:	eec5 5a24 	vdiv.f32	s11, s10, s9
 8000af8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8000afc:	ee65 5a85 	vmul.f32	s11, s11, s10
 8000b00:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <main+0x2d4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 8000b0c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <main+0x2d4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	edd3 3a09 	vldr	s7, [r3, #36]	; 0x24
 8000b18:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b1c:	edd7 2a25 	vldr	s5, [r7, #148]	; 0x94
 8000b20:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000b24:	1d38      	adds	r0, r7, #4
 8000b26:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8000b2a:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b2e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b32:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b36:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b3a:	ed8d 7b00 	vstr	d7, [sp]
 8000b3e:	ec53 2b11 	vmov	r2, r3, d1
 8000b42:	4918      	ldr	r1, [pc, #96]	; (8000ba4 <main+0x304>)
 8000b44:	f010 ffec 	bl	8011b20 <siprintf>
    CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2180      	movs	r1, #128	; 0x80
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00f fd25 	bl	801059c <CDC_Transmit_FS>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000b52:	2101      	movs	r1, #1
 8000b54:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <main+0x308>)
 8000b56:	f005 fab8 	bl	80060ca <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 fe60 	bl	8001820 <HAL_Delay>
    HAL_ADC_Start(&hadc3);
 8000b60:	e77f      	b.n	8000a62 <main+0x1c2>
 8000b62:	bf00      	nop
 8000b64:	f3af 8000 	nop.w
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40540000 	.word	0x40540000
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	24000440 	.word	0x24000440
 8000b78:	24000444 	.word	0x24000444
 8000b7c:	42480000 	.word	0x42480000
 8000b80:	2400042c 	.word	0x2400042c
 8000b84:	240002ec 	.word	0x240002ec
 8000b88:	38000000 	.word	0x38000000
 8000b8c:	240004e4 	.word	0x240004e4
 8000b90:	24000498 	.word	0x24000498
 8000b94:	24000350 	.word	0x24000350
 8000b98:	1ff1e840 	.word	0x1ff1e840
 8000b9c:	1ff1e820 	.word	0x1ff1e820
 8000ba0:	43bf0000 	.word	0x43bf0000
 8000ba4:	08013de8 	.word	0x08013de8
 8000ba8:	58022000 	.word	0x58022000

08000bac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09e      	sub	sp, #120	; 0x78
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	224c      	movs	r2, #76	; 0x4c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f011 f813 	bl	8011be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f011 f80c 	bl	8011be6 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f006 fd4e 	bl	8007670 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <SystemClock_Config+0x150>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	4a47      	ldr	r2, [pc, #284]	; (8000cfc <SystemClock_Config+0x150>)
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000be4:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <SystemClock_Config+0x150>)
 8000be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b44      	ldr	r3, [pc, #272]	; (8000d00 <SystemClock_Config+0x154>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a43      	ldr	r2, [pc, #268]	; (8000d00 <SystemClock_Config+0x154>)
 8000bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <SystemClock_Config+0x154>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c06:	bf00      	nop
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <SystemClock_Config+0x154>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c14:	d1f8      	bne.n	8000c08 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <SystemClock_Config+0x158>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	4a39      	ldr	r2, [pc, #228]	; (8000d04 <SystemClock_Config+0x158>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <SystemClock_Config+0x158>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <SystemClock_Config+0x154>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <SystemClock_Config+0x154>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <SystemClock_Config+0x154>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <SystemClock_Config+0x150>)
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <SystemClock_Config+0x150>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <SystemClock_Config+0x150>)
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c66:	bf00      	nop
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <SystemClock_Config+0x154>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c74:	d1f8      	bne.n	8000c68 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c84:	2302      	movs	r3, #2
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c8c:	23c0      	movs	r3, #192	; 0xc0
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000c94:	2314      	movs	r3, #20
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4618      	mov	r0, r3
 8000cae:	f006 fd29 	bl	8007704 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000cb8:	f000 f95e 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000cbc:	233f      	movs	r3, #63	; 0x3f
 8000cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f007 f967 	bl	8007fb8 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000cf0:	f000 f942 	bl	8000f78 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3778      	adds	r7, #120	; 0x78
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58000400 	.word	0x58000400
 8000d00:	58024800 	.word	0x58024800
 8000d04:	58024400 	.word	0x58024400

08000d08 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b0      	sub	sp, #192	; 0xc0
 8000d0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	22c0      	movs	r2, #192	; 0xc0
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f010 ff66 	bl	8011be6 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000d26:	2319      	movs	r3, #25
 8000d28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 504;
 8000d2a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000d2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000d30:	2307      	movs	r3, #7
 8000d32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f007 fce9 	bl	8008728 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f90c 	bl	8000f78 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	37c0      	adds	r7, #192	; 0xc0
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d7a:	f002 fc43 	bl	8003604 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d86:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000d8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dac:	463b      	mov	r3, r7
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fc60 	bl	8003674 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000db8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000dbc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fc51 	bl	8003674 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f002 fc2e 	bl	8003634 <HAL_MPU_Enable>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	ed2d 8b02 	vpush	{d8}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a53      	ldr	r2, [pc, #332]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000df6:	f000 fcf3 	bl	80017e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e02:	f040 8097 	bne.w	8000f34 <HAL_TIM_PeriodElapsedCallback+0x154>
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd1d      	ble.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x70>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 021f 	and.w	r2, r3, #31
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e24:	f3bf 8f4f 	dsb	sy
}
 8000e28:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e2a:	4a47      	ldr	r2, [pc, #284]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3320      	adds	r3, #32
 8000e36:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b20      	subs	r3, #32
 8000e3c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dcf2      	bgt.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e44:	f3bf 8f4f 	dsb	sy
}
 8000e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e4a:	f3bf 8f6f 	isb	sy
}
 8000e4e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000e50:	bf00      	nop
  {
    SCB_InvalidateDCache_by_Addr((uint32_t *)adcBuf, sizeof(adcBuf));
    signal_1->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.4f;
 8000e52:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	ee07 3a90 	vmov	s15, r3
 8000e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f4c <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000e62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e66:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8000f50 <HAL_TIM_PeriodElapsedCallback+0x170>
 8000e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000f58 <HAL_TIM_PeriodElapsedCallback+0x178>
 8000e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e7a:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_1, signal_config_1);
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a36      	ldr	r2, [pc, #216]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00f f955 	bl	8010138 <pll_Control>
    // 调节SPWM占空比
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_1->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ea0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000eae:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000eb6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	f00f ffeb 	bl	8010e9c <arm_sin_f32>
 8000ec6:	eef0 7a40 	vmov.f32	s15, s0
 8000eca:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000edc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000ee0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef0:	ee17 2a90 	vmov	r2, s15
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000efe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f68 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f06:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0a:	f00f ffc7 	bl	8010e9c <arm_sin_f32>
 8000f0e:	eef0 7a40 	vmov.f32	s15, s0
 8000f12:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f6c <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f70 <HAL_TIM_PeriodElapsedCallback+0x190>
 8000f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f30:	f002 fcb2 	bl	8003898 <HAL_DAC_SetValue>
  }
  /* USER CODE END Callback 1 */
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	ecbd 8b02 	vpop	{d8}
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40001000 	.word	0x40001000
 8000f44:	38000000 	.word	0x38000000
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	40533333 	.word	0x40533333
 8000f50:	47800000 	.word	0x47800000
 8000f54:	24000440 	.word	0x24000440
 8000f58:	3fb33333 	.word	0x3fb33333
 8000f5c:	24000444 	.word	0x24000444
 8000f60:	240004e4 	.word	0x240004e4
 8000f64:	24000000 	.word	0x24000000
 8000f68:	3fc90fdb 	.word	0x3fc90fdb
 8000f6c:	44fa0000 	.word	0x44fa0000
 8000f70:	45000000 	.word	0x45000000
 8000f74:	2400042c 	.word	0x2400042c

08000f78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_MspInit+0x30>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	; 0x40
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	d827      	bhi.n	8001016 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f002 faf2 	bl	80035b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fd0:	2036      	movs	r0, #54	; 0x36
 8000fd2:	f002 fb09 	bl	80035e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <HAL_InitTick+0xc4>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_InitTick+0xc8>)
 8000fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe2:	4a27      	ldr	r2, [pc, #156]	; (8001080 <HAL_InitTick+0xc8>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_InitTick+0xc8>)
 8000fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ffa:	f107 0210 	add.w	r2, r7, #16
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f007 fb4d 	bl	80086a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800100e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <HAL_InitTick+0x6a>
 8001014:	e001      	b.n	800101a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e02b      	b.n	8001072 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800101a:	f007 fb2d 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800101e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001020:	e004      	b.n	800102c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001022:	f007 fb29 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 8001026:	4603      	mov	r3, r0
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <HAL_InitTick+0xcc>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
 8001036:	3b01      	subs	r3, #1
 8001038:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_InitTick+0xd0>)
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_InitTick+0xd4>)
 800103e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_InitTick+0xd0>)
 8001042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001046:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_InitTick+0xd0>)
 800104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_InitTick+0xd0>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_InitTick+0xd0>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_InitTick+0xd0>)
 800105c:	f00a f862 	bl	800b124 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d104      	bne.n	8001070 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <HAL_InitTick+0xd0>)
 8001068:	f00a f8b4 	bl	800b1d4 <HAL_TIM_Base_Start_IT>
 800106c:	4603      	mov	r3, r0
 800106e:	e000      	b.n	8001072 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	3740      	adds	r7, #64	; 0x40
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2400000c 	.word	0x2400000c
 8001080:	58024400 	.word	0x58024400
 8001084:	431bde83 	.word	0x431bde83
 8001088:	24000448 	.word	0x24000448
 800108c:	40001000 	.word	0x40001000

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <DMA1_Stream1_IRQHandler+0x10>)
 80010ee:	f003 fb11 	bl	8004714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	240003b4 	.word	0x240003b4

080010fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM2_IRQHandler+0x10>)
 8001102:	f00a fa4f 	bl	800b5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	24000498 	.word	0x24000498

08001110 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <TIM6_DAC_IRQHandler+0x20>)
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <TIM6_DAC_IRQHandler+0x20>)
 8001120:	f002 fb60 	bl	80037e4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <TIM6_DAC_IRQHandler+0x24>)
 8001126:	f00a fa3d 	bl	800b5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2400042c 	.word	0x2400042c
 8001134:	24000448 	.word	0x24000448

08001138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <OTG_FS_IRQHandler+0x10>)
 800113e:	f005 f937 	bl	80063b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24001a14 	.word	0x24001a14

0800114c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_kill>:

int _kill(int pid, int sig)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001166:	f010 fda1 	bl	8011cac <__errno>
 800116a:	4603      	mov	r3, r0
 800116c:	2216      	movs	r2, #22
 800116e:	601a      	str	r2, [r3, #0]
  return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_exit>:

void _exit (int status)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffe7 	bl	800115c <_kill>
  while (1) {}    /* Make sure we hang here */
 800118e:	e7fe      	b.n	800118e <_exit+0x12>

08001190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00a      	b.n	80011b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a2:	f3af 8000 	nop.w
 80011a6:	4601      	mov	r1, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf0      	blt.n	80011a2 <_read+0x12>
  }

  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e009      	b.n	80011f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf1      	blt.n	80011dc <_write+0x12>
  }
  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_close>:

int _close(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	605a      	str	r2, [r3, #4]
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f010 fd06 	bl	8011cac <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24080000 	.word	0x24080000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	24000494 	.word	0x24000494
 80012d4:	24002290 	.word	0x24002290

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b37      	ldr	r3, [pc, #220]	; (80013bc <SystemInit+0xe4>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a36      	ldr	r2, [pc, #216]	; (80013bc <SystemInit+0xe4>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <SystemInit+0xe8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d807      	bhi.n	8001308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <SystemInit+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 030f 	bic.w	r3, r3, #15
 8001300:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <SystemInit+0xe8>)
 8001302:	f043 0307 	orr.w	r3, r3, #7
 8001306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <SystemInit+0xec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <SystemInit+0xec>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <SystemInit+0xec>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <SystemInit+0xec>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4929      	ldr	r1, [pc, #164]	; (80013c4 <SystemInit+0xec>)
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <SystemInit+0xf0>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <SystemInit+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <SystemInit+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <SystemInit+0xe8>)
 800133c:	f043 0307 	orr.w	r3, r3, #7
 8001340:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <SystemInit+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <SystemInit+0xec>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <SystemInit+0xec>)
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <SystemInit+0xf4>)
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <SystemInit+0xec>)
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <SystemInit+0xf8>)
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <SystemInit+0xec>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <SystemInit+0xfc>)
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <SystemInit+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <SystemInit+0xec>)
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <SystemInit+0xfc>)
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <SystemInit+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <SystemInit+0xec>)
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <SystemInit+0xfc>)
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <SystemInit+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <SystemInit+0xec>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <SystemInit+0xec>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <SystemInit+0xec>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <SystemInit+0x100>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <SystemInit+0x104>)
 800139c:	4013      	ands	r3, r2
 800139e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a2:	d202      	bcs.n	80013aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <SystemInit+0x108>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <SystemInit+0x10c>)
 80013ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	52002000 	.word	0x52002000
 80013c4:	58024400 	.word	0x58024400
 80013c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013cc:	02020200 	.word	0x02020200
 80013d0:	01ff0000 	.word	0x01ff0000
 80013d4:	01010280 	.word	0x01010280
 80013d8:	5c001000 	.word	0x5c001000
 80013dc:	ffff0000 	.word	0xffff0000
 80013e0:	51008108 	.word	0x51008108
 80013e4:	52004000 	.word	0x52004000

080013e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_TIM2_Init+0x98>)
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_TIM2_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_TIM2_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_TIM2_Init+0x98>)
 800141c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_TIM2_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_TIM2_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142e:	4814      	ldr	r0, [pc, #80]	; (8001480 <MX_TIM2_Init+0x98>)
 8001430:	f009 fe78 	bl	800b124 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800143a:	f7ff fd9d 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_TIM2_Init+0x98>)
 800144c:	f00a fade 	bl	800ba0c <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001456:	f7ff fd8f 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_TIM2_Init+0x98>)
 8001468:	f00b f8e6 	bl	800c638 <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001472:	f7ff fd81 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000498 	.word	0x24000498

08001484 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09a      	sub	sp, #104	; 0x68
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	222c      	movs	r2, #44	; 0x2c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f010 fb91 	bl	8011be6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014c4:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014c6:	4a45      	ldr	r2, [pc, #276]	; (80015dc <MX_TIM8_Init+0x158>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014d8:	f642 62df 	movw	r2, #11999	; 0x2edf
 80014dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014f0:	4839      	ldr	r0, [pc, #228]	; (80015d8 <MX_TIM8_Init+0x154>)
 80014f2:	f009 fe17 	bl	800b124 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80014fc:	f7ff fd3c 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800150a:	4619      	mov	r1, r3
 800150c:	4832      	ldr	r0, [pc, #200]	; (80015d8 <MX_TIM8_Init+0x154>)
 800150e:	f00a fa7d 	bl	800ba0c <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001518:	f7ff fd2e 	bl	8000f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800151c:	482e      	ldr	r0, [pc, #184]	; (80015d8 <MX_TIM8_Init+0x154>)
 800151e:	f009 fed1 	bl	800b2c4 <HAL_TIM_PWM_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001528:	f7ff fd26 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153c:	4619      	mov	r1, r3
 800153e:	4826      	ldr	r0, [pc, #152]	; (80015d8 <MX_TIM8_Init+0x154>)
 8001540:	f00b f87a 	bl	800c638 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800154a:	f7ff fd15 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	; 0x60
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 6000;
 8001552:	f241 7370 	movw	r3, #6000	; 0x1770
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001560:	2304      	movs	r3, #4
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM8_Init+0x154>)
 8001576:	f00a f935 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001580:	f7ff fcfa 	bl	8000f78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM8_Init+0x154>)
 80015ba:	f00b f8cb 	bl	800c754 <HAL_TIMEx_ConfigBreakDeadTime>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80015c4:	f7ff fcd8 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM8_Init+0x154>)
 80015ca:	f000 f847 	bl	800165c <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3768      	adds	r7, #104	; 0x68
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	240004e4 	.word	0x240004e4
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d117      	bne.n	8001622 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_TIM_Base_MspInit+0x74>)
 80015f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015f8:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_TIM_Base_MspInit+0x74>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_TIM_Base_MspInit+0x74>)
 8001604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	201c      	movs	r0, #28
 8001616:	f001 ffcd 	bl	80035b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800161a:	201c      	movs	r0, #28
 800161c:	f001 ffe4 	bl	80035e8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001620:	e013      	b.n	800164a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d10e      	bne.n	800164a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x74>)
 800162e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_TIM_Base_MspInit+0x74>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_TIM_Base_MspInit+0x74>)
 800163e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	58024400 	.word	0x58024400
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d13d      	bne.n	80016fa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PA5     ------> TIM8_CH1N
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ba:	2320      	movs	r3, #32
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016ca:	2303      	movs	r3, #3
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <HAL_TIM_MspPostInit+0xb0>)
 80016d6:	f004 fb2f 	bl	8005d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016ea:	2303      	movs	r3, #3
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4806      	ldr	r0, [pc, #24]	; (8001710 <HAL_TIM_MspPostInit+0xb4>)
 80016f6:	f004 fb1f 	bl	8005d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010400 	.word	0x40010400
 8001708:	58024400 	.word	0x58024400
 800170c:	58020000 	.word	0x58020000
 8001710:	58020800 	.word	0x58020800

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f7ff fdde 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	; (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f010 fab9 	bl	8011cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f8ab 	bl	80008a0 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001758:	08014a40 	.word	0x08014a40
  ldr r2, =_sbss
 800175c:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001760:	2400228c 	.word	0x2400228c

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f001 ff15 	bl	800359e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001774:	f006 fdd6 	bl	8008324 <HAL_RCC_GetSysClockFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_Init+0x68>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	4913      	ldr	r1, [pc, #76]	; (80017d4 <HAL_Init+0x6c>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_Init+0x68>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_Init+0x6c>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_Init+0x70>)
 80017aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_Init+0x74>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b2:	200f      	movs	r0, #15
 80017b4:	f7ff fc00 	bl	8000fb8 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e002      	b.n	80017c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017c2:	f7ff fbdf 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	58024400 	.word	0x58024400
 80017d4:	08013e98 	.word	0x08013e98
 80017d8:	24000008 	.word	0x24000008
 80017dc:	24000004 	.word	0x24000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	24000010 	.word	0x24000010
 8001804:	24000530 	.word	0x24000530

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	24000530 	.word	0x24000530

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	24000010 	.word	0x24000010

08001868 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetREVID+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1b      	lsrs	r3, r3, #16
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	5c001000 	.word	0x5c001000

08001880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3360      	adds	r3, #96	; 0x60
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	431a      	orrs	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	611a      	str	r2, [r3, #16]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800195a:	b480      	push	{r7}
 800195c:	b087      	sub	sp, #28
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3360      	adds	r3, #96	; 0x60
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	431a      	orrs	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	601a      	str	r2, [r3, #0]
  }
}
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3330      	adds	r3, #48	; 0x30
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	211f      	movs	r1, #31
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	401a      	ands	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	f003 011f 	and.w	r1, r3, #31
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f023 0203 	bic.w	r2, r3, #3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3314      	adds	r3, #20
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0e5b      	lsrs	r3, r3, #25
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0d1b      	lsrs	r3, r3, #20
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2107      	movs	r1, #7
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	401a      	ands	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	0d1b      	lsrs	r3, r3, #20
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0318 	and.w	r3, r3, #24
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ab0:	40d9      	lsrs	r1, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aba:	431a      	orrs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	000fffff 	.word	0x000fffff

08001ad4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6093      	str	r3, [r2, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	5fffffc0 	.word	0x5fffffc0

08001b30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	6fffffc0 	.word	0x6fffffc0

08001b80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b94:	d101      	bne.n	8001b9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <LL_ADC_Enable+0x24>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	7fffffc0 	.word	0x7fffffc0

08001bd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <LL_ADC_Disable+0x24>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	f043 0202 	orr.w	r2, r3, #2
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	7fffffc0 	.word	0x7fffffc0

08001bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_IsEnabled+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_IsEnabled+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsDisableOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsDisableOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <LL_ADC_REG_StartConversion+0x24>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	f043 0204 	orr.w	r2, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	7fffffc0 	.word	0x7fffffc0

08001c6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d101      	bne.n	8001c84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d101      	bne.n	8001caa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e18f      	b.n	8001ff2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7fe fc49 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff19 	bl	8001b30 <LL_ADC_IsDeepPowerDownEnabled>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff feff 	bl	8001b0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff34 	bl	8001b80 <LL_ADC_IsInternalRegulatorEnabled>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d114      	bne.n	8001d48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff18 	bl	8001b58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d28:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <HAL_ADC_Init+0x290>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	4a87      	ldr	r2, [pc, #540]	; (8001f4c <HAL_ADC_Init+0x294>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	3301      	adds	r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d3a:	e002      	b.n	8001d42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f9      	bne.n	8001d3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff17 	bl	8001b80 <LL_ADC_IsInternalRegulatorEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10d      	bne.n	8001d74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f043 0210 	orr.w	r2, r3, #16
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff77 	bl	8001c6c <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 8129 	bne.w	8001fe0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 8125 	bne.w	8001fe0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d9e:	f043 0202 	orr.w	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff24 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d136      	bne.n	8001e24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a65      	ldr	r2, [pc, #404]	; (8001f50 <HAL_ADC_Init+0x298>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_ADC_Init+0x112>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a63      	ldr	r2, [pc, #396]	; (8001f54 <HAL_ADC_Init+0x29c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_ADC_Init+0x130>
 8001dca:	4861      	ldr	r0, [pc, #388]	; (8001f50 <HAL_ADC_Init+0x298>)
 8001dcc:	f7ff ff14 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	4860      	ldr	r0, [pc, #384]	; (8001f54 <HAL_ADC_Init+0x29c>)
 8001dd4:	f7ff ff10 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e008      	b.n	8001dfa <HAL_ADC_Init+0x142>
 8001de8:	485b      	ldr	r0, [pc, #364]	; (8001f58 <HAL_ADC_Init+0x2a0>)
 8001dea:	f7ff ff05 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d012      	beq.n	8001e24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <HAL_ADC_Init+0x298>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_Init+0x15a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <HAL_ADC_Init+0x29c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x15e>
 8001e12:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_ADC_Init+0x2a4>)
 8001e14:	e000      	b.n	8001e18 <HAL_ADC_Init+0x160>
 8001e16:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_ADC_Init+0x2a8>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7ff fd2e 	bl	8001880 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e24:	f7ff fd20 	bl	8001868 <HAL_GetREVID>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d914      	bls.n	8001e5c <HAL_ADC_Init+0x1a4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d110      	bne.n	8001e5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7d5b      	ldrb	r3, [r3, #21]
 8001e3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7f1b      	ldrb	r3, [r3, #28]
 8001e50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e54:	f043 030c 	orr.w	r3, r3, #12
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e00d      	b.n	8001e78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7d5b      	ldrb	r3, [r3, #21]
 8001e60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f1b      	ldrb	r3, [r3, #28]
 8001e72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	045b      	lsls	r3, r3, #17
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_ADC_Init+0x2ac>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	69b9      	ldr	r1, [r7, #24]
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fed2 	bl	8001c6c <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fedf 	bl	8001c92 <LL_ADC_INJ_IsConversionOngoing>
 8001ed4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d15f      	bne.n	8001f9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d15c      	bne.n	8001f9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7d1b      	ldrb	r3, [r3, #20]
 8001ee6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_ADC_Init+0x2b0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d130      	bne.n	8001f70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_ADC_Init+0x2b4>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f22:	3a01      	subs	r2, #1
 8001f24:	0411      	lsls	r1, r2, #16
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f36:	430a      	orrs	r2, r1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	e01c      	b.n	8001f80 <HAL_ADC_Init+0x2c8>
 8001f46:	bf00      	nop
 8001f48:	24000004 	.word	0x24000004
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40022100 	.word	0x40022100
 8001f58:	58026000 	.word	0x58026000
 8001f5c:	40022300 	.word	0x40022300
 8001f60:	58026300 	.word	0x58026300
 8001f64:	fff0c003 	.word	0xfff0c003
 8001f68:	ffffbffc 	.word	0xffffbffc
 8001f6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 ffac 	bl	8002ef4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10c      	bne.n	8001fbe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f023 010f 	bic.w	r1, r3, #15
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	e007      	b.n	8001fce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020f 	bic.w	r2, r2, #15
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop

08001ffc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5c      	ldr	r2, [pc, #368]	; (800217c <HAL_ADC_Start+0x180>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_ADC_Start+0x1c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5b      	ldr	r2, [pc, #364]	; (8002180 <HAL_ADC_Start+0x184>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_ADC_Start+0x20>
 8002018:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <HAL_ADC_Start+0x188>)
 800201a:	e000      	b.n	800201e <HAL_ADC_Start+0x22>
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_ADC_Start+0x18c>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd58 	bl	8001ad4 <LL_ADC_GetMultimode>
 8002024:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fe1e 	bl	8001c6c <LL_ADC_REG_IsConversionOngoing>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 809a 	bne.w	800216c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Start+0x4a>
 8002042:	2302      	movs	r3, #2
 8002044:	e095      	b.n	8002172 <HAL_ADC_Start+0x176>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fdd2 	bl	8002bf8 <ADC_Enable>
 8002054:	4603      	mov	r3, r0
 8002056:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8081 	bne.w	8002162 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_ADC_Start+0x190>)
 8002066:	4013      	ands	r3, r2
 8002068:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <HAL_ADC_Start+0x184>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d002      	beq.n	8002080 <HAL_ADC_Start+0x84>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e000      	b.n	8002082 <HAL_ADC_Start+0x86>
 8002080:	4b3e      	ldr	r3, [pc, #248]	; (800217c <HAL_ADC_Start+0x180>)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4293      	cmp	r3, r2
 8002088:	d002      	beq.n	8002090 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f023 0206 	bic.w	r2, r3, #6
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	659a      	str	r2, [r3, #88]	; 0x58
 80020b6:	e002      	b.n	80020be <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	221c      	movs	r2, #28
 80020c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <HAL_ADC_Start+0x184>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d002      	beq.n	80020de <HAL_ADC_Start+0xe2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e000      	b.n	80020e0 <HAL_ADC_Start+0xe4>
 80020de:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_ADC_Start+0x180>)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d008      	beq.n	80020fa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d002      	beq.n	80020fa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	d114      	bne.n	8002124 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002110:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fd91 	bl	8001c44 <LL_ADC_REG_StartConversion>
 8002122:	e025      	b.n	8002170 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_ADC_Start+0x184>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d002      	beq.n	8002140 <HAL_ADC_Start+0x144>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	e000      	b.n	8002142 <HAL_ADC_Start+0x146>
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_ADC_Start+0x180>)
 8002142:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00f      	beq.n	8002170 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002158:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
 8002160:	e006      	b.n	8002170 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800216a:	e001      	b.n	8002170 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002170:	7dfb      	ldrb	r3, [r7, #23]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000
 8002180:	40022100 	.word	0x40022100
 8002184:	40022300 	.word	0x40022300
 8002188:	58026300 	.word	0x58026300
 800218c:	fffff0fe 	.word	0xfffff0fe

08002190 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_ADC_PollForConversion+0x1d8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_PollForConversion+0x1e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a70      	ldr	r2, [pc, #448]	; (800236c <HAL_ADC_PollForConversion+0x1dc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x22>
 80021ae:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_ADC_PollForConversion+0x1e0>)
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_PollForConversion+0x24>
 80021b2:	4b70      	ldr	r3, [pc, #448]	; (8002374 <HAL_ADC_PollForConversion+0x1e4>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fc8d 	bl	8001ad4 <LL_ADC_GetMultimode>
 80021ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d102      	bne.n	80021ca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021c4:	2308      	movs	r3, #8
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e037      	b.n	800223a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d002      	beq.n	80021dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d111      	bne.n	8002200 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f043 0220 	orr.w	r2, r3, #32
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0b1      	b.n	800235e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021fa:	2304      	movs	r3, #4
 80021fc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021fe:	e01c      	b.n	800223a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_ADC_PollForConversion+0x1d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_ADC_PollForConversion+0x84>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_ADC_PollForConversion+0x1dc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_ADC_PollForConversion+0x88>
 8002214:	4b56      	ldr	r3, [pc, #344]	; (8002370 <HAL_ADC_PollForConversion+0x1e0>)
 8002216:	e000      	b.n	800221a <HAL_ADC_PollForConversion+0x8a>
 8002218:	4b56      	ldr	r3, [pc, #344]	; (8002374 <HAL_ADC_PollForConversion+0x1e4>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc68 	bl	8001af0 <LL_ADC_GetMultiDMATransfer>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e093      	b.n	800235e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002236:	2304      	movs	r3, #4
 8002238:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800223a:	f7ff fae5 	bl	8001808 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002240:	e021      	b.n	8002286 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d01d      	beq.n	8002286 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800224a:	f7ff fadd 	bl	8001808 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <HAL_ADC_PollForConversion+0xd0>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d112      	bne.n	8002286 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e06b      	b.n	800235e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0d6      	beq.n	8002242 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fb73 	bl	8001990 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01c      	beq.n	80022ea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7d5b      	ldrb	r3, [r3, #21]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d118      	bne.n	80022ea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d111      	bne.n	80022ea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_ADC_PollForConversion+0x1dc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_PollForConversion+0x16a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	e000      	b.n	80022fc <HAL_ADC_PollForConversion+0x16c>
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_ADC_PollForConversion+0x1d8>)
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4293      	cmp	r3, r2
 8002302:	d008      	beq.n	8002316 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d002      	beq.n	8002316 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b09      	cmp	r3, #9
 8002314:	d104      	bne.n	8002320 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	e00c      	b.n	800233a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_ADC_PollForConversion+0x1dc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d002      	beq.n	8002330 <HAL_ADC_PollForConversion+0x1a0>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	e000      	b.n	8002332 <HAL_ADC_PollForConversion+0x1a2>
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_ADC_PollForConversion+0x1d8>)
 8002332:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d104      	bne.n	800234a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2208      	movs	r2, #8
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e008      	b.n	800235c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	220c      	movs	r2, #12
 800235a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000
 800236c:	40022100 	.word	0x40022100
 8002370:	40022300 	.word	0x40022300
 8002374:	58026300 	.word	0x58026300

08002378 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_ADC_Start_DMA+0x168>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_ADC_Start_DMA+0x20>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_ADC_Start_DMA+0x16c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_ADC_Start_DMA+0x24>
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_ADC_Start_DMA+0x170>)
 800239a:	e000      	b.n	800239e <HAL_ADC_Start_DMA+0x26>
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_ADC_Start_DMA+0x174>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fb98 	bl	8001ad4 <LL_ADC_GetMultimode>
 80023a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fc5e 	bl	8001c6c <LL_ADC_REG_IsConversionOngoing>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 808c 	bne.w	80024d0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Start_DMA+0x4e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e087      	b.n	80024d6 <HAL_ADC_Start_DMA+0x15e>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d002      	beq.n	80023e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b09      	cmp	r3, #9
 80023de:	d170      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fc09 	bl	8002bf8 <ADC_Enable>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d163      	bne.n	80024b8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023f4:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_ADC_Start_DMA+0x178>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a37      	ldr	r2, [pc, #220]	; (80024e4 <HAL_ADC_Start_DMA+0x16c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d002      	beq.n	8002410 <HAL_ADC_Start_DMA+0x98>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e000      	b.n	8002412 <HAL_ADC_Start_DMA+0x9a>
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_ADC_Start_DMA+0x168>)
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	4293      	cmp	r3, r2
 8002418:	d002      	beq.n	8002420 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f023 0206 	bic.w	r2, r3, #6
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	659a      	str	r2, [r3, #88]	; 0x58
 8002444:	e002      	b.n	800244c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <HAL_ADC_Start_DMA+0x17c>)
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <HAL_ADC_Start_DMA+0x180>)
 800245a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	4a26      	ldr	r2, [pc, #152]	; (80024fc <HAL_ADC_Start_DMA+0x184>)
 8002462:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	221c      	movs	r2, #28
 800246a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0210 	orr.w	r2, r2, #16
 8002482:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7ff fabd 	bl	8001a0e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3340      	adds	r3, #64	; 0x40
 800249e:	4619      	mov	r1, r3
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f001 fecc 	bl	8004240 <HAL_DMA_Start_IT>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fbc7 	bl	8001c44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024b6:	e00d      	b.n	80024d4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80024c0:	e008      	b.n	80024d4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024ce:	e001      	b.n	80024d4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
 80024d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022100 	.word	0x40022100
 80024e8:	40022300 	.word	0x40022300
 80024ec:	58026300 	.word	0x58026300
 80024f0:	fffff0fe 	.word	0xfffff0fe
 80024f4:	08002dcb 	.word	0x08002dcb
 80024f8:	08002ea3 	.word	0x08002ea3
 80024fc:	08002ebf 	.word	0x08002ebf

08002500 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b0a1      	sub	sp, #132	; 0x84
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a9d      	ldr	r2, [pc, #628]	; (80027e8 <HAL_ADC_ConfigChannel+0x290>)
 8002572:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x2a>
 800257e:	2302      	movs	r3, #2
 8002580:	e321      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x66e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb6c 	bl	8001c6c <LL_ADC_REG_IsConversionOngoing>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 8306 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d108      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x62>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2201      	movs	r2, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	e016      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x90>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ca:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2201      	movs	r2, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	69d1      	ldr	r1, [r2, #28]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	430b      	orrs	r3, r1
 80025f4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff f9d7 	bl	80019b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fb2d 	bl	8001c6c <LL_ADC_REG_IsConversionOngoing>
 8002612:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fb3a 	bl	8001c92 <LL_ADC_INJ_IsConversionOngoing>
 800261e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 80b3 	bne.w	800278e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 80af 	bne.w	800278e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	461a      	mov	r2, r3
 800263e:	f7ff f9f9 	bl	8001a34 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002642:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_ADC_ConfigChannel+0x294>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800264a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264e:	d10b      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x110>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	e01d      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x14c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_ADC_ConfigChannel+0x136>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	e00a      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x14c>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d027      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6919      	ldr	r1, [r3, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026bc:	f7ff f914 	bl	80018e8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7e5b      	ldrb	r3, [r3, #25]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x17e>
 80026d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x180>
 80026d6:	2300      	movs	r3, #0
 80026d8:	461a      	mov	r2, r3
 80026da:	f7ff f93e 	bl	800195a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7e1b      	ldrb	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x19c>
 80026ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x19e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	461a      	mov	r2, r3
 80026f8:	f7ff f916 	bl	8001928 <LL_ADC_SetDataRightShift>
 80026fc:	e047      	b.n	800278e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	069b      	lsls	r3, r3, #26
 800270e:	429a      	cmp	r2, r3
 8002710:	d107      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002720:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	069b      	lsls	r3, r3, #26
 8002732:	429a      	cmp	r2, r3
 8002734:	d107      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002744:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	069b      	lsls	r3, r3, #26
 8002756:	429a      	cmp	r2, r3
 8002758:	d107      	bne.n	800276a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002768:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	069b      	lsls	r3, r3, #26
 800277a:	429a      	cmp	r2, r3
 800277c:	d107      	bne.n	800278e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800278c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fa30 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 820d 	bne.w	8002bba <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f7ff f96d 	bl	8001a8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <HAL_ADC_ConfigChannel+0x290>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	f040 8133 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d110      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x298>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2b09      	cmp	r3, #9
 80027dc:	bf94      	ite	ls
 80027de:	2301      	movls	r3, #1
 80027e0:	2300      	movhi	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e01e      	b.n	8002824 <HAL_ADC_ConfigChannel+0x2cc>
 80027e6:	bf00      	nop
 80027e8:	47ff0000 	.word	0x47ff0000
 80027ec:	5c001000 	.word	0x5c001000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80027fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002800:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e003      	b.n	8002814 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2b09      	cmp	r3, #9
 800281c:	bf94      	ite	ls
 800281e:	2301      	movls	r3, #1
 8002820:	2300      	movhi	r3, #0
 8002822:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002824:	2b00      	cmp	r3, #0
 8002826:	d079      	beq.n	800291c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2ec>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	3301      	adds	r3, #1
 800283c:	069b      	lsls	r3, r3, #26
 800283e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002842:	e015      	b.n	8002870 <HAL_ADC_ConfigChannel+0x318>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x338>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	e017      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x368>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80028a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80028ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	ea42 0103 	orr.w	r1, r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x38e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0e9b      	lsrs	r3, r3, #26
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	051b      	lsls	r3, r3, #20
 80028e4:	e018      	b.n	8002918 <HAL_ADC_ConfigChannel+0x3c0>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80028fe:	2320      	movs	r3, #32
 8002900:	e003      	b.n	800290a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002918:	430b      	orrs	r3, r1
 800291a:	e07e      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x3e0>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	3301      	adds	r3, #1
 8002930:	069b      	lsls	r3, r3, #26
 8002932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002936:	e015      	b.n	8002964 <HAL_ADC_ConfigChannel+0x40c>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	069b      	lsls	r3, r3, #26
 8002960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x42c>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	3301      	adds	r3, #1
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	e017      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x45c>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	61bb      	str	r3, [r7, #24]
  return result;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800299c:	2320      	movs	r3, #32
 800299e:	e003      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	ea42 0103 	orr.w	r1, r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10d      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x488>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	3b1e      	subs	r3, #30
 80029d8:	051b      	lsls	r3, r3, #20
 80029da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029de:	e01b      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x4c0>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	60fb      	str	r3, [r7, #12]
  return result;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b1e      	subs	r3, #30
 8002a12:	051b      	lsls	r3, r3, #20
 8002a14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7ff f808 	bl	8001a34 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f280 80c6 	bge.w	8002bba <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a67      	ldr	r2, [pc, #412]	; (8002bd0 <HAL_ADC_ConfigChannel+0x678>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x4ea>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x4ee>
 8002a42:	4b65      	ldr	r3, [pc, #404]	; (8002bd8 <HAL_ADC_ConfigChannel+0x680>)
 8002a44:	e000      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x4f0>
 8002a46:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_ADC_ConfigChannel+0x684>)
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe ff3f 	bl	80018cc <LL_ADC_GetCommonPathInternalCh>
 8002a4e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a5e      	ldr	r2, [pc, #376]	; (8002bd0 <HAL_ADC_ConfigChannel+0x678>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x50c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10e      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x52a>
 8002a64:	485a      	ldr	r0, [pc, #360]	; (8002bd0 <HAL_ADC_ConfigChannel+0x678>)
 8002a66:	f7ff f8c7 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4859      	ldr	r0, [pc, #356]	; (8002bd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002a6e:	f7ff f8c3 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4323      	orrs	r3, r4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e008      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x53c>
 8002a82:	4857      	ldr	r0, [pc, #348]	; (8002be0 <HAL_ADC_ConfigChannel+0x688>)
 8002a84:	f7ff f8b8 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d07d      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_ADC_ConfigChannel+0x68c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d130      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x5ac>
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d12b      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_ADC_ConfigChannel+0x688>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f040 8081 	bne.w	8002bba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a44      	ldr	r2, [pc, #272]	; (8002bd0 <HAL_ADC_ConfigChannel+0x678>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x574>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a43      	ldr	r2, [pc, #268]	; (8002bd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x578>
 8002acc:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_ADC_ConfigChannel+0x680>)
 8002ace:	e000      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x57a>
 8002ad0:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <HAL_ADC_ConfigChannel+0x684>)
 8002ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7fe fee3 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_ADC_ConfigChannel+0x690>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	4a41      	ldr	r2, [pc, #260]	; (8002bec <HAL_ADC_ConfigChannel+0x694>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	3301      	adds	r3, #1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002af4:	e002      	b.n	8002afc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f9      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b02:	e05a      	b.n	8002bba <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <HAL_ADC_ConfigChannel+0x698>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d11e      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5f4>
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d119      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <HAL_ADC_ConfigChannel+0x688>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d14b      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <HAL_ADC_ConfigChannel+0x678>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x5de>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x5e2>
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <HAL_ADC_ConfigChannel+0x680>)
 8002b38:	e000      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x5e4>
 8002b3a:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <HAL_ADC_ConfigChannel+0x684>)
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f7fe feae 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b4a:	e036      	b.n	8002bba <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_ADC_ConfigChannel+0x69c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d131      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x662>
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d12c      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_ADC_ConfigChannel+0x688>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d127      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_ADC_ConfigChannel+0x678>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x626>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_ADC_ConfigChannel+0x67c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x62a>
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_ADC_ConfigChannel+0x680>)
 8002b80:	e000      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x62c>
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_ADC_ConfigChannel+0x684>)
 8002b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7fe fe8a 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
 8002b92:	e012      	b.n	8002bba <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ba6:	e008      	b.n	8002bba <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3784      	adds	r7, #132	; 0x84
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40022100 	.word	0x40022100
 8002bd8:	40022300 	.word	0x40022300
 8002bdc:	58026300 	.word	0x58026300
 8002be0:	58026000 	.word	0x58026000
 8002be4:	cb840000 	.word	0xcb840000
 8002be8:	24000004 	.word	0x24000004
 8002bec:	053e2d63 	.word	0x053e2d63
 8002bf0:	c7520000 	.word	0xc7520000
 8002bf4:	cfb80000 	.word	0xcfb80000

08002bf8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fff7 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d16e      	bne.n	8002cee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <ADC_Enable+0x100>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e05a      	b.n	8002cf0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe ffb2 	bl	8001ba8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c44:	f7fe fde0 	bl	8001808 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <ADC_Enable+0x104>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <ADC_Enable+0x66>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <ADC_Enable+0x108>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <ADC_Enable+0x6a>
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <ADC_Enable+0x10c>)
 8002c60:	e000      	b.n	8002c64 <ADC_Enable+0x6c>
 8002c62:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <ADC_Enable+0x110>)
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ff35 	bl	8001ad4 <LL_ADC_GetMultimode>
 8002c6a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <ADC_Enable+0x108>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d002      	beq.n	8002c7c <ADC_Enable+0x84>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e000      	b.n	8002c7e <ADC_Enable+0x86>
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <ADC_Enable+0x104>)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02c      	beq.n	8002ce0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d130      	bne.n	8002cee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c8c:	e028      	b.n	8002ce0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe ffb0 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ff80 	bl	8001ba8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca8:	f7fe fdae 	bl	8001808 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d914      	bls.n	8002ce0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d00d      	beq.n	8002ce0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d1cf      	bne.n	8002c8e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	8000003f 	.word	0x8000003f
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40022100 	.word	0x40022100
 8002d04:	40022300 	.word	0x40022300
 8002d08:	58026300 	.word	0x58026300

08002d0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe ff80 	bl	8001c1e <LL_ADC_IsDisableOngoing>
 8002d1e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ff67 	bl	8001bf8 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d047      	beq.n	8002dc0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d144      	bne.n	8002dc0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030d 	and.w	r3, r3, #13
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10c      	bne.n	8002d5e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe ff41 	bl	8001bd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2203      	movs	r2, #3
 8002d54:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d56:	f7fe fd57 	bl	8001808 <HAL_GetTick>
 8002d5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d5c:	e029      	b.n	8002db2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f043 0210 	orr.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e023      	b.n	8002dc2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d7a:	f7fe fd45 	bl	8001808 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d914      	bls.n	8002db2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e007      	b.n	8002dc2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1dc      	bne.n	8002d7a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d14b      	bne.n	8002e7c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d021      	beq.n	8002e42 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fdc4 	bl	8001990 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d032      	beq.n	8002e74 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12b      	bne.n	8002e74 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d11f      	bne.n	8002e74 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002e40:	e018      	b.n	8002e74 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d111      	bne.n	8002e74 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fb50 	bl	800251a <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e7a:	e00e      	b.n	8002e9a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff fb5a 	bl	8002542 <HAL_ADC_ErrorCallback>
}
 8002e8e:	e004      	b.n	8002e9a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fb3c 	bl	800252e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff fb2c 	bl	8002542 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a7a      	ldr	r2, [pc, #488]	; (80030ec <ADC_ConfigureBoostMode+0x1f8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <ADC_ConfigureBoostMode+0x1c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a79      	ldr	r2, [pc, #484]	; (80030f0 <ADC_ConfigureBoostMode+0x1fc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d109      	bne.n	8002f24 <ADC_ConfigureBoostMode+0x30>
 8002f10:	4b78      	ldr	r3, [pc, #480]	; (80030f4 <ADC_ConfigureBoostMode+0x200>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e008      	b.n	8002f36 <ADC_ConfigureBoostMode+0x42>
 8002f24:	4b74      	ldr	r3, [pc, #464]	; (80030f8 <ADC_ConfigureBoostMode+0x204>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01c      	beq.n	8002f74 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f3a:	f005 fb6d 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 8002f3e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f48:	d010      	beq.n	8002f6c <ADC_ConfigureBoostMode+0x78>
 8002f4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f4e:	d873      	bhi.n	8003038 <ADC_ConfigureBoostMode+0x144>
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d002      	beq.n	8002f5c <ADC_ConfigureBoostMode+0x68>
 8002f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f5a:	d16d      	bne.n	8003038 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	60fb      	str	r3, [r7, #12]
        break;
 8002f6a:	e068      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	60fb      	str	r3, [r7, #12]
        break;
 8002f72:	e064      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	f006 fdde 	bl	8009b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f80:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f8a:	d051      	beq.n	8003030 <ADC_ConfigureBoostMode+0x13c>
 8002f8c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f90:	d854      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002f92:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f96:	d047      	beq.n	8003028 <ADC_ConfigureBoostMode+0x134>
 8002f98:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f9c:	d84e      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002f9e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fa2:	d03d      	beq.n	8003020 <ADC_ConfigureBoostMode+0x12c>
 8002fa4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fa8:	d848      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fae:	d033      	beq.n	8003018 <ADC_ConfigureBoostMode+0x124>
 8002fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb4:	d842      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002fb6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fba:	d029      	beq.n	8003010 <ADC_ConfigureBoostMode+0x11c>
 8002fbc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fc0:	d83c      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002fc2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fc6:	d01a      	beq.n	8002ffe <ADC_ConfigureBoostMode+0x10a>
 8002fc8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fcc:	d836      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002fce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fd2:	d014      	beq.n	8002ffe <ADC_ConfigureBoostMode+0x10a>
 8002fd4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fd8:	d830      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fde:	d00e      	beq.n	8002ffe <ADC_ConfigureBoostMode+0x10a>
 8002fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe4:	d82a      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002fe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fea:	d008      	beq.n	8002ffe <ADC_ConfigureBoostMode+0x10a>
 8002fec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ff0:	d824      	bhi.n	800303c <ADC_ConfigureBoostMode+0x148>
 8002ff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff6:	d002      	beq.n	8002ffe <ADC_ConfigureBoostMode+0x10a>
 8002ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ffc:	d11e      	bne.n	800303c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e016      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
        break;
 8003016:	e012      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	60fb      	str	r3, [r7, #12]
        break;
 800301e:	e00e      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	60fb      	str	r3, [r7, #12]
        break;
 8003026:	e00a      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	09db      	lsrs	r3, r3, #7
 800302c:	60fb      	str	r3, [r7, #12]
        break;
 800302e:	e006      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	60fb      	str	r3, [r7, #12]
        break;
 8003036:	e002      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800303c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800303e:	f7fe fc13 	bl	8001868 <HAL_GetREVID>
 8003042:	4603      	mov	r3, r0
 8003044:	f241 0203 	movw	r2, #4099	; 0x1003
 8003048:	4293      	cmp	r3, r2
 800304a:	d815      	bhi.n	8003078 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <ADC_ConfigureBoostMode+0x208>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d908      	bls.n	8003066 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003062:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003064:	e03e      	b.n	80030e4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003074:	609a      	str	r2, [r3, #8]
}
 8003076:	e035      	b.n	80030e4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <ADC_ConfigureBoostMode+0x20c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d808      	bhi.n	8003098 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003094:	609a      	str	r2, [r3, #8]
}
 8003096:	e025      	b.n	80030e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <ADC_ConfigureBoostMode+0x210>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d80a      	bhi.n	80030b6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	e016      	b.n	80030e4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <ADC_ConfigureBoostMode+0x214>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d80a      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d0:	609a      	str	r2, [r3, #8]
}
 80030d2:	e007      	b.n	80030e4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40022100 	.word	0x40022100
 80030f4:	40022300 	.word	0x40022300
 80030f8:	58026300 	.word	0x58026300
 80030fc:	01312d00 	.word	0x01312d00
 8003100:	005f5e10 	.word	0x005f5e10
 8003104:	00bebc20 	.word	0x00bebc20
 8003108:	017d7840 	.word	0x017d7840

0800310c <LL_ADC_IsEnabled>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <LL_ADC_IsEnabled+0x18>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <LL_ADC_IsEnabled+0x1a>
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <LL_ADC_StartCalibration>:
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <LL_ADC_StartCalibration+0x38>)
 8003146:	4013      	ands	r3, r2
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003154:	430a      	orrs	r2, r1
 8003156:	4313      	orrs	r3, r2
 8003158:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	3ffeffc0 	.word	0x3ffeffc0

08003170 <LL_ADC_IsCalibrationOnGoing>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003184:	d101      	bne.n	800318a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_REG_IsConversionOngoing>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d101      	bne.n	80031b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_ADCEx_Calibration_Start+0x1e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e04c      	b.n	8003278 <HAL_ADCEx_Calibration_Start+0xb8>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fd90 	bl	8002d0c <ADC_Disable>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d135      	bne.n	8003262 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <HAL_ADCEx_Calibration_Start+0xc0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	f043 0202 	orr.w	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff90 	bl	8003134 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003214:	e014      	b.n	8003240 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	3301      	adds	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d30d      	bcc.n	8003240 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f023 0312 	bic.w	r3, r3, #18
 800322c:	f043 0210 	orr.w	r2, r3, #16
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e01b      	b.n	8003278 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff93 	bl	8003170 <LL_ADC_IsCalibrationOnGoing>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e2      	bne.n	8003216 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f023 0303 	bic.w	r3, r3, #3
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
 8003260:	e005      	b.n	800326e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	ffffeefd 	.word	0xffffeefd
 8003284:	25c3f800 	.word	0x25c3f800

08003288 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b09f      	sub	sp, #124	; 0x7c
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0be      	b.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5c      	ldr	r2, [pc, #368]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d102      	bne.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032c0:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	e001      	b.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e09d      	b.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff54 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 80032f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff4e 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d17f      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003304:	2b00      	cmp	r3, #0
 8003306:	d17c      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800331c:	4b45      	ldr	r3, [pc, #276]	; (8003434 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800331e:	e000      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003320:	4b45      	ldr	r3, [pc, #276]	; (8003438 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003322:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d039      	beq.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800332c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	431a      	orrs	r2, r3
 800333a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3a      	ldr	r2, [pc, #232]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10e      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003352:	4836      	ldr	r0, [pc, #216]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003354:	f7ff feda 	bl	800310c <LL_ADC_IsEnabled>
 8003358:	4604      	mov	r4, r0
 800335a:	4835      	ldr	r0, [pc, #212]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800335c:	f7ff fed6 	bl	800310c <LL_ADC_IsEnabled>
 8003360:	4603      	mov	r3, r0
 8003362:	4323      	orrs	r3, r4
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e008      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003370:	4832      	ldr	r0, [pc, #200]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003372:	f7ff fecb 	bl	800310c <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d047      	beq.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800338c:	4013      	ands	r3, r2
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	430a      	orrs	r2, r1
 8003398:	431a      	orrs	r2, r3
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800339e:	e03a      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80033a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1e      	ldr	r2, [pc, #120]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10e      	bne.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80033c0:	481a      	ldr	r0, [pc, #104]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033c2:	f7ff fea3 	bl	800310c <LL_ADC_IsEnabled>
 80033c6:	4604      	mov	r4, r0
 80033c8:	4819      	ldr	r0, [pc, #100]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033ca:	f7ff fe9f 	bl	800310c <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4323      	orrs	r3, r4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e008      	b.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033de:	4817      	ldr	r0, [pc, #92]	; (800343c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033e0:	f7ff fe94 	bl	800310c <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003400:	e009      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003414:	e000      	b.n	8003418 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003416:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003420:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003424:	4618      	mov	r0, r3
 8003426:	377c      	adds	r7, #124	; 0x7c
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	40022000 	.word	0x40022000
 8003430:	40022100 	.word	0x40022100
 8003434:	40022300 	.word	0x40022300
 8003438:	58026300 	.word	0x58026300
 800343c:	58026000 	.word	0x58026000
 8003440:	fffff0e0 	.word	0xfffff0e0

08003444 <__NVIC_SetPriorityGrouping>:
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <__NVIC_SetPriorityGrouping+0x40>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <__NVIC_SetPriorityGrouping+0x40>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00
 8003488:	05fa0000 	.word	0x05fa0000

0800348c <__NVIC_GetPriorityGrouping>:
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <__NVIC_EnableIRQ+0x38>)
 80034c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <__NVIC_SetPriority>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db0a      	blt.n	800350e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <__NVIC_SetPriority+0x4c>)
 80034fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800350c:	e00a      	b.n	8003524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <__NVIC_SetPriority+0x50>)
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3b04      	subs	r3, #4
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	440b      	add	r3, r1
 8003522:	761a      	strb	r2, [r3, #24]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <NVIC_EncodePriority>:
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	bf28      	it	cs
 8003556:	2304      	movcs	r3, #4
 8003558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3304      	adds	r3, #4
 800355e:	2b06      	cmp	r3, #6
 8003560:	d902      	bls.n	8003568 <NVIC_EncodePriority+0x30>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3b03      	subs	r3, #3
 8003566:	e000      	b.n	800356a <NVIC_EncodePriority+0x32>
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	f04f 32ff 	mov.w	r2, #4294967295
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	43d9      	mvns	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	4313      	orrs	r3, r2
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff4c 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c2:	f7ff ff63 	bl	800348c <__NVIC_GetPriorityGrouping>
 80035c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f7ff ffb3 	bl	8003538 <NVIC_EncodePriority>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff82 	bl	80034e4 <__NVIC_SetPriority>
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff56 	bl	80034a8 <__NVIC_EnableIRQ>
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003608:	f3bf 8f5f 	dmb	sy
}
 800360c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <HAL_MPU_Disable+0x28>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	4a06      	ldr	r2, [pc, #24]	; (800362c <HAL_MPU_Disable+0x28>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003618:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_MPU_Disable+0x2c>)
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00
 8003630:	e000ed90 	.word	0xe000ed90

08003634 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <HAL_MPU_Enable+0x38>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_MPU_Enable+0x3c>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_MPU_Enable+0x3c>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003652:	f3bf 8f4f 	dsb	sy
}
 8003656:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003658:	f3bf 8f6f 	isb	sy
}
 800365c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed90 	.word	0xe000ed90
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	785a      	ldrb	r2, [r3, #1]
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_MPU_ConfigRegion+0x84>)
 8003682:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d029      	beq.n	80036e0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800368c:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <HAL_MPU_ConfigRegion+0x84>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7b1b      	ldrb	r3, [r3, #12]
 8003698:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7adb      	ldrb	r3, [r3, #11]
 800369e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7a9b      	ldrb	r3, [r3, #10]
 80036a6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7b5b      	ldrb	r3, [r3, #13]
 80036ae:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7b9b      	ldrb	r3, [r3, #14]
 80036b6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80036b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7bdb      	ldrb	r3, [r3, #15]
 80036be:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80036c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7a5b      	ldrb	r3, [r3, #9]
 80036c6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80036c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7a1b      	ldrb	r3, [r3, #8]
 80036ce:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80036d0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036da:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036dc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80036de:	e005      	b.n	80036ec <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_MPU_ConfigRegion+0x84>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_MPU_ConfigRegion+0x84>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed90 	.word	0xe000ed90

080036fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e014      	b.n	8003738 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	791b      	ldrb	r3, [r3, #4]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fc ffee 	bl	8000700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	795b      	ldrb	r3, [r3, #5]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_DAC_Start+0x16>
 8003752:	2302      	movs	r3, #2
 8003754:	e040      	b.n	80037d8 <HAL_DAC_Start+0x98>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2201      	movs	r2, #1
 8003770:	409a      	lsls	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800378a:	2b02      	cmp	r3, #2
 800378c:	d11d      	bne.n	80037ca <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e014      	b.n	80037ca <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2102      	movs	r1, #2
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d107      	bne.n	80037ca <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0202 	orr.w	r2, r2, #2
 80037c8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fa:	d120      	bne.n	800383e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380a:	d118      	bne.n	800383e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003836:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f852 	bl	80038e2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384c:	d120      	bne.n	8003890 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800385c:	d118      	bne.n	8003890 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2204      	movs	r2, #4
 8003862:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f043 0202 	orr.w	r2, r3, #2
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003888:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f972 	bl	8003b74 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	3308      	adds	r3, #8
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	e004      	b.n	80038cc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3314      	adds	r3, #20
 80038ca:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	461a      	mov	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	795b      	ldrb	r3, [r3, #5]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_DAC_ConfigChannel+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e12a      	b.n	8003b66 <HAL_DAC_ConfigChannel+0x26e>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	f040 8081 	bne.w	8003a28 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003926:	f7fd ff6f 	bl	8001808 <HAL_GetTick>
 800392a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d140      	bne.n	80039b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003932:	e018      	b.n	8003966 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003934:	f7fd ff68 	bl	8001808 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d911      	bls.n	8003966 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003948:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <HAL_DAC_ConfigChannel+0x278>)
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f043 0208 	orr.w	r2, r3, #8
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2203      	movs	r2, #3
 8003960:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0ff      	b.n	8003b66 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396c:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <HAL_DAC_ConfigChannel+0x278>)
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1df      	bne.n	8003934 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003974:	2001      	movs	r0, #1
 8003976:	f7fd ff53 	bl	8001820 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	6992      	ldr	r2, [r2, #24]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
 8003984:	e023      	b.n	80039ce <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003986:	f7fd ff3f 	bl	8001808 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d90f      	bls.n	80039b4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	2b00      	cmp	r3, #0
 800399c:	da0a      	bge.n	80039b4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f043 0208 	orr.w	r2, r3, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2203      	movs	r2, #3
 80039ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0d8      	b.n	8003b66 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	dbe3      	blt.n	8003986 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80039be:	2001      	movs	r0, #1
 80039c0:	f7fd ff2e 	bl	8001820 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	6992      	ldr	r2, [r2, #24]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	ea02 0103 	and.w	r1, r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	21ff      	movs	r1, #255	; 0xff
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	ea02 0103 	and.w	r1, r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d11d      	bne.n	8003a6c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	221f      	movs	r2, #31
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e00f      	b.n	8003ab6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d102      	bne.n	8003aa4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e008      	b.n	8003ab6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003aac:	2301      	movs	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e001      	b.n	8003ab6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6819      	ldr	r1, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43da      	mvns	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	22c0      	movs	r2, #192	; 0xc0
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20008000 	.word	0x20008000

08003b74 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b90:	f7fd fe3a 	bl	8001808 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e316      	b.n	80041ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a66      	ldr	r2, [pc, #408]	; (8003d40 <HAL_DMA_Init+0x1b8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04a      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a65      	ldr	r2, [pc, #404]	; (8003d44 <HAL_DMA_Init+0x1bc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d045      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a63      	ldr	r2, [pc, #396]	; (8003d48 <HAL_DMA_Init+0x1c0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a62      	ldr	r2, [pc, #392]	; (8003d4c <HAL_DMA_Init+0x1c4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d03b      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a60      	ldr	r2, [pc, #384]	; (8003d50 <HAL_DMA_Init+0x1c8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d036      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <HAL_DMA_Init+0x1cc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a5d      	ldr	r2, [pc, #372]	; (8003d58 <HAL_DMA_Init+0x1d0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02c      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a5c      	ldr	r2, [pc, #368]	; (8003d5c <HAL_DMA_Init+0x1d4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d027      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a5a      	ldr	r2, [pc, #360]	; (8003d60 <HAL_DMA_Init+0x1d8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a59      	ldr	r2, [pc, #356]	; (8003d64 <HAL_DMA_Init+0x1dc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01d      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_DMA_Init+0x1e0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a56      	ldr	r2, [pc, #344]	; (8003d6c <HAL_DMA_Init+0x1e4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a54      	ldr	r2, [pc, #336]	; (8003d70 <HAL_DMA_Init+0x1e8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a53      	ldr	r2, [pc, #332]	; (8003d74 <HAL_DMA_Init+0x1ec>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <HAL_DMA_Init+0x1f0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_Init+0xb8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a50      	ldr	r2, [pc, #320]	; (8003d7c <HAL_DMA_Init+0x1f4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_DMA_Init+0xbc>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_DMA_Init+0xbe>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 813b 	beq.w	8003ec2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a37      	ldr	r2, [pc, #220]	; (8003d40 <HAL_DMA_Init+0x1b8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04a      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a36      	ldr	r2, [pc, #216]	; (8003d44 <HAL_DMA_Init+0x1bc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d045      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a34      	ldr	r2, [pc, #208]	; (8003d48 <HAL_DMA_Init+0x1c0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d040      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <HAL_DMA_Init+0x1c4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d03b      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_DMA_Init+0x1c8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d036      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <HAL_DMA_Init+0x1cc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d031      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2e      	ldr	r2, [pc, #184]	; (8003d58 <HAL_DMA_Init+0x1d0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02c      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_DMA_Init+0x1d4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <HAL_DMA_Init+0x1d8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <HAL_DMA_Init+0x1dc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <HAL_DMA_Init+0x1e0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_DMA_Init+0x1e4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <HAL_DMA_Init+0x1e8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <HAL_DMA_Init+0x1ec>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <HAL_DMA_Init+0x1f0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_Init+0x174>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_DMA_Init+0x1f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d108      	bne.n	8003d0e <HAL_DMA_Init+0x186>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <HAL_DMA_Init+0x196>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d1e:	e02f      	b.n	8003d80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d20:	f7fd fd72 	bl	8001808 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d928      	bls.n	8003d80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2203      	movs	r2, #3
 8003d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e246      	b.n	80041ce <HAL_DMA_Init+0x646>
 8003d40:	40020010 	.word	0x40020010
 8003d44:	40020028 	.word	0x40020028
 8003d48:	40020040 	.word	0x40020040
 8003d4c:	40020058 	.word	0x40020058
 8003d50:	40020070 	.word	0x40020070
 8003d54:	40020088 	.word	0x40020088
 8003d58:	400200a0 	.word	0x400200a0
 8003d5c:	400200b8 	.word	0x400200b8
 8003d60:	40020410 	.word	0x40020410
 8003d64:	40020428 	.word	0x40020428
 8003d68:	40020440 	.word	0x40020440
 8003d6c:	40020458 	.word	0x40020458
 8003d70:	40020470 	.word	0x40020470
 8003d74:	40020488 	.word	0x40020488
 8003d78:	400204a0 	.word	0x400204a0
 8003d7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1c8      	bne.n	8003d20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_DMA_Init+0x420>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003da6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dbe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003de4:	4b71      	ldr	r3, [pc, #452]	; (8003fac <HAL_DMA_Init+0x424>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b71      	ldr	r3, [pc, #452]	; (8003fb0 <HAL_DMA_Init+0x428>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df0:	d328      	bcc.n	8003e44 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b28      	cmp	r3, #40	; 0x28
 8003df8:	d903      	bls.n	8003e02 <HAL_DMA_Init+0x27a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d917      	bls.n	8003e32 <HAL_DMA_Init+0x2aa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b3e      	cmp	r3, #62	; 0x3e
 8003e08:	d903      	bls.n	8003e12 <HAL_DMA_Init+0x28a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b42      	cmp	r3, #66	; 0x42
 8003e10:	d90f      	bls.n	8003e32 <HAL_DMA_Init+0x2aa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b46      	cmp	r3, #70	; 0x46
 8003e18:	d903      	bls.n	8003e22 <HAL_DMA_Init+0x29a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b48      	cmp	r3, #72	; 0x48
 8003e20:	d907      	bls.n	8003e32 <HAL_DMA_Init+0x2aa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b4e      	cmp	r3, #78	; 0x4e
 8003e28:	d905      	bls.n	8003e36 <HAL_DMA_Init+0x2ae>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b52      	cmp	r3, #82	; 0x52
 8003e30:	d801      	bhi.n	8003e36 <HAL_DMA_Init+0x2ae>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_DMA_Init+0x2b0>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0307 	bic.w	r3, r3, #7
 8003e5a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d117      	bne.n	8003e9e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 fdcf 	bl	8005a24 <DMA_CheckFifoParam>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2240      	movs	r2, #64	; 0x40
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e197      	b.n	80041ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 fd0a 	bl	80058c0 <DMA_CalcBaseAndBitshift>
 8003eac:	4603      	mov	r3, r0
 8003eae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	223f      	movs	r2, #63	; 0x3f
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	e0cd      	b.n	800405e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <HAL_DMA_Init+0x42c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d022      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a39      	ldr	r2, [pc, #228]	; (8003fb8 <HAL_DMA_Init+0x430>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_DMA_Init+0x434>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <HAL_DMA_Init+0x438>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a35      	ldr	r2, [pc, #212]	; (8003fc4 <HAL_DMA_Init+0x43c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a33      	ldr	r2, [pc, #204]	; (8003fc8 <HAL_DMA_Init+0x440>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <HAL_DMA_Init+0x444>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_DMA_Init+0x38a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a30      	ldr	r2, [pc, #192]	; (8003fd0 <HAL_DMA_Init+0x448>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_DMA_Init+0x38e>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_DMA_Init+0x390>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8097 	beq.w	800404c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <HAL_DMA_Init+0x42c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d021      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_DMA_Init+0x430>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01c      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <HAL_DMA_Init+0x434>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d017      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_DMA_Init+0x438>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d012      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_DMA_Init+0x43c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00d      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_DMA_Init+0x440>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d008      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_DMA_Init+0x444>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_Init+0x3e4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_DMA_Init+0x448>)
 8003f6a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_DMA_Init+0x44c>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d021      	beq.n	8003fd8 <HAL_DMA_Init+0x450>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d102      	bne.n	8003fa2 <HAL_DMA_Init+0x41a>
 8003f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fa0:	e01b      	b.n	8003fda <HAL_DMA_Init+0x452>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e019      	b.n	8003fda <HAL_DMA_Init+0x452>
 8003fa6:	bf00      	nop
 8003fa8:	fe10803f 	.word	0xfe10803f
 8003fac:	5c001000 	.word	0x5c001000
 8003fb0:	ffff0000 	.word	0xffff0000
 8003fb4:	58025408 	.word	0x58025408
 8003fb8:	5802541c 	.word	0x5802541c
 8003fbc:	58025430 	.word	0x58025430
 8003fc0:	58025444 	.word	0x58025444
 8003fc4:	58025458 	.word	0x58025458
 8003fc8:	5802546c 	.word	0x5802546c
 8003fcc:	58025480 	.word	0x58025480
 8003fd0:	58025494 	.word	0x58025494
 8003fd4:	fffe000f 	.word	0xfffe000f
 8003fd8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fe0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fe8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004008:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	4b6e      	ldr	r3, [pc, #440]	; (80041d8 <HAL_DMA_Init+0x650>)
 8004020:	4413      	add	r3, r2
 8004022:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <HAL_DMA_Init+0x654>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f001 fc45 	bl	80058c0 <DMA_CalcBaseAndBitshift>
 8004036:	4603      	mov	r3, r0
 8004038:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2201      	movs	r2, #1
 8004044:	409a      	lsls	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	e008      	b.n	800405e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2203      	movs	r2, #3
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0b7      	b.n	80041ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5f      	ldr	r2, [pc, #380]	; (80041e0 <HAL_DMA_Init+0x658>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d072      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5d      	ldr	r2, [pc, #372]	; (80041e4 <HAL_DMA_Init+0x65c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d06d      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5c      	ldr	r2, [pc, #368]	; (80041e8 <HAL_DMA_Init+0x660>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d068      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5a      	ldr	r2, [pc, #360]	; (80041ec <HAL_DMA_Init+0x664>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d063      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a59      	ldr	r2, [pc, #356]	; (80041f0 <HAL_DMA_Init+0x668>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d05e      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a57      	ldr	r2, [pc, #348]	; (80041f4 <HAL_DMA_Init+0x66c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d059      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a56      	ldr	r2, [pc, #344]	; (80041f8 <HAL_DMA_Init+0x670>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d054      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a54      	ldr	r2, [pc, #336]	; (80041fc <HAL_DMA_Init+0x674>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d04f      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a53      	ldr	r2, [pc, #332]	; (8004200 <HAL_DMA_Init+0x678>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a51      	ldr	r2, [pc, #324]	; (8004204 <HAL_DMA_Init+0x67c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a50      	ldr	r2, [pc, #320]	; (8004208 <HAL_DMA_Init+0x680>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a4e      	ldr	r2, [pc, #312]	; (800420c <HAL_DMA_Init+0x684>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4d      	ldr	r2, [pc, #308]	; (8004210 <HAL_DMA_Init+0x688>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a4b      	ldr	r2, [pc, #300]	; (8004214 <HAL_DMA_Init+0x68c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4a      	ldr	r2, [pc, #296]	; (8004218 <HAL_DMA_Init+0x690>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a48      	ldr	r2, [pc, #288]	; (800421c <HAL_DMA_Init+0x694>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a47      	ldr	r2, [pc, #284]	; (8004220 <HAL_DMA_Init+0x698>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a45      	ldr	r2, [pc, #276]	; (8004224 <HAL_DMA_Init+0x69c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a44      	ldr	r2, [pc, #272]	; (8004228 <HAL_DMA_Init+0x6a0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_DMA_Init+0x6a4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a41      	ldr	r2, [pc, #260]	; (8004230 <HAL_DMA_Init+0x6a8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <HAL_DMA_Init+0x6ac>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3e      	ldr	r2, [pc, #248]	; (8004238 <HAL_DMA_Init+0x6b0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_Init+0x5c6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a3c      	ldr	r2, [pc, #240]	; (800423c <HAL_DMA_Init+0x6b4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_DMA_Init+0x5ca>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_DMA_Init+0x5cc>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d032      	beq.n	80041be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 fcdf 	bl	8005b1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d102      	bne.n	800416c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004180:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_DMA_Init+0x624>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b08      	cmp	r3, #8
 8004190:	d80c      	bhi.n	80041ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f001 fd5c 	bl	8005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	e008      	b.n	80041be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	a7fdabf8 	.word	0xa7fdabf8
 80041dc:	cccccccd 	.word	0xcccccccd
 80041e0:	40020010 	.word	0x40020010
 80041e4:	40020028 	.word	0x40020028
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40020058 	.word	0x40020058
 80041f0:	40020070 	.word	0x40020070
 80041f4:	40020088 	.word	0x40020088
 80041f8:	400200a0 	.word	0x400200a0
 80041fc:	400200b8 	.word	0x400200b8
 8004200:	40020410 	.word	0x40020410
 8004204:	40020428 	.word	0x40020428
 8004208:	40020440 	.word	0x40020440
 800420c:	40020458 	.word	0x40020458
 8004210:	40020470 	.word	0x40020470
 8004214:	40020488 	.word	0x40020488
 8004218:	400204a0 	.word	0x400204a0
 800421c:	400204b8 	.word	0x400204b8
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494

08004240 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e226      	b.n	80046aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_DMA_Start_IT+0x2a>
 8004266:	2302      	movs	r3, #2
 8004268:	e21f      	b.n	80046aa <HAL_DMA_Start_IT+0x46a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	f040 820a 	bne.w	8004694 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a68      	ldr	r2, [pc, #416]	; (8004434 <HAL_DMA_Start_IT+0x1f4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d04a      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a66      	ldr	r2, [pc, #408]	; (8004438 <HAL_DMA_Start_IT+0x1f8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d045      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a65      	ldr	r2, [pc, #404]	; (800443c <HAL_DMA_Start_IT+0x1fc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d040      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a63      	ldr	r2, [pc, #396]	; (8004440 <HAL_DMA_Start_IT+0x200>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d03b      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a62      	ldr	r2, [pc, #392]	; (8004444 <HAL_DMA_Start_IT+0x204>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d036      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a60      	ldr	r2, [pc, #384]	; (8004448 <HAL_DMA_Start_IT+0x208>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d031      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5f      	ldr	r2, [pc, #380]	; (800444c <HAL_DMA_Start_IT+0x20c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d02c      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5d      	ldr	r2, [pc, #372]	; (8004450 <HAL_DMA_Start_IT+0x210>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d027      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a5c      	ldr	r2, [pc, #368]	; (8004454 <HAL_DMA_Start_IT+0x214>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5a      	ldr	r2, [pc, #360]	; (8004458 <HAL_DMA_Start_IT+0x218>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01d      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a59      	ldr	r2, [pc, #356]	; (800445c <HAL_DMA_Start_IT+0x21c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a57      	ldr	r2, [pc, #348]	; (8004460 <HAL_DMA_Start_IT+0x220>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a56      	ldr	r2, [pc, #344]	; (8004464 <HAL_DMA_Start_IT+0x224>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a54      	ldr	r2, [pc, #336]	; (8004468 <HAL_DMA_Start_IT+0x228>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a53      	ldr	r2, [pc, #332]	; (800446c <HAL_DMA_Start_IT+0x22c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_DMA_Start_IT+0xee>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a51      	ldr	r2, [pc, #324]	; (8004470 <HAL_DMA_Start_IT+0x230>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d108      	bne.n	8004340 <HAL_DMA_Start_IT+0x100>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e007      	b.n	8004350 <HAL_DMA_Start_IT+0x110>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f001 f906 	bl	8005568 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a34      	ldr	r2, [pc, #208]	; (8004434 <HAL_DMA_Start_IT+0x1f4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d04a      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a33      	ldr	r2, [pc, #204]	; (8004438 <HAL_DMA_Start_IT+0x1f8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d045      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <HAL_DMA_Start_IT+0x1fc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d040      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a30      	ldr	r2, [pc, #192]	; (8004440 <HAL_DMA_Start_IT+0x200>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d03b      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <HAL_DMA_Start_IT+0x204>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d036      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <HAL_DMA_Start_IT+0x208>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d031      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2b      	ldr	r2, [pc, #172]	; (800444c <HAL_DMA_Start_IT+0x20c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02c      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2a      	ldr	r2, [pc, #168]	; (8004450 <HAL_DMA_Start_IT+0x210>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d027      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a28      	ldr	r2, [pc, #160]	; (8004454 <HAL_DMA_Start_IT+0x214>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d022      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a27      	ldr	r2, [pc, #156]	; (8004458 <HAL_DMA_Start_IT+0x218>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d01d      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a25      	ldr	r2, [pc, #148]	; (800445c <HAL_DMA_Start_IT+0x21c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d018      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a24      	ldr	r2, [pc, #144]	; (8004460 <HAL_DMA_Start_IT+0x220>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a22      	ldr	r2, [pc, #136]	; (8004464 <HAL_DMA_Start_IT+0x224>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a21      	ldr	r2, [pc, #132]	; (8004468 <HAL_DMA_Start_IT+0x228>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1f      	ldr	r2, [pc, #124]	; (800446c <HAL_DMA_Start_IT+0x22c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_DMA_Start_IT+0x1bc>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_DMA_Start_IT+0x230>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d101      	bne.n	8004400 <HAL_DMA_Start_IT+0x1c0>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_DMA_Start_IT+0x1c2>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d036      	beq.n	8004474 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 021e 	bic.w	r2, r3, #30
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0216 	orr.w	r2, r2, #22
 8004418:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03e      	beq.n	80044a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0208 	orr.w	r2, r2, #8
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e035      	b.n	80044a0 <HAL_DMA_Start_IT+0x260>
 8004434:	40020010 	.word	0x40020010
 8004438:	40020028 	.word	0x40020028
 800443c:	40020040 	.word	0x40020040
 8004440:	40020058 	.word	0x40020058
 8004444:	40020070 	.word	0x40020070
 8004448:	40020088 	.word	0x40020088
 800444c:	400200a0 	.word	0x400200a0
 8004450:	400200b8 	.word	0x400200b8
 8004454:	40020410 	.word	0x40020410
 8004458:	40020428 	.word	0x40020428
 800445c:	40020440 	.word	0x40020440
 8004460:	40020458 	.word	0x40020458
 8004464:	40020470 	.word	0x40020470
 8004468:	40020488 	.word	0x40020488
 800446c:	400204a0 	.word	0x400204a0
 8004470:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 020e 	bic.w	r2, r3, #14
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 020a 	orr.w	r2, r2, #10
 8004486:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0204 	orr.w	r2, r2, #4
 800449e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a83      	ldr	r2, [pc, #524]	; (80046b4 <HAL_DMA_Start_IT+0x474>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d072      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a82      	ldr	r2, [pc, #520]	; (80046b8 <HAL_DMA_Start_IT+0x478>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d06d      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a80      	ldr	r2, [pc, #512]	; (80046bc <HAL_DMA_Start_IT+0x47c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d068      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7f      	ldr	r2, [pc, #508]	; (80046c0 <HAL_DMA_Start_IT+0x480>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d063      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a7d      	ldr	r2, [pc, #500]	; (80046c4 <HAL_DMA_Start_IT+0x484>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d05e      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7c      	ldr	r2, [pc, #496]	; (80046c8 <HAL_DMA_Start_IT+0x488>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d059      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7a      	ldr	r2, [pc, #488]	; (80046cc <HAL_DMA_Start_IT+0x48c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d054      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a79      	ldr	r2, [pc, #484]	; (80046d0 <HAL_DMA_Start_IT+0x490>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d04f      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a77      	ldr	r2, [pc, #476]	; (80046d4 <HAL_DMA_Start_IT+0x494>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d04a      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a76      	ldr	r2, [pc, #472]	; (80046d8 <HAL_DMA_Start_IT+0x498>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d045      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a74      	ldr	r2, [pc, #464]	; (80046dc <HAL_DMA_Start_IT+0x49c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d040      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a73      	ldr	r2, [pc, #460]	; (80046e0 <HAL_DMA_Start_IT+0x4a0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d03b      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a71      	ldr	r2, [pc, #452]	; (80046e4 <HAL_DMA_Start_IT+0x4a4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d036      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a70      	ldr	r2, [pc, #448]	; (80046e8 <HAL_DMA_Start_IT+0x4a8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d031      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6e      	ldr	r2, [pc, #440]	; (80046ec <HAL_DMA_Start_IT+0x4ac>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02c      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6d      	ldr	r2, [pc, #436]	; (80046f0 <HAL_DMA_Start_IT+0x4b0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d027      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a6b      	ldr	r2, [pc, #428]	; (80046f4 <HAL_DMA_Start_IT+0x4b4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6a      	ldr	r2, [pc, #424]	; (80046f8 <HAL_DMA_Start_IT+0x4b8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d01d      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a68      	ldr	r2, [pc, #416]	; (80046fc <HAL_DMA_Start_IT+0x4bc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a67      	ldr	r2, [pc, #412]	; (8004700 <HAL_DMA_Start_IT+0x4c0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a65      	ldr	r2, [pc, #404]	; (8004704 <HAL_DMA_Start_IT+0x4c4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a64      	ldr	r2, [pc, #400]	; (8004708 <HAL_DMA_Start_IT+0x4c8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a62      	ldr	r2, [pc, #392]	; (800470c <HAL_DMA_Start_IT+0x4cc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_DMA_Start_IT+0x350>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a61      	ldr	r2, [pc, #388]	; (8004710 <HAL_DMA_Start_IT+0x4d0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_DMA_Start_IT+0x354>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_DMA_Start_IT+0x356>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <HAL_DMA_Start_IT+0x474>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d04a      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a36      	ldr	r2, [pc, #216]	; (80046b8 <HAL_DMA_Start_IT+0x478>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d045      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a34      	ldr	r2, [pc, #208]	; (80046bc <HAL_DMA_Start_IT+0x47c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d040      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a33      	ldr	r2, [pc, #204]	; (80046c0 <HAL_DMA_Start_IT+0x480>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d03b      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a31      	ldr	r2, [pc, #196]	; (80046c4 <HAL_DMA_Start_IT+0x484>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d036      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a30      	ldr	r2, [pc, #192]	; (80046c8 <HAL_DMA_Start_IT+0x488>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d031      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2e      	ldr	r2, [pc, #184]	; (80046cc <HAL_DMA_Start_IT+0x48c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02c      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <HAL_DMA_Start_IT+0x490>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d027      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <HAL_DMA_Start_IT+0x494>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <HAL_DMA_Start_IT+0x498>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d01d      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_DMA_Start_IT+0x49c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <HAL_DMA_Start_IT+0x4a0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <HAL_DMA_Start_IT+0x4a4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_DMA_Start_IT+0x4a8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_DMA_Start_IT+0x4ac>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_DMA_Start_IT+0x430>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_DMA_Start_IT+0x4b0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d108      	bne.n	8004682 <HAL_DMA_Start_IT+0x442>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e012      	b.n	80046a8 <HAL_DMA_Start_IT+0x468>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e009      	b.n	80046a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40020010 	.word	0x40020010
 80046b8:	40020028 	.word	0x40020028
 80046bc:	40020040 	.word	0x40020040
 80046c0:	40020058 	.word	0x40020058
 80046c4:	40020070 	.word	0x40020070
 80046c8:	40020088 	.word	0x40020088
 80046cc:	400200a0 	.word	0x400200a0
 80046d0:	400200b8 	.word	0x400200b8
 80046d4:	40020410 	.word	0x40020410
 80046d8:	40020428 	.word	0x40020428
 80046dc:	40020440 	.word	0x40020440
 80046e0:	40020458 	.word	0x40020458
 80046e4:	40020470 	.word	0x40020470
 80046e8:	40020488 	.word	0x40020488
 80046ec:	400204a0 	.word	0x400204a0
 80046f0:	400204b8 	.word	0x400204b8
 80046f4:	58025408 	.word	0x58025408
 80046f8:	5802541c 	.word	0x5802541c
 80046fc:	58025430 	.word	0x58025430
 8004700:	58025444 	.word	0x58025444
 8004704:	58025458 	.word	0x58025458
 8004708:	5802546c 	.word	0x5802546c
 800470c:	58025480 	.word	0x58025480
 8004710:	58025494 	.word	0x58025494

08004714 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004720:	4b67      	ldr	r3, [pc, #412]	; (80048c0 <HAL_DMA_IRQHandler+0x1ac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a67      	ldr	r2, [pc, #412]	; (80048c4 <HAL_DMA_IRQHandler+0x1b0>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a5f      	ldr	r2, [pc, #380]	; (80048c8 <HAL_DMA_IRQHandler+0x1b4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5d      	ldr	r2, [pc, #372]	; (80048cc <HAL_DMA_IRQHandler+0x1b8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a5c      	ldr	r2, [pc, #368]	; (80048d0 <HAL_DMA_IRQHandler+0x1bc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_DMA_IRQHandler+0x1c0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a59      	ldr	r2, [pc, #356]	; (80048d8 <HAL_DMA_IRQHandler+0x1c4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a57      	ldr	r2, [pc, #348]	; (80048dc <HAL_DMA_IRQHandler+0x1c8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a56      	ldr	r2, [pc, #344]	; (80048e0 <HAL_DMA_IRQHandler+0x1cc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a54      	ldr	r2, [pc, #336]	; (80048e4 <HAL_DMA_IRQHandler+0x1d0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a53      	ldr	r2, [pc, #332]	; (80048e8 <HAL_DMA_IRQHandler+0x1d4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a51      	ldr	r2, [pc, #324]	; (80048ec <HAL_DMA_IRQHandler+0x1d8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <HAL_DMA_IRQHandler+0x1dc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a4e      	ldr	r2, [pc, #312]	; (80048f4 <HAL_DMA_IRQHandler+0x1e0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a4d      	ldr	r2, [pc, #308]	; (80048f8 <HAL_DMA_IRQHandler+0x1e4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a4b      	ldr	r2, [pc, #300]	; (80048fc <HAL_DMA_IRQHandler+0x1e8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4a      	ldr	r2, [pc, #296]	; (8004900 <HAL_DMA_IRQHandler+0x1ec>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xd2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a48      	ldr	r2, [pc, #288]	; (8004904 <HAL_DMA_IRQHandler+0x1f0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_DMA_IRQHandler+0xd6>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_DMA_IRQHandler+0xd8>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 842b 	beq.w	8005048 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2208      	movs	r2, #8
 80047fc:	409a      	lsls	r2, r3
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80a2 	beq.w	800494c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <HAL_DMA_IRQHandler+0x1b4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d04a      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2d      	ldr	r2, [pc, #180]	; (80048cc <HAL_DMA_IRQHandler+0x1b8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d045      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2b      	ldr	r2, [pc, #172]	; (80048d0 <HAL_DMA_IRQHandler+0x1bc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d040      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_DMA_IRQHandler+0x1c0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d03b      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <HAL_DMA_IRQHandler+0x1c4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d036      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a27      	ldr	r2, [pc, #156]	; (80048dc <HAL_DMA_IRQHandler+0x1c8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d031      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <HAL_DMA_IRQHandler+0x1cc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d02c      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <HAL_DMA_IRQHandler+0x1d0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d027      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <HAL_DMA_IRQHandler+0x1d4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_DMA_IRQHandler+0x1d8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <HAL_DMA_IRQHandler+0x1dc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1e      	ldr	r2, [pc, #120]	; (80048f4 <HAL_DMA_IRQHandler+0x1e0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_DMA_IRQHandler+0x1e4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <HAL_DMA_IRQHandler+0x1e8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_DMA_IRQHandler+0x1ec>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x194>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	; (8004904 <HAL_DMA_IRQHandler+0x1f0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d12f      	bne.n	8004908 <HAL_DMA_IRQHandler+0x1f4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e02e      	b.n	800491c <HAL_DMA_IRQHandler+0x208>
 80048be:	bf00      	nop
 80048c0:	24000004 	.word	0x24000004
 80048c4:	1b4e81b5 	.word	0x1b4e81b5
 80048c8:	40020010 	.word	0x40020010
 80048cc:	40020028 	.word	0x40020028
 80048d0:	40020040 	.word	0x40020040
 80048d4:	40020058 	.word	0x40020058
 80048d8:	40020070 	.word	0x40020070
 80048dc:	40020088 	.word	0x40020088
 80048e0:	400200a0 	.word	0x400200a0
 80048e4:	400200b8 	.word	0x400200b8
 80048e8:	40020410 	.word	0x40020410
 80048ec:	40020428 	.word	0x40020428
 80048f0:	40020440 	.word	0x40020440
 80048f4:	40020458 	.word	0x40020458
 80048f8:	40020470 	.word	0x40020470
 80048fc:	40020488 	.word	0x40020488
 8004900:	400204a0 	.word	0x400204a0
 8004904:	400204b8 	.word	0x400204b8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d015      	beq.n	800494c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2208      	movs	r2, #8
 800493a:	409a      	lsls	r2, r3
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f043 0201 	orr.w	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d06e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a69      	ldr	r2, [pc, #420]	; (8004b0c <HAL_DMA_IRQHandler+0x3f8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d04a      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a67      	ldr	r2, [pc, #412]	; (8004b10 <HAL_DMA_IRQHandler+0x3fc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d045      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a66      	ldr	r2, [pc, #408]	; (8004b14 <HAL_DMA_IRQHandler+0x400>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d040      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a64      	ldr	r2, [pc, #400]	; (8004b18 <HAL_DMA_IRQHandler+0x404>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d03b      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a63      	ldr	r2, [pc, #396]	; (8004b1c <HAL_DMA_IRQHandler+0x408>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d036      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a61      	ldr	r2, [pc, #388]	; (8004b20 <HAL_DMA_IRQHandler+0x40c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d031      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a60      	ldr	r2, [pc, #384]	; (8004b24 <HAL_DMA_IRQHandler+0x410>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02c      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a5e      	ldr	r2, [pc, #376]	; (8004b28 <HAL_DMA_IRQHandler+0x414>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d027      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a5d      	ldr	r2, [pc, #372]	; (8004b2c <HAL_DMA_IRQHandler+0x418>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <HAL_DMA_IRQHandler+0x41c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a5a      	ldr	r2, [pc, #360]	; (8004b34 <HAL_DMA_IRQHandler+0x420>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a58      	ldr	r2, [pc, #352]	; (8004b38 <HAL_DMA_IRQHandler+0x424>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a57      	ldr	r2, [pc, #348]	; (8004b3c <HAL_DMA_IRQHandler+0x428>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a55      	ldr	r2, [pc, #340]	; (8004b40 <HAL_DMA_IRQHandler+0x42c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a54      	ldr	r2, [pc, #336]	; (8004b44 <HAL_DMA_IRQHandler+0x430>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x2ee>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_DMA_IRQHandler+0x434>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10a      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x304>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e003      	b.n	8004a20 <HAL_DMA_IRQHandler+0x30c>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	f043 0202 	orr.w	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2204      	movs	r2, #4
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 808f 	beq.w	8004b74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_DMA_IRQHandler+0x3f8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04a      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <HAL_DMA_IRQHandler+0x3fc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d045      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a29      	ldr	r2, [pc, #164]	; (8004b14 <HAL_DMA_IRQHandler+0x400>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d040      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a27      	ldr	r2, [pc, #156]	; (8004b18 <HAL_DMA_IRQHandler+0x404>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d03b      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a26      	ldr	r2, [pc, #152]	; (8004b1c <HAL_DMA_IRQHandler+0x408>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d036      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a24      	ldr	r2, [pc, #144]	; (8004b20 <HAL_DMA_IRQHandler+0x40c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d031      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a23      	ldr	r2, [pc, #140]	; (8004b24 <HAL_DMA_IRQHandler+0x410>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d02c      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a21      	ldr	r2, [pc, #132]	; (8004b28 <HAL_DMA_IRQHandler+0x414>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d027      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a20      	ldr	r2, [pc, #128]	; (8004b2c <HAL_DMA_IRQHandler+0x418>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1e      	ldr	r2, [pc, #120]	; (8004b30 <HAL_DMA_IRQHandler+0x41c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01d      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <HAL_DMA_IRQHandler+0x420>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <HAL_DMA_IRQHandler+0x424>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <HAL_DMA_IRQHandler+0x428>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_DMA_IRQHandler+0x42c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <HAL_DMA_IRQHandler+0x430>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x3e2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <HAL_DMA_IRQHandler+0x434>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d12a      	bne.n	8004b4c <HAL_DMA_IRQHandler+0x438>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e023      	b.n	8004b54 <HAL_DMA_IRQHandler+0x440>
 8004b0c:	40020010 	.word	0x40020010
 8004b10:	40020028 	.word	0x40020028
 8004b14:	40020040 	.word	0x40020040
 8004b18:	40020058 	.word	0x40020058
 8004b1c:	40020070 	.word	0x40020070
 8004b20:	40020088 	.word	0x40020088
 8004b24:	400200a0 	.word	0x400200a0
 8004b28:	400200b8 	.word	0x400200b8
 8004b2c:	40020410 	.word	0x40020410
 8004b30:	40020428 	.word	0x40020428
 8004b34:	40020440 	.word	0x40020440
 8004b38:	40020458 	.word	0x40020458
 8004b3c:	40020470 	.word	0x40020470
 8004b40:	40020488 	.word	0x40020488
 8004b44:	400204a0 	.word	0x400204a0
 8004b48:	400204b8 	.word	0x400204b8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2204      	movs	r2, #4
 8004b62:	409a      	lsls	r2, r3
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80a6 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a85      	ldr	r2, [pc, #532]	; (8004da4 <HAL_DMA_IRQHandler+0x690>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d04a      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a83      	ldr	r2, [pc, #524]	; (8004da8 <HAL_DMA_IRQHandler+0x694>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d045      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a82      	ldr	r2, [pc, #520]	; (8004dac <HAL_DMA_IRQHandler+0x698>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d040      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a80      	ldr	r2, [pc, #512]	; (8004db0 <HAL_DMA_IRQHandler+0x69c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d03b      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7f      	ldr	r2, [pc, #508]	; (8004db4 <HAL_DMA_IRQHandler+0x6a0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d036      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7d      	ldr	r2, [pc, #500]	; (8004db8 <HAL_DMA_IRQHandler+0x6a4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d031      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <HAL_DMA_IRQHandler+0x6a8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d02c      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a7a      	ldr	r2, [pc, #488]	; (8004dc0 <HAL_DMA_IRQHandler+0x6ac>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d027      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a79      	ldr	r2, [pc, #484]	; (8004dc4 <HAL_DMA_IRQHandler+0x6b0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a77      	ldr	r2, [pc, #476]	; (8004dc8 <HAL_DMA_IRQHandler+0x6b4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a76      	ldr	r2, [pc, #472]	; (8004dcc <HAL_DMA_IRQHandler+0x6b8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a74      	ldr	r2, [pc, #464]	; (8004dd0 <HAL_DMA_IRQHandler+0x6bc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a73      	ldr	r2, [pc, #460]	; (8004dd4 <HAL_DMA_IRQHandler+0x6c0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a71      	ldr	r2, [pc, #452]	; (8004dd8 <HAL_DMA_IRQHandler+0x6c4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a70      	ldr	r2, [pc, #448]	; (8004ddc <HAL_DMA_IRQHandler+0x6c8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x516>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6e      	ldr	r2, [pc, #440]	; (8004de0 <HAL_DMA_IRQHandler+0x6cc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10a      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x52c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e009      	b.n	8004c54 <HAL_DMA_IRQHandler+0x540>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d03e      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2210      	movs	r2, #16
 8004c62:	409a      	lsls	r2, r3
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d108      	bne.n	8004c96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d024      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
 8004c94:	e01f      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01b      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	e016      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0208 	bic.w	r2, r2, #8
 8004cc4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2220      	movs	r2, #32
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8110 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <HAL_DMA_IRQHandler+0x690>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d04a      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <HAL_DMA_IRQHandler+0x694>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d045      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <HAL_DMA_IRQHandler+0x698>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d040      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <HAL_DMA_IRQHandler+0x69c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d03b      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <HAL_DMA_IRQHandler+0x6a0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d036      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <HAL_DMA_IRQHandler+0x6a4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d031      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_DMA_IRQHandler+0x6a8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <HAL_DMA_IRQHandler+0x6ac>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d027      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <HAL_DMA_IRQHandler+0x6b0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_DMA_IRQHandler+0x6b4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_DMA_IRQHandler+0x6b8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_DMA_IRQHandler+0x6bc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <HAL_DMA_IRQHandler+0x6c0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_DMA_IRQHandler+0x6c4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_DMA_IRQHandler+0x6c8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x678>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_DMA_IRQHandler+0x6cc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d12b      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x6d0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e02a      	b.n	8004df8 <HAL_DMA_IRQHandler+0x6e4>
 8004da2:	bf00      	nop
 8004da4:	40020010 	.word	0x40020010
 8004da8:	40020028 	.word	0x40020028
 8004dac:	40020040 	.word	0x40020040
 8004db0:	40020058 	.word	0x40020058
 8004db4:	40020070 	.word	0x40020070
 8004db8:	40020088 	.word	0x40020088
 8004dbc:	400200a0 	.word	0x400200a0
 8004dc0:	400200b8 	.word	0x400200b8
 8004dc4:	40020410 	.word	0x40020410
 8004dc8:	40020428 	.word	0x40020428
 8004dcc:	40020440 	.word	0x40020440
 8004dd0:	40020458 	.word	0x40020458
 8004dd4:	40020470 	.word	0x40020470
 8004dd8:	40020488 	.word	0x40020488
 8004ddc:	400204a0 	.word	0x400204a0
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bf14      	ite	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	2300      	moveq	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8087 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2220      	movs	r2, #32
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d139      	bne.n	8004e8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0216 	bic.w	r2, r2, #22
 8004e28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x736>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0208 	bic.w	r2, r2, #8
 8004e58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	223f      	movs	r2, #63	; 0x3f
 8004e64:	409a      	lsls	r2, r3
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 834a 	beq.w	8005518 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
          }
          return;
 8004e8c:	e344      	b.n	8005518 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d018      	beq.n	8004ece <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d02c      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	e027      	b.n	8004f0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d023      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
 8004ecc:	e01e      	b.n	8004f0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0210 	bic.w	r2, r2, #16
 8004eea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8306 	beq.w	8005522 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 8088 	beq.w	8005034 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2204      	movs	r2, #4
 8004f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a7a      	ldr	r2, [pc, #488]	; (800511c <HAL_DMA_IRQHandler+0xa08>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d04a      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a79      	ldr	r2, [pc, #484]	; (8005120 <HAL_DMA_IRQHandler+0xa0c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d045      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_DMA_IRQHandler+0xa10>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d040      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a76      	ldr	r2, [pc, #472]	; (8005128 <HAL_DMA_IRQHandler+0xa14>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d03b      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a74      	ldr	r2, [pc, #464]	; (800512c <HAL_DMA_IRQHandler+0xa18>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d036      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a73      	ldr	r2, [pc, #460]	; (8005130 <HAL_DMA_IRQHandler+0xa1c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d031      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a71      	ldr	r2, [pc, #452]	; (8005134 <HAL_DMA_IRQHandler+0xa20>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02c      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a70      	ldr	r2, [pc, #448]	; (8005138 <HAL_DMA_IRQHandler+0xa24>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d027      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a6e      	ldr	r2, [pc, #440]	; (800513c <HAL_DMA_IRQHandler+0xa28>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d022      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a6d      	ldr	r2, [pc, #436]	; (8005140 <HAL_DMA_IRQHandler+0xa2c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d01d      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6b      	ldr	r2, [pc, #428]	; (8005144 <HAL_DMA_IRQHandler+0xa30>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6a      	ldr	r2, [pc, #424]	; (8005148 <HAL_DMA_IRQHandler+0xa34>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a68      	ldr	r2, [pc, #416]	; (800514c <HAL_DMA_IRQHandler+0xa38>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a67      	ldr	r2, [pc, #412]	; (8005150 <HAL_DMA_IRQHandler+0xa3c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a65      	ldr	r2, [pc, #404]	; (8005154 <HAL_DMA_IRQHandler+0xa40>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x8b8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a64      	ldr	r2, [pc, #400]	; (8005158 <HAL_DMA_IRQHandler+0xa44>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <HAL_DMA_IRQHandler+0x8ca>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e007      	b.n	8004fee <HAL_DMA_IRQHandler+0x8da>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d307      	bcc.n	800500a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f2      	bne.n	8004fee <HAL_DMA_IRQHandler+0x8da>
 8005008:	e000      	b.n	800500c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800500a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2203      	movs	r2, #3
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005022:	e003      	b.n	800502c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8272 	beq.w	8005522 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
 8005046:	e26c      	b.n	8005522 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a43      	ldr	r2, [pc, #268]	; (800515c <HAL_DMA_IRQHandler+0xa48>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a42      	ldr	r2, [pc, #264]	; (8005160 <HAL_DMA_IRQHandler+0xa4c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a40      	ldr	r2, [pc, #256]	; (8005164 <HAL_DMA_IRQHandler+0xa50>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <HAL_DMA_IRQHandler+0xa54>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3d      	ldr	r2, [pc, #244]	; (800516c <HAL_DMA_IRQHandler+0xa58>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3c      	ldr	r2, [pc, #240]	; (8005170 <HAL_DMA_IRQHandler+0xa5c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3a      	ldr	r2, [pc, #232]	; (8005174 <HAL_DMA_IRQHandler+0xa60>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_IRQHandler+0x984>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a39      	ldr	r2, [pc, #228]	; (8005178 <HAL_DMA_IRQHandler+0xa64>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_DMA_IRQHandler+0x988>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_DMA_IRQHandler+0x98a>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 823f 	beq.w	8005522 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2204      	movs	r2, #4
 80050b6:	409a      	lsls	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80cd 	beq.w	800525c <HAL_DMA_IRQHandler+0xb48>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80c7 	beq.w	800525c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2204      	movs	r2, #4
 80050d8:	409a      	lsls	r2, r3
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d049      	beq.n	800517c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8210 	beq.w	800551c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005104:	e20a      	b.n	800551c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8206 	beq.w	800551c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005118:	e200      	b.n	800551c <HAL_DMA_IRQHandler+0xe08>
 800511a:	bf00      	nop
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8
 800515c:	58025408 	.word	0x58025408
 8005160:	5802541c 	.word	0x5802541c
 8005164:	58025430 	.word	0x58025430
 8005168:	58025444 	.word	0x58025444
 800516c:	58025458 	.word	0x58025458
 8005170:	5802546c 	.word	0x5802546c
 8005174:	58025480 	.word	0x58025480
 8005178:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d160      	bne.n	8005248 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7f      	ldr	r2, [pc, #508]	; (8005388 <HAL_DMA_IRQHandler+0xc74>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d04a      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a7d      	ldr	r2, [pc, #500]	; (800538c <HAL_DMA_IRQHandler+0xc78>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d045      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a7c      	ldr	r2, [pc, #496]	; (8005390 <HAL_DMA_IRQHandler+0xc7c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d040      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a7a      	ldr	r2, [pc, #488]	; (8005394 <HAL_DMA_IRQHandler+0xc80>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d03b      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a79      	ldr	r2, [pc, #484]	; (8005398 <HAL_DMA_IRQHandler+0xc84>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d036      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a77      	ldr	r2, [pc, #476]	; (800539c <HAL_DMA_IRQHandler+0xc88>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d031      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a76      	ldr	r2, [pc, #472]	; (80053a0 <HAL_DMA_IRQHandler+0xc8c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d02c      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a74      	ldr	r2, [pc, #464]	; (80053a4 <HAL_DMA_IRQHandler+0xc90>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d027      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a73      	ldr	r2, [pc, #460]	; (80053a8 <HAL_DMA_IRQHandler+0xc94>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a71      	ldr	r2, [pc, #452]	; (80053ac <HAL_DMA_IRQHandler+0xc98>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a70      	ldr	r2, [pc, #448]	; (80053b0 <HAL_DMA_IRQHandler+0xc9c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a6e      	ldr	r2, [pc, #440]	; (80053b4 <HAL_DMA_IRQHandler+0xca0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6d      	ldr	r2, [pc, #436]	; (80053b8 <HAL_DMA_IRQHandler+0xca4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a6b      	ldr	r2, [pc, #428]	; (80053bc <HAL_DMA_IRQHandler+0xca8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a6a      	ldr	r2, [pc, #424]	; (80053c0 <HAL_DMA_IRQHandler+0xcac>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_DMA_IRQHandler+0xb12>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a68      	ldr	r2, [pc, #416]	; (80053c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d108      	bne.n	8005238 <HAL_DMA_IRQHandler+0xb24>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0208 	bic.w	r2, r2, #8
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e007      	b.n	8005248 <HAL_DMA_IRQHandler+0xb34>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8165 	beq.w	800551c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800525a:	e15f      	b.n	800551c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2202      	movs	r2, #2
 8005266:	409a      	lsls	r2, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80c5 	beq.w	80053fc <HAL_DMA_IRQHandler+0xce8>
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80bf 	beq.w	80053fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2202      	movs	r2, #2
 8005288:	409a      	lsls	r2, r3
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 813a 	beq.w	8005520 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b4:	e134      	b.n	8005520 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8130 	beq.w	8005520 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052c8:	e12a      	b.n	8005520 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 8089 	bne.w	80053e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2b      	ldr	r2, [pc, #172]	; (8005388 <HAL_DMA_IRQHandler+0xc74>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d04a      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a29      	ldr	r2, [pc, #164]	; (800538c <HAL_DMA_IRQHandler+0xc78>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d045      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a28      	ldr	r2, [pc, #160]	; (8005390 <HAL_DMA_IRQHandler+0xc7c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d040      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a26      	ldr	r2, [pc, #152]	; (8005394 <HAL_DMA_IRQHandler+0xc80>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d03b      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a25      	ldr	r2, [pc, #148]	; (8005398 <HAL_DMA_IRQHandler+0xc84>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d036      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a23      	ldr	r2, [pc, #140]	; (800539c <HAL_DMA_IRQHandler+0xc88>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d031      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a22      	ldr	r2, [pc, #136]	; (80053a0 <HAL_DMA_IRQHandler+0xc8c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d02c      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <HAL_DMA_IRQHandler+0xc90>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d027      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1f      	ldr	r2, [pc, #124]	; (80053a8 <HAL_DMA_IRQHandler+0xc94>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1d      	ldr	r2, [pc, #116]	; (80053ac <HAL_DMA_IRQHandler+0xc98>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <HAL_DMA_IRQHandler+0xc9c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <HAL_DMA_IRQHandler+0xca0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <HAL_DMA_IRQHandler+0xca4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a17      	ldr	r2, [pc, #92]	; (80053bc <HAL_DMA_IRQHandler+0xca8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <HAL_DMA_IRQHandler+0xcac>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_DMA_IRQHandler+0xc62>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a14      	ldr	r2, [pc, #80]	; (80053c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d128      	bne.n	80053c8 <HAL_DMA_IRQHandler+0xcb4>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0214 	bic.w	r2, r2, #20
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e027      	b.n	80053d8 <HAL_DMA_IRQHandler+0xcc4>
 8005388:	40020010 	.word	0x40020010
 800538c:	40020028 	.word	0x40020028
 8005390:	40020040 	.word	0x40020040
 8005394:	40020058 	.word	0x40020058
 8005398:	40020070 	.word	0x40020070
 800539c:	40020088 	.word	0x40020088
 80053a0:	400200a0 	.word	0x400200a0
 80053a4:	400200b8 	.word	0x400200b8
 80053a8:	40020410 	.word	0x40020410
 80053ac:	40020428 	.word	0x40020428
 80053b0:	40020440 	.word	0x40020440
 80053b4:	40020458 	.word	0x40020458
 80053b8:	40020470 	.word	0x40020470
 80053bc:	40020488 	.word	0x40020488
 80053c0:	400204a0 	.word	0x400204a0
 80053c4:	400204b8 	.word	0x400204b8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 020a 	bic.w	r2, r2, #10
 80053d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8097 	beq.w	8005520 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053fa:	e091      	b.n	8005520 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2208      	movs	r2, #8
 8005406:	409a      	lsls	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8088 	beq.w	8005522 <HAL_DMA_IRQHandler+0xe0e>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8082 	beq.w	8005522 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a41      	ldr	r2, [pc, #260]	; (8005528 <HAL_DMA_IRQHandler+0xe14>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d04a      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3f      	ldr	r2, [pc, #252]	; (800552c <HAL_DMA_IRQHandler+0xe18>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d045      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a3e      	ldr	r2, [pc, #248]	; (8005530 <HAL_DMA_IRQHandler+0xe1c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d040      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a3c      	ldr	r2, [pc, #240]	; (8005534 <HAL_DMA_IRQHandler+0xe20>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d03b      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a3b      	ldr	r2, [pc, #236]	; (8005538 <HAL_DMA_IRQHandler+0xe24>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d036      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a39      	ldr	r2, [pc, #228]	; (800553c <HAL_DMA_IRQHandler+0xe28>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d031      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a38      	ldr	r2, [pc, #224]	; (8005540 <HAL_DMA_IRQHandler+0xe2c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d02c      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_DMA_IRQHandler+0xe30>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d027      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a35      	ldr	r2, [pc, #212]	; (8005548 <HAL_DMA_IRQHandler+0xe34>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_DMA_IRQHandler+0xe38>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a32      	ldr	r2, [pc, #200]	; (8005550 <HAL_DMA_IRQHandler+0xe3c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_DMA_IRQHandler+0xe40>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <HAL_DMA_IRQHandler+0xe44>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2d      	ldr	r2, [pc, #180]	; (800555c <HAL_DMA_IRQHandler+0xe48>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2c      	ldr	r2, [pc, #176]	; (8005560 <HAL_DMA_IRQHandler+0xe4c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_DMA_IRQHandler+0xdaa>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <HAL_DMA_IRQHandler+0xe50>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d108      	bne.n	80054d0 <HAL_DMA_IRQHandler+0xdbc>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 021c 	bic.w	r2, r2, #28
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e007      	b.n	80054e0 <HAL_DMA_IRQHandler+0xdcc>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 020e 	bic.w	r2, r2, #14
 80054de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2201      	movs	r2, #1
 80054ea:	409a      	lsls	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
 8005516:	e004      	b.n	8005522 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005518:	bf00      	nop
 800551a:	e002      	b.n	8005522 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800551c:	bf00      	nop
 800551e:	e000      	b.n	8005522 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005520:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005522:	3728      	adds	r7, #40	; 0x28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40020010 	.word	0x40020010
 800552c:	40020028 	.word	0x40020028
 8005530:	40020040 	.word	0x40020040
 8005534:	40020058 	.word	0x40020058
 8005538:	40020070 	.word	0x40020070
 800553c:	40020088 	.word	0x40020088
 8005540:	400200a0 	.word	0x400200a0
 8005544:	400200b8 	.word	0x400200b8
 8005548:	40020410 	.word	0x40020410
 800554c:	40020428 	.word	0x40020428
 8005550:	40020440 	.word	0x40020440
 8005554:	40020458 	.word	0x40020458
 8005558:	40020470 	.word	0x40020470
 800555c:	40020488 	.word	0x40020488
 8005560:	400204a0 	.word	0x400204a0
 8005564:	400204b8 	.word	0x400204b8

08005568 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005580:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7f      	ldr	r2, [pc, #508]	; (8005784 <DMA_SetConfig+0x21c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d072      	beq.n	8005672 <DMA_SetConfig+0x10a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a7d      	ldr	r2, [pc, #500]	; (8005788 <DMA_SetConfig+0x220>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d06d      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a7c      	ldr	r2, [pc, #496]	; (800578c <DMA_SetConfig+0x224>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d068      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a7a      	ldr	r2, [pc, #488]	; (8005790 <DMA_SetConfig+0x228>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d063      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a79      	ldr	r2, [pc, #484]	; (8005794 <DMA_SetConfig+0x22c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d05e      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a77      	ldr	r2, [pc, #476]	; (8005798 <DMA_SetConfig+0x230>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d059      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a76      	ldr	r2, [pc, #472]	; (800579c <DMA_SetConfig+0x234>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d054      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a74      	ldr	r2, [pc, #464]	; (80057a0 <DMA_SetConfig+0x238>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d04f      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <DMA_SetConfig+0x23c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <DMA_SetConfig+0x240>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a70      	ldr	r2, [pc, #448]	; (80057ac <DMA_SetConfig+0x244>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6e      	ldr	r2, [pc, #440]	; (80057b0 <DMA_SetConfig+0x248>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <DMA_SetConfig+0x10a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a6d      	ldr	r2, [pc, #436]	; (80057b4 <DMA_SetConfig+0x24c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6b      	ldr	r2, [pc, #428]	; (80057b8 <DMA_SetConfig+0x250>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <DMA_SetConfig+0x10a>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6a      	ldr	r2, [pc, #424]	; (80057bc <DMA_SetConfig+0x254>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <DMA_SetConfig+0x258>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a67      	ldr	r2, [pc, #412]	; (80057c4 <DMA_SetConfig+0x25c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <DMA_SetConfig+0x10a>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a65      	ldr	r2, [pc, #404]	; (80057c8 <DMA_SetConfig+0x260>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a64      	ldr	r2, [pc, #400]	; (80057cc <DMA_SetConfig+0x264>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a62      	ldr	r2, [pc, #392]	; (80057d0 <DMA_SetConfig+0x268>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <DMA_SetConfig+0x10a>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a61      	ldr	r2, [pc, #388]	; (80057d4 <DMA_SetConfig+0x26c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a5f      	ldr	r2, [pc, #380]	; (80057d8 <DMA_SetConfig+0x270>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <DMA_SetConfig+0x10a>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a5e      	ldr	r2, [pc, #376]	; (80057dc <DMA_SetConfig+0x274>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <DMA_SetConfig+0x10a>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <DMA_SetConfig+0x278>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d101      	bne.n	8005676 <DMA_SetConfig+0x10e>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <DMA_SetConfig+0x110>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005684:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005696:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a39      	ldr	r2, [pc, #228]	; (8005784 <DMA_SetConfig+0x21c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d04a      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a38      	ldr	r2, [pc, #224]	; (8005788 <DMA_SetConfig+0x220>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d045      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a36      	ldr	r2, [pc, #216]	; (800578c <DMA_SetConfig+0x224>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d040      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a35      	ldr	r2, [pc, #212]	; (8005790 <DMA_SetConfig+0x228>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d03b      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a33      	ldr	r2, [pc, #204]	; (8005794 <DMA_SetConfig+0x22c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d036      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a32      	ldr	r2, [pc, #200]	; (8005798 <DMA_SetConfig+0x230>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d031      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a30      	ldr	r2, [pc, #192]	; (800579c <DMA_SetConfig+0x234>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d02c      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2f      	ldr	r2, [pc, #188]	; (80057a0 <DMA_SetConfig+0x238>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d027      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2d      	ldr	r2, [pc, #180]	; (80057a4 <DMA_SetConfig+0x23c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d022      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2c      	ldr	r2, [pc, #176]	; (80057a8 <DMA_SetConfig+0x240>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d01d      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <DMA_SetConfig+0x244>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d018      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <DMA_SetConfig+0x248>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d013      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <DMA_SetConfig+0x24c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00e      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <DMA_SetConfig+0x250>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d009      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a24      	ldr	r2, [pc, #144]	; (80057bc <DMA_SetConfig+0x254>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <DMA_SetConfig+0x1d0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a23      	ldr	r2, [pc, #140]	; (80057c0 <DMA_SetConfig+0x258>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d101      	bne.n	800573c <DMA_SetConfig+0x1d4>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <DMA_SetConfig+0x1d6>
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d059      	beq.n	80057f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	223f      	movs	r2, #63	; 0x3f
 800574c:	409a      	lsls	r2, r3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005760:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d138      	bne.n	80057e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005782:	e086      	b.n	8005892 <DMA_SetConfig+0x32a>
 8005784:	40020010 	.word	0x40020010
 8005788:	40020028 	.word	0x40020028
 800578c:	40020040 	.word	0x40020040
 8005790:	40020058 	.word	0x40020058
 8005794:	40020070 	.word	0x40020070
 8005798:	40020088 	.word	0x40020088
 800579c:	400200a0 	.word	0x400200a0
 80057a0:	400200b8 	.word	0x400200b8
 80057a4:	40020410 	.word	0x40020410
 80057a8:	40020428 	.word	0x40020428
 80057ac:	40020440 	.word	0x40020440
 80057b0:	40020458 	.word	0x40020458
 80057b4:	40020470 	.word	0x40020470
 80057b8:	40020488 	.word	0x40020488
 80057bc:	400204a0 	.word	0x400204a0
 80057c0:	400204b8 	.word	0x400204b8
 80057c4:	58025408 	.word	0x58025408
 80057c8:	5802541c 	.word	0x5802541c
 80057cc:	58025430 	.word	0x58025430
 80057d0:	58025444 	.word	0x58025444
 80057d4:	58025458 	.word	0x58025458
 80057d8:	5802546c 	.word	0x5802546c
 80057dc:	58025480 	.word	0x58025480
 80057e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
}
 80057f4:	e04d      	b.n	8005892 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <DMA_SetConfig+0x338>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d022      	beq.n	8005846 <DMA_SetConfig+0x2de>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <DMA_SetConfig+0x33c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01d      	beq.n	8005846 <DMA_SetConfig+0x2de>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a26      	ldr	r2, [pc, #152]	; (80058a8 <DMA_SetConfig+0x340>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d018      	beq.n	8005846 <DMA_SetConfig+0x2de>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a24      	ldr	r2, [pc, #144]	; (80058ac <DMA_SetConfig+0x344>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <DMA_SetConfig+0x2de>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a23      	ldr	r2, [pc, #140]	; (80058b0 <DMA_SetConfig+0x348>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <DMA_SetConfig+0x2de>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <DMA_SetConfig+0x34c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <DMA_SetConfig+0x2de>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a20      	ldr	r2, [pc, #128]	; (80058b8 <DMA_SetConfig+0x350>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <DMA_SetConfig+0x2de>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <DMA_SetConfig+0x354>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <DMA_SetConfig+0x2e2>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <DMA_SetConfig+0x2e4>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d020      	beq.n	8005892 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d108      	bne.n	8005882 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	60da      	str	r2, [r3, #12]
}
 8005880:	e007      	b.n	8005892 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	58025408 	.word	0x58025408
 80058a4:	5802541c 	.word	0x5802541c
 80058a8:	58025430 	.word	0x58025430
 80058ac:	58025444 	.word	0x58025444
 80058b0:	58025458 	.word	0x58025458
 80058b4:	5802546c 	.word	0x5802546c
 80058b8:	58025480 	.word	0x58025480
 80058bc:	58025494 	.word	0x58025494

080058c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a42      	ldr	r2, [pc, #264]	; (80059d8 <DMA_CalcBaseAndBitshift+0x118>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04a      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a41      	ldr	r2, [pc, #260]	; (80059dc <DMA_CalcBaseAndBitshift+0x11c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d045      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3f      	ldr	r2, [pc, #252]	; (80059e0 <DMA_CalcBaseAndBitshift+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d040      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3e      	ldr	r2, [pc, #248]	; (80059e4 <DMA_CalcBaseAndBitshift+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d03b      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3c      	ldr	r2, [pc, #240]	; (80059e8 <DMA_CalcBaseAndBitshift+0x128>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d036      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a3b      	ldr	r2, [pc, #236]	; (80059ec <DMA_CalcBaseAndBitshift+0x12c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d031      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a39      	ldr	r2, [pc, #228]	; (80059f0 <DMA_CalcBaseAndBitshift+0x130>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d02c      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a38      	ldr	r2, [pc, #224]	; (80059f4 <DMA_CalcBaseAndBitshift+0x134>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d027      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a36      	ldr	r2, [pc, #216]	; (80059f8 <DMA_CalcBaseAndBitshift+0x138>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d022      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a35      	ldr	r2, [pc, #212]	; (80059fc <DMA_CalcBaseAndBitshift+0x13c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d01d      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a33      	ldr	r2, [pc, #204]	; (8005a00 <DMA_CalcBaseAndBitshift+0x140>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a32      	ldr	r2, [pc, #200]	; (8005a04 <DMA_CalcBaseAndBitshift+0x144>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a30      	ldr	r2, [pc, #192]	; (8005a08 <DMA_CalcBaseAndBitshift+0x148>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2f      	ldr	r2, [pc, #188]	; (8005a0c <DMA_CalcBaseAndBitshift+0x14c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <DMA_CalcBaseAndBitshift+0x150>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <DMA_CalcBaseAndBitshift+0x154>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d101      	bne.n	800596c <DMA_CalcBaseAndBitshift+0xac>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <DMA_CalcBaseAndBitshift+0xae>
 800596c:	2300      	movs	r3, #0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d024      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	3b10      	subs	r3, #16
 800597a:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <DMA_CalcBaseAndBitshift+0x158>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <DMA_CalcBaseAndBitshift+0x15c>)
 800598c:	5cd3      	ldrb	r3, [r2, r3]
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d908      	bls.n	80059ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <DMA_CalcBaseAndBitshift+0x160>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	1d1a      	adds	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	659a      	str	r2, [r3, #88]	; 0x58
 80059aa:	e00d      	b.n	80059c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <DMA_CalcBaseAndBitshift+0x160>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6593      	str	r3, [r2, #88]	; 0x58
 80059ba:	e005      	b.n	80059c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40020010 	.word	0x40020010
 80059dc:	40020028 	.word	0x40020028
 80059e0:	40020040 	.word	0x40020040
 80059e4:	40020058 	.word	0x40020058
 80059e8:	40020070 	.word	0x40020070
 80059ec:	40020088 	.word	0x40020088
 80059f0:	400200a0 	.word	0x400200a0
 80059f4:	400200b8 	.word	0x400200b8
 80059f8:	40020410 	.word	0x40020410
 80059fc:	40020428 	.word	0x40020428
 8005a00:	40020440 	.word	0x40020440
 8005a04:	40020458 	.word	0x40020458
 8005a08:	40020470 	.word	0x40020470
 8005a0c:	40020488 	.word	0x40020488
 8005a10:	400204a0 	.word	0x400204a0
 8005a14:	400204b8 	.word	0x400204b8
 8005a18:	aaaaaaab 	.word	0xaaaaaaab
 8005a1c:	08013ea8 	.word	0x08013ea8
 8005a20:	fffffc00 	.word	0xfffffc00

08005a24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d120      	bne.n	8005a7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d858      	bhi.n	8005af2 <DMA_CheckFifoParam+0xce>
 8005a40:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <DMA_CheckFifoParam+0x24>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a59 	.word	0x08005a59
 8005a4c:	08005a6b 	.word	0x08005a6b
 8005a50:	08005a59 	.word	0x08005a59
 8005a54:	08005af3 	.word	0x08005af3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d048      	beq.n	8005af6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a68:	e045      	b.n	8005af6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a72:	d142      	bne.n	8005afa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a78:	e03f      	b.n	8005afa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a82:	d123      	bne.n	8005acc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d838      	bhi.n	8005afe <DMA_CheckFifoParam+0xda>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <DMA_CheckFifoParam+0x70>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005aab 	.word	0x08005aab
 8005a9c:	08005aa5 	.word	0x08005aa5
 8005aa0:	08005abd 	.word	0x08005abd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
        break;
 8005aa8:	e030      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d025      	beq.n	8005b02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aba:	e022      	b.n	8005b02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ac4:	d11f      	bne.n	8005b06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aca:	e01c      	b.n	8005b06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d902      	bls.n	8005ada <DMA_CheckFifoParam+0xb6>
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d003      	beq.n	8005ae0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ad8:	e018      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ade:	e015      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
    break;
 8005af0:	e00b      	b.n	8005b0a <DMA_CheckFifoParam+0xe6>
        break;
 8005af2:	bf00      	nop
 8005af4:	e00a      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005af6:	bf00      	nop
 8005af8:	e008      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005afa:	bf00      	nop
 8005afc:	e006      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005afe:	bf00      	nop
 8005b00:	e004      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005b02:	bf00      	nop
 8005b04:	e002      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
    break;
 8005b0a:	bf00      	nop
    }
  }

  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a38      	ldr	r2, [pc, #224]	; (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a36      	ldr	r2, [pc, #216]	; (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a35      	ldr	r2, [pc, #212]	; (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a33      	ldr	r2, [pc, #204]	; (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a32      	ldr	r2, [pc, #200]	; (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a30      	ldr	r2, [pc, #192]	; (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2d      	ldr	r2, [pc, #180]	; (8005c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01a      	beq.n	8005bba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	3b08      	subs	r3, #8
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ba8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	409a      	lsls	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005bb8:	e024      	b.n	8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	3b10      	subs	r3, #16
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	; (8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d806      	bhi.n	8005be2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d902      	bls.n	8005be2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3308      	adds	r3, #8
 8005be0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bf4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	58025408 	.word	0x58025408
 8005c14:	5802541c 	.word	0x5802541c
 8005c18:	58025430 	.word	0x58025430
 8005c1c:	58025444 	.word	0x58025444
 8005c20:	58025458 	.word	0x58025458
 8005c24:	5802546c 	.word	0x5802546c
 8005c28:	58025480 	.word	0x58025480
 8005c2c:	58025494 	.word	0x58025494
 8005c30:	cccccccd 	.word	0xcccccccd
 8005c34:	16009600 	.word	0x16009600
 8005c38:	58025880 	.word	0x58025880
 8005c3c:	aaaaaaab 	.word	0xaaaaaaab
 8005c40:	400204b8 	.word	0x400204b8
 8005c44:	4002040f 	.word	0x4002040f
 8005c48:	10008200 	.word	0x10008200
 8005c4c:	40020880 	.word	0x40020880

08005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04a      	beq.n	8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d847      	bhi.n	8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a24      	ldr	r2, [pc, #144]	; (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01d      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d101      	bne.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cd8:	671a      	str	r2, [r3, #112]	; 0x70
 8005cda:	e009      	b.n	8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	58025408 	.word	0x58025408
 8005d0c:	5802541c 	.word	0x5802541c
 8005d10:	58025430 	.word	0x58025430
 8005d14:	58025444 	.word	0x58025444
 8005d18:	58025458 	.word	0x58025458
 8005d1c:	5802546c 	.word	0x5802546c
 8005d20:	58025480 	.word	0x58025480
 8005d24:	58025494 	.word	0x58025494
 8005d28:	1600963f 	.word	0x1600963f
 8005d2c:	58025940 	.word	0x58025940
 8005d30:	1000823f 	.word	0x1000823f
 8005d34:	40020940 	.word	0x40020940

08005d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d46:	4b89      	ldr	r3, [pc, #548]	; (8005f6c <HAL_GPIO_Init+0x234>)
 8005d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d4a:	e194      	b.n	8006076 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2101      	movs	r1, #1
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	4013      	ands	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8186 	beq.w	8006070 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d005      	beq.n	8005d7c <HAL_GPIO_Init+0x44>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d130      	bne.n	8005dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	2203      	movs	r2, #3
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005db2:	2201      	movs	r2, #1
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	091b      	lsrs	r3, r3, #4
 8005dc8:	f003 0201 	and.w	r2, r3, #1
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d017      	beq.n	8005e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	2203      	movs	r2, #3
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d123      	bne.n	8005e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	08da      	lsrs	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3208      	adds	r2, #8
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	220f      	movs	r2, #15
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	08da      	lsrs	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3208      	adds	r2, #8
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	2203      	movs	r2, #3
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 0203 	and.w	r2, r3, #3
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80e0 	beq.w	8006070 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <HAL_GPIO_Init+0x238>)
 8005eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eb6:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <HAL_GPIO_Init+0x238>)
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <HAL_GPIO_Init+0x238>)
 8005ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ece:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <HAL_GPIO_Init+0x23c>)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	220f      	movs	r2, #15
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <HAL_GPIO_Init+0x240>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d052      	beq.n	8005fa0 <HAL_GPIO_Init+0x268>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <HAL_GPIO_Init+0x244>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d031      	beq.n	8005f66 <HAL_GPIO_Init+0x22e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <HAL_GPIO_Init+0x248>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d02b      	beq.n	8005f62 <HAL_GPIO_Init+0x22a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <HAL_GPIO_Init+0x24c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d025      	beq.n	8005f5e <HAL_GPIO_Init+0x226>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_GPIO_Init+0x250>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01f      	beq.n	8005f5a <HAL_GPIO_Init+0x222>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_GPIO_Init+0x254>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d019      	beq.n	8005f56 <HAL_GPIO_Init+0x21e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <HAL_GPIO_Init+0x258>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_GPIO_Init+0x21a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <HAL_GPIO_Init+0x25c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00d      	beq.n	8005f4e <HAL_GPIO_Init+0x216>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_GPIO_Init+0x260>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <HAL_GPIO_Init+0x212>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <HAL_GPIO_Init+0x264>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d101      	bne.n	8005f46 <HAL_GPIO_Init+0x20e>
 8005f42:	2309      	movs	r3, #9
 8005f44:	e02d      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f46:	230a      	movs	r3, #10
 8005f48:	e02b      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	e029      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f4e:	2307      	movs	r3, #7
 8005f50:	e027      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f52:	2306      	movs	r3, #6
 8005f54:	e025      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f56:	2305      	movs	r3, #5
 8005f58:	e023      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	e021      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e01f      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e01d      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e01b      	b.n	8005fa2 <HAL_GPIO_Init+0x26a>
 8005f6a:	bf00      	nop
 8005f6c:	58000080 	.word	0x58000080
 8005f70:	58024400 	.word	0x58024400
 8005f74:	58000400 	.word	0x58000400
 8005f78:	58020000 	.word	0x58020000
 8005f7c:	58020400 	.word	0x58020400
 8005f80:	58020800 	.word	0x58020800
 8005f84:	58020c00 	.word	0x58020c00
 8005f88:	58021000 	.word	0x58021000
 8005f8c:	58021400 	.word	0x58021400
 8005f90:	58021800 	.word	0x58021800
 8005f94:	58021c00 	.word	0x58021c00
 8005f98:	58022000 	.word	0x58022000
 8005f9c:	58022400 	.word	0x58022400
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	f002 0203 	and.w	r2, r2, #3
 8005fa8:	0092      	lsls	r2, r2, #2
 8005faa:	4093      	lsls	r3, r2
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fb2:	4938      	ldr	r1, [pc, #224]	; (8006094 <HAL_GPIO_Init+0x35c>)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	089b      	lsrs	r3, r3, #2
 8005fb8:	3302      	adds	r3, #2
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	43db      	mvns	r3, r3
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4013      	ands	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	43db      	mvns	r3, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	f47f ae63 	bne.w	8005d4c <HAL_GPIO_Init+0x14>
  }
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	3724      	adds	r7, #36	; 0x24
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	58000400 	.word	0x58000400

08006098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
 80060a4:	4613      	mov	r3, r2
 80060a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060a8:	787b      	ldrb	r3, [r7, #1]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ae:	887a      	ldrh	r2, [r7, #2]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060b4:	e003      	b.n	80060be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	041a      	lsls	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	619a      	str	r2, [r3, #24]
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060dc:	887a      	ldrh	r2, [r7, #2]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4013      	ands	r3, r2
 80060e2:	041a      	lsls	r2, r3, #16
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	43d9      	mvns	r1, r3
 80060e8:	887b      	ldrh	r3, [r7, #2]
 80060ea:	400b      	ands	r3, r1
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	619a      	str	r2, [r3, #24]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006100:	b08f      	sub	sp, #60	; 0x3c
 8006102:	af0a      	add	r7, sp, #40	; 0x28
 8006104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e116      	b.n	800633e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f00a fb7e 	bl	801082c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2203      	movs	r2, #3
 8006134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f006 fce3 	bl	800cb1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	687e      	ldr	r6, [r7, #4]
 800615c:	466d      	mov	r5, sp
 800615e:	f106 0410 	add.w	r4, r6, #16
 8006162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800616a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800616e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006172:	1d33      	adds	r3, r6, #4
 8006174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006176:	6838      	ldr	r0, [r7, #0]
 8006178:	f006 fbae 	bl	800c8d8 <USB_CoreInit>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e0d7      	b.n	800633e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f006 fcd1 	bl	800cb3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	e04a      	b.n	8006236 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	333d      	adds	r3, #61	; 0x3d
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061b4:	7bfa      	ldrb	r2, [r7, #15]
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	333c      	adds	r3, #60	; 0x3c
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061c8:	7bfa      	ldrb	r2, [r7, #15]
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	b298      	uxth	r0, r3
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	3356      	adds	r3, #86	; 0x56
 80061dc:	4602      	mov	r2, r0
 80061de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	3340      	adds	r3, #64	; 0x40
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061f4:	7bfa      	ldrb	r2, [r7, #15]
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	3344      	adds	r3, #68	; 0x44
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3348      	adds	r3, #72	; 0x48
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800621c:	7bfa      	ldrb	r2, [r7, #15]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	334c      	adds	r3, #76	; 0x4c
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	3301      	adds	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	7bfa      	ldrb	r2, [r7, #15]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d3af      	bcc.n	80061a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e044      	b.n	80062d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006246:	7bfa      	ldrb	r2, [r7, #15]
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800625c:	7bfa      	ldrb	r2, [r7, #15]
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800626e:	7bfa      	ldrb	r2, [r7, #15]
 8006270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006272:	7bfa      	ldrb	r2, [r7, #15]
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006288:	7bfa      	ldrb	r2, [r7, #15]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800629e:	7bfa      	ldrb	r2, [r7, #15]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062b4:	7bfa      	ldrb	r2, [r7, #15]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	3301      	adds	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d3b5      	bcc.n	8006246 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	687e      	ldr	r6, [r7, #4]
 80062e2:	466d      	mov	r5, sp
 80062e4:	f106 0410 	add.w	r4, r6, #16
 80062e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80062f8:	1d33      	adds	r3, r6, #4
 80062fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062fc:	6838      	ldr	r0, [r7, #0]
 80062fe:	f006 fc69 	bl	800cbd4 <USB_DevInit>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e014      	b.n	800633e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b01      	cmp	r3, #1
 800632a:	d102      	bne.n	8006332 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f96f 	bl	8007610 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f007 fcab 	bl	800dc92 <USB_DevDisconnect>

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006346 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_PCD_Start+0x1c>
 800635e:	2302      	movs	r3, #2
 8006360:	e022      	b.n	80063a8 <HAL_PCD_Start+0x62>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f006 fbb2 	bl	800caf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f007 fc59 	bl	800dc50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b08d      	sub	sp, #52	; 0x34
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f007 fd17 	bl	800ddfa <USB_GetMode>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 84b7 	bne.w	8006d42 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f007 fc7b 	bl	800dcd4 <USB_ReadInterrupts>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 84ad 	beq.w	8006d40 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f007 fc68 	bl	800dcd4 <USB_ReadInterrupts>
 8006404:	4603      	mov	r3, r0
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d107      	bne.n	800641e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f002 0202 	and.w	r2, r2, #2
 800641c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f007 fc56 	bl	800dcd4 <USB_ReadInterrupts>
 8006428:	4603      	mov	r3, r0
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b10      	cmp	r3, #16
 8006430:	d161      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0210 	bic.w	r2, r2, #16
 8006440:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f003 020f 	and.w	r2, r3, #15
 800644e:	4613      	mov	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	0c5b      	lsrs	r3, r3, #17
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	2b02      	cmp	r3, #2
 800646c:	d124      	bne.n	80064b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d035      	beq.n	80064e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6a38      	ldr	r0, [r7, #32]
 800648e:	f007 fa8d 	bl	800d9ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800649e:	441a      	add	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064b0:	441a      	add	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	615a      	str	r2, [r3, #20]
 80064b6:	e016      	b.n	80064e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	0c5b      	lsrs	r3, r3, #17
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d110      	bne.n	80064e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064ca:	2208      	movs	r2, #8
 80064cc:	4619      	mov	r1, r3
 80064ce:	6a38      	ldr	r0, [r7, #32]
 80064d0:	f007 fa6c 	bl	800d9ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	091b      	lsrs	r3, r3, #4
 80064dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064e0:	441a      	add	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0210 	orr.w	r2, r2, #16
 80064f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f007 fbea 	bl	800dcd4 <USB_ReadInterrupts>
 8006500:	4603      	mov	r3, r0
 8006502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006506:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800650a:	f040 80a7 	bne.w	800665c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f007 fbef 	bl	800dcfa <USB_ReadDevAllOutEpInterrupt>
 800651c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800651e:	e099      	b.n	8006654 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 808e 	beq.w	8006648 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f007 fc13 	bl	800dd62 <USB_ReadDevOutEPInterrupt>
 800653c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00c      	beq.n	8006562 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006554:	461a      	mov	r2, r3
 8006556:	2301      	movs	r3, #1
 8006558:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800655a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fed1 	bl	8007304 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	2308      	movs	r3, #8
 800657c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800657e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 ffa7 	bl	80074d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	2310      	movs	r3, #16
 80065a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d030      	beq.n	800660e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d109      	bne.n	80065cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80065cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ce:	4613      	mov	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	3304      	adds	r3, #4
 80065e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	78db      	ldrb	r3, [r3, #3]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d108      	bne.n	80065fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f00a fa3e 	bl	8010a78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	2302      	movs	r3, #2
 800660c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	2320      	movs	r3, #32
 8006628:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006646:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	3301      	adds	r3, #1
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	f47f af62 	bne.w	8006520 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f007 fb37 	bl	800dcd4 <USB_ReadInterrupts>
 8006666:	4603      	mov	r3, r0
 8006668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006670:	f040 80db 	bne.w	800682a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f007 fb58 	bl	800dd2e <USB_ReadDevAllInEpInterrupt>
 800667e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006684:	e0cd      	b.n	8006822 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80c2 	beq.w	8006816 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f007 fb7e 	bl	800dd9e <USB_ReadDevInEPInterrupt>
 80066a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d057      	beq.n	800675e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	43db      	mvns	r3, r3
 80066c8:	69f9      	ldr	r1, [r7, #28]
 80066ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ce:	4013      	ands	r3, r2
 80066d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	461a      	mov	r2, r3
 80066e0:	2301      	movs	r3, #1
 80066e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d132      	bne.n	8006752 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f0:	4613      	mov	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	3348      	adds	r3, #72	; 0x48
 80066fc:	6819      	ldr	r1, [r3, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006702:	4613      	mov	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4403      	add	r3, r0
 800670c:	3344      	adds	r3, #68	; 0x44
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4419      	add	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4403      	add	r3, r0
 8006720:	3348      	adds	r3, #72	; 0x48
 8006722:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	d113      	bne.n	8006752 <HAL_PCD_IRQHandler+0x3a2>
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	334c      	adds	r3, #76	; 0x4c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d108      	bne.n	8006752 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800674a:	461a      	mov	r2, r3
 800674c:	2101      	movs	r1, #1
 800674e:	f007 fb87 	bl	800de60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	b2db      	uxtb	r3, r3
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f00a f908 	bl	801096e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	461a      	mov	r2, r3
 8006776:	2308      	movs	r3, #8
 8006778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	461a      	mov	r2, r3
 8006792:	2310      	movs	r3, #16
 8006794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d023      	beq.n	8006804 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80067bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067be:	6a38      	ldr	r0, [r7, #32]
 80067c0:	f006 fb66 	bl	800ce90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	3338      	adds	r3, #56	; 0x38
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	3304      	adds	r3, #4
 80067d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	78db      	ldrb	r3, [r3, #3]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d108      	bne.n	80067f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2200      	movs	r2, #0
 80067e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f00a f955 	bl	8010a9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	461a      	mov	r2, r3
 8006800:	2302      	movs	r3, #2
 8006802:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800680e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fcea 	bl	80071ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	3301      	adds	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	f47f af2e 	bne.w	8006686 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f007 fa50 	bl	800dcd4 <USB_ReadInterrupts>
 8006834:	4603      	mov	r3, r0
 8006836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800683e:	d122      	bne.n	8006886 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800685a:	2b01      	cmp	r3, #1
 800685c:	d108      	bne.n	8006870 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006866:	2100      	movs	r1, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fef5 	bl	8007658 <HAL_PCDEx_LPM_Callback>
 800686e:	e002      	b.n	8006876 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f00a f8f3 	bl	8010a5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f007 fa22 	bl	800dcd4 <USB_ReadInterrupts>
 8006890:	4603      	mov	r3, r0
 8006892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689a:	d112      	bne.n	80068c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d102      	bne.n	80068b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f00a f8af 	bl	8010a10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80068c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f007 fa04 	bl	800dcd4 <USB_ReadInterrupts>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068d6:	d121      	bne.n	800691c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80068e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d111      	bne.n	8006916 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006900:	089b      	lsrs	r3, r3, #2
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800690c:	2101      	movs	r1, #1
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fea2 	bl	8007658 <HAL_PCDEx_LPM_Callback>
 8006914:	e002      	b.n	800691c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f00a f87a 	bl	8010a10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f007 f9d7 	bl	800dcd4 <USB_ReadInterrupts>
 8006926:	4603      	mov	r3, r0
 8006928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	f040 80b7 	bne.w	8006aa2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2110      	movs	r1, #16
 800694e:	4618      	mov	r0, r3
 8006950:	f006 fa9e 	bl	800ce90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006958:	e046      	b.n	80069e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	461a      	mov	r2, r3
 8006968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800696c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	69fa      	ldr	r2, [r7, #28]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800698c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699a:	461a      	mov	r2, r3
 800699c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	3301      	adds	r3, #1
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d3b3      	bcc.n	800695a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a1e:	f043 030b 	orr.w	r3, r3, #11
 8006a22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a34:	f043 030b 	orr.w	r3, r3, #11
 8006a38:	6453      	str	r3, [r2, #68]	; 0x44
 8006a3a:	e015      	b.n	8006a68 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	695a      	ldr	r2, [r3, #20]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f242 032b 	movw	r3, #8235	; 0x202b
 8006a50:	4313      	orrs	r3, r2
 8006a52:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a62:	f043 030b 	orr.w	r3, r3, #11
 8006a66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f007 f9e7 	bl	800de60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f007 f914 	bl	800dcd4 <USB_ReadInterrupts>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab6:	d124      	bne.n	8006b02 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f007 f9ab 	bl	800de18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f006 fa5f 	bl	800cf8a <USB_GetDevSpeed>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681c      	ldr	r4, [r3, #0]
 8006ad8:	f001 fd9e 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 8006adc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f005 ff64 	bl	800c9b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f009 ff66 	bl	80109be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f007 f8e4 	bl	800dcd4 <USB_ReadInterrupts>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d10a      	bne.n	8006b2c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f009 ff43 	bl	80109a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f002 0208 	and.w	r2, r2, #8
 8006b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f007 f8cf 	bl	800dcd4 <USB_ReadInterrupts>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3c:	2b80      	cmp	r3, #128	; 0x80
 8006b3e:	d122      	bne.n	8006b86 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b50:	e014      	b.n	8006b7c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d105      	bne.n	8006b76 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb09 	bl	8007188 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	3301      	adds	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3e5      	bcc.n	8006b52 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f007 f8a2 	bl	800dcd4 <USB_ReadInterrupts>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9a:	d13b      	bne.n	8006c14 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba0:	e02b      	b.n	8006bfa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3340      	adds	r3, #64	; 0x40
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d115      	bne.n	8006bf4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006bc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da12      	bge.n	8006bf4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	333f      	adds	r3, #63	; 0x3f
 8006bde:	2201      	movs	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 faca 	bl	8007188 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d3ce      	bcc.n	8006ba2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f007 f85b 	bl	800dcd4 <USB_ReadInterrupts>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c28:	d155      	bne.n	8006cd6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	e045      	b.n	8006cbc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c44:	4613      	mov	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d12e      	bne.n	8006cb6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	da2b      	bge.n	8006cb6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006c6a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d121      	bne.n	8006cb6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c76:	4613      	mov	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cb2:	6053      	str	r3, [r2, #4]
            break;
 8006cb4:	e007      	b.n	8006cc6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	3301      	adds	r3, #1
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d3b4      	bcc.n	8006c30 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695a      	ldr	r2, [r3, #20]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f006 fffa 	bl	800dcd4 <USB_ReadInterrupts>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cea:	d10a      	bne.n	8006d02 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f009 fee7 	bl	8010ac0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f006 ffe4 	bl	800dcd4 <USB_ReadInterrupts>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d115      	bne.n	8006d42 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f009 fed7 	bl	8010adc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6859      	ldr	r1, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	e000      	b.n	8006d42 <HAL_PCD_IRQHandler+0x992>
      return;
 8006d40:	bf00      	nop
    }
  }
}
 8006d42:	3734      	adds	r7, #52	; 0x34
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <HAL_PCD_SetAddress+0x1a>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e013      	b.n	8006d8a <HAL_PCD_SetAddress+0x42>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	78fa      	ldrb	r2, [r7, #3]
 8006d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f006 ff42 	bl	800dc04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	70fb      	strb	r3, [r7, #3]
 8006da4:	460b      	mov	r3, r1
 8006da6:	803b      	strh	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da0f      	bge.n	8006dd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	3338      	adds	r3, #56	; 0x38
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	3304      	adds	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	705a      	strb	r2, [r3, #1]
 8006dd6:	e00f      	b.n	8006df8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	f003 020f 	and.w	r2, r3, #15
 8006dde:	4613      	mov	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	3304      	adds	r3, #4
 8006df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e04:	883a      	ldrh	r2, [r7, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	78ba      	ldrb	r2, [r7, #2]
 8006e0e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d004      	beq.n	8006e22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e22:	78bb      	ldrb	r3, [r7, #2]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d102      	bne.n	8006e2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_PCD_EP_Open+0xaa>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e00e      	b.n	8006e5a <HAL_PCD_EP_Open+0xc8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f006 f8c2 	bl	800cfd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da0f      	bge.n	8006e96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	3338      	adds	r3, #56	; 0x38
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	705a      	strb	r2, [r3, #1]
 8006e94:	e00f      	b.n	8006eb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	3304      	adds	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_PCD_EP_Close+0x6e>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e00e      	b.n	8006eee <HAL_PCD_EP_Close+0x8c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68f9      	ldr	r1, [r7, #12]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f006 f900 	bl	800d0e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	460b      	mov	r3, r1
 8006f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f06:	7afb      	ldrb	r3, [r7, #11]
 8006f08:	f003 020f 	and.w	r2, r3, #15
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2200      	movs	r2, #0
 8006f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d102      	bne.n	8006f52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6979      	ldr	r1, [r7, #20]
 8006f60:	f006 f99c 	bl	800d29c <USB_EPStartXfer>

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8006f90:	681b      	ldr	r3, [r3, #0]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	460b      	mov	r3, r1
 8006fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	f003 020f 	and.w	r2, r3, #15
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	3338      	adds	r3, #56	; 0x38
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d102      	bne.n	8006ff8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	6979      	ldr	r1, [r7, #20]
 8007006:	f006 f949 	bl	800d29c <USB_EPStartXfer>

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	f003 020f 	and.w	r2, r3, #15
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	429a      	cmp	r2, r3
 800702c:	d901      	bls.n	8007032 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e050      	b.n	80070d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007036:	2b00      	cmp	r3, #0
 8007038:	da0f      	bge.n	800705a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	3338      	adds	r3, #56	; 0x38
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	3304      	adds	r3, #4
 8007050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	705a      	strb	r2, [r3, #1]
 8007058:	e00d      	b.n	8007076 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	4613      	mov	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	4413      	add	r3, r2
 800706c:	3304      	adds	r3, #4
 800706e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	b2da      	uxtb	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <HAL_PCD_EP_SetStall+0x82>
 8007092:	2302      	movs	r3, #2
 8007094:	e01e      	b.n	80070d4 <HAL_PCD_EP_SetStall+0xc0>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f006 fcd9 	bl	800da5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	b2d9      	uxtb	r1, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070c4:	461a      	mov	r2, r3
 80070c6:	f006 fecb 	bl	800de60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	f003 020f 	and.w	r2, r3, #15
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d901      	bls.n	80070fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e042      	b.n	8007180 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da0f      	bge.n	8007122 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	4613      	mov	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4413      	add	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	3338      	adds	r3, #56	; 0x38
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	3304      	adds	r3, #4
 8007118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	705a      	strb	r2, [r3, #1]
 8007120:	e00f      	b.n	8007142 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	f003 020f 	and.w	r2, r3, #15
 8007128:	4613      	mov	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4413      	add	r3, r2
 8007138:	3304      	adds	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_PCD_EP_ClrStall+0x86>
 800715e:	2302      	movs	r3, #2
 8007160:	e00e      	b.n	8007180 <HAL_PCD_EP_ClrStall+0xa4>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	4618      	mov	r0, r3
 8007172:	f006 fce1 	bl	800db38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007198:	2b00      	cmp	r3, #0
 800719a:	da0c      	bge.n	80071b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	f003 020f 	and.w	r2, r3, #15
 80071a2:	4613      	mov	r3, r2
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	3338      	adds	r3, #56	; 0x38
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e00c      	b.n	80071d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	4613      	mov	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	3304      	adds	r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f006 fb00 	bl	800d7dc <USB_EPStopXfer>
 80071dc:	4603      	mov	r3, r0
 80071de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08a      	sub	sp, #40	; 0x28
 80071ee:	af02      	add	r7, sp, #8
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	3338      	adds	r3, #56	; 0x38
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	3304      	adds	r3, #4
 8007210:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d901      	bls.n	8007222 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e06c      	b.n	80072fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	429a      	cmp	r2, r3
 8007236:	d902      	bls.n	800723e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3303      	adds	r3, #3
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007246:	e02b      	b.n	80072a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	429a      	cmp	r2, r3
 800725c:	d902      	bls.n	8007264 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	3303      	adds	r3, #3
 8007268:	089b      	lsrs	r3, r3, #2
 800726a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68d9      	ldr	r1, [r3, #12]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	b2da      	uxtb	r2, r3
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800727c:	b2db      	uxtb	r3, r3
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4603      	mov	r3, r0
 8007282:	6978      	ldr	r0, [r7, #20]
 8007284:	f006 fb54 	bl	800d930 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	441a      	add	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	441a      	add	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d809      	bhi.n	80072ca <PCD_WriteEmptyTxFifo+0xe0>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072be:	429a      	cmp	r2, r3
 80072c0:	d203      	bcs.n	80072ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1be      	bne.n	8007248 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d811      	bhi.n	80072fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2201      	movs	r2, #1
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	43db      	mvns	r3, r3
 80072f0:	6939      	ldr	r1, [r7, #16]
 80072f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f6:	4013      	ands	r3, r2
 80072f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	333c      	adds	r3, #60	; 0x3c
 800731c:	3304      	adds	r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d17b      	bne.n	8007432 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b00      	cmp	r3, #0
 8007342:	d015      	beq.n	8007370 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4a61      	ldr	r2, [pc, #388]	; (80074cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	f240 80b9 	bls.w	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80b3 	beq.w	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736c:	6093      	str	r3, [r2, #8]
 800736e:	e0a7      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007386:	461a      	mov	r2, r3
 8007388:	2320      	movs	r3, #32
 800738a:	6093      	str	r3, [r2, #8]
 800738c:	e098      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 8093 	bne.w	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4a4b      	ldr	r2, [pc, #300]	; (80074cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d90f      	bls.n	80073c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	461a      	mov	r2, r3
 80073ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	e07e      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	3304      	adds	r3, #4
 80073d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1a      	ldr	r2, [r3, #32]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	0159      	lsls	r1, r3, #5
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	440b      	add	r3, r1
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d114      	bne.n	8007424 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800740c:	461a      	mov	r2, r3
 800740e:	2101      	movs	r1, #1
 8007410:	f006 fd26 	bl	800de60 <USB_EP0_OutStart>
 8007414:	e006      	b.n	8007424 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	441a      	add	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f009 fa84 	bl	8010938 <HAL_PCD_DataOutStageCallback>
 8007430:	e046      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	4a26      	ldr	r2, [pc, #152]	; (80074d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d124      	bne.n	8007484 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	461a      	mov	r2, r3
 8007452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007456:	6093      	str	r3, [r2, #8]
 8007458:	e032      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007470:	461a      	mov	r2, r3
 8007472:	2320      	movs	r3, #32
 8007474:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f009 fa5b 	bl	8010938 <HAL_PCD_DataOutStageCallback>
 8007482:	e01d      	b.n	80074c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d114      	bne.n	80074b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d108      	bne.n	80074b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074ac:	461a      	mov	r2, r3
 80074ae:	2100      	movs	r1, #0
 80074b0:	f006 fcd6 	bl	800de60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f009 fa3c 	bl	8010938 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	4f54300a 	.word	0x4f54300a
 80074d0:	4f54310a 	.word	0x4f54310a

080074d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	333c      	adds	r3, #60	; 0x3c
 80074ec:	3304      	adds	r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a15      	ldr	r2, [pc, #84]	; (800755c <PCD_EP_OutSetupPacket_int+0x88>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d90e      	bls.n	8007528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	461a      	mov	r2, r3
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f009 f9f3 	bl	8010914 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a0a      	ldr	r2, [pc, #40]	; (800755c <PCD_EP_OutSetupPacket_int+0x88>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d90c      	bls.n	8007550 <PCD_EP_OutSetupPacket_int+0x7c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d108      	bne.n	8007550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007548:	461a      	mov	r2, r3
 800754a:	2101      	movs	r1, #1
 800754c:	f006 fc88 	bl	800de60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	4f54300a 	.word	0x4f54300a

08007560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
 800756c:	4613      	mov	r3, r2
 800756e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800757e:	883b      	ldrh	r3, [r7, #0]
 8007580:	0419      	lsls	r1, r3, #16
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	430a      	orrs	r2, r1
 800758a:	629a      	str	r2, [r3, #40]	; 0x28
 800758c:	e028      	b.n	80075e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4413      	add	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	e00d      	b.n	80075be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	3340      	adds	r3, #64	; 0x40
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4413      	add	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	3301      	adds	r3, #1
 80075bc:	73fb      	strb	r3, [r7, #15]
 80075be:	7bfa      	ldrb	r2, [r7, #15]
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d3ec      	bcc.n	80075a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075c8:	883b      	ldrh	r3, [r7, #0]
 80075ca:	0418      	lsls	r0, r3, #16
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6819      	ldr	r1, [r3, #0]
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4302      	orrs	r2, r0
 80075d8:	3340      	adds	r3, #64	; 0x40
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	887a      	ldrh	r2, [r7, #2]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <HAL_PCDEx_ActivateLPM+0x44>)
 8007640:	4313      	orrs	r3, r2
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	10000003 	.word	0x10000003

08007658 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007678:	4b19      	ldr	r3, [pc, #100]	; (80076e0 <HAL_PWREx_ConfigSupply+0x70>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d00a      	beq.n	800769a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <HAL_PWREx_ConfigSupply+0x70>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	429a      	cmp	r2, r3
 8007690:	d001      	beq.n	8007696 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e01f      	b.n	80076d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e01d      	b.n	80076d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800769a:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <HAL_PWREx_ConfigSupply+0x70>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f023 0207 	bic.w	r2, r3, #7
 80076a2:	490f      	ldr	r1, [pc, #60]	; (80076e0 <HAL_PWREx_ConfigSupply+0x70>)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80076aa:	f7fa f8ad 	bl	8001808 <HAL_GetTick>
 80076ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076b0:	e009      	b.n	80076c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076b2:	f7fa f8a9 	bl	8001808 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076c0:	d901      	bls.n	80076c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e007      	b.n	80076d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076c6:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <HAL_PWREx_ConfigSupply+0x70>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	d1ee      	bne.n	80076b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	58024800 	.word	0x58024800

080076e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4a04      	ldr	r2, [pc, #16]	; (8007700 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80076ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f2:	60d3      	str	r3, [r2, #12]
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	58024800 	.word	0x58024800

08007704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08c      	sub	sp, #48	; 0x30
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	f000 bc48 	b.w	8007fa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8088 	beq.w	8007836 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007726:	4b99      	ldr	r3, [pc, #612]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007730:	4b96      	ldr	r3, [pc, #600]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	2b10      	cmp	r3, #16
 800773a:	d007      	beq.n	800774c <HAL_RCC_OscConfig+0x48>
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	2b18      	cmp	r3, #24
 8007740:	d111      	bne.n	8007766 <HAL_RCC_OscConfig+0x62>
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d10c      	bne.n	8007766 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800774c:	4b8f      	ldr	r3, [pc, #572]	; (800798c <HAL_RCC_OscConfig+0x288>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d06d      	beq.n	8007834 <HAL_RCC_OscConfig+0x130>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d169      	bne.n	8007834 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f000 bc21 	b.w	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776e:	d106      	bne.n	800777e <HAL_RCC_OscConfig+0x7a>
 8007770:	4b86      	ldr	r3, [pc, #536]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a85      	ldr	r2, [pc, #532]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e02e      	b.n	80077dc <HAL_RCC_OscConfig+0xd8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10c      	bne.n	80077a0 <HAL_RCC_OscConfig+0x9c>
 8007786:	4b81      	ldr	r3, [pc, #516]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a80      	ldr	r2, [pc, #512]	; (800798c <HAL_RCC_OscConfig+0x288>)
 800778c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	4b7e      	ldr	r3, [pc, #504]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a7d      	ldr	r2, [pc, #500]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	e01d      	b.n	80077dc <HAL_RCC_OscConfig+0xd8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077a8:	d10c      	bne.n	80077c4 <HAL_RCC_OscConfig+0xc0>
 80077aa:	4b78      	ldr	r3, [pc, #480]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a77      	ldr	r2, [pc, #476]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	4b75      	ldr	r3, [pc, #468]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a74      	ldr	r2, [pc, #464]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e00b      	b.n	80077dc <HAL_RCC_OscConfig+0xd8>
 80077c4:	4b71      	ldr	r3, [pc, #452]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a70      	ldr	r2, [pc, #448]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	4b6e      	ldr	r3, [pc, #440]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a6d      	ldr	r2, [pc, #436]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80077d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d013      	beq.n	800780c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e4:	f7fa f810 	bl	8001808 <HAL_GetTick>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ec:	f7fa f80c 	bl	8001808 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b64      	cmp	r3, #100	; 0x64
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e3d4      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077fe:	4b63      	ldr	r3, [pc, #396]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f0      	beq.n	80077ec <HAL_RCC_OscConfig+0xe8>
 800780a:	e014      	b.n	8007836 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7f9 fffc 	bl	8001808 <HAL_GetTick>
 8007810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007814:	f7f9 fff8 	bl	8001808 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e3c0      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007826:	4b59      	ldr	r3, [pc, #356]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <HAL_RCC_OscConfig+0x110>
 8007832:	e000      	b.n	8007836 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80ca 	beq.w	80079d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007844:	4b51      	ldr	r3, [pc, #324]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800784c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800784e:	4b4f      	ldr	r3, [pc, #316]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <HAL_RCC_OscConfig+0x166>
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	2b18      	cmp	r3, #24
 800785e:	d156      	bne.n	800790e <HAL_RCC_OscConfig+0x20a>
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d151      	bne.n	800790e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800786a:	4b48      	ldr	r3, [pc, #288]	; (800798c <HAL_RCC_OscConfig+0x288>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_RCC_OscConfig+0x17e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e392      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007882:	4b42      	ldr	r3, [pc, #264]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 0219 	bic.w	r2, r3, #25
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	493f      	ldr	r1, [pc, #252]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007890:	4313      	orrs	r3, r2
 8007892:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7f9 ffb8 	bl	8001808 <HAL_GetTick>
 8007898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800789c:	f7f9 ffb4 	bl	8001808 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e37c      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ae:	4b37      	ldr	r3, [pc, #220]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0f0      	beq.n	800789c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ba:	f7f9 ffd5 	bl	8001868 <HAL_GetREVID>
 80078be:	4603      	mov	r3, r0
 80078c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d817      	bhi.n	80078f8 <HAL_RCC_OscConfig+0x1f4>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d108      	bne.n	80078e2 <HAL_RCC_OscConfig+0x1de>
 80078d0:	4b2e      	ldr	r3, [pc, #184]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078d8:	4a2c      	ldr	r2, [pc, #176]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80078da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078e0:	e07a      	b.n	80079d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e2:	4b2a      	ldr	r3, [pc, #168]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	031b      	lsls	r3, r3, #12
 80078f0:	4926      	ldr	r1, [pc, #152]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078f6:	e06f      	b.n	80079d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f8:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_RCC_OscConfig+0x288>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	4921      	ldr	r1, [pc, #132]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007908:	4313      	orrs	r3, r2
 800790a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790c:	e064      	b.n	80079d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d047      	beq.n	80079a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007916:	4b1d      	ldr	r3, [pc, #116]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f023 0219 	bic.w	r2, r3, #25
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	491a      	ldr	r1, [pc, #104]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007924:	4313      	orrs	r3, r2
 8007926:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7f9 ff6e 	bl	8001808 <HAL_GetTick>
 800792c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007930:	f7f9 ff6a 	bl	8001808 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e332      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0304 	and.w	r3, r3, #4
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800794e:	f7f9 ff8b 	bl	8001868 <HAL_GetREVID>
 8007952:	4603      	mov	r3, r0
 8007954:	f241 0203 	movw	r2, #4099	; 0x1003
 8007958:	4293      	cmp	r3, r2
 800795a:	d819      	bhi.n	8007990 <HAL_RCC_OscConfig+0x28c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d108      	bne.n	8007976 <HAL_RCC_OscConfig+0x272>
 8007964:	4b09      	ldr	r3, [pc, #36]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800796c:	4a07      	ldr	r2, [pc, #28]	; (800798c <HAL_RCC_OscConfig+0x288>)
 800796e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007972:	6053      	str	r3, [r2, #4]
 8007974:	e030      	b.n	80079d8 <HAL_RCC_OscConfig+0x2d4>
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	031b      	lsls	r3, r3, #12
 8007984:	4901      	ldr	r1, [pc, #4]	; (800798c <HAL_RCC_OscConfig+0x288>)
 8007986:	4313      	orrs	r3, r2
 8007988:	604b      	str	r3, [r1, #4]
 800798a:	e025      	b.n	80079d8 <HAL_RCC_OscConfig+0x2d4>
 800798c:	58024400 	.word	0x58024400
 8007990:	4b9a      	ldr	r3, [pc, #616]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	4997      	ldr	r1, [pc, #604]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	604b      	str	r3, [r1, #4]
 80079a4:	e018      	b.n	80079d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079a6:	4b95      	ldr	r3, [pc, #596]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a94      	ldr	r2, [pc, #592]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b2:	f7f9 ff29 	bl	8001808 <HAL_GetTick>
 80079b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ba:	f7f9 ff25 	bl	8001808 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e2ed      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079cc:	4b8b      	ldr	r3, [pc, #556]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f0      	bne.n	80079ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80a9 	beq.w	8007b38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079e6:	4b85      	ldr	r3, [pc, #532]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079f0:	4b82      	ldr	r3, [pc, #520]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d007      	beq.n	8007a0c <HAL_RCC_OscConfig+0x308>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2b18      	cmp	r3, #24
 8007a00:	d13a      	bne.n	8007a78 <HAL_RCC_OscConfig+0x374>
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d135      	bne.n	8007a78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a0c:	4b7b      	ldr	r3, [pc, #492]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <HAL_RCC_OscConfig+0x320>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e2c1      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a24:	f7f9 ff20 	bl	8001868 <HAL_GetREVID>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d817      	bhi.n	8007a62 <HAL_RCC_OscConfig+0x35e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d108      	bne.n	8007a4c <HAL_RCC_OscConfig+0x348>
 8007a3a:	4b70      	ldr	r3, [pc, #448]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a42:	4a6e      	ldr	r2, [pc, #440]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a4a:	e075      	b.n	8007b38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a4c:	4b6b      	ldr	r3, [pc, #428]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	069b      	lsls	r3, r3, #26
 8007a5a:	4968      	ldr	r1, [pc, #416]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a60:	e06a      	b.n	8007b38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a62:	4b66      	ldr	r3, [pc, #408]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	061b      	lsls	r3, r3, #24
 8007a70:	4962      	ldr	r1, [pc, #392]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a76:	e05f      	b.n	8007b38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d042      	beq.n	8007b06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a80:	4b5e      	ldr	r3, [pc, #376]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a5d      	ldr	r2, [pc, #372]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7f9 febc 	bl	8001808 <HAL_GetTick>
 8007a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a94:	f7f9 feb8 	bl	8001808 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e280      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aa6:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f0      	beq.n	8007a94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ab2:	f7f9 fed9 	bl	8001868 <HAL_GetREVID>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d817      	bhi.n	8007af0 <HAL_RCC_OscConfig+0x3ec>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d108      	bne.n	8007ada <HAL_RCC_OscConfig+0x3d6>
 8007ac8:	4b4c      	ldr	r3, [pc, #304]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ad0:	4a4a      	ldr	r2, [pc, #296]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ad6:	6053      	str	r3, [r2, #4]
 8007ad8:	e02e      	b.n	8007b38 <HAL_RCC_OscConfig+0x434>
 8007ada:	4b48      	ldr	r3, [pc, #288]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	069b      	lsls	r3, r3, #26
 8007ae8:	4944      	ldr	r1, [pc, #272]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	604b      	str	r3, [r1, #4]
 8007aee:	e023      	b.n	8007b38 <HAL_RCC_OscConfig+0x434>
 8007af0:	4b42      	ldr	r3, [pc, #264]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	061b      	lsls	r3, r3, #24
 8007afe:	493f      	ldr	r1, [pc, #252]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60cb      	str	r3, [r1, #12]
 8007b04:	e018      	b.n	8007b38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b06:	4b3d      	ldr	r3, [pc, #244]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3c      	ldr	r2, [pc, #240]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b12:	f7f9 fe79 	bl	8001808 <HAL_GetTick>
 8007b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b18:	e008      	b.n	8007b2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b1a:	f7f9 fe75 	bl	8001808 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d901      	bls.n	8007b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e23d      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b2c:	4b33      	ldr	r3, [pc, #204]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1f0      	bne.n	8007b1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d036      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d019      	beq.n	8007b80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b4c:	4b2b      	ldr	r3, [pc, #172]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b50:	4a2a      	ldr	r2, [pc, #168]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b58:	f7f9 fe56 	bl	8001808 <HAL_GetTick>
 8007b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b60:	f7f9 fe52 	bl	8001808 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e21a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b72:	4b22      	ldr	r3, [pc, #136]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0x45c>
 8007b7e:	e018      	b.n	8007bb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b80:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b84:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007b86:	f023 0301 	bic.w	r3, r3, #1
 8007b8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8c:	f7f9 fe3c 	bl	8001808 <HAL_GetTick>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b94:	f7f9 fe38 	bl	8001808 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e200      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ba6:	4b15      	ldr	r3, [pc, #84]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d039      	beq.n	8007c32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d01c      	beq.n	8007c00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bd2:	f7f9 fe19 	bl	8001808 <HAL_GetTick>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bda:	f7f9 fe15 	bl	8001808 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e1dd      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bec:	4b03      	ldr	r3, [pc, #12]	; (8007bfc <HAL_RCC_OscConfig+0x4f8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0f0      	beq.n	8007bda <HAL_RCC_OscConfig+0x4d6>
 8007bf8:	e01b      	b.n	8007c32 <HAL_RCC_OscConfig+0x52e>
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c00:	4b9b      	ldr	r3, [pc, #620]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a9a      	ldr	r2, [pc, #616]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c0c:	f7f9 fdfc 	bl	8001808 <HAL_GetTick>
 8007c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c14:	f7f9 fdf8 	bl	8001808 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e1c0      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c26:	4b92      	ldr	r3, [pc, #584]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f0      	bne.n	8007c14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8081 	beq.w	8007d42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c40:	4b8c      	ldr	r3, [pc, #560]	; (8007e74 <HAL_RCC_OscConfig+0x770>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a8b      	ldr	r2, [pc, #556]	; (8007e74 <HAL_RCC_OscConfig+0x770>)
 8007c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c4c:	f7f9 fddc 	bl	8001808 <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c54:	f7f9 fdd8 	bl	8001808 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b64      	cmp	r3, #100	; 0x64
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e1a0      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c66:	4b83      	ldr	r3, [pc, #524]	; (8007e74 <HAL_RCC_OscConfig+0x770>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f0      	beq.n	8007c54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d106      	bne.n	8007c88 <HAL_RCC_OscConfig+0x584>
 8007c7a:	4b7d      	ldr	r3, [pc, #500]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	4a7c      	ldr	r2, [pc, #496]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	6713      	str	r3, [r2, #112]	; 0x70
 8007c86:	e02d      	b.n	8007ce4 <HAL_RCC_OscConfig+0x5e0>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <HAL_RCC_OscConfig+0x5a6>
 8007c90:	4b77      	ldr	r3, [pc, #476]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c94:	4a76      	ldr	r2, [pc, #472]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c9c:	4b74      	ldr	r3, [pc, #464]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca0:	4a73      	ldr	r2, [pc, #460]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007ca2:	f023 0304 	bic.w	r3, r3, #4
 8007ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca8:	e01c      	b.n	8007ce4 <HAL_RCC_OscConfig+0x5e0>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RCC_OscConfig+0x5c8>
 8007cb2:	4b6f      	ldr	r3, [pc, #444]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	4a6e      	ldr	r2, [pc, #440]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cb8:	f043 0304 	orr.w	r3, r3, #4
 8007cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cbe:	4b6c      	ldr	r3, [pc, #432]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	4a6b      	ldr	r2, [pc, #428]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cca:	e00b      	b.n	8007ce4 <HAL_RCC_OscConfig+0x5e0>
 8007ccc:	4b68      	ldr	r3, [pc, #416]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	4a67      	ldr	r2, [pc, #412]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd8:	4b65      	ldr	r3, [pc, #404]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cdc:	4a64      	ldr	r2, [pc, #400]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007cde:	f023 0304 	bic.w	r3, r3, #4
 8007ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d015      	beq.n	8007d18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cec:	f7f9 fd8c 	bl	8001808 <HAL_GetTick>
 8007cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cf2:	e00a      	b.n	8007d0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf4:	f7f9 fd88 	bl	8001808 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e14e      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d0a:	4b59      	ldr	r3, [pc, #356]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0ee      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x5f0>
 8007d16:	e014      	b.n	8007d42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d18:	f7f9 fd76 	bl	8001808 <HAL_GetTick>
 8007d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d1e:	e00a      	b.n	8007d36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d20:	f7f9 fd72 	bl	8001808 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e138      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d36:	4b4e      	ldr	r3, [pc, #312]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1ee      	bne.n	8007d20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 812d 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d4c:	4b48      	ldr	r3, [pc, #288]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d54:	2b18      	cmp	r3, #24
 8007d56:	f000 80bd 	beq.w	8007ed4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	f040 809e 	bne.w	8007ea0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d64:	4b42      	ldr	r3, [pc, #264]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a41      	ldr	r2, [pc, #260]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7f9 fd4a 	bl	8001808 <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d78:	f7f9 fd46 	bl	8001808 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e10e      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d8a:	4b39      	ldr	r3, [pc, #228]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f0      	bne.n	8007d78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d96:	4b36      	ldr	r3, [pc, #216]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d9a:	4b37      	ldr	r3, [pc, #220]	; (8007e78 <HAL_RCC_OscConfig+0x774>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007da6:	0112      	lsls	r2, r2, #4
 8007da8:	430a      	orrs	r2, r1
 8007daa:	4931      	ldr	r1, [pc, #196]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	628b      	str	r3, [r1, #40]	; 0x28
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	3b01      	subs	r3, #1
 8007db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	025b      	lsls	r3, r3, #9
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	041b      	lsls	r3, r3, #16
 8007dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007de0:	4923      	ldr	r1, [pc, #140]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007de6:	4b22      	ldr	r3, [pc, #136]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	4a21      	ldr	r2, [pc, #132]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007df2:	4b1f      	ldr	r3, [pc, #124]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df6:	4b21      	ldr	r3, [pc, #132]	; (8007e7c <HAL_RCC_OscConfig+0x778>)
 8007df8:	4013      	ands	r3, r2
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dfe:	00d2      	lsls	r2, r2, #3
 8007e00:	491b      	ldr	r1, [pc, #108]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	f023 020c 	bic.w	r2, r3, #12
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	4917      	ldr	r1, [pc, #92]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e18:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	f023 0202 	bic.w	r2, r3, #2
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e24:	4912      	ldr	r1, [pc, #72]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e2a:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	4a10      	ldr	r2, [pc, #64]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	4a0d      	ldr	r2, [pc, #52]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e42:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	4a0a      	ldr	r2, [pc, #40]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e4e:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	4a07      	ldr	r2, [pc, #28]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e54:	f043 0301 	orr.w	r3, r3, #1
 8007e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e5a:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a04      	ldr	r2, [pc, #16]	; (8007e70 <HAL_RCC_OscConfig+0x76c>)
 8007e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e66:	f7f9 fccf 	bl	8001808 <HAL_GetTick>
 8007e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e6c:	e011      	b.n	8007e92 <HAL_RCC_OscConfig+0x78e>
 8007e6e:	bf00      	nop
 8007e70:	58024400 	.word	0x58024400
 8007e74:	58024800 	.word	0x58024800
 8007e78:	fffffc0c 	.word	0xfffffc0c
 8007e7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e80:	f7f9 fcc2 	bl	8001808 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e08a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e92:	4b47      	ldr	r3, [pc, #284]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <HAL_RCC_OscConfig+0x77c>
 8007e9e:	e082      	b.n	8007fa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea0:	4b43      	ldr	r3, [pc, #268]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a42      	ldr	r2, [pc, #264]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eac:	f7f9 fcac 	bl	8001808 <HAL_GetTick>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb4:	f7f9 fca8 	bl	8001808 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e070      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ec6:	4b3a      	ldr	r3, [pc, #232]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x7b0>
 8007ed2:	e068      	b.n	8007fa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ed4:	4b36      	ldr	r3, [pc, #216]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007eda:	4b35      	ldr	r3, [pc, #212]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d031      	beq.n	8007f4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f003 0203 	and.w	r2, r3, #3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d12a      	bne.n	8007f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d122      	bne.n	8007f4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d11a      	bne.n	8007f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0a5b      	lsrs	r3, r3, #9
 8007f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d111      	bne.n	8007f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d108      	bne.n	8007f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	0e1b      	lsrs	r3, r3, #24
 8007f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d001      	beq.n	8007f50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e02b      	b.n	8007fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f50:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	08db      	lsrs	r3, r3, #3
 8007f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d01f      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	4a11      	ldr	r2, [pc, #68]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f72:	f7f9 fc49 	bl	8001808 <HAL_GetTick>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f78:	bf00      	nop
 8007f7a:	f7f9 fc45 	bl	8001808 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d0f9      	beq.n	8007f7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <HAL_RCC_OscConfig+0x8b0>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f92:	00d2      	lsls	r2, r2, #3
 8007f94:	4906      	ldr	r1, [pc, #24]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	4a04      	ldr	r2, [pc, #16]	; (8007fb0 <HAL_RCC_OscConfig+0x8ac>)
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3730      	adds	r7, #48	; 0x30
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	58024400 	.word	0x58024400
 8007fb4:	ffff0007 	.word	0xffff0007

08007fb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e19c      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fcc:	4b8a      	ldr	r3, [pc, #552]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d910      	bls.n	8007ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fda:	4b87      	ldr	r3, [pc, #540]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f023 020f 	bic.w	r2, r3, #15
 8007fe2:	4985      	ldr	r1, [pc, #532]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fea:	4b83      	ldr	r3, [pc, #524]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d001      	beq.n	8007ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e184      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d010      	beq.n	800802a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	4b7b      	ldr	r3, [pc, #492]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008014:	429a      	cmp	r2, r3
 8008016:	d908      	bls.n	800802a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008018:	4b78      	ldr	r3, [pc, #480]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	4975      	ldr	r1, [pc, #468]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008026:	4313      	orrs	r3, r2
 8008028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d010      	beq.n	8008058 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695a      	ldr	r2, [r3, #20]
 800803a:	4b70      	ldr	r3, [pc, #448]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008042:	429a      	cmp	r2, r3
 8008044:	d908      	bls.n	8008058 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008046:	4b6d      	ldr	r3, [pc, #436]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	496a      	ldr	r1, [pc, #424]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008054:	4313      	orrs	r3, r2
 8008056:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b00      	cmp	r3, #0
 8008062:	d010      	beq.n	8008086 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699a      	ldr	r2, [r3, #24]
 8008068:	4b64      	ldr	r3, [pc, #400]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008070:	429a      	cmp	r2, r3
 8008072:	d908      	bls.n	8008086 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008074:	4b61      	ldr	r3, [pc, #388]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	495e      	ldr	r1, [pc, #376]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008082:	4313      	orrs	r3, r2
 8008084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	d010      	beq.n	80080b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69da      	ldr	r2, [r3, #28]
 8008096:	4b59      	ldr	r3, [pc, #356]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800809e:	429a      	cmp	r2, r3
 80080a0:	d908      	bls.n	80080b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080a2:	4b56      	ldr	r3, [pc, #344]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	4953      	ldr	r1, [pc, #332]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d010      	beq.n	80080e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	4b4d      	ldr	r3, [pc, #308]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d908      	bls.n	80080e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d0:	4b4a      	ldr	r3, [pc, #296]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	f023 020f 	bic.w	r2, r3, #15
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4947      	ldr	r1, [pc, #284]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d055      	beq.n	800819a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080ee:	4b43      	ldr	r3, [pc, #268]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	4940      	ldr	r1, [pc, #256]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d107      	bne.n	8008118 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008108:	4b3c      	ldr	r3, [pc, #240]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d121      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e0f6      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b03      	cmp	r3, #3
 800811e:	d107      	bne.n	8008130 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008120:	4b36      	ldr	r3, [pc, #216]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d115      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e0ea      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d107      	bne.n	8008148 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008138:	4b30      	ldr	r3, [pc, #192]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e0de      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008148:	4b2c      	ldr	r3, [pc, #176]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0d6      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008158:	4b28      	ldr	r3, [pc, #160]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f023 0207 	bic.w	r2, r3, #7
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4925      	ldr	r1, [pc, #148]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 8008166:	4313      	orrs	r3, r2
 8008168:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7f9 fb4d 	bl	8001808 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008170:	e00a      	b.n	8008188 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008172:	f7f9 fb49 	bl	8001808 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008180:	4293      	cmp	r3, r2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e0be      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008188:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	429a      	cmp	r2, r3
 8008198:	d1eb      	bne.n	8008172 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d010      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	4b14      	ldr	r3, [pc, #80]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d208      	bcs.n	80081c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f023 020f 	bic.w	r2, r3, #15
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	490e      	ldr	r1, [pc, #56]	; (80081fc <HAL_RCC_ClockConfig+0x244>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081c8:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d214      	bcs.n	8008200 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 020f 	bic.w	r2, r3, #15
 80081de:	4906      	ldr	r1, [pc, #24]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e6:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <HAL_RCC_ClockConfig+0x240>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e086      	b.n	8008306 <HAL_RCC_ClockConfig+0x34e>
 80081f8:	52002000 	.word	0x52002000
 80081fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	4b3f      	ldr	r3, [pc, #252]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008218:	429a      	cmp	r2, r3
 800821a:	d208      	bcs.n	800822e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800821c:	4b3c      	ldr	r3, [pc, #240]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	4939      	ldr	r1, [pc, #228]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 800822a:	4313      	orrs	r3, r2
 800822c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d010      	beq.n	800825c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	4b34      	ldr	r3, [pc, #208]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008246:	429a      	cmp	r2, r3
 8008248:	d208      	bcs.n	800825c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800824a:	4b31      	ldr	r3, [pc, #196]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	492e      	ldr	r1, [pc, #184]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 8008258:	4313      	orrs	r3, r2
 800825a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699a      	ldr	r2, [r3, #24]
 800826c:	4b28      	ldr	r3, [pc, #160]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008274:	429a      	cmp	r2, r3
 8008276:	d208      	bcs.n	800828a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008278:	4b25      	ldr	r3, [pc, #148]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	4922      	ldr	r1, [pc, #136]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 8008286:	4313      	orrs	r3, r2
 8008288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b00      	cmp	r3, #0
 8008294:	d010      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d208      	bcs.n	80082b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082a6:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	4917      	ldr	r1, [pc, #92]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082b8:	f000 f834 	bl	8008324 <HAL_RCC_GetSysClockFreq>
 80082bc:	4602      	mov	r2, r0
 80082be:	4b14      	ldr	r3, [pc, #80]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	4912      	ldr	r1, [pc, #72]	; (8008314 <HAL_RCC_ClockConfig+0x35c>)
 80082ca:	5ccb      	ldrb	r3, [r1, r3]
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
 80082d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <HAL_RCC_ClockConfig+0x358>)
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	4a0d      	ldr	r2, [pc, #52]	; (8008314 <HAL_RCC_ClockConfig+0x35c>)
 80082e0:	5cd3      	ldrb	r3, [r2, r3]
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	4a0a      	ldr	r2, [pc, #40]	; (8008318 <HAL_RCC_ClockConfig+0x360>)
 80082ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <HAL_RCC_ClockConfig+0x364>)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <HAL_RCC_ClockConfig+0x368>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7f8 fe5c 	bl	8000fb8 <HAL_InitTick>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	58024400 	.word	0x58024400
 8008314:	08013e98 	.word	0x08013e98
 8008318:	24000008 	.word	0x24000008
 800831c:	24000004 	.word	0x24000004
 8008320:	2400000c 	.word	0x2400000c

08008324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008324:	b480      	push	{r7}
 8008326:	b089      	sub	sp, #36	; 0x24
 8008328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800832a:	4bb3      	ldr	r3, [pc, #716]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008332:	2b18      	cmp	r3, #24
 8008334:	f200 8155 	bhi.w	80085e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <HAL_RCC_GetSysClockFreq+0x1c>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	080083a5 	.word	0x080083a5
 8008344:	080085e3 	.word	0x080085e3
 8008348:	080085e3 	.word	0x080085e3
 800834c:	080085e3 	.word	0x080085e3
 8008350:	080085e3 	.word	0x080085e3
 8008354:	080085e3 	.word	0x080085e3
 8008358:	080085e3 	.word	0x080085e3
 800835c:	080085e3 	.word	0x080085e3
 8008360:	080083cb 	.word	0x080083cb
 8008364:	080085e3 	.word	0x080085e3
 8008368:	080085e3 	.word	0x080085e3
 800836c:	080085e3 	.word	0x080085e3
 8008370:	080085e3 	.word	0x080085e3
 8008374:	080085e3 	.word	0x080085e3
 8008378:	080085e3 	.word	0x080085e3
 800837c:	080085e3 	.word	0x080085e3
 8008380:	080083d1 	.word	0x080083d1
 8008384:	080085e3 	.word	0x080085e3
 8008388:	080085e3 	.word	0x080085e3
 800838c:	080085e3 	.word	0x080085e3
 8008390:	080085e3 	.word	0x080085e3
 8008394:	080085e3 	.word	0x080085e3
 8008398:	080085e3 	.word	0x080085e3
 800839c:	080085e3 	.word	0x080085e3
 80083a0:	080083d7 	.word	0x080083d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a4:	4b94      	ldr	r3, [pc, #592]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b0:	4b91      	ldr	r3, [pc, #580]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	08db      	lsrs	r3, r3, #3
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	4a90      	ldr	r2, [pc, #576]	; (80085fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
 80083c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80083c2:	e111      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083c4:	4b8d      	ldr	r3, [pc, #564]	; (80085fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083c6:	61bb      	str	r3, [r7, #24]
      break;
 80083c8:	e10e      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80083ca:	4b8d      	ldr	r3, [pc, #564]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083cc:	61bb      	str	r3, [r7, #24]
      break;
 80083ce:	e10b      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80083d0:	4b8c      	ldr	r3, [pc, #560]	; (8008604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083d2:	61bb      	str	r3, [r7, #24]
      break;
 80083d4:	e108      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083d6:	4b88      	ldr	r3, [pc, #544]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083e0:	4b85      	ldr	r3, [pc, #532]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	091b      	lsrs	r3, r3, #4
 80083e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083ec:	4b82      	ldr	r3, [pc, #520]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083f6:	4b80      	ldr	r3, [pc, #512]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fa:	08db      	lsrs	r3, r3, #3
 80083fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	fb02 f303 	mul.w	r3, r2, r3
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80e1 	beq.w	80085dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b02      	cmp	r3, #2
 800841e:	f000 8083 	beq.w	8008528 <HAL_RCC_GetSysClockFreq+0x204>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b02      	cmp	r3, #2
 8008426:	f200 80a1 	bhi.w	800856c <HAL_RCC_GetSysClockFreq+0x248>
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_RCC_GetSysClockFreq+0x114>
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d056      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008436:	e099      	b.n	800856c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008438:	4b6f      	ldr	r3, [pc, #444]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b00      	cmp	r3, #0
 8008442:	d02d      	beq.n	80084a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008444:	4b6c      	ldr	r3, [pc, #432]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	08db      	lsrs	r3, r3, #3
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	4a6b      	ldr	r2, [pc, #428]	; (80085fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
 8008454:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846e:	4b62      	ldr	r3, [pc, #392]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008482:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800848a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800849e:	e087      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800860c <HAL_RCC_GetSysClockFreq+0x2e8>
 80084ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b2:	4b51      	ldr	r3, [pc, #324]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008608 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084e2:	e065      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f6:	4b40      	ldr	r3, [pc, #256]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008506:	ed97 6a02 	vldr	s12, [r7, #8]
 800850a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008608 <HAL_RCC_GetSysClockFreq+0x2e4>
 800850e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008526:	e043      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853a:	4b2f      	ldr	r3, [pc, #188]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854a:	ed97 6a02 	vldr	s12, [r7, #8]
 800854e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800855e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800856a:	e021      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2ec>
 800857a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857e:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008592:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	0a5b      	lsrs	r3, r3, #9
 80085b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ba:	3301      	adds	r3, #1
 80085bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d4:	ee17 3a90 	vmov	r3, s15
 80085d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085da:	e005      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
      break;
 80085e0:	e002      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085e4:	61bb      	str	r3, [r7, #24]
      break;
 80085e6:	bf00      	nop
  }

  return sysclockfreq;
 80085e8:	69bb      	ldr	r3, [r7, #24]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3724      	adds	r7, #36	; 0x24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	58024400 	.word	0x58024400
 80085fc:	03d09000 	.word	0x03d09000
 8008600:	003d0900 	.word	0x003d0900
 8008604:	017d7840 	.word	0x017d7840
 8008608:	46000000 	.word	0x46000000
 800860c:	4c742400 	.word	0x4c742400
 8008610:	4a742400 	.word	0x4a742400
 8008614:	4bbebc20 	.word	0x4bbebc20

08008618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800861e:	f7ff fe81 	bl	8008324 <HAL_RCC_GetSysClockFreq>
 8008622:	4602      	mov	r2, r0
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <HAL_RCC_GetHCLKFreq+0x50>)
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	0a1b      	lsrs	r3, r3, #8
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	490f      	ldr	r1, [pc, #60]	; (800866c <HAL_RCC_GetHCLKFreq+0x54>)
 8008630:	5ccb      	ldrb	r3, [r1, r3]
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	fa22 f303 	lsr.w	r3, r2, r3
 800863a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <HAL_RCC_GetHCLKFreq+0x50>)
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	4a09      	ldr	r2, [pc, #36]	; (800866c <HAL_RCC_GetHCLKFreq+0x54>)
 8008646:	5cd3      	ldrb	r3, [r2, r3]
 8008648:	f003 031f 	and.w	r3, r3, #31
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	fa22 f303 	lsr.w	r3, r2, r3
 8008652:	4a07      	ldr	r2, [pc, #28]	; (8008670 <HAL_RCC_GetHCLKFreq+0x58>)
 8008654:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008656:	4a07      	ldr	r2, [pc, #28]	; (8008674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <HAL_RCC_GetHCLKFreq+0x58>)
 800865e:	681b      	ldr	r3, [r3, #0]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	58024400 	.word	0x58024400
 800866c:	08013e98 	.word	0x08013e98
 8008670:	24000008 	.word	0x24000008
 8008674:	24000004 	.word	0x24000004

08008678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800867c:	f7ff ffcc 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 8008680:	4602      	mov	r2, r0
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	4904      	ldr	r1, [pc, #16]	; (80086a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800868e:	5ccb      	ldrb	r3, [r1, r3]
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd80      	pop	{r7, pc}
 800869c:	58024400 	.word	0x58024400
 80086a0:	08013e98 	.word	0x08013e98

080086a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	223f      	movs	r2, #63	; 0x3f
 80086b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	f003 0207 	and.w	r2, r3, #7
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80086cc:	4b14      	ldr	r3, [pc, #80]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80086d8:	4b11      	ldr	r3, [pc, #68]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80086fc:	4b08      	ldr	r3, [pc, #32]	; (8008720 <HAL_RCC_GetClockConfig+0x7c>)
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <HAL_RCC_GetClockConfig+0x80>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 020f 	and.w	r2, r3, #15
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	58024400 	.word	0x58024400
 8008724:	52002000 	.word	0x52002000

08008728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800872c:	b0ca      	sub	sp, #296	; 0x128
 800872e:	af00      	add	r7, sp, #0
 8008730:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008734:	2300      	movs	r3, #0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800873a:	2300      	movs	r3, #0
 800873c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800874c:	2500      	movs	r5, #0
 800874e:	ea54 0305 	orrs.w	r3, r4, r5
 8008752:	d049      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800875a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800875e:	d02f      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008764:	d828      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800876a:	d01a      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800876c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008770:	d822      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877a:	d007      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800877c:	e01c      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800877e:	4bb8      	ldr	r3, [pc, #736]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	4ab7      	ldr	r2, [pc, #732]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800878a:	e01a      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008790:	3308      	adds	r3, #8
 8008792:	2102      	movs	r1, #2
 8008794:	4618      	mov	r0, r3
 8008796:	f002 fb61 	bl	800ae5c <RCCEx_PLL2_Config>
 800879a:	4603      	mov	r3, r0
 800879c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087a0:	e00f      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a6:	3328      	adds	r3, #40	; 0x28
 80087a8:	2102      	movs	r1, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f002 fc08 	bl	800afc0 <RCCEx_PLL3_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087b6:	e004      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087be:	e000      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80087c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087ca:	4ba5      	ldr	r3, [pc, #660]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d8:	4aa1      	ldr	r2, [pc, #644]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087da:	430b      	orrs	r3, r1
 80087dc:	6513      	str	r3, [r2, #80]	; 0x50
 80087de:	e003      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80087f4:	f04f 0900 	mov.w	r9, #0
 80087f8:	ea58 0309 	orrs.w	r3, r8, r9
 80087fc:	d047      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008804:	2b04      	cmp	r3, #4
 8008806:	d82a      	bhi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008808:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	08008825 	.word	0x08008825
 8008814:	08008833 	.word	0x08008833
 8008818:	08008849 	.word	0x08008849
 800881c:	08008867 	.word	0x08008867
 8008820:	08008867 	.word	0x08008867
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008824:	4b8e      	ldr	r3, [pc, #568]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	4a8d      	ldr	r2, [pc, #564]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800882a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008830:	e01a      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008836:	3308      	adds	r3, #8
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f002 fb0e 	bl	800ae5c <RCCEx_PLL2_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008846:	e00f      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884c:	3328      	adds	r3, #40	; 0x28
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f002 fbb5 	bl	800afc0 <RCCEx_PLL3_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800885c:	e004      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008864:	e000      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008870:	4b7b      	ldr	r3, [pc, #492]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008874:	f023 0107 	bic.w	r1, r3, #7
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	4a78      	ldr	r2, [pc, #480]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008880:	430b      	orrs	r3, r1
 8008882:	6513      	str	r3, [r2, #80]	; 0x50
 8008884:	e003      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800888a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800889a:	f04f 0b00 	mov.w	fp, #0
 800889e:	ea5a 030b 	orrs.w	r3, sl, fp
 80088a2:	d04c      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ae:	d030      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80088b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b4:	d829      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088b6:	2bc0      	cmp	r3, #192	; 0xc0
 80088b8:	d02d      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088ba:	2bc0      	cmp	r3, #192	; 0xc0
 80088bc:	d825      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088be:	2b80      	cmp	r3, #128	; 0x80
 80088c0:	d018      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80088c2:	2b80      	cmp	r3, #128	; 0x80
 80088c4:	d821      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d007      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80088ce:	e01c      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d0:	4b63      	ldr	r3, [pc, #396]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	4a62      	ldr	r2, [pc, #392]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80088dc:	e01c      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f002 fab8 	bl	800ae5c <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80088f2:	e011      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f8:	3328      	adds	r3, #40	; 0x28
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f002 fb5f 	bl	800afc0 <RCCEx_PLL3_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008908:	e006      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008910:	e002      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008912:	bf00      	nop
 8008914:	e000      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008920:	4b4f      	ldr	r3, [pc, #316]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008924:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892e:	4a4c      	ldr	r2, [pc, #304]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008930:	430b      	orrs	r3, r1
 8008932:	6513      	str	r3, [r2, #80]	; 0x50
 8008934:	e003      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800893a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800894a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800894e:	2300      	movs	r3, #0
 8008950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008954:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008958:	460b      	mov	r3, r1
 800895a:	4313      	orrs	r3, r2
 800895c:	d053      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800896a:	d035      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800896c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008970:	d82e      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008972:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008976:	d031      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008978:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800897c:	d828      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800897e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008982:	d01a      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008988:	d822      	bhi.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800898e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008992:	d007      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008994:	e01c      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008996:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	4a31      	ldr	r2, [pc, #196]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800899c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089a2:	e01c      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a8:	3308      	adds	r3, #8
 80089aa:	2100      	movs	r1, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	f002 fa55 	bl	800ae5c <RCCEx_PLL2_Config>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80089b8:	e011      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089be:	3328      	adds	r3, #40	; 0x28
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 fafc 	bl	800afc0 <RCCEx_PLL3_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089ce:	e006      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089d6:	e002      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80089d8:	bf00      	nop
 80089da:	e000      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80089dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80089e6:	4b1e      	ldr	r3, [pc, #120]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80089ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089f6:	4a1a      	ldr	r2, [pc, #104]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6593      	str	r3, [r2, #88]	; 0x58
 80089fc:	e003      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008a12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a16:	2300      	movs	r3, #0
 8008a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008a20:	460b      	mov	r3, r1
 8008a22:	4313      	orrs	r3, r2
 8008a24:	d056      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a32:	d038      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a38:	d831      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a3e:	d034      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a44:	d82b      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a4a:	d01d      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a50:	d825      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d006      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008a56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008a5c:	e01f      	b.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a5e:	bf00      	nop
 8008a60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a64:	4ba2      	ldr	r3, [pc, #648]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	4aa1      	ldr	r2, [pc, #644]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a70:	e01c      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a76:	3308      	adds	r3, #8
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 f9ee 	bl	800ae5c <RCCEx_PLL2_Config>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a86:	e011      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8c:	3328      	adds	r3, #40	; 0x28
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 fa95 	bl	800afc0 <RCCEx_PLL3_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a9c:	e006      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008aa4:	e002      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10b      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ab4:	4b8e      	ldr	r3, [pc, #568]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ac4:	4a8a      	ldr	r2, [pc, #552]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8008aca:	e003      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008aea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008aee:	460b      	mov	r3, r1
 8008af0:	4313      	orrs	r3, r2
 8008af2:	d03a      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afa:	2b30      	cmp	r3, #48	; 0x30
 8008afc:	d01f      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008afe:	2b30      	cmp	r3, #48	; 0x30
 8008b00:	d819      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b02:	2b20      	cmp	r3, #32
 8008b04:	d00c      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d815      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d019      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b0e:	2b10      	cmp	r3, #16
 8008b10:	d111      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b12:	4b77      	ldr	r3, [pc, #476]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	4a76      	ldr	r2, [pc, #472]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b1e:	e011      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b24:	3308      	adds	r3, #8
 8008b26:	2102      	movs	r1, #2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f997 	bl	800ae5c <RCCEx_PLL2_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b34:	e006      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b3c:	e002      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b4c:	4b68      	ldr	r3, [pc, #416]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5a:	4a65      	ldr	r2, [pc, #404]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b60:	e003      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008b76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d051      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b94:	d035      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b9a:	d82e      	bhi.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ba0:	d031      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008ba2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ba6:	d828      	bhi.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bac:	d01a      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb2:	d822      	bhi.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbc:	d007      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008bbe:	e01c      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc0:	4b4b      	ldr	r3, [pc, #300]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	4a4a      	ldr	r2, [pc, #296]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bcc:	e01c      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 f940 	bl	800ae5c <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008be2:	e011      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be8:	3328      	adds	r3, #40	; 0x28
 8008bea:	2100      	movs	r1, #0
 8008bec:	4618      	mov	r0, r3
 8008bee:	f002 f9e7 	bl	800afc0 <RCCEx_PLL3_Config>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bf8:	e006      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c00:	e002      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c10:	4b37      	ldr	r3, [pc, #220]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1e:	4a34      	ldr	r2, [pc, #208]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c20:	430b      	orrs	r3, r1
 8008c22:	6513      	str	r3, [r2, #80]	; 0x50
 8008c24:	e003      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	d056      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c58:	d033      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c5e:	d82c      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c64:	d02f      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008c66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c6a:	d826      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c70:	d02b      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c76:	d820      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c7c:	d012      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c82:	d81a      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d022      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c8c:	d115      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c92:	3308      	adds	r3, #8
 8008c94:	2101      	movs	r1, #1
 8008c96:	4618      	mov	r0, r3
 8008c98:	f002 f8e0 	bl	800ae5c <RCCEx_PLL2_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ca2:	e015      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca8:	3328      	adds	r3, #40	; 0x28
 8008caa:	2101      	movs	r1, #1
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 f987 	bl	800afc0 <RCCEx_PLL3_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008cb8:	e00a      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cc0:	e006      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e004      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10d      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cdc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce6:	4a02      	ldr	r2, [pc, #8]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6513      	str	r3, [r2, #80]	; 0x50
 8008cec:	e006      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008cee:	bf00      	nop
 8008cf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	d055      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d28:	d033      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d2e:	d82c      	bhi.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d34:	d02f      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d3a:	d826      	bhi.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d40:	d02b      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008d42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d46:	d820      	bhi.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d4c:	d012      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d52:	d81a      	bhi.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d022      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d5c:	d115      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d62:	3308      	adds	r3, #8
 8008d64:	2101      	movs	r1, #1
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 f878 	bl	800ae5c <RCCEx_PLL2_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d72:	e015      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d78:	3328      	adds	r3, #40	; 0x28
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f002 f91f 	bl	800afc0 <RCCEx_PLL3_Config>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d88:	e00a      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d90:	e006      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d92:	bf00      	nop
 8008d94:	e004      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d96:	bf00      	nop
 8008d98:	e002      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d9a:	bf00      	nop
 8008d9c:	e000      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008da8:	4ba3      	ldr	r3, [pc, #652]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008db8:	4a9f      	ldr	r2, [pc, #636]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8008dbe:	e003      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008de2:	460b      	mov	r3, r1
 8008de4:	4313      	orrs	r3, r2
 8008de6:	d037      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df2:	d00e      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df8:	d816      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d018      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e02:	d111      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e04:	4b8c      	ldr	r3, [pc, #560]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	4a8b      	ldr	r2, [pc, #556]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e10:	e00f      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	3308      	adds	r3, #8
 8008e18:	2101      	movs	r1, #1
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f002 f81e 	bl	800ae5c <RCCEx_PLL2_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e26:	e004      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e2e:	e000      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e3a:	4b7f      	ldr	r3, [pc, #508]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e48:	4a7b      	ldr	r2, [pc, #492]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	6513      	str	r3, [r2, #80]	; 0x50
 8008e4e:	e003      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4313      	orrs	r3, r2
 8008e76:	d039      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d81c      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ec5 	.word	0x08008ec5
 8008e8c:	08008e99 	.word	0x08008e99
 8008e90:	08008ea7 	.word	0x08008ea7
 8008e94:	08008ec5 	.word	0x08008ec5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e98:	4b67      	ldr	r3, [pc, #412]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	4a66      	ldr	r2, [pc, #408]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ea4:	e00f      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eaa:	3308      	adds	r3, #8
 8008eac:	2102      	movs	r1, #2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 ffd4 	bl	800ae5c <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008eba:	e004      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ece:	4b5a      	ldr	r3, [pc, #360]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed2:	f023 0103 	bic.w	r1, r3, #3
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008edc:	4a56      	ldr	r2, [pc, #344]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ee2:	e003      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008efc:	2300      	movs	r3, #0
 8008efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008f06:	460b      	mov	r3, r1
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f000 809f 	beq.w	800904c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f0e:	4b4b      	ldr	r3, [pc, #300]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a4a      	ldr	r2, [pc, #296]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f1a:	f7f8 fc75 	bl	8001808 <HAL_GetTick>
 8008f1e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f22:	e00b      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f24:	f7f8 fc70 	bl	8001808 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b64      	cmp	r3, #100	; 0x64
 8008f32:	d903      	bls.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f3a:	e005      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f3c:	4b3f      	ldr	r3, [pc, #252]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0ed      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d179      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f50:	4b39      	ldr	r3, [pc, #228]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f5c:	4053      	eors	r3, r2
 8008f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d015      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f66:	4b34      	ldr	r3, [pc, #208]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f72:	4b31      	ldr	r3, [pc, #196]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f76:	4a30      	ldr	r2, [pc, #192]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f7c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f7e:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	4a2d      	ldr	r2, [pc, #180]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f88:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f8a:	4a2b      	ldr	r2, [pc, #172]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9e:	d118      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa0:	f7f8 fc32 	bl	8001808 <HAL_GetTick>
 8008fa4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fa8:	e00d      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008faa:	f7f8 fc2d 	bl	8001808 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fb4:	1ad2      	subs	r2, r2, r3
 8008fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d903      	bls.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008fc4:	e005      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fc6:	4b1c      	ldr	r3, [pc, #112]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0eb      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d129      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fea:	d10e      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ffc:	091a      	lsrs	r2, r3, #4
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009000:	4013      	ands	r3, r2
 8009002:	4a0d      	ldr	r2, [pc, #52]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009004:	430b      	orrs	r3, r1
 8009006:	6113      	str	r3, [r2, #16]
 8009008:	e005      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	4a0a      	ldr	r2, [pc, #40]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009010:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009014:	6113      	str	r3, [r2, #16]
 8009016:	4b08      	ldr	r3, [pc, #32]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009018:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009026:	4a04      	ldr	r2, [pc, #16]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009028:	430b      	orrs	r3, r1
 800902a:	6713      	str	r3, [r2, #112]	; 0x70
 800902c:	e00e      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800902e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009036:	e009      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009038:	58024400 	.word	0x58024400
 800903c:	58024800 	.word	0x58024800
 8009040:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f002 0301 	and.w	r3, r2, #1
 8009058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800905c:	2300      	movs	r3, #0
 800905e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009062:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009066:	460b      	mov	r3, r1
 8009068:	4313      	orrs	r3, r2
 800906a:	f000 8089 	beq.w	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009074:	2b28      	cmp	r3, #40	; 0x28
 8009076:	d86b      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009078:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	08009159 	.word	0x08009159
 8009084:	08009151 	.word	0x08009151
 8009088:	08009151 	.word	0x08009151
 800908c:	08009151 	.word	0x08009151
 8009090:	08009151 	.word	0x08009151
 8009094:	08009151 	.word	0x08009151
 8009098:	08009151 	.word	0x08009151
 800909c:	08009151 	.word	0x08009151
 80090a0:	08009125 	.word	0x08009125
 80090a4:	08009151 	.word	0x08009151
 80090a8:	08009151 	.word	0x08009151
 80090ac:	08009151 	.word	0x08009151
 80090b0:	08009151 	.word	0x08009151
 80090b4:	08009151 	.word	0x08009151
 80090b8:	08009151 	.word	0x08009151
 80090bc:	08009151 	.word	0x08009151
 80090c0:	0800913b 	.word	0x0800913b
 80090c4:	08009151 	.word	0x08009151
 80090c8:	08009151 	.word	0x08009151
 80090cc:	08009151 	.word	0x08009151
 80090d0:	08009151 	.word	0x08009151
 80090d4:	08009151 	.word	0x08009151
 80090d8:	08009151 	.word	0x08009151
 80090dc:	08009151 	.word	0x08009151
 80090e0:	08009159 	.word	0x08009159
 80090e4:	08009151 	.word	0x08009151
 80090e8:	08009151 	.word	0x08009151
 80090ec:	08009151 	.word	0x08009151
 80090f0:	08009151 	.word	0x08009151
 80090f4:	08009151 	.word	0x08009151
 80090f8:	08009151 	.word	0x08009151
 80090fc:	08009151 	.word	0x08009151
 8009100:	08009159 	.word	0x08009159
 8009104:	08009151 	.word	0x08009151
 8009108:	08009151 	.word	0x08009151
 800910c:	08009151 	.word	0x08009151
 8009110:	08009151 	.word	0x08009151
 8009114:	08009151 	.word	0x08009151
 8009118:	08009151 	.word	0x08009151
 800911c:	08009151 	.word	0x08009151
 8009120:	08009159 	.word	0x08009159
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009128:	3308      	adds	r3, #8
 800912a:	2101      	movs	r1, #1
 800912c:	4618      	mov	r0, r3
 800912e:	f001 fe95 	bl	800ae5c <RCCEx_PLL2_Config>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009138:	e00f      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913e:	3328      	adds	r3, #40	; 0x28
 8009140:	2101      	movs	r1, #1
 8009142:	4618      	mov	r0, r3
 8009144:	f001 ff3c 	bl	800afc0 <RCCEx_PLL3_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800914e:	e004      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009156:	e000      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009162:	4bbf      	ldr	r3, [pc, #764]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009166:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800916a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800916e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009170:	4abb      	ldr	r2, [pc, #748]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009172:	430b      	orrs	r3, r1
 8009174:	6553      	str	r3, [r2, #84]	; 0x54
 8009176:	e003      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800917c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f002 0302 	and.w	r3, r2, #2
 800918c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009196:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800919a:	460b      	mov	r3, r1
 800919c:	4313      	orrs	r3, r2
 800919e:	d041      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	d824      	bhi.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091fd 	.word	0x080091fd
 80091b4:	080091c9 	.word	0x080091c9
 80091b8:	080091df 	.word	0x080091df
 80091bc:	080091fd 	.word	0x080091fd
 80091c0:	080091fd 	.word	0x080091fd
 80091c4:	080091fd 	.word	0x080091fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091cc:	3308      	adds	r3, #8
 80091ce:	2101      	movs	r1, #1
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 fe43 	bl	800ae5c <RCCEx_PLL2_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091dc:	e00f      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e2:	3328      	adds	r3, #40	; 0x28
 80091e4:	2101      	movs	r1, #1
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 feea 	bl	800afc0 <RCCEx_PLL3_Config>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091f2:	e004      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091fa:	e000      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80091fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009206:	4b96      	ldr	r3, [pc, #600]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920a:	f023 0107 	bic.w	r1, r3, #7
 800920e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009214:	4a92      	ldr	r2, [pc, #584]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009216:	430b      	orrs	r3, r1
 8009218:	6553      	str	r3, [r2, #84]	; 0x54
 800921a:	e003      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f002 0304 	and.w	r3, r2, #4
 8009230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009234:	2300      	movs	r3, #0
 8009236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800923a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800923e:	460b      	mov	r3, r1
 8009240:	4313      	orrs	r3, r2
 8009242:	d044      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800924c:	2b05      	cmp	r3, #5
 800924e:	d825      	bhi.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	080092a5 	.word	0x080092a5
 800925c:	08009271 	.word	0x08009271
 8009260:	08009287 	.word	0x08009287
 8009264:	080092a5 	.word	0x080092a5
 8009268:	080092a5 	.word	0x080092a5
 800926c:	080092a5 	.word	0x080092a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009274:	3308      	adds	r3, #8
 8009276:	2101      	movs	r1, #1
 8009278:	4618      	mov	r0, r3
 800927a:	f001 fdef 	bl	800ae5c <RCCEx_PLL2_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009284:	e00f      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928a:	3328      	adds	r3, #40	; 0x28
 800928c:	2101      	movs	r1, #1
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fe96 	bl	800afc0 <RCCEx_PLL3_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800929a:	e004      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092a2:	e000      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80092a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092ae:	4b6c      	ldr	r3, [pc, #432]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b2:	f023 0107 	bic.w	r1, r3, #7
 80092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092be:	4a68      	ldr	r2, [pc, #416]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092c0:	430b      	orrs	r3, r1
 80092c2:	6593      	str	r3, [r2, #88]	; 0x58
 80092c4:	e003      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f002 0320 	and.w	r3, r2, #32
 80092da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092de:	2300      	movs	r3, #0
 80092e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80092e8:	460b      	mov	r3, r1
 80092ea:	4313      	orrs	r3, r2
 80092ec:	d055      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092fa:	d033      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80092fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009300:	d82c      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009306:	d02f      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800930c:	d826      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800930e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009312:	d02b      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009314:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009318:	d820      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800931a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800931e:	d012      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009324:	d81a      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d022      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800932a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800932e:	d115      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009334:	3308      	adds	r3, #8
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f001 fd8f 	bl	800ae5c <RCCEx_PLL2_Config>
 800933e:	4603      	mov	r3, r0
 8009340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009344:	e015      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934a:	3328      	adds	r3, #40	; 0x28
 800934c:	2102      	movs	r1, #2
 800934e:	4618      	mov	r0, r3
 8009350:	f001 fe36 	bl	800afc0 <RCCEx_PLL3_Config>
 8009354:	4603      	mov	r3, r0
 8009356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800935a:	e00a      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009362:	e006      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009364:	bf00      	nop
 8009366:	e004      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009368:	bf00      	nop
 800936a:	e002      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800936c:	bf00      	nop
 800936e:	e000      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10b      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800937a:	4b39      	ldr	r3, [pc, #228]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938a:	4a35      	ldr	r2, [pc, #212]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800938c:	430b      	orrs	r3, r1
 800938e:	6553      	str	r3, [r2, #84]	; 0x54
 8009390:	e003      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80093a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093aa:	2300      	movs	r3, #0
 80093ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80093b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4313      	orrs	r3, r2
 80093b8:	d058      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093c6:	d033      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80093c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093cc:	d82c      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80093ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d2:	d02f      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80093d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d8:	d826      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80093da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093de:	d02b      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80093e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093e4:	d820      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80093e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ea:	d012      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80093ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093f0:	d81a      	bhi.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d022      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80093f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093fa:	d115      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009400:	3308      	adds	r3, #8
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f001 fd29 	bl	800ae5c <RCCEx_PLL2_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009410:	e015      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009416:	3328      	adds	r3, #40	; 0x28
 8009418:	2102      	movs	r1, #2
 800941a:	4618      	mov	r0, r3
 800941c:	f001 fdd0 	bl	800afc0 <RCCEx_PLL3_Config>
 8009420:	4603      	mov	r3, r0
 8009422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009426:	e00a      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800942e:	e006      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009430:	bf00      	nop
 8009432:	e004      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009434:	bf00      	nop
 8009436:	e002      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009438:	bf00      	nop
 800943a:	e000      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800943c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800943e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10e      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009446:	4b06      	ldr	r3, [pc, #24]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800944e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009456:	4a02      	ldr	r2, [pc, #8]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009458:	430b      	orrs	r3, r1
 800945a:	6593      	str	r3, [r2, #88]	; 0x58
 800945c:	e006      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800945e:	bf00      	nop
 8009460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800946c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800947c:	2300      	movs	r3, #0
 800947e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009482:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009486:	460b      	mov	r3, r1
 8009488:	4313      	orrs	r3, r2
 800948a:	d055      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800948c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009494:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009498:	d033      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800949a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800949e:	d82c      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a4:	d02f      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80094a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094aa:	d826      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094b0:	d02b      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80094b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094b6:	d820      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094bc:	d012      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80094be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c2:	d81a      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d022      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80094c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094cc:	d115      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d2:	3308      	adds	r3, #8
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 fcc0 	bl	800ae5c <RCCEx_PLL2_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094e2:	e015      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e8:	3328      	adds	r3, #40	; 0x28
 80094ea:	2102      	movs	r1, #2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 fd67 	bl	800afc0 <RCCEx_PLL3_Config>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094f8:	e00a      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009500:	e006      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009502:	bf00      	nop
 8009504:	e004      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009506:	bf00      	nop
 8009508:	e002      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800950e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10b      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009518:	4ba1      	ldr	r3, [pc, #644]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800951a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009528:	4a9d      	ldr	r2, [pc, #628]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800952a:	430b      	orrs	r3, r1
 800952c:	6593      	str	r3, [r2, #88]	; 0x58
 800952e:	e003      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f002 0308 	and.w	r3, r2, #8
 8009544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009548:	2300      	movs	r3, #0
 800954a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800954e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009552:	460b      	mov	r3, r1
 8009554:	4313      	orrs	r3, r2
 8009556:	d01e      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009564:	d10c      	bne.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800956a:	3328      	adds	r3, #40	; 0x28
 800956c:	2102      	movs	r1, #2
 800956e:	4618      	mov	r0, r3
 8009570:	f001 fd26 	bl	800afc0 <RCCEx_PLL3_Config>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009580:	4b87      	ldr	r3, [pc, #540]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009584:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009590:	4a83      	ldr	r2, [pc, #524]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009592:	430b      	orrs	r3, r1
 8009594:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f002 0310 	and.w	r3, r2, #16
 80095a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095a6:	2300      	movs	r3, #0
 80095a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80095b0:	460b      	mov	r3, r1
 80095b2:	4313      	orrs	r3, r2
 80095b4:	d01e      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c2:	d10c      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c8:	3328      	adds	r3, #40	; 0x28
 80095ca:	2102      	movs	r1, #2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fcf7 	bl	800afc0 <RCCEx_PLL3_Config>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095de:	4b70      	ldr	r3, [pc, #448]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095ee:	4a6c      	ldr	r2, [pc, #432]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009604:	2300      	movs	r3, #0
 8009606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800960a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800960e:	460b      	mov	r3, r1
 8009610:	4313      	orrs	r3, r2
 8009612:	d03e      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800961c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009620:	d022      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009626:	d81b      	bhi.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800962c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009630:	d00b      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009632:	e015      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009638:	3308      	adds	r3, #8
 800963a:	2100      	movs	r1, #0
 800963c:	4618      	mov	r0, r3
 800963e:	f001 fc0d 	bl	800ae5c <RCCEx_PLL2_Config>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009648:	e00f      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	3328      	adds	r3, #40	; 0x28
 8009650:	2102      	movs	r1, #2
 8009652:	4618      	mov	r0, r3
 8009654:	f001 fcb4 	bl	800afc0 <RCCEx_PLL3_Config>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800965e:	e004      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009666:	e000      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800966a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10b      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009672:	4b4b      	ldr	r3, [pc, #300]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009676:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009682:	4a47      	ldr	r2, [pc, #284]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009684:	430b      	orrs	r3, r1
 8009686:	6593      	str	r3, [r2, #88]	; 0x58
 8009688:	e003      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800968e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800969e:	67bb      	str	r3, [r7, #120]	; 0x78
 80096a0:	2300      	movs	r3, #0
 80096a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80096a8:	460b      	mov	r3, r1
 80096aa:	4313      	orrs	r3, r2
 80096ac:	d03b      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80096ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096ba:	d01f      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80096bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096c0:	d818      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80096c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c6:	d003      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80096c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096cc:	d007      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80096ce:	e011      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d0:	4b33      	ldr	r3, [pc, #204]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4a32      	ldr	r2, [pc, #200]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80096dc:	e00f      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e2:	3328      	adds	r3, #40	; 0x28
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 fc6a 	bl	800afc0 <RCCEx_PLL3_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80096f2:	e004      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096fa:	e000      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80096fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009706:	4b26      	ldr	r3, [pc, #152]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009716:	4a22      	ldr	r2, [pc, #136]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009718:	430b      	orrs	r3, r1
 800971a:	6553      	str	r3, [r2, #84]	; 0x54
 800971c:	e003      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009732:	673b      	str	r3, [r7, #112]	; 0x70
 8009734:	2300      	movs	r3, #0
 8009736:	677b      	str	r3, [r7, #116]	; 0x74
 8009738:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800973c:	460b      	mov	r3, r1
 800973e:	4313      	orrs	r3, r2
 8009740:	d034      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009750:	d007      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009752:	e011      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009754:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	4a11      	ldr	r2, [pc, #68]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800975a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800975e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009760:	e00e      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	3308      	adds	r3, #8
 8009768:	2102      	movs	r1, #2
 800976a:	4618      	mov	r0, r3
 800976c:	f001 fb76 	bl	800ae5c <RCCEx_PLL2_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009776:	e003      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800977e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10d      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009788:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009796:	4a02      	ldr	r2, [pc, #8]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009798:	430b      	orrs	r3, r1
 800979a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800979c:	e006      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800979e:	bf00      	nop
 80097a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80097b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80097ba:	2300      	movs	r3, #0
 80097bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80097c2:	460b      	mov	r3, r1
 80097c4:	4313      	orrs	r3, r2
 80097c6:	d00c      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097cc:	3328      	adds	r3, #40	; 0x28
 80097ce:	2102      	movs	r1, #2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f001 fbf5 	bl	800afc0 <RCCEx_PLL3_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80097ee:	663b      	str	r3, [r7, #96]	; 0x60
 80097f0:	2300      	movs	r3, #0
 80097f2:	667b      	str	r3, [r7, #100]	; 0x64
 80097f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80097f8:	460b      	mov	r3, r1
 80097fa:	4313      	orrs	r3, r2
 80097fc:	d038      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800980a:	d018      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800980c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009810:	d811      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009816:	d014      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800981c:	d80b      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d011      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009826:	d106      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009828:	4bc3      	ldr	r3, [pc, #780]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	4ac2      	ldr	r2, [pc, #776]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800982e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009834:	e008      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800983c:	e004      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800983e:	bf00      	nop
 8009840:	e002      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009842:	bf00      	nop
 8009844:	e000      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10b      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009850:	4bb9      	ldr	r3, [pc, #740]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009854:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009860:	4ab5      	ldr	r2, [pc, #724]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009862:	430b      	orrs	r3, r1
 8009864:	6553      	str	r3, [r2, #84]	; 0x54
 8009866:	e003      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800986c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800987c:	65bb      	str	r3, [r7, #88]	; 0x58
 800987e:	2300      	movs	r3, #0
 8009880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009882:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009886:	460b      	mov	r3, r1
 8009888:	4313      	orrs	r3, r2
 800988a:	d009      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800988c:	4baa      	ldr	r3, [pc, #680]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800988e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009890:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800989a:	4aa7      	ldr	r2, [pc, #668]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800989c:	430b      	orrs	r3, r1
 800989e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80098ac:	653b      	str	r3, [r7, #80]	; 0x50
 80098ae:	2300      	movs	r3, #0
 80098b0:	657b      	str	r3, [r7, #84]	; 0x54
 80098b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80098b6:	460b      	mov	r3, r1
 80098b8:	4313      	orrs	r3, r2
 80098ba:	d00a      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80098bc:	4b9e      	ldr	r3, [pc, #632]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098cc:	4a9a      	ldr	r2, [pc, #616]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098ce:	430b      	orrs	r3, r1
 80098d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80098de:	64bb      	str	r3, [r7, #72]	; 0x48
 80098e0:	2300      	movs	r3, #0
 80098e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80098e8:	460b      	mov	r3, r1
 80098ea:	4313      	orrs	r3, r2
 80098ec:	d009      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098ee:	4b92      	ldr	r3, [pc, #584]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	4a8e      	ldr	r2, [pc, #568]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098fe:	430b      	orrs	r3, r1
 8009900:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800990e:	643b      	str	r3, [r7, #64]	; 0x40
 8009910:	2300      	movs	r3, #0
 8009912:	647b      	str	r3, [r7, #68]	; 0x44
 8009914:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009918:	460b      	mov	r3, r1
 800991a:	4313      	orrs	r3, r2
 800991c:	d00e      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800991e:	4b86      	ldr	r3, [pc, #536]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	4a85      	ldr	r2, [pc, #532]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009928:	6113      	str	r3, [r2, #16]
 800992a:	4b83      	ldr	r3, [pc, #524]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800992c:	6919      	ldr	r1, [r3, #16]
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009932:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009936:	4a80      	ldr	r2, [pc, #512]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009938:	430b      	orrs	r3, r1
 800993a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800993c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
 800994a:	2300      	movs	r3, #0
 800994c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800994e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009952:	460b      	mov	r3, r1
 8009954:	4313      	orrs	r3, r2
 8009956:	d009      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009958:	4b77      	ldr	r3, [pc, #476]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800995a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800995c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009966:	4a74      	ldr	r2, [pc, #464]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009968:	430b      	orrs	r3, r1
 800996a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009978:	633b      	str	r3, [r7, #48]	; 0x30
 800997a:	2300      	movs	r3, #0
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
 800997e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009982:	460b      	mov	r3, r1
 8009984:	4313      	orrs	r3, r2
 8009986:	d00a      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009988:	4b6b      	ldr	r3, [pc, #428]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800998a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009998:	4a67      	ldr	r2, [pc, #412]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800999a:	430b      	orrs	r3, r1
 800999c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	2100      	movs	r1, #0
 80099a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80099b4:	460b      	mov	r3, r1
 80099b6:	4313      	orrs	r3, r2
 80099b8:	d011      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099be:	3308      	adds	r3, #8
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fa4a 	bl	800ae5c <RCCEx_PLL2_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80099ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	2100      	movs	r1, #0
 80099e8:	6239      	str	r1, [r7, #32]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
 80099f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80099f4:	460b      	mov	r3, r1
 80099f6:	4313      	orrs	r3, r2
 80099f8:	d011      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fe:	3308      	adds	r3, #8
 8009a00:	2101      	movs	r1, #1
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fa2a 	bl	800ae5c <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	2100      	movs	r1, #0
 8009a28:	61b9      	str	r1, [r7, #24]
 8009a2a:	f003 0304 	and.w	r3, r3, #4
 8009a2e:	61fb      	str	r3, [r7, #28]
 8009a30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d011      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	3308      	adds	r3, #8
 8009a40:	2102      	movs	r1, #2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fa0a 	bl	800ae5c <RCCEx_PLL2_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	2100      	movs	r1, #0
 8009a68:	6139      	str	r1, [r7, #16]
 8009a6a:	f003 0308 	and.w	r3, r3, #8
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009a74:	460b      	mov	r3, r1
 8009a76:	4313      	orrs	r3, r2
 8009a78:	d011      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7e:	3328      	adds	r3, #40	; 0x28
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fa9c 	bl	800afc0 <RCCEx_PLL3_Config>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	f003 0310 	and.w	r3, r3, #16
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	d011      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abe:	3328      	adds	r3, #40	; 0x28
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fa7c 	bl	800afc0 <RCCEx_PLL3_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009af4:	460b      	mov	r3, r1
 8009af6:	4313      	orrs	r3, r2
 8009af8:	d011      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afe:	3328      	adds	r3, #40	; 0x28
 8009b00:	2102      	movs	r1, #2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fa5c 	bl	800afc0 <RCCEx_PLL3_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009b1e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e000      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009b32:	46bd      	mov	sp, r7
 8009b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b38:	58024400 	.word	0x58024400

08009b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b090      	sub	sp, #64	; 0x40
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	f040 8094 	bne.w	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009b54:	4b9e      	ldr	r3, [pc, #632]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b58:	f003 0307 	and.w	r3, r3, #7
 8009b5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	f200 8087 	bhi.w	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009b66:	a201      	add	r2, pc, #4	; (adr r2, 8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009ba9 	.word	0x08009ba9
 8009b74:	08009bd1 	.word	0x08009bd1
 8009b78:	08009c6d 	.word	0x08009c6d
 8009b7c:	08009bf9 	.word	0x08009bf9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b80:	4b93      	ldr	r3, [pc, #588]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b8c:	d108      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 f810 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b9c:	f000 bd45 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ba4:	f000 bd41 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ba8:	4b89      	ldr	r3, [pc, #548]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bb4:	d108      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bb6:	f107 0318 	add.w	r3, r7, #24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fd54 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bc4:	f000 bd31 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bcc:	f000 bd2d 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bd0:	4b7f      	ldr	r3, [pc, #508]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bdc:	d108      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bde:	f107 030c 	add.w	r3, r7, #12
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fe94 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bec:	f000 bd1d 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf4:	f000 bd19 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bf8:	4b75      	ldr	r3, [pc, #468]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c02:	4b73      	ldr	r3, [pc, #460]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	d10c      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d109      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c14:	4b6e      	ldr	r3, [pc, #440]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	08db      	lsrs	r3, r3, #3
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	4a6d      	ldr	r2, [pc, #436]	; (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c20:	fa22 f303 	lsr.w	r3, r2, r3
 8009c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c26:	e01f      	b.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c28:	4b69      	ldr	r3, [pc, #420]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c34:	d106      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c3c:	d102      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c3e:	4b66      	ldr	r3, [pc, #408]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c42:	e011      	b.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c44:	4b62      	ldr	r3, [pc, #392]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c50:	d106      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c58:	d102      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c5a:	4b60      	ldr	r3, [pc, #384]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c5e:	e003      	b.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c64:	f000 bce1 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c68:	f000 bcdf 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c6c:	4b5c      	ldr	r3, [pc, #368]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c70:	f000 bcdb 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c78:	f000 bcd7 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c80:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009c84:	430b      	orrs	r3, r1
 8009c86:	f040 80ad 	bne.w	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009c8a:	4b51      	ldr	r3, [pc, #324]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009c92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c9a:	d056      	beq.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca2:	f200 8090 	bhi.w	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8009caa:	f000 8088 	beq.w	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	2bc0      	cmp	r3, #192	; 0xc0
 8009cb2:	f200 8088 	bhi.w	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d032      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	2b80      	cmp	r3, #128	; 0x80
 8009cc0:	f200 8081 	bhi.w	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	d014      	beq.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009cd0:	e079      	b.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cd2:	4b3f      	ldr	r3, [pc, #252]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cde:	d108      	bne.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 ff67 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cee:	f000 bc9c 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cf6:	f000 bc98 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cfa:	4b35      	ldr	r3, [pc, #212]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d06:	d108      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d08:	f107 0318 	add.w	r3, r7, #24
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fcab 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d16:	f000 bc88 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d1e:	f000 bc84 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d22:	4b2b      	ldr	r3, [pc, #172]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d2e:	d108      	bne.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d30:	f107 030c 	add.w	r3, r7, #12
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fdeb 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d3e:	f000 bc74 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d46:	f000 bc70 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d4a:	4b21      	ldr	r3, [pc, #132]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d54:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d10c      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d109      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d66:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	08db      	lsrs	r3, r3, #3
 8009d6c:	f003 0303 	and.w	r3, r3, #3
 8009d70:	4a18      	ldr	r2, [pc, #96]	; (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d72:	fa22 f303 	lsr.w	r3, r2, r3
 8009d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d78:	e01f      	b.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d7a:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d86:	d106      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d8e:	d102      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d90:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d94:	e011      	b.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d96:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009da2:	d106      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009daa:	d102      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dac:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009db0:	e003      	b.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009db6:	f000 bc38 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dba:	f000 bc36 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc2:	f000 bc32 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dca:	f000 bc2e 	b.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dce:	bf00      	nop
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	03d09000 	.word	0x03d09000
 8009dd8:	003d0900 	.word	0x003d0900
 8009ddc:	017d7840 	.word	0x017d7840
 8009de0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009dec:	430b      	orrs	r3, r1
 8009dee:	f040 809c 	bne.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009df2:	4b9e      	ldr	r3, [pc, #632]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009dfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e02:	d054      	beq.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e0a:	f200 808b 	bhi.w	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e14:	f000 8083 	beq.w	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e1e:	f200 8081 	bhi.w	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e28:	d02f      	beq.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e30:	d878      	bhi.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d004      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e3e:	d012      	beq.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009e40:	e070      	b.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e42:	4b8a      	ldr	r3, [pc, #552]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e4e:	d107      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 feaf 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e5e:	e3e4      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e64:	e3e1      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e66:	4b81      	ldr	r3, [pc, #516]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e72:	d107      	bne.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e74:	f107 0318 	add.w	r3, r7, #24
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 fbf5 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e82:	e3d2      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e88:	e3cf      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e8a:	4b78      	ldr	r3, [pc, #480]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e96:	d107      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e98:	f107 030c 	add.w	r3, r7, #12
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fd37 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ea6:	e3c0      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eac:	e3bd      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009eae:	4b6f      	ldr	r3, [pc, #444]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009eb8:	4b6c      	ldr	r3, [pc, #432]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b04      	cmp	r3, #4
 8009ec2:	d10c      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009eca:	4b68      	ldr	r3, [pc, #416]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	08db      	lsrs	r3, r3, #3
 8009ed0:	f003 0303 	and.w	r3, r3, #3
 8009ed4:	4a66      	ldr	r2, [pc, #408]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009edc:	e01e      	b.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ede:	4b63      	ldr	r3, [pc, #396]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eea:	d106      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ef2:	d102      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ef4:	4b5f      	ldr	r3, [pc, #380]	; (800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ef8:	e010      	b.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009efa:	4b5c      	ldr	r3, [pc, #368]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f06:	d106      	bne.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f0e:	d102      	bne.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f10:	4b59      	ldr	r3, [pc, #356]	; (800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f14:	e002      	b.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009f1a:	e386      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f1c:	e385      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f1e:	4b57      	ldr	r3, [pc, #348]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f22:	e382      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f28:	e37f      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009f32:	430b      	orrs	r3, r1
 8009f34:	f040 80a7 	bne.w	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009f38:	4b4c      	ldr	r3, [pc, #304]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009f40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f48:	d055      	beq.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f50:	f200 8096 	bhi.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f5a:	f000 8084 	beq.w	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f64:	f200 808c 	bhi.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f6e:	d030      	beq.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f76:	f200 8083 	bhi.w	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f86:	d012      	beq.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009f88:	e07a      	b.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f8a:	4b38      	ldr	r3, [pc, #224]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f96:	d107      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fe0b 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa6:	e340      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fac:	e33d      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fae:	4b2f      	ldr	r3, [pc, #188]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fba:	d107      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fbc:	f107 0318 	add.w	r3, r7, #24
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fb51 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fca:	e32e      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd0:	e32b      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fd2:	4b26      	ldr	r3, [pc, #152]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fde:	d107      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe0:	f107 030c 	add.w	r3, r7, #12
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fc93 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fee:	e31c      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff4:	e319      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ffe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a000:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d10c      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d109      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a012:	4b16      	ldr	r3, [pc, #88]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	08db      	lsrs	r3, r3, #3
 800a018:	f003 0303 	and.w	r3, r3, #3
 800a01c:	4a14      	ldr	r2, [pc, #80]	; (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a01e:	fa22 f303 	lsr.w	r3, r2, r3
 800a022:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a024:	e01e      	b.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a026:	4b11      	ldr	r3, [pc, #68]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a032:	d106      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a03a:	d102      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a03c:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a040:	e010      	b.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a042:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a04a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a04e:	d106      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a056:	d102      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a058:	4b07      	ldr	r3, [pc, #28]	; (800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a05c:	e002      	b.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a062:	e2e2      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a064:	e2e1      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a066:	4b05      	ldr	r3, [pc, #20]	; (800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a06a:	e2de      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a06c:	58024400 	.word	0x58024400
 800a070:	03d09000 	.word	0x03d09000
 800a074:	003d0900 	.word	0x003d0900
 800a078:	017d7840 	.word	0x017d7840
 800a07c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a084:	e2d1      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a08a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a08e:	430b      	orrs	r3, r1
 800a090:	f040 809c 	bne.w	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a094:	4b93      	ldr	r3, [pc, #588]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a098:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a09c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a4:	d054      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ac:	f200 808b 	bhi.w	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0b6:	f000 8083 	beq.w	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0c0:	f200 8081 	bhi.w	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ca:	d02f      	beq.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d2:	d878      	bhi.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d004      	beq.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	d012      	beq.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a0e2:	e070      	b.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0e4:	4b7f      	ldr	r3, [pc, #508]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0f0:	d107      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fd5e 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a100:	e293      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a106:	e290      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a108:	4b76      	ldr	r3, [pc, #472]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a114:	d107      	bne.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a116:	f107 0318 	add.w	r3, r7, #24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 faa4 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a124:	e281      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a12a:	e27e      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a12c:	4b6d      	ldr	r3, [pc, #436]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a138:	d107      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a13a:	f107 030c 	add.w	r3, r7, #12
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fbe6 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a148:	e26f      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14e:	e26c      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a150:	4b64      	ldr	r3, [pc, #400]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a158:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a15a:	4b62      	ldr	r3, [pc, #392]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0304 	and.w	r3, r3, #4
 800a162:	2b04      	cmp	r3, #4
 800a164:	d10c      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d109      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a16c:	4b5d      	ldr	r3, [pc, #372]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	08db      	lsrs	r3, r3, #3
 800a172:	f003 0303 	and.w	r3, r3, #3
 800a176:	4a5c      	ldr	r2, [pc, #368]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a17e:	e01e      	b.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a180:	4b58      	ldr	r3, [pc, #352]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18c:	d106      	bne.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a194:	d102      	bne.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a196:	4b55      	ldr	r3, [pc, #340]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a19a:	e010      	b.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a19c:	4b51      	ldr	r3, [pc, #324]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a8:	d106      	bne.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1b0:	d102      	bne.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1b2:	4b4f      	ldr	r3, [pc, #316]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1b6:	e002      	b.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a1bc:	e235      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1be:	e234      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1c0:	4b4c      	ldr	r3, [pc, #304]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1c4:	e231      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ca:	e22e      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a1cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	f040 808f 	bne.w	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a1da:	4b42      	ldr	r3, [pc, #264]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a1e2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1ea:	d06b      	beq.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1f2:	d874      	bhi.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1fa:	d056      	beq.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a202:	d86c      	bhi.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a20a:	d03b      	beq.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a212:	d864      	bhi.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a21a:	d021      	beq.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a222:	d85c      	bhi.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a230:	d004      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a232:	e054      	b.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a234:	f7fe fa20 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800a238:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a23a:	e1f6      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a23c:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a248:	d107      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a24a:	f107 0318 	add.w	r3, r7, #24
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fa0a 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a258:	e1e7      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a25e:	e1e4      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a260:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a26c:	d107      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a26e:	f107 030c 	add.w	r3, r7, #12
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fb4c 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a27c:	e1d5      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a282:	e1d2      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a284:	4b17      	ldr	r3, [pc, #92]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d109      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a290:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	08db      	lsrs	r3, r3, #3
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	4a13      	ldr	r2, [pc, #76]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a29c:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a2:	e1c2      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a8:	e1bf      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a2aa:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2b6:	d102      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2bc:	e1b5      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c2:	e1b2      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a2c4:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a2d2:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d6:	e1a8      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2dc:	e1a5      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e2:	e1a2      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	03d09000 	.word	0x03d09000
 800a2ec:	003d0900 	.word	0x003d0900
 800a2f0:	017d7840 	.word	0x017d7840
 800a2f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a300:	430b      	orrs	r3, r1
 800a302:	d173      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a304:	4b9c      	ldr	r3, [pc, #624]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a30c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a314:	d02f      	beq.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a31c:	d863      	bhi.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a32a:	d012      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a32c:	e05b      	b.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a32e:	4b92      	ldr	r3, [pc, #584]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a33a:	d107      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a33c:	f107 0318 	add.w	r3, r7, #24
 800a340:	4618      	mov	r0, r3
 800a342:	f000 f991 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a34a:	e16e      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a350:	e16b      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a352:	4b89      	ldr	r3, [pc, #548]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a35a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35e:	d107      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a360:	f107 030c 	add.w	r3, r7, #12
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fad3 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36e:	e15c      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a374:	e159      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a376:	4b80      	ldr	r3, [pc, #512]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a37e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a380:	4b7d      	ldr	r3, [pc, #500]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d10c      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d109      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a392:	4b79      	ldr	r3, [pc, #484]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	08db      	lsrs	r3, r3, #3
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	4a77      	ldr	r2, [pc, #476]	; (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a39e:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a4:	e01e      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3a6:	4b74      	ldr	r3, [pc, #464]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3ba:	d102      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3bc:	4b70      	ldr	r3, [pc, #448]	; (800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c0:	e010      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3c2:	4b6d      	ldr	r3, [pc, #436]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ce:	d106      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d6:	d102      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3d8:	4b6a      	ldr	r3, [pc, #424]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3dc:	e002      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a3e2:	e122      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3e4:	e121      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ea:	e11e      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3f0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	d133      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a3f8:	4b5f      	ldr	r3, [pc, #380]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a400:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	2b00      	cmp	r3, #0
 800a406:	d004      	beq.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40e:	d012      	beq.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a410:	e023      	b.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a412:	4b59      	ldr	r3, [pc, #356]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a41a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a41e:	d107      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fbc7 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a42e:	e0fc      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a434:	e0f9      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a436:	4b50      	ldr	r3, [pc, #320]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a43e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a442:	d107      	bne.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a444:	f107 0318 	add.w	r3, r7, #24
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f90d 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a452:	e0ea      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a458:	e0e7      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a45e:	e0e4      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a464:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a468:	430b      	orrs	r3, r1
 800a46a:	f040 808d 	bne.w	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a46e:	4b42      	ldr	r3, [pc, #264]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a472:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a476:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a47e:	d06b      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a486:	d874      	bhi.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48e:	d056      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a496:	d86c      	bhi.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a49e:	d03b      	beq.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4a6:	d864      	bhi.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ae:	d021      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b6:	d85c      	bhi.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4c4:	d004      	beq.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a4c6:	e054      	b.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a4c8:	f000 f8b8 	bl	800a63c <HAL_RCCEx_GetD3PCLK1Freq>
 800a4cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4ce:	e0ac      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4d0:	4b29      	ldr	r3, [pc, #164]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4dc:	d107      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4de:	f107 0318 	add.w	r3, r7, #24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f8c0 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ec:	e09d      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f2:	e09a      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4f4:	4b20      	ldr	r3, [pc, #128]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a500:	d107      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a502:	f107 030c 	add.w	r3, r7, #12
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fa02 	bl	800a910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a510:	e08b      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a516:	e088      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a518:	4b17      	ldr	r3, [pc, #92]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	2b04      	cmp	r3, #4
 800a522:	d109      	bne.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a524:	4b14      	ldr	r3, [pc, #80]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	08db      	lsrs	r3, r3, #3
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	4a13      	ldr	r2, [pc, #76]	; (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a530:	fa22 f303 	lsr.w	r3, r2, r3
 800a534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a536:	e078      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a53c:	e075      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a53e:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a54a:	d102      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a54c:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a550:	e06b      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a556:	e068      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a558:	4b07      	ldr	r3, [pc, #28]	; (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a564:	d102      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a566:	4b07      	ldr	r3, [pc, #28]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56a:	e05e      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a570:	e05b      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a576:	e058      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a578:	58024400 	.word	0x58024400
 800a57c:	03d09000 	.word	0x03d09000
 800a580:	003d0900 	.word	0x003d0900
 800a584:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a58c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a590:	430b      	orrs	r3, r1
 800a592:	d148      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a594:	4b27      	ldr	r3, [pc, #156]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a59c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5a4:	d02a      	beq.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ac:	d838      	bhi.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ba:	d00d      	beq.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a5bc:	e030      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5be:	4b1d      	ldr	r3, [pc, #116]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5ca:	d102      	bne.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a5cc:	4b1a      	ldr	r3, [pc, #104]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d0:	e02b      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d6:	e028      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5d8:	4b16      	ldr	r3, [pc, #88]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e4:	d107      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fae4 	bl	800abb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f4:	e019      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5fa:	e016      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5fc:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a608:	d107      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a60a:	f107 0318 	add.w	r3, r7, #24
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f82a 	bl	800a668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a618:	e007      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a61e:	e004      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a624:	e001      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3740      	adds	r7, #64	; 0x40
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	58024400 	.word	0x58024400
 800a638:	017d7840 	.word	0x017d7840

0800a63c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a640:	f7fd ffea 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 800a644:	4602      	mov	r2, r0
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	091b      	lsrs	r3, r3, #4
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	4904      	ldr	r1, [pc, #16]	; (800a664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a652:	5ccb      	ldrb	r3, [r1, r3]
 800a654:	f003 031f 	and.w	r3, r3, #31
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	58024400 	.word	0x58024400
 800a664:	08013e98 	.word	0x08013e98

0800a668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a668:	b480      	push	{r7}
 800a66a:	b089      	sub	sp, #36	; 0x24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a670:	4ba1      	ldr	r3, [pc, #644]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a67a:	4b9f      	ldr	r3, [pc, #636]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67e:	0b1b      	lsrs	r3, r3, #12
 800a680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a686:	4b9c      	ldr	r3, [pc, #624]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	091b      	lsrs	r3, r3, #4
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a692:	4b99      	ldr	r3, [pc, #612]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a696:	08db      	lsrs	r3, r3, #3
 800a698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 8111 	beq.w	800a8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	f000 8083 	beq.w	800a7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	f200 80a1 	bhi.w	800a808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d003      	beq.n	800a6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d056      	beq.n	800a780 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a6d2:	e099      	b.n	800a808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6d4:	4b88      	ldr	r3, [pc, #544]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d02d      	beq.n	800a73c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6e0:	4b85      	ldr	r3, [pc, #532]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	08db      	lsrs	r3, r3, #3
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	4a84      	ldr	r2, [pc, #528]	; (800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70a:	4b7b      	ldr	r3, [pc, #492]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a71e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a73a:	e087      	b.n	800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a746:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74e:	4b6a      	ldr	r3, [pc, #424]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a762:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a77e:	e065      	b.n	800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a792:	4b59      	ldr	r3, [pc, #356]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7c2:	e043      	b.n	800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a90c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d6:	4b48      	ldr	r3, [pc, #288]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a806:	e021      	b.n	800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a812:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a81a:	4b37      	ldr	r3, [pc, #220]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a82e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a84a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a84c:	4b2a      	ldr	r3, [pc, #168]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	0a5b      	lsrs	r3, r3, #9
 800a852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a862:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a866:	edd7 6a07 	vldr	s13, [r7, #28]
 800a86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a872:	ee17 2a90 	vmov	r2, s15
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a87a:	4b1f      	ldr	r3, [pc, #124]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	0c1b      	lsrs	r3, r3, #16
 800a880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a890:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a894:	edd7 6a07 	vldr	s13, [r7, #28]
 800a898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a0:	ee17 2a90 	vmov	r2, s15
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a8a8:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	0e1b      	lsrs	r3, r3, #24
 800a8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ce:	ee17 2a90 	vmov	r2, s15
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8d6:	e008      	b.n	800a8ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	609a      	str	r2, [r3, #8]
}
 800a8ea:	bf00      	nop
 800a8ec:	3724      	adds	r7, #36	; 0x24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	58024400 	.word	0x58024400
 800a8fc:	03d09000 	.word	0x03d09000
 800a900:	46000000 	.word	0x46000000
 800a904:	4c742400 	.word	0x4c742400
 800a908:	4a742400 	.word	0x4a742400
 800a90c:	4bbebc20 	.word	0x4bbebc20

0800a910 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a910:	b480      	push	{r7}
 800a912:	b089      	sub	sp, #36	; 0x24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a918:	4ba1      	ldr	r3, [pc, #644]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a922:	4b9f      	ldr	r3, [pc, #636]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a926:	0d1b      	lsrs	r3, r3, #20
 800a928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a92c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a92e:	4b9c      	ldr	r3, [pc, #624]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a93a:	4b99      	ldr	r3, [pc, #612]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93e:	08db      	lsrs	r3, r3, #3
 800a940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	fb02 f303 	mul.w	r3, r2, r3
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 8111 	beq.w	800ab80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b02      	cmp	r3, #2
 800a962:	f000 8083 	beq.w	800aa6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b02      	cmp	r3, #2
 800a96a:	f200 80a1 	bhi.w	800aab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d056      	beq.n	800aa28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a97a:	e099      	b.n	800aab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a97c:	4b88      	ldr	r3, [pc, #544]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b00      	cmp	r3, #0
 800a986:	d02d      	beq.n	800a9e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a988:	4b85      	ldr	r3, [pc, #532]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	08db      	lsrs	r3, r3, #3
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	4a84      	ldr	r2, [pc, #528]	; (800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	ee07 3a90 	vmov	s15, r3
 800a9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9b2:	4b7b      	ldr	r3, [pc, #492]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ba:	ee07 3a90 	vmov	s15, r3
 800a9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9e2:	e087      	b.n	800aaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800abac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f6:	4b6a      	ldr	r3, [pc, #424]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa06:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa26:	e065      	b.n	800aaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800abb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3a:	4b59      	ldr	r3, [pc, #356]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6a:	e043      	b.n	800aaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800abb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7e:	4b48      	ldr	r3, [pc, #288]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaae:	e021      	b.n	800aaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800abb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac2:	4b37      	ldr	r3, [pc, #220]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aaf4:	4b2a      	ldr	r3, [pc, #168]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf8:	0a5b      	lsrs	r3, r3, #9
 800aafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1a:	ee17 2a90 	vmov	r2, s15
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ab22:	4b1f      	ldr	r3, [pc, #124]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab26:	0c1b      	lsrs	r3, r3, #16
 800ab28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab2c:	ee07 3a90 	vmov	s15, r3
 800ab30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab48:	ee17 2a90 	vmov	r2, s15
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ab50:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab54:	0e1b      	lsrs	r3, r3, #24
 800ab56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab76:	ee17 2a90 	vmov	r2, s15
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab7e:	e008      	b.n	800ab92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	609a      	str	r2, [r3, #8]
}
 800ab92:	bf00      	nop
 800ab94:	3724      	adds	r7, #36	; 0x24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
 800aba4:	03d09000 	.word	0x03d09000
 800aba8:	46000000 	.word	0x46000000
 800abac:	4c742400 	.word	0x4c742400
 800abb0:	4a742400 	.word	0x4a742400
 800abb4:	4bbebc20 	.word	0x4bbebc20

0800abb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	; 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abc0:	4ba0      	ldr	r3, [pc, #640]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800abca:	4b9e      	ldr	r3, [pc, #632]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abce:	091b      	lsrs	r3, r3, #4
 800abd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abd4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800abd6:	4b9b      	ldr	r3, [pc, #620]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abe0:	4b98      	ldr	r3, [pc, #608]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe4:	08db      	lsrs	r3, r3, #3
 800abe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	fb02 f303 	mul.w	r3, r2, r3
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 8111 	beq.w	800ae26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	f000 8083 	beq.w	800ad12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	f200 80a1 	bhi.w	800ad56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d056      	beq.n	800acce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ac20:	e099      	b.n	800ad56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac22:	4b88      	ldr	r3, [pc, #544]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 0320 	and.w	r3, r3, #32
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d02d      	beq.n	800ac8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac2e:	4b85      	ldr	r3, [pc, #532]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	08db      	lsrs	r3, r3, #3
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	4a83      	ldr	r2, [pc, #524]	; (800ae48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac58:	4b7a      	ldr	r3, [pc, #488]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac60:	ee07 3a90 	vmov	s15, r3
 800ac64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac68:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ae4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac88:	e087      	b.n	800ad9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ae50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9c:	4b69      	ldr	r3, [pc, #420]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acac:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ae4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800accc:	e065      	b.n	800ad9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ae54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800acdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace0:	4b58      	ldr	r3, [pc, #352]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ae4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad10:	e043      	b.n	800ad9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	ee07 3a90 	vmov	s15, r3
 800ad18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ae58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ad20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad24:	4b47      	ldr	r3, [pc, #284]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad34:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad38:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ae4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad54:	e021      	b.n	800ad9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ae50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad68:	4b36      	ldr	r3, [pc, #216]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad70:	ee07 3a90 	vmov	s15, r3
 800ad74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad78:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ae4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ad9a:	4b2a      	ldr	r3, [pc, #168]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9e:	0a5b      	lsrs	r3, r3, #9
 800ada0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada4:	ee07 3a90 	vmov	s15, r3
 800ada8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc0:	ee17 2a90 	vmov	r2, s15
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800adc8:	4b1e      	ldr	r3, [pc, #120]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adcc:	0c1b      	lsrs	r3, r3, #16
 800adce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adee:	ee17 2a90 	vmov	r2, s15
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800adf6:	4b13      	ldr	r3, [pc, #76]	; (800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfa:	0e1b      	lsrs	r3, r3, #24
 800adfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae00:	ee07 3a90 	vmov	s15, r3
 800ae04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1c:	ee17 2a90 	vmov	r2, s15
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae24:	e008      	b.n	800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	609a      	str	r2, [r3, #8]
}
 800ae38:	bf00      	nop
 800ae3a:	3724      	adds	r7, #36	; 0x24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	58024400 	.word	0x58024400
 800ae48:	03d09000 	.word	0x03d09000
 800ae4c:	46000000 	.word	0x46000000
 800ae50:	4c742400 	.word	0x4c742400
 800ae54:	4a742400 	.word	0x4a742400
 800ae58:	4bbebc20 	.word	0x4bbebc20

0800ae5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae6a:	4b53      	ldr	r3, [pc, #332]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d101      	bne.n	800ae7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e099      	b.n	800afae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae7a:	4b4f      	ldr	r3, [pc, #316]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a4e      	ldr	r2, [pc, #312]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800ae80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae86:	f7f6 fcbf 	bl	8001808 <HAL_GetTick>
 800ae8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae8c:	e008      	b.n	800aea0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae8e:	f7f6 fcbb 	bl	8001808 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d901      	bls.n	800aea0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e086      	b.n	800afae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aea0:	4b45      	ldr	r3, [pc, #276]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f0      	bne.n	800ae8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aeac:	4b42      	ldr	r3, [pc, #264]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800aeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	031b      	lsls	r3, r3, #12
 800aeba:	493f      	ldr	r1, [pc, #252]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	628b      	str	r3, [r1, #40]	; 0x28
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	3b01      	subs	r3, #1
 800aed0:	025b      	lsls	r3, r3, #9
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	431a      	orrs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	041b      	lsls	r3, r3, #16
 800aede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	061b      	lsls	r3, r3, #24
 800aeec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aef0:	4931      	ldr	r1, [pc, #196]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aef6:	4b30      	ldr	r3, [pc, #192]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	492d      	ldr	r1, [pc, #180]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af04:	4313      	orrs	r3, r2
 800af06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af08:	4b2b      	ldr	r3, [pc, #172]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	f023 0220 	bic.w	r2, r3, #32
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	4928      	ldr	r1, [pc, #160]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af16:	4313      	orrs	r3, r2
 800af18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af1a:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	4a26      	ldr	r2, [pc, #152]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af20:	f023 0310 	bic.w	r3, r3, #16
 800af24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af26:	4b24      	ldr	r3, [pc, #144]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af2a:	4b24      	ldr	r3, [pc, #144]	; (800afbc <RCCEx_PLL2_Config+0x160>)
 800af2c:	4013      	ands	r3, r2
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	69d2      	ldr	r2, [r2, #28]
 800af32:	00d2      	lsls	r2, r2, #3
 800af34:	4920      	ldr	r1, [pc, #128]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af36:	4313      	orrs	r3, r2
 800af38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af3a:	4b1f      	ldr	r3, [pc, #124]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3e:	4a1e      	ldr	r2, [pc, #120]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af40:	f043 0310 	orr.w	r3, r3, #16
 800af44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d106      	bne.n	800af5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af4c:	4b1a      	ldr	r3, [pc, #104]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a19      	ldr	r2, [pc, #100]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af58:	e00f      	b.n	800af7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d106      	bne.n	800af6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af60:	4b15      	ldr	r3, [pc, #84]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	4a14      	ldr	r2, [pc, #80]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af6c:	e005      	b.n	800af7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	4a11      	ldr	r2, [pc, #68]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af7a:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a0e      	ldr	r2, [pc, #56]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800af80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af86:	f7f6 fc3f 	bl	8001808 <HAL_GetTick>
 800af8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af8c:	e008      	b.n	800afa0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af8e:	f7f6 fc3b 	bl	8001808 <HAL_GetTick>
 800af92:	4602      	mov	r2, r0
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d901      	bls.n	800afa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e006      	b.n	800afae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afa0:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <RCCEx_PLL2_Config+0x15c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0f0      	beq.n	800af8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afac:	7bfb      	ldrb	r3, [r7, #15]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	58024400 	.word	0x58024400
 800afbc:	ffff0007 	.word	0xffff0007

0800afc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afce:	4b53      	ldr	r3, [pc, #332]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d101      	bne.n	800afde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e099      	b.n	800b112 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afde:	4b4f      	ldr	r3, [pc, #316]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a4e      	ldr	r2, [pc, #312]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800afe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afea:	f7f6 fc0d 	bl	8001808 <HAL_GetTick>
 800afee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aff0:	e008      	b.n	800b004 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aff2:	f7f6 fc09 	bl	8001808 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b02      	cmp	r3, #2
 800affe:	d901      	bls.n	800b004 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e086      	b.n	800b112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b004:	4b45      	ldr	r3, [pc, #276]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1f0      	bne.n	800aff2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b010:	4b42      	ldr	r3, [pc, #264]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b014:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	051b      	lsls	r3, r3, #20
 800b01e:	493f      	ldr	r1, [pc, #252]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b020:	4313      	orrs	r3, r2
 800b022:	628b      	str	r3, [r1, #40]	; 0x28
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	3b01      	subs	r3, #1
 800b02a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	3b01      	subs	r3, #1
 800b034:	025b      	lsls	r3, r3, #9
 800b036:	b29b      	uxth	r3, r3
 800b038:	431a      	orrs	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	3b01      	subs	r3, #1
 800b040:	041b      	lsls	r3, r3, #16
 800b042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b046:	431a      	orrs	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	061b      	lsls	r3, r3, #24
 800b050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b054:	4931      	ldr	r1, [pc, #196]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b056:	4313      	orrs	r3, r2
 800b058:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b05a:	4b30      	ldr	r3, [pc, #192]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	492d      	ldr	r1, [pc, #180]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b06c:	4b2b      	ldr	r3, [pc, #172]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	4928      	ldr	r1, [pc, #160]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b07e:	4b27      	ldr	r3, [pc, #156]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	4a26      	ldr	r2, [pc, #152]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b08a:	4b24      	ldr	r3, [pc, #144]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b08e:	4b24      	ldr	r3, [pc, #144]	; (800b120 <RCCEx_PLL3_Config+0x160>)
 800b090:	4013      	ands	r3, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	69d2      	ldr	r2, [r2, #28]
 800b096:	00d2      	lsls	r2, r2, #3
 800b098:	4920      	ldr	r1, [pc, #128]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b09e:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a2:	4a1e      	ldr	r2, [pc, #120]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0b0:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	4a19      	ldr	r2, [pc, #100]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0bc:	e00f      	b.n	800b0de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d106      	bne.n	800b0d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	4a14      	ldr	r2, [pc, #80]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0d0:	e005      	b.n	800b0de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	4a11      	ldr	r2, [pc, #68]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0de:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a0e      	ldr	r2, [pc, #56]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b0e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ea:	f7f6 fb8d 	bl	8001808 <HAL_GetTick>
 800b0ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0f0:	e008      	b.n	800b104 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0f2:	f7f6 fb89 	bl	8001808 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d901      	bls.n	800b104 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e006      	b.n	800b112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <RCCEx_PLL3_Config+0x15c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0f0      	beq.n	800b0f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b110:	7bfb      	ldrb	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	58024400 	.word	0x58024400
 800b120:	ffff0007 	.word	0xffff0007

0800b124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e049      	b.n	800b1ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7f6 fa48 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3304      	adds	r3, #4
 800b160:	4619      	mov	r1, r3
 800b162:	4610      	mov	r0, r2
 800b164:	f000 fd72 	bl	800bc4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d001      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e054      	b.n	800b296 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f042 0201 	orr.w	r2, r2, #1
 800b202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a26      	ldr	r2, [pc, #152]	; (800b2a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d022      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b216:	d01d      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a22      	ldr	r2, [pc, #136]	; (800b2a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d018      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a21      	ldr	r2, [pc, #132]	; (800b2ac <HAL_TIM_Base_Start_IT+0xd8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d013      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d00e      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d009      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d004      	beq.n	800b254 <HAL_TIM_Base_Start_IT+0x80>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a1b      	ldr	r2, [pc, #108]	; (800b2bc <HAL_TIM_Base_Start_IT+0xe8>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d115      	bne.n	800b280 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689a      	ldr	r2, [r3, #8]
 800b25a:	4b19      	ldr	r3, [pc, #100]	; (800b2c0 <HAL_TIM_Base_Start_IT+0xec>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b06      	cmp	r3, #6
 800b264:	d015      	beq.n	800b292 <HAL_TIM_Base_Start_IT+0xbe>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26c:	d011      	beq.n	800b292 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f042 0201 	orr.w	r2, r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b27e:	e008      	b.n	800b292 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	e000      	b.n	800b294 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	40010000 	.word	0x40010000
 800b2a8:	40000400 	.word	0x40000400
 800b2ac:	40000800 	.word	0x40000800
 800b2b0:	40000c00 	.word	0x40000c00
 800b2b4:	40010400 	.word	0x40010400
 800b2b8:	40001800 	.word	0x40001800
 800b2bc:	40014000 	.word	0x40014000
 800b2c0:	00010007 	.word	0x00010007

0800b2c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e049      	b.n	800b36a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f841 	bl	800b372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3304      	adds	r3, #4
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f000 fca2 	bl	800bc4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <HAL_TIM_PWM_Start+0x24>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	bf14      	ite	ne
 800b3a4:	2301      	movne	r3, #1
 800b3a6:	2300      	moveq	r3, #0
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	e03c      	b.n	800b426 <HAL_TIM_PWM_Start+0x9e>
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d109      	bne.n	800b3c6 <HAL_TIM_PWM_Start+0x3e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	bf14      	ite	ne
 800b3be:	2301      	movne	r3, #1
 800b3c0:	2300      	moveq	r3, #0
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	e02f      	b.n	800b426 <HAL_TIM_PWM_Start+0x9e>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b08      	cmp	r3, #8
 800b3ca:	d109      	bne.n	800b3e0 <HAL_TIM_PWM_Start+0x58>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	bf14      	ite	ne
 800b3d8:	2301      	movne	r3, #1
 800b3da:	2300      	moveq	r3, #0
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	e022      	b.n	800b426 <HAL_TIM_PWM_Start+0x9e>
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b0c      	cmp	r3, #12
 800b3e4:	d109      	bne.n	800b3fa <HAL_TIM_PWM_Start+0x72>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	bf14      	ite	ne
 800b3f2:	2301      	movne	r3, #1
 800b3f4:	2300      	moveq	r3, #0
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	e015      	b.n	800b426 <HAL_TIM_PWM_Start+0x9e>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b10      	cmp	r3, #16
 800b3fe:	d109      	bne.n	800b414 <HAL_TIM_PWM_Start+0x8c>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b01      	cmp	r3, #1
 800b40a:	bf14      	ite	ne
 800b40c:	2301      	movne	r3, #1
 800b40e:	2300      	moveq	r3, #0
 800b410:	b2db      	uxtb	r3, r3
 800b412:	e008      	b.n	800b426 <HAL_TIM_PWM_Start+0x9e>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	bf14      	ite	ne
 800b420:	2301      	movne	r3, #1
 800b422:	2300      	moveq	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e0a1      	b.n	800b572 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d104      	bne.n	800b43e <HAL_TIM_PWM_Start+0xb6>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b43c:	e023      	b.n	800b486 <HAL_TIM_PWM_Start+0xfe>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b04      	cmp	r3, #4
 800b442:	d104      	bne.n	800b44e <HAL_TIM_PWM_Start+0xc6>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b44c:	e01b      	b.n	800b486 <HAL_TIM_PWM_Start+0xfe>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b08      	cmp	r3, #8
 800b452:	d104      	bne.n	800b45e <HAL_TIM_PWM_Start+0xd6>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b45c:	e013      	b.n	800b486 <HAL_TIM_PWM_Start+0xfe>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b0c      	cmp	r3, #12
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0xe6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b46c:	e00b      	b.n	800b486 <HAL_TIM_PWM_Start+0xfe>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b10      	cmp	r3, #16
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0xf6>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b47c:	e003      	b.n	800b486 <HAL_TIM_PWM_Start+0xfe>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2202      	movs	r2, #2
 800b482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2201      	movs	r2, #1
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 ffea 	bl	800c468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a38      	ldr	r2, [pc, #224]	; (800b57c <HAL_TIM_PWM_Start+0x1f4>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d013      	beq.n	800b4c6 <HAL_TIM_PWM_Start+0x13e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a37      	ldr	r2, [pc, #220]	; (800b580 <HAL_TIM_PWM_Start+0x1f8>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d00e      	beq.n	800b4c6 <HAL_TIM_PWM_Start+0x13e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a35      	ldr	r2, [pc, #212]	; (800b584 <HAL_TIM_PWM_Start+0x1fc>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d009      	beq.n	800b4c6 <HAL_TIM_PWM_Start+0x13e>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a34      	ldr	r2, [pc, #208]	; (800b588 <HAL_TIM_PWM_Start+0x200>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d004      	beq.n	800b4c6 <HAL_TIM_PWM_Start+0x13e>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a32      	ldr	r2, [pc, #200]	; (800b58c <HAL_TIM_PWM_Start+0x204>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d101      	bne.n	800b4ca <HAL_TIM_PWM_Start+0x142>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e000      	b.n	800b4cc <HAL_TIM_PWM_Start+0x144>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d007      	beq.n	800b4e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a25      	ldr	r2, [pc, #148]	; (800b57c <HAL_TIM_PWM_Start+0x1f4>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d022      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4f2:	d01d      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a25      	ldr	r2, [pc, #148]	; (800b590 <HAL_TIM_PWM_Start+0x208>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d018      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a24      	ldr	r2, [pc, #144]	; (800b594 <HAL_TIM_PWM_Start+0x20c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d013      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a22      	ldr	r2, [pc, #136]	; (800b598 <HAL_TIM_PWM_Start+0x210>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d00e      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a1a      	ldr	r2, [pc, #104]	; (800b580 <HAL_TIM_PWM_Start+0x1f8>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d009      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a1e      	ldr	r2, [pc, #120]	; (800b59c <HAL_TIM_PWM_Start+0x214>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d004      	beq.n	800b530 <HAL_TIM_PWM_Start+0x1a8>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a16      	ldr	r2, [pc, #88]	; (800b584 <HAL_TIM_PWM_Start+0x1fc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d115      	bne.n	800b55c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <HAL_TIM_PWM_Start+0x218>)
 800b538:	4013      	ands	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b06      	cmp	r3, #6
 800b540:	d015      	beq.n	800b56e <HAL_TIM_PWM_Start+0x1e6>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b548:	d011      	beq.n	800b56e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f042 0201 	orr.w	r2, r2, #1
 800b558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b55a:	e008      	b.n	800b56e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f042 0201 	orr.w	r2, r2, #1
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	e000      	b.n	800b570 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	40010000 	.word	0x40010000
 800b580:	40010400 	.word	0x40010400
 800b584:	40014000 	.word	0x40014000
 800b588:	40014400 	.word	0x40014400
 800b58c:	40014800 	.word	0x40014800
 800b590:	40000400 	.word	0x40000400
 800b594:	40000800 	.word	0x40000800
 800b598:	40000c00 	.word	0x40000c00
 800b59c:	40001800 	.word	0x40001800
 800b5a0:	00010007 	.word	0x00010007

0800b5a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d122      	bne.n	800b600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d11b      	bne.n	800b600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f06f 0202 	mvn.w	r2, #2
 800b5d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fb12 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b5ec:	e005      	b.n	800b5fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fb04 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fb15 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	f003 0304 	and.w	r3, r3, #4
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	d122      	bne.n	800b654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f003 0304 	and.w	r3, r3, #4
 800b618:	2b04      	cmp	r3, #4
 800b61a:	d11b      	bne.n	800b654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f06f 0204 	mvn.w	r2, #4
 800b624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2202      	movs	r2, #2
 800b62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fae8 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b640:	e005      	b.n	800b64e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fada 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 faeb 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f003 0308 	and.w	r3, r3, #8
 800b65e:	2b08      	cmp	r3, #8
 800b660:	d122      	bne.n	800b6a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f003 0308 	and.w	r3, r3, #8
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d11b      	bne.n	800b6a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f06f 0208 	mvn.w	r2, #8
 800b678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2204      	movs	r2, #4
 800b67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	f003 0303 	and.w	r3, r3, #3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fabe 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b694:	e005      	b.n	800b6a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fab0 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fac1 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f003 0310 	and.w	r3, r3, #16
 800b6b2:	2b10      	cmp	r3, #16
 800b6b4:	d122      	bne.n	800b6fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	f003 0310 	and.w	r3, r3, #16
 800b6c0:	2b10      	cmp	r3, #16
 800b6c2:	d11b      	bne.n	800b6fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f06f 0210 	mvn.w	r2, #16
 800b6cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2208      	movs	r2, #8
 800b6d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa94 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b6e8:	e005      	b.n	800b6f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fa86 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fa97 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b01      	cmp	r3, #1
 800b708:	d10e      	bne.n	800b728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b01      	cmp	r3, #1
 800b716:	d107      	bne.n	800b728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f06f 0201 	mvn.w	r2, #1
 800b720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7f5 fb5c 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b732:	2b80      	cmp	r3, #128	; 0x80
 800b734:	d10e      	bne.n	800b754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b740:	2b80      	cmp	r3, #128	; 0x80
 800b742:	d107      	bne.n	800b754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 f888 	bl	800c864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b762:	d10e      	bne.n	800b782 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b76e:	2b80      	cmp	r3, #128	; 0x80
 800b770:	d107      	bne.n	800b782 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b77a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f001 f87b 	bl	800c878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78c:	2b40      	cmp	r3, #64	; 0x40
 800b78e:	d10e      	bne.n	800b7ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79a:	2b40      	cmp	r3, #64	; 0x40
 800b79c:	d107      	bne.n	800b7ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fa45 	bl	800bc38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	f003 0320 	and.w	r3, r3, #32
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d10e      	bne.n	800b7da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b20      	cmp	r3, #32
 800b7c8:	d107      	bne.n	800b7da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f06f 0220 	mvn.w	r2, #32
 800b7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f001 f83b 	bl	800c850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e0ff      	b.n	800ba02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b14      	cmp	r3, #20
 800b80e:	f200 80f0 	bhi.w	800b9f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b812:	a201      	add	r2, pc, #4	; (adr r2, 800b818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b818:	0800b86d 	.word	0x0800b86d
 800b81c:	0800b9f3 	.word	0x0800b9f3
 800b820:	0800b9f3 	.word	0x0800b9f3
 800b824:	0800b9f3 	.word	0x0800b9f3
 800b828:	0800b8ad 	.word	0x0800b8ad
 800b82c:	0800b9f3 	.word	0x0800b9f3
 800b830:	0800b9f3 	.word	0x0800b9f3
 800b834:	0800b9f3 	.word	0x0800b9f3
 800b838:	0800b8ef 	.word	0x0800b8ef
 800b83c:	0800b9f3 	.word	0x0800b9f3
 800b840:	0800b9f3 	.word	0x0800b9f3
 800b844:	0800b9f3 	.word	0x0800b9f3
 800b848:	0800b92f 	.word	0x0800b92f
 800b84c:	0800b9f3 	.word	0x0800b9f3
 800b850:	0800b9f3 	.word	0x0800b9f3
 800b854:	0800b9f3 	.word	0x0800b9f3
 800b858:	0800b971 	.word	0x0800b971
 800b85c:	0800b9f3 	.word	0x0800b9f3
 800b860:	0800b9f3 	.word	0x0800b9f3
 800b864:	0800b9f3 	.word	0x0800b9f3
 800b868:	0800b9b1 	.word	0x0800b9b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fa84 	bl	800bd80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f042 0208 	orr.w	r2, r2, #8
 800b886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f022 0204 	bic.w	r2, r2, #4
 800b896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6999      	ldr	r1, [r3, #24]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691a      	ldr	r2, [r3, #16]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	619a      	str	r2, [r3, #24]
      break;
 800b8aa:	e0a5      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68b9      	ldr	r1, [r7, #8]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 faf4 	bl	800bea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699a      	ldr	r2, [r3, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	699a      	ldr	r2, [r3, #24]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6999      	ldr	r1, [r3, #24]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	021a      	lsls	r2, r3, #8
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	619a      	str	r2, [r3, #24]
      break;
 800b8ec:	e084      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fb5d 	bl	800bfb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f042 0208 	orr.w	r2, r2, #8
 800b908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0204 	bic.w	r2, r2, #4
 800b918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69d9      	ldr	r1, [r3, #28]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	691a      	ldr	r2, [r3, #16]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	430a      	orrs	r2, r1
 800b92a:	61da      	str	r2, [r3, #28]
      break;
 800b92c:	e064      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fbc5 	bl	800c0c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69da      	ldr	r2, [r3, #28]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69d9      	ldr	r1, [r3, #28]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	021a      	lsls	r2, r3, #8
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	61da      	str	r2, [r3, #28]
      break;
 800b96e:	e043      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fc0e 	bl	800c198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f042 0208 	orr.w	r2, r2, #8
 800b98a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 0204 	bic.w	r2, r2, #4
 800b99a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	691a      	ldr	r2, [r3, #16]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9ae:	e023      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fc52 	bl	800c260 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	021a      	lsls	r2, r3, #8
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9f0:	e002      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop

0800ba0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_TIM_ConfigClockSource+0x1c>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e0dc      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x1d6>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2202      	movs	r2, #2
 800ba34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	4b6a      	ldr	r3, [pc, #424]	; (800bbec <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a64      	ldr	r2, [pc, #400]	; (800bbf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	f000 80a9 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba64:	4a62      	ldr	r2, [pc, #392]	; (800bbf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	f200 80ae 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba6c:	4a61      	ldr	r2, [pc, #388]	; (800bbf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	f000 80a1 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba74:	4a5f      	ldr	r2, [pc, #380]	; (800bbf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	f200 80a6 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba7c:	4a5e      	ldr	r2, [pc, #376]	; (800bbf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	f000 8099 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba84:	4a5c      	ldr	r2, [pc, #368]	; (800bbf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	f200 809e 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba90:	f000 8091 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba98:	f200 8096 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baa0:	f000 8089 	beq.w	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800baa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baa8:	f200 808e 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bab0:	d03e      	beq.n	800bb30 <HAL_TIM_ConfigClockSource+0x124>
 800bab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bab6:	f200 8087 	bhi.w	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800babe:	f000 8086 	beq.w	800bbce <HAL_TIM_ConfigClockSource+0x1c2>
 800bac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac6:	d87f      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bac8:	2b70      	cmp	r3, #112	; 0x70
 800baca:	d01a      	beq.n	800bb02 <HAL_TIM_ConfigClockSource+0xf6>
 800bacc:	2b70      	cmp	r3, #112	; 0x70
 800bace:	d87b      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bad0:	2b60      	cmp	r3, #96	; 0x60
 800bad2:	d050      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x16a>
 800bad4:	2b60      	cmp	r3, #96	; 0x60
 800bad6:	d877      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bad8:	2b50      	cmp	r3, #80	; 0x50
 800bada:	d03c      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x14a>
 800badc:	2b50      	cmp	r3, #80	; 0x50
 800bade:	d873      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bae0:	2b40      	cmp	r3, #64	; 0x40
 800bae2:	d058      	beq.n	800bb96 <HAL_TIM_ConfigClockSource+0x18a>
 800bae4:	2b40      	cmp	r3, #64	; 0x40
 800bae6:	d86f      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bae8:	2b30      	cmp	r3, #48	; 0x30
 800baea:	d064      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800baec:	2b30      	cmp	r3, #48	; 0x30
 800baee:	d86b      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	d060      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800baf4:	2b20      	cmp	r3, #32
 800baf6:	d867      	bhi.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d05c      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bafc:	2b10      	cmp	r3, #16
 800bafe:	d05a      	beq.n	800bbb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb00:	e062      	b.n	800bbc8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb12:	f000 fc89 	bl	800c428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	609a      	str	r2, [r3, #8]
      break;
 800bb2e:	e04f      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb40:	f000 fc72 	bl	800c428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb52:	609a      	str	r2, [r3, #8]
      break;
 800bb54:	e03c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb62:	461a      	mov	r2, r3
 800bb64:	f000 fbe2 	bl	800c32c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2150      	movs	r1, #80	; 0x50
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 fc3c 	bl	800c3ec <TIM_ITRx_SetConfig>
      break;
 800bb74:	e02c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb82:	461a      	mov	r2, r3
 800bb84:	f000 fc01 	bl	800c38a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2160      	movs	r1, #96	; 0x60
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 fc2c 	bl	800c3ec <TIM_ITRx_SetConfig>
      break;
 800bb94:	e01c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba2:	461a      	mov	r2, r3
 800bba4:	f000 fbc2 	bl	800c32c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2140      	movs	r1, #64	; 0x40
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fc1c 	bl	800c3ec <TIM_ITRx_SetConfig>
      break;
 800bbb4:	e00c      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f000 fc13 	bl	800c3ec <TIM_ITRx_SetConfig>
      break;
 800bbc6:	e003      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	73fb      	strb	r3, [r7, #15]
      break;
 800bbcc:	e000      	b.n	800bbd0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bbce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	ffceff88 	.word	0xffceff88
 800bbf0:	00100040 	.word	0x00100040
 800bbf4:	00100030 	.word	0x00100030
 800bbf8:	00100020 	.word	0x00100020

0800bbfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a40      	ldr	r2, [pc, #256]	; (800bd60 <TIM_Base_SetConfig+0x114>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d013      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc6a:	d00f      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a3d      	ldr	r2, [pc, #244]	; (800bd64 <TIM_Base_SetConfig+0x118>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d00b      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a3c      	ldr	r2, [pc, #240]	; (800bd68 <TIM_Base_SetConfig+0x11c>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d007      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a3b      	ldr	r2, [pc, #236]	; (800bd6c <TIM_Base_SetConfig+0x120>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d003      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a3a      	ldr	r2, [pc, #232]	; (800bd70 <TIM_Base_SetConfig+0x124>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d108      	bne.n	800bc9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a2f      	ldr	r2, [pc, #188]	; (800bd60 <TIM_Base_SetConfig+0x114>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d01f      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcac:	d01b      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a2c      	ldr	r2, [pc, #176]	; (800bd64 <TIM_Base_SetConfig+0x118>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d017      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a2b      	ldr	r2, [pc, #172]	; (800bd68 <TIM_Base_SetConfig+0x11c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d013      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a2a      	ldr	r2, [pc, #168]	; (800bd6c <TIM_Base_SetConfig+0x120>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d00f      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a29      	ldr	r2, [pc, #164]	; (800bd70 <TIM_Base_SetConfig+0x124>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d00b      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a28      	ldr	r2, [pc, #160]	; (800bd74 <TIM_Base_SetConfig+0x128>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d007      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a27      	ldr	r2, [pc, #156]	; (800bd78 <TIM_Base_SetConfig+0x12c>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d003      	beq.n	800bce6 <TIM_Base_SetConfig+0x9a>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a26      	ldr	r2, [pc, #152]	; (800bd7c <TIM_Base_SetConfig+0x130>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d108      	bne.n	800bcf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	689a      	ldr	r2, [r3, #8]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a10      	ldr	r2, [pc, #64]	; (800bd60 <TIM_Base_SetConfig+0x114>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d00f      	beq.n	800bd44 <TIM_Base_SetConfig+0xf8>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a12      	ldr	r2, [pc, #72]	; (800bd70 <TIM_Base_SetConfig+0x124>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d00b      	beq.n	800bd44 <TIM_Base_SetConfig+0xf8>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a11      	ldr	r2, [pc, #68]	; (800bd74 <TIM_Base_SetConfig+0x128>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d007      	beq.n	800bd44 <TIM_Base_SetConfig+0xf8>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a10      	ldr	r2, [pc, #64]	; (800bd78 <TIM_Base_SetConfig+0x12c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d003      	beq.n	800bd44 <TIM_Base_SetConfig+0xf8>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a0f      	ldr	r2, [pc, #60]	; (800bd7c <TIM_Base_SetConfig+0x130>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d103      	bne.n	800bd4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	615a      	str	r2, [r3, #20]
}
 800bd52:	bf00      	nop
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40000400 	.word	0x40000400
 800bd68:	40000800 	.word	0x40000800
 800bd6c:	40000c00 	.word	0x40000c00
 800bd70:	40010400 	.word	0x40010400
 800bd74:	40014000 	.word	0x40014000
 800bd78:	40014400 	.word	0x40014400
 800bd7c:	40014800 	.word	0x40014800

0800bd80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	f023 0201 	bic.w	r2, r3, #1
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	4b37      	ldr	r3, [pc, #220]	; (800be88 <TIM_OC1_SetConfig+0x108>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f023 0303 	bic.w	r3, r3, #3
 800bdb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f023 0302 	bic.w	r3, r3, #2
 800bdc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a2d      	ldr	r2, [pc, #180]	; (800be8c <TIM_OC1_SetConfig+0x10c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00f      	beq.n	800bdfc <TIM_OC1_SetConfig+0x7c>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a2c      	ldr	r2, [pc, #176]	; (800be90 <TIM_OC1_SetConfig+0x110>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d00b      	beq.n	800bdfc <TIM_OC1_SetConfig+0x7c>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a2b      	ldr	r2, [pc, #172]	; (800be94 <TIM_OC1_SetConfig+0x114>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d007      	beq.n	800bdfc <TIM_OC1_SetConfig+0x7c>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a2a      	ldr	r2, [pc, #168]	; (800be98 <TIM_OC1_SetConfig+0x118>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d003      	beq.n	800bdfc <TIM_OC1_SetConfig+0x7c>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a29      	ldr	r2, [pc, #164]	; (800be9c <TIM_OC1_SetConfig+0x11c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d10c      	bne.n	800be16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f023 0308 	bic.w	r3, r3, #8
 800be02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f023 0304 	bic.w	r3, r3, #4
 800be14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a1c      	ldr	r2, [pc, #112]	; (800be8c <TIM_OC1_SetConfig+0x10c>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d00f      	beq.n	800be3e <TIM_OC1_SetConfig+0xbe>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a1b      	ldr	r2, [pc, #108]	; (800be90 <TIM_OC1_SetConfig+0x110>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d00b      	beq.n	800be3e <TIM_OC1_SetConfig+0xbe>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a1a      	ldr	r2, [pc, #104]	; (800be94 <TIM_OC1_SetConfig+0x114>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d007      	beq.n	800be3e <TIM_OC1_SetConfig+0xbe>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a19      	ldr	r2, [pc, #100]	; (800be98 <TIM_OC1_SetConfig+0x118>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d003      	beq.n	800be3e <TIM_OC1_SetConfig+0xbe>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a18      	ldr	r2, [pc, #96]	; (800be9c <TIM_OC1_SetConfig+0x11c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d111      	bne.n	800be62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4313      	orrs	r3, r2
 800be56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	4313      	orrs	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	621a      	str	r2, [r3, #32]
}
 800be7c:	bf00      	nop
 800be7e:	371c      	adds	r7, #28
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	fffeff8f 	.word	0xfffeff8f
 800be8c:	40010000 	.word	0x40010000
 800be90:	40010400 	.word	0x40010400
 800be94:	40014000 	.word	0x40014000
 800be98:	40014400 	.word	0x40014400
 800be9c:	40014800 	.word	0x40014800

0800bea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	f023 0210 	bic.w	r2, r3, #16
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4b34      	ldr	r3, [pc, #208]	; (800bf9c <TIM_OC2_SetConfig+0xfc>)
 800becc:	4013      	ands	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	021b      	lsls	r3, r3, #8
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	f023 0320 	bic.w	r3, r3, #32
 800beea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	011b      	lsls	r3, r3, #4
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a29      	ldr	r2, [pc, #164]	; (800bfa0 <TIM_OC2_SetConfig+0x100>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d003      	beq.n	800bf08 <TIM_OC2_SetConfig+0x68>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a28      	ldr	r2, [pc, #160]	; (800bfa4 <TIM_OC2_SetConfig+0x104>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d10d      	bne.n	800bf24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	011b      	lsls	r3, r3, #4
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a1e      	ldr	r2, [pc, #120]	; (800bfa0 <TIM_OC2_SetConfig+0x100>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d00f      	beq.n	800bf4c <TIM_OC2_SetConfig+0xac>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a1d      	ldr	r2, [pc, #116]	; (800bfa4 <TIM_OC2_SetConfig+0x104>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d00b      	beq.n	800bf4c <TIM_OC2_SetConfig+0xac>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a1c      	ldr	r2, [pc, #112]	; (800bfa8 <TIM_OC2_SetConfig+0x108>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d007      	beq.n	800bf4c <TIM_OC2_SetConfig+0xac>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a1b      	ldr	r2, [pc, #108]	; (800bfac <TIM_OC2_SetConfig+0x10c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d003      	beq.n	800bf4c <TIM_OC2_SetConfig+0xac>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a1a      	ldr	r2, [pc, #104]	; (800bfb0 <TIM_OC2_SetConfig+0x110>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d113      	bne.n	800bf74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	621a      	str	r2, [r3, #32]
}
 800bf8e:	bf00      	nop
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	feff8fff 	.word	0xfeff8fff
 800bfa0:	40010000 	.word	0x40010000
 800bfa4:	40010400 	.word	0x40010400
 800bfa8:	40014000 	.word	0x40014000
 800bfac:	40014400 	.word	0x40014400
 800bfb0:	40014800 	.word	0x40014800

0800bfb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	69db      	ldr	r3, [r3, #28]
 800bfda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4b33      	ldr	r3, [pc, #204]	; (800c0ac <TIM_OC3_SetConfig+0xf8>)
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f023 0303 	bic.w	r3, r3, #3
 800bfea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	021b      	lsls	r3, r3, #8
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	4313      	orrs	r3, r2
 800c008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a28      	ldr	r2, [pc, #160]	; (800c0b0 <TIM_OC3_SetConfig+0xfc>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d003      	beq.n	800c01a <TIM_OC3_SetConfig+0x66>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a27      	ldr	r2, [pc, #156]	; (800c0b4 <TIM_OC3_SetConfig+0x100>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d10d      	bne.n	800c036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a1d      	ldr	r2, [pc, #116]	; (800c0b0 <TIM_OC3_SetConfig+0xfc>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d00f      	beq.n	800c05e <TIM_OC3_SetConfig+0xaa>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a1c      	ldr	r2, [pc, #112]	; (800c0b4 <TIM_OC3_SetConfig+0x100>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d00b      	beq.n	800c05e <TIM_OC3_SetConfig+0xaa>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a1b      	ldr	r2, [pc, #108]	; (800c0b8 <TIM_OC3_SetConfig+0x104>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d007      	beq.n	800c05e <TIM_OC3_SetConfig+0xaa>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a1a      	ldr	r2, [pc, #104]	; (800c0bc <TIM_OC3_SetConfig+0x108>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d003      	beq.n	800c05e <TIM_OC3_SetConfig+0xaa>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a19      	ldr	r2, [pc, #100]	; (800c0c0 <TIM_OC3_SetConfig+0x10c>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d113      	bne.n	800c086 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c06c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	011b      	lsls	r3, r3, #4
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	4313      	orrs	r3, r2
 800c078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4313      	orrs	r3, r2
 800c084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	685a      	ldr	r2, [r3, #4]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	621a      	str	r2, [r3, #32]
}
 800c0a0:	bf00      	nop
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	fffeff8f 	.word	0xfffeff8f
 800c0b0:	40010000 	.word	0x40010000
 800c0b4:	40010400 	.word	0x40010400
 800c0b8:	40014000 	.word	0x40014000
 800c0bc:	40014400 	.word	0x40014400
 800c0c0:	40014800 	.word	0x40014800

0800c0c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b087      	sub	sp, #28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4b24      	ldr	r3, [pc, #144]	; (800c180 <TIM_OC4_SetConfig+0xbc>)
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c10e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	031b      	lsls	r3, r3, #12
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	4313      	orrs	r3, r2
 800c11a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a19      	ldr	r2, [pc, #100]	; (800c184 <TIM_OC4_SetConfig+0xc0>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d00f      	beq.n	800c144 <TIM_OC4_SetConfig+0x80>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a18      	ldr	r2, [pc, #96]	; (800c188 <TIM_OC4_SetConfig+0xc4>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d00b      	beq.n	800c144 <TIM_OC4_SetConfig+0x80>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a17      	ldr	r2, [pc, #92]	; (800c18c <TIM_OC4_SetConfig+0xc8>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d007      	beq.n	800c144 <TIM_OC4_SetConfig+0x80>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a16      	ldr	r2, [pc, #88]	; (800c190 <TIM_OC4_SetConfig+0xcc>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d003      	beq.n	800c144 <TIM_OC4_SetConfig+0x80>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a15      	ldr	r2, [pc, #84]	; (800c194 <TIM_OC4_SetConfig+0xd0>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d109      	bne.n	800c158 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c14a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	019b      	lsls	r3, r3, #6
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	4313      	orrs	r3, r2
 800c156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	621a      	str	r2, [r3, #32]
}
 800c172:	bf00      	nop
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	feff8fff 	.word	0xfeff8fff
 800c184:	40010000 	.word	0x40010000
 800c188:	40010400 	.word	0x40010400
 800c18c:	40014000 	.word	0x40014000
 800c190:	40014400 	.word	0x40014400
 800c194:	40014800 	.word	0x40014800

0800c198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4b21      	ldr	r3, [pc, #132]	; (800c248 <TIM_OC5_SetConfig+0xb0>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	041b      	lsls	r3, r3, #16
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a18      	ldr	r2, [pc, #96]	; (800c24c <TIM_OC5_SetConfig+0xb4>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d00f      	beq.n	800c20e <TIM_OC5_SetConfig+0x76>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a17      	ldr	r2, [pc, #92]	; (800c250 <TIM_OC5_SetConfig+0xb8>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d00b      	beq.n	800c20e <TIM_OC5_SetConfig+0x76>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a16      	ldr	r2, [pc, #88]	; (800c254 <TIM_OC5_SetConfig+0xbc>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d007      	beq.n	800c20e <TIM_OC5_SetConfig+0x76>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a15      	ldr	r2, [pc, #84]	; (800c258 <TIM_OC5_SetConfig+0xc0>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d003      	beq.n	800c20e <TIM_OC5_SetConfig+0x76>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a14      	ldr	r2, [pc, #80]	; (800c25c <TIM_OC5_SetConfig+0xc4>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d109      	bne.n	800c222 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c214:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	021b      	lsls	r3, r3, #8
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	4313      	orrs	r3, r2
 800c220:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	621a      	str	r2, [r3, #32]
}
 800c23c:	bf00      	nop
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	fffeff8f 	.word	0xfffeff8f
 800c24c:	40010000 	.word	0x40010000
 800c250:	40010400 	.word	0x40010400
 800c254:	40014000 	.word	0x40014000
 800c258:	40014400 	.word	0x40014400
 800c25c:	40014800 	.word	0x40014800

0800c260 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c260:	b480      	push	{r7}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4b22      	ldr	r3, [pc, #136]	; (800c314 <TIM_OC6_SetConfig+0xb4>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	4313      	orrs	r3, r2
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	051b      	lsls	r3, r3, #20
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a19      	ldr	r2, [pc, #100]	; (800c318 <TIM_OC6_SetConfig+0xb8>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d00f      	beq.n	800c2d8 <TIM_OC6_SetConfig+0x78>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a18      	ldr	r2, [pc, #96]	; (800c31c <TIM_OC6_SetConfig+0xbc>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00b      	beq.n	800c2d8 <TIM_OC6_SetConfig+0x78>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a17      	ldr	r2, [pc, #92]	; (800c320 <TIM_OC6_SetConfig+0xc0>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d007      	beq.n	800c2d8 <TIM_OC6_SetConfig+0x78>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a16      	ldr	r2, [pc, #88]	; (800c324 <TIM_OC6_SetConfig+0xc4>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d003      	beq.n	800c2d8 <TIM_OC6_SetConfig+0x78>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a15      	ldr	r2, [pc, #84]	; (800c328 <TIM_OC6_SetConfig+0xc8>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d109      	bne.n	800c2ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	695b      	ldr	r3, [r3, #20]
 800c2e4:	029b      	lsls	r3, r3, #10
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	621a      	str	r2, [r3, #32]
}
 800c306:	bf00      	nop
 800c308:	371c      	adds	r7, #28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	feff8fff 	.word	0xfeff8fff
 800c318:	40010000 	.word	0x40010000
 800c31c:	40010400 	.word	0x40010400
 800c320:	40014000 	.word	0x40014000
 800c324:	40014400 	.word	0x40014400
 800c328:	40014800 	.word	0x40014800

0800c32c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6a1b      	ldr	r3, [r3, #32]
 800c33c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	f023 0201 	bic.w	r2, r3, #1
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	011b      	lsls	r3, r3, #4
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4313      	orrs	r3, r2
 800c360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f023 030a 	bic.w	r3, r3, #10
 800c368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	621a      	str	r2, [r3, #32]
}
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	f023 0210 	bic.w	r2, r3, #16
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	031b      	lsls	r3, r3, #12
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	011b      	lsls	r3, r3, #4
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
	...

0800c3ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	4b09      	ldr	r3, [pc, #36]	; (800c424 <TIM_ITRx_SetConfig+0x38>)
 800c400:	4013      	ands	r3, r2
 800c402:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	f043 0307 	orr.w	r3, r3, #7
 800c40e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	609a      	str	r2, [r3, #8]
}
 800c416:	bf00      	nop
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	ffcfff8f 	.word	0xffcfff8f

0800c428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	021a      	lsls	r2, r3, #8
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	431a      	orrs	r2, r3
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	4313      	orrs	r3, r2
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	4313      	orrs	r3, r2
 800c454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	609a      	str	r2, [r3, #8]
}
 800c45c:	bf00      	nop
 800c45e:	371c      	adds	r7, #28
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c468:	b480      	push	{r7}
 800c46a:	b087      	sub	sp, #28
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f003 031f 	and.w	r3, r3, #31
 800c47a:	2201      	movs	r2, #1
 800c47c:	fa02 f303 	lsl.w	r3, r2, r3
 800c480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6a1a      	ldr	r2, [r3, #32]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	43db      	mvns	r3, r3
 800c48a:	401a      	ands	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6a1a      	ldr	r2, [r3, #32]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f003 031f 	and.w	r3, r3, #31
 800c49a:	6879      	ldr	r1, [r7, #4]
 800c49c:	fa01 f303 	lsl.w	r3, r1, r3
 800c4a0:	431a      	orrs	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	621a      	str	r2, [r3, #32]
}
 800c4a6:	bf00      	nop
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d109      	bne.n	800c4d8 <HAL_TIMEx_PWMN_Start+0x24>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	bf14      	ite	ne
 800c4d0:	2301      	movne	r3, #1
 800c4d2:	2300      	moveq	r3, #0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	e022      	b.n	800c51e <HAL_TIMEx_PWMN_Start+0x6a>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	d109      	bne.n	800c4f2 <HAL_TIMEx_PWMN_Start+0x3e>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	bf14      	ite	ne
 800c4ea:	2301      	movne	r3, #1
 800c4ec:	2300      	moveq	r3, #0
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	e015      	b.n	800c51e <HAL_TIMEx_PWMN_Start+0x6a>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b08      	cmp	r3, #8
 800c4f6:	d109      	bne.n	800c50c <HAL_TIMEx_PWMN_Start+0x58>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b01      	cmp	r3, #1
 800c502:	bf14      	ite	ne
 800c504:	2301      	movne	r3, #1
 800c506:	2300      	moveq	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	e008      	b.n	800c51e <HAL_TIMEx_PWMN_Start+0x6a>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b01      	cmp	r3, #1
 800c516:	bf14      	ite	ne
 800c518:	2301      	movne	r3, #1
 800c51a:	2300      	moveq	r3, #0
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e073      	b.n	800c60e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <HAL_TIMEx_PWMN_Start+0x82>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c534:	e013      	b.n	800c55e <HAL_TIMEx_PWMN_Start+0xaa>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d104      	bne.n	800c546 <HAL_TIMEx_PWMN_Start+0x92>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c544:	e00b      	b.n	800c55e <HAL_TIMEx_PWMN_Start+0xaa>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b08      	cmp	r3, #8
 800c54a:	d104      	bne.n	800c556 <HAL_TIMEx_PWMN_Start+0xa2>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2202      	movs	r2, #2
 800c550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c554:	e003      	b.n	800c55e <HAL_TIMEx_PWMN_Start+0xaa>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2202      	movs	r2, #2
 800c55a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2204      	movs	r2, #4
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f990 	bl	800c88c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c57a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a25      	ldr	r2, [pc, #148]	; (800c618 <HAL_TIMEx_PWMN_Start+0x164>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d022      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58e:	d01d      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a21      	ldr	r2, [pc, #132]	; (800c61c <HAL_TIMEx_PWMN_Start+0x168>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d018      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a20      	ldr	r2, [pc, #128]	; (800c620 <HAL_TIMEx_PWMN_Start+0x16c>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d013      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a1e      	ldr	r2, [pc, #120]	; (800c624 <HAL_TIMEx_PWMN_Start+0x170>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d00e      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a1d      	ldr	r2, [pc, #116]	; (800c628 <HAL_TIMEx_PWMN_Start+0x174>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d009      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a1b      	ldr	r2, [pc, #108]	; (800c62c <HAL_TIMEx_PWMN_Start+0x178>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d004      	beq.n	800c5cc <HAL_TIMEx_PWMN_Start+0x118>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a1a      	ldr	r2, [pc, #104]	; (800c630 <HAL_TIMEx_PWMN_Start+0x17c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d115      	bne.n	800c5f8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	689a      	ldr	r2, [r3, #8]
 800c5d2:	4b18      	ldr	r3, [pc, #96]	; (800c634 <HAL_TIMEx_PWMN_Start+0x180>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2b06      	cmp	r3, #6
 800c5dc:	d015      	beq.n	800c60a <HAL_TIMEx_PWMN_Start+0x156>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e4:	d011      	beq.n	800c60a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f042 0201 	orr.w	r2, r2, #1
 800c5f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f6:	e008      	b.n	800c60a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f042 0201 	orr.w	r2, r2, #1
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	e000      	b.n	800c60c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c60a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	40010000 	.word	0x40010000
 800c61c:	40000400 	.word	0x40000400
 800c620:	40000800 	.word	0x40000800
 800c624:	40000c00 	.word	0x40000c00
 800c628:	40010400 	.word	0x40010400
 800c62c:	40001800 	.word	0x40001800
 800c630:	40014000 	.word	0x40014000
 800c634:	00010007 	.word	0x00010007

0800c638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d101      	bne.n	800c650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c64c:	2302      	movs	r3, #2
 800c64e:	e06d      	b.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a30      	ldr	r2, [pc, #192]	; (800c738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d004      	beq.n	800c684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a2f      	ldr	r2, [pc, #188]	; (800c73c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d108      	bne.n	800c696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c68a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	4313      	orrs	r3, r2
 800c694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a20      	ldr	r2, [pc, #128]	; (800c738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d022      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6c2:	d01d      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a1d      	ldr	r2, [pc, #116]	; (800c740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d018      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a1c      	ldr	r2, [pc, #112]	; (800c744 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d013      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a1a      	ldr	r2, [pc, #104]	; (800c748 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d00e      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a15      	ldr	r2, [pc, #84]	; (800c73c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d009      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a16      	ldr	r2, [pc, #88]	; (800c74c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d004      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a15      	ldr	r2, [pc, #84]	; (800c750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d10c      	bne.n	800c71a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	4313      	orrs	r3, r2
 800c710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68ba      	ldr	r2, [r7, #8]
 800c718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	40010000 	.word	0x40010000
 800c73c:	40010400 	.word	0x40010400
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40000c00 	.word	0x40000c00
 800c74c:	40001800 	.word	0x40001800
 800c750:	40014000 	.word	0x40014000

0800c754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d101      	bne.n	800c770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c76c:	2302      	movs	r3, #2
 800c76e:	e065      	b.n	800c83c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	4313      	orrs	r3, r2
 800c784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	695b      	ldr	r3, [r3, #20]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	041b      	lsls	r3, r3, #16
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a16      	ldr	r2, [pc, #88]	; (800c848 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d004      	beq.n	800c7fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a14      	ldr	r2, [pc, #80]	; (800c84c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d115      	bne.n	800c82a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	051b      	lsls	r3, r3, #20
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	69db      	ldr	r3, [r3, #28]
 800c818:	4313      	orrs	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	4313      	orrs	r3, r2
 800c828:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	40010000 	.word	0x40010000
 800c84c:	40010400 	.word	0x40010400

0800c850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	f003 031f 	and.w	r3, r3, #31
 800c89e:	2204      	movs	r2, #4
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6a1a      	ldr	r2, [r3, #32]
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	43db      	mvns	r3, r3
 800c8ae:	401a      	ands	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6a1a      	ldr	r2, [r3, #32]
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f003 031f 	and.w	r3, r3, #31
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	621a      	str	r2, [r3, #32]
}
 800c8ca:	bf00      	nop
 800c8cc:	371c      	adds	r7, #28
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
	...

0800c8d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8d8:	b084      	sub	sp, #16
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	f107 001c 	add.w	r0, r7, #28
 800c8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d120      	bne.n	800c932 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	4b2a      	ldr	r3, [pc, #168]	; (800c9ac <USB_CoreInit+0xd4>)
 800c902:	4013      	ands	r3, r2
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c916:	2b01      	cmp	r3, #1
 800c918:	d105      	bne.n	800c926 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f001 faf8 	bl	800df1c <USB_CoreReset>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73fb      	strb	r3, [r7, #15]
 800c930:	e01a      	b.n	800c968 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 faec 	bl	800df1c <USB_CoreReset>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d106      	bne.n	800c95c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c952:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	639a      	str	r2, [r3, #56]	; 0x38
 800c95a:	e005      	b.n	800c968 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c960:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d116      	bne.n	800c99c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c97c:	4b0c      	ldr	r3, [pc, #48]	; (800c9b0 <USB_CoreInit+0xd8>)
 800c97e:	4313      	orrs	r3, r2
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f043 0206 	orr.w	r2, r3, #6
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	f043 0220 	orr.w	r2, r3, #32
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9a8:	b004      	add	sp, #16
 800c9aa:	4770      	bx	lr
 800c9ac:	ffbdffbf 	.word	0xffbdffbf
 800c9b0:	03ee0000 	.word	0x03ee0000

0800c9b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d165      	bne.n	800ca94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	4a41      	ldr	r2, [pc, #260]	; (800cad0 <USB_SetTurnaroundTime+0x11c>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d906      	bls.n	800c9de <USB_SetTurnaroundTime+0x2a>
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	4a40      	ldr	r2, [pc, #256]	; (800cad4 <USB_SetTurnaroundTime+0x120>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d202      	bcs.n	800c9de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c9d8:	230f      	movs	r3, #15
 800c9da:	617b      	str	r3, [r7, #20]
 800c9dc:	e062      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	4a3c      	ldr	r2, [pc, #240]	; (800cad4 <USB_SetTurnaroundTime+0x120>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d306      	bcc.n	800c9f4 <USB_SetTurnaroundTime+0x40>
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	4a3b      	ldr	r2, [pc, #236]	; (800cad8 <USB_SetTurnaroundTime+0x124>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d202      	bcs.n	800c9f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c9ee:	230e      	movs	r3, #14
 800c9f0:	617b      	str	r3, [r7, #20]
 800c9f2:	e057      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	4a38      	ldr	r2, [pc, #224]	; (800cad8 <USB_SetTurnaroundTime+0x124>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d306      	bcc.n	800ca0a <USB_SetTurnaroundTime+0x56>
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	4a37      	ldr	r2, [pc, #220]	; (800cadc <USB_SetTurnaroundTime+0x128>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d202      	bcs.n	800ca0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ca04:	230d      	movs	r3, #13
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	e04c      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	4a33      	ldr	r2, [pc, #204]	; (800cadc <USB_SetTurnaroundTime+0x128>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d306      	bcc.n	800ca20 <USB_SetTurnaroundTime+0x6c>
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	4a32      	ldr	r2, [pc, #200]	; (800cae0 <USB_SetTurnaroundTime+0x12c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d802      	bhi.n	800ca20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	e041      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	4a2f      	ldr	r2, [pc, #188]	; (800cae0 <USB_SetTurnaroundTime+0x12c>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d906      	bls.n	800ca36 <USB_SetTurnaroundTime+0x82>
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	4a2e      	ldr	r2, [pc, #184]	; (800cae4 <USB_SetTurnaroundTime+0x130>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d802      	bhi.n	800ca36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ca30:	230b      	movs	r3, #11
 800ca32:	617b      	str	r3, [r7, #20]
 800ca34:	e036      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	4a2a      	ldr	r2, [pc, #168]	; (800cae4 <USB_SetTurnaroundTime+0x130>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d906      	bls.n	800ca4c <USB_SetTurnaroundTime+0x98>
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	4a29      	ldr	r2, [pc, #164]	; (800cae8 <USB_SetTurnaroundTime+0x134>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d802      	bhi.n	800ca4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ca46:	230a      	movs	r3, #10
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e02b      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	4a26      	ldr	r2, [pc, #152]	; (800cae8 <USB_SetTurnaroundTime+0x134>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d906      	bls.n	800ca62 <USB_SetTurnaroundTime+0xae>
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	4a25      	ldr	r2, [pc, #148]	; (800caec <USB_SetTurnaroundTime+0x138>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d202      	bcs.n	800ca62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ca5c:	2309      	movs	r3, #9
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	e020      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	4a21      	ldr	r2, [pc, #132]	; (800caec <USB_SetTurnaroundTime+0x138>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d306      	bcc.n	800ca78 <USB_SetTurnaroundTime+0xc4>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	4a20      	ldr	r2, [pc, #128]	; (800caf0 <USB_SetTurnaroundTime+0x13c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d802      	bhi.n	800ca78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ca72:	2308      	movs	r3, #8
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	e015      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	4a1d      	ldr	r2, [pc, #116]	; (800caf0 <USB_SetTurnaroundTime+0x13c>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d906      	bls.n	800ca8e <USB_SetTurnaroundTime+0xda>
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	4a1c      	ldr	r2, [pc, #112]	; (800caf4 <USB_SetTurnaroundTime+0x140>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d202      	bcs.n	800ca8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ca88:	2307      	movs	r3, #7
 800ca8a:	617b      	str	r3, [r7, #20]
 800ca8c:	e00a      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ca8e:	2306      	movs	r3, #6
 800ca90:	617b      	str	r3, [r7, #20]
 800ca92:	e007      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ca9a:	2309      	movs	r3, #9
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	e001      	b.n	800caa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800caa0:	2309      	movs	r3, #9
 800caa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	029b      	lsls	r3, r3, #10
 800cab8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cabc:	431a      	orrs	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	371c      	adds	r7, #28
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	00d8acbf 	.word	0x00d8acbf
 800cad4:	00e4e1c0 	.word	0x00e4e1c0
 800cad8:	00f42400 	.word	0x00f42400
 800cadc:	01067380 	.word	0x01067380
 800cae0:	011a499f 	.word	0x011a499f
 800cae4:	01312cff 	.word	0x01312cff
 800cae8:	014ca43f 	.word	0x014ca43f
 800caec:	016e3600 	.word	0x016e3600
 800caf0:	01a6ab1f 	.word	0x01a6ab1f
 800caf4:	01e84800 	.word	0x01e84800

0800caf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	f043 0201 	orr.w	r2, r3, #1
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b083      	sub	sp, #12
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	f023 0201 	bic.w	r2, r3, #1
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d115      	bne.n	800cb8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	f7f4 fe58 	bl	8001820 <HAL_Delay>
      ms++;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3301      	adds	r3, #1
 800cb74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f001 f93f 	bl	800ddfa <USB_GetMode>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d01e      	beq.n	800cbc0 <USB_SetCurrentMode+0x84>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b31      	cmp	r3, #49	; 0x31
 800cb86:	d9f0      	bls.n	800cb6a <USB_SetCurrentMode+0x2e>
 800cb88:	e01a      	b.n	800cbc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb8a:	78fb      	ldrb	r3, [r7, #3]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d115      	bne.n	800cbbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb9c:	2001      	movs	r0, #1
 800cb9e:	f7f4 fe3f 	bl	8001820 <HAL_Delay>
      ms++;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3301      	adds	r3, #1
 800cba6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f001 f926 	bl	800ddfa <USB_GetMode>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d005      	beq.n	800cbc0 <USB_SetCurrentMode+0x84>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b31      	cmp	r3, #49	; 0x31
 800cbb8:	d9f0      	bls.n	800cb9c <USB_SetCurrentMode+0x60>
 800cbba:	e001      	b.n	800cbc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e005      	b.n	800cbcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2b32      	cmp	r3, #50	; 0x32
 800cbc4:	d101      	bne.n	800cbca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e000      	b.n	800cbcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cbd4:	b084      	sub	sp, #16
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b086      	sub	sp, #24
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cbe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cbee:	2300      	movs	r3, #0
 800cbf0:	613b      	str	r3, [r7, #16]
 800cbf2:	e009      	b.n	800cc08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	3340      	adds	r3, #64	; 0x40
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	2200      	movs	r2, #0
 800cc00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	3301      	adds	r3, #1
 800cc06:	613b      	str	r3, [r7, #16]
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	2b0e      	cmp	r3, #14
 800cc0c:	d9f2      	bls.n	800cbf4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d11c      	bne.n	800cc4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc22:	f043 0302 	orr.w	r3, r3, #2
 800cc26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	e005      	b.n	800cc5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc60:	461a      	mov	r2, r3
 800cc62:	2300      	movs	r3, #0
 800cc64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc74:	461a      	mov	r2, r3
 800cc76:	680b      	ldr	r3, [r1, #0]
 800cc78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d10c      	bne.n	800cc9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d104      	bne.n	800cc90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc86:	2100      	movs	r1, #0
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f965 	bl	800cf58 <USB_SetDevSpeed>
 800cc8e:	e008      	b.n	800cca2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc90:	2101      	movs	r1, #1
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f960 	bl	800cf58 <USB_SetDevSpeed>
 800cc98:	e003      	b.n	800cca2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc9a:	2103      	movs	r1, #3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f95b 	bl	800cf58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cca2:	2110      	movs	r1, #16
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f8f3 	bl	800ce90 <USB_FlushTxFifo>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 f91f 	bl	800cef8 <USB_FlushRxFifo>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccca:	461a      	mov	r2, r3
 800cccc:	2300      	movs	r3, #0
 800ccce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	2300      	movs	r3, #0
 800ccda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce2:	461a      	mov	r2, r3
 800cce4:	2300      	movs	r3, #0
 800cce6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cce8:	2300      	movs	r3, #0
 800ccea:	613b      	str	r3, [r7, #16]
 800ccec:	e043      	b.n	800cd76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd04:	d118      	bne.n	800cd38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd18:	461a      	mov	r2, r3
 800cd1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	e013      	b.n	800cd4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	015a      	lsls	r2, r3, #5
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	4413      	add	r3, r2
 800cd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd2e:	461a      	mov	r2, r3
 800cd30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	e008      	b.n	800cd4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	015a      	lsls	r2, r3, #5
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4413      	add	r3, r2
 800cd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd44:	461a      	mov	r2, r3
 800cd46:	2300      	movs	r3, #0
 800cd48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	015a      	lsls	r2, r3, #5
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	4413      	add	r3, r2
 800cd52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd56:	461a      	mov	r2, r3
 800cd58:	2300      	movs	r3, #0
 800cd5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	461a      	mov	r2, r3
 800cd6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	3301      	adds	r3, #1
 800cd74:	613b      	str	r3, [r7, #16]
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d3b7      	bcc.n	800ccee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd7e:	2300      	movs	r3, #0
 800cd80:	613b      	str	r3, [r7, #16]
 800cd82:	e043      	b.n	800ce0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd9a:	d118      	bne.n	800cdce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10a      	bne.n	800cdb8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdae:	461a      	mov	r2, r3
 800cdb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	e013      	b.n	800cde0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	015a      	lsls	r2, r3, #5
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cdca:	6013      	str	r3, [r2, #0]
 800cdcc:	e008      	b.n	800cde0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	015a      	lsls	r2, r3, #5
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdda:	461a      	mov	r2, r3
 800cddc:	2300      	movs	r3, #0
 800cdde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdec:	461a      	mov	r2, r3
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	015a      	lsls	r2, r3, #5
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d3b7      	bcc.n	800cd84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ce34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d105      	bne.n	800ce48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	699b      	ldr	r3, [r3, #24]
 800ce40:	f043 0210 	orr.w	r2, r3, #16
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	699a      	ldr	r2, [r3, #24]
 800ce4c:	4b0e      	ldr	r3, [pc, #56]	; (800ce88 <USB_DevInit+0x2b4>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d005      	beq.n	800ce66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	f043 0208 	orr.w	r2, r3, #8
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ce66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d105      	bne.n	800ce78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	699a      	ldr	r2, [r3, #24]
 800ce70:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <USB_DevInit+0x2b8>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce84:	b004      	add	sp, #16
 800ce86:	4770      	bx	lr
 800ce88:	803c3800 	.word	0x803c3800
 800ce8c:	40000004 	.word	0x40000004

0800ce90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3301      	adds	r3, #1
 800cea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	4a13      	ldr	r2, [pc, #76]	; (800cef4 <USB_FlushTxFifo+0x64>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d901      	bls.n	800ceb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ceac:	2303      	movs	r3, #3
 800ceae:	e01b      	b.n	800cee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	daf2      	bge.n	800ce9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	019b      	lsls	r3, r3, #6
 800cec0:	f043 0220 	orr.w	r2, r3, #32
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3301      	adds	r3, #1
 800cecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	4a08      	ldr	r2, [pc, #32]	; (800cef4 <USB_FlushTxFifo+0x64>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d901      	bls.n	800ceda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ced6:	2303      	movs	r3, #3
 800ced8:	e006      	b.n	800cee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	f003 0320 	and.w	r3, r3, #32
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	d0f0      	beq.n	800cec8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	00030d40 	.word	0x00030d40

0800cef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf00:	2300      	movs	r3, #0
 800cf02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	3301      	adds	r3, #1
 800cf08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	4a11      	ldr	r2, [pc, #68]	; (800cf54 <USB_FlushRxFifo+0x5c>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d901      	bls.n	800cf16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e018      	b.n	800cf48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	691b      	ldr	r3, [r3, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	daf2      	bge.n	800cf04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2210      	movs	r2, #16
 800cf26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	4a08      	ldr	r2, [pc, #32]	; (800cf54 <USB_FlushRxFifo+0x5c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d901      	bls.n	800cf3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e006      	b.n	800cf48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	f003 0310 	and.w	r3, r3, #16
 800cf42:	2b10      	cmp	r3, #16
 800cf44:	d0f0      	beq.n	800cf28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	00030d40 	.word	0x00030d40

0800cf58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	68f9      	ldr	r1, [r7, #12]
 800cf74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b087      	sub	sp, #28
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	f003 0306 	and.w	r3, r3, #6
 800cfa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
 800cfae:	e00a      	b.n	800cfc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d002      	beq.n	800cfbc <USB_GetDevSpeed+0x32>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2b06      	cmp	r3, #6
 800cfba:	d102      	bne.n	800cfc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	75fb      	strb	r3, [r7, #23]
 800cfc0:	e001      	b.n	800cfc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cfc2:	230f      	movs	r3, #15
 800cfc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	371c      	adds	r7, #28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	785b      	ldrb	r3, [r3, #1]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d139      	bne.n	800d064 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff6:	69da      	ldr	r2, [r3, #28]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	f003 030f 	and.w	r3, r3, #15
 800d000:	2101      	movs	r1, #1
 800d002:	fa01 f303 	lsl.w	r3, r1, r3
 800d006:	b29b      	uxth	r3, r3
 800d008:	68f9      	ldr	r1, [r7, #12]
 800d00a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d00e:	4313      	orrs	r3, r2
 800d010:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	015a      	lsls	r2, r3, #5
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	4413      	add	r3, r2
 800d01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d153      	bne.n	800d0d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	015a      	lsls	r2, r3, #5
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4413      	add	r3, r2
 800d030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	791b      	ldrb	r3, [r3, #4]
 800d042:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d044:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	059b      	lsls	r3, r3, #22
 800d04a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d04c:	431a      	orrs	r2, r3
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	0159      	lsls	r1, r3, #5
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	440b      	add	r3, r1
 800d056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d05a:	4619      	mov	r1, r3
 800d05c:	4b20      	ldr	r3, [pc, #128]	; (800d0e0 <USB_ActivateEndpoint+0x10c>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	600b      	str	r3, [r1, #0]
 800d062:	e035      	b.n	800d0d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d06a:	69da      	ldr	r2, [r3, #28]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	f003 030f 	and.w	r3, r3, #15
 800d074:	2101      	movs	r1, #1
 800d076:	fa01 f303 	lsl.w	r3, r1, r3
 800d07a:	041b      	lsls	r3, r3, #16
 800d07c:	68f9      	ldr	r1, [r7, #12]
 800d07e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d082:	4313      	orrs	r3, r2
 800d084:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	015a      	lsls	r2, r3, #5
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	4413      	add	r3, r2
 800d08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d119      	bne.n	800d0d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	791b      	ldrb	r3, [r3, #4]
 800d0b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d0b8:	430b      	orrs	r3, r1
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	0159      	lsls	r1, r3, #5
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	440b      	add	r3, r1
 800d0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <USB_ActivateEndpoint+0x10c>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	10008000 	.word	0x10008000

0800d0e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	785b      	ldrb	r3, [r3, #1]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d161      	bne.n	800d1c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d116:	d11f      	bne.n	800d158 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	0151      	lsls	r1, r2, #5
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	440a      	add	r2, r1
 800d12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d136:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	015a      	lsls	r2, r3, #5
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	4413      	add	r3, r2
 800d140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	0151      	lsls	r1, r2, #5
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	440a      	add	r2, r1
 800d14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	f003 030f 	and.w	r3, r3, #15
 800d168:	2101      	movs	r1, #1
 800d16a:	fa01 f303 	lsl.w	r3, r1, r3
 800d16e:	b29b      	uxth	r3, r3
 800d170:	43db      	mvns	r3, r3
 800d172:	68f9      	ldr	r1, [r7, #12]
 800d174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d178:	4013      	ands	r3, r2
 800d17a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d182:	69da      	ldr	r2, [r3, #28]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	f003 030f 	and.w	r3, r3, #15
 800d18c:	2101      	movs	r1, #1
 800d18e:	fa01 f303 	lsl.w	r3, r1, r3
 800d192:	b29b      	uxth	r3, r3
 800d194:	43db      	mvns	r3, r3
 800d196:	68f9      	ldr	r1, [r7, #12]
 800d198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d19c:	4013      	ands	r3, r2
 800d19e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	0159      	lsls	r1, r3, #5
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	440b      	add	r3, r1
 800d1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	4b35      	ldr	r3, [pc, #212]	; (800d294 <USB_DeactivateEndpoint+0x1b0>)
 800d1be:	4013      	ands	r3, r2
 800d1c0:	600b      	str	r3, [r1, #0]
 800d1c2:	e060      	b.n	800d286 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1da:	d11f      	bne.n	800d21c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	015a      	lsls	r2, r3, #5
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	0151      	lsls	r1, r2, #5
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	440a      	add	r2, r1
 800d1f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	0151      	lsls	r1, r2, #5
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	440a      	add	r2, r1
 800d212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d21a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f003 030f 	and.w	r3, r3, #15
 800d22c:	2101      	movs	r1, #1
 800d22e:	fa01 f303 	lsl.w	r3, r1, r3
 800d232:	041b      	lsls	r3, r3, #16
 800d234:	43db      	mvns	r3, r3
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d23c:	4013      	ands	r3, r2
 800d23e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d246:	69da      	ldr	r2, [r3, #28]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	f003 030f 	and.w	r3, r3, #15
 800d250:	2101      	movs	r1, #1
 800d252:	fa01 f303 	lsl.w	r3, r1, r3
 800d256:	041b      	lsls	r3, r3, #16
 800d258:	43db      	mvns	r3, r3
 800d25a:	68f9      	ldr	r1, [r7, #12]
 800d25c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d260:	4013      	ands	r3, r2
 800d262:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	015a      	lsls	r2, r3, #5
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	4413      	add	r3, r2
 800d26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	0159      	lsls	r1, r3, #5
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	440b      	add	r3, r1
 800d27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27e:	4619      	mov	r1, r3
 800d280:	4b05      	ldr	r3, [pc, #20]	; (800d298 <USB_DeactivateEndpoint+0x1b4>)
 800d282:	4013      	ands	r3, r2
 800d284:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	ec337800 	.word	0xec337800
 800d298:	eff37800 	.word	0xeff37800

0800d29c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08a      	sub	sp, #40	; 0x28
 800d2a0:	af02      	add	r7, sp, #8
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	f040 8181 	bne.w	800d5c0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d132      	bne.n	800d32c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	015a      	lsls	r2, r3, #5
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d2:	691a      	ldr	r2, [r3, #16]
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	0159      	lsls	r1, r3, #5
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	440b      	add	r3, r1
 800d2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4ba5      	ldr	r3, [pc, #660]	; (800d578 <USB_EPStartXfer+0x2dc>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	69ba      	ldr	r2, [r7, #24]
 800d2f8:	0151      	lsls	r1, r2, #5
 800d2fa:	69fa      	ldr	r2, [r7, #28]
 800d2fc:	440a      	add	r2, r1
 800d2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d314:	691a      	ldr	r2, [r3, #16]
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	0159      	lsls	r1, r3, #5
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	440b      	add	r3, r1
 800d31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d322:	4619      	mov	r1, r3
 800d324:	4b95      	ldr	r3, [pc, #596]	; (800d57c <USB_EPStartXfer+0x2e0>)
 800d326:	4013      	ands	r3, r2
 800d328:	610b      	str	r3, [r1, #16]
 800d32a:	e092      	b.n	800d452 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	015a      	lsls	r2, r3, #5
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	4413      	add	r3, r2
 800d334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d338:	691a      	ldr	r2, [r3, #16]
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	0159      	lsls	r1, r3, #5
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	440b      	add	r3, r1
 800d342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d346:	4619      	mov	r1, r3
 800d348:	4b8c      	ldr	r3, [pc, #560]	; (800d57c <USB_EPStartXfer+0x2e0>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	015a      	lsls	r2, r3, #5
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	4413      	add	r3, r2
 800d356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d35a:	691a      	ldr	r2, [r3, #16]
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	0159      	lsls	r1, r3, #5
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	440b      	add	r3, r1
 800d364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d368:	4619      	mov	r1, r3
 800d36a:	4b83      	ldr	r3, [pc, #524]	; (800d578 <USB_EPStartXfer+0x2dc>)
 800d36c:	4013      	ands	r3, r2
 800d36e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d11a      	bne.n	800d3ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	691a      	ldr	r2, [r3, #16]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d903      	bls.n	800d38a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	689a      	ldr	r2, [r3, #8]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	015a      	lsls	r2, r3, #5
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4413      	add	r3, r2
 800d392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	69ba      	ldr	r2, [r7, #24]
 800d39a:	0151      	lsls	r1, r2, #5
 800d39c:	69fa      	ldr	r2, [r7, #28]
 800d39e:	440a      	add	r2, r1
 800d3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3a8:	6113      	str	r3, [r2, #16]
 800d3aa:	e01b      	b.n	800d3e4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6919      	ldr	r1, [r3, #16]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	440b      	add	r3, r1
 800d3c4:	1e59      	subs	r1, r3, #1
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800d3ce:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d3d0:	4b6b      	ldr	r3, [pc, #428]	; (800d580 <USB_EPStartXfer+0x2e4>)
 800d3d2:	400b      	ands	r3, r1
 800d3d4:	69b9      	ldr	r1, [r7, #24]
 800d3d6:	0148      	lsls	r0, r1, #5
 800d3d8:	69f9      	ldr	r1, [r7, #28]
 800d3da:	4401      	add	r1, r0
 800d3dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f0:	691a      	ldr	r2, [r3, #16]
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3fa:	69b9      	ldr	r1, [r7, #24]
 800d3fc:	0148      	lsls	r0, r1, #5
 800d3fe:	69f9      	ldr	r1, [r7, #28]
 800d400:	4401      	add	r1, r0
 800d402:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d406:	4313      	orrs	r3, r2
 800d408:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	791b      	ldrb	r3, [r3, #4]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d11f      	bne.n	800d452 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	015a      	lsls	r2, r3, #5
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	4413      	add	r3, r2
 800d41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	69ba      	ldr	r2, [r7, #24]
 800d422:	0151      	lsls	r1, r2, #5
 800d424:	69fa      	ldr	r2, [r7, #28]
 800d426:	440a      	add	r2, r1
 800d428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d42c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d430:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	015a      	lsls	r2, r3, #5
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	4413      	add	r3, r2
 800d43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	0151      	lsls	r1, r2, #5
 800d444:	69fa      	ldr	r2, [r7, #28]
 800d446:	440a      	add	r2, r1
 800d448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d44c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d450:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d14b      	bne.n	800d4f0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	69db      	ldr	r3, [r3, #28]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d009      	beq.n	800d474 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	461a      	mov	r2, r3
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	69db      	ldr	r3, [r3, #28]
 800d472:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	791b      	ldrb	r3, [r3, #4]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d128      	bne.n	800d4ce <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d110      	bne.n	800d4ae <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	4413      	add	r3, r2
 800d494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	0151      	lsls	r1, r2, #5
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	440a      	add	r2, r1
 800d4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	e00f      	b.n	800d4ce <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	015a      	lsls	r2, r3, #5
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	69ba      	ldr	r2, [r7, #24]
 800d4be:	0151      	lsls	r1, r2, #5
 800d4c0:	69fa      	ldr	r2, [r7, #28]
 800d4c2:	440a      	add	r2, r1
 800d4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	015a      	lsls	r2, r3, #5
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	0151      	lsls	r1, r2, #5
 800d4e0:	69fa      	ldr	r2, [r7, #28]
 800d4e2:	440a      	add	r2, r1
 800d4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	e16a      	b.n	800d7c6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69ba      	ldr	r2, [r7, #24]
 800d500:	0151      	lsls	r1, r2, #5
 800d502:	69fa      	ldr	r2, [r7, #28]
 800d504:	440a      	add	r2, r1
 800d506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d50a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d50e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	791b      	ldrb	r3, [r3, #4]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d015      	beq.n	800d544 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 8152 	beq.w	800d7c6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	f003 030f 	and.w	r3, r3, #15
 800d532:	2101      	movs	r1, #1
 800d534:	fa01 f303 	lsl.w	r3, r1, r3
 800d538:	69f9      	ldr	r1, [r7, #28]
 800d53a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d53e:	4313      	orrs	r3, r2
 800d540:	634b      	str	r3, [r1, #52]	; 0x34
 800d542:	e140      	b.n	800d7c6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d550:	2b00      	cmp	r3, #0
 800d552:	d117      	bne.n	800d584 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	015a      	lsls	r2, r3, #5
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	4413      	add	r3, r2
 800d55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	0151      	lsls	r1, r2, #5
 800d566:	69fa      	ldr	r2, [r7, #28]
 800d568:	440a      	add	r2, r1
 800d56a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d56e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d572:	6013      	str	r3, [r2, #0]
 800d574:	e016      	b.n	800d5a4 <USB_EPStartXfer+0x308>
 800d576:	bf00      	nop
 800d578:	e007ffff 	.word	0xe007ffff
 800d57c:	fff80000 	.word	0xfff80000
 800d580:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	015a      	lsls	r2, r3, #5
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	4413      	add	r3, r2
 800d58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	0151      	lsls	r1, r2, #5
 800d596:	69fa      	ldr	r2, [r7, #28]
 800d598:	440a      	add	r2, r1
 800d59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d59e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	68d9      	ldr	r1, [r3, #12]
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	781a      	ldrb	r2, [r3, #0]
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	b298      	uxth	r0, r3
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f000 f9b9 	bl	800d930 <USB_WritePacket>
 800d5be:	e102      	b.n	800d7c6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5cc:	691a      	ldr	r2, [r3, #16]
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	0159      	lsls	r1, r3, #5
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	440b      	add	r3, r1
 800d5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5da:	4619      	mov	r1, r3
 800d5dc:	4b7c      	ldr	r3, [pc, #496]	; (800d7d0 <USB_EPStartXfer+0x534>)
 800d5de:	4013      	ands	r3, r2
 800d5e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ee:	691a      	ldr	r2, [r3, #16]
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	0159      	lsls	r1, r3, #5
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	440b      	add	r3, r1
 800d5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4b75      	ldr	r3, [pc, #468]	; (800d7d4 <USB_EPStartXfer+0x538>)
 800d600:	4013      	ands	r3, r2
 800d602:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d12f      	bne.n	800d66a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	689a      	ldr	r2, [r3, #8]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	689a      	ldr	r2, [r3, #8]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62e:	691a      	ldr	r2, [r3, #16]
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	6a1b      	ldr	r3, [r3, #32]
 800d634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d638:	69b9      	ldr	r1, [r7, #24]
 800d63a:	0148      	lsls	r0, r1, #5
 800d63c:	69f9      	ldr	r1, [r7, #28]
 800d63e:	4401      	add	r1, r0
 800d640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d644:	4313      	orrs	r3, r2
 800d646:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	015a      	lsls	r2, r3, #5
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	4413      	add	r3, r2
 800d650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	69ba      	ldr	r2, [r7, #24]
 800d658:	0151      	lsls	r1, r2, #5
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	440a      	add	r2, r1
 800d65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d666:	6113      	str	r3, [r2, #16]
 800d668:	e05f      	b.n	800d72a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d123      	bne.n	800d6ba <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	015a      	lsls	r2, r3, #5
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	4413      	add	r3, r2
 800d67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d67e:	691a      	ldr	r2, [r3, #16]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d688:	69b9      	ldr	r1, [r7, #24]
 800d68a:	0148      	lsls	r0, r1, #5
 800d68c:	69f9      	ldr	r1, [r7, #28]
 800d68e:	4401      	add	r1, r0
 800d690:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d694:	4313      	orrs	r3, r2
 800d696:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	015a      	lsls	r2, r3, #5
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	4413      	add	r3, r2
 800d6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	0151      	lsls	r1, r2, #5
 800d6aa:	69fa      	ldr	r2, [r7, #28]
 800d6ac:	440a      	add	r2, r1
 800d6ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6b6:	6113      	str	r3, [r2, #16]
 800d6b8:	e037      	b.n	800d72a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	691a      	ldr	r2, [r3, #16]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	1e5a      	subs	r2, r3, #1
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ce:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	8afa      	ldrh	r2, [r7, #22]
 800d6d6:	fb03 f202 	mul.w	r2, r3, r2
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ea:	691a      	ldr	r2, [r3, #16]
 800d6ec:	8afb      	ldrh	r3, [r7, #22]
 800d6ee:	04d9      	lsls	r1, r3, #19
 800d6f0:	4b39      	ldr	r3, [pc, #228]	; (800d7d8 <USB_EPStartXfer+0x53c>)
 800d6f2:	400b      	ands	r3, r1
 800d6f4:	69b9      	ldr	r1, [r7, #24]
 800d6f6:	0148      	lsls	r0, r1, #5
 800d6f8:	69f9      	ldr	r1, [r7, #28]
 800d6fa:	4401      	add	r1, r0
 800d6fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d700:	4313      	orrs	r3, r2
 800d702:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d710:	691a      	ldr	r2, [r3, #16]
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d71a:	69b9      	ldr	r1, [r7, #24]
 800d71c:	0148      	lsls	r0, r1, #5
 800d71e:	69f9      	ldr	r1, [r7, #28]
 800d720:	4401      	add	r1, r0
 800d722:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d726:	4313      	orrs	r3, r2
 800d728:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d72a:	79fb      	ldrb	r3, [r7, #7]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d10d      	bne.n	800d74c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	68d9      	ldr	r1, [r3, #12]
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	015a      	lsls	r2, r3, #5
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	4413      	add	r3, r2
 800d744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d748:	460a      	mov	r2, r1
 800d74a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	791b      	ldrb	r3, [r3, #4]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d128      	bne.n	800d7a6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d760:	2b00      	cmp	r3, #0
 800d762:	d110      	bne.n	800d786 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	69ba      	ldr	r2, [r7, #24]
 800d774:	0151      	lsls	r1, r2, #5
 800d776:	69fa      	ldr	r2, [r7, #28]
 800d778:	440a      	add	r2, r1
 800d77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d77e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	e00f      	b.n	800d7a6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	015a      	lsls	r2, r3, #5
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	4413      	add	r3, r2
 800d78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	69ba      	ldr	r2, [r7, #24]
 800d796:	0151      	lsls	r1, r2, #5
 800d798:	69fa      	ldr	r2, [r7, #28]
 800d79a:	440a      	add	r2, r1
 800d79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7a4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	69ba      	ldr	r2, [r7, #24]
 800d7b6:	0151      	lsls	r1, r2, #5
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	440a      	add	r2, r1
 800d7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3720      	adds	r7, #32
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	fff80000 	.word	0xfff80000
 800d7d4:	e007ffff 	.word	0xe007ffff
 800d7d8:	1ff80000 	.word	0x1ff80000

0800d7dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b087      	sub	sp, #28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	785b      	ldrb	r3, [r3, #1]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d14a      	bne.n	800d890 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	4413      	add	r3, r2
 800d804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d80e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d812:	f040 8086 	bne.w	800d922 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	015a      	lsls	r2, r3, #5
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	4413      	add	r3, r2
 800d820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	7812      	ldrb	r2, [r2, #0]
 800d82a:	0151      	lsls	r1, r2, #5
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	440a      	add	r2, r1
 800d830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d838:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	015a      	lsls	r2, r3, #5
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	4413      	add	r3, r2
 800d844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	7812      	ldrb	r2, [r2, #0]
 800d84e:	0151      	lsls	r1, r2, #5
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	440a      	add	r2, r1
 800d854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d85c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f242 7210 	movw	r2, #10000	; 0x2710
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d902      	bls.n	800d874 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	75fb      	strb	r3, [r7, #23]
          break;
 800d872:	e056      	b.n	800d922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	015a      	lsls	r2, r3, #5
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	4413      	add	r3, r2
 800d87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d88c:	d0e7      	beq.n	800d85e <USB_EPStopXfer+0x82>
 800d88e:	e048      	b.n	800d922 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8a8:	d13b      	bne.n	800d922 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	015a      	lsls	r2, r3, #5
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	7812      	ldrb	r2, [r2, #0]
 800d8be:	0151      	lsls	r1, r2, #5
 800d8c0:	693a      	ldr	r2, [r7, #16]
 800d8c2:	440a      	add	r2, r1
 800d8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d8cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	015a      	lsls	r2, r3, #5
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	683a      	ldr	r2, [r7, #0]
 800d8e0:	7812      	ldrb	r2, [r2, #0]
 800d8e2:	0151      	lsls	r1, r2, #5
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	440a      	add	r2, r1
 800d8e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d8f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d902      	bls.n	800d908 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d902:	2301      	movs	r3, #1
 800d904:	75fb      	strb	r3, [r7, #23]
          break;
 800d906:	e00c      	b.n	800d922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	4413      	add	r3, r2
 800d912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d91c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d920:	d0e7      	beq.n	800d8f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
}
 800d924:	4618      	mov	r0, r3
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d930:	b480      	push	{r7}
 800d932:	b089      	sub	sp, #36	; 0x24
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	4611      	mov	r1, r2
 800d93c:	461a      	mov	r2, r3
 800d93e:	460b      	mov	r3, r1
 800d940:	71fb      	strb	r3, [r7, #7]
 800d942:	4613      	mov	r3, r2
 800d944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d94e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d952:	2b00      	cmp	r3, #0
 800d954:	d123      	bne.n	800d99e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d956:	88bb      	ldrh	r3, [r7, #4]
 800d958:	3303      	adds	r3, #3
 800d95a:	089b      	lsrs	r3, r3, #2
 800d95c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d95e:	2300      	movs	r3, #0
 800d960:	61bb      	str	r3, [r7, #24]
 800d962:	e018      	b.n	800d996 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	031a      	lsls	r2, r3, #12
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	4413      	add	r3, r2
 800d96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d970:	461a      	mov	r2, r3
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	3301      	adds	r3, #1
 800d97c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	3301      	adds	r3, #1
 800d982:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	3301      	adds	r3, #1
 800d988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	3301      	adds	r3, #1
 800d98e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	3301      	adds	r3, #1
 800d994:	61bb      	str	r3, [r7, #24]
 800d996:	69ba      	ldr	r2, [r7, #24]
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d3e2      	bcc.n	800d964 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3724      	adds	r7, #36	; 0x24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b08b      	sub	sp, #44	; 0x2c
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d9c2:	88fb      	ldrh	r3, [r7, #6]
 800d9c4:	089b      	lsrs	r3, r3, #2
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d9ca:	88fb      	ldrh	r3, [r7, #6]
 800d9cc:	f003 0303 	and.w	r3, r3, #3
 800d9d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	623b      	str	r3, [r7, #32]
 800d9d6:	e014      	b.n	800da02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	3301      	adds	r3, #1
 800da00:	623b      	str	r3, [r7, #32]
 800da02:	6a3a      	ldr	r2, [r7, #32]
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	429a      	cmp	r2, r3
 800da08:	d3e6      	bcc.n	800d9d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800da0a:	8bfb      	ldrh	r3, [r7, #30]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d01e      	beq.n	800da4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800da10:	2300      	movs	r3, #0
 800da12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da1a:	461a      	mov	r2, r3
 800da1c:	f107 0310 	add.w	r3, r7, #16
 800da20:	6812      	ldr	r2, [r2, #0]
 800da22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	fa22 f303 	lsr.w	r3, r2, r3
 800da30:	b2da      	uxtb	r2, r3
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	701a      	strb	r2, [r3, #0]
      i++;
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	3301      	adds	r3, #1
 800da3a:	623b      	str	r3, [r7, #32]
      pDest++;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	3301      	adds	r3, #1
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800da42:	8bfb      	ldrh	r3, [r7, #30]
 800da44:	3b01      	subs	r3, #1
 800da46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800da48:	8bfb      	ldrh	r3, [r7, #30]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1ea      	bne.n	800da24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da50:	4618      	mov	r0, r3
 800da52:	372c      	adds	r7, #44	; 0x2c
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	785b      	ldrb	r3, [r3, #1]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d12c      	bne.n	800dad2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	015a      	lsls	r2, r3, #5
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4413      	add	r3, r2
 800da80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	db12      	blt.n	800dab0 <USB_EPSetStall+0x54>
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00f      	beq.n	800dab0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	015a      	lsls	r2, r3, #5
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4413      	add	r3, r2
 800da98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	0151      	lsls	r1, r2, #5
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	440a      	add	r2, r1
 800daa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800daae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	015a      	lsls	r2, r3, #5
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	4413      	add	r3, r2
 800dab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	0151      	lsls	r1, r2, #5
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	440a      	add	r2, r1
 800dac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	e02b      	b.n	800db2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	015a      	lsls	r2, r3, #5
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	4413      	add	r3, r2
 800dada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	db12      	blt.n	800db0a <USB_EPSetStall+0xae>
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00f      	beq.n	800db0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	015a      	lsls	r2, r3, #5
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	0151      	lsls	r1, r2, #5
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	440a      	add	r2, r1
 800db00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	015a      	lsls	r2, r3, #5
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	4413      	add	r3, r2
 800db12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	0151      	lsls	r1, r2, #5
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	440a      	add	r2, r1
 800db20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d128      	bne.n	800dba6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	0151      	lsls	r1, r2, #5
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	440a      	add	r2, r1
 800db6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	791b      	ldrb	r3, [r3, #4]
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d003      	beq.n	800db84 <USB_EPClearStall+0x4c>
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	791b      	ldrb	r3, [r3, #4]
 800db80:	2b02      	cmp	r3, #2
 800db82:	d138      	bne.n	800dbf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	015a      	lsls	r2, r3, #5
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	4413      	add	r3, r2
 800db8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	68ba      	ldr	r2, [r7, #8]
 800db94:	0151      	lsls	r1, r2, #5
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	440a      	add	r2, r1
 800db9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	e027      	b.n	800dbf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	015a      	lsls	r2, r3, #5
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	4413      	add	r3, r2
 800dbae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	0151      	lsls	r1, r2, #5
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	440a      	add	r2, r1
 800dbbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dbc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	791b      	ldrb	r3, [r3, #4]
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d003      	beq.n	800dbd6 <USB_EPClearStall+0x9e>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	791b      	ldrb	r3, [r3, #4]
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	d10f      	bne.n	800dbf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	0151      	lsls	r1, r2, #5
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	440a      	add	r2, r1
 800dbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dc26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	011b      	lsls	r3, r3, #4
 800dc34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dc38:	68f9      	ldr	r1, [r7, #12]
 800dc3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc6a:	f023 0303 	bic.w	r3, r3, #3
 800dc6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc7e:	f023 0302 	bic.w	r3, r3, #2
 800dc82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b085      	sub	sp, #20
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dcac:	f023 0303 	bic.w	r3, r3, #3
 800dcb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcc0:	f043 0302 	orr.w	r3, r3, #2
 800dcc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	695b      	ldr	r3, [r3, #20]
 800dce0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	4013      	ands	r3, r2
 800dcea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dcec:	68fb      	ldr	r3, [r7, #12]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dcfa:	b480      	push	{r7}
 800dcfc:	b085      	sub	sp, #20
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd0c:	699b      	ldr	r3, [r3, #24]
 800dd0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd16:	69db      	ldr	r3, [r3, #28]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	4013      	ands	r3, r2
 800dd1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	0c1b      	lsrs	r3, r3, #16
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr

0800dd2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b085      	sub	sp, #20
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd4a:	69db      	ldr	r3, [r3, #28]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	4013      	ands	r3, r2
 800dd50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	b29b      	uxth	r3, r3
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b085      	sub	sp, #20
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd72:	78fb      	ldrb	r3, [r7, #3]
 800dd74:	015a      	lsls	r2, r3, #5
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	4413      	add	r3, r2
 800dd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dd90:	68bb      	ldr	r3, [r7, #8]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd9e:	b480      	push	{r7}
 800dda0:	b087      	sub	sp, #28
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	460b      	mov	r3, r1
 800dda8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ddc2:	78fb      	ldrb	r3, [r7, #3]
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	fa22 f303 	lsr.w	r3, r2, r3
 800ddce:	01db      	lsls	r3, r3, #7
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	693a      	ldr	r2, [r7, #16]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	015a      	lsls	r2, r3, #5
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	4413      	add	r3, r2
 800dde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	693a      	ldr	r2, [r7, #16]
 800dde8:	4013      	ands	r3, r2
 800ddea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ddec:	68bb      	ldr	r3, [r7, #8]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	371c      	adds	r7, #28
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	f003 0301 	and.w	r3, r3, #1
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
	...

0800de18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de32:	4619      	mov	r1, r3
 800de34:	4b09      	ldr	r3, [pc, #36]	; (800de5c <USB_ActivateSetup+0x44>)
 800de36:	4013      	ands	r3, r2
 800de38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3714      	adds	r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	fffff800 	.word	0xfffff800

0800de60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	460b      	mov	r3, r1
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	333c      	adds	r3, #60	; 0x3c
 800de76:	3304      	adds	r3, #4
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	4a26      	ldr	r2, [pc, #152]	; (800df18 <USB_EP0_OutStart+0xb8>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d90a      	bls.n	800de9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de94:	d101      	bne.n	800de9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	e037      	b.n	800df0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea0:	461a      	mov	r2, r3
 800dea2:	2300      	movs	r3, #0
 800dea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	697a      	ldr	r2, [r7, #20]
 800deb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800deb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dec8:	f043 0318 	orr.w	r3, r3, #24
 800decc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dedc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dee0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dee2:	7afb      	ldrb	r3, [r7, #11]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d10f      	bne.n	800df08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deee:	461a      	mov	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800df06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	4f54300a 	.word	0x4f54300a

0800df1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3301      	adds	r3, #1
 800df2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	4a13      	ldr	r2, [pc, #76]	; (800df80 <USB_CoreReset+0x64>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d901      	bls.n	800df3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800df36:	2303      	movs	r3, #3
 800df38:	e01b      	b.n	800df72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	daf2      	bge.n	800df28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df42:	2300      	movs	r3, #0
 800df44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	f043 0201 	orr.w	r2, r3, #1
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3301      	adds	r3, #1
 800df56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4a09      	ldr	r2, [pc, #36]	; (800df80 <USB_CoreReset+0x64>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d901      	bls.n	800df64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e006      	b.n	800df72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d0f0      	beq.n	800df52 <USB_CoreReset+0x36>

  return HAL_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	00030d40 	.word	0x00030d40

0800df84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df94:	f002 ff3e 	bl	8010e14 <USBD_static_malloc>
 800df98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d109      	bne.n	800dfb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	32b0      	adds	r2, #176	; 0xb0
 800dfaa:	2100      	movs	r1, #0
 800dfac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	e0d4      	b.n	800e15e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dfb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dfb8:	2100      	movs	r1, #0
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f003 fe13 	bl	8011be6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	32b0      	adds	r2, #176	; 0xb0
 800dfca:	68f9      	ldr	r1, [r7, #12]
 800dfcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	32b0      	adds	r2, #176	; 0xb0
 800dfda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7c1b      	ldrb	r3, [r3, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d138      	bne.n	800e05e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dfec:	4b5e      	ldr	r3, [pc, #376]	; (800e168 <USBD_CDC_Init+0x1e4>)
 800dfee:	7819      	ldrb	r1, [r3, #0]
 800dff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dff4:	2202      	movs	r2, #2
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f002 fde9 	bl	8010bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dffc:	4b5a      	ldr	r3, [pc, #360]	; (800e168 <USBD_CDC_Init+0x1e4>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 020f 	and.w	r2, r3, #15
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	3324      	adds	r3, #36	; 0x24
 800e012:	2201      	movs	r2, #1
 800e014:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e016:	4b55      	ldr	r3, [pc, #340]	; (800e16c <USBD_CDC_Init+0x1e8>)
 800e018:	7819      	ldrb	r1, [r3, #0]
 800e01a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e01e:	2202      	movs	r2, #2
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f002 fdd4 	bl	8010bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e026:	4b51      	ldr	r3, [pc, #324]	; (800e16c <USBD_CDC_Init+0x1e8>)
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	f003 020f 	and.w	r2, r3, #15
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	440b      	add	r3, r1
 800e03a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e03e:	2201      	movs	r2, #1
 800e040:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e042:	4b4b      	ldr	r3, [pc, #300]	; (800e170 <USBD_CDC_Init+0x1ec>)
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	f003 020f 	and.w	r2, r3, #15
 800e04a:	6879      	ldr	r1, [r7, #4]
 800e04c:	4613      	mov	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	440b      	add	r3, r1
 800e056:	3326      	adds	r3, #38	; 0x26
 800e058:	2210      	movs	r2, #16
 800e05a:	801a      	strh	r2, [r3, #0]
 800e05c:	e035      	b.n	800e0ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e05e:	4b42      	ldr	r3, [pc, #264]	; (800e168 <USBD_CDC_Init+0x1e4>)
 800e060:	7819      	ldrb	r1, [r3, #0]
 800e062:	2340      	movs	r3, #64	; 0x40
 800e064:	2202      	movs	r2, #2
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f002 fdb1 	bl	8010bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e06c:	4b3e      	ldr	r3, [pc, #248]	; (800e168 <USBD_CDC_Init+0x1e4>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	f003 020f 	and.w	r2, r3, #15
 800e074:	6879      	ldr	r1, [r7, #4]
 800e076:	4613      	mov	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	440b      	add	r3, r1
 800e080:	3324      	adds	r3, #36	; 0x24
 800e082:	2201      	movs	r2, #1
 800e084:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e086:	4b39      	ldr	r3, [pc, #228]	; (800e16c <USBD_CDC_Init+0x1e8>)
 800e088:	7819      	ldrb	r1, [r3, #0]
 800e08a:	2340      	movs	r3, #64	; 0x40
 800e08c:	2202      	movs	r2, #2
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f002 fd9d 	bl	8010bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e094:	4b35      	ldr	r3, [pc, #212]	; (800e16c <USBD_CDC_Init+0x1e8>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f003 020f 	and.w	r2, r3, #15
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4413      	add	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	440b      	add	r3, r1
 800e0a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e0b0:	4b2f      	ldr	r3, [pc, #188]	; (800e170 <USBD_CDC_Init+0x1ec>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 020f 	and.w	r2, r3, #15
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	440b      	add	r3, r1
 800e0c4:	3326      	adds	r3, #38	; 0x26
 800e0c6:	2210      	movs	r2, #16
 800e0c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0ca:	4b29      	ldr	r3, [pc, #164]	; (800e170 <USBD_CDC_Init+0x1ec>)
 800e0cc:	7819      	ldrb	r1, [r3, #0]
 800e0ce:	2308      	movs	r3, #8
 800e0d0:	2203      	movs	r2, #3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f002 fd7b 	bl	8010bce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e0d8:	4b25      	ldr	r3, [pc, #148]	; (800e170 <USBD_CDC_Init+0x1ec>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f003 020f 	and.w	r2, r3, #15
 800e0e0:	6879      	ldr	r1, [r7, #4]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3324      	adds	r3, #36	; 0x24
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	33b0      	adds	r3, #176	; 0xb0
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4413      	add	r3, r2
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e128:	2302      	movs	r3, #2
 800e12a:	e018      	b.n	800e15e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	7c1b      	ldrb	r3, [r3, #16]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10a      	bne.n	800e14a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e134:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <USBD_CDC_Init+0x1e8>)
 800e136:	7819      	ldrb	r1, [r3, #0]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e13e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f002 fe32 	bl	8010dac <USBD_LL_PrepareReceive>
 800e148:	e008      	b.n	800e15c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e14a:	4b08      	ldr	r3, [pc, #32]	; (800e16c <USBD_CDC_Init+0x1e8>)
 800e14c:	7819      	ldrb	r1, [r3, #0]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e154:	2340      	movs	r3, #64	; 0x40
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f002 fe28 	bl	8010dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	2400009b 	.word	0x2400009b
 800e16c:	2400009c 	.word	0x2400009c
 800e170:	2400009d 	.word	0x2400009d

0800e174 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	460b      	mov	r3, r1
 800e17e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e180:	4b3a      	ldr	r3, [pc, #232]	; (800e26c <USBD_CDC_DeInit+0xf8>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	4619      	mov	r1, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f002 fd47 	bl	8010c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e18c:	4b37      	ldr	r3, [pc, #220]	; (800e26c <USBD_CDC_DeInit+0xf8>)
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	f003 020f 	and.w	r2, r3, #15
 800e194:	6879      	ldr	r1, [r7, #4]
 800e196:	4613      	mov	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	4413      	add	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	440b      	add	r3, r1
 800e1a0:	3324      	adds	r3, #36	; 0x24
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e1a6:	4b32      	ldr	r3, [pc, #200]	; (800e270 <USBD_CDC_DeInit+0xfc>)
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f002 fd34 	bl	8010c1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e1b2:	4b2f      	ldr	r3, [pc, #188]	; (800e270 <USBD_CDC_DeInit+0xfc>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	f003 020f 	and.w	r2, r3, #15
 800e1ba:	6879      	ldr	r1, [r7, #4]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4413      	add	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	440b      	add	r3, r1
 800e1c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e1ce:	4b29      	ldr	r3, [pc, #164]	; (800e274 <USBD_CDC_DeInit+0x100>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f002 fd20 	bl	8010c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e1da:	4b26      	ldr	r3, [pc, #152]	; (800e274 <USBD_CDC_DeInit+0x100>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	f003 020f 	and.w	r2, r3, #15
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	4413      	add	r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	440b      	add	r3, r1
 800e1ee:	3324      	adds	r3, #36	; 0x24
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e1f4:	4b1f      	ldr	r3, [pc, #124]	; (800e274 <USBD_CDC_DeInit+0x100>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	f003 020f 	and.w	r2, r3, #15
 800e1fc:	6879      	ldr	r1, [r7, #4]
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	440b      	add	r3, r1
 800e208:	3326      	adds	r3, #38	; 0x26
 800e20a:	2200      	movs	r2, #0
 800e20c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	32b0      	adds	r2, #176	; 0xb0
 800e218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d01f      	beq.n	800e260 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	33b0      	adds	r3, #176	; 0xb0
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	32b0      	adds	r2, #176	; 0xb0
 800e23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e242:	4618      	mov	r0, r3
 800e244:	f002 fdf4 	bl	8010e30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	32b0      	adds	r2, #176	; 0xb0
 800e252:	2100      	movs	r1, #0
 800e254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	2400009b 	.word	0x2400009b
 800e270:	2400009c 	.word	0x2400009c
 800e274:	2400009d 	.word	0x2400009d

0800e278 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	32b0      	adds	r2, #176	; 0xb0
 800e28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e290:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e296:	2300      	movs	r3, #0
 800e298:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	e0bf      	b.n	800e428 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d050      	beq.n	800e356 <USBD_CDC_Setup+0xde>
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	f040 80af 	bne.w	800e418 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	88db      	ldrh	r3, [r3, #6]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d03a      	beq.n	800e338 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	b25b      	sxtb	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	da1b      	bge.n	800e304 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	33b0      	adds	r3, #176	; 0xb0
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	683a      	ldr	r2, [r7, #0]
 800e2e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e2e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e2e4:	683a      	ldr	r2, [r7, #0]
 800e2e6:	88d2      	ldrh	r2, [r2, #6]
 800e2e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	88db      	ldrh	r3, [r3, #6]
 800e2ee:	2b07      	cmp	r3, #7
 800e2f0:	bf28      	it	cs
 800e2f2:	2307      	movcs	r3, #7
 800e2f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	89fa      	ldrh	r2, [r7, #14]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f001 fdb3 	bl	800fe68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e302:	e090      	b.n	800e426 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	785a      	ldrb	r2, [r3, #1]
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	88db      	ldrh	r3, [r3, #6]
 800e312:	2b3f      	cmp	r3, #63	; 0x3f
 800e314:	d803      	bhi.n	800e31e <USBD_CDC_Setup+0xa6>
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	88db      	ldrh	r3, [r3, #6]
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	e000      	b.n	800e320 <USBD_CDC_Setup+0xa8>
 800e31e:	2240      	movs	r2, #64	; 0x40
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e326:	6939      	ldr	r1, [r7, #16]
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e32e:	461a      	mov	r2, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f001 fdc5 	bl	800fec0 <USBD_CtlPrepareRx>
      break;
 800e336:	e076      	b.n	800e426 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	33b0      	adds	r3, #176	; 0xb0
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	7850      	ldrb	r0, [r2, #1]
 800e34e:	2200      	movs	r2, #0
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	4798      	blx	r3
      break;
 800e354:	e067      	b.n	800e426 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	785b      	ldrb	r3, [r3, #1]
 800e35a:	2b0b      	cmp	r3, #11
 800e35c:	d851      	bhi.n	800e402 <USBD_CDC_Setup+0x18a>
 800e35e:	a201      	add	r2, pc, #4	; (adr r2, 800e364 <USBD_CDC_Setup+0xec>)
 800e360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e364:	0800e395 	.word	0x0800e395
 800e368:	0800e411 	.word	0x0800e411
 800e36c:	0800e403 	.word	0x0800e403
 800e370:	0800e403 	.word	0x0800e403
 800e374:	0800e403 	.word	0x0800e403
 800e378:	0800e403 	.word	0x0800e403
 800e37c:	0800e403 	.word	0x0800e403
 800e380:	0800e403 	.word	0x0800e403
 800e384:	0800e403 	.word	0x0800e403
 800e388:	0800e403 	.word	0x0800e403
 800e38c:	0800e3bf 	.word	0x0800e3bf
 800e390:	0800e3e9 	.word	0x0800e3e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d107      	bne.n	800e3b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e3a0:	f107 030a 	add.w	r3, r7, #10
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f001 fd5d 	bl	800fe68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e3ae:	e032      	b.n	800e416 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 fce7 	bl	800fd86 <USBD_CtlError>
            ret = USBD_FAIL;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	75fb      	strb	r3, [r7, #23]
          break;
 800e3bc:	e02b      	b.n	800e416 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b03      	cmp	r3, #3
 800e3c8:	d107      	bne.n	800e3da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e3ca:	f107 030d 	add.w	r3, r7, #13
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f001 fd48 	bl	800fe68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e3d8:	e01d      	b.n	800e416 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f001 fcd2 	bl	800fd86 <USBD_CtlError>
            ret = USBD_FAIL;
 800e3e2:	2303      	movs	r3, #3
 800e3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800e3e6:	e016      	b.n	800e416 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b03      	cmp	r3, #3
 800e3f2:	d00f      	beq.n	800e414 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e3f4:	6839      	ldr	r1, [r7, #0]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fcc5 	bl	800fd86 <USBD_CtlError>
            ret = USBD_FAIL;
 800e3fc:	2303      	movs	r3, #3
 800e3fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e400:	e008      	b.n	800e414 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f001 fcbe 	bl	800fd86 <USBD_CtlError>
          ret = USBD_FAIL;
 800e40a:	2303      	movs	r3, #3
 800e40c:	75fb      	strb	r3, [r7, #23]
          break;
 800e40e:	e002      	b.n	800e416 <USBD_CDC_Setup+0x19e>
          break;
 800e410:	bf00      	nop
 800e412:	e008      	b.n	800e426 <USBD_CDC_Setup+0x1ae>
          break;
 800e414:	bf00      	nop
      }
      break;
 800e416:	e006      	b.n	800e426 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e418:	6839      	ldr	r1, [r7, #0]
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f001 fcb3 	bl	800fd86 <USBD_CtlError>
      ret = USBD_FAIL;
 800e420:	2303      	movs	r3, #3
 800e422:	75fb      	strb	r3, [r7, #23]
      break;
 800e424:	bf00      	nop
  }

  return (uint8_t)ret;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	32b0      	adds	r2, #176	; 0xb0
 800e44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e456:	2303      	movs	r3, #3
 800e458:	e065      	b.n	800e526 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	32b0      	adds	r2, #176	; 0xb0
 800e464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e468:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e46a:	78fb      	ldrb	r3, [r7, #3]
 800e46c:	f003 020f 	and.w	r2, r3, #15
 800e470:	6879      	ldr	r1, [r7, #4]
 800e472:	4613      	mov	r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	440b      	add	r3, r1
 800e47c:	3318      	adds	r3, #24
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d02f      	beq.n	800e4e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	f003 020f 	and.w	r2, r3, #15
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	3318      	adds	r3, #24
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	78fb      	ldrb	r3, [r7, #3]
 800e49c:	f003 010f 	and.w	r1, r3, #15
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	440b      	add	r3, r1
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4403      	add	r3, r0
 800e4ac:	3344      	adds	r3, #68	; 0x44
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e4b4:	fb01 f303 	mul.w	r3, r1, r3
 800e4b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d112      	bne.n	800e4e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e4be:	78fb      	ldrb	r3, [r7, #3]
 800e4c0:	f003 020f 	and.w	r2, r3, #15
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	440b      	add	r3, r1
 800e4d0:	3318      	adds	r3, #24
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e4d6:	78f9      	ldrb	r1, [r7, #3]
 800e4d8:	2300      	movs	r3, #0
 800e4da:	2200      	movs	r2, #0
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f002 fc44 	bl	8010d6a <USBD_LL_Transmit>
 800e4e2:	e01f      	b.n	800e524 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	33b0      	adds	r3, #176	; 0xb0
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4413      	add	r3, r2
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d010      	beq.n	800e524 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	33b0      	adds	r3, #176	; 0xb0
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e520:	78fa      	ldrb	r2, [r7, #3]
 800e522:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b084      	sub	sp, #16
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	460b      	mov	r3, r1
 800e538:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	32b0      	adds	r2, #176	; 0xb0
 800e544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e548:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	32b0      	adds	r2, #176	; 0xb0
 800e554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e55c:	2303      	movs	r3, #3
 800e55e:	e01a      	b.n	800e596 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f002 fc42 	bl	8010dee <USBD_LL_GetRxDataSize>
 800e56a:	4602      	mov	r2, r0
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	33b0      	adds	r3, #176	; 0xb0
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	4413      	add	r3, r2
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e590:	4611      	mov	r1, r2
 800e592:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b084      	sub	sp, #16
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	32b0      	adds	r2, #176	; 0xb0
 800e5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d101      	bne.n	800e5c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5bc:	2303      	movs	r3, #3
 800e5be:	e025      	b.n	800e60c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	33b0      	adds	r3, #176	; 0xb0
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d01a      	beq.n	800e60a <USBD_CDC_EP0_RxReady+0x6c>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e5da:	2bff      	cmp	r3, #255	; 0xff
 800e5dc:	d015      	beq.n	800e60a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	33b0      	adds	r3, #176	; 0xb0
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4413      	add	r3, r2
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e5f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e5fe:	b292      	uxth	r2, r2
 800e600:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	22ff      	movs	r2, #255	; 0xff
 800e606:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e61c:	2182      	movs	r1, #130	; 0x82
 800e61e:	4818      	ldr	r0, [pc, #96]	; (800e680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e620:	f000 fd4f 	bl	800f0c2 <USBD_GetEpDesc>
 800e624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e626:	2101      	movs	r1, #1
 800e628:	4815      	ldr	r0, [pc, #84]	; (800e680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e62a:	f000 fd4a 	bl	800f0c2 <USBD_GetEpDesc>
 800e62e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e630:	2181      	movs	r1, #129	; 0x81
 800e632:	4813      	ldr	r0, [pc, #76]	; (800e680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e634:	f000 fd45 	bl	800f0c2 <USBD_GetEpDesc>
 800e638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2210      	movs	r2, #16
 800e644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d006      	beq.n	800e65a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	2200      	movs	r2, #0
 800e650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e654:	711a      	strb	r2, [r3, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d006      	beq.n	800e66e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e668:	711a      	strb	r2, [r3, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2243      	movs	r2, #67	; 0x43
 800e672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e674:	4b02      	ldr	r3, [pc, #8]	; (800e680 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e676:	4618      	mov	r0, r3
 800e678:	3718      	adds	r7, #24
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	24000058 	.word	0x24000058

0800e684 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e68c:	2182      	movs	r1, #130	; 0x82
 800e68e:	4818      	ldr	r0, [pc, #96]	; (800e6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e690:	f000 fd17 	bl	800f0c2 <USBD_GetEpDesc>
 800e694:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e696:	2101      	movs	r1, #1
 800e698:	4815      	ldr	r0, [pc, #84]	; (800e6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e69a:	f000 fd12 	bl	800f0c2 <USBD_GetEpDesc>
 800e69e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e6a0:	2181      	movs	r1, #129	; 0x81
 800e6a2:	4813      	ldr	r0, [pc, #76]	; (800e6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e6a4:	f000 fd0d 	bl	800f0c2 <USBD_GetEpDesc>
 800e6a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2210      	movs	r2, #16
 800e6b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d006      	beq.n	800e6ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	711a      	strb	r2, [r3, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f042 0202 	orr.w	r2, r2, #2
 800e6c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d006      	beq.n	800e6de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	711a      	strb	r2, [r3, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f042 0202 	orr.w	r2, r2, #2
 800e6dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2243      	movs	r2, #67	; 0x43
 800e6e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e6e4:	4b02      	ldr	r3, [pc, #8]	; (800e6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	24000058 	.word	0x24000058

0800e6f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e6fc:	2182      	movs	r1, #130	; 0x82
 800e6fe:	4818      	ldr	r0, [pc, #96]	; (800e760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e700:	f000 fcdf 	bl	800f0c2 <USBD_GetEpDesc>
 800e704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e706:	2101      	movs	r1, #1
 800e708:	4815      	ldr	r0, [pc, #84]	; (800e760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e70a:	f000 fcda 	bl	800f0c2 <USBD_GetEpDesc>
 800e70e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e710:	2181      	movs	r1, #129	; 0x81
 800e712:	4813      	ldr	r0, [pc, #76]	; (800e760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e714:	f000 fcd5 	bl	800f0c2 <USBD_GetEpDesc>
 800e718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	2210      	movs	r2, #16
 800e724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d006      	beq.n	800e73a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	2200      	movs	r2, #0
 800e730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e734:	711a      	strb	r2, [r3, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d006      	beq.n	800e74e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e748:	711a      	strb	r2, [r3, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2243      	movs	r2, #67	; 0x43
 800e752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e754:	4b02      	ldr	r3, [pc, #8]	; (800e760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	24000058 	.word	0x24000058

0800e764 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	220a      	movs	r2, #10
 800e770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e772:	4b03      	ldr	r3, [pc, #12]	; (800e780 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	24000014 	.word	0x24000014

0800e784 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d101      	bne.n	800e798 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e794:	2303      	movs	r3, #3
 800e796:	e009      	b.n	800e7ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	33b0      	adds	r3, #176	; 0xb0
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	32b0      	adds	r2, #176	; 0xb0
 800e7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d101      	bne.n	800e7de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e7da:	2303      	movs	r3, #3
 800e7dc:	e008      	b.n	800e7f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	371c      	adds	r7, #28
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	32b0      	adds	r2, #176	; 0xb0
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d101      	bne.n	800e820 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e81c:	2303      	movs	r3, #3
 800e81e:	e004      	b.n	800e82a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
	...

0800e838 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	32b0      	adds	r2, #176	; 0xb0
 800e84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e84e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e850:	2301      	movs	r3, #1
 800e852:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d101      	bne.n	800e85e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e85a:	2303      	movs	r3, #3
 800e85c:	e025      	b.n	800e8aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e864:	2b00      	cmp	r3, #0
 800e866:	d11f      	bne.n	800e8a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e870:	4b10      	ldr	r3, [pc, #64]	; (800e8b4 <USBD_CDC_TransmitPacket+0x7c>)
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	f003 020f 	and.w	r2, r3, #15
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4403      	add	r3, r0
 800e88a:	3318      	adds	r3, #24
 800e88c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e88e:	4b09      	ldr	r3, [pc, #36]	; (800e8b4 <USBD_CDC_TransmitPacket+0x7c>)
 800e890:	7819      	ldrb	r1, [r3, #0]
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f002 fa63 	bl	8010d6a <USBD_LL_Transmit>

    ret = USBD_OK;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	2400009b 	.word	0x2400009b

0800e8b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	32b0      	adds	r2, #176	; 0xb0
 800e8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	32b0      	adds	r2, #176	; 0xb0
 800e8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	e018      	b.n	800e918 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	7c1b      	ldrb	r3, [r3, #16]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10a      	bne.n	800e904 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <USBD_CDC_ReceivePacket+0x68>)
 800e8f0:	7819      	ldrb	r1, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f002 fa55 	bl	8010dac <USBD_LL_PrepareReceive>
 800e902:	e008      	b.n	800e916 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e904:	4b06      	ldr	r3, [pc, #24]	; (800e920 <USBD_CDC_ReceivePacket+0x68>)
 800e906:	7819      	ldrb	r1, [r3, #0]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e90e:	2340      	movs	r3, #64	; 0x40
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f002 fa4b 	bl	8010dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	2400009c 	.word	0x2400009c

0800e924 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e938:	2303      	movs	r3, #3
 800e93a:	e01f      	b.n	800e97c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2200      	movs	r2, #0
 800e940:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	79fa      	ldrb	r2, [r7, #7]
 800e96e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f002 f8c1 	bl	8010af8 <USBD_LL_Init>
 800e976:	4603      	mov	r3, r0
 800e978:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e98e:	2300      	movs	r3, #0
 800e990:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e998:	2303      	movs	r3, #3
 800e99a:	e025      	b.n	800e9e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	32ae      	adds	r2, #174	; 0xae
 800e9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00f      	beq.n	800e9d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	32ae      	adds	r2, #174	; 0xae
 800e9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c8:	f107 020e 	add.w	r2, r7, #14
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	4798      	blx	r3
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e9de:	1c5a      	adds	r2, r3, #1
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3710      	adds	r7, #16
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f002 f8cd 	bl	8010b98 <USBD_LL_Start>
 800e9fe:	4603      	mov	r3, r0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b084      	sub	sp, #16
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	460b      	mov	r3, r1
 800ea28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d009      	beq.n	800ea4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	78fa      	ldrb	r2, [r7, #3]
 800ea42:	4611      	mov	r1, r2
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	4798      	blx	r3
 800ea48:	4603      	mov	r3, r0
 800ea4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ea4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3710      	adds	r7, #16
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b084      	sub	sp, #16
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	460b      	mov	r3, r1
 800ea60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea62:	2300      	movs	r3, #0
 800ea64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	78fa      	ldrb	r2, [r7, #3]
 800ea70:	4611      	mov	r1, r2
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	4798      	blx	r3
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d001      	beq.n	800ea80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b084      	sub	sp, #16
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
 800ea92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f001 f938 	bl	800fd12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eab0:	461a      	mov	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eabe:	f003 031f 	and.w	r3, r3, #31
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d01a      	beq.n	800eafc <USBD_LL_SetupStage+0x72>
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d822      	bhi.n	800eb10 <USBD_LL_SetupStage+0x86>
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <USBD_LL_SetupStage+0x4a>
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d00a      	beq.n	800eae8 <USBD_LL_SetupStage+0x5e>
 800ead2:	e01d      	b.n	800eb10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eada:	4619      	mov	r1, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fb65 	bl	800f1ac <USBD_StdDevReq>
 800eae2:	4603      	mov	r3, r0
 800eae4:	73fb      	strb	r3, [r7, #15]
      break;
 800eae6:	e020      	b.n	800eb2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fbcd 	bl	800f290 <USBD_StdItfReq>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73fb      	strb	r3, [r7, #15]
      break;
 800eafa:	e016      	b.n	800eb2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb02:	4619      	mov	r1, r3
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fc2f 	bl	800f368 <USBD_StdEPReq>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	73fb      	strb	r3, [r7, #15]
      break;
 800eb0e:	e00c      	b.n	800eb2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f002 f89a 	bl	8010c58 <USBD_LL_StallEP>
 800eb24:	4603      	mov	r3, r0
 800eb26:	73fb      	strb	r3, [r7, #15]
      break;
 800eb28:	bf00      	nop
  }

  return ret;
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eb46:	7afb      	ldrb	r3, [r7, #11]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d16e      	bne.n	800ec2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eb52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb5a:	2b03      	cmp	r3, #3
 800eb5c:	f040 8098 	bne.w	800ec90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	689a      	ldr	r2, [r3, #8]
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d913      	bls.n	800eb94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	689a      	ldr	r2, [r3, #8]
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	1ad2      	subs	r2, r2, r3
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	4293      	cmp	r3, r2
 800eb84:	bf28      	it	cs
 800eb86:	4613      	movcs	r3, r2
 800eb88:	461a      	mov	r2, r3
 800eb8a:	6879      	ldr	r1, [r7, #4]
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f001 f9b4 	bl	800fefa <USBD_CtlContinueRx>
 800eb92:	e07d      	b.n	800ec90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb9a:	f003 031f 	and.w	r3, r3, #31
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	d014      	beq.n	800ebcc <USBD_LL_DataOutStage+0x98>
 800eba2:	2b02      	cmp	r3, #2
 800eba4:	d81d      	bhi.n	800ebe2 <USBD_LL_DataOutStage+0xae>
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <USBD_LL_DataOutStage+0x7c>
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d003      	beq.n	800ebb6 <USBD_LL_DataOutStage+0x82>
 800ebae:	e018      	b.n	800ebe2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	75bb      	strb	r3, [r7, #22]
            break;
 800ebb4:	e018      	b.n	800ebe8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f000 fa64 	bl	800f08e <USBD_CoreFindIF>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	75bb      	strb	r3, [r7, #22]
            break;
 800ebca:	e00d      	b.n	800ebe8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f000 fa66 	bl	800f0a8 <USBD_CoreFindEP>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	75bb      	strb	r3, [r7, #22]
            break;
 800ebe0:	e002      	b.n	800ebe8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	75bb      	strb	r3, [r7, #22]
            break;
 800ebe6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ebe8:	7dbb      	ldrb	r3, [r7, #22]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d119      	bne.n	800ec22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d113      	bne.n	800ec22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ebfa:	7dba      	ldrb	r2, [r7, #22]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	32ae      	adds	r2, #174	; 0xae
 800ec00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00b      	beq.n	800ec22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ec0a:	7dba      	ldrb	r2, [r7, #22]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ec12:	7dba      	ldrb	r2, [r7, #22]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	32ae      	adds	r2, #174	; 0xae
 800ec18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f001 f97a 	bl	800ff1c <USBD_CtlSendStatus>
 800ec28:	e032      	b.n	800ec90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ec2a:	7afb      	ldrb	r3, [r7, #11]
 800ec2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	4619      	mov	r1, r3
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 fa37 	bl	800f0a8 <USBD_CoreFindEP>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec3e:	7dbb      	ldrb	r3, [r7, #22]
 800ec40:	2bff      	cmp	r3, #255	; 0xff
 800ec42:	d025      	beq.n	800ec90 <USBD_LL_DataOutStage+0x15c>
 800ec44:	7dbb      	ldrb	r3, [r7, #22]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d122      	bne.n	800ec90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d117      	bne.n	800ec86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ec56:	7dba      	ldrb	r2, [r7, #22]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	32ae      	adds	r2, #174	; 0xae
 800ec5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec60:	699b      	ldr	r3, [r3, #24]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00f      	beq.n	800ec86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ec66:	7dba      	ldrb	r2, [r7, #22]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ec6e:	7dba      	ldrb	r2, [r7, #22]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	32ae      	adds	r2, #174	; 0xae
 800ec74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	7afa      	ldrb	r2, [r7, #11]
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	4798      	blx	r3
 800ec82:	4603      	mov	r3, r0
 800ec84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
 800ec8e:	e000      	b.n	800ec92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ec90:	2300      	movs	r3, #0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3718      	adds	r7, #24
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b086      	sub	sp, #24
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	60f8      	str	r0, [r7, #12]
 800eca2:	460b      	mov	r3, r1
 800eca4:	607a      	str	r2, [r7, #4]
 800eca6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eca8:	7afb      	ldrb	r3, [r7, #11]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d16f      	bne.n	800ed8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	3314      	adds	r3, #20
 800ecb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	d15a      	bne.n	800ed74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	689a      	ldr	r2, [r3, #8]
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d914      	bls.n	800ecf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	689a      	ldr	r2, [r3, #8]
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	1ad2      	subs	r2, r2, r3
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	461a      	mov	r2, r3
 800ecde:	6879      	ldr	r1, [r7, #4]
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f001 f8dc 	bl	800fe9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ece6:	2300      	movs	r3, #0
 800ece8:	2200      	movs	r2, #0
 800ecea:	2100      	movs	r1, #0
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f002 f85d 	bl	8010dac <USBD_LL_PrepareReceive>
 800ecf2:	e03f      	b.n	800ed74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	68da      	ldr	r2, [r3, #12]
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d11c      	bne.n	800ed3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d316      	bcc.n	800ed3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d20f      	bcs.n	800ed3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f001 f8bd 	bl	800fe9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	2200      	movs	r2, #0
 800ed30:	2100      	movs	r1, #0
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f002 f83a 	bl	8010dac <USBD_LL_PrepareReceive>
 800ed38:	e01c      	b.n	800ed74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	d10f      	bne.n	800ed66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d009      	beq.n	800ed66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed66:	2180      	movs	r1, #128	; 0x80
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f001 ff75 	bl	8010c58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f001 f8e7 	bl	800ff42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d03a      	beq.n	800edf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f7ff fe42 	bl	800ea08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ed8c:	e032      	b.n	800edf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ed8e:	7afb      	ldrb	r3, [r7, #11]
 800ed90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	4619      	mov	r1, r3
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f000 f985 	bl	800f0a8 <USBD_CoreFindEP>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
 800eda4:	2bff      	cmp	r3, #255	; 0xff
 800eda6:	d025      	beq.n	800edf4 <USBD_LL_DataInStage+0x15a>
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d122      	bne.n	800edf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d11c      	bne.n	800edf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800edba:	7dfa      	ldrb	r2, [r7, #23]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	32ae      	adds	r2, #174	; 0xae
 800edc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d014      	beq.n	800edf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800edca:	7dfa      	ldrb	r2, [r7, #23]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800edd2:	7dfa      	ldrb	r2, [r7, #23]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	32ae      	adds	r2, #174	; 0xae
 800edd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eddc:	695b      	ldr	r3, [r3, #20]
 800edde:	7afa      	ldrb	r2, [r7, #11]
 800ede0:	4611      	mov	r1, r2
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	4798      	blx	r3
 800ede6:	4603      	mov	r3, r0
 800ede8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800edea:	7dbb      	ldrb	r3, [r7, #22]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800edf0:	7dbb      	ldrb	r3, [r7, #22]
 800edf2:	e000      	b.n	800edf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3718      	adds	r7, #24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d014      	beq.n	800ee64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00e      	beq.n	800ee64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	6852      	ldr	r2, [r2, #4]
 800ee52:	b2d2      	uxtb	r2, r2
 800ee54:	4611      	mov	r1, r2
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	4798      	blx	r3
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ee60:	2303      	movs	r3, #3
 800ee62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee64:	2340      	movs	r3, #64	; 0x40
 800ee66:	2200      	movs	r2, #0
 800ee68:	2100      	movs	r1, #0
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f001 feaf 	bl	8010bce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2240      	movs	r2, #64	; 0x40
 800ee7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee80:	2340      	movs	r3, #64	; 0x40
 800ee82:	2200      	movs	r2, #0
 800ee84:	2180      	movs	r1, #128	; 0x80
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f001 fea1 	bl	8010bce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2240      	movs	r2, #64	; 0x40
 800ee96:	621a      	str	r2, [r3, #32]

  return ret;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eea2:	b480      	push	{r7}
 800eea4:	b083      	sub	sp, #12
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
 800eeaa:	460b      	mov	r3, r1
 800eeac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	78fa      	ldrb	r2, [r7, #3]
 800eeb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	d006      	beq.n	800eee4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2204      	movs	r2, #4
 800eee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	370c      	adds	r7, #12
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eefa:	b480      	push	{r7}
 800eefc:	b083      	sub	sp, #12
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b04      	cmp	r3, #4
 800ef0c:	d106      	bne.n	800ef1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	370c      	adds	r7, #12
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b03      	cmp	r3, #3
 800ef3c:	d110      	bne.n	800ef60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00b      	beq.n	800ef60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef4e:	69db      	ldr	r3, [r3, #28]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d005      	beq.n	800ef60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef5a:	69db      	ldr	r3, [r3, #28]
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b082      	sub	sp, #8
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	32ae      	adds	r2, #174	; 0xae
 800ef80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d101      	bne.n	800ef8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e01c      	b.n	800efc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b03      	cmp	r3, #3
 800ef96:	d115      	bne.n	800efc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	32ae      	adds	r2, #174	; 0xae
 800efa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efa6:	6a1b      	ldr	r3, [r3, #32]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00b      	beq.n	800efc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	32ae      	adds	r2, #174	; 0xae
 800efb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efba:	6a1b      	ldr	r3, [r3, #32]
 800efbc:	78fa      	ldrb	r2, [r7, #3]
 800efbe:	4611      	mov	r1, r2
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	460b      	mov	r3, r1
 800efd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	32ae      	adds	r2, #174	; 0xae
 800efe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800efec:	2303      	movs	r3, #3
 800efee:	e01c      	b.n	800f02a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	2b03      	cmp	r3, #3
 800effa:	d115      	bne.n	800f028 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	32ae      	adds	r2, #174	; 0xae
 800f006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00b      	beq.n	800f028 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	32ae      	adds	r2, #174	; 0xae
 800f01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f020:	78fa      	ldrb	r2, [r7, #3]
 800f022:	4611      	mov	r1, r2
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f032:	b480      	push	{r7}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00e      	beq.n	800f084 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	6852      	ldr	r2, [r2, #4]
 800f072:	b2d2      	uxtb	r2, r2
 800f074:	4611      	mov	r1, r2
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	4798      	blx	r3
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d001      	beq.n	800f084 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f080:	2303      	movs	r3, #3
 800f082:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f084:	7bfb      	ldrb	r3, [r7, #15]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f08e:	b480      	push	{r7}
 800f090:	b083      	sub	sp, #12
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	460b      	mov	r3, r1
 800f098:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f09a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f0b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b086      	sub	sp, #24
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	885b      	ldrh	r3, [r3, #2]
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d920      	bls.n	800f12c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f0f2:	e013      	b.n	800f11c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f0f4:	f107 030a 	add.w	r3, r7, #10
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	6978      	ldr	r0, [r7, #20]
 800f0fc:	f000 f81b 	bl	800f136 <USBD_GetNextDesc>
 800f100:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	785b      	ldrb	r3, [r3, #1]
 800f106:	2b05      	cmp	r3, #5
 800f108:	d108      	bne.n	800f11c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	789b      	ldrb	r3, [r3, #2]
 800f112:	78fa      	ldrb	r2, [r7, #3]
 800f114:	429a      	cmp	r2, r3
 800f116:	d008      	beq.n	800f12a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f118:	2300      	movs	r3, #0
 800f11a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	885b      	ldrh	r3, [r3, #2]
 800f120:	b29a      	uxth	r2, r3
 800f122:	897b      	ldrh	r3, [r7, #10]
 800f124:	429a      	cmp	r2, r3
 800f126:	d8e5      	bhi.n	800f0f4 <USBD_GetEpDesc+0x32>
 800f128:	e000      	b.n	800f12c <USBD_GetEpDesc+0x6a>
          break;
 800f12a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f12c:	693b      	ldr	r3, [r7, #16]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f136:	b480      	push	{r7}
 800f138:	b085      	sub	sp, #20
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
 800f13e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	881a      	ldrh	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	4413      	add	r3, r2
 800f150:	b29a      	uxth	r2, r3
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	461a      	mov	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4413      	add	r3, r2
 800f160:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f162:	68fb      	ldr	r3, [r7, #12]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f170:	b480      	push	{r7}
 800f172:	b087      	sub	sp, #28
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	3301      	adds	r3, #1
 800f186:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f18e:	8a3b      	ldrh	r3, [r7, #16]
 800f190:	021b      	lsls	r3, r3, #8
 800f192:	b21a      	sxth	r2, r3
 800f194:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f198:	4313      	orrs	r3, r2
 800f19a:	b21b      	sxth	r3, r3
 800f19c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f19e:	89fb      	ldrh	r3, [r7, #14]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	371c      	adds	r7, #28
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1c2:	2b40      	cmp	r3, #64	; 0x40
 800f1c4:	d005      	beq.n	800f1d2 <USBD_StdDevReq+0x26>
 800f1c6:	2b40      	cmp	r3, #64	; 0x40
 800f1c8:	d857      	bhi.n	800f27a <USBD_StdDevReq+0xce>
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00f      	beq.n	800f1ee <USBD_StdDevReq+0x42>
 800f1ce:	2b20      	cmp	r3, #32
 800f1d0:	d153      	bne.n	800f27a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	32ae      	adds	r2, #174	; 0xae
 800f1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	4798      	blx	r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f1ec:	e04a      	b.n	800f284 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	785b      	ldrb	r3, [r3, #1]
 800f1f2:	2b09      	cmp	r3, #9
 800f1f4:	d83b      	bhi.n	800f26e <USBD_StdDevReq+0xc2>
 800f1f6:	a201      	add	r2, pc, #4	; (adr r2, 800f1fc <USBD_StdDevReq+0x50>)
 800f1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1fc:	0800f251 	.word	0x0800f251
 800f200:	0800f265 	.word	0x0800f265
 800f204:	0800f26f 	.word	0x0800f26f
 800f208:	0800f25b 	.word	0x0800f25b
 800f20c:	0800f26f 	.word	0x0800f26f
 800f210:	0800f22f 	.word	0x0800f22f
 800f214:	0800f225 	.word	0x0800f225
 800f218:	0800f26f 	.word	0x0800f26f
 800f21c:	0800f247 	.word	0x0800f247
 800f220:	0800f239 	.word	0x0800f239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fa3c 	bl	800f6a4 <USBD_GetDescriptor>
          break;
 800f22c:	e024      	b.n	800f278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f22e:	6839      	ldr	r1, [r7, #0]
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fbcb 	bl	800f9cc <USBD_SetAddress>
          break;
 800f236:	e01f      	b.n	800f278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fc0a 	bl	800fa54 <USBD_SetConfig>
 800f240:	4603      	mov	r3, r0
 800f242:	73fb      	strb	r3, [r7, #15]
          break;
 800f244:	e018      	b.n	800f278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fcad 	bl	800fba8 <USBD_GetConfig>
          break;
 800f24e:	e013      	b.n	800f278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fcde 	bl	800fc14 <USBD_GetStatus>
          break;
 800f258:	e00e      	b.n	800f278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f25a:	6839      	ldr	r1, [r7, #0]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 fd0d 	bl	800fc7c <USBD_SetFeature>
          break;
 800f262:	e009      	b.n	800f278 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fd31 	bl	800fcce <USBD_ClrFeature>
          break;
 800f26c:	e004      	b.n	800f278 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f26e:	6839      	ldr	r1, [r7, #0]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fd88 	bl	800fd86 <USBD_CtlError>
          break;
 800f276:	bf00      	nop
      }
      break;
 800f278:	e004      	b.n	800f284 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 fd82 	bl	800fd86 <USBD_CtlError>
      break;
 800f282:	bf00      	nop
  }

  return ret;
 800f284:	7bfb      	ldrb	r3, [r7, #15]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop

0800f290 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f29a:	2300      	movs	r3, #0
 800f29c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2a6:	2b40      	cmp	r3, #64	; 0x40
 800f2a8:	d005      	beq.n	800f2b6 <USBD_StdItfReq+0x26>
 800f2aa:	2b40      	cmp	r3, #64	; 0x40
 800f2ac:	d852      	bhi.n	800f354 <USBD_StdItfReq+0xc4>
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <USBD_StdItfReq+0x26>
 800f2b2:	2b20      	cmp	r3, #32
 800f2b4:	d14e      	bne.n	800f354 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d840      	bhi.n	800f346 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	889b      	ldrh	r3, [r3, #4]
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d836      	bhi.n	800f33c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	889b      	ldrh	r3, [r3, #4]
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fed9 	bl	800f08e <USBD_CoreFindIF>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2e0:	7bbb      	ldrb	r3, [r7, #14]
 800f2e2:	2bff      	cmp	r3, #255	; 0xff
 800f2e4:	d01d      	beq.n	800f322 <USBD_StdItfReq+0x92>
 800f2e6:	7bbb      	ldrb	r3, [r7, #14]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d11a      	bne.n	800f322 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f2ec:	7bba      	ldrb	r2, [r7, #14]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	32ae      	adds	r2, #174	; 0xae
 800f2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00f      	beq.n	800f31c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f2fc:	7bba      	ldrb	r2, [r7, #14]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f304:	7bba      	ldrb	r2, [r7, #14]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	32ae      	adds	r2, #174	; 0xae
 800f30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	4798      	blx	r3
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f31a:	e004      	b.n	800f326 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f31c:	2303      	movs	r3, #3
 800f31e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f320:	e001      	b.n	800f326 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f322:	2303      	movs	r3, #3
 800f324:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	88db      	ldrh	r3, [r3, #6]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d110      	bne.n	800f350 <USBD_StdItfReq+0xc0>
 800f32e:	7bfb      	ldrb	r3, [r7, #15]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10d      	bne.n	800f350 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fdf1 	bl	800ff1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f33a:	e009      	b.n	800f350 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fd21 	bl	800fd86 <USBD_CtlError>
          break;
 800f344:	e004      	b.n	800f350 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fd1c 	bl	800fd86 <USBD_CtlError>
          break;
 800f34e:	e000      	b.n	800f352 <USBD_StdItfReq+0xc2>
          break;
 800f350:	bf00      	nop
      }
      break;
 800f352:	e004      	b.n	800f35e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f354:	6839      	ldr	r1, [r7, #0]
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fd15 	bl	800fd86 <USBD_CtlError>
      break;
 800f35c:	bf00      	nop
  }

  return ret;
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	889b      	ldrh	r3, [r3, #4]
 800f37a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f384:	2b40      	cmp	r3, #64	; 0x40
 800f386:	d007      	beq.n	800f398 <USBD_StdEPReq+0x30>
 800f388:	2b40      	cmp	r3, #64	; 0x40
 800f38a:	f200 817f 	bhi.w	800f68c <USBD_StdEPReq+0x324>
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d02a      	beq.n	800f3e8 <USBD_StdEPReq+0x80>
 800f392:	2b20      	cmp	r3, #32
 800f394:	f040 817a 	bne.w	800f68c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f398:	7bbb      	ldrb	r3, [r7, #14]
 800f39a:	4619      	mov	r1, r3
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff fe83 	bl	800f0a8 <USBD_CoreFindEP>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3a6:	7b7b      	ldrb	r3, [r7, #13]
 800f3a8:	2bff      	cmp	r3, #255	; 0xff
 800f3aa:	f000 8174 	beq.w	800f696 <USBD_StdEPReq+0x32e>
 800f3ae:	7b7b      	ldrb	r3, [r7, #13]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	f040 8170 	bne.w	800f696 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f3b6:	7b7a      	ldrb	r2, [r7, #13]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f3be:	7b7a      	ldrb	r2, [r7, #13]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	32ae      	adds	r2, #174	; 0xae
 800f3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 8163 	beq.w	800f696 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f3d0:	7b7a      	ldrb	r2, [r7, #13]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	32ae      	adds	r2, #174	; 0xae
 800f3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	4798      	blx	r3
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f3e6:	e156      	b.n	800f696 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	785b      	ldrb	r3, [r3, #1]
 800f3ec:	2b03      	cmp	r3, #3
 800f3ee:	d008      	beq.n	800f402 <USBD_StdEPReq+0x9a>
 800f3f0:	2b03      	cmp	r3, #3
 800f3f2:	f300 8145 	bgt.w	800f680 <USBD_StdEPReq+0x318>
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f000 809b 	beq.w	800f532 <USBD_StdEPReq+0x1ca>
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d03c      	beq.n	800f47a <USBD_StdEPReq+0x112>
 800f400:	e13e      	b.n	800f680 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d002      	beq.n	800f414 <USBD_StdEPReq+0xac>
 800f40e:	2b03      	cmp	r3, #3
 800f410:	d016      	beq.n	800f440 <USBD_StdEPReq+0xd8>
 800f412:	e02c      	b.n	800f46e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f414:	7bbb      	ldrb	r3, [r7, #14]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00d      	beq.n	800f436 <USBD_StdEPReq+0xce>
 800f41a:	7bbb      	ldrb	r3, [r7, #14]
 800f41c:	2b80      	cmp	r3, #128	; 0x80
 800f41e:	d00a      	beq.n	800f436 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f420:	7bbb      	ldrb	r3, [r7, #14]
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 fc17 	bl	8010c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f42a:	2180      	movs	r1, #128	; 0x80
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f001 fc13 	bl	8010c58 <USBD_LL_StallEP>
 800f432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f434:	e020      	b.n	800f478 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fca4 	bl	800fd86 <USBD_CtlError>
              break;
 800f43e:	e01b      	b.n	800f478 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	885b      	ldrh	r3, [r3, #2]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d10e      	bne.n	800f466 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00b      	beq.n	800f466 <USBD_StdEPReq+0xfe>
 800f44e:	7bbb      	ldrb	r3, [r7, #14]
 800f450:	2b80      	cmp	r3, #128	; 0x80
 800f452:	d008      	beq.n	800f466 <USBD_StdEPReq+0xfe>
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	88db      	ldrh	r3, [r3, #6]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d104      	bne.n	800f466 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f45c:	7bbb      	ldrb	r3, [r7, #14]
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f001 fbf9 	bl	8010c58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fd58 	bl	800ff1c <USBD_CtlSendStatus>

              break;
 800f46c:	e004      	b.n	800f478 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 fc88 	bl	800fd86 <USBD_CtlError>
              break;
 800f476:	bf00      	nop
          }
          break;
 800f478:	e107      	b.n	800f68a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b02      	cmp	r3, #2
 800f484:	d002      	beq.n	800f48c <USBD_StdEPReq+0x124>
 800f486:	2b03      	cmp	r3, #3
 800f488:	d016      	beq.n	800f4b8 <USBD_StdEPReq+0x150>
 800f48a:	e04b      	b.n	800f524 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f48c:	7bbb      	ldrb	r3, [r7, #14]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00d      	beq.n	800f4ae <USBD_StdEPReq+0x146>
 800f492:	7bbb      	ldrb	r3, [r7, #14]
 800f494:	2b80      	cmp	r3, #128	; 0x80
 800f496:	d00a      	beq.n	800f4ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f498:	7bbb      	ldrb	r3, [r7, #14]
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f001 fbdb 	bl	8010c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4a2:	2180      	movs	r1, #128	; 0x80
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f001 fbd7 	bl	8010c58 <USBD_LL_StallEP>
 800f4aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4ac:	e040      	b.n	800f530 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fc68 	bl	800fd86 <USBD_CtlError>
              break;
 800f4b6:	e03b      	b.n	800f530 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	885b      	ldrh	r3, [r3, #2]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d136      	bne.n	800f52e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f4c0:	7bbb      	ldrb	r3, [r7, #14]
 800f4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d004      	beq.n	800f4d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f4ca:	7bbb      	ldrb	r3, [r7, #14]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f001 fbe1 	bl	8010c96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 fd21 	bl	800ff1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f4da:	7bbb      	ldrb	r3, [r7, #14]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7ff fde2 	bl	800f0a8 <USBD_CoreFindEP>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f4e8:	7b7b      	ldrb	r3, [r7, #13]
 800f4ea:	2bff      	cmp	r3, #255	; 0xff
 800f4ec:	d01f      	beq.n	800f52e <USBD_StdEPReq+0x1c6>
 800f4ee:	7b7b      	ldrb	r3, [r7, #13]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d11c      	bne.n	800f52e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f4f4:	7b7a      	ldrb	r2, [r7, #13]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f4fc:	7b7a      	ldrb	r2, [r7, #13]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	32ae      	adds	r2, #174	; 0xae
 800f502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d010      	beq.n	800f52e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f50c:	7b7a      	ldrb	r2, [r7, #13]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	32ae      	adds	r2, #174	; 0xae
 800f512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	4798      	blx	r3
 800f51e:	4603      	mov	r3, r0
 800f520:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f522:	e004      	b.n	800f52e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fc2d 	bl	800fd86 <USBD_CtlError>
              break;
 800f52c:	e000      	b.n	800f530 <USBD_StdEPReq+0x1c8>
              break;
 800f52e:	bf00      	nop
          }
          break;
 800f530:	e0ab      	b.n	800f68a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	2b02      	cmp	r3, #2
 800f53c:	d002      	beq.n	800f544 <USBD_StdEPReq+0x1dc>
 800f53e:	2b03      	cmp	r3, #3
 800f540:	d032      	beq.n	800f5a8 <USBD_StdEPReq+0x240>
 800f542:	e097      	b.n	800f674 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f544:	7bbb      	ldrb	r3, [r7, #14]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d007      	beq.n	800f55a <USBD_StdEPReq+0x1f2>
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
 800f54c:	2b80      	cmp	r3, #128	; 0x80
 800f54e:	d004      	beq.n	800f55a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fc17 	bl	800fd86 <USBD_CtlError>
                break;
 800f558:	e091      	b.n	800f67e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f55a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	da0b      	bge.n	800f57a <USBD_StdEPReq+0x212>
 800f562:	7bbb      	ldrb	r3, [r7, #14]
 800f564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f568:	4613      	mov	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	3310      	adds	r3, #16
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	4413      	add	r3, r2
 800f576:	3304      	adds	r3, #4
 800f578:	e00b      	b.n	800f592 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
 800f57c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f580:	4613      	mov	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4413      	add	r3, r2
 800f590:	3304      	adds	r3, #4
 800f592:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2200      	movs	r2, #0
 800f598:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2202      	movs	r2, #2
 800f59e:	4619      	mov	r1, r3
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 fc61 	bl	800fe68 <USBD_CtlSendData>
              break;
 800f5a6:	e06a      	b.n	800f67e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f5a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	da11      	bge.n	800f5d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f5b0:	7bbb      	ldrb	r3, [r7, #14]
 800f5b2:	f003 020f 	and.w	r2, r3, #15
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	4413      	add	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	440b      	add	r3, r1
 800f5c2:	3324      	adds	r3, #36	; 0x24
 800f5c4:	881b      	ldrh	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d117      	bne.n	800f5fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fbda 	bl	800fd86 <USBD_CtlError>
                  break;
 800f5d2:	e054      	b.n	800f67e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
 800f5d6:	f003 020f 	and.w	r2, r3, #15
 800f5da:	6879      	ldr	r1, [r7, #4]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	4413      	add	r3, r2
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	440b      	add	r3, r1
 800f5e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d104      	bne.n	800f5fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 fbc7 	bl	800fd86 <USBD_CtlError>
                  break;
 800f5f8:	e041      	b.n	800f67e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	da0b      	bge.n	800f61a <USBD_StdEPReq+0x2b2>
 800f602:	7bbb      	ldrb	r3, [r7, #14]
 800f604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f608:	4613      	mov	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	3310      	adds	r3, #16
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	4413      	add	r3, r2
 800f616:	3304      	adds	r3, #4
 800f618:	e00b      	b.n	800f632 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f61a:	7bbb      	ldrb	r3, [r7, #14]
 800f61c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f620:	4613      	mov	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4413      	add	r3, r2
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	4413      	add	r3, r2
 800f630:	3304      	adds	r3, #4
 800f632:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f634:	7bbb      	ldrb	r3, [r7, #14]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d002      	beq.n	800f640 <USBD_StdEPReq+0x2d8>
 800f63a:	7bbb      	ldrb	r3, [r7, #14]
 800f63c:	2b80      	cmp	r3, #128	; 0x80
 800f63e:	d103      	bne.n	800f648 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2200      	movs	r2, #0
 800f644:	601a      	str	r2, [r3, #0]
 800f646:	e00e      	b.n	800f666 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f001 fb41 	bl	8010cd4 <USBD_LL_IsStallEP>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2201      	movs	r2, #1
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	e002      	b.n	800f666 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2200      	movs	r2, #0
 800f664:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	2202      	movs	r2, #2
 800f66a:	4619      	mov	r1, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fbfb 	bl	800fe68 <USBD_CtlSendData>
              break;
 800f672:	e004      	b.n	800f67e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 fb85 	bl	800fd86 <USBD_CtlError>
              break;
 800f67c:	bf00      	nop
          }
          break;
 800f67e:	e004      	b.n	800f68a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f680:	6839      	ldr	r1, [r7, #0]
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 fb7f 	bl	800fd86 <USBD_CtlError>
          break;
 800f688:	bf00      	nop
      }
      break;
 800f68a:	e005      	b.n	800f698 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 fb79 	bl	800fd86 <USBD_CtlError>
      break;
 800f694:	e000      	b.n	800f698 <USBD_StdEPReq+0x330>
      break;
 800f696:	bf00      	nop
  }

  return ret;
 800f698:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
	...

0800f6a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	885b      	ldrh	r3, [r3, #2]
 800f6be:	0a1b      	lsrs	r3, r3, #8
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	3b01      	subs	r3, #1
 800f6c4:	2b0e      	cmp	r3, #14
 800f6c6:	f200 8152 	bhi.w	800f96e <USBD_GetDescriptor+0x2ca>
 800f6ca:	a201      	add	r2, pc, #4	; (adr r2, 800f6d0 <USBD_GetDescriptor+0x2c>)
 800f6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d0:	0800f741 	.word	0x0800f741
 800f6d4:	0800f759 	.word	0x0800f759
 800f6d8:	0800f799 	.word	0x0800f799
 800f6dc:	0800f96f 	.word	0x0800f96f
 800f6e0:	0800f96f 	.word	0x0800f96f
 800f6e4:	0800f90f 	.word	0x0800f90f
 800f6e8:	0800f93b 	.word	0x0800f93b
 800f6ec:	0800f96f 	.word	0x0800f96f
 800f6f0:	0800f96f 	.word	0x0800f96f
 800f6f4:	0800f96f 	.word	0x0800f96f
 800f6f8:	0800f96f 	.word	0x0800f96f
 800f6fc:	0800f96f 	.word	0x0800f96f
 800f700:	0800f96f 	.word	0x0800f96f
 800f704:	0800f96f 	.word	0x0800f96f
 800f708:	0800f70d 	.word	0x0800f70d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f712:	69db      	ldr	r3, [r3, #28]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00b      	beq.n	800f730 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f71e:	69db      	ldr	r3, [r3, #28]
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	7c12      	ldrb	r2, [r2, #16]
 800f724:	f107 0108 	add.w	r1, r7, #8
 800f728:	4610      	mov	r0, r2
 800f72a:	4798      	blx	r3
 800f72c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f72e:	e126      	b.n	800f97e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f730:	6839      	ldr	r1, [r7, #0]
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 fb27 	bl	800fd86 <USBD_CtlError>
        err++;
 800f738:	7afb      	ldrb	r3, [r7, #11]
 800f73a:	3301      	adds	r3, #1
 800f73c:	72fb      	strb	r3, [r7, #11]
      break;
 800f73e:	e11e      	b.n	800f97e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	7c12      	ldrb	r2, [r2, #16]
 800f74c:	f107 0108 	add.w	r1, r7, #8
 800f750:	4610      	mov	r0, r2
 800f752:	4798      	blx	r3
 800f754:	60f8      	str	r0, [r7, #12]
      break;
 800f756:	e112      	b.n	800f97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	7c1b      	ldrb	r3, [r3, #16]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10d      	bne.n	800f77c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f768:	f107 0208 	add.w	r2, r7, #8
 800f76c:	4610      	mov	r0, r2
 800f76e:	4798      	blx	r3
 800f770:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3301      	adds	r3, #1
 800f776:	2202      	movs	r2, #2
 800f778:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f77a:	e100      	b.n	800f97e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f784:	f107 0208 	add.w	r2, r7, #8
 800f788:	4610      	mov	r0, r2
 800f78a:	4798      	blx	r3
 800f78c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3301      	adds	r3, #1
 800f792:	2202      	movs	r2, #2
 800f794:	701a      	strb	r2, [r3, #0]
      break;
 800f796:	e0f2      	b.n	800f97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	885b      	ldrh	r3, [r3, #2]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	2b05      	cmp	r3, #5
 800f7a0:	f200 80ac 	bhi.w	800f8fc <USBD_GetDescriptor+0x258>
 800f7a4:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <USBD_GetDescriptor+0x108>)
 800f7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7aa:	bf00      	nop
 800f7ac:	0800f7c5 	.word	0x0800f7c5
 800f7b0:	0800f7f9 	.word	0x0800f7f9
 800f7b4:	0800f82d 	.word	0x0800f82d
 800f7b8:	0800f861 	.word	0x0800f861
 800f7bc:	0800f895 	.word	0x0800f895
 800f7c0:	0800f8c9 	.word	0x0800f8c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	7c12      	ldrb	r2, [r2, #16]
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7e6:	e091      	b.n	800f90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 facb 	bl	800fd86 <USBD_CtlError>
            err++;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7f6:	e089      	b.n	800f90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7c12      	ldrb	r2, [r2, #16]
 800f810:	f107 0108 	add.w	r1, r7, #8
 800f814:	4610      	mov	r0, r2
 800f816:	4798      	blx	r3
 800f818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f81a:	e077      	b.n	800f90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fab1 	bl	800fd86 <USBD_CtlError>
            err++;
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	3301      	adds	r3, #1
 800f828:	72fb      	strb	r3, [r7, #11]
          break;
 800f82a:	e06f      	b.n	800f90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00b      	beq.n	800f850 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	7c12      	ldrb	r2, [r2, #16]
 800f844:	f107 0108 	add.w	r1, r7, #8
 800f848:	4610      	mov	r0, r2
 800f84a:	4798      	blx	r3
 800f84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f84e:	e05d      	b.n	800f90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fa97 	bl	800fd86 <USBD_CtlError>
            err++;
 800f858:	7afb      	ldrb	r3, [r7, #11]
 800f85a:	3301      	adds	r3, #1
 800f85c:	72fb      	strb	r3, [r7, #11]
          break;
 800f85e:	e055      	b.n	800f90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f866:	691b      	ldr	r3, [r3, #16]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00b      	beq.n	800f884 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f872:	691b      	ldr	r3, [r3, #16]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	7c12      	ldrb	r2, [r2, #16]
 800f878:	f107 0108 	add.w	r1, r7, #8
 800f87c:	4610      	mov	r0, r2
 800f87e:	4798      	blx	r3
 800f880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f882:	e043      	b.n	800f90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fa7d 	bl	800fd86 <USBD_CtlError>
            err++;
 800f88c:	7afb      	ldrb	r3, [r7, #11]
 800f88e:	3301      	adds	r3, #1
 800f890:	72fb      	strb	r3, [r7, #11]
          break;
 800f892:	e03b      	b.n	800f90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f89a:	695b      	ldr	r3, [r3, #20]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00b      	beq.n	800f8b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8a6:	695b      	ldr	r3, [r3, #20]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	7c12      	ldrb	r2, [r2, #16]
 800f8ac:	f107 0108 	add.w	r1, r7, #8
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	4798      	blx	r3
 800f8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8b6:	e029      	b.n	800f90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fa63 	bl	800fd86 <USBD_CtlError>
            err++;
 800f8c0:	7afb      	ldrb	r3, [r7, #11]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800f8c6:	e021      	b.n	800f90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ce:	699b      	ldr	r3, [r3, #24]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00b      	beq.n	800f8ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	7c12      	ldrb	r2, [r2, #16]
 800f8e0:	f107 0108 	add.w	r1, r7, #8
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4798      	blx	r3
 800f8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ea:	e00f      	b.n	800f90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8ec:	6839      	ldr	r1, [r7, #0]
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fa49 	bl	800fd86 <USBD_CtlError>
            err++;
 800f8f4:	7afb      	ldrb	r3, [r7, #11]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800f8fa:	e007      	b.n	800f90c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f8fc:	6839      	ldr	r1, [r7, #0]
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 fa41 	bl	800fd86 <USBD_CtlError>
          err++;
 800f904:	7afb      	ldrb	r3, [r7, #11]
 800f906:	3301      	adds	r3, #1
 800f908:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f90a:	bf00      	nop
      }
      break;
 800f90c:	e037      	b.n	800f97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7c1b      	ldrb	r3, [r3, #16]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d109      	bne.n	800f92a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f91e:	f107 0208 	add.w	r2, r7, #8
 800f922:	4610      	mov	r0, r2
 800f924:	4798      	blx	r3
 800f926:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f928:	e029      	b.n	800f97e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fa2a 	bl	800fd86 <USBD_CtlError>
        err++;
 800f932:	7afb      	ldrb	r3, [r7, #11]
 800f934:	3301      	adds	r3, #1
 800f936:	72fb      	strb	r3, [r7, #11]
      break;
 800f938:	e021      	b.n	800f97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	7c1b      	ldrb	r3, [r3, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d10d      	bne.n	800f95e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94a:	f107 0208 	add.w	r2, r7, #8
 800f94e:	4610      	mov	r0, r2
 800f950:	4798      	blx	r3
 800f952:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	3301      	adds	r3, #1
 800f958:	2207      	movs	r2, #7
 800f95a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f95c:	e00f      	b.n	800f97e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 fa10 	bl	800fd86 <USBD_CtlError>
        err++;
 800f966:	7afb      	ldrb	r3, [r7, #11]
 800f968:	3301      	adds	r3, #1
 800f96a:	72fb      	strb	r3, [r7, #11]
      break;
 800f96c:	e007      	b.n	800f97e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 fa08 	bl	800fd86 <USBD_CtlError>
      err++;
 800f976:	7afb      	ldrb	r3, [r7, #11]
 800f978:	3301      	adds	r3, #1
 800f97a:	72fb      	strb	r3, [r7, #11]
      break;
 800f97c:	bf00      	nop
  }

  if (err != 0U)
 800f97e:	7afb      	ldrb	r3, [r7, #11]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d11e      	bne.n	800f9c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	88db      	ldrh	r3, [r3, #6]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d016      	beq.n	800f9ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f98c:	893b      	ldrh	r3, [r7, #8]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00e      	beq.n	800f9b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	88da      	ldrh	r2, [r3, #6]
 800f996:	893b      	ldrh	r3, [r7, #8]
 800f998:	4293      	cmp	r3, r2
 800f99a:	bf28      	it	cs
 800f99c:	4613      	movcs	r3, r2
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9a2:	893b      	ldrh	r3, [r7, #8]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	68f9      	ldr	r1, [r7, #12]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fa5d 	bl	800fe68 <USBD_CtlSendData>
 800f9ae:	e009      	b.n	800f9c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f9b0:	6839      	ldr	r1, [r7, #0]
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 f9e7 	bl	800fd86 <USBD_CtlError>
 800f9b8:	e004      	b.n	800f9c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 faae 	bl	800ff1c <USBD_CtlSendStatus>
 800f9c0:	e000      	b.n	800f9c4 <USBD_GetDescriptor+0x320>
    return;
 800f9c2:	bf00      	nop
  }
}
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop

0800f9cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	889b      	ldrh	r3, [r3, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d131      	bne.n	800fa42 <USBD_SetAddress+0x76>
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	88db      	ldrh	r3, [r3, #6]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d12d      	bne.n	800fa42 <USBD_SetAddress+0x76>
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	885b      	ldrh	r3, [r3, #2]
 800f9ea:	2b7f      	cmp	r3, #127	; 0x7f
 800f9ec:	d829      	bhi.n	800fa42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	885b      	ldrh	r3, [r3, #2]
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d104      	bne.n	800fa10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f9bc 	bl	800fd86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa0e:	e01d      	b.n	800fa4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	7bfa      	ldrb	r2, [r7, #15]
 800fa14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fa18:	7bfb      	ldrb	r3, [r7, #15]
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f001 f985 	bl	8010d2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f000 fa7a 	bl	800ff1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fa28:	7bfb      	ldrb	r3, [r7, #15]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d004      	beq.n	800fa38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2202      	movs	r2, #2
 800fa32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa36:	e009      	b.n	800fa4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa40:	e004      	b.n	800fa4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f99e 	bl	800fd86 <USBD_CtlError>
  }
}
 800fa4a:	bf00      	nop
 800fa4c:	bf00      	nop
 800fa4e:	3710      	adds	r7, #16
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	885b      	ldrh	r3, [r3, #2]
 800fa66:	b2da      	uxtb	r2, r3
 800fa68:	4b4e      	ldr	r3, [pc, #312]	; (800fba4 <USBD_SetConfig+0x150>)
 800fa6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa6c:	4b4d      	ldr	r3, [pc, #308]	; (800fba4 <USBD_SetConfig+0x150>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d905      	bls.n	800fa80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f985 	bl	800fd86 <USBD_CtlError>
    return USBD_FAIL;
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	e08c      	b.n	800fb9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d002      	beq.n	800fa92 <USBD_SetConfig+0x3e>
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d029      	beq.n	800fae4 <USBD_SetConfig+0x90>
 800fa90:	e075      	b.n	800fb7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fa92:	4b44      	ldr	r3, [pc, #272]	; (800fba4 <USBD_SetConfig+0x150>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d020      	beq.n	800fadc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fa9a:	4b42      	ldr	r3, [pc, #264]	; (800fba4 <USBD_SetConfig+0x150>)
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800faa4:	4b3f      	ldr	r3, [pc, #252]	; (800fba4 <USBD_SetConfig+0x150>)
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7fe ffb7 	bl	800ea1e <USBD_SetClassConfig>
 800fab0:	4603      	mov	r3, r0
 800fab2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d008      	beq.n	800facc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f962 	bl	800fd86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2202      	movs	r2, #2
 800fac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800faca:	e065      	b.n	800fb98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fa25 	bl	800ff1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2203      	movs	r2, #3
 800fad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fada:	e05d      	b.n	800fb98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fa1d 	bl	800ff1c <USBD_CtlSendStatus>
      break;
 800fae2:	e059      	b.n	800fb98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fae4:	4b2f      	ldr	r3, [pc, #188]	; (800fba4 <USBD_SetConfig+0x150>)
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d112      	bne.n	800fb12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2202      	movs	r2, #2
 800faf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800faf4:	4b2b      	ldr	r3, [pc, #172]	; (800fba4 <USBD_SetConfig+0x150>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	461a      	mov	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fafe:	4b29      	ldr	r3, [pc, #164]	; (800fba4 <USBD_SetConfig+0x150>)
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7fe ffa6 	bl	800ea56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f000 fa06 	bl	800ff1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fb10:	e042      	b.n	800fb98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fb12:	4b24      	ldr	r3, [pc, #144]	; (800fba4 <USBD_SetConfig+0x150>)
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d02a      	beq.n	800fb76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	4619      	mov	r1, r3
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7fe ff94 	bl	800ea56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fb2e:	4b1d      	ldr	r3, [pc, #116]	; (800fba4 <USBD_SetConfig+0x150>)
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	461a      	mov	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb38:	4b1a      	ldr	r3, [pc, #104]	; (800fba4 <USBD_SetConfig+0x150>)
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7fe ff6d 	bl	800ea1e <USBD_SetClassConfig>
 800fb44:	4603      	mov	r3, r0
 800fb46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fb48:	7bfb      	ldrb	r3, [r7, #15]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00f      	beq.n	800fb6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fb4e:	6839      	ldr	r1, [r7, #0]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f918 	bl	800fd86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7fe ff79 	bl	800ea56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2202      	movs	r2, #2
 800fb68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb6c:	e014      	b.n	800fb98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f9d4 	bl	800ff1c <USBD_CtlSendStatus>
      break;
 800fb74:	e010      	b.n	800fb98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f9d0 	bl	800ff1c <USBD_CtlSendStatus>
      break;
 800fb7c:	e00c      	b.n	800fb98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fb7e:	6839      	ldr	r1, [r7, #0]
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 f900 	bl	800fd86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb86:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <USBD_SetConfig+0x150>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7fe ff62 	bl	800ea56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fb92:	2303      	movs	r3, #3
 800fb94:	73fb      	strb	r3, [r7, #15]
      break;
 800fb96:	bf00      	nop
  }

  return ret;
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	24000534 	.word	0x24000534

0800fba8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	88db      	ldrh	r3, [r3, #6]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d004      	beq.n	800fbc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 f8e2 	bl	800fd86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fbc2:	e023      	b.n	800fc0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	dc02      	bgt.n	800fbd6 <USBD_GetConfig+0x2e>
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dc03      	bgt.n	800fbdc <USBD_GetConfig+0x34>
 800fbd4:	e015      	b.n	800fc02 <USBD_GetConfig+0x5a>
 800fbd6:	2b03      	cmp	r3, #3
 800fbd8:	d00b      	beq.n	800fbf2 <USBD_GetConfig+0x4a>
 800fbda:	e012      	b.n	800fc02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	3308      	adds	r3, #8
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	4619      	mov	r1, r3
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 f93c 	bl	800fe68 <USBD_CtlSendData>
        break;
 800fbf0:	e00c      	b.n	800fc0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f934 	bl	800fe68 <USBD_CtlSendData>
        break;
 800fc00:	e004      	b.n	800fc0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fc02:	6839      	ldr	r1, [r7, #0]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 f8be 	bl	800fd86 <USBD_CtlError>
        break;
 800fc0a:	bf00      	nop
}
 800fc0c:	bf00      	nop
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	3b01      	subs	r3, #1
 800fc28:	2b02      	cmp	r3, #2
 800fc2a:	d81e      	bhi.n	800fc6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	88db      	ldrh	r3, [r3, #6]
 800fc30:	2b02      	cmp	r3, #2
 800fc32:	d004      	beq.n	800fc3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fc34:	6839      	ldr	r1, [r7, #0]
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 f8a5 	bl	800fd86 <USBD_CtlError>
        break;
 800fc3c:	e01a      	b.n	800fc74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2201      	movs	r2, #1
 800fc42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d005      	beq.n	800fc5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	68db      	ldr	r3, [r3, #12]
 800fc52:	f043 0202 	orr.w	r2, r3, #2
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	330c      	adds	r3, #12
 800fc5e:	2202      	movs	r2, #2
 800fc60:	4619      	mov	r1, r3
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 f900 	bl	800fe68 <USBD_CtlSendData>
      break;
 800fc68:	e004      	b.n	800fc74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fc6a:	6839      	ldr	r1, [r7, #0]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 f88a 	bl	800fd86 <USBD_CtlError>
      break;
 800fc72:	bf00      	nop
  }
}
 800fc74:	bf00      	nop
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	885b      	ldrh	r3, [r3, #2]
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d107      	bne.n	800fc9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2201      	movs	r2, #1
 800fc92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 f940 	bl	800ff1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fc9c:	e013      	b.n	800fcc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	885b      	ldrh	r3, [r3, #2]
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d10b      	bne.n	800fcbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	889b      	ldrh	r3, [r3, #4]
 800fcaa:	0a1b      	lsrs	r3, r3, #8
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 f930 	bl	800ff1c <USBD_CtlSendStatus>
}
 800fcbc:	e003      	b.n	800fcc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 f860 	bl	800fd86 <USBD_CtlError>
}
 800fcc6:	bf00      	nop
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b082      	sub	sp, #8
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	3b01      	subs	r3, #1
 800fce2:	2b02      	cmp	r3, #2
 800fce4:	d80b      	bhi.n	800fcfe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	885b      	ldrh	r3, [r3, #2]
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d10c      	bne.n	800fd08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f910 	bl	800ff1c <USBD_CtlSendStatus>
      }
      break;
 800fcfc:	e004      	b.n	800fd08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f840 	bl	800fd86 <USBD_CtlError>
      break;
 800fd06:	e000      	b.n	800fd0a <USBD_ClrFeature+0x3c>
      break;
 800fd08:	bf00      	nop
  }
}
 800fd0a:	bf00      	nop
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b084      	sub	sp, #16
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	781a      	ldrb	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	781a      	ldrb	r2, [r3, #0]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff fa17 	bl	800f170 <SWAPBYTE>
 800fd42:	4603      	mov	r3, r0
 800fd44:	461a      	mov	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	3301      	adds	r3, #1
 800fd54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f7ff fa0a 	bl	800f170 <SWAPBYTE>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	3301      	adds	r3, #1
 800fd68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f7ff f9fd 	bl	800f170 <SWAPBYTE>
 800fd76:	4603      	mov	r3, r0
 800fd78:	461a      	mov	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	80da      	strh	r2, [r3, #6]
}
 800fd7e:	bf00      	nop
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b082      	sub	sp, #8
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
 800fd8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd90:	2180      	movs	r1, #128	; 0x80
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 ff60 	bl	8010c58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd98:	2100      	movs	r1, #0
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 ff5c 	bl	8010c58 <USBD_LL_StallEP>
}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b086      	sub	sp, #24
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d036      	beq.n	800fe2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fdc2:	6938      	ldr	r0, [r7, #16]
 800fdc4:	f000 f836 	bl	800fe34 <USBD_GetLen>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	3301      	adds	r3, #1
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	68ba      	ldr	r2, [r7, #8]
 800fdda:	4413      	add	r3, r2
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	7812      	ldrb	r2, [r2, #0]
 800fde0:	701a      	strb	r2, [r3, #0]
  idx++;
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	3301      	adds	r3, #1
 800fde6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	4413      	add	r3, r2
 800fdee:	2203      	movs	r2, #3
 800fdf0:	701a      	strb	r2, [r3, #0]
  idx++;
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fdf8:	e013      	b.n	800fe22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fdfa:	7dfb      	ldrb	r3, [r7, #23]
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	4413      	add	r3, r2
 800fe00:	693a      	ldr	r2, [r7, #16]
 800fe02:	7812      	ldrb	r2, [r2, #0]
 800fe04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	613b      	str	r3, [r7, #16]
    idx++;
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	4413      	add	r3, r2
 800fe18:	2200      	movs	r2, #0
 800fe1a:	701a      	strb	r2, [r3, #0]
    idx++;
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
 800fe1e:	3301      	adds	r3, #1
 800fe20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1e7      	bne.n	800fdfa <USBD_GetString+0x52>
 800fe2a:	e000      	b.n	800fe2e <USBD_GetString+0x86>
    return;
 800fe2c:	bf00      	nop
  }
}
 800fe2e:	3718      	adds	r7, #24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fe44:	e005      	b.n	800fe52 <USBD_GetLen+0x1e>
  {
    len++;
 800fe46:	7bfb      	ldrb	r3, [r7, #15]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1f5      	bne.n	800fe46 <USBD_GetLen+0x12>
  }

  return len;
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3714      	adds	r7, #20
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2202      	movs	r2, #2
 800fe78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	68f8      	ldr	r0, [r7, #12]
 800fe90:	f000 ff6b 	bl	8010d6a <USBD_LL_Transmit>

  return USBD_OK;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b084      	sub	sp, #16
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	60f8      	str	r0, [r7, #12]
 800fea6:	60b9      	str	r1, [r7, #8]
 800fea8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	68ba      	ldr	r2, [r7, #8]
 800feae:	2100      	movs	r1, #0
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f000 ff5a 	bl	8010d6a <USBD_LL_Transmit>

  return USBD_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2203      	movs	r2, #3
 800fed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	2100      	movs	r1, #0
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	f000 ff5e 	bl	8010dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b084      	sub	sp, #16
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	60f8      	str	r0, [r7, #12]
 800ff02:	60b9      	str	r1, [r7, #8]
 800ff04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	68f8      	ldr	r0, [r7, #12]
 800ff0e:	f000 ff4d 	bl	8010dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2204      	movs	r2, #4
 800ff28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	2200      	movs	r2, #0
 800ff30:	2100      	movs	r1, #0
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 ff19 	bl	8010d6a <USBD_LL_Transmit>

  return USBD_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b082      	sub	sp, #8
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2205      	movs	r2, #5
 800ff4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff52:	2300      	movs	r3, #0
 800ff54:	2200      	movs	r2, #0
 800ff56:	2100      	movs	r1, #0
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 ff27 	bl	8010dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	ed87 0a01 	vstr	s0, [r7, #4]
 800ff76:	4613      	mov	r3, r2
 800ff78:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f04f 0200 	mov.w	r2, #0
 800ff80:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f04f 0200 	mov.w	r2, #0
 800ff88:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f04f 0200 	mov.w	r2, #0
 800ff90:	609a      	str	r2, [r3, #8]

    signal->sogi_d_1 = 0.f;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f04f 0200 	mov.w	r2, #0
 800ff98:	611a      	str	r2, [r3, #16]
    signal->sogi_d_2 = 0.f;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f04f 0200 	mov.w	r2, #0
 800ffa0:	615a      	str	r2, [r3, #20]

    signal->sogi_q_1 = 0.f;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f04f 0200 	mov.w	r2, #0
 800ffa8:	61da      	str	r2, [r3, #28]
    signal->sogi_q_2 = 0.f;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f04f 0200 	mov.w	r2, #0
 800ffb0:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f04f 0200 	mov.w	r2, #0
 800ffb8:	62da      	str	r2, [r3, #44]	; 0x2c

    config->omiga = 2 * PI * f; // f典型值50
 800ffba:	edd7 7a01 	vldr	s15, [r7, #4]
 800ffbe:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8010124 <pll_Init+0x1bc>
 800ffc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 800ffcc:	887b      	ldrh	r3, [r7, #2]
 800ffce:	ee07 3a90 	vmov	s15, r3
 800ffd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ffd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	4a50      	ldr	r2, [pc, #320]	; (8010128 <pll_Init+0x1c0>)
 800ffe8:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	f04f 0200 	mov.w	r2, #0
 800fff0:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	edd3 7a00 	vldr	s15, [r3]
 800fff8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fffc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	edd3 7a01 	vldr	s15, [r3, #4]
 8010006:	ee67 7a27 	vmul.f32	s15, s14, s15
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	edd3 7a02 	vldr	s15, [r3, #8]
 8010016:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	edd3 7a00 	vldr	s15, [r3]
 8010020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	edd3 7a01 	vldr	s15, [r3, #4]
 801002a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	ed93 7a00 	vldr	s14, [r3]
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	edd3 7a00 	vldr	s15, [r3]
 801004a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	edd3 7a01 	vldr	s15, [r3, #4]
 8010054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8010070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010074:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010078:	ee37 7a87 	vadd.f32	s14, s15, s14
 801007c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 801008c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010090:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8010094:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80100a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80100ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80100c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100ca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80100ce:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80100de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80100e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80100ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	4a0d      	ldr	r2, [pc, #52]	; (801012c <pll_Init+0x1c4>)
 80100f8:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	4a0c      	ldr	r2, [pc, #48]	; (8010130 <pll_Init+0x1c8>)
 80100fe:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	f04f 0200 	mov.w	r2, #0
 8010106:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f04f 0200 	mov.w	r2, #0
 801010e:	639a      	str	r2, [r3, #56]	; 0x38
    signal->pid_out = 0.f;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f04f 0200 	mov.w	r2, #0
 8010116:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010118:	bf00      	nop
 801011a:	3714      	adds	r7, #20
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr
 8010124:	40c90fdb 	.word	0x40c90fdb
 8010128:	3fb4fdf4 	.word	0x3fb4fdf4
 801012c:	428d78c3 	.word	0x428d78c3
 8010130:	46758fb9 	.word	0x46758fb9
 8010134:	00000000 	.word	0x00000000

08010138 <pll_Control>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Control(pll_Signal *signal, pll_Config *config)
{
 8010138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801013a:	ed2d 8b02 	vpush	{d8}
 801013e:	b089      	sub	sp, #36	; 0x24
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f8e8 	bl	801031c <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal->sogi_d_0, signal->sogi_q_0 / 382 * 3, &signal->park_d, &signal->park_q, arm_sin_f32(signal->theta), arm_cos_f32(signal->theta));
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	68de      	ldr	r6, [r3, #12]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	ed93 7a06 	vldr	s14, [r3, #24]
 8010156:	eddf 6a42 	vldr	s13, [pc, #264]	; 8010260 <pll_Control+0x128>
 801015a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801015e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8010162:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f103 0524 	add.w	r5, r3, #36	; 0x24
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010178:	eeb0 0a67 	vmov.f32	s0, s15
 801017c:	f000 fe8e 	bl	8010e9c <arm_sin_f32>
 8010180:	eef0 8a40 	vmov.f32	s17, s0
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801018a:	eeb0 0a67 	vmov.f32	s0, s15
 801018e:	f000 fecb 	bl	8010f28 <arm_cos_f32>
 8010192:	eef0 7a40 	vmov.f32	s15, s0
 8010196:	61fe      	str	r6, [r7, #28]
 8010198:	ed87 8a06 	vstr	s16, [r7, #24]
 801019c:	617d      	str	r5, [r7, #20]
 801019e:	613c      	str	r4, [r7, #16]
 80101a0:	edc7 8a03 	vstr	s17, [r7, #12]
 80101a4:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80101a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80101ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80101b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80101b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80101bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80101ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80101ce:	eeb1 7a67 	vneg.f32	s14, s15
 80101d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80101d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101da:	edd7 6a06 	vldr	s13, [r7, #24]
 80101de:	edd7 7a02 	vldr	s15, [r7, #8]
 80101e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	edc3 7a00 	vstr	s15, [r3]
  }
 80101f0:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal, config);
 80101f2:	6839      	ldr	r1, [r7, #0]
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f835 	bl	8010264 <pll_Pid>

    signal->theta += (signal->pid_out + config->omiga) * config->Ts;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	edd3 7a00 	vldr	s15, [r3]
 801020c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	edd3 7a01 	vldr	s15, [r3, #4]
 8010216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801021a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    signal->theta = (float)fmod(signal->theta, 2 * PI);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801022a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801022e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8010258 <pll_Control+0x120>
 8010232:	eeb0 0b47 	vmov.f64	d0, d7
 8010236:	f003 fc97 	bl	8013b68 <fmod>
 801023a:	eeb0 7b40 	vmov.f64	d7, d0
 801023e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8010248:	bf00      	nop
 801024a:	3724      	adds	r7, #36	; 0x24
 801024c:	46bd      	mov	sp, r7
 801024e:	ecbd 8b02 	vpop	{d8}
 8010252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010254:	f3af 8000 	nop.w
 8010258:	60000000 	.word	0x60000000
 801025c:	401921fb 	.word	0x401921fb
 8010260:	43bf0000 	.word	0x43bf0000

08010264 <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	edd3 7a03 	vldr	s15, [r3, #12]
 801027a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	edd3 6a04 	vldr	s13, [r3, #16]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801029c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80102a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	edd3 6a05 	vldr	s13, [r3, #20]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80102b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80102c8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801030c <pll_Pid+0xa8>
 80102cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d4:	dd03      	ble.n	80102de <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a0d      	ldr	r2, [pc, #52]	; (8010310 <pll_Pid+0xac>)
 80102da:	631a      	str	r2, [r3, #48]	; 0x30
 80102dc:	e00c      	b.n	80102f8 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80102e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8010314 <pll_Pid+0xb0>
 80102e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80102ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f0:	d502      	bpl.n	80102f8 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a08      	ldr	r2, [pc, #32]	; (8010318 <pll_Pid+0xb4>)
 80102f6:	631a      	str	r2, [r3, #48]	; 0x30

    signal->pid_err[1] = signal->pid_err[0];
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010300:	bf00      	nop
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	431d1463 	.word	0x431d1463
 8010310:	431d1463 	.word	0x431d1463
 8010314:	c27b53d2 	.word	0xc27b53d2
 8010318:	c27b53d2 	.word	0xc27b53d2

0801031c <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
    signal->sogi_d_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_d_1 + signal->a2 * signal->sogi_d_2;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	edd3 7a00 	vldr	s15, [r3]
 8010330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	edd3 7a04 	vldr	s15, [r3, #16]
 8010354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010358:	ee37 7a27 	vadd.f32	s14, s14, s15
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	edd3 7a05 	vldr	s15, [r3, #20]
 8010368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801036c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_q_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_q_1 + signal->a2 * signal->sogi_q_2;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	edd3 7a00 	vldr	s15, [r3]
 8010382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801038c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	edd3 7a01 	vldr	s15, [r3, #4]
 8010396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801039a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80103aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80103be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80103d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	605a      	str	r2, [r3, #4]
    signal->sogi_d_2 = signal->sogi_d_1;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	691a      	ldr	r2, [r3, #16]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	615a      	str	r2, [r3, #20]
    signal->sogi_d_1 = signal->sogi_d_0;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	68da      	ldr	r2, [r3, #12]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	611a      	str	r2, [r3, #16]
    signal->sogi_q_2 = signal->sogi_q_1;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	69da      	ldr	r2, [r3, #28]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	621a      	str	r2, [r3, #32]
    signal->sogi_q_1 = signal->sogi_q_0;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	699a      	ldr	r2, [r3, #24]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	61da      	str	r2, [r3, #28]
 8010410:	bf00      	nop
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010420:	2200      	movs	r2, #0
 8010422:	4913      	ldr	r1, [pc, #76]	; (8010470 <MX_USB_DEVICE_Init+0x54>)
 8010424:	4813      	ldr	r0, [pc, #76]	; (8010474 <MX_USB_DEVICE_Init+0x58>)
 8010426:	f7fe fa7d 	bl	800e924 <USBD_Init>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d001      	beq.n	8010434 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010430:	f7f0 fda2 	bl	8000f78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010434:	4910      	ldr	r1, [pc, #64]	; (8010478 <MX_USB_DEVICE_Init+0x5c>)
 8010436:	480f      	ldr	r0, [pc, #60]	; (8010474 <MX_USB_DEVICE_Init+0x58>)
 8010438:	f7fe faa4 	bl	800e984 <USBD_RegisterClass>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010442:	f7f0 fd99 	bl	8000f78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010446:	490d      	ldr	r1, [pc, #52]	; (801047c <MX_USB_DEVICE_Init+0x60>)
 8010448:	480a      	ldr	r0, [pc, #40]	; (8010474 <MX_USB_DEVICE_Init+0x58>)
 801044a:	f7fe f99b 	bl	800e784 <USBD_CDC_RegisterInterface>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010454:	f7f0 fd90 	bl	8000f78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010458:	4806      	ldr	r0, [pc, #24]	; (8010474 <MX_USB_DEVICE_Init+0x58>)
 801045a:	f7fe fac9 	bl	800e9f0 <USBD_Start>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010464:	f7f0 fd88 	bl	8000f78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010468:	f7f7 f93c 	bl	80076e4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801046c:	bf00      	nop
 801046e:	bd80      	pop	{r7, pc}
 8010470:	240000b4 	.word	0x240000b4
 8010474:	24000538 	.word	0x24000538
 8010478:	24000020 	.word	0x24000020
 801047c:	240000a0 	.word	0x240000a0

08010480 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010484:	2200      	movs	r2, #0
 8010486:	4905      	ldr	r1, [pc, #20]	; (801049c <CDC_Init_FS+0x1c>)
 8010488:	4805      	ldr	r0, [pc, #20]	; (80104a0 <CDC_Init_FS+0x20>)
 801048a:	f7fe f995 	bl	800e7b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801048e:	4905      	ldr	r1, [pc, #20]	; (80104a4 <CDC_Init_FS+0x24>)
 8010490:	4803      	ldr	r0, [pc, #12]	; (80104a0 <CDC_Init_FS+0x20>)
 8010492:	f7fe f9b3 	bl	800e7fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010496:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010498:	4618      	mov	r0, r3
 801049a:	bd80      	pop	{r7, pc}
 801049c:	24001014 	.word	0x24001014
 80104a0:	24000538 	.word	0x24000538
 80104a4:	24000814 	.word	0x24000814

080104a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80104a8:	b480      	push	{r7}
 80104aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80104ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	4603      	mov	r3, r0
 80104c0:	6039      	str	r1, [r7, #0]
 80104c2:	71fb      	strb	r3, [r7, #7]
 80104c4:	4613      	mov	r3, r2
 80104c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	2b23      	cmp	r3, #35	; 0x23
 80104cc:	d84a      	bhi.n	8010564 <CDC_Control_FS+0xac>
 80104ce:	a201      	add	r2, pc, #4	; (adr r2, 80104d4 <CDC_Control_FS+0x1c>)
 80104d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d4:	08010565 	.word	0x08010565
 80104d8:	08010565 	.word	0x08010565
 80104dc:	08010565 	.word	0x08010565
 80104e0:	08010565 	.word	0x08010565
 80104e4:	08010565 	.word	0x08010565
 80104e8:	08010565 	.word	0x08010565
 80104ec:	08010565 	.word	0x08010565
 80104f0:	08010565 	.word	0x08010565
 80104f4:	08010565 	.word	0x08010565
 80104f8:	08010565 	.word	0x08010565
 80104fc:	08010565 	.word	0x08010565
 8010500:	08010565 	.word	0x08010565
 8010504:	08010565 	.word	0x08010565
 8010508:	08010565 	.word	0x08010565
 801050c:	08010565 	.word	0x08010565
 8010510:	08010565 	.word	0x08010565
 8010514:	08010565 	.word	0x08010565
 8010518:	08010565 	.word	0x08010565
 801051c:	08010565 	.word	0x08010565
 8010520:	08010565 	.word	0x08010565
 8010524:	08010565 	.word	0x08010565
 8010528:	08010565 	.word	0x08010565
 801052c:	08010565 	.word	0x08010565
 8010530:	08010565 	.word	0x08010565
 8010534:	08010565 	.word	0x08010565
 8010538:	08010565 	.word	0x08010565
 801053c:	08010565 	.word	0x08010565
 8010540:	08010565 	.word	0x08010565
 8010544:	08010565 	.word	0x08010565
 8010548:	08010565 	.word	0x08010565
 801054c:	08010565 	.word	0x08010565
 8010550:	08010565 	.word	0x08010565
 8010554:	08010565 	.word	0x08010565
 8010558:	08010565 	.word	0x08010565
 801055c:	08010565 	.word	0x08010565
 8010560:	08010565 	.word	0x08010565
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010564:	bf00      	nop
  }

  return (USBD_OK);
 8010566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010568:	4618      	mov	r0, r3
 801056a:	370c      	adds	r7, #12
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr

08010574 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801057e:	6879      	ldr	r1, [r7, #4]
 8010580:	4805      	ldr	r0, [pc, #20]	; (8010598 <CDC_Receive_FS+0x24>)
 8010582:	f7fe f93b 	bl	800e7fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010586:	4804      	ldr	r0, [pc, #16]	; (8010598 <CDC_Receive_FS+0x24>)
 8010588:	f7fe f996 	bl	800e8b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801058c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801058e:	4618      	mov	r0, r3
 8010590:	3708      	adds	r7, #8
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	24000538 	.word	0x24000538

0801059c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	460b      	mov	r3, r1
 80105a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80105ac:	4b0d      	ldr	r3, [pc, #52]	; (80105e4 <CDC_Transmit_FS+0x48>)
 80105ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80105be:	2301      	movs	r3, #1
 80105c0:	e00b      	b.n	80105da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80105c2:	887b      	ldrh	r3, [r7, #2]
 80105c4:	461a      	mov	r2, r3
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	4806      	ldr	r0, [pc, #24]	; (80105e4 <CDC_Transmit_FS+0x48>)
 80105ca:	f7fe f8f5 	bl	800e7b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80105ce:	4805      	ldr	r0, [pc, #20]	; (80105e4 <CDC_Transmit_FS+0x48>)
 80105d0:	f7fe f932 	bl	800e838 <USBD_CDC_TransmitPacket>
 80105d4:	4603      	mov	r3, r0
 80105d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	24000538 	.word	0x24000538

080105e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b087      	sub	sp, #28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	4613      	mov	r3, r2
 80105f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	371c      	adds	r7, #28
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
	...

0801060c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	6039      	str	r1, [r7, #0]
 8010616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	2212      	movs	r2, #18
 801061c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801061e:	4b03      	ldr	r3, [pc, #12]	; (801062c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	240000d4 	.word	0x240000d4

08010630 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	4603      	mov	r3, r0
 8010638:	6039      	str	r1, [r7, #0]
 801063a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	2204      	movs	r2, #4
 8010640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010642:	4b03      	ldr	r3, [pc, #12]	; (8010650 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr
 8010650:	240000e8 	.word	0x240000e8

08010654 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	4603      	mov	r3, r0
 801065c:	6039      	str	r1, [r7, #0]
 801065e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d105      	bne.n	8010672 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	4907      	ldr	r1, [pc, #28]	; (8010688 <USBD_FS_ProductStrDescriptor+0x34>)
 801066a:	4808      	ldr	r0, [pc, #32]	; (801068c <USBD_FS_ProductStrDescriptor+0x38>)
 801066c:	f7ff fb9c 	bl	800fda8 <USBD_GetString>
 8010670:	e004      	b.n	801067c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	4904      	ldr	r1, [pc, #16]	; (8010688 <USBD_FS_ProductStrDescriptor+0x34>)
 8010676:	4805      	ldr	r0, [pc, #20]	; (801068c <USBD_FS_ProductStrDescriptor+0x38>)
 8010678:	f7ff fb96 	bl	800fda8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801067c:	4b02      	ldr	r3, [pc, #8]	; (8010688 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801067e:	4618      	mov	r0, r3
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	24001814 	.word	0x24001814
 801068c:	08013e50 	.word	0x08013e50

08010690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	4603      	mov	r3, r0
 8010698:	6039      	str	r1, [r7, #0]
 801069a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801069c:	683a      	ldr	r2, [r7, #0]
 801069e:	4904      	ldr	r1, [pc, #16]	; (80106b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80106a0:	4804      	ldr	r0, [pc, #16]	; (80106b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80106a2:	f7ff fb81 	bl	800fda8 <USBD_GetString>
  return USBD_StrDesc;
 80106a6:	4b02      	ldr	r3, [pc, #8]	; (80106b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	24001814 	.word	0x24001814
 80106b4:	08013e68 	.word	0x08013e68

080106b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	4603      	mov	r3, r0
 80106c0:	6039      	str	r1, [r7, #0]
 80106c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	221a      	movs	r2, #26
 80106c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106ca:	f000 f843 	bl	8010754 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80106ce:	4b02      	ldr	r3, [pc, #8]	; (80106d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	240000ec 	.word	0x240000ec

080106dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	4603      	mov	r3, r0
 80106e4:	6039      	str	r1, [r7, #0]
 80106e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106e8:	79fb      	ldrb	r3, [r7, #7]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d105      	bne.n	80106fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106ee:	683a      	ldr	r2, [r7, #0]
 80106f0:	4907      	ldr	r1, [pc, #28]	; (8010710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106f2:	4808      	ldr	r0, [pc, #32]	; (8010714 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106f4:	f7ff fb58 	bl	800fda8 <USBD_GetString>
 80106f8:	e004      	b.n	8010704 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	4904      	ldr	r1, [pc, #16]	; (8010710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106fe:	4805      	ldr	r0, [pc, #20]	; (8010714 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010700:	f7ff fb52 	bl	800fda8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010704:	4b02      	ldr	r3, [pc, #8]	; (8010710 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	24001814 	.word	0x24001814
 8010714:	08013e7c 	.word	0x08013e7c

08010718 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	6039      	str	r1, [r7, #0]
 8010722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010724:	79fb      	ldrb	r3, [r7, #7]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d105      	bne.n	8010736 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801072a:	683a      	ldr	r2, [r7, #0]
 801072c:	4907      	ldr	r1, [pc, #28]	; (801074c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801072e:	4808      	ldr	r0, [pc, #32]	; (8010750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010730:	f7ff fb3a 	bl	800fda8 <USBD_GetString>
 8010734:	e004      	b.n	8010740 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	4904      	ldr	r1, [pc, #16]	; (801074c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801073a:	4805      	ldr	r0, [pc, #20]	; (8010750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801073c:	f7ff fb34 	bl	800fda8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010740:	4b02      	ldr	r3, [pc, #8]	; (801074c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010742:	4618      	mov	r0, r3
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	24001814 	.word	0x24001814
 8010750:	08013e88 	.word	0x08013e88

08010754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801075a:	4b0f      	ldr	r3, [pc, #60]	; (8010798 <Get_SerialNum+0x44>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010760:	4b0e      	ldr	r3, [pc, #56]	; (801079c <Get_SerialNum+0x48>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010766:	4b0e      	ldr	r3, [pc, #56]	; (80107a0 <Get_SerialNum+0x4c>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4413      	add	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d009      	beq.n	801078e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801077a:	2208      	movs	r2, #8
 801077c:	4909      	ldr	r1, [pc, #36]	; (80107a4 <Get_SerialNum+0x50>)
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f000 f814 	bl	80107ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010784:	2204      	movs	r2, #4
 8010786:	4908      	ldr	r1, [pc, #32]	; (80107a8 <Get_SerialNum+0x54>)
 8010788:	68b8      	ldr	r0, [r7, #8]
 801078a:	f000 f80f 	bl	80107ac <IntToUnicode>
  }
}
 801078e:	bf00      	nop
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	1ff1e800 	.word	0x1ff1e800
 801079c:	1ff1e804 	.word	0x1ff1e804
 80107a0:	1ff1e808 	.word	0x1ff1e808
 80107a4:	240000ee 	.word	0x240000ee
 80107a8:	240000fe 	.word	0x240000fe

080107ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b087      	sub	sp, #28
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	4613      	mov	r3, r2
 80107b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107be:	2300      	movs	r3, #0
 80107c0:	75fb      	strb	r3, [r7, #23]
 80107c2:	e027      	b.n	8010814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	0f1b      	lsrs	r3, r3, #28
 80107c8:	2b09      	cmp	r3, #9
 80107ca:	d80b      	bhi.n	80107e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	0f1b      	lsrs	r3, r3, #28
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	005b      	lsls	r3, r3, #1
 80107d6:	4619      	mov	r1, r3
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	440b      	add	r3, r1
 80107dc:	3230      	adds	r2, #48	; 0x30
 80107de:	b2d2      	uxtb	r2, r2
 80107e0:	701a      	strb	r2, [r3, #0]
 80107e2:	e00a      	b.n	80107fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	0f1b      	lsrs	r3, r3, #28
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	7dfb      	ldrb	r3, [r7, #23]
 80107ec:	005b      	lsls	r3, r3, #1
 80107ee:	4619      	mov	r1, r3
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	440b      	add	r3, r1
 80107f4:	3237      	adds	r2, #55	; 0x37
 80107f6:	b2d2      	uxtb	r2, r2
 80107f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	011b      	lsls	r3, r3, #4
 80107fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010800:	7dfb      	ldrb	r3, [r7, #23]
 8010802:	005b      	lsls	r3, r3, #1
 8010804:	3301      	adds	r3, #1
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	4413      	add	r3, r2
 801080a:	2200      	movs	r2, #0
 801080c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801080e:	7dfb      	ldrb	r3, [r7, #23]
 8010810:	3301      	adds	r3, #1
 8010812:	75fb      	strb	r3, [r7, #23]
 8010814:	7dfa      	ldrb	r2, [r7, #23]
 8010816:	79fb      	ldrb	r3, [r7, #7]
 8010818:	429a      	cmp	r2, r3
 801081a:	d3d3      	bcc.n	80107c4 <IntToUnicode+0x18>
  }
}
 801081c:	bf00      	nop
 801081e:	bf00      	nop
 8010820:	371c      	adds	r7, #28
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr
	...

0801082c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b0ba      	sub	sp, #232	; 0xe8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8010838:	2200      	movs	r2, #0
 801083a:	601a      	str	r2, [r3, #0]
 801083c:	605a      	str	r2, [r3, #4]
 801083e:	609a      	str	r2, [r3, #8]
 8010840:	60da      	str	r2, [r3, #12]
 8010842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010844:	f107 0310 	add.w	r3, r7, #16
 8010848:	22c0      	movs	r2, #192	; 0xc0
 801084a:	2100      	movs	r1, #0
 801084c:	4618      	mov	r0, r3
 801084e:	f001 f9ca 	bl	8011be6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a2c      	ldr	r2, [pc, #176]	; (8010908 <HAL_PCD_MspInit+0xdc>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d151      	bne.n	8010900 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801085c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010860:	f04f 0300 	mov.w	r3, #0
 8010864:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8010868:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801086c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010870:	f107 0310 	add.w	r3, r7, #16
 8010874:	4618      	mov	r0, r3
 8010876:	f7f7 ff57 	bl	8008728 <HAL_RCCEx_PeriphCLKConfig>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8010880:	f7f0 fb7a 	bl	8000f78 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010884:	f7f6 ff2e 	bl	80076e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010888:	4b20      	ldr	r3, [pc, #128]	; (801090c <HAL_PCD_MspInit+0xe0>)
 801088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801088e:	4a1f      	ldr	r2, [pc, #124]	; (801090c <HAL_PCD_MspInit+0xe0>)
 8010890:	f043 0301 	orr.w	r3, r3, #1
 8010894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010898:	4b1c      	ldr	r3, [pc, #112]	; (801090c <HAL_PCD_MspInit+0xe0>)
 801089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801089e:	f003 0301 	and.w	r3, r3, #1
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80108a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80108aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108ae:	2302      	movs	r3, #2
 80108b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108ba:	2300      	movs	r3, #0
 80108bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80108c0:	230a      	movs	r3, #10
 80108c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80108ca:	4619      	mov	r1, r3
 80108cc:	4810      	ldr	r0, [pc, #64]	; (8010910 <HAL_PCD_MspInit+0xe4>)
 80108ce:	f7f5 fa33 	bl	8005d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80108d2:	4b0e      	ldr	r3, [pc, #56]	; (801090c <HAL_PCD_MspInit+0xe0>)
 80108d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80108d8:	4a0c      	ldr	r2, [pc, #48]	; (801090c <HAL_PCD_MspInit+0xe0>)
 80108da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80108de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80108e2:	4b0a      	ldr	r3, [pc, #40]	; (801090c <HAL_PCD_MspInit+0xe0>)
 80108e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80108e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ec:	60bb      	str	r3, [r7, #8]
 80108ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80108f0:	2200      	movs	r2, #0
 80108f2:	2100      	movs	r1, #0
 80108f4:	2065      	movs	r0, #101	; 0x65
 80108f6:	f7f2 fe5d 	bl	80035b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80108fa:	2065      	movs	r0, #101	; 0x65
 80108fc:	f7f2 fe74 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010900:	bf00      	nop
 8010902:	37e8      	adds	r7, #232	; 0xe8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	40080000 	.word	0x40080000
 801090c:	58024400 	.word	0x58024400
 8010910:	58020000 	.word	0x58020000

08010914 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010928:	4619      	mov	r1, r3
 801092a:	4610      	mov	r0, r2
 801092c:	f7fe f8ad 	bl	800ea8a <USBD_LL_SetupStage>
}
 8010930:	bf00      	nop
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	460b      	mov	r3, r1
 8010942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801094a:	78fa      	ldrb	r2, [r7, #3]
 801094c:	6879      	ldr	r1, [r7, #4]
 801094e:	4613      	mov	r3, r2
 8010950:	00db      	lsls	r3, r3, #3
 8010952:	4413      	add	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	440b      	add	r3, r1
 8010958:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	78fb      	ldrb	r3, [r7, #3]
 8010960:	4619      	mov	r1, r3
 8010962:	f7fe f8e7 	bl	800eb34 <USBD_LL_DataOutStage>
}
 8010966:	bf00      	nop
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b082      	sub	sp, #8
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	460b      	mov	r3, r1
 8010978:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010980:	78fa      	ldrb	r2, [r7, #3]
 8010982:	6879      	ldr	r1, [r7, #4]
 8010984:	4613      	mov	r3, r2
 8010986:	00db      	lsls	r3, r3, #3
 8010988:	4413      	add	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	440b      	add	r3, r1
 801098e:	3348      	adds	r3, #72	; 0x48
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	78fb      	ldrb	r3, [r7, #3]
 8010994:	4619      	mov	r1, r3
 8010996:	f7fe f980 	bl	800ec9a <USBD_LL_DataInStage>
}
 801099a:	bf00      	nop
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fe faba 	bl	800ef2a <USBD_LL_SOF>
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b084      	sub	sp, #16
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80109c6:	2301      	movs	r3, #1
 80109c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d102      	bne.n	80109d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80109d2:	2300      	movs	r3, #0
 80109d4:	73fb      	strb	r3, [r7, #15]
 80109d6:	e008      	b.n	80109ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	691b      	ldr	r3, [r3, #16]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	d102      	bne.n	80109e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80109e0:	2301      	movs	r3, #1
 80109e2:	73fb      	strb	r3, [r7, #15]
 80109e4:	e001      	b.n	80109ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80109e6:	f7f0 fac7 	bl	8000f78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109f0:	7bfa      	ldrb	r2, [r7, #15]
 80109f2:	4611      	mov	r1, r2
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fe fa54 	bl	800eea2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fe f9fc 	bl	800edfe <USBD_LL_Reset>
}
 8010a06:	bf00      	nop
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
	...

08010a10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fe fa4f 	bl	800eec2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6812      	ldr	r2, [r2, #0]
 8010a32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a36:	f043 0301 	orr.w	r3, r3, #1
 8010a3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d005      	beq.n	8010a50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010a44:	4b04      	ldr	r3, [pc, #16]	; (8010a58 <HAL_PCD_SuspendCallback+0x48>)
 8010a46:	691b      	ldr	r3, [r3, #16]
 8010a48:	4a03      	ldr	r2, [pc, #12]	; (8010a58 <HAL_PCD_SuspendCallback+0x48>)
 8010a4a:	f043 0306 	orr.w	r3, r3, #6
 8010a4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	e000ed00 	.word	0xe000ed00

08010a5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fe fa45 	bl	800eefa <USBD_LL_Resume>
}
 8010a70:	bf00      	nop
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	460b      	mov	r3, r1
 8010a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a8a:	78fa      	ldrb	r2, [r7, #3]
 8010a8c:	4611      	mov	r1, r2
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fe fa9d 	bl	800efce <USBD_LL_IsoOUTIncomplete>
}
 8010a94:	bf00      	nop
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010aae:	78fa      	ldrb	r2, [r7, #3]
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fe fa59 	bl	800ef6a <USBD_LL_IsoINIncomplete>
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fe faaf 	bl	800f032 <USBD_LL_DevConnected>
}
 8010ad4:	bf00      	nop
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fe faac 	bl	800f048 <USBD_LL_DevDisconnected>
}
 8010af0:	bf00      	nop
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d13e      	bne.n	8010b86 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010b08:	4a21      	ldr	r2, [pc, #132]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4a1f      	ldr	r2, [pc, #124]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010b18:	4b1d      	ldr	r3, [pc, #116]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b1a:	4a1e      	ldr	r2, [pc, #120]	; (8010b94 <USBD_LL_Init+0x9c>)
 8010b1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010b1e:	4b1c      	ldr	r3, [pc, #112]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b20:	2209      	movs	r2, #9
 8010b22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010b24:	4b1a      	ldr	r3, [pc, #104]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b26:	2202      	movs	r2, #2
 8010b28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010b2a:	4b19      	ldr	r3, [pc, #100]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010b30:	4b17      	ldr	r3, [pc, #92]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b32:	2202      	movs	r2, #2
 8010b34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010b36:	4b16      	ldr	r3, [pc, #88]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010b3c:	4b14      	ldr	r3, [pc, #80]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010b42:	4b13      	ldr	r3, [pc, #76]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b44:	2200      	movs	r2, #0
 8010b46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010b48:	4b11      	ldr	r3, [pc, #68]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010b4e:	4b10      	ldr	r3, [pc, #64]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b50:	2200      	movs	r2, #0
 8010b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010b54:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b56:	2200      	movs	r2, #0
 8010b58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010b5a:	480d      	ldr	r0, [pc, #52]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b5c:	f7f5 facf 	bl	80060fe <HAL_PCD_Init>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d001      	beq.n	8010b6a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010b66:	f7f0 fa07 	bl	8000f78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010b6a:	2180      	movs	r1, #128	; 0x80
 8010b6c:	4808      	ldr	r0, [pc, #32]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b6e:	f7f6 fd3e 	bl	80075ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010b72:	2240      	movs	r2, #64	; 0x40
 8010b74:	2100      	movs	r1, #0
 8010b76:	4806      	ldr	r0, [pc, #24]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b78:	f7f6 fcf2 	bl	8007560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010b7c:	2280      	movs	r2, #128	; 0x80
 8010b7e:	2101      	movs	r1, #1
 8010b80:	4803      	ldr	r0, [pc, #12]	; (8010b90 <USBD_LL_Init+0x98>)
 8010b82:	f7f6 fced 	bl	8007560 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	24001a14 	.word	0x24001a14
 8010b94:	40080000 	.word	0x40080000

08010b98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7f5 fbc9 	bl	8006346 <HAL_PCD_Start>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 f942 	bl	8010e44 <USBD_Get_USB_Status>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	4608      	mov	r0, r1
 8010bd8:	4611      	mov	r1, r2
 8010bda:	461a      	mov	r2, r3
 8010bdc:	4603      	mov	r3, r0
 8010bde:	70fb      	strb	r3, [r7, #3]
 8010be0:	460b      	mov	r3, r1
 8010be2:	70bb      	strb	r3, [r7, #2]
 8010be4:	4613      	mov	r3, r2
 8010be6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be8:	2300      	movs	r3, #0
 8010bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010bf6:	78bb      	ldrb	r3, [r7, #2]
 8010bf8:	883a      	ldrh	r2, [r7, #0]
 8010bfa:	78f9      	ldrb	r1, [r7, #3]
 8010bfc:	f7f6 f8c9 	bl	8006d92 <HAL_PCD_EP_Open>
 8010c00:	4603      	mov	r3, r0
 8010c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c04:	7bfb      	ldrb	r3, [r7, #15]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f000 f91c 	bl	8010e44 <USBD_Get_USB_Status>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b084      	sub	sp, #16
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	460b      	mov	r3, r1
 8010c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c34:	78fa      	ldrb	r2, [r7, #3]
 8010c36:	4611      	mov	r1, r2
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f6 f912 	bl	8006e62 <HAL_PCD_EP_Close>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f000 f8fd 	bl	8010e44 <USBD_Get_USB_Status>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c72:	78fa      	ldrb	r2, [r7, #3]
 8010c74:	4611      	mov	r1, r2
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7f6 f9cc 	bl	8007014 <HAL_PCD_EP_SetStall>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f8de 	bl	8010e44 <USBD_Get_USB_Status>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b084      	sub	sp, #16
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010cb0:	78fa      	ldrb	r2, [r7, #3]
 8010cb2:	4611      	mov	r1, r2
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7f6 fa11 	bl	80070dc <HAL_PCD_EP_ClrStall>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cbe:	7bfb      	ldrb	r3, [r7, #15]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f000 f8bf 	bl	8010e44 <USBD_Get_USB_Status>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b085      	sub	sp, #20
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	da0b      	bge.n	8010d08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cf6:	68f9      	ldr	r1, [r7, #12]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	440b      	add	r3, r1
 8010d02:	333e      	adds	r3, #62	; 0x3e
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	e00b      	b.n	8010d20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d08:	78fb      	ldrb	r3, [r7, #3]
 8010d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d0e:	68f9      	ldr	r1, [r7, #12]
 8010d10:	4613      	mov	r3, r2
 8010d12:	00db      	lsls	r3, r3, #3
 8010d14:	4413      	add	r3, r2
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	440b      	add	r3, r1
 8010d1a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	460b      	mov	r3, r1
 8010d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d46:	78fa      	ldrb	r2, [r7, #3]
 8010d48:	4611      	mov	r1, r2
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7f5 fffc 	bl	8006d48 <HAL_PCD_SetAddress>
 8010d50:	4603      	mov	r3, r0
 8010d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 f874 	bl	8010e44 <USBD_Get_USB_Status>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b086      	sub	sp, #24
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	60f8      	str	r0, [r7, #12]
 8010d72:	607a      	str	r2, [r7, #4]
 8010d74:	603b      	str	r3, [r7, #0]
 8010d76:	460b      	mov	r3, r1
 8010d78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d88:	7af9      	ldrb	r1, [r7, #11]
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	f7f6 f906 	bl	8006f9e <HAL_PCD_EP_Transmit>
 8010d92:	4603      	mov	r3, r0
 8010d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f000 f853 	bl	8010e44 <USBD_Get_USB_Status>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3718      	adds	r7, #24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	607a      	str	r2, [r7, #4]
 8010db6:	603b      	str	r3, [r7, #0]
 8010db8:	460b      	mov	r3, r1
 8010dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010dca:	7af9      	ldrb	r1, [r7, #11]
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	f7f6 f891 	bl	8006ef6 <HAL_PCD_EP_Receive>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dd8:	7dfb      	ldrb	r3, [r7, #23]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f000 f832 	bl	8010e44 <USBD_Get_USB_Status>
 8010de0:	4603      	mov	r3, r0
 8010de2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3718      	adds	r7, #24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b082      	sub	sp, #8
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	460b      	mov	r3, r1
 8010df8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e00:	78fa      	ldrb	r2, [r7, #3]
 8010e02:	4611      	mov	r1, r2
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7f6 f8b2 	bl	8006f6e <HAL_PCD_EP_GetRxCount>
 8010e0a:	4603      	mov	r3, r0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010e1c:	4b03      	ldr	r3, [pc, #12]	; (8010e2c <USBD_static_malloc+0x18>)
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	24001f20 	.word	0x24001f20

08010e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010e38:	bf00      	nop
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b085      	sub	sp, #20
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d817      	bhi.n	8010e88 <USBD_Get_USB_Status+0x44>
 8010e58:	a201      	add	r2, pc, #4	; (adr r2, 8010e60 <USBD_Get_USB_Status+0x1c>)
 8010e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5e:	bf00      	nop
 8010e60:	08010e71 	.word	0x08010e71
 8010e64:	08010e77 	.word	0x08010e77
 8010e68:	08010e7d 	.word	0x08010e7d
 8010e6c:	08010e83 	.word	0x08010e83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	73fb      	strb	r3, [r7, #15]
    break;
 8010e74:	e00b      	b.n	8010e8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e76:	2303      	movs	r3, #3
 8010e78:	73fb      	strb	r3, [r7, #15]
    break;
 8010e7a:	e008      	b.n	8010e8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e80:	e005      	b.n	8010e8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e82:	2303      	movs	r3, #3
 8010e84:	73fb      	strb	r3, [r7, #15]
    break;
 8010e86:	e002      	b.n	8010e8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e88:	2303      	movs	r3, #3
 8010e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e8c:	bf00      	nop
  }
  return usb_status;
 8010e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3714      	adds	r7, #20
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <arm_sin_f32>:
 8010e9c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010f1c <arm_sin_f32+0x80>
 8010ea0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010ea4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010ea8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	d504      	bpl.n	8010ebc <arm_sin_f32+0x20>
 8010eb2:	ee17 3a90 	vmov	r3, s15
 8010eb6:	3b01      	subs	r3, #1
 8010eb8:	ee07 3a90 	vmov	s15, r3
 8010ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ec0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010f20 <arm_sin_f32+0x84>
 8010ec4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010ec8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ecc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010ed0:	ee17 3a10 	vmov	r3, s14
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010eda:	d21a      	bcs.n	8010f12 <arm_sin_f32+0x76>
 8010edc:	ee07 3a10 	vmov	s14, r3
 8010ee0:	1c59      	adds	r1, r3, #1
 8010ee2:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8010ee6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010eea:	4a0e      	ldr	r2, [pc, #56]	; (8010f24 <arm_sin_f32+0x88>)
 8010eec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010ef0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ef4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010ef8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010efc:	edd3 6a00 	vldr	s13, [r3]
 8010f00:	ed92 7a00 	vldr	s14, [r2]
 8010f04:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f10:	4770      	bx	lr
 8010f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010f16:	2101      	movs	r1, #1
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e7e6      	b.n	8010eea <arm_sin_f32+0x4e>
 8010f1c:	3e22f983 	.word	0x3e22f983
 8010f20:	44000000 	.word	0x44000000
 8010f24:	08013eb0 	.word	0x08013eb0

08010f28 <arm_cos_f32>:
 8010f28:	eddf 7a21 	vldr	s15, [pc, #132]	; 8010fb0 <arm_cos_f32+0x88>
 8010f2c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8010f30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f34:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010f38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010f3c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f44:	d504      	bpl.n	8010f50 <arm_cos_f32+0x28>
 8010f46:	ee17 3a90 	vmov	r3, s15
 8010f4a:	3b01      	subs	r3, #1
 8010f4c:	ee07 3a90 	vmov	s15, r3
 8010f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f54:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010fb4 <arm_cos_f32+0x8c>
 8010f58:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010f5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f60:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010f64:	ee17 3a10 	vmov	r3, s14
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f6e:	d21a      	bcs.n	8010fa6 <arm_cos_f32+0x7e>
 8010f70:	ee07 3a10 	vmov	s14, r3
 8010f74:	1c59      	adds	r1, r3, #1
 8010f76:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8010f7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010f7e:	4a0e      	ldr	r2, [pc, #56]	; (8010fb8 <arm_cos_f32+0x90>)
 8010f80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010f84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010f8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010f90:	edd3 6a00 	vldr	s13, [r3]
 8010f94:	ed92 7a00 	vldr	s14, [r2]
 8010f98:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fa0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010fa4:	4770      	bx	lr
 8010fa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010faa:	2101      	movs	r1, #1
 8010fac:	2300      	movs	r3, #0
 8010fae:	e7e6      	b.n	8010f7e <arm_cos_f32+0x56>
 8010fb0:	3e22f983 	.word	0x3e22f983
 8010fb4:	44000000 	.word	0x44000000
 8010fb8:	08013eb0 	.word	0x08013eb0

08010fbc <malloc>:
 8010fbc:	4b02      	ldr	r3, [pc, #8]	; (8010fc8 <malloc+0xc>)
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	6818      	ldr	r0, [r3, #0]
 8010fc2:	f000 b823 	b.w	801100c <_malloc_r>
 8010fc6:	bf00      	nop
 8010fc8:	24000160 	.word	0x24000160

08010fcc <sbrk_aligned>:
 8010fcc:	b570      	push	{r4, r5, r6, lr}
 8010fce:	4e0e      	ldr	r6, [pc, #56]	; (8011008 <sbrk_aligned+0x3c>)
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	6831      	ldr	r1, [r6, #0]
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	b911      	cbnz	r1, 8010fde <sbrk_aligned+0x12>
 8010fd8:	f000 fe46 	bl	8011c68 <_sbrk_r>
 8010fdc:	6030      	str	r0, [r6, #0]
 8010fde:	4621      	mov	r1, r4
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	f000 fe41 	bl	8011c68 <_sbrk_r>
 8010fe6:	1c43      	adds	r3, r0, #1
 8010fe8:	d00a      	beq.n	8011000 <sbrk_aligned+0x34>
 8010fea:	1cc4      	adds	r4, r0, #3
 8010fec:	f024 0403 	bic.w	r4, r4, #3
 8010ff0:	42a0      	cmp	r0, r4
 8010ff2:	d007      	beq.n	8011004 <sbrk_aligned+0x38>
 8010ff4:	1a21      	subs	r1, r4, r0
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	f000 fe36 	bl	8011c68 <_sbrk_r>
 8010ffc:	3001      	adds	r0, #1
 8010ffe:	d101      	bne.n	8011004 <sbrk_aligned+0x38>
 8011000:	f04f 34ff 	mov.w	r4, #4294967295
 8011004:	4620      	mov	r0, r4
 8011006:	bd70      	pop	{r4, r5, r6, pc}
 8011008:	24002144 	.word	0x24002144

0801100c <_malloc_r>:
 801100c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011010:	1ccd      	adds	r5, r1, #3
 8011012:	f025 0503 	bic.w	r5, r5, #3
 8011016:	3508      	adds	r5, #8
 8011018:	2d0c      	cmp	r5, #12
 801101a:	bf38      	it	cc
 801101c:	250c      	movcc	r5, #12
 801101e:	2d00      	cmp	r5, #0
 8011020:	4607      	mov	r7, r0
 8011022:	db01      	blt.n	8011028 <_malloc_r+0x1c>
 8011024:	42a9      	cmp	r1, r5
 8011026:	d905      	bls.n	8011034 <_malloc_r+0x28>
 8011028:	230c      	movs	r3, #12
 801102a:	603b      	str	r3, [r7, #0]
 801102c:	2600      	movs	r6, #0
 801102e:	4630      	mov	r0, r6
 8011030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011034:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011108 <_malloc_r+0xfc>
 8011038:	f000 f868 	bl	801110c <__malloc_lock>
 801103c:	f8d8 3000 	ldr.w	r3, [r8]
 8011040:	461c      	mov	r4, r3
 8011042:	bb5c      	cbnz	r4, 801109c <_malloc_r+0x90>
 8011044:	4629      	mov	r1, r5
 8011046:	4638      	mov	r0, r7
 8011048:	f7ff ffc0 	bl	8010fcc <sbrk_aligned>
 801104c:	1c43      	adds	r3, r0, #1
 801104e:	4604      	mov	r4, r0
 8011050:	d155      	bne.n	80110fe <_malloc_r+0xf2>
 8011052:	f8d8 4000 	ldr.w	r4, [r8]
 8011056:	4626      	mov	r6, r4
 8011058:	2e00      	cmp	r6, #0
 801105a:	d145      	bne.n	80110e8 <_malloc_r+0xdc>
 801105c:	2c00      	cmp	r4, #0
 801105e:	d048      	beq.n	80110f2 <_malloc_r+0xe6>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	4631      	mov	r1, r6
 8011064:	4638      	mov	r0, r7
 8011066:	eb04 0903 	add.w	r9, r4, r3
 801106a:	f000 fdfd 	bl	8011c68 <_sbrk_r>
 801106e:	4581      	cmp	r9, r0
 8011070:	d13f      	bne.n	80110f2 <_malloc_r+0xe6>
 8011072:	6821      	ldr	r1, [r4, #0]
 8011074:	1a6d      	subs	r5, r5, r1
 8011076:	4629      	mov	r1, r5
 8011078:	4638      	mov	r0, r7
 801107a:	f7ff ffa7 	bl	8010fcc <sbrk_aligned>
 801107e:	3001      	adds	r0, #1
 8011080:	d037      	beq.n	80110f2 <_malloc_r+0xe6>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	442b      	add	r3, r5
 8011086:	6023      	str	r3, [r4, #0]
 8011088:	f8d8 3000 	ldr.w	r3, [r8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d038      	beq.n	8011102 <_malloc_r+0xf6>
 8011090:	685a      	ldr	r2, [r3, #4]
 8011092:	42a2      	cmp	r2, r4
 8011094:	d12b      	bne.n	80110ee <_malloc_r+0xe2>
 8011096:	2200      	movs	r2, #0
 8011098:	605a      	str	r2, [r3, #4]
 801109a:	e00f      	b.n	80110bc <_malloc_r+0xb0>
 801109c:	6822      	ldr	r2, [r4, #0]
 801109e:	1b52      	subs	r2, r2, r5
 80110a0:	d41f      	bmi.n	80110e2 <_malloc_r+0xd6>
 80110a2:	2a0b      	cmp	r2, #11
 80110a4:	d917      	bls.n	80110d6 <_malloc_r+0xca>
 80110a6:	1961      	adds	r1, r4, r5
 80110a8:	42a3      	cmp	r3, r4
 80110aa:	6025      	str	r5, [r4, #0]
 80110ac:	bf18      	it	ne
 80110ae:	6059      	strne	r1, [r3, #4]
 80110b0:	6863      	ldr	r3, [r4, #4]
 80110b2:	bf08      	it	eq
 80110b4:	f8c8 1000 	streq.w	r1, [r8]
 80110b8:	5162      	str	r2, [r4, r5]
 80110ba:	604b      	str	r3, [r1, #4]
 80110bc:	4638      	mov	r0, r7
 80110be:	f104 060b 	add.w	r6, r4, #11
 80110c2:	f000 f829 	bl	8011118 <__malloc_unlock>
 80110c6:	f026 0607 	bic.w	r6, r6, #7
 80110ca:	1d23      	adds	r3, r4, #4
 80110cc:	1af2      	subs	r2, r6, r3
 80110ce:	d0ae      	beq.n	801102e <_malloc_r+0x22>
 80110d0:	1b9b      	subs	r3, r3, r6
 80110d2:	50a3      	str	r3, [r4, r2]
 80110d4:	e7ab      	b.n	801102e <_malloc_r+0x22>
 80110d6:	42a3      	cmp	r3, r4
 80110d8:	6862      	ldr	r2, [r4, #4]
 80110da:	d1dd      	bne.n	8011098 <_malloc_r+0x8c>
 80110dc:	f8c8 2000 	str.w	r2, [r8]
 80110e0:	e7ec      	b.n	80110bc <_malloc_r+0xb0>
 80110e2:	4623      	mov	r3, r4
 80110e4:	6864      	ldr	r4, [r4, #4]
 80110e6:	e7ac      	b.n	8011042 <_malloc_r+0x36>
 80110e8:	4634      	mov	r4, r6
 80110ea:	6876      	ldr	r6, [r6, #4]
 80110ec:	e7b4      	b.n	8011058 <_malloc_r+0x4c>
 80110ee:	4613      	mov	r3, r2
 80110f0:	e7cc      	b.n	801108c <_malloc_r+0x80>
 80110f2:	230c      	movs	r3, #12
 80110f4:	603b      	str	r3, [r7, #0]
 80110f6:	4638      	mov	r0, r7
 80110f8:	f000 f80e 	bl	8011118 <__malloc_unlock>
 80110fc:	e797      	b.n	801102e <_malloc_r+0x22>
 80110fe:	6025      	str	r5, [r4, #0]
 8011100:	e7dc      	b.n	80110bc <_malloc_r+0xb0>
 8011102:	605b      	str	r3, [r3, #4]
 8011104:	deff      	udf	#255	; 0xff
 8011106:	bf00      	nop
 8011108:	24002140 	.word	0x24002140

0801110c <__malloc_lock>:
 801110c:	4801      	ldr	r0, [pc, #4]	; (8011114 <__malloc_lock+0x8>)
 801110e:	f000 bdf8 	b.w	8011d02 <__retarget_lock_acquire_recursive>
 8011112:	bf00      	nop
 8011114:	24002288 	.word	0x24002288

08011118 <__malloc_unlock>:
 8011118:	4801      	ldr	r0, [pc, #4]	; (8011120 <__malloc_unlock+0x8>)
 801111a:	f000 bdf3 	b.w	8011d04 <__retarget_lock_release_recursive>
 801111e:	bf00      	nop
 8011120:	24002288 	.word	0x24002288

08011124 <__cvt>:
 8011124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011126:	ed2d 8b02 	vpush	{d8}
 801112a:	eeb0 8b40 	vmov.f64	d8, d0
 801112e:	b085      	sub	sp, #20
 8011130:	4617      	mov	r7, r2
 8011132:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011134:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011136:	ee18 2a90 	vmov	r2, s17
 801113a:	f025 0520 	bic.w	r5, r5, #32
 801113e:	2a00      	cmp	r2, #0
 8011140:	bfb6      	itet	lt
 8011142:	222d      	movlt	r2, #45	; 0x2d
 8011144:	2200      	movge	r2, #0
 8011146:	eeb1 8b40 	vneglt.f64	d8, d0
 801114a:	2d46      	cmp	r5, #70	; 0x46
 801114c:	460c      	mov	r4, r1
 801114e:	701a      	strb	r2, [r3, #0]
 8011150:	d004      	beq.n	801115c <__cvt+0x38>
 8011152:	2d45      	cmp	r5, #69	; 0x45
 8011154:	d100      	bne.n	8011158 <__cvt+0x34>
 8011156:	3401      	adds	r4, #1
 8011158:	2102      	movs	r1, #2
 801115a:	e000      	b.n	801115e <__cvt+0x3a>
 801115c:	2103      	movs	r1, #3
 801115e:	ab03      	add	r3, sp, #12
 8011160:	9301      	str	r3, [sp, #4]
 8011162:	ab02      	add	r3, sp, #8
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	4622      	mov	r2, r4
 8011168:	4633      	mov	r3, r6
 801116a:	eeb0 0b48 	vmov.f64	d0, d8
 801116e:	f000 fe53 	bl	8011e18 <_dtoa_r>
 8011172:	2d47      	cmp	r5, #71	; 0x47
 8011174:	d101      	bne.n	801117a <__cvt+0x56>
 8011176:	07fb      	lsls	r3, r7, #31
 8011178:	d51a      	bpl.n	80111b0 <__cvt+0x8c>
 801117a:	2d46      	cmp	r5, #70	; 0x46
 801117c:	eb00 0204 	add.w	r2, r0, r4
 8011180:	d10c      	bne.n	801119c <__cvt+0x78>
 8011182:	7803      	ldrb	r3, [r0, #0]
 8011184:	2b30      	cmp	r3, #48	; 0x30
 8011186:	d107      	bne.n	8011198 <__cvt+0x74>
 8011188:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011190:	bf1c      	itt	ne
 8011192:	f1c4 0401 	rsbne	r4, r4, #1
 8011196:	6034      	strne	r4, [r6, #0]
 8011198:	6833      	ldr	r3, [r6, #0]
 801119a:	441a      	add	r2, r3
 801119c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80111a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a4:	bf08      	it	eq
 80111a6:	9203      	streq	r2, [sp, #12]
 80111a8:	2130      	movs	r1, #48	; 0x30
 80111aa:	9b03      	ldr	r3, [sp, #12]
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d307      	bcc.n	80111c0 <__cvt+0x9c>
 80111b0:	9b03      	ldr	r3, [sp, #12]
 80111b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111b4:	1a1b      	subs	r3, r3, r0
 80111b6:	6013      	str	r3, [r2, #0]
 80111b8:	b005      	add	sp, #20
 80111ba:	ecbd 8b02 	vpop	{d8}
 80111be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111c0:	1c5c      	adds	r4, r3, #1
 80111c2:	9403      	str	r4, [sp, #12]
 80111c4:	7019      	strb	r1, [r3, #0]
 80111c6:	e7f0      	b.n	80111aa <__cvt+0x86>

080111c8 <__exponent>:
 80111c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111ca:	4603      	mov	r3, r0
 80111cc:	2900      	cmp	r1, #0
 80111ce:	bfb8      	it	lt
 80111d0:	4249      	neglt	r1, r1
 80111d2:	f803 2b02 	strb.w	r2, [r3], #2
 80111d6:	bfb4      	ite	lt
 80111d8:	222d      	movlt	r2, #45	; 0x2d
 80111da:	222b      	movge	r2, #43	; 0x2b
 80111dc:	2909      	cmp	r1, #9
 80111de:	7042      	strb	r2, [r0, #1]
 80111e0:	dd2a      	ble.n	8011238 <__exponent+0x70>
 80111e2:	f10d 0207 	add.w	r2, sp, #7
 80111e6:	4617      	mov	r7, r2
 80111e8:	260a      	movs	r6, #10
 80111ea:	4694      	mov	ip, r2
 80111ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80111f0:	fb06 1415 	mls	r4, r6, r5, r1
 80111f4:	3430      	adds	r4, #48	; 0x30
 80111f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80111fa:	460c      	mov	r4, r1
 80111fc:	2c63      	cmp	r4, #99	; 0x63
 80111fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8011202:	4629      	mov	r1, r5
 8011204:	dcf1      	bgt.n	80111ea <__exponent+0x22>
 8011206:	3130      	adds	r1, #48	; 0x30
 8011208:	f1ac 0402 	sub.w	r4, ip, #2
 801120c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011210:	1c41      	adds	r1, r0, #1
 8011212:	4622      	mov	r2, r4
 8011214:	42ba      	cmp	r2, r7
 8011216:	d30a      	bcc.n	801122e <__exponent+0x66>
 8011218:	f10d 0209 	add.w	r2, sp, #9
 801121c:	eba2 020c 	sub.w	r2, r2, ip
 8011220:	42bc      	cmp	r4, r7
 8011222:	bf88      	it	hi
 8011224:	2200      	movhi	r2, #0
 8011226:	4413      	add	r3, r2
 8011228:	1a18      	subs	r0, r3, r0
 801122a:	b003      	add	sp, #12
 801122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801122e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011232:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011236:	e7ed      	b.n	8011214 <__exponent+0x4c>
 8011238:	2330      	movs	r3, #48	; 0x30
 801123a:	3130      	adds	r1, #48	; 0x30
 801123c:	7083      	strb	r3, [r0, #2]
 801123e:	70c1      	strb	r1, [r0, #3]
 8011240:	1d03      	adds	r3, r0, #4
 8011242:	e7f1      	b.n	8011228 <__exponent+0x60>
 8011244:	0000      	movs	r0, r0
	...

08011248 <_printf_float>:
 8011248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	b08b      	sub	sp, #44	; 0x2c
 801124e:	460c      	mov	r4, r1
 8011250:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011254:	4616      	mov	r6, r2
 8011256:	461f      	mov	r7, r3
 8011258:	4605      	mov	r5, r0
 801125a:	f000 fccd 	bl	8011bf8 <_localeconv_r>
 801125e:	f8d0 b000 	ldr.w	fp, [r0]
 8011262:	4658      	mov	r0, fp
 8011264:	f7ef f88c 	bl	8000380 <strlen>
 8011268:	2300      	movs	r3, #0
 801126a:	9308      	str	r3, [sp, #32]
 801126c:	f8d8 3000 	ldr.w	r3, [r8]
 8011270:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011274:	6822      	ldr	r2, [r4, #0]
 8011276:	3307      	adds	r3, #7
 8011278:	f023 0307 	bic.w	r3, r3, #7
 801127c:	f103 0108 	add.w	r1, r3, #8
 8011280:	f8c8 1000 	str.w	r1, [r8]
 8011284:	ed93 0b00 	vldr	d0, [r3]
 8011288:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80114e8 <_printf_float+0x2a0>
 801128c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011290:	eeb4 7b46 	vcmp.f64	d7, d6
 8011294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011298:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801129c:	4682      	mov	sl, r0
 801129e:	dd24      	ble.n	80112ea <_printf_float+0xa2>
 80112a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80112a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a8:	d502      	bpl.n	80112b0 <_printf_float+0x68>
 80112aa:	232d      	movs	r3, #45	; 0x2d
 80112ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112b0:	498f      	ldr	r1, [pc, #572]	; (80114f0 <_printf_float+0x2a8>)
 80112b2:	4b90      	ldr	r3, [pc, #576]	; (80114f4 <_printf_float+0x2ac>)
 80112b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80112b8:	bf94      	ite	ls
 80112ba:	4688      	movls	r8, r1
 80112bc:	4698      	movhi	r8, r3
 80112be:	2303      	movs	r3, #3
 80112c0:	6123      	str	r3, [r4, #16]
 80112c2:	f022 0204 	bic.w	r2, r2, #4
 80112c6:	2300      	movs	r3, #0
 80112c8:	6022      	str	r2, [r4, #0]
 80112ca:	9304      	str	r3, [sp, #16]
 80112cc:	9700      	str	r7, [sp, #0]
 80112ce:	4633      	mov	r3, r6
 80112d0:	aa09      	add	r2, sp, #36	; 0x24
 80112d2:	4621      	mov	r1, r4
 80112d4:	4628      	mov	r0, r5
 80112d6:	f000 f9d1 	bl	801167c <_printf_common>
 80112da:	3001      	adds	r0, #1
 80112dc:	f040 808a 	bne.w	80113f4 <_printf_float+0x1ac>
 80112e0:	f04f 30ff 	mov.w	r0, #4294967295
 80112e4:	b00b      	add	sp, #44	; 0x2c
 80112e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80112ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f2:	d709      	bvc.n	8011308 <_printf_float+0xc0>
 80112f4:	ee10 3a90 	vmov	r3, s1
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	bfbc      	itt	lt
 80112fc:	232d      	movlt	r3, #45	; 0x2d
 80112fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011302:	497d      	ldr	r1, [pc, #500]	; (80114f8 <_printf_float+0x2b0>)
 8011304:	4b7d      	ldr	r3, [pc, #500]	; (80114fc <_printf_float+0x2b4>)
 8011306:	e7d5      	b.n	80112b4 <_printf_float+0x6c>
 8011308:	6863      	ldr	r3, [r4, #4]
 801130a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801130e:	9104      	str	r1, [sp, #16]
 8011310:	1c59      	adds	r1, r3, #1
 8011312:	d13c      	bne.n	801138e <_printf_float+0x146>
 8011314:	2306      	movs	r3, #6
 8011316:	6063      	str	r3, [r4, #4]
 8011318:	2300      	movs	r3, #0
 801131a:	9303      	str	r3, [sp, #12]
 801131c:	ab08      	add	r3, sp, #32
 801131e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011326:	ab07      	add	r3, sp, #28
 8011328:	6861      	ldr	r1, [r4, #4]
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	6022      	str	r2, [r4, #0]
 801132e:	f10d 031b 	add.w	r3, sp, #27
 8011332:	4628      	mov	r0, r5
 8011334:	f7ff fef6 	bl	8011124 <__cvt>
 8011338:	9b04      	ldr	r3, [sp, #16]
 801133a:	9907      	ldr	r1, [sp, #28]
 801133c:	2b47      	cmp	r3, #71	; 0x47
 801133e:	4680      	mov	r8, r0
 8011340:	d108      	bne.n	8011354 <_printf_float+0x10c>
 8011342:	1cc8      	adds	r0, r1, #3
 8011344:	db02      	blt.n	801134c <_printf_float+0x104>
 8011346:	6863      	ldr	r3, [r4, #4]
 8011348:	4299      	cmp	r1, r3
 801134a:	dd41      	ble.n	80113d0 <_printf_float+0x188>
 801134c:	f1a9 0902 	sub.w	r9, r9, #2
 8011350:	fa5f f989 	uxtb.w	r9, r9
 8011354:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011358:	d820      	bhi.n	801139c <_printf_float+0x154>
 801135a:	3901      	subs	r1, #1
 801135c:	464a      	mov	r2, r9
 801135e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011362:	9107      	str	r1, [sp, #28]
 8011364:	f7ff ff30 	bl	80111c8 <__exponent>
 8011368:	9a08      	ldr	r2, [sp, #32]
 801136a:	9004      	str	r0, [sp, #16]
 801136c:	1813      	adds	r3, r2, r0
 801136e:	2a01      	cmp	r2, #1
 8011370:	6123      	str	r3, [r4, #16]
 8011372:	dc02      	bgt.n	801137a <_printf_float+0x132>
 8011374:	6822      	ldr	r2, [r4, #0]
 8011376:	07d2      	lsls	r2, r2, #31
 8011378:	d501      	bpl.n	801137e <_printf_float+0x136>
 801137a:	3301      	adds	r3, #1
 801137c:	6123      	str	r3, [r4, #16]
 801137e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d0a2      	beq.n	80112cc <_printf_float+0x84>
 8011386:	232d      	movs	r3, #45	; 0x2d
 8011388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801138c:	e79e      	b.n	80112cc <_printf_float+0x84>
 801138e:	9904      	ldr	r1, [sp, #16]
 8011390:	2947      	cmp	r1, #71	; 0x47
 8011392:	d1c1      	bne.n	8011318 <_printf_float+0xd0>
 8011394:	2b00      	cmp	r3, #0
 8011396:	d1bf      	bne.n	8011318 <_printf_float+0xd0>
 8011398:	2301      	movs	r3, #1
 801139a:	e7bc      	b.n	8011316 <_printf_float+0xce>
 801139c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80113a0:	d118      	bne.n	80113d4 <_printf_float+0x18c>
 80113a2:	2900      	cmp	r1, #0
 80113a4:	6863      	ldr	r3, [r4, #4]
 80113a6:	dd0b      	ble.n	80113c0 <_printf_float+0x178>
 80113a8:	6121      	str	r1, [r4, #16]
 80113aa:	b913      	cbnz	r3, 80113b2 <_printf_float+0x16a>
 80113ac:	6822      	ldr	r2, [r4, #0]
 80113ae:	07d0      	lsls	r0, r2, #31
 80113b0:	d502      	bpl.n	80113b8 <_printf_float+0x170>
 80113b2:	3301      	adds	r3, #1
 80113b4:	440b      	add	r3, r1
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	2300      	movs	r3, #0
 80113ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80113bc:	9304      	str	r3, [sp, #16]
 80113be:	e7de      	b.n	801137e <_printf_float+0x136>
 80113c0:	b913      	cbnz	r3, 80113c8 <_printf_float+0x180>
 80113c2:	6822      	ldr	r2, [r4, #0]
 80113c4:	07d2      	lsls	r2, r2, #31
 80113c6:	d501      	bpl.n	80113cc <_printf_float+0x184>
 80113c8:	3302      	adds	r3, #2
 80113ca:	e7f4      	b.n	80113b6 <_printf_float+0x16e>
 80113cc:	2301      	movs	r3, #1
 80113ce:	e7f2      	b.n	80113b6 <_printf_float+0x16e>
 80113d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80113d4:	9b08      	ldr	r3, [sp, #32]
 80113d6:	4299      	cmp	r1, r3
 80113d8:	db05      	blt.n	80113e6 <_printf_float+0x19e>
 80113da:	6823      	ldr	r3, [r4, #0]
 80113dc:	6121      	str	r1, [r4, #16]
 80113de:	07d8      	lsls	r0, r3, #31
 80113e0:	d5ea      	bpl.n	80113b8 <_printf_float+0x170>
 80113e2:	1c4b      	adds	r3, r1, #1
 80113e4:	e7e7      	b.n	80113b6 <_printf_float+0x16e>
 80113e6:	2900      	cmp	r1, #0
 80113e8:	bfd4      	ite	le
 80113ea:	f1c1 0202 	rsble	r2, r1, #2
 80113ee:	2201      	movgt	r2, #1
 80113f0:	4413      	add	r3, r2
 80113f2:	e7e0      	b.n	80113b6 <_printf_float+0x16e>
 80113f4:	6823      	ldr	r3, [r4, #0]
 80113f6:	055a      	lsls	r2, r3, #21
 80113f8:	d407      	bmi.n	801140a <_printf_float+0x1c2>
 80113fa:	6923      	ldr	r3, [r4, #16]
 80113fc:	4642      	mov	r2, r8
 80113fe:	4631      	mov	r1, r6
 8011400:	4628      	mov	r0, r5
 8011402:	47b8      	blx	r7
 8011404:	3001      	adds	r0, #1
 8011406:	d12a      	bne.n	801145e <_printf_float+0x216>
 8011408:	e76a      	b.n	80112e0 <_printf_float+0x98>
 801140a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801140e:	f240 80e0 	bls.w	80115d2 <_printf_float+0x38a>
 8011412:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011416:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141e:	d133      	bne.n	8011488 <_printf_float+0x240>
 8011420:	4a37      	ldr	r2, [pc, #220]	; (8011500 <_printf_float+0x2b8>)
 8011422:	2301      	movs	r3, #1
 8011424:	4631      	mov	r1, r6
 8011426:	4628      	mov	r0, r5
 8011428:	47b8      	blx	r7
 801142a:	3001      	adds	r0, #1
 801142c:	f43f af58 	beq.w	80112e0 <_printf_float+0x98>
 8011430:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011434:	429a      	cmp	r2, r3
 8011436:	db02      	blt.n	801143e <_printf_float+0x1f6>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	07d8      	lsls	r0, r3, #31
 801143c:	d50f      	bpl.n	801145e <_printf_float+0x216>
 801143e:	4653      	mov	r3, sl
 8011440:	465a      	mov	r2, fp
 8011442:	4631      	mov	r1, r6
 8011444:	4628      	mov	r0, r5
 8011446:	47b8      	blx	r7
 8011448:	3001      	adds	r0, #1
 801144a:	f43f af49 	beq.w	80112e0 <_printf_float+0x98>
 801144e:	f04f 0800 	mov.w	r8, #0
 8011452:	f104 091a 	add.w	r9, r4, #26
 8011456:	9b08      	ldr	r3, [sp, #32]
 8011458:	3b01      	subs	r3, #1
 801145a:	4543      	cmp	r3, r8
 801145c:	dc09      	bgt.n	8011472 <_printf_float+0x22a>
 801145e:	6823      	ldr	r3, [r4, #0]
 8011460:	079b      	lsls	r3, r3, #30
 8011462:	f100 8106 	bmi.w	8011672 <_printf_float+0x42a>
 8011466:	68e0      	ldr	r0, [r4, #12]
 8011468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801146a:	4298      	cmp	r0, r3
 801146c:	bfb8      	it	lt
 801146e:	4618      	movlt	r0, r3
 8011470:	e738      	b.n	80112e4 <_printf_float+0x9c>
 8011472:	2301      	movs	r3, #1
 8011474:	464a      	mov	r2, r9
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	47b8      	blx	r7
 801147c:	3001      	adds	r0, #1
 801147e:	f43f af2f 	beq.w	80112e0 <_printf_float+0x98>
 8011482:	f108 0801 	add.w	r8, r8, #1
 8011486:	e7e6      	b.n	8011456 <_printf_float+0x20e>
 8011488:	9b07      	ldr	r3, [sp, #28]
 801148a:	2b00      	cmp	r3, #0
 801148c:	dc3a      	bgt.n	8011504 <_printf_float+0x2bc>
 801148e:	4a1c      	ldr	r2, [pc, #112]	; (8011500 <_printf_float+0x2b8>)
 8011490:	2301      	movs	r3, #1
 8011492:	4631      	mov	r1, r6
 8011494:	4628      	mov	r0, r5
 8011496:	47b8      	blx	r7
 8011498:	3001      	adds	r0, #1
 801149a:	f43f af21 	beq.w	80112e0 <_printf_float+0x98>
 801149e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80114a2:	4313      	orrs	r3, r2
 80114a4:	d102      	bne.n	80114ac <_printf_float+0x264>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	07d9      	lsls	r1, r3, #31
 80114aa:	d5d8      	bpl.n	801145e <_printf_float+0x216>
 80114ac:	4653      	mov	r3, sl
 80114ae:	465a      	mov	r2, fp
 80114b0:	4631      	mov	r1, r6
 80114b2:	4628      	mov	r0, r5
 80114b4:	47b8      	blx	r7
 80114b6:	3001      	adds	r0, #1
 80114b8:	f43f af12 	beq.w	80112e0 <_printf_float+0x98>
 80114bc:	f04f 0900 	mov.w	r9, #0
 80114c0:	f104 0a1a 	add.w	sl, r4, #26
 80114c4:	9b07      	ldr	r3, [sp, #28]
 80114c6:	425b      	negs	r3, r3
 80114c8:	454b      	cmp	r3, r9
 80114ca:	dc01      	bgt.n	80114d0 <_printf_float+0x288>
 80114cc:	9b08      	ldr	r3, [sp, #32]
 80114ce:	e795      	b.n	80113fc <_printf_float+0x1b4>
 80114d0:	2301      	movs	r3, #1
 80114d2:	4652      	mov	r2, sl
 80114d4:	4631      	mov	r1, r6
 80114d6:	4628      	mov	r0, r5
 80114d8:	47b8      	blx	r7
 80114da:	3001      	adds	r0, #1
 80114dc:	f43f af00 	beq.w	80112e0 <_printf_float+0x98>
 80114e0:	f109 0901 	add.w	r9, r9, #1
 80114e4:	e7ee      	b.n	80114c4 <_printf_float+0x27c>
 80114e6:	bf00      	nop
 80114e8:	ffffffff 	.word	0xffffffff
 80114ec:	7fefffff 	.word	0x7fefffff
 80114f0:	080146b4 	.word	0x080146b4
 80114f4:	080146b8 	.word	0x080146b8
 80114f8:	080146bc 	.word	0x080146bc
 80114fc:	080146c0 	.word	0x080146c0
 8011500:	080146c4 	.word	0x080146c4
 8011504:	9a08      	ldr	r2, [sp, #32]
 8011506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011508:	429a      	cmp	r2, r3
 801150a:	bfa8      	it	ge
 801150c:	461a      	movge	r2, r3
 801150e:	2a00      	cmp	r2, #0
 8011510:	4691      	mov	r9, r2
 8011512:	dc38      	bgt.n	8011586 <_printf_float+0x33e>
 8011514:	2300      	movs	r3, #0
 8011516:	9305      	str	r3, [sp, #20]
 8011518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801151c:	f104 021a 	add.w	r2, r4, #26
 8011520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011522:	9905      	ldr	r1, [sp, #20]
 8011524:	9304      	str	r3, [sp, #16]
 8011526:	eba3 0309 	sub.w	r3, r3, r9
 801152a:	428b      	cmp	r3, r1
 801152c:	dc33      	bgt.n	8011596 <_printf_float+0x34e>
 801152e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011532:	429a      	cmp	r2, r3
 8011534:	db3c      	blt.n	80115b0 <_printf_float+0x368>
 8011536:	6823      	ldr	r3, [r4, #0]
 8011538:	07da      	lsls	r2, r3, #31
 801153a:	d439      	bmi.n	80115b0 <_printf_float+0x368>
 801153c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011540:	eba2 0903 	sub.w	r9, r2, r3
 8011544:	9b04      	ldr	r3, [sp, #16]
 8011546:	1ad2      	subs	r2, r2, r3
 8011548:	4591      	cmp	r9, r2
 801154a:	bfa8      	it	ge
 801154c:	4691      	movge	r9, r2
 801154e:	f1b9 0f00 	cmp.w	r9, #0
 8011552:	dc35      	bgt.n	80115c0 <_printf_float+0x378>
 8011554:	f04f 0800 	mov.w	r8, #0
 8011558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801155c:	f104 0a1a 	add.w	sl, r4, #26
 8011560:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011564:	1a9b      	subs	r3, r3, r2
 8011566:	eba3 0309 	sub.w	r3, r3, r9
 801156a:	4543      	cmp	r3, r8
 801156c:	f77f af77 	ble.w	801145e <_printf_float+0x216>
 8011570:	2301      	movs	r3, #1
 8011572:	4652      	mov	r2, sl
 8011574:	4631      	mov	r1, r6
 8011576:	4628      	mov	r0, r5
 8011578:	47b8      	blx	r7
 801157a:	3001      	adds	r0, #1
 801157c:	f43f aeb0 	beq.w	80112e0 <_printf_float+0x98>
 8011580:	f108 0801 	add.w	r8, r8, #1
 8011584:	e7ec      	b.n	8011560 <_printf_float+0x318>
 8011586:	4613      	mov	r3, r2
 8011588:	4631      	mov	r1, r6
 801158a:	4642      	mov	r2, r8
 801158c:	4628      	mov	r0, r5
 801158e:	47b8      	blx	r7
 8011590:	3001      	adds	r0, #1
 8011592:	d1bf      	bne.n	8011514 <_printf_float+0x2cc>
 8011594:	e6a4      	b.n	80112e0 <_printf_float+0x98>
 8011596:	2301      	movs	r3, #1
 8011598:	4631      	mov	r1, r6
 801159a:	4628      	mov	r0, r5
 801159c:	9204      	str	r2, [sp, #16]
 801159e:	47b8      	blx	r7
 80115a0:	3001      	adds	r0, #1
 80115a2:	f43f ae9d 	beq.w	80112e0 <_printf_float+0x98>
 80115a6:	9b05      	ldr	r3, [sp, #20]
 80115a8:	9a04      	ldr	r2, [sp, #16]
 80115aa:	3301      	adds	r3, #1
 80115ac:	9305      	str	r3, [sp, #20]
 80115ae:	e7b7      	b.n	8011520 <_printf_float+0x2d8>
 80115b0:	4653      	mov	r3, sl
 80115b2:	465a      	mov	r2, fp
 80115b4:	4631      	mov	r1, r6
 80115b6:	4628      	mov	r0, r5
 80115b8:	47b8      	blx	r7
 80115ba:	3001      	adds	r0, #1
 80115bc:	d1be      	bne.n	801153c <_printf_float+0x2f4>
 80115be:	e68f      	b.n	80112e0 <_printf_float+0x98>
 80115c0:	9a04      	ldr	r2, [sp, #16]
 80115c2:	464b      	mov	r3, r9
 80115c4:	4442      	add	r2, r8
 80115c6:	4631      	mov	r1, r6
 80115c8:	4628      	mov	r0, r5
 80115ca:	47b8      	blx	r7
 80115cc:	3001      	adds	r0, #1
 80115ce:	d1c1      	bne.n	8011554 <_printf_float+0x30c>
 80115d0:	e686      	b.n	80112e0 <_printf_float+0x98>
 80115d2:	9a08      	ldr	r2, [sp, #32]
 80115d4:	2a01      	cmp	r2, #1
 80115d6:	dc01      	bgt.n	80115dc <_printf_float+0x394>
 80115d8:	07db      	lsls	r3, r3, #31
 80115da:	d537      	bpl.n	801164c <_printf_float+0x404>
 80115dc:	2301      	movs	r3, #1
 80115de:	4642      	mov	r2, r8
 80115e0:	4631      	mov	r1, r6
 80115e2:	4628      	mov	r0, r5
 80115e4:	47b8      	blx	r7
 80115e6:	3001      	adds	r0, #1
 80115e8:	f43f ae7a 	beq.w	80112e0 <_printf_float+0x98>
 80115ec:	4653      	mov	r3, sl
 80115ee:	465a      	mov	r2, fp
 80115f0:	4631      	mov	r1, r6
 80115f2:	4628      	mov	r0, r5
 80115f4:	47b8      	blx	r7
 80115f6:	3001      	adds	r0, #1
 80115f8:	f43f ae72 	beq.w	80112e0 <_printf_float+0x98>
 80115fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011600:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011608:	9b08      	ldr	r3, [sp, #32]
 801160a:	d01a      	beq.n	8011642 <_printf_float+0x3fa>
 801160c:	3b01      	subs	r3, #1
 801160e:	f108 0201 	add.w	r2, r8, #1
 8011612:	4631      	mov	r1, r6
 8011614:	4628      	mov	r0, r5
 8011616:	47b8      	blx	r7
 8011618:	3001      	adds	r0, #1
 801161a:	d10e      	bne.n	801163a <_printf_float+0x3f2>
 801161c:	e660      	b.n	80112e0 <_printf_float+0x98>
 801161e:	2301      	movs	r3, #1
 8011620:	464a      	mov	r2, r9
 8011622:	4631      	mov	r1, r6
 8011624:	4628      	mov	r0, r5
 8011626:	47b8      	blx	r7
 8011628:	3001      	adds	r0, #1
 801162a:	f43f ae59 	beq.w	80112e0 <_printf_float+0x98>
 801162e:	f108 0801 	add.w	r8, r8, #1
 8011632:	9b08      	ldr	r3, [sp, #32]
 8011634:	3b01      	subs	r3, #1
 8011636:	4543      	cmp	r3, r8
 8011638:	dcf1      	bgt.n	801161e <_printf_float+0x3d6>
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011640:	e6dd      	b.n	80113fe <_printf_float+0x1b6>
 8011642:	f04f 0800 	mov.w	r8, #0
 8011646:	f104 091a 	add.w	r9, r4, #26
 801164a:	e7f2      	b.n	8011632 <_printf_float+0x3ea>
 801164c:	2301      	movs	r3, #1
 801164e:	4642      	mov	r2, r8
 8011650:	e7df      	b.n	8011612 <_printf_float+0x3ca>
 8011652:	2301      	movs	r3, #1
 8011654:	464a      	mov	r2, r9
 8011656:	4631      	mov	r1, r6
 8011658:	4628      	mov	r0, r5
 801165a:	47b8      	blx	r7
 801165c:	3001      	adds	r0, #1
 801165e:	f43f ae3f 	beq.w	80112e0 <_printf_float+0x98>
 8011662:	f108 0801 	add.w	r8, r8, #1
 8011666:	68e3      	ldr	r3, [r4, #12]
 8011668:	9909      	ldr	r1, [sp, #36]	; 0x24
 801166a:	1a5b      	subs	r3, r3, r1
 801166c:	4543      	cmp	r3, r8
 801166e:	dcf0      	bgt.n	8011652 <_printf_float+0x40a>
 8011670:	e6f9      	b.n	8011466 <_printf_float+0x21e>
 8011672:	f04f 0800 	mov.w	r8, #0
 8011676:	f104 0919 	add.w	r9, r4, #25
 801167a:	e7f4      	b.n	8011666 <_printf_float+0x41e>

0801167c <_printf_common>:
 801167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011680:	4616      	mov	r6, r2
 8011682:	4699      	mov	r9, r3
 8011684:	688a      	ldr	r2, [r1, #8]
 8011686:	690b      	ldr	r3, [r1, #16]
 8011688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801168c:	4293      	cmp	r3, r2
 801168e:	bfb8      	it	lt
 8011690:	4613      	movlt	r3, r2
 8011692:	6033      	str	r3, [r6, #0]
 8011694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011698:	4607      	mov	r7, r0
 801169a:	460c      	mov	r4, r1
 801169c:	b10a      	cbz	r2, 80116a2 <_printf_common+0x26>
 801169e:	3301      	adds	r3, #1
 80116a0:	6033      	str	r3, [r6, #0]
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	0699      	lsls	r1, r3, #26
 80116a6:	bf42      	ittt	mi
 80116a8:	6833      	ldrmi	r3, [r6, #0]
 80116aa:	3302      	addmi	r3, #2
 80116ac:	6033      	strmi	r3, [r6, #0]
 80116ae:	6825      	ldr	r5, [r4, #0]
 80116b0:	f015 0506 	ands.w	r5, r5, #6
 80116b4:	d106      	bne.n	80116c4 <_printf_common+0x48>
 80116b6:	f104 0a19 	add.w	sl, r4, #25
 80116ba:	68e3      	ldr	r3, [r4, #12]
 80116bc:	6832      	ldr	r2, [r6, #0]
 80116be:	1a9b      	subs	r3, r3, r2
 80116c0:	42ab      	cmp	r3, r5
 80116c2:	dc26      	bgt.n	8011712 <_printf_common+0x96>
 80116c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80116c8:	1e13      	subs	r3, r2, #0
 80116ca:	6822      	ldr	r2, [r4, #0]
 80116cc:	bf18      	it	ne
 80116ce:	2301      	movne	r3, #1
 80116d0:	0692      	lsls	r2, r2, #26
 80116d2:	d42b      	bmi.n	801172c <_printf_common+0xb0>
 80116d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80116d8:	4649      	mov	r1, r9
 80116da:	4638      	mov	r0, r7
 80116dc:	47c0      	blx	r8
 80116de:	3001      	adds	r0, #1
 80116e0:	d01e      	beq.n	8011720 <_printf_common+0xa4>
 80116e2:	6823      	ldr	r3, [r4, #0]
 80116e4:	6922      	ldr	r2, [r4, #16]
 80116e6:	f003 0306 	and.w	r3, r3, #6
 80116ea:	2b04      	cmp	r3, #4
 80116ec:	bf02      	ittt	eq
 80116ee:	68e5      	ldreq	r5, [r4, #12]
 80116f0:	6833      	ldreq	r3, [r6, #0]
 80116f2:	1aed      	subeq	r5, r5, r3
 80116f4:	68a3      	ldr	r3, [r4, #8]
 80116f6:	bf0c      	ite	eq
 80116f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116fc:	2500      	movne	r5, #0
 80116fe:	4293      	cmp	r3, r2
 8011700:	bfc4      	itt	gt
 8011702:	1a9b      	subgt	r3, r3, r2
 8011704:	18ed      	addgt	r5, r5, r3
 8011706:	2600      	movs	r6, #0
 8011708:	341a      	adds	r4, #26
 801170a:	42b5      	cmp	r5, r6
 801170c:	d11a      	bne.n	8011744 <_printf_common+0xc8>
 801170e:	2000      	movs	r0, #0
 8011710:	e008      	b.n	8011724 <_printf_common+0xa8>
 8011712:	2301      	movs	r3, #1
 8011714:	4652      	mov	r2, sl
 8011716:	4649      	mov	r1, r9
 8011718:	4638      	mov	r0, r7
 801171a:	47c0      	blx	r8
 801171c:	3001      	adds	r0, #1
 801171e:	d103      	bne.n	8011728 <_printf_common+0xac>
 8011720:	f04f 30ff 	mov.w	r0, #4294967295
 8011724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011728:	3501      	adds	r5, #1
 801172a:	e7c6      	b.n	80116ba <_printf_common+0x3e>
 801172c:	18e1      	adds	r1, r4, r3
 801172e:	1c5a      	adds	r2, r3, #1
 8011730:	2030      	movs	r0, #48	; 0x30
 8011732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011736:	4422      	add	r2, r4
 8011738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801173c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011740:	3302      	adds	r3, #2
 8011742:	e7c7      	b.n	80116d4 <_printf_common+0x58>
 8011744:	2301      	movs	r3, #1
 8011746:	4622      	mov	r2, r4
 8011748:	4649      	mov	r1, r9
 801174a:	4638      	mov	r0, r7
 801174c:	47c0      	blx	r8
 801174e:	3001      	adds	r0, #1
 8011750:	d0e6      	beq.n	8011720 <_printf_common+0xa4>
 8011752:	3601      	adds	r6, #1
 8011754:	e7d9      	b.n	801170a <_printf_common+0x8e>
	...

08011758 <_printf_i>:
 8011758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801175c:	7e0f      	ldrb	r7, [r1, #24]
 801175e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011760:	2f78      	cmp	r7, #120	; 0x78
 8011762:	4691      	mov	r9, r2
 8011764:	4680      	mov	r8, r0
 8011766:	460c      	mov	r4, r1
 8011768:	469a      	mov	sl, r3
 801176a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801176e:	d807      	bhi.n	8011780 <_printf_i+0x28>
 8011770:	2f62      	cmp	r7, #98	; 0x62
 8011772:	d80a      	bhi.n	801178a <_printf_i+0x32>
 8011774:	2f00      	cmp	r7, #0
 8011776:	f000 80d4 	beq.w	8011922 <_printf_i+0x1ca>
 801177a:	2f58      	cmp	r7, #88	; 0x58
 801177c:	f000 80c0 	beq.w	8011900 <_printf_i+0x1a8>
 8011780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011788:	e03a      	b.n	8011800 <_printf_i+0xa8>
 801178a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801178e:	2b15      	cmp	r3, #21
 8011790:	d8f6      	bhi.n	8011780 <_printf_i+0x28>
 8011792:	a101      	add	r1, pc, #4	; (adr r1, 8011798 <_printf_i+0x40>)
 8011794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011798:	080117f1 	.word	0x080117f1
 801179c:	08011805 	.word	0x08011805
 80117a0:	08011781 	.word	0x08011781
 80117a4:	08011781 	.word	0x08011781
 80117a8:	08011781 	.word	0x08011781
 80117ac:	08011781 	.word	0x08011781
 80117b0:	08011805 	.word	0x08011805
 80117b4:	08011781 	.word	0x08011781
 80117b8:	08011781 	.word	0x08011781
 80117bc:	08011781 	.word	0x08011781
 80117c0:	08011781 	.word	0x08011781
 80117c4:	08011909 	.word	0x08011909
 80117c8:	08011831 	.word	0x08011831
 80117cc:	080118c3 	.word	0x080118c3
 80117d0:	08011781 	.word	0x08011781
 80117d4:	08011781 	.word	0x08011781
 80117d8:	0801192b 	.word	0x0801192b
 80117dc:	08011781 	.word	0x08011781
 80117e0:	08011831 	.word	0x08011831
 80117e4:	08011781 	.word	0x08011781
 80117e8:	08011781 	.word	0x08011781
 80117ec:	080118cb 	.word	0x080118cb
 80117f0:	682b      	ldr	r3, [r5, #0]
 80117f2:	1d1a      	adds	r2, r3, #4
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	602a      	str	r2, [r5, #0]
 80117f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011800:	2301      	movs	r3, #1
 8011802:	e09f      	b.n	8011944 <_printf_i+0x1ec>
 8011804:	6820      	ldr	r0, [r4, #0]
 8011806:	682b      	ldr	r3, [r5, #0]
 8011808:	0607      	lsls	r7, r0, #24
 801180a:	f103 0104 	add.w	r1, r3, #4
 801180e:	6029      	str	r1, [r5, #0]
 8011810:	d501      	bpl.n	8011816 <_printf_i+0xbe>
 8011812:	681e      	ldr	r6, [r3, #0]
 8011814:	e003      	b.n	801181e <_printf_i+0xc6>
 8011816:	0646      	lsls	r6, r0, #25
 8011818:	d5fb      	bpl.n	8011812 <_printf_i+0xba>
 801181a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801181e:	2e00      	cmp	r6, #0
 8011820:	da03      	bge.n	801182a <_printf_i+0xd2>
 8011822:	232d      	movs	r3, #45	; 0x2d
 8011824:	4276      	negs	r6, r6
 8011826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801182a:	485a      	ldr	r0, [pc, #360]	; (8011994 <_printf_i+0x23c>)
 801182c:	230a      	movs	r3, #10
 801182e:	e012      	b.n	8011856 <_printf_i+0xfe>
 8011830:	682b      	ldr	r3, [r5, #0]
 8011832:	6820      	ldr	r0, [r4, #0]
 8011834:	1d19      	adds	r1, r3, #4
 8011836:	6029      	str	r1, [r5, #0]
 8011838:	0605      	lsls	r5, r0, #24
 801183a:	d501      	bpl.n	8011840 <_printf_i+0xe8>
 801183c:	681e      	ldr	r6, [r3, #0]
 801183e:	e002      	b.n	8011846 <_printf_i+0xee>
 8011840:	0641      	lsls	r1, r0, #25
 8011842:	d5fb      	bpl.n	801183c <_printf_i+0xe4>
 8011844:	881e      	ldrh	r6, [r3, #0]
 8011846:	4853      	ldr	r0, [pc, #332]	; (8011994 <_printf_i+0x23c>)
 8011848:	2f6f      	cmp	r7, #111	; 0x6f
 801184a:	bf0c      	ite	eq
 801184c:	2308      	moveq	r3, #8
 801184e:	230a      	movne	r3, #10
 8011850:	2100      	movs	r1, #0
 8011852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011856:	6865      	ldr	r5, [r4, #4]
 8011858:	60a5      	str	r5, [r4, #8]
 801185a:	2d00      	cmp	r5, #0
 801185c:	bfa2      	ittt	ge
 801185e:	6821      	ldrge	r1, [r4, #0]
 8011860:	f021 0104 	bicge.w	r1, r1, #4
 8011864:	6021      	strge	r1, [r4, #0]
 8011866:	b90e      	cbnz	r6, 801186c <_printf_i+0x114>
 8011868:	2d00      	cmp	r5, #0
 801186a:	d04b      	beq.n	8011904 <_printf_i+0x1ac>
 801186c:	4615      	mov	r5, r2
 801186e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011872:	fb03 6711 	mls	r7, r3, r1, r6
 8011876:	5dc7      	ldrb	r7, [r0, r7]
 8011878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801187c:	4637      	mov	r7, r6
 801187e:	42bb      	cmp	r3, r7
 8011880:	460e      	mov	r6, r1
 8011882:	d9f4      	bls.n	801186e <_printf_i+0x116>
 8011884:	2b08      	cmp	r3, #8
 8011886:	d10b      	bne.n	80118a0 <_printf_i+0x148>
 8011888:	6823      	ldr	r3, [r4, #0]
 801188a:	07de      	lsls	r6, r3, #31
 801188c:	d508      	bpl.n	80118a0 <_printf_i+0x148>
 801188e:	6923      	ldr	r3, [r4, #16]
 8011890:	6861      	ldr	r1, [r4, #4]
 8011892:	4299      	cmp	r1, r3
 8011894:	bfde      	ittt	le
 8011896:	2330      	movle	r3, #48	; 0x30
 8011898:	f805 3c01 	strble.w	r3, [r5, #-1]
 801189c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80118a0:	1b52      	subs	r2, r2, r5
 80118a2:	6122      	str	r2, [r4, #16]
 80118a4:	f8cd a000 	str.w	sl, [sp]
 80118a8:	464b      	mov	r3, r9
 80118aa:	aa03      	add	r2, sp, #12
 80118ac:	4621      	mov	r1, r4
 80118ae:	4640      	mov	r0, r8
 80118b0:	f7ff fee4 	bl	801167c <_printf_common>
 80118b4:	3001      	adds	r0, #1
 80118b6:	d14a      	bne.n	801194e <_printf_i+0x1f6>
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295
 80118bc:	b004      	add	sp, #16
 80118be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c2:	6823      	ldr	r3, [r4, #0]
 80118c4:	f043 0320 	orr.w	r3, r3, #32
 80118c8:	6023      	str	r3, [r4, #0]
 80118ca:	4833      	ldr	r0, [pc, #204]	; (8011998 <_printf_i+0x240>)
 80118cc:	2778      	movs	r7, #120	; 0x78
 80118ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	6829      	ldr	r1, [r5, #0]
 80118d6:	061f      	lsls	r7, r3, #24
 80118d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80118dc:	d402      	bmi.n	80118e4 <_printf_i+0x18c>
 80118de:	065f      	lsls	r7, r3, #25
 80118e0:	bf48      	it	mi
 80118e2:	b2b6      	uxthmi	r6, r6
 80118e4:	07df      	lsls	r7, r3, #31
 80118e6:	bf48      	it	mi
 80118e8:	f043 0320 	orrmi.w	r3, r3, #32
 80118ec:	6029      	str	r1, [r5, #0]
 80118ee:	bf48      	it	mi
 80118f0:	6023      	strmi	r3, [r4, #0]
 80118f2:	b91e      	cbnz	r6, 80118fc <_printf_i+0x1a4>
 80118f4:	6823      	ldr	r3, [r4, #0]
 80118f6:	f023 0320 	bic.w	r3, r3, #32
 80118fa:	6023      	str	r3, [r4, #0]
 80118fc:	2310      	movs	r3, #16
 80118fe:	e7a7      	b.n	8011850 <_printf_i+0xf8>
 8011900:	4824      	ldr	r0, [pc, #144]	; (8011994 <_printf_i+0x23c>)
 8011902:	e7e4      	b.n	80118ce <_printf_i+0x176>
 8011904:	4615      	mov	r5, r2
 8011906:	e7bd      	b.n	8011884 <_printf_i+0x12c>
 8011908:	682b      	ldr	r3, [r5, #0]
 801190a:	6826      	ldr	r6, [r4, #0]
 801190c:	6961      	ldr	r1, [r4, #20]
 801190e:	1d18      	adds	r0, r3, #4
 8011910:	6028      	str	r0, [r5, #0]
 8011912:	0635      	lsls	r5, r6, #24
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	d501      	bpl.n	801191c <_printf_i+0x1c4>
 8011918:	6019      	str	r1, [r3, #0]
 801191a:	e002      	b.n	8011922 <_printf_i+0x1ca>
 801191c:	0670      	lsls	r0, r6, #25
 801191e:	d5fb      	bpl.n	8011918 <_printf_i+0x1c0>
 8011920:	8019      	strh	r1, [r3, #0]
 8011922:	2300      	movs	r3, #0
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	4615      	mov	r5, r2
 8011928:	e7bc      	b.n	80118a4 <_printf_i+0x14c>
 801192a:	682b      	ldr	r3, [r5, #0]
 801192c:	1d1a      	adds	r2, r3, #4
 801192e:	602a      	str	r2, [r5, #0]
 8011930:	681d      	ldr	r5, [r3, #0]
 8011932:	6862      	ldr	r2, [r4, #4]
 8011934:	2100      	movs	r1, #0
 8011936:	4628      	mov	r0, r5
 8011938:	f7ee fcd2 	bl	80002e0 <memchr>
 801193c:	b108      	cbz	r0, 8011942 <_printf_i+0x1ea>
 801193e:	1b40      	subs	r0, r0, r5
 8011940:	6060      	str	r0, [r4, #4]
 8011942:	6863      	ldr	r3, [r4, #4]
 8011944:	6123      	str	r3, [r4, #16]
 8011946:	2300      	movs	r3, #0
 8011948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801194c:	e7aa      	b.n	80118a4 <_printf_i+0x14c>
 801194e:	6923      	ldr	r3, [r4, #16]
 8011950:	462a      	mov	r2, r5
 8011952:	4649      	mov	r1, r9
 8011954:	4640      	mov	r0, r8
 8011956:	47d0      	blx	sl
 8011958:	3001      	adds	r0, #1
 801195a:	d0ad      	beq.n	80118b8 <_printf_i+0x160>
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	079b      	lsls	r3, r3, #30
 8011960:	d413      	bmi.n	801198a <_printf_i+0x232>
 8011962:	68e0      	ldr	r0, [r4, #12]
 8011964:	9b03      	ldr	r3, [sp, #12]
 8011966:	4298      	cmp	r0, r3
 8011968:	bfb8      	it	lt
 801196a:	4618      	movlt	r0, r3
 801196c:	e7a6      	b.n	80118bc <_printf_i+0x164>
 801196e:	2301      	movs	r3, #1
 8011970:	4632      	mov	r2, r6
 8011972:	4649      	mov	r1, r9
 8011974:	4640      	mov	r0, r8
 8011976:	47d0      	blx	sl
 8011978:	3001      	adds	r0, #1
 801197a:	d09d      	beq.n	80118b8 <_printf_i+0x160>
 801197c:	3501      	adds	r5, #1
 801197e:	68e3      	ldr	r3, [r4, #12]
 8011980:	9903      	ldr	r1, [sp, #12]
 8011982:	1a5b      	subs	r3, r3, r1
 8011984:	42ab      	cmp	r3, r5
 8011986:	dcf2      	bgt.n	801196e <_printf_i+0x216>
 8011988:	e7eb      	b.n	8011962 <_printf_i+0x20a>
 801198a:	2500      	movs	r5, #0
 801198c:	f104 0619 	add.w	r6, r4, #25
 8011990:	e7f5      	b.n	801197e <_printf_i+0x226>
 8011992:	bf00      	nop
 8011994:	080146c6 	.word	0x080146c6
 8011998:	080146d7 	.word	0x080146d7

0801199c <std>:
 801199c:	2300      	movs	r3, #0
 801199e:	b510      	push	{r4, lr}
 80119a0:	4604      	mov	r4, r0
 80119a2:	e9c0 3300 	strd	r3, r3, [r0]
 80119a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119aa:	6083      	str	r3, [r0, #8]
 80119ac:	8181      	strh	r1, [r0, #12]
 80119ae:	6643      	str	r3, [r0, #100]	; 0x64
 80119b0:	81c2      	strh	r2, [r0, #14]
 80119b2:	6183      	str	r3, [r0, #24]
 80119b4:	4619      	mov	r1, r3
 80119b6:	2208      	movs	r2, #8
 80119b8:	305c      	adds	r0, #92	; 0x5c
 80119ba:	f000 f914 	bl	8011be6 <memset>
 80119be:	4b0d      	ldr	r3, [pc, #52]	; (80119f4 <std+0x58>)
 80119c0:	6263      	str	r3, [r4, #36]	; 0x24
 80119c2:	4b0d      	ldr	r3, [pc, #52]	; (80119f8 <std+0x5c>)
 80119c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80119c6:	4b0d      	ldr	r3, [pc, #52]	; (80119fc <std+0x60>)
 80119c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119ca:	4b0d      	ldr	r3, [pc, #52]	; (8011a00 <std+0x64>)
 80119cc:	6323      	str	r3, [r4, #48]	; 0x30
 80119ce:	4b0d      	ldr	r3, [pc, #52]	; (8011a04 <std+0x68>)
 80119d0:	6224      	str	r4, [r4, #32]
 80119d2:	429c      	cmp	r4, r3
 80119d4:	d006      	beq.n	80119e4 <std+0x48>
 80119d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80119da:	4294      	cmp	r4, r2
 80119dc:	d002      	beq.n	80119e4 <std+0x48>
 80119de:	33d0      	adds	r3, #208	; 0xd0
 80119e0:	429c      	cmp	r4, r3
 80119e2:	d105      	bne.n	80119f0 <std+0x54>
 80119e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119ec:	f000 b988 	b.w	8011d00 <__retarget_lock_init_recursive>
 80119f0:	bd10      	pop	{r4, pc}
 80119f2:	bf00      	nop
 80119f4:	08011b61 	.word	0x08011b61
 80119f8:	08011b83 	.word	0x08011b83
 80119fc:	08011bbb 	.word	0x08011bbb
 8011a00:	08011bdf 	.word	0x08011bdf
 8011a04:	24002148 	.word	0x24002148

08011a08 <stdio_exit_handler>:
 8011a08:	4a02      	ldr	r2, [pc, #8]	; (8011a14 <stdio_exit_handler+0xc>)
 8011a0a:	4903      	ldr	r1, [pc, #12]	; (8011a18 <stdio_exit_handler+0x10>)
 8011a0c:	4803      	ldr	r0, [pc, #12]	; (8011a1c <stdio_exit_handler+0x14>)
 8011a0e:	f000 b869 	b.w	8011ae4 <_fwalk_sglue>
 8011a12:	bf00      	nop
 8011a14:	24000108 	.word	0x24000108
 8011a18:	0801343d 	.word	0x0801343d
 8011a1c:	24000114 	.word	0x24000114

08011a20 <cleanup_stdio>:
 8011a20:	6841      	ldr	r1, [r0, #4]
 8011a22:	4b0c      	ldr	r3, [pc, #48]	; (8011a54 <cleanup_stdio+0x34>)
 8011a24:	4299      	cmp	r1, r3
 8011a26:	b510      	push	{r4, lr}
 8011a28:	4604      	mov	r4, r0
 8011a2a:	d001      	beq.n	8011a30 <cleanup_stdio+0x10>
 8011a2c:	f001 fd06 	bl	801343c <_fflush_r>
 8011a30:	68a1      	ldr	r1, [r4, #8]
 8011a32:	4b09      	ldr	r3, [pc, #36]	; (8011a58 <cleanup_stdio+0x38>)
 8011a34:	4299      	cmp	r1, r3
 8011a36:	d002      	beq.n	8011a3e <cleanup_stdio+0x1e>
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f001 fcff 	bl	801343c <_fflush_r>
 8011a3e:	68e1      	ldr	r1, [r4, #12]
 8011a40:	4b06      	ldr	r3, [pc, #24]	; (8011a5c <cleanup_stdio+0x3c>)
 8011a42:	4299      	cmp	r1, r3
 8011a44:	d004      	beq.n	8011a50 <cleanup_stdio+0x30>
 8011a46:	4620      	mov	r0, r4
 8011a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a4c:	f001 bcf6 	b.w	801343c <_fflush_r>
 8011a50:	bd10      	pop	{r4, pc}
 8011a52:	bf00      	nop
 8011a54:	24002148 	.word	0x24002148
 8011a58:	240021b0 	.word	0x240021b0
 8011a5c:	24002218 	.word	0x24002218

08011a60 <global_stdio_init.part.0>:
 8011a60:	b510      	push	{r4, lr}
 8011a62:	4b0b      	ldr	r3, [pc, #44]	; (8011a90 <global_stdio_init.part.0+0x30>)
 8011a64:	4c0b      	ldr	r4, [pc, #44]	; (8011a94 <global_stdio_init.part.0+0x34>)
 8011a66:	4a0c      	ldr	r2, [pc, #48]	; (8011a98 <global_stdio_init.part.0+0x38>)
 8011a68:	601a      	str	r2, [r3, #0]
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	2104      	movs	r1, #4
 8011a70:	f7ff ff94 	bl	801199c <std>
 8011a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a78:	2201      	movs	r2, #1
 8011a7a:	2109      	movs	r1, #9
 8011a7c:	f7ff ff8e 	bl	801199c <std>
 8011a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a84:	2202      	movs	r2, #2
 8011a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a8a:	2112      	movs	r1, #18
 8011a8c:	f7ff bf86 	b.w	801199c <std>
 8011a90:	24002280 	.word	0x24002280
 8011a94:	24002148 	.word	0x24002148
 8011a98:	08011a09 	.word	0x08011a09

08011a9c <__sfp_lock_acquire>:
 8011a9c:	4801      	ldr	r0, [pc, #4]	; (8011aa4 <__sfp_lock_acquire+0x8>)
 8011a9e:	f000 b930 	b.w	8011d02 <__retarget_lock_acquire_recursive>
 8011aa2:	bf00      	nop
 8011aa4:	24002289 	.word	0x24002289

08011aa8 <__sfp_lock_release>:
 8011aa8:	4801      	ldr	r0, [pc, #4]	; (8011ab0 <__sfp_lock_release+0x8>)
 8011aaa:	f000 b92b 	b.w	8011d04 <__retarget_lock_release_recursive>
 8011aae:	bf00      	nop
 8011ab0:	24002289 	.word	0x24002289

08011ab4 <__sinit>:
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	f7ff fff0 	bl	8011a9c <__sfp_lock_acquire>
 8011abc:	6a23      	ldr	r3, [r4, #32]
 8011abe:	b11b      	cbz	r3, 8011ac8 <__sinit+0x14>
 8011ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ac4:	f7ff bff0 	b.w	8011aa8 <__sfp_lock_release>
 8011ac8:	4b04      	ldr	r3, [pc, #16]	; (8011adc <__sinit+0x28>)
 8011aca:	6223      	str	r3, [r4, #32]
 8011acc:	4b04      	ldr	r3, [pc, #16]	; (8011ae0 <__sinit+0x2c>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1f5      	bne.n	8011ac0 <__sinit+0xc>
 8011ad4:	f7ff ffc4 	bl	8011a60 <global_stdio_init.part.0>
 8011ad8:	e7f2      	b.n	8011ac0 <__sinit+0xc>
 8011ada:	bf00      	nop
 8011adc:	08011a21 	.word	0x08011a21
 8011ae0:	24002280 	.word	0x24002280

08011ae4 <_fwalk_sglue>:
 8011ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ae8:	4607      	mov	r7, r0
 8011aea:	4688      	mov	r8, r1
 8011aec:	4614      	mov	r4, r2
 8011aee:	2600      	movs	r6, #0
 8011af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011af4:	f1b9 0901 	subs.w	r9, r9, #1
 8011af8:	d505      	bpl.n	8011b06 <_fwalk_sglue+0x22>
 8011afa:	6824      	ldr	r4, [r4, #0]
 8011afc:	2c00      	cmp	r4, #0
 8011afe:	d1f7      	bne.n	8011af0 <_fwalk_sglue+0xc>
 8011b00:	4630      	mov	r0, r6
 8011b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b06:	89ab      	ldrh	r3, [r5, #12]
 8011b08:	2b01      	cmp	r3, #1
 8011b0a:	d907      	bls.n	8011b1c <_fwalk_sglue+0x38>
 8011b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b10:	3301      	adds	r3, #1
 8011b12:	d003      	beq.n	8011b1c <_fwalk_sglue+0x38>
 8011b14:	4629      	mov	r1, r5
 8011b16:	4638      	mov	r0, r7
 8011b18:	47c0      	blx	r8
 8011b1a:	4306      	orrs	r6, r0
 8011b1c:	3568      	adds	r5, #104	; 0x68
 8011b1e:	e7e9      	b.n	8011af4 <_fwalk_sglue+0x10>

08011b20 <siprintf>:
 8011b20:	b40e      	push	{r1, r2, r3}
 8011b22:	b500      	push	{lr}
 8011b24:	b09c      	sub	sp, #112	; 0x70
 8011b26:	ab1d      	add	r3, sp, #116	; 0x74
 8011b28:	9002      	str	r0, [sp, #8]
 8011b2a:	9006      	str	r0, [sp, #24]
 8011b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b30:	4809      	ldr	r0, [pc, #36]	; (8011b58 <siprintf+0x38>)
 8011b32:	9107      	str	r1, [sp, #28]
 8011b34:	9104      	str	r1, [sp, #16]
 8011b36:	4909      	ldr	r1, [pc, #36]	; (8011b5c <siprintf+0x3c>)
 8011b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b3c:	9105      	str	r1, [sp, #20]
 8011b3e:	6800      	ldr	r0, [r0, #0]
 8011b40:	9301      	str	r3, [sp, #4]
 8011b42:	a902      	add	r1, sp, #8
 8011b44:	f001 faf6 	bl	8013134 <_svfiprintf_r>
 8011b48:	9b02      	ldr	r3, [sp, #8]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	701a      	strb	r2, [r3, #0]
 8011b4e:	b01c      	add	sp, #112	; 0x70
 8011b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b54:	b003      	add	sp, #12
 8011b56:	4770      	bx	lr
 8011b58:	24000160 	.word	0x24000160
 8011b5c:	ffff0208 	.word	0xffff0208

08011b60 <__sread>:
 8011b60:	b510      	push	{r4, lr}
 8011b62:	460c      	mov	r4, r1
 8011b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b68:	f000 f86c 	bl	8011c44 <_read_r>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	bfab      	itete	ge
 8011b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b72:	89a3      	ldrhlt	r3, [r4, #12]
 8011b74:	181b      	addge	r3, r3, r0
 8011b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b7a:	bfac      	ite	ge
 8011b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b7e:	81a3      	strhlt	r3, [r4, #12]
 8011b80:	bd10      	pop	{r4, pc}

08011b82 <__swrite>:
 8011b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b86:	461f      	mov	r7, r3
 8011b88:	898b      	ldrh	r3, [r1, #12]
 8011b8a:	05db      	lsls	r3, r3, #23
 8011b8c:	4605      	mov	r5, r0
 8011b8e:	460c      	mov	r4, r1
 8011b90:	4616      	mov	r6, r2
 8011b92:	d505      	bpl.n	8011ba0 <__swrite+0x1e>
 8011b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b98:	2302      	movs	r3, #2
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f000 f840 	bl	8011c20 <_lseek_r>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011baa:	81a3      	strh	r3, [r4, #12]
 8011bac:	4632      	mov	r2, r6
 8011bae:	463b      	mov	r3, r7
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb6:	f000 b867 	b.w	8011c88 <_write_r>

08011bba <__sseek>:
 8011bba:	b510      	push	{r4, lr}
 8011bbc:	460c      	mov	r4, r1
 8011bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc2:	f000 f82d 	bl	8011c20 <_lseek_r>
 8011bc6:	1c43      	adds	r3, r0, #1
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	bf15      	itete	ne
 8011bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bd6:	81a3      	strheq	r3, [r4, #12]
 8011bd8:	bf18      	it	ne
 8011bda:	81a3      	strhne	r3, [r4, #12]
 8011bdc:	bd10      	pop	{r4, pc}

08011bde <__sclose>:
 8011bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be2:	f000 b80d 	b.w	8011c00 <_close_r>

08011be6 <memset>:
 8011be6:	4402      	add	r2, r0
 8011be8:	4603      	mov	r3, r0
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d100      	bne.n	8011bf0 <memset+0xa>
 8011bee:	4770      	bx	lr
 8011bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8011bf4:	e7f9      	b.n	8011bea <memset+0x4>
	...

08011bf8 <_localeconv_r>:
 8011bf8:	4800      	ldr	r0, [pc, #0]	; (8011bfc <_localeconv_r+0x4>)
 8011bfa:	4770      	bx	lr
 8011bfc:	24000254 	.word	0x24000254

08011c00 <_close_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4d06      	ldr	r5, [pc, #24]	; (8011c1c <_close_r+0x1c>)
 8011c04:	2300      	movs	r3, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	4608      	mov	r0, r1
 8011c0a:	602b      	str	r3, [r5, #0]
 8011c0c:	f7ef faf9 	bl	8001202 <_close>
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	d102      	bne.n	8011c1a <_close_r+0x1a>
 8011c14:	682b      	ldr	r3, [r5, #0]
 8011c16:	b103      	cbz	r3, 8011c1a <_close_r+0x1a>
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	bd38      	pop	{r3, r4, r5, pc}
 8011c1c:	24002284 	.word	0x24002284

08011c20 <_lseek_r>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	4d07      	ldr	r5, [pc, #28]	; (8011c40 <_lseek_r+0x20>)
 8011c24:	4604      	mov	r4, r0
 8011c26:	4608      	mov	r0, r1
 8011c28:	4611      	mov	r1, r2
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	602a      	str	r2, [r5, #0]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	f7ef fb0e 	bl	8001250 <_lseek>
 8011c34:	1c43      	adds	r3, r0, #1
 8011c36:	d102      	bne.n	8011c3e <_lseek_r+0x1e>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	b103      	cbz	r3, 8011c3e <_lseek_r+0x1e>
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}
 8011c40:	24002284 	.word	0x24002284

08011c44 <_read_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	4d07      	ldr	r5, [pc, #28]	; (8011c64 <_read_r+0x20>)
 8011c48:	4604      	mov	r4, r0
 8011c4a:	4608      	mov	r0, r1
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	2200      	movs	r2, #0
 8011c50:	602a      	str	r2, [r5, #0]
 8011c52:	461a      	mov	r2, r3
 8011c54:	f7ef fa9c 	bl	8001190 <_read>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d102      	bne.n	8011c62 <_read_r+0x1e>
 8011c5c:	682b      	ldr	r3, [r5, #0]
 8011c5e:	b103      	cbz	r3, 8011c62 <_read_r+0x1e>
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	bd38      	pop	{r3, r4, r5, pc}
 8011c64:	24002284 	.word	0x24002284

08011c68 <_sbrk_r>:
 8011c68:	b538      	push	{r3, r4, r5, lr}
 8011c6a:	4d06      	ldr	r5, [pc, #24]	; (8011c84 <_sbrk_r+0x1c>)
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	4604      	mov	r4, r0
 8011c70:	4608      	mov	r0, r1
 8011c72:	602b      	str	r3, [r5, #0]
 8011c74:	f7ef fafa 	bl	800126c <_sbrk>
 8011c78:	1c43      	adds	r3, r0, #1
 8011c7a:	d102      	bne.n	8011c82 <_sbrk_r+0x1a>
 8011c7c:	682b      	ldr	r3, [r5, #0]
 8011c7e:	b103      	cbz	r3, 8011c82 <_sbrk_r+0x1a>
 8011c80:	6023      	str	r3, [r4, #0]
 8011c82:	bd38      	pop	{r3, r4, r5, pc}
 8011c84:	24002284 	.word	0x24002284

08011c88 <_write_r>:
 8011c88:	b538      	push	{r3, r4, r5, lr}
 8011c8a:	4d07      	ldr	r5, [pc, #28]	; (8011ca8 <_write_r+0x20>)
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	4608      	mov	r0, r1
 8011c90:	4611      	mov	r1, r2
 8011c92:	2200      	movs	r2, #0
 8011c94:	602a      	str	r2, [r5, #0]
 8011c96:	461a      	mov	r2, r3
 8011c98:	f7ef fa97 	bl	80011ca <_write>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	d102      	bne.n	8011ca6 <_write_r+0x1e>
 8011ca0:	682b      	ldr	r3, [r5, #0]
 8011ca2:	b103      	cbz	r3, 8011ca6 <_write_r+0x1e>
 8011ca4:	6023      	str	r3, [r4, #0]
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	24002284 	.word	0x24002284

08011cac <__errno>:
 8011cac:	4b01      	ldr	r3, [pc, #4]	; (8011cb4 <__errno+0x8>)
 8011cae:	6818      	ldr	r0, [r3, #0]
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	24000160 	.word	0x24000160

08011cb8 <__libc_init_array>:
 8011cb8:	b570      	push	{r4, r5, r6, lr}
 8011cba:	4d0d      	ldr	r5, [pc, #52]	; (8011cf0 <__libc_init_array+0x38>)
 8011cbc:	4c0d      	ldr	r4, [pc, #52]	; (8011cf4 <__libc_init_array+0x3c>)
 8011cbe:	1b64      	subs	r4, r4, r5
 8011cc0:	10a4      	asrs	r4, r4, #2
 8011cc2:	2600      	movs	r6, #0
 8011cc4:	42a6      	cmp	r6, r4
 8011cc6:	d109      	bne.n	8011cdc <__libc_init_array+0x24>
 8011cc8:	4d0b      	ldr	r5, [pc, #44]	; (8011cf8 <__libc_init_array+0x40>)
 8011cca:	4c0c      	ldr	r4, [pc, #48]	; (8011cfc <__libc_init_array+0x44>)
 8011ccc:	f002 f87e 	bl	8013dcc <_init>
 8011cd0:	1b64      	subs	r4, r4, r5
 8011cd2:	10a4      	asrs	r4, r4, #2
 8011cd4:	2600      	movs	r6, #0
 8011cd6:	42a6      	cmp	r6, r4
 8011cd8:	d105      	bne.n	8011ce6 <__libc_init_array+0x2e>
 8011cda:	bd70      	pop	{r4, r5, r6, pc}
 8011cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ce0:	4798      	blx	r3
 8011ce2:	3601      	adds	r6, #1
 8011ce4:	e7ee      	b.n	8011cc4 <__libc_init_array+0xc>
 8011ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cea:	4798      	blx	r3
 8011cec:	3601      	adds	r6, #1
 8011cee:	e7f2      	b.n	8011cd6 <__libc_init_array+0x1e>
 8011cf0:	08014a38 	.word	0x08014a38
 8011cf4:	08014a38 	.word	0x08014a38
 8011cf8:	08014a38 	.word	0x08014a38
 8011cfc:	08014a3c 	.word	0x08014a3c

08011d00 <__retarget_lock_init_recursive>:
 8011d00:	4770      	bx	lr

08011d02 <__retarget_lock_acquire_recursive>:
 8011d02:	4770      	bx	lr

08011d04 <__retarget_lock_release_recursive>:
 8011d04:	4770      	bx	lr

08011d06 <quorem>:
 8011d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d0a:	6903      	ldr	r3, [r0, #16]
 8011d0c:	690c      	ldr	r4, [r1, #16]
 8011d0e:	42a3      	cmp	r3, r4
 8011d10:	4607      	mov	r7, r0
 8011d12:	db7e      	blt.n	8011e12 <quorem+0x10c>
 8011d14:	3c01      	subs	r4, #1
 8011d16:	f101 0814 	add.w	r8, r1, #20
 8011d1a:	f100 0514 	add.w	r5, r0, #20
 8011d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d22:	9301      	str	r3, [sp, #4]
 8011d24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011d34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d38:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d3c:	d331      	bcc.n	8011da2 <quorem+0x9c>
 8011d3e:	f04f 0e00 	mov.w	lr, #0
 8011d42:	4640      	mov	r0, r8
 8011d44:	46ac      	mov	ip, r5
 8011d46:	46f2      	mov	sl, lr
 8011d48:	f850 2b04 	ldr.w	r2, [r0], #4
 8011d4c:	b293      	uxth	r3, r2
 8011d4e:	fb06 e303 	mla	r3, r6, r3, lr
 8011d52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011d56:	0c1a      	lsrs	r2, r3, #16
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	ebaa 0303 	sub.w	r3, sl, r3
 8011d5e:	f8dc a000 	ldr.w	sl, [ip]
 8011d62:	fa13 f38a 	uxtah	r3, r3, sl
 8011d66:	fb06 220e 	mla	r2, r6, lr, r2
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	9b00      	ldr	r3, [sp, #0]
 8011d6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011d72:	b292      	uxth	r2, r2
 8011d74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d80:	4581      	cmp	r9, r0
 8011d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d86:	f84c 3b04 	str.w	r3, [ip], #4
 8011d8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011d8e:	d2db      	bcs.n	8011d48 <quorem+0x42>
 8011d90:	f855 300b 	ldr.w	r3, [r5, fp]
 8011d94:	b92b      	cbnz	r3, 8011da2 <quorem+0x9c>
 8011d96:	9b01      	ldr	r3, [sp, #4]
 8011d98:	3b04      	subs	r3, #4
 8011d9a:	429d      	cmp	r5, r3
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	d32c      	bcc.n	8011dfa <quorem+0xf4>
 8011da0:	613c      	str	r4, [r7, #16]
 8011da2:	4638      	mov	r0, r7
 8011da4:	f001 f86c 	bl	8012e80 <__mcmp>
 8011da8:	2800      	cmp	r0, #0
 8011daa:	db22      	blt.n	8011df2 <quorem+0xec>
 8011dac:	3601      	adds	r6, #1
 8011dae:	4629      	mov	r1, r5
 8011db0:	2000      	movs	r0, #0
 8011db2:	f858 2b04 	ldr.w	r2, [r8], #4
 8011db6:	f8d1 c000 	ldr.w	ip, [r1]
 8011dba:	b293      	uxth	r3, r2
 8011dbc:	1ac3      	subs	r3, r0, r3
 8011dbe:	0c12      	lsrs	r2, r2, #16
 8011dc0:	fa13 f38c 	uxtah	r3, r3, ip
 8011dc4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011dd2:	45c1      	cmp	r9, r8
 8011dd4:	f841 3b04 	str.w	r3, [r1], #4
 8011dd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011ddc:	d2e9      	bcs.n	8011db2 <quorem+0xac>
 8011dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011de6:	b922      	cbnz	r2, 8011df2 <quorem+0xec>
 8011de8:	3b04      	subs	r3, #4
 8011dea:	429d      	cmp	r5, r3
 8011dec:	461a      	mov	r2, r3
 8011dee:	d30a      	bcc.n	8011e06 <quorem+0x100>
 8011df0:	613c      	str	r4, [r7, #16]
 8011df2:	4630      	mov	r0, r6
 8011df4:	b003      	add	sp, #12
 8011df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	6812      	ldr	r2, [r2, #0]
 8011dfc:	3b04      	subs	r3, #4
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	d1ce      	bne.n	8011da0 <quorem+0x9a>
 8011e02:	3c01      	subs	r4, #1
 8011e04:	e7c9      	b.n	8011d9a <quorem+0x94>
 8011e06:	6812      	ldr	r2, [r2, #0]
 8011e08:	3b04      	subs	r3, #4
 8011e0a:	2a00      	cmp	r2, #0
 8011e0c:	d1f0      	bne.n	8011df0 <quorem+0xea>
 8011e0e:	3c01      	subs	r4, #1
 8011e10:	e7eb      	b.n	8011dea <quorem+0xe4>
 8011e12:	2000      	movs	r0, #0
 8011e14:	e7ee      	b.n	8011df4 <quorem+0xee>
	...

08011e18 <_dtoa_r>:
 8011e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e1c:	ed2d 8b02 	vpush	{d8}
 8011e20:	69c5      	ldr	r5, [r0, #28]
 8011e22:	b091      	sub	sp, #68	; 0x44
 8011e24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e28:	ec59 8b10 	vmov	r8, r9, d0
 8011e2c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011e2e:	9106      	str	r1, [sp, #24]
 8011e30:	4606      	mov	r6, r0
 8011e32:	9208      	str	r2, [sp, #32]
 8011e34:	930c      	str	r3, [sp, #48]	; 0x30
 8011e36:	b975      	cbnz	r5, 8011e56 <_dtoa_r+0x3e>
 8011e38:	2010      	movs	r0, #16
 8011e3a:	f7ff f8bf 	bl	8010fbc <malloc>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	61f0      	str	r0, [r6, #28]
 8011e42:	b920      	cbnz	r0, 8011e4e <_dtoa_r+0x36>
 8011e44:	4ba6      	ldr	r3, [pc, #664]	; (80120e0 <_dtoa_r+0x2c8>)
 8011e46:	21ef      	movs	r1, #239	; 0xef
 8011e48:	48a6      	ldr	r0, [pc, #664]	; (80120e4 <_dtoa_r+0x2cc>)
 8011e4a:	f001 fb47 	bl	80134dc <__assert_func>
 8011e4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011e52:	6005      	str	r5, [r0, #0]
 8011e54:	60c5      	str	r5, [r0, #12]
 8011e56:	69f3      	ldr	r3, [r6, #28]
 8011e58:	6819      	ldr	r1, [r3, #0]
 8011e5a:	b151      	cbz	r1, 8011e72 <_dtoa_r+0x5a>
 8011e5c:	685a      	ldr	r2, [r3, #4]
 8011e5e:	604a      	str	r2, [r1, #4]
 8011e60:	2301      	movs	r3, #1
 8011e62:	4093      	lsls	r3, r2
 8011e64:	608b      	str	r3, [r1, #8]
 8011e66:	4630      	mov	r0, r6
 8011e68:	f000 fdce 	bl	8012a08 <_Bfree>
 8011e6c:	69f3      	ldr	r3, [r6, #28]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	f1b9 0300 	subs.w	r3, r9, #0
 8011e76:	bfbb      	ittet	lt
 8011e78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011e7c:	9303      	strlt	r3, [sp, #12]
 8011e7e:	2300      	movge	r3, #0
 8011e80:	2201      	movlt	r2, #1
 8011e82:	bfac      	ite	ge
 8011e84:	6023      	strge	r3, [r4, #0]
 8011e86:	6022      	strlt	r2, [r4, #0]
 8011e88:	4b97      	ldr	r3, [pc, #604]	; (80120e8 <_dtoa_r+0x2d0>)
 8011e8a:	9c03      	ldr	r4, [sp, #12]
 8011e8c:	43a3      	bics	r3, r4
 8011e8e:	d11c      	bne.n	8011eca <_dtoa_r+0xb2>
 8011e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e92:	f242 730f 	movw	r3, #9999	; 0x270f
 8011e96:	6013      	str	r3, [r2, #0]
 8011e98:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011e9c:	ea53 0308 	orrs.w	r3, r3, r8
 8011ea0:	f000 84fb 	beq.w	801289a <_dtoa_r+0xa82>
 8011ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ea6:	b963      	cbnz	r3, 8011ec2 <_dtoa_r+0xaa>
 8011ea8:	4b90      	ldr	r3, [pc, #576]	; (80120ec <_dtoa_r+0x2d4>)
 8011eaa:	e020      	b.n	8011eee <_dtoa_r+0xd6>
 8011eac:	4b90      	ldr	r3, [pc, #576]	; (80120f0 <_dtoa_r+0x2d8>)
 8011eae:	9301      	str	r3, [sp, #4]
 8011eb0:	3308      	adds	r3, #8
 8011eb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011eb4:	6013      	str	r3, [r2, #0]
 8011eb6:	9801      	ldr	r0, [sp, #4]
 8011eb8:	b011      	add	sp, #68	; 0x44
 8011eba:	ecbd 8b02 	vpop	{d8}
 8011ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec2:	4b8a      	ldr	r3, [pc, #552]	; (80120ec <_dtoa_r+0x2d4>)
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	3303      	adds	r3, #3
 8011ec8:	e7f3      	b.n	8011eb2 <_dtoa_r+0x9a>
 8011eca:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011ece:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed6:	d10c      	bne.n	8011ef2 <_dtoa_r+0xda>
 8011ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011eda:	2301      	movs	r3, #1
 8011edc:	6013      	str	r3, [r2, #0]
 8011ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f000 84d7 	beq.w	8012894 <_dtoa_r+0xa7c>
 8011ee6:	4b83      	ldr	r3, [pc, #524]	; (80120f4 <_dtoa_r+0x2dc>)
 8011ee8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	3b01      	subs	r3, #1
 8011eee:	9301      	str	r3, [sp, #4]
 8011ef0:	e7e1      	b.n	8011eb6 <_dtoa_r+0x9e>
 8011ef2:	aa0e      	add	r2, sp, #56	; 0x38
 8011ef4:	a90f      	add	r1, sp, #60	; 0x3c
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	eeb0 0b48 	vmov.f64	d0, d8
 8011efc:	f001 f866 	bl	8012fcc <__d2b>
 8011f00:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f06:	4605      	mov	r5, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d046      	beq.n	8011f9a <_dtoa_r+0x182>
 8011f0c:	eeb0 7b48 	vmov.f64	d7, d8
 8011f10:	ee18 1a90 	vmov	r1, s17
 8011f14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011f18:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011f1c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011f20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f24:	2000      	movs	r0, #0
 8011f26:	ee07 1a90 	vmov	s15, r1
 8011f2a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8011f2e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80120c8 <_dtoa_r+0x2b0>
 8011f32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f36:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80120d0 <_dtoa_r+0x2b8>
 8011f3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f3e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80120d8 <_dtoa_r+0x2c0>
 8011f42:	ee07 3a90 	vmov	s15, r3
 8011f46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011f4a:	eeb0 7b46 	vmov.f64	d7, d6
 8011f4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011f52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011f56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5e:	ee16 ba90 	vmov	fp, s13
 8011f62:	9009      	str	r0, [sp, #36]	; 0x24
 8011f64:	d508      	bpl.n	8011f78 <_dtoa_r+0x160>
 8011f66:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011f6a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f72:	bf18      	it	ne
 8011f74:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011f78:	f1bb 0f16 	cmp.w	fp, #22
 8011f7c:	d82b      	bhi.n	8011fd6 <_dtoa_r+0x1be>
 8011f7e:	495e      	ldr	r1, [pc, #376]	; (80120f8 <_dtoa_r+0x2e0>)
 8011f80:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8011f84:	ed91 7b00 	vldr	d7, [r1]
 8011f88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f90:	d501      	bpl.n	8011f96 <_dtoa_r+0x17e>
 8011f92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011f96:	2100      	movs	r1, #0
 8011f98:	e01e      	b.n	8011fd8 <_dtoa_r+0x1c0>
 8011f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8011fa2:	2920      	cmp	r1, #32
 8011fa4:	bfc1      	itttt	gt
 8011fa6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8011faa:	408c      	lslgt	r4, r1
 8011fac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8011fb0:	fa28 f101 	lsrgt.w	r1, r8, r1
 8011fb4:	bfd6      	itet	le
 8011fb6:	f1c1 0120 	rsble	r1, r1, #32
 8011fba:	4321      	orrgt	r1, r4
 8011fbc:	fa08 f101 	lslle.w	r1, r8, r1
 8011fc0:	ee07 1a90 	vmov	s15, r1
 8011fc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	ee17 1a90 	vmov	r1, s15
 8011fce:	2001      	movs	r0, #1
 8011fd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011fd4:	e7a7      	b.n	8011f26 <_dtoa_r+0x10e>
 8011fd6:	2101      	movs	r1, #1
 8011fd8:	1ad2      	subs	r2, r2, r3
 8011fda:	1e53      	subs	r3, r2, #1
 8011fdc:	9305      	str	r3, [sp, #20]
 8011fde:	bf45      	ittet	mi
 8011fe0:	f1c2 0301 	rsbmi	r3, r2, #1
 8011fe4:	9304      	strmi	r3, [sp, #16]
 8011fe6:	2300      	movpl	r3, #0
 8011fe8:	2300      	movmi	r3, #0
 8011fea:	bf4c      	ite	mi
 8011fec:	9305      	strmi	r3, [sp, #20]
 8011fee:	9304      	strpl	r3, [sp, #16]
 8011ff0:	f1bb 0f00 	cmp.w	fp, #0
 8011ff4:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ff6:	db18      	blt.n	801202a <_dtoa_r+0x212>
 8011ff8:	9b05      	ldr	r3, [sp, #20]
 8011ffa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011ffe:	445b      	add	r3, fp
 8012000:	9305      	str	r3, [sp, #20]
 8012002:	2300      	movs	r3, #0
 8012004:	9a06      	ldr	r2, [sp, #24]
 8012006:	2a09      	cmp	r2, #9
 8012008:	d848      	bhi.n	801209c <_dtoa_r+0x284>
 801200a:	2a05      	cmp	r2, #5
 801200c:	bfc4      	itt	gt
 801200e:	3a04      	subgt	r2, #4
 8012010:	9206      	strgt	r2, [sp, #24]
 8012012:	9a06      	ldr	r2, [sp, #24]
 8012014:	f1a2 0202 	sub.w	r2, r2, #2
 8012018:	bfcc      	ite	gt
 801201a:	2400      	movgt	r4, #0
 801201c:	2401      	movle	r4, #1
 801201e:	2a03      	cmp	r2, #3
 8012020:	d847      	bhi.n	80120b2 <_dtoa_r+0x29a>
 8012022:	e8df f002 	tbb	[pc, r2]
 8012026:	2d0b      	.short	0x2d0b
 8012028:	392b      	.short	0x392b
 801202a:	9b04      	ldr	r3, [sp, #16]
 801202c:	2200      	movs	r2, #0
 801202e:	eba3 030b 	sub.w	r3, r3, fp
 8012032:	9304      	str	r3, [sp, #16]
 8012034:	920a      	str	r2, [sp, #40]	; 0x28
 8012036:	f1cb 0300 	rsb	r3, fp, #0
 801203a:	e7e3      	b.n	8012004 <_dtoa_r+0x1ec>
 801203c:	2200      	movs	r2, #0
 801203e:	9207      	str	r2, [sp, #28]
 8012040:	9a08      	ldr	r2, [sp, #32]
 8012042:	2a00      	cmp	r2, #0
 8012044:	dc38      	bgt.n	80120b8 <_dtoa_r+0x2a0>
 8012046:	f04f 0a01 	mov.w	sl, #1
 801204a:	46d1      	mov	r9, sl
 801204c:	4652      	mov	r2, sl
 801204e:	f8cd a020 	str.w	sl, [sp, #32]
 8012052:	69f7      	ldr	r7, [r6, #28]
 8012054:	2100      	movs	r1, #0
 8012056:	2004      	movs	r0, #4
 8012058:	f100 0c14 	add.w	ip, r0, #20
 801205c:	4594      	cmp	ip, r2
 801205e:	d930      	bls.n	80120c2 <_dtoa_r+0x2aa>
 8012060:	6079      	str	r1, [r7, #4]
 8012062:	4630      	mov	r0, r6
 8012064:	930d      	str	r3, [sp, #52]	; 0x34
 8012066:	f000 fc8f 	bl	8012988 <_Balloc>
 801206a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801206c:	9001      	str	r0, [sp, #4]
 801206e:	4602      	mov	r2, r0
 8012070:	2800      	cmp	r0, #0
 8012072:	d145      	bne.n	8012100 <_dtoa_r+0x2e8>
 8012074:	4b21      	ldr	r3, [pc, #132]	; (80120fc <_dtoa_r+0x2e4>)
 8012076:	f240 11af 	movw	r1, #431	; 0x1af
 801207a:	e6e5      	b.n	8011e48 <_dtoa_r+0x30>
 801207c:	2201      	movs	r2, #1
 801207e:	e7de      	b.n	801203e <_dtoa_r+0x226>
 8012080:	2200      	movs	r2, #0
 8012082:	9207      	str	r2, [sp, #28]
 8012084:	9a08      	ldr	r2, [sp, #32]
 8012086:	eb0b 0a02 	add.w	sl, fp, r2
 801208a:	f10a 0901 	add.w	r9, sl, #1
 801208e:	464a      	mov	r2, r9
 8012090:	2a01      	cmp	r2, #1
 8012092:	bfb8      	it	lt
 8012094:	2201      	movlt	r2, #1
 8012096:	e7dc      	b.n	8012052 <_dtoa_r+0x23a>
 8012098:	2201      	movs	r2, #1
 801209a:	e7f2      	b.n	8012082 <_dtoa_r+0x26a>
 801209c:	2401      	movs	r4, #1
 801209e:	2200      	movs	r2, #0
 80120a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80120a4:	f04f 3aff 	mov.w	sl, #4294967295
 80120a8:	2100      	movs	r1, #0
 80120aa:	46d1      	mov	r9, sl
 80120ac:	2212      	movs	r2, #18
 80120ae:	9108      	str	r1, [sp, #32]
 80120b0:	e7cf      	b.n	8012052 <_dtoa_r+0x23a>
 80120b2:	2201      	movs	r2, #1
 80120b4:	9207      	str	r2, [sp, #28]
 80120b6:	e7f5      	b.n	80120a4 <_dtoa_r+0x28c>
 80120b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80120bc:	46d1      	mov	r9, sl
 80120be:	4652      	mov	r2, sl
 80120c0:	e7c7      	b.n	8012052 <_dtoa_r+0x23a>
 80120c2:	3101      	adds	r1, #1
 80120c4:	0040      	lsls	r0, r0, #1
 80120c6:	e7c7      	b.n	8012058 <_dtoa_r+0x240>
 80120c8:	636f4361 	.word	0x636f4361
 80120cc:	3fd287a7 	.word	0x3fd287a7
 80120d0:	8b60c8b3 	.word	0x8b60c8b3
 80120d4:	3fc68a28 	.word	0x3fc68a28
 80120d8:	509f79fb 	.word	0x509f79fb
 80120dc:	3fd34413 	.word	0x3fd34413
 80120e0:	080146f5 	.word	0x080146f5
 80120e4:	0801470c 	.word	0x0801470c
 80120e8:	7ff00000 	.word	0x7ff00000
 80120ec:	080146f1 	.word	0x080146f1
 80120f0:	080146e8 	.word	0x080146e8
 80120f4:	080146c5 	.word	0x080146c5
 80120f8:	080147f8 	.word	0x080147f8
 80120fc:	08014764 	.word	0x08014764
 8012100:	69f2      	ldr	r2, [r6, #28]
 8012102:	9901      	ldr	r1, [sp, #4]
 8012104:	6011      	str	r1, [r2, #0]
 8012106:	f1b9 0f0e 	cmp.w	r9, #14
 801210a:	d86c      	bhi.n	80121e6 <_dtoa_r+0x3ce>
 801210c:	2c00      	cmp	r4, #0
 801210e:	d06a      	beq.n	80121e6 <_dtoa_r+0x3ce>
 8012110:	f1bb 0f00 	cmp.w	fp, #0
 8012114:	f340 80a0 	ble.w	8012258 <_dtoa_r+0x440>
 8012118:	4ac1      	ldr	r2, [pc, #772]	; (8012420 <_dtoa_r+0x608>)
 801211a:	f00b 010f 	and.w	r1, fp, #15
 801211e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012122:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012126:	ed92 7b00 	vldr	d7, [r2]
 801212a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801212e:	f000 8087 	beq.w	8012240 <_dtoa_r+0x428>
 8012132:	49bc      	ldr	r1, [pc, #752]	; (8012424 <_dtoa_r+0x60c>)
 8012134:	ed91 6b08 	vldr	d6, [r1, #32]
 8012138:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801213c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012140:	f002 020f 	and.w	r2, r2, #15
 8012144:	2103      	movs	r1, #3
 8012146:	48b7      	ldr	r0, [pc, #732]	; (8012424 <_dtoa_r+0x60c>)
 8012148:	2a00      	cmp	r2, #0
 801214a:	d17b      	bne.n	8012244 <_dtoa_r+0x42c>
 801214c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012150:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012154:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801215a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801215e:	2a00      	cmp	r2, #0
 8012160:	f000 80a0 	beq.w	80122a4 <_dtoa_r+0x48c>
 8012164:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012168:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012170:	f140 8098 	bpl.w	80122a4 <_dtoa_r+0x48c>
 8012174:	f1b9 0f00 	cmp.w	r9, #0
 8012178:	f000 8094 	beq.w	80122a4 <_dtoa_r+0x48c>
 801217c:	f1ba 0f00 	cmp.w	sl, #0
 8012180:	dd2f      	ble.n	80121e2 <_dtoa_r+0x3ca>
 8012182:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012186:	ee27 7b06 	vmul.f64	d7, d7, d6
 801218a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801218e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012192:	3101      	adds	r1, #1
 8012194:	4654      	mov	r4, sl
 8012196:	ed9d 6b02 	vldr	d6, [sp, #8]
 801219a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801219e:	ee07 1a90 	vmov	s15, r1
 80121a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80121a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80121aa:	ee15 7a90 	vmov	r7, s11
 80121ae:	ec51 0b15 	vmov	r0, r1, d5
 80121b2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80121b6:	2c00      	cmp	r4, #0
 80121b8:	d177      	bne.n	80122aa <_dtoa_r+0x492>
 80121ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80121be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80121c2:	ec41 0b17 	vmov	d7, r0, r1
 80121c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ce:	f300 826a 	bgt.w	80126a6 <_dtoa_r+0x88e>
 80121d2:	eeb1 7b47 	vneg.f64	d7, d7
 80121d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121de:	f100 8260 	bmi.w	80126a2 <_dtoa_r+0x88a>
 80121e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80121e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121e8:	2a00      	cmp	r2, #0
 80121ea:	f2c0 811d 	blt.w	8012428 <_dtoa_r+0x610>
 80121ee:	f1bb 0f0e 	cmp.w	fp, #14
 80121f2:	f300 8119 	bgt.w	8012428 <_dtoa_r+0x610>
 80121f6:	4b8a      	ldr	r3, [pc, #552]	; (8012420 <_dtoa_r+0x608>)
 80121f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80121fc:	ed93 6b00 	vldr	d6, [r3]
 8012200:	9b08      	ldr	r3, [sp, #32]
 8012202:	2b00      	cmp	r3, #0
 8012204:	f280 80b7 	bge.w	8012376 <_dtoa_r+0x55e>
 8012208:	f1b9 0f00 	cmp.w	r9, #0
 801220c:	f300 80b3 	bgt.w	8012376 <_dtoa_r+0x55e>
 8012210:	f040 8246 	bne.w	80126a0 <_dtoa_r+0x888>
 8012214:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012218:	ee26 6b07 	vmul.f64	d6, d6, d7
 801221c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012220:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012228:	464c      	mov	r4, r9
 801222a:	464f      	mov	r7, r9
 801222c:	f280 821c 	bge.w	8012668 <_dtoa_r+0x850>
 8012230:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012234:	2331      	movs	r3, #49	; 0x31
 8012236:	f808 3b01 	strb.w	r3, [r8], #1
 801223a:	f10b 0b01 	add.w	fp, fp, #1
 801223e:	e218      	b.n	8012672 <_dtoa_r+0x85a>
 8012240:	2102      	movs	r1, #2
 8012242:	e780      	b.n	8012146 <_dtoa_r+0x32e>
 8012244:	07d4      	lsls	r4, r2, #31
 8012246:	d504      	bpl.n	8012252 <_dtoa_r+0x43a>
 8012248:	ed90 6b00 	vldr	d6, [r0]
 801224c:	3101      	adds	r1, #1
 801224e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012252:	1052      	asrs	r2, r2, #1
 8012254:	3008      	adds	r0, #8
 8012256:	e777      	b.n	8012148 <_dtoa_r+0x330>
 8012258:	d022      	beq.n	80122a0 <_dtoa_r+0x488>
 801225a:	f1cb 0200 	rsb	r2, fp, #0
 801225e:	4970      	ldr	r1, [pc, #448]	; (8012420 <_dtoa_r+0x608>)
 8012260:	f002 000f 	and.w	r0, r2, #15
 8012264:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012268:	ed91 7b00 	vldr	d7, [r1]
 801226c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012270:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012274:	486b      	ldr	r0, [pc, #428]	; (8012424 <_dtoa_r+0x60c>)
 8012276:	1112      	asrs	r2, r2, #4
 8012278:	2400      	movs	r4, #0
 801227a:	2102      	movs	r1, #2
 801227c:	b92a      	cbnz	r2, 801228a <_dtoa_r+0x472>
 801227e:	2c00      	cmp	r4, #0
 8012280:	f43f af6a 	beq.w	8012158 <_dtoa_r+0x340>
 8012284:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012288:	e766      	b.n	8012158 <_dtoa_r+0x340>
 801228a:	07d7      	lsls	r7, r2, #31
 801228c:	d505      	bpl.n	801229a <_dtoa_r+0x482>
 801228e:	ed90 6b00 	vldr	d6, [r0]
 8012292:	3101      	adds	r1, #1
 8012294:	2401      	movs	r4, #1
 8012296:	ee27 7b06 	vmul.f64	d7, d7, d6
 801229a:	1052      	asrs	r2, r2, #1
 801229c:	3008      	adds	r0, #8
 801229e:	e7ed      	b.n	801227c <_dtoa_r+0x464>
 80122a0:	2102      	movs	r1, #2
 80122a2:	e759      	b.n	8012158 <_dtoa_r+0x340>
 80122a4:	465a      	mov	r2, fp
 80122a6:	464c      	mov	r4, r9
 80122a8:	e775      	b.n	8012196 <_dtoa_r+0x37e>
 80122aa:	ec41 0b17 	vmov	d7, r0, r1
 80122ae:	495c      	ldr	r1, [pc, #368]	; (8012420 <_dtoa_r+0x608>)
 80122b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80122b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80122b8:	9901      	ldr	r1, [sp, #4]
 80122ba:	440c      	add	r4, r1
 80122bc:	9907      	ldr	r1, [sp, #28]
 80122be:	b351      	cbz	r1, 8012316 <_dtoa_r+0x4fe>
 80122c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80122c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80122c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80122cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80122d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80122d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80122d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80122dc:	ee14 1a90 	vmov	r1, s9
 80122e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80122e4:	3130      	adds	r1, #48	; 0x30
 80122e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80122ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f2:	f808 1b01 	strb.w	r1, [r8], #1
 80122f6:	d439      	bmi.n	801236c <_dtoa_r+0x554>
 80122f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80122fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012304:	d472      	bmi.n	80123ec <_dtoa_r+0x5d4>
 8012306:	45a0      	cmp	r8, r4
 8012308:	f43f af6b 	beq.w	80121e2 <_dtoa_r+0x3ca>
 801230c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012310:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012314:	e7e0      	b.n	80122d8 <_dtoa_r+0x4c0>
 8012316:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801231a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801231e:	4620      	mov	r0, r4
 8012320:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012324:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012328:	ee14 1a90 	vmov	r1, s9
 801232c:	3130      	adds	r1, #48	; 0x30
 801232e:	f808 1b01 	strb.w	r1, [r8], #1
 8012332:	45a0      	cmp	r8, r4
 8012334:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012338:	ee36 6b45 	vsub.f64	d6, d6, d5
 801233c:	d118      	bne.n	8012370 <_dtoa_r+0x558>
 801233e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012342:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012346:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234e:	dc4d      	bgt.n	80123ec <_dtoa_r+0x5d4>
 8012350:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012354:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235c:	f57f af41 	bpl.w	80121e2 <_dtoa_r+0x3ca>
 8012360:	4680      	mov	r8, r0
 8012362:	3801      	subs	r0, #1
 8012364:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012368:	2b30      	cmp	r3, #48	; 0x30
 801236a:	d0f9      	beq.n	8012360 <_dtoa_r+0x548>
 801236c:	4693      	mov	fp, r2
 801236e:	e02a      	b.n	80123c6 <_dtoa_r+0x5ae>
 8012370:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012374:	e7d6      	b.n	8012324 <_dtoa_r+0x50c>
 8012376:	ed9d 7b02 	vldr	d7, [sp, #8]
 801237a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801237e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012382:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012386:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801238a:	ee15 3a10 	vmov	r3, s10
 801238e:	3330      	adds	r3, #48	; 0x30
 8012390:	f808 3b01 	strb.w	r3, [r8], #1
 8012394:	9b01      	ldr	r3, [sp, #4]
 8012396:	eba8 0303 	sub.w	r3, r8, r3
 801239a:	4599      	cmp	r9, r3
 801239c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80123a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80123a4:	d133      	bne.n	801240e <_dtoa_r+0x5f6>
 80123a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80123aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b2:	dc1a      	bgt.n	80123ea <_dtoa_r+0x5d2>
 80123b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80123b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123bc:	d103      	bne.n	80123c6 <_dtoa_r+0x5ae>
 80123be:	ee15 3a10 	vmov	r3, s10
 80123c2:	07d9      	lsls	r1, r3, #31
 80123c4:	d411      	bmi.n	80123ea <_dtoa_r+0x5d2>
 80123c6:	4629      	mov	r1, r5
 80123c8:	4630      	mov	r0, r6
 80123ca:	f000 fb1d 	bl	8012a08 <_Bfree>
 80123ce:	2300      	movs	r3, #0
 80123d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123d2:	f888 3000 	strb.w	r3, [r8]
 80123d6:	f10b 0301 	add.w	r3, fp, #1
 80123da:	6013      	str	r3, [r2, #0]
 80123dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f43f ad69 	beq.w	8011eb6 <_dtoa_r+0x9e>
 80123e4:	f8c3 8000 	str.w	r8, [r3]
 80123e8:	e565      	b.n	8011eb6 <_dtoa_r+0x9e>
 80123ea:	465a      	mov	r2, fp
 80123ec:	4643      	mov	r3, r8
 80123ee:	4698      	mov	r8, r3
 80123f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80123f4:	2939      	cmp	r1, #57	; 0x39
 80123f6:	d106      	bne.n	8012406 <_dtoa_r+0x5ee>
 80123f8:	9901      	ldr	r1, [sp, #4]
 80123fa:	4299      	cmp	r1, r3
 80123fc:	d1f7      	bne.n	80123ee <_dtoa_r+0x5d6>
 80123fe:	9801      	ldr	r0, [sp, #4]
 8012400:	2130      	movs	r1, #48	; 0x30
 8012402:	3201      	adds	r2, #1
 8012404:	7001      	strb	r1, [r0, #0]
 8012406:	7819      	ldrb	r1, [r3, #0]
 8012408:	3101      	adds	r1, #1
 801240a:	7019      	strb	r1, [r3, #0]
 801240c:	e7ae      	b.n	801236c <_dtoa_r+0x554>
 801240e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012412:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241a:	d1b2      	bne.n	8012382 <_dtoa_r+0x56a>
 801241c:	e7d3      	b.n	80123c6 <_dtoa_r+0x5ae>
 801241e:	bf00      	nop
 8012420:	080147f8 	.word	0x080147f8
 8012424:	080147d0 	.word	0x080147d0
 8012428:	9907      	ldr	r1, [sp, #28]
 801242a:	2900      	cmp	r1, #0
 801242c:	f000 80d0 	beq.w	80125d0 <_dtoa_r+0x7b8>
 8012430:	9906      	ldr	r1, [sp, #24]
 8012432:	2901      	cmp	r1, #1
 8012434:	f300 80b4 	bgt.w	80125a0 <_dtoa_r+0x788>
 8012438:	9909      	ldr	r1, [sp, #36]	; 0x24
 801243a:	2900      	cmp	r1, #0
 801243c:	f000 80ac 	beq.w	8012598 <_dtoa_r+0x780>
 8012440:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012444:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012448:	461c      	mov	r4, r3
 801244a:	9309      	str	r3, [sp, #36]	; 0x24
 801244c:	9b04      	ldr	r3, [sp, #16]
 801244e:	4413      	add	r3, r2
 8012450:	9304      	str	r3, [sp, #16]
 8012452:	9b05      	ldr	r3, [sp, #20]
 8012454:	2101      	movs	r1, #1
 8012456:	4413      	add	r3, r2
 8012458:	4630      	mov	r0, r6
 801245a:	9305      	str	r3, [sp, #20]
 801245c:	f000 fb8a 	bl	8012b74 <__i2b>
 8012460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012462:	4607      	mov	r7, r0
 8012464:	f1b8 0f00 	cmp.w	r8, #0
 8012468:	d00d      	beq.n	8012486 <_dtoa_r+0x66e>
 801246a:	9a05      	ldr	r2, [sp, #20]
 801246c:	2a00      	cmp	r2, #0
 801246e:	dd0a      	ble.n	8012486 <_dtoa_r+0x66e>
 8012470:	4542      	cmp	r2, r8
 8012472:	9904      	ldr	r1, [sp, #16]
 8012474:	bfa8      	it	ge
 8012476:	4642      	movge	r2, r8
 8012478:	1a89      	subs	r1, r1, r2
 801247a:	9104      	str	r1, [sp, #16]
 801247c:	9905      	ldr	r1, [sp, #20]
 801247e:	eba8 0802 	sub.w	r8, r8, r2
 8012482:	1a8a      	subs	r2, r1, r2
 8012484:	9205      	str	r2, [sp, #20]
 8012486:	b303      	cbz	r3, 80124ca <_dtoa_r+0x6b2>
 8012488:	9a07      	ldr	r2, [sp, #28]
 801248a:	2a00      	cmp	r2, #0
 801248c:	f000 80a5 	beq.w	80125da <_dtoa_r+0x7c2>
 8012490:	2c00      	cmp	r4, #0
 8012492:	dd13      	ble.n	80124bc <_dtoa_r+0x6a4>
 8012494:	4639      	mov	r1, r7
 8012496:	4622      	mov	r2, r4
 8012498:	4630      	mov	r0, r6
 801249a:	930d      	str	r3, [sp, #52]	; 0x34
 801249c:	f000 fc2a 	bl	8012cf4 <__pow5mult>
 80124a0:	462a      	mov	r2, r5
 80124a2:	4601      	mov	r1, r0
 80124a4:	4607      	mov	r7, r0
 80124a6:	4630      	mov	r0, r6
 80124a8:	f000 fb7a 	bl	8012ba0 <__multiply>
 80124ac:	4629      	mov	r1, r5
 80124ae:	9009      	str	r0, [sp, #36]	; 0x24
 80124b0:	4630      	mov	r0, r6
 80124b2:	f000 faa9 	bl	8012a08 <_Bfree>
 80124b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124ba:	4615      	mov	r5, r2
 80124bc:	1b1a      	subs	r2, r3, r4
 80124be:	d004      	beq.n	80124ca <_dtoa_r+0x6b2>
 80124c0:	4629      	mov	r1, r5
 80124c2:	4630      	mov	r0, r6
 80124c4:	f000 fc16 	bl	8012cf4 <__pow5mult>
 80124c8:	4605      	mov	r5, r0
 80124ca:	2101      	movs	r1, #1
 80124cc:	4630      	mov	r0, r6
 80124ce:	f000 fb51 	bl	8012b74 <__i2b>
 80124d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	4604      	mov	r4, r0
 80124d8:	f340 8081 	ble.w	80125de <_dtoa_r+0x7c6>
 80124dc:	461a      	mov	r2, r3
 80124de:	4601      	mov	r1, r0
 80124e0:	4630      	mov	r0, r6
 80124e2:	f000 fc07 	bl	8012cf4 <__pow5mult>
 80124e6:	9b06      	ldr	r3, [sp, #24]
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	4604      	mov	r4, r0
 80124ec:	dd7a      	ble.n	80125e4 <_dtoa_r+0x7cc>
 80124ee:	2300      	movs	r3, #0
 80124f0:	9309      	str	r3, [sp, #36]	; 0x24
 80124f2:	6922      	ldr	r2, [r4, #16]
 80124f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80124f8:	6910      	ldr	r0, [r2, #16]
 80124fa:	f000 faed 	bl	8012ad8 <__hi0bits>
 80124fe:	f1c0 0020 	rsb	r0, r0, #32
 8012502:	9b05      	ldr	r3, [sp, #20]
 8012504:	4418      	add	r0, r3
 8012506:	f010 001f 	ands.w	r0, r0, #31
 801250a:	f000 8093 	beq.w	8012634 <_dtoa_r+0x81c>
 801250e:	f1c0 0220 	rsb	r2, r0, #32
 8012512:	2a04      	cmp	r2, #4
 8012514:	f340 8085 	ble.w	8012622 <_dtoa_r+0x80a>
 8012518:	9b04      	ldr	r3, [sp, #16]
 801251a:	f1c0 001c 	rsb	r0, r0, #28
 801251e:	4403      	add	r3, r0
 8012520:	9304      	str	r3, [sp, #16]
 8012522:	9b05      	ldr	r3, [sp, #20]
 8012524:	4480      	add	r8, r0
 8012526:	4403      	add	r3, r0
 8012528:	9305      	str	r3, [sp, #20]
 801252a:	9b04      	ldr	r3, [sp, #16]
 801252c:	2b00      	cmp	r3, #0
 801252e:	dd05      	ble.n	801253c <_dtoa_r+0x724>
 8012530:	4629      	mov	r1, r5
 8012532:	461a      	mov	r2, r3
 8012534:	4630      	mov	r0, r6
 8012536:	f000 fc37 	bl	8012da8 <__lshift>
 801253a:	4605      	mov	r5, r0
 801253c:	9b05      	ldr	r3, [sp, #20]
 801253e:	2b00      	cmp	r3, #0
 8012540:	dd05      	ble.n	801254e <_dtoa_r+0x736>
 8012542:	4621      	mov	r1, r4
 8012544:	461a      	mov	r2, r3
 8012546:	4630      	mov	r0, r6
 8012548:	f000 fc2e 	bl	8012da8 <__lshift>
 801254c:	4604      	mov	r4, r0
 801254e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012550:	2b00      	cmp	r3, #0
 8012552:	d071      	beq.n	8012638 <_dtoa_r+0x820>
 8012554:	4621      	mov	r1, r4
 8012556:	4628      	mov	r0, r5
 8012558:	f000 fc92 	bl	8012e80 <__mcmp>
 801255c:	2800      	cmp	r0, #0
 801255e:	da6b      	bge.n	8012638 <_dtoa_r+0x820>
 8012560:	2300      	movs	r3, #0
 8012562:	4629      	mov	r1, r5
 8012564:	220a      	movs	r2, #10
 8012566:	4630      	mov	r0, r6
 8012568:	f000 fa70 	bl	8012a4c <__multadd>
 801256c:	9b07      	ldr	r3, [sp, #28]
 801256e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012572:	4605      	mov	r5, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 8197 	beq.w	80128a8 <_dtoa_r+0xa90>
 801257a:	4639      	mov	r1, r7
 801257c:	2300      	movs	r3, #0
 801257e:	220a      	movs	r2, #10
 8012580:	4630      	mov	r0, r6
 8012582:	f000 fa63 	bl	8012a4c <__multadd>
 8012586:	f1ba 0f00 	cmp.w	sl, #0
 801258a:	4607      	mov	r7, r0
 801258c:	f300 8093 	bgt.w	80126b6 <_dtoa_r+0x89e>
 8012590:	9b06      	ldr	r3, [sp, #24]
 8012592:	2b02      	cmp	r3, #2
 8012594:	dc57      	bgt.n	8012646 <_dtoa_r+0x82e>
 8012596:	e08e      	b.n	80126b6 <_dtoa_r+0x89e>
 8012598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801259a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801259e:	e751      	b.n	8012444 <_dtoa_r+0x62c>
 80125a0:	f109 34ff 	add.w	r4, r9, #4294967295
 80125a4:	42a3      	cmp	r3, r4
 80125a6:	bfbf      	itttt	lt
 80125a8:	1ae2      	sublt	r2, r4, r3
 80125aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80125ac:	189b      	addlt	r3, r3, r2
 80125ae:	930a      	strlt	r3, [sp, #40]	; 0x28
 80125b0:	bfae      	itee	ge
 80125b2:	1b1c      	subge	r4, r3, r4
 80125b4:	4623      	movlt	r3, r4
 80125b6:	2400      	movlt	r4, #0
 80125b8:	f1b9 0f00 	cmp.w	r9, #0
 80125bc:	bfb5      	itete	lt
 80125be:	9a04      	ldrlt	r2, [sp, #16]
 80125c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80125c4:	eba2 0809 	sublt.w	r8, r2, r9
 80125c8:	464a      	movge	r2, r9
 80125ca:	bfb8      	it	lt
 80125cc:	2200      	movlt	r2, #0
 80125ce:	e73c      	b.n	801244a <_dtoa_r+0x632>
 80125d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80125d4:	9f07      	ldr	r7, [sp, #28]
 80125d6:	461c      	mov	r4, r3
 80125d8:	e744      	b.n	8012464 <_dtoa_r+0x64c>
 80125da:	461a      	mov	r2, r3
 80125dc:	e770      	b.n	80124c0 <_dtoa_r+0x6a8>
 80125de:	9b06      	ldr	r3, [sp, #24]
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	dc18      	bgt.n	8012616 <_dtoa_r+0x7fe>
 80125e4:	9b02      	ldr	r3, [sp, #8]
 80125e6:	b9b3      	cbnz	r3, 8012616 <_dtoa_r+0x7fe>
 80125e8:	9b03      	ldr	r3, [sp, #12]
 80125ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80125ee:	b9a2      	cbnz	r2, 801261a <_dtoa_r+0x802>
 80125f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80125f4:	0d12      	lsrs	r2, r2, #20
 80125f6:	0512      	lsls	r2, r2, #20
 80125f8:	b18a      	cbz	r2, 801261e <_dtoa_r+0x806>
 80125fa:	9b04      	ldr	r3, [sp, #16]
 80125fc:	3301      	adds	r3, #1
 80125fe:	9304      	str	r3, [sp, #16]
 8012600:	9b05      	ldr	r3, [sp, #20]
 8012602:	3301      	adds	r3, #1
 8012604:	9305      	str	r3, [sp, #20]
 8012606:	2301      	movs	r3, #1
 8012608:	9309      	str	r3, [sp, #36]	; 0x24
 801260a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801260c:	2b00      	cmp	r3, #0
 801260e:	f47f af70 	bne.w	80124f2 <_dtoa_r+0x6da>
 8012612:	2001      	movs	r0, #1
 8012614:	e775      	b.n	8012502 <_dtoa_r+0x6ea>
 8012616:	2300      	movs	r3, #0
 8012618:	e7f6      	b.n	8012608 <_dtoa_r+0x7f0>
 801261a:	9b02      	ldr	r3, [sp, #8]
 801261c:	e7f4      	b.n	8012608 <_dtoa_r+0x7f0>
 801261e:	9209      	str	r2, [sp, #36]	; 0x24
 8012620:	e7f3      	b.n	801260a <_dtoa_r+0x7f2>
 8012622:	d082      	beq.n	801252a <_dtoa_r+0x712>
 8012624:	9b04      	ldr	r3, [sp, #16]
 8012626:	321c      	adds	r2, #28
 8012628:	4413      	add	r3, r2
 801262a:	9304      	str	r3, [sp, #16]
 801262c:	9b05      	ldr	r3, [sp, #20]
 801262e:	4490      	add	r8, r2
 8012630:	4413      	add	r3, r2
 8012632:	e779      	b.n	8012528 <_dtoa_r+0x710>
 8012634:	4602      	mov	r2, r0
 8012636:	e7f5      	b.n	8012624 <_dtoa_r+0x80c>
 8012638:	f1b9 0f00 	cmp.w	r9, #0
 801263c:	dc36      	bgt.n	80126ac <_dtoa_r+0x894>
 801263e:	9b06      	ldr	r3, [sp, #24]
 8012640:	2b02      	cmp	r3, #2
 8012642:	dd33      	ble.n	80126ac <_dtoa_r+0x894>
 8012644:	46ca      	mov	sl, r9
 8012646:	f1ba 0f00 	cmp.w	sl, #0
 801264a:	d10d      	bne.n	8012668 <_dtoa_r+0x850>
 801264c:	4621      	mov	r1, r4
 801264e:	4653      	mov	r3, sl
 8012650:	2205      	movs	r2, #5
 8012652:	4630      	mov	r0, r6
 8012654:	f000 f9fa 	bl	8012a4c <__multadd>
 8012658:	4601      	mov	r1, r0
 801265a:	4604      	mov	r4, r0
 801265c:	4628      	mov	r0, r5
 801265e:	f000 fc0f 	bl	8012e80 <__mcmp>
 8012662:	2800      	cmp	r0, #0
 8012664:	f73f ade4 	bgt.w	8012230 <_dtoa_r+0x418>
 8012668:	9b08      	ldr	r3, [sp, #32]
 801266a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801266e:	ea6f 0b03 	mvn.w	fp, r3
 8012672:	f04f 0900 	mov.w	r9, #0
 8012676:	4621      	mov	r1, r4
 8012678:	4630      	mov	r0, r6
 801267a:	f000 f9c5 	bl	8012a08 <_Bfree>
 801267e:	2f00      	cmp	r7, #0
 8012680:	f43f aea1 	beq.w	80123c6 <_dtoa_r+0x5ae>
 8012684:	f1b9 0f00 	cmp.w	r9, #0
 8012688:	d005      	beq.n	8012696 <_dtoa_r+0x87e>
 801268a:	45b9      	cmp	r9, r7
 801268c:	d003      	beq.n	8012696 <_dtoa_r+0x87e>
 801268e:	4649      	mov	r1, r9
 8012690:	4630      	mov	r0, r6
 8012692:	f000 f9b9 	bl	8012a08 <_Bfree>
 8012696:	4639      	mov	r1, r7
 8012698:	4630      	mov	r0, r6
 801269a:	f000 f9b5 	bl	8012a08 <_Bfree>
 801269e:	e692      	b.n	80123c6 <_dtoa_r+0x5ae>
 80126a0:	2400      	movs	r4, #0
 80126a2:	4627      	mov	r7, r4
 80126a4:	e7e0      	b.n	8012668 <_dtoa_r+0x850>
 80126a6:	4693      	mov	fp, r2
 80126a8:	4627      	mov	r7, r4
 80126aa:	e5c1      	b.n	8012230 <_dtoa_r+0x418>
 80126ac:	9b07      	ldr	r3, [sp, #28]
 80126ae:	46ca      	mov	sl, r9
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f000 8100 	beq.w	80128b6 <_dtoa_r+0xa9e>
 80126b6:	f1b8 0f00 	cmp.w	r8, #0
 80126ba:	dd05      	ble.n	80126c8 <_dtoa_r+0x8b0>
 80126bc:	4639      	mov	r1, r7
 80126be:	4642      	mov	r2, r8
 80126c0:	4630      	mov	r0, r6
 80126c2:	f000 fb71 	bl	8012da8 <__lshift>
 80126c6:	4607      	mov	r7, r0
 80126c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d05d      	beq.n	801278a <_dtoa_r+0x972>
 80126ce:	6879      	ldr	r1, [r7, #4]
 80126d0:	4630      	mov	r0, r6
 80126d2:	f000 f959 	bl	8012988 <_Balloc>
 80126d6:	4680      	mov	r8, r0
 80126d8:	b928      	cbnz	r0, 80126e6 <_dtoa_r+0x8ce>
 80126da:	4b82      	ldr	r3, [pc, #520]	; (80128e4 <_dtoa_r+0xacc>)
 80126dc:	4602      	mov	r2, r0
 80126de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80126e2:	f7ff bbb1 	b.w	8011e48 <_dtoa_r+0x30>
 80126e6:	693a      	ldr	r2, [r7, #16]
 80126e8:	3202      	adds	r2, #2
 80126ea:	0092      	lsls	r2, r2, #2
 80126ec:	f107 010c 	add.w	r1, r7, #12
 80126f0:	300c      	adds	r0, #12
 80126f2:	f000 fee5 	bl	80134c0 <memcpy>
 80126f6:	2201      	movs	r2, #1
 80126f8:	4641      	mov	r1, r8
 80126fa:	4630      	mov	r0, r6
 80126fc:	f000 fb54 	bl	8012da8 <__lshift>
 8012700:	9b01      	ldr	r3, [sp, #4]
 8012702:	3301      	adds	r3, #1
 8012704:	9304      	str	r3, [sp, #16]
 8012706:	9b01      	ldr	r3, [sp, #4]
 8012708:	4453      	add	r3, sl
 801270a:	9308      	str	r3, [sp, #32]
 801270c:	9b02      	ldr	r3, [sp, #8]
 801270e:	f003 0301 	and.w	r3, r3, #1
 8012712:	46b9      	mov	r9, r7
 8012714:	9307      	str	r3, [sp, #28]
 8012716:	4607      	mov	r7, r0
 8012718:	9b04      	ldr	r3, [sp, #16]
 801271a:	4621      	mov	r1, r4
 801271c:	3b01      	subs	r3, #1
 801271e:	4628      	mov	r0, r5
 8012720:	9302      	str	r3, [sp, #8]
 8012722:	f7ff faf0 	bl	8011d06 <quorem>
 8012726:	4603      	mov	r3, r0
 8012728:	3330      	adds	r3, #48	; 0x30
 801272a:	9005      	str	r0, [sp, #20]
 801272c:	4649      	mov	r1, r9
 801272e:	4628      	mov	r0, r5
 8012730:	9309      	str	r3, [sp, #36]	; 0x24
 8012732:	f000 fba5 	bl	8012e80 <__mcmp>
 8012736:	463a      	mov	r2, r7
 8012738:	4682      	mov	sl, r0
 801273a:	4621      	mov	r1, r4
 801273c:	4630      	mov	r0, r6
 801273e:	f000 fbbb 	bl	8012eb8 <__mdiff>
 8012742:	68c2      	ldr	r2, [r0, #12]
 8012744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012746:	4680      	mov	r8, r0
 8012748:	bb0a      	cbnz	r2, 801278e <_dtoa_r+0x976>
 801274a:	4601      	mov	r1, r0
 801274c:	4628      	mov	r0, r5
 801274e:	f000 fb97 	bl	8012e80 <__mcmp>
 8012752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012754:	4602      	mov	r2, r0
 8012756:	4641      	mov	r1, r8
 8012758:	4630      	mov	r0, r6
 801275a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801275e:	f000 f953 	bl	8012a08 <_Bfree>
 8012762:	9b06      	ldr	r3, [sp, #24]
 8012764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012766:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801276a:	ea43 0102 	orr.w	r1, r3, r2
 801276e:	9b07      	ldr	r3, [sp, #28]
 8012770:	4319      	orrs	r1, r3
 8012772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012774:	d10d      	bne.n	8012792 <_dtoa_r+0x97a>
 8012776:	2b39      	cmp	r3, #57	; 0x39
 8012778:	d029      	beq.n	80127ce <_dtoa_r+0x9b6>
 801277a:	f1ba 0f00 	cmp.w	sl, #0
 801277e:	dd01      	ble.n	8012784 <_dtoa_r+0x96c>
 8012780:	9b05      	ldr	r3, [sp, #20]
 8012782:	3331      	adds	r3, #49	; 0x31
 8012784:	9a02      	ldr	r2, [sp, #8]
 8012786:	7013      	strb	r3, [r2, #0]
 8012788:	e775      	b.n	8012676 <_dtoa_r+0x85e>
 801278a:	4638      	mov	r0, r7
 801278c:	e7b8      	b.n	8012700 <_dtoa_r+0x8e8>
 801278e:	2201      	movs	r2, #1
 8012790:	e7e1      	b.n	8012756 <_dtoa_r+0x93e>
 8012792:	f1ba 0f00 	cmp.w	sl, #0
 8012796:	db06      	blt.n	80127a6 <_dtoa_r+0x98e>
 8012798:	9906      	ldr	r1, [sp, #24]
 801279a:	ea41 0a0a 	orr.w	sl, r1, sl
 801279e:	9907      	ldr	r1, [sp, #28]
 80127a0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80127a4:	d120      	bne.n	80127e8 <_dtoa_r+0x9d0>
 80127a6:	2a00      	cmp	r2, #0
 80127a8:	ddec      	ble.n	8012784 <_dtoa_r+0x96c>
 80127aa:	4629      	mov	r1, r5
 80127ac:	2201      	movs	r2, #1
 80127ae:	4630      	mov	r0, r6
 80127b0:	9304      	str	r3, [sp, #16]
 80127b2:	f000 faf9 	bl	8012da8 <__lshift>
 80127b6:	4621      	mov	r1, r4
 80127b8:	4605      	mov	r5, r0
 80127ba:	f000 fb61 	bl	8012e80 <__mcmp>
 80127be:	2800      	cmp	r0, #0
 80127c0:	9b04      	ldr	r3, [sp, #16]
 80127c2:	dc02      	bgt.n	80127ca <_dtoa_r+0x9b2>
 80127c4:	d1de      	bne.n	8012784 <_dtoa_r+0x96c>
 80127c6:	07da      	lsls	r2, r3, #31
 80127c8:	d5dc      	bpl.n	8012784 <_dtoa_r+0x96c>
 80127ca:	2b39      	cmp	r3, #57	; 0x39
 80127cc:	d1d8      	bne.n	8012780 <_dtoa_r+0x968>
 80127ce:	9a02      	ldr	r2, [sp, #8]
 80127d0:	2339      	movs	r3, #57	; 0x39
 80127d2:	7013      	strb	r3, [r2, #0]
 80127d4:	4643      	mov	r3, r8
 80127d6:	4698      	mov	r8, r3
 80127d8:	3b01      	subs	r3, #1
 80127da:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80127de:	2a39      	cmp	r2, #57	; 0x39
 80127e0:	d051      	beq.n	8012886 <_dtoa_r+0xa6e>
 80127e2:	3201      	adds	r2, #1
 80127e4:	701a      	strb	r2, [r3, #0]
 80127e6:	e746      	b.n	8012676 <_dtoa_r+0x85e>
 80127e8:	2a00      	cmp	r2, #0
 80127ea:	dd03      	ble.n	80127f4 <_dtoa_r+0x9dc>
 80127ec:	2b39      	cmp	r3, #57	; 0x39
 80127ee:	d0ee      	beq.n	80127ce <_dtoa_r+0x9b6>
 80127f0:	3301      	adds	r3, #1
 80127f2:	e7c7      	b.n	8012784 <_dtoa_r+0x96c>
 80127f4:	9a04      	ldr	r2, [sp, #16]
 80127f6:	9908      	ldr	r1, [sp, #32]
 80127f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80127fc:	428a      	cmp	r2, r1
 80127fe:	d02b      	beq.n	8012858 <_dtoa_r+0xa40>
 8012800:	4629      	mov	r1, r5
 8012802:	2300      	movs	r3, #0
 8012804:	220a      	movs	r2, #10
 8012806:	4630      	mov	r0, r6
 8012808:	f000 f920 	bl	8012a4c <__multadd>
 801280c:	45b9      	cmp	r9, r7
 801280e:	4605      	mov	r5, r0
 8012810:	f04f 0300 	mov.w	r3, #0
 8012814:	f04f 020a 	mov.w	r2, #10
 8012818:	4649      	mov	r1, r9
 801281a:	4630      	mov	r0, r6
 801281c:	d107      	bne.n	801282e <_dtoa_r+0xa16>
 801281e:	f000 f915 	bl	8012a4c <__multadd>
 8012822:	4681      	mov	r9, r0
 8012824:	4607      	mov	r7, r0
 8012826:	9b04      	ldr	r3, [sp, #16]
 8012828:	3301      	adds	r3, #1
 801282a:	9304      	str	r3, [sp, #16]
 801282c:	e774      	b.n	8012718 <_dtoa_r+0x900>
 801282e:	f000 f90d 	bl	8012a4c <__multadd>
 8012832:	4639      	mov	r1, r7
 8012834:	4681      	mov	r9, r0
 8012836:	2300      	movs	r3, #0
 8012838:	220a      	movs	r2, #10
 801283a:	4630      	mov	r0, r6
 801283c:	f000 f906 	bl	8012a4c <__multadd>
 8012840:	4607      	mov	r7, r0
 8012842:	e7f0      	b.n	8012826 <_dtoa_r+0xa0e>
 8012844:	f1ba 0f00 	cmp.w	sl, #0
 8012848:	9a01      	ldr	r2, [sp, #4]
 801284a:	bfcc      	ite	gt
 801284c:	46d0      	movgt	r8, sl
 801284e:	f04f 0801 	movle.w	r8, #1
 8012852:	4490      	add	r8, r2
 8012854:	f04f 0900 	mov.w	r9, #0
 8012858:	4629      	mov	r1, r5
 801285a:	2201      	movs	r2, #1
 801285c:	4630      	mov	r0, r6
 801285e:	9302      	str	r3, [sp, #8]
 8012860:	f000 faa2 	bl	8012da8 <__lshift>
 8012864:	4621      	mov	r1, r4
 8012866:	4605      	mov	r5, r0
 8012868:	f000 fb0a 	bl	8012e80 <__mcmp>
 801286c:	2800      	cmp	r0, #0
 801286e:	dcb1      	bgt.n	80127d4 <_dtoa_r+0x9bc>
 8012870:	d102      	bne.n	8012878 <_dtoa_r+0xa60>
 8012872:	9b02      	ldr	r3, [sp, #8]
 8012874:	07db      	lsls	r3, r3, #31
 8012876:	d4ad      	bmi.n	80127d4 <_dtoa_r+0x9bc>
 8012878:	4643      	mov	r3, r8
 801287a:	4698      	mov	r8, r3
 801287c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012880:	2a30      	cmp	r2, #48	; 0x30
 8012882:	d0fa      	beq.n	801287a <_dtoa_r+0xa62>
 8012884:	e6f7      	b.n	8012676 <_dtoa_r+0x85e>
 8012886:	9a01      	ldr	r2, [sp, #4]
 8012888:	429a      	cmp	r2, r3
 801288a:	d1a4      	bne.n	80127d6 <_dtoa_r+0x9be>
 801288c:	f10b 0b01 	add.w	fp, fp, #1
 8012890:	2331      	movs	r3, #49	; 0x31
 8012892:	e778      	b.n	8012786 <_dtoa_r+0x96e>
 8012894:	4b14      	ldr	r3, [pc, #80]	; (80128e8 <_dtoa_r+0xad0>)
 8012896:	f7ff bb2a 	b.w	8011eee <_dtoa_r+0xd6>
 801289a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801289c:	2b00      	cmp	r3, #0
 801289e:	f47f ab05 	bne.w	8011eac <_dtoa_r+0x94>
 80128a2:	4b12      	ldr	r3, [pc, #72]	; (80128ec <_dtoa_r+0xad4>)
 80128a4:	f7ff bb23 	b.w	8011eee <_dtoa_r+0xd6>
 80128a8:	f1ba 0f00 	cmp.w	sl, #0
 80128ac:	dc03      	bgt.n	80128b6 <_dtoa_r+0xa9e>
 80128ae:	9b06      	ldr	r3, [sp, #24]
 80128b0:	2b02      	cmp	r3, #2
 80128b2:	f73f aec8 	bgt.w	8012646 <_dtoa_r+0x82e>
 80128b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80128ba:	4621      	mov	r1, r4
 80128bc:	4628      	mov	r0, r5
 80128be:	f7ff fa22 	bl	8011d06 <quorem>
 80128c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80128c6:	f808 3b01 	strb.w	r3, [r8], #1
 80128ca:	9a01      	ldr	r2, [sp, #4]
 80128cc:	eba8 0202 	sub.w	r2, r8, r2
 80128d0:	4592      	cmp	sl, r2
 80128d2:	ddb7      	ble.n	8012844 <_dtoa_r+0xa2c>
 80128d4:	4629      	mov	r1, r5
 80128d6:	2300      	movs	r3, #0
 80128d8:	220a      	movs	r2, #10
 80128da:	4630      	mov	r0, r6
 80128dc:	f000 f8b6 	bl	8012a4c <__multadd>
 80128e0:	4605      	mov	r5, r0
 80128e2:	e7ea      	b.n	80128ba <_dtoa_r+0xaa2>
 80128e4:	08014764 	.word	0x08014764
 80128e8:	080146c4 	.word	0x080146c4
 80128ec:	080146e8 	.word	0x080146e8

080128f0 <_free_r>:
 80128f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128f2:	2900      	cmp	r1, #0
 80128f4:	d044      	beq.n	8012980 <_free_r+0x90>
 80128f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128fa:	9001      	str	r0, [sp, #4]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	f1a1 0404 	sub.w	r4, r1, #4
 8012902:	bfb8      	it	lt
 8012904:	18e4      	addlt	r4, r4, r3
 8012906:	f7fe fc01 	bl	801110c <__malloc_lock>
 801290a:	4a1e      	ldr	r2, [pc, #120]	; (8012984 <_free_r+0x94>)
 801290c:	9801      	ldr	r0, [sp, #4]
 801290e:	6813      	ldr	r3, [r2, #0]
 8012910:	b933      	cbnz	r3, 8012920 <_free_r+0x30>
 8012912:	6063      	str	r3, [r4, #4]
 8012914:	6014      	str	r4, [r2, #0]
 8012916:	b003      	add	sp, #12
 8012918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801291c:	f7fe bbfc 	b.w	8011118 <__malloc_unlock>
 8012920:	42a3      	cmp	r3, r4
 8012922:	d908      	bls.n	8012936 <_free_r+0x46>
 8012924:	6825      	ldr	r5, [r4, #0]
 8012926:	1961      	adds	r1, r4, r5
 8012928:	428b      	cmp	r3, r1
 801292a:	bf01      	itttt	eq
 801292c:	6819      	ldreq	r1, [r3, #0]
 801292e:	685b      	ldreq	r3, [r3, #4]
 8012930:	1949      	addeq	r1, r1, r5
 8012932:	6021      	streq	r1, [r4, #0]
 8012934:	e7ed      	b.n	8012912 <_free_r+0x22>
 8012936:	461a      	mov	r2, r3
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	b10b      	cbz	r3, 8012940 <_free_r+0x50>
 801293c:	42a3      	cmp	r3, r4
 801293e:	d9fa      	bls.n	8012936 <_free_r+0x46>
 8012940:	6811      	ldr	r1, [r2, #0]
 8012942:	1855      	adds	r5, r2, r1
 8012944:	42a5      	cmp	r5, r4
 8012946:	d10b      	bne.n	8012960 <_free_r+0x70>
 8012948:	6824      	ldr	r4, [r4, #0]
 801294a:	4421      	add	r1, r4
 801294c:	1854      	adds	r4, r2, r1
 801294e:	42a3      	cmp	r3, r4
 8012950:	6011      	str	r1, [r2, #0]
 8012952:	d1e0      	bne.n	8012916 <_free_r+0x26>
 8012954:	681c      	ldr	r4, [r3, #0]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	6053      	str	r3, [r2, #4]
 801295a:	440c      	add	r4, r1
 801295c:	6014      	str	r4, [r2, #0]
 801295e:	e7da      	b.n	8012916 <_free_r+0x26>
 8012960:	d902      	bls.n	8012968 <_free_r+0x78>
 8012962:	230c      	movs	r3, #12
 8012964:	6003      	str	r3, [r0, #0]
 8012966:	e7d6      	b.n	8012916 <_free_r+0x26>
 8012968:	6825      	ldr	r5, [r4, #0]
 801296a:	1961      	adds	r1, r4, r5
 801296c:	428b      	cmp	r3, r1
 801296e:	bf04      	itt	eq
 8012970:	6819      	ldreq	r1, [r3, #0]
 8012972:	685b      	ldreq	r3, [r3, #4]
 8012974:	6063      	str	r3, [r4, #4]
 8012976:	bf04      	itt	eq
 8012978:	1949      	addeq	r1, r1, r5
 801297a:	6021      	streq	r1, [r4, #0]
 801297c:	6054      	str	r4, [r2, #4]
 801297e:	e7ca      	b.n	8012916 <_free_r+0x26>
 8012980:	b003      	add	sp, #12
 8012982:	bd30      	pop	{r4, r5, pc}
 8012984:	24002140 	.word	0x24002140

08012988 <_Balloc>:
 8012988:	b570      	push	{r4, r5, r6, lr}
 801298a:	69c6      	ldr	r6, [r0, #28]
 801298c:	4604      	mov	r4, r0
 801298e:	460d      	mov	r5, r1
 8012990:	b976      	cbnz	r6, 80129b0 <_Balloc+0x28>
 8012992:	2010      	movs	r0, #16
 8012994:	f7fe fb12 	bl	8010fbc <malloc>
 8012998:	4602      	mov	r2, r0
 801299a:	61e0      	str	r0, [r4, #28]
 801299c:	b920      	cbnz	r0, 80129a8 <_Balloc+0x20>
 801299e:	4b18      	ldr	r3, [pc, #96]	; (8012a00 <_Balloc+0x78>)
 80129a0:	4818      	ldr	r0, [pc, #96]	; (8012a04 <_Balloc+0x7c>)
 80129a2:	216b      	movs	r1, #107	; 0x6b
 80129a4:	f000 fd9a 	bl	80134dc <__assert_func>
 80129a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129ac:	6006      	str	r6, [r0, #0]
 80129ae:	60c6      	str	r6, [r0, #12]
 80129b0:	69e6      	ldr	r6, [r4, #28]
 80129b2:	68f3      	ldr	r3, [r6, #12]
 80129b4:	b183      	cbz	r3, 80129d8 <_Balloc+0x50>
 80129b6:	69e3      	ldr	r3, [r4, #28]
 80129b8:	68db      	ldr	r3, [r3, #12]
 80129ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80129be:	b9b8      	cbnz	r0, 80129f0 <_Balloc+0x68>
 80129c0:	2101      	movs	r1, #1
 80129c2:	fa01 f605 	lsl.w	r6, r1, r5
 80129c6:	1d72      	adds	r2, r6, #5
 80129c8:	0092      	lsls	r2, r2, #2
 80129ca:	4620      	mov	r0, r4
 80129cc:	f000 fda4 	bl	8013518 <_calloc_r>
 80129d0:	b160      	cbz	r0, 80129ec <_Balloc+0x64>
 80129d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80129d6:	e00e      	b.n	80129f6 <_Balloc+0x6e>
 80129d8:	2221      	movs	r2, #33	; 0x21
 80129da:	2104      	movs	r1, #4
 80129dc:	4620      	mov	r0, r4
 80129de:	f000 fd9b 	bl	8013518 <_calloc_r>
 80129e2:	69e3      	ldr	r3, [r4, #28]
 80129e4:	60f0      	str	r0, [r6, #12]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d1e4      	bne.n	80129b6 <_Balloc+0x2e>
 80129ec:	2000      	movs	r0, #0
 80129ee:	bd70      	pop	{r4, r5, r6, pc}
 80129f0:	6802      	ldr	r2, [r0, #0]
 80129f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80129f6:	2300      	movs	r3, #0
 80129f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129fc:	e7f7      	b.n	80129ee <_Balloc+0x66>
 80129fe:	bf00      	nop
 8012a00:	080146f5 	.word	0x080146f5
 8012a04:	08014775 	.word	0x08014775

08012a08 <_Bfree>:
 8012a08:	b570      	push	{r4, r5, r6, lr}
 8012a0a:	69c6      	ldr	r6, [r0, #28]
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	460c      	mov	r4, r1
 8012a10:	b976      	cbnz	r6, 8012a30 <_Bfree+0x28>
 8012a12:	2010      	movs	r0, #16
 8012a14:	f7fe fad2 	bl	8010fbc <malloc>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	61e8      	str	r0, [r5, #28]
 8012a1c:	b920      	cbnz	r0, 8012a28 <_Bfree+0x20>
 8012a1e:	4b09      	ldr	r3, [pc, #36]	; (8012a44 <_Bfree+0x3c>)
 8012a20:	4809      	ldr	r0, [pc, #36]	; (8012a48 <_Bfree+0x40>)
 8012a22:	218f      	movs	r1, #143	; 0x8f
 8012a24:	f000 fd5a 	bl	80134dc <__assert_func>
 8012a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a2c:	6006      	str	r6, [r0, #0]
 8012a2e:	60c6      	str	r6, [r0, #12]
 8012a30:	b13c      	cbz	r4, 8012a42 <_Bfree+0x3a>
 8012a32:	69eb      	ldr	r3, [r5, #28]
 8012a34:	6862      	ldr	r2, [r4, #4]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a3c:	6021      	str	r1, [r4, #0]
 8012a3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012a42:	bd70      	pop	{r4, r5, r6, pc}
 8012a44:	080146f5 	.word	0x080146f5
 8012a48:	08014775 	.word	0x08014775

08012a4c <__multadd>:
 8012a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a50:	690d      	ldr	r5, [r1, #16]
 8012a52:	4607      	mov	r7, r0
 8012a54:	460c      	mov	r4, r1
 8012a56:	461e      	mov	r6, r3
 8012a58:	f101 0c14 	add.w	ip, r1, #20
 8012a5c:	2000      	movs	r0, #0
 8012a5e:	f8dc 3000 	ldr.w	r3, [ip]
 8012a62:	b299      	uxth	r1, r3
 8012a64:	fb02 6101 	mla	r1, r2, r1, r6
 8012a68:	0c1e      	lsrs	r6, r3, #16
 8012a6a:	0c0b      	lsrs	r3, r1, #16
 8012a6c:	fb02 3306 	mla	r3, r2, r6, r3
 8012a70:	b289      	uxth	r1, r1
 8012a72:	3001      	adds	r0, #1
 8012a74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012a78:	4285      	cmp	r5, r0
 8012a7a:	f84c 1b04 	str.w	r1, [ip], #4
 8012a7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012a82:	dcec      	bgt.n	8012a5e <__multadd+0x12>
 8012a84:	b30e      	cbz	r6, 8012aca <__multadd+0x7e>
 8012a86:	68a3      	ldr	r3, [r4, #8]
 8012a88:	42ab      	cmp	r3, r5
 8012a8a:	dc19      	bgt.n	8012ac0 <__multadd+0x74>
 8012a8c:	6861      	ldr	r1, [r4, #4]
 8012a8e:	4638      	mov	r0, r7
 8012a90:	3101      	adds	r1, #1
 8012a92:	f7ff ff79 	bl	8012988 <_Balloc>
 8012a96:	4680      	mov	r8, r0
 8012a98:	b928      	cbnz	r0, 8012aa6 <__multadd+0x5a>
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	4b0c      	ldr	r3, [pc, #48]	; (8012ad0 <__multadd+0x84>)
 8012a9e:	480d      	ldr	r0, [pc, #52]	; (8012ad4 <__multadd+0x88>)
 8012aa0:	21ba      	movs	r1, #186	; 0xba
 8012aa2:	f000 fd1b 	bl	80134dc <__assert_func>
 8012aa6:	6922      	ldr	r2, [r4, #16]
 8012aa8:	3202      	adds	r2, #2
 8012aaa:	f104 010c 	add.w	r1, r4, #12
 8012aae:	0092      	lsls	r2, r2, #2
 8012ab0:	300c      	adds	r0, #12
 8012ab2:	f000 fd05 	bl	80134c0 <memcpy>
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	4638      	mov	r0, r7
 8012aba:	f7ff ffa5 	bl	8012a08 <_Bfree>
 8012abe:	4644      	mov	r4, r8
 8012ac0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ac4:	3501      	adds	r5, #1
 8012ac6:	615e      	str	r6, [r3, #20]
 8012ac8:	6125      	str	r5, [r4, #16]
 8012aca:	4620      	mov	r0, r4
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	08014764 	.word	0x08014764
 8012ad4:	08014775 	.word	0x08014775

08012ad8 <__hi0bits>:
 8012ad8:	0c03      	lsrs	r3, r0, #16
 8012ada:	041b      	lsls	r3, r3, #16
 8012adc:	b9d3      	cbnz	r3, 8012b14 <__hi0bits+0x3c>
 8012ade:	0400      	lsls	r0, r0, #16
 8012ae0:	2310      	movs	r3, #16
 8012ae2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ae6:	bf04      	itt	eq
 8012ae8:	0200      	lsleq	r0, r0, #8
 8012aea:	3308      	addeq	r3, #8
 8012aec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012af0:	bf04      	itt	eq
 8012af2:	0100      	lsleq	r0, r0, #4
 8012af4:	3304      	addeq	r3, #4
 8012af6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012afa:	bf04      	itt	eq
 8012afc:	0080      	lsleq	r0, r0, #2
 8012afe:	3302      	addeq	r3, #2
 8012b00:	2800      	cmp	r0, #0
 8012b02:	db05      	blt.n	8012b10 <__hi0bits+0x38>
 8012b04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012b08:	f103 0301 	add.w	r3, r3, #1
 8012b0c:	bf08      	it	eq
 8012b0e:	2320      	moveq	r3, #32
 8012b10:	4618      	mov	r0, r3
 8012b12:	4770      	bx	lr
 8012b14:	2300      	movs	r3, #0
 8012b16:	e7e4      	b.n	8012ae2 <__hi0bits+0xa>

08012b18 <__lo0bits>:
 8012b18:	6803      	ldr	r3, [r0, #0]
 8012b1a:	f013 0207 	ands.w	r2, r3, #7
 8012b1e:	d00c      	beq.n	8012b3a <__lo0bits+0x22>
 8012b20:	07d9      	lsls	r1, r3, #31
 8012b22:	d422      	bmi.n	8012b6a <__lo0bits+0x52>
 8012b24:	079a      	lsls	r2, r3, #30
 8012b26:	bf49      	itett	mi
 8012b28:	085b      	lsrmi	r3, r3, #1
 8012b2a:	089b      	lsrpl	r3, r3, #2
 8012b2c:	6003      	strmi	r3, [r0, #0]
 8012b2e:	2201      	movmi	r2, #1
 8012b30:	bf5c      	itt	pl
 8012b32:	6003      	strpl	r3, [r0, #0]
 8012b34:	2202      	movpl	r2, #2
 8012b36:	4610      	mov	r0, r2
 8012b38:	4770      	bx	lr
 8012b3a:	b299      	uxth	r1, r3
 8012b3c:	b909      	cbnz	r1, 8012b42 <__lo0bits+0x2a>
 8012b3e:	0c1b      	lsrs	r3, r3, #16
 8012b40:	2210      	movs	r2, #16
 8012b42:	b2d9      	uxtb	r1, r3
 8012b44:	b909      	cbnz	r1, 8012b4a <__lo0bits+0x32>
 8012b46:	3208      	adds	r2, #8
 8012b48:	0a1b      	lsrs	r3, r3, #8
 8012b4a:	0719      	lsls	r1, r3, #28
 8012b4c:	bf04      	itt	eq
 8012b4e:	091b      	lsreq	r3, r3, #4
 8012b50:	3204      	addeq	r2, #4
 8012b52:	0799      	lsls	r1, r3, #30
 8012b54:	bf04      	itt	eq
 8012b56:	089b      	lsreq	r3, r3, #2
 8012b58:	3202      	addeq	r2, #2
 8012b5a:	07d9      	lsls	r1, r3, #31
 8012b5c:	d403      	bmi.n	8012b66 <__lo0bits+0x4e>
 8012b5e:	085b      	lsrs	r3, r3, #1
 8012b60:	f102 0201 	add.w	r2, r2, #1
 8012b64:	d003      	beq.n	8012b6e <__lo0bits+0x56>
 8012b66:	6003      	str	r3, [r0, #0]
 8012b68:	e7e5      	b.n	8012b36 <__lo0bits+0x1e>
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	e7e3      	b.n	8012b36 <__lo0bits+0x1e>
 8012b6e:	2220      	movs	r2, #32
 8012b70:	e7e1      	b.n	8012b36 <__lo0bits+0x1e>
	...

08012b74 <__i2b>:
 8012b74:	b510      	push	{r4, lr}
 8012b76:	460c      	mov	r4, r1
 8012b78:	2101      	movs	r1, #1
 8012b7a:	f7ff ff05 	bl	8012988 <_Balloc>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	b928      	cbnz	r0, 8012b8e <__i2b+0x1a>
 8012b82:	4b05      	ldr	r3, [pc, #20]	; (8012b98 <__i2b+0x24>)
 8012b84:	4805      	ldr	r0, [pc, #20]	; (8012b9c <__i2b+0x28>)
 8012b86:	f240 1145 	movw	r1, #325	; 0x145
 8012b8a:	f000 fca7 	bl	80134dc <__assert_func>
 8012b8e:	2301      	movs	r3, #1
 8012b90:	6144      	str	r4, [r0, #20]
 8012b92:	6103      	str	r3, [r0, #16]
 8012b94:	bd10      	pop	{r4, pc}
 8012b96:	bf00      	nop
 8012b98:	08014764 	.word	0x08014764
 8012b9c:	08014775 	.word	0x08014775

08012ba0 <__multiply>:
 8012ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba4:	4691      	mov	r9, r2
 8012ba6:	690a      	ldr	r2, [r1, #16]
 8012ba8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	bfb8      	it	lt
 8012bb0:	460b      	movlt	r3, r1
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	bfbc      	itt	lt
 8012bb6:	464c      	movlt	r4, r9
 8012bb8:	4699      	movlt	r9, r3
 8012bba:	6927      	ldr	r7, [r4, #16]
 8012bbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012bc0:	68a3      	ldr	r3, [r4, #8]
 8012bc2:	6861      	ldr	r1, [r4, #4]
 8012bc4:	eb07 060a 	add.w	r6, r7, sl
 8012bc8:	42b3      	cmp	r3, r6
 8012bca:	b085      	sub	sp, #20
 8012bcc:	bfb8      	it	lt
 8012bce:	3101      	addlt	r1, #1
 8012bd0:	f7ff feda 	bl	8012988 <_Balloc>
 8012bd4:	b930      	cbnz	r0, 8012be4 <__multiply+0x44>
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	4b44      	ldr	r3, [pc, #272]	; (8012cec <__multiply+0x14c>)
 8012bda:	4845      	ldr	r0, [pc, #276]	; (8012cf0 <__multiply+0x150>)
 8012bdc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012be0:	f000 fc7c 	bl	80134dc <__assert_func>
 8012be4:	f100 0514 	add.w	r5, r0, #20
 8012be8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012bec:	462b      	mov	r3, r5
 8012bee:	2200      	movs	r2, #0
 8012bf0:	4543      	cmp	r3, r8
 8012bf2:	d321      	bcc.n	8012c38 <__multiply+0x98>
 8012bf4:	f104 0314 	add.w	r3, r4, #20
 8012bf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012bfc:	f109 0314 	add.w	r3, r9, #20
 8012c00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012c04:	9202      	str	r2, [sp, #8]
 8012c06:	1b3a      	subs	r2, r7, r4
 8012c08:	3a15      	subs	r2, #21
 8012c0a:	f022 0203 	bic.w	r2, r2, #3
 8012c0e:	3204      	adds	r2, #4
 8012c10:	f104 0115 	add.w	r1, r4, #21
 8012c14:	428f      	cmp	r7, r1
 8012c16:	bf38      	it	cc
 8012c18:	2204      	movcc	r2, #4
 8012c1a:	9201      	str	r2, [sp, #4]
 8012c1c:	9a02      	ldr	r2, [sp, #8]
 8012c1e:	9303      	str	r3, [sp, #12]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d80c      	bhi.n	8012c3e <__multiply+0x9e>
 8012c24:	2e00      	cmp	r6, #0
 8012c26:	dd03      	ble.n	8012c30 <__multiply+0x90>
 8012c28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d05b      	beq.n	8012ce8 <__multiply+0x148>
 8012c30:	6106      	str	r6, [r0, #16]
 8012c32:	b005      	add	sp, #20
 8012c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c38:	f843 2b04 	str.w	r2, [r3], #4
 8012c3c:	e7d8      	b.n	8012bf0 <__multiply+0x50>
 8012c3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c42:	f1ba 0f00 	cmp.w	sl, #0
 8012c46:	d024      	beq.n	8012c92 <__multiply+0xf2>
 8012c48:	f104 0e14 	add.w	lr, r4, #20
 8012c4c:	46a9      	mov	r9, r5
 8012c4e:	f04f 0c00 	mov.w	ip, #0
 8012c52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c56:	f8d9 1000 	ldr.w	r1, [r9]
 8012c5a:	fa1f fb82 	uxth.w	fp, r2
 8012c5e:	b289      	uxth	r1, r1
 8012c60:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012c68:	f8d9 2000 	ldr.w	r2, [r9]
 8012c6c:	4461      	add	r1, ip
 8012c6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c72:	fb0a c20b 	mla	r2, sl, fp, ip
 8012c76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012c7a:	b289      	uxth	r1, r1
 8012c7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c80:	4577      	cmp	r7, lr
 8012c82:	f849 1b04 	str.w	r1, [r9], #4
 8012c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c8a:	d8e2      	bhi.n	8012c52 <__multiply+0xb2>
 8012c8c:	9a01      	ldr	r2, [sp, #4]
 8012c8e:	f845 c002 	str.w	ip, [r5, r2]
 8012c92:	9a03      	ldr	r2, [sp, #12]
 8012c94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c98:	3304      	adds	r3, #4
 8012c9a:	f1b9 0f00 	cmp.w	r9, #0
 8012c9e:	d021      	beq.n	8012ce4 <__multiply+0x144>
 8012ca0:	6829      	ldr	r1, [r5, #0]
 8012ca2:	f104 0c14 	add.w	ip, r4, #20
 8012ca6:	46ae      	mov	lr, r5
 8012ca8:	f04f 0a00 	mov.w	sl, #0
 8012cac:	f8bc b000 	ldrh.w	fp, [ip]
 8012cb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012cb4:	fb09 220b 	mla	r2, r9, fp, r2
 8012cb8:	4452      	add	r2, sl
 8012cba:	b289      	uxth	r1, r1
 8012cbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012cc0:	f84e 1b04 	str.w	r1, [lr], #4
 8012cc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012cc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ccc:	f8be 1000 	ldrh.w	r1, [lr]
 8012cd0:	fb09 110a 	mla	r1, r9, sl, r1
 8012cd4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012cd8:	4567      	cmp	r7, ip
 8012cda:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012cde:	d8e5      	bhi.n	8012cac <__multiply+0x10c>
 8012ce0:	9a01      	ldr	r2, [sp, #4]
 8012ce2:	50a9      	str	r1, [r5, r2]
 8012ce4:	3504      	adds	r5, #4
 8012ce6:	e799      	b.n	8012c1c <__multiply+0x7c>
 8012ce8:	3e01      	subs	r6, #1
 8012cea:	e79b      	b.n	8012c24 <__multiply+0x84>
 8012cec:	08014764 	.word	0x08014764
 8012cf0:	08014775 	.word	0x08014775

08012cf4 <__pow5mult>:
 8012cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cf8:	4615      	mov	r5, r2
 8012cfa:	f012 0203 	ands.w	r2, r2, #3
 8012cfe:	4606      	mov	r6, r0
 8012d00:	460f      	mov	r7, r1
 8012d02:	d007      	beq.n	8012d14 <__pow5mult+0x20>
 8012d04:	4c25      	ldr	r4, [pc, #148]	; (8012d9c <__pow5mult+0xa8>)
 8012d06:	3a01      	subs	r2, #1
 8012d08:	2300      	movs	r3, #0
 8012d0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012d0e:	f7ff fe9d 	bl	8012a4c <__multadd>
 8012d12:	4607      	mov	r7, r0
 8012d14:	10ad      	asrs	r5, r5, #2
 8012d16:	d03d      	beq.n	8012d94 <__pow5mult+0xa0>
 8012d18:	69f4      	ldr	r4, [r6, #28]
 8012d1a:	b97c      	cbnz	r4, 8012d3c <__pow5mult+0x48>
 8012d1c:	2010      	movs	r0, #16
 8012d1e:	f7fe f94d 	bl	8010fbc <malloc>
 8012d22:	4602      	mov	r2, r0
 8012d24:	61f0      	str	r0, [r6, #28]
 8012d26:	b928      	cbnz	r0, 8012d34 <__pow5mult+0x40>
 8012d28:	4b1d      	ldr	r3, [pc, #116]	; (8012da0 <__pow5mult+0xac>)
 8012d2a:	481e      	ldr	r0, [pc, #120]	; (8012da4 <__pow5mult+0xb0>)
 8012d2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012d30:	f000 fbd4 	bl	80134dc <__assert_func>
 8012d34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d38:	6004      	str	r4, [r0, #0]
 8012d3a:	60c4      	str	r4, [r0, #12]
 8012d3c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012d40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d44:	b94c      	cbnz	r4, 8012d5a <__pow5mult+0x66>
 8012d46:	f240 2171 	movw	r1, #625	; 0x271
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	f7ff ff12 	bl	8012b74 <__i2b>
 8012d50:	2300      	movs	r3, #0
 8012d52:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d56:	4604      	mov	r4, r0
 8012d58:	6003      	str	r3, [r0, #0]
 8012d5a:	f04f 0900 	mov.w	r9, #0
 8012d5e:	07eb      	lsls	r3, r5, #31
 8012d60:	d50a      	bpl.n	8012d78 <__pow5mult+0x84>
 8012d62:	4639      	mov	r1, r7
 8012d64:	4622      	mov	r2, r4
 8012d66:	4630      	mov	r0, r6
 8012d68:	f7ff ff1a 	bl	8012ba0 <__multiply>
 8012d6c:	4639      	mov	r1, r7
 8012d6e:	4680      	mov	r8, r0
 8012d70:	4630      	mov	r0, r6
 8012d72:	f7ff fe49 	bl	8012a08 <_Bfree>
 8012d76:	4647      	mov	r7, r8
 8012d78:	106d      	asrs	r5, r5, #1
 8012d7a:	d00b      	beq.n	8012d94 <__pow5mult+0xa0>
 8012d7c:	6820      	ldr	r0, [r4, #0]
 8012d7e:	b938      	cbnz	r0, 8012d90 <__pow5mult+0x9c>
 8012d80:	4622      	mov	r2, r4
 8012d82:	4621      	mov	r1, r4
 8012d84:	4630      	mov	r0, r6
 8012d86:	f7ff ff0b 	bl	8012ba0 <__multiply>
 8012d8a:	6020      	str	r0, [r4, #0]
 8012d8c:	f8c0 9000 	str.w	r9, [r0]
 8012d90:	4604      	mov	r4, r0
 8012d92:	e7e4      	b.n	8012d5e <__pow5mult+0x6a>
 8012d94:	4638      	mov	r0, r7
 8012d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d9a:	bf00      	nop
 8012d9c:	080148c0 	.word	0x080148c0
 8012da0:	080146f5 	.word	0x080146f5
 8012da4:	08014775 	.word	0x08014775

08012da8 <__lshift>:
 8012da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dac:	460c      	mov	r4, r1
 8012dae:	6849      	ldr	r1, [r1, #4]
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012db6:	68a3      	ldr	r3, [r4, #8]
 8012db8:	4607      	mov	r7, r0
 8012dba:	4691      	mov	r9, r2
 8012dbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012dc0:	f108 0601 	add.w	r6, r8, #1
 8012dc4:	42b3      	cmp	r3, r6
 8012dc6:	db0b      	blt.n	8012de0 <__lshift+0x38>
 8012dc8:	4638      	mov	r0, r7
 8012dca:	f7ff fddd 	bl	8012988 <_Balloc>
 8012dce:	4605      	mov	r5, r0
 8012dd0:	b948      	cbnz	r0, 8012de6 <__lshift+0x3e>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	4b28      	ldr	r3, [pc, #160]	; (8012e78 <__lshift+0xd0>)
 8012dd6:	4829      	ldr	r0, [pc, #164]	; (8012e7c <__lshift+0xd4>)
 8012dd8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012ddc:	f000 fb7e 	bl	80134dc <__assert_func>
 8012de0:	3101      	adds	r1, #1
 8012de2:	005b      	lsls	r3, r3, #1
 8012de4:	e7ee      	b.n	8012dc4 <__lshift+0x1c>
 8012de6:	2300      	movs	r3, #0
 8012de8:	f100 0114 	add.w	r1, r0, #20
 8012dec:	f100 0210 	add.w	r2, r0, #16
 8012df0:	4618      	mov	r0, r3
 8012df2:	4553      	cmp	r3, sl
 8012df4:	db33      	blt.n	8012e5e <__lshift+0xb6>
 8012df6:	6920      	ldr	r0, [r4, #16]
 8012df8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012dfc:	f104 0314 	add.w	r3, r4, #20
 8012e00:	f019 091f 	ands.w	r9, r9, #31
 8012e04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012e08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012e0c:	d02b      	beq.n	8012e66 <__lshift+0xbe>
 8012e0e:	f1c9 0e20 	rsb	lr, r9, #32
 8012e12:	468a      	mov	sl, r1
 8012e14:	2200      	movs	r2, #0
 8012e16:	6818      	ldr	r0, [r3, #0]
 8012e18:	fa00 f009 	lsl.w	r0, r0, r9
 8012e1c:	4310      	orrs	r0, r2
 8012e1e:	f84a 0b04 	str.w	r0, [sl], #4
 8012e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e26:	459c      	cmp	ip, r3
 8012e28:	fa22 f20e 	lsr.w	r2, r2, lr
 8012e2c:	d8f3      	bhi.n	8012e16 <__lshift+0x6e>
 8012e2e:	ebac 0304 	sub.w	r3, ip, r4
 8012e32:	3b15      	subs	r3, #21
 8012e34:	f023 0303 	bic.w	r3, r3, #3
 8012e38:	3304      	adds	r3, #4
 8012e3a:	f104 0015 	add.w	r0, r4, #21
 8012e3e:	4584      	cmp	ip, r0
 8012e40:	bf38      	it	cc
 8012e42:	2304      	movcc	r3, #4
 8012e44:	50ca      	str	r2, [r1, r3]
 8012e46:	b10a      	cbz	r2, 8012e4c <__lshift+0xa4>
 8012e48:	f108 0602 	add.w	r6, r8, #2
 8012e4c:	3e01      	subs	r6, #1
 8012e4e:	4638      	mov	r0, r7
 8012e50:	612e      	str	r6, [r5, #16]
 8012e52:	4621      	mov	r1, r4
 8012e54:	f7ff fdd8 	bl	8012a08 <_Bfree>
 8012e58:	4628      	mov	r0, r5
 8012e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e62:	3301      	adds	r3, #1
 8012e64:	e7c5      	b.n	8012df2 <__lshift+0x4a>
 8012e66:	3904      	subs	r1, #4
 8012e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e70:	459c      	cmp	ip, r3
 8012e72:	d8f9      	bhi.n	8012e68 <__lshift+0xc0>
 8012e74:	e7ea      	b.n	8012e4c <__lshift+0xa4>
 8012e76:	bf00      	nop
 8012e78:	08014764 	.word	0x08014764
 8012e7c:	08014775 	.word	0x08014775

08012e80 <__mcmp>:
 8012e80:	b530      	push	{r4, r5, lr}
 8012e82:	6902      	ldr	r2, [r0, #16]
 8012e84:	690c      	ldr	r4, [r1, #16]
 8012e86:	1b12      	subs	r2, r2, r4
 8012e88:	d10e      	bne.n	8012ea8 <__mcmp+0x28>
 8012e8a:	f100 0314 	add.w	r3, r0, #20
 8012e8e:	3114      	adds	r1, #20
 8012e90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ea0:	42a5      	cmp	r5, r4
 8012ea2:	d003      	beq.n	8012eac <__mcmp+0x2c>
 8012ea4:	d305      	bcc.n	8012eb2 <__mcmp+0x32>
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	4610      	mov	r0, r2
 8012eaa:	bd30      	pop	{r4, r5, pc}
 8012eac:	4283      	cmp	r3, r0
 8012eae:	d3f3      	bcc.n	8012e98 <__mcmp+0x18>
 8012eb0:	e7fa      	b.n	8012ea8 <__mcmp+0x28>
 8012eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb6:	e7f7      	b.n	8012ea8 <__mcmp+0x28>

08012eb8 <__mdiff>:
 8012eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ebc:	460c      	mov	r4, r1
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	4690      	mov	r8, r2
 8012ec6:	f7ff ffdb 	bl	8012e80 <__mcmp>
 8012eca:	1e05      	subs	r5, r0, #0
 8012ecc:	d110      	bne.n	8012ef0 <__mdiff+0x38>
 8012ece:	4629      	mov	r1, r5
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7ff fd59 	bl	8012988 <_Balloc>
 8012ed6:	b930      	cbnz	r0, 8012ee6 <__mdiff+0x2e>
 8012ed8:	4b3a      	ldr	r3, [pc, #232]	; (8012fc4 <__mdiff+0x10c>)
 8012eda:	4602      	mov	r2, r0
 8012edc:	f240 2137 	movw	r1, #567	; 0x237
 8012ee0:	4839      	ldr	r0, [pc, #228]	; (8012fc8 <__mdiff+0x110>)
 8012ee2:	f000 fafb 	bl	80134dc <__assert_func>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef0:	bfa4      	itt	ge
 8012ef2:	4643      	movge	r3, r8
 8012ef4:	46a0      	movge	r8, r4
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012efc:	bfa6      	itte	ge
 8012efe:	461c      	movge	r4, r3
 8012f00:	2500      	movge	r5, #0
 8012f02:	2501      	movlt	r5, #1
 8012f04:	f7ff fd40 	bl	8012988 <_Balloc>
 8012f08:	b920      	cbnz	r0, 8012f14 <__mdiff+0x5c>
 8012f0a:	4b2e      	ldr	r3, [pc, #184]	; (8012fc4 <__mdiff+0x10c>)
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	f240 2145 	movw	r1, #581	; 0x245
 8012f12:	e7e5      	b.n	8012ee0 <__mdiff+0x28>
 8012f14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f18:	6926      	ldr	r6, [r4, #16]
 8012f1a:	60c5      	str	r5, [r0, #12]
 8012f1c:	f104 0914 	add.w	r9, r4, #20
 8012f20:	f108 0514 	add.w	r5, r8, #20
 8012f24:	f100 0e14 	add.w	lr, r0, #20
 8012f28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012f2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f30:	f108 0210 	add.w	r2, r8, #16
 8012f34:	46f2      	mov	sl, lr
 8012f36:	2100      	movs	r1, #0
 8012f38:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f40:	fa11 f88b 	uxtah	r8, r1, fp
 8012f44:	b299      	uxth	r1, r3
 8012f46:	0c1b      	lsrs	r3, r3, #16
 8012f48:	eba8 0801 	sub.w	r8, r8, r1
 8012f4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f50:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f54:	fa1f f888 	uxth.w	r8, r8
 8012f58:	1419      	asrs	r1, r3, #16
 8012f5a:	454e      	cmp	r6, r9
 8012f5c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f60:	f84a 3b04 	str.w	r3, [sl], #4
 8012f64:	d8e8      	bhi.n	8012f38 <__mdiff+0x80>
 8012f66:	1b33      	subs	r3, r6, r4
 8012f68:	3b15      	subs	r3, #21
 8012f6a:	f023 0303 	bic.w	r3, r3, #3
 8012f6e:	3304      	adds	r3, #4
 8012f70:	3415      	adds	r4, #21
 8012f72:	42a6      	cmp	r6, r4
 8012f74:	bf38      	it	cc
 8012f76:	2304      	movcc	r3, #4
 8012f78:	441d      	add	r5, r3
 8012f7a:	4473      	add	r3, lr
 8012f7c:	469e      	mov	lr, r3
 8012f7e:	462e      	mov	r6, r5
 8012f80:	4566      	cmp	r6, ip
 8012f82:	d30e      	bcc.n	8012fa2 <__mdiff+0xea>
 8012f84:	f10c 0203 	add.w	r2, ip, #3
 8012f88:	1b52      	subs	r2, r2, r5
 8012f8a:	f022 0203 	bic.w	r2, r2, #3
 8012f8e:	3d03      	subs	r5, #3
 8012f90:	45ac      	cmp	ip, r5
 8012f92:	bf38      	it	cc
 8012f94:	2200      	movcc	r2, #0
 8012f96:	4413      	add	r3, r2
 8012f98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012f9c:	b17a      	cbz	r2, 8012fbe <__mdiff+0x106>
 8012f9e:	6107      	str	r7, [r0, #16]
 8012fa0:	e7a4      	b.n	8012eec <__mdiff+0x34>
 8012fa2:	f856 8b04 	ldr.w	r8, [r6], #4
 8012fa6:	fa11 f288 	uxtah	r2, r1, r8
 8012faa:	1414      	asrs	r4, r2, #16
 8012fac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012fb0:	b292      	uxth	r2, r2
 8012fb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012fb6:	f84e 2b04 	str.w	r2, [lr], #4
 8012fba:	1421      	asrs	r1, r4, #16
 8012fbc:	e7e0      	b.n	8012f80 <__mdiff+0xc8>
 8012fbe:	3f01      	subs	r7, #1
 8012fc0:	e7ea      	b.n	8012f98 <__mdiff+0xe0>
 8012fc2:	bf00      	nop
 8012fc4:	08014764 	.word	0x08014764
 8012fc8:	08014775 	.word	0x08014775

08012fcc <__d2b>:
 8012fcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012fd0:	460f      	mov	r7, r1
 8012fd2:	2101      	movs	r1, #1
 8012fd4:	ec59 8b10 	vmov	r8, r9, d0
 8012fd8:	4616      	mov	r6, r2
 8012fda:	f7ff fcd5 	bl	8012988 <_Balloc>
 8012fde:	4604      	mov	r4, r0
 8012fe0:	b930      	cbnz	r0, 8012ff0 <__d2b+0x24>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	4b24      	ldr	r3, [pc, #144]	; (8013078 <__d2b+0xac>)
 8012fe6:	4825      	ldr	r0, [pc, #148]	; (801307c <__d2b+0xb0>)
 8012fe8:	f240 310f 	movw	r1, #783	; 0x30f
 8012fec:	f000 fa76 	bl	80134dc <__assert_func>
 8012ff0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ff4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ff8:	bb2d      	cbnz	r5, 8013046 <__d2b+0x7a>
 8012ffa:	9301      	str	r3, [sp, #4]
 8012ffc:	f1b8 0300 	subs.w	r3, r8, #0
 8013000:	d026      	beq.n	8013050 <__d2b+0x84>
 8013002:	4668      	mov	r0, sp
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	f7ff fd87 	bl	8012b18 <__lo0bits>
 801300a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801300e:	b1e8      	cbz	r0, 801304c <__d2b+0x80>
 8013010:	f1c0 0320 	rsb	r3, r0, #32
 8013014:	fa02 f303 	lsl.w	r3, r2, r3
 8013018:	430b      	orrs	r3, r1
 801301a:	40c2      	lsrs	r2, r0
 801301c:	6163      	str	r3, [r4, #20]
 801301e:	9201      	str	r2, [sp, #4]
 8013020:	9b01      	ldr	r3, [sp, #4]
 8013022:	61a3      	str	r3, [r4, #24]
 8013024:	2b00      	cmp	r3, #0
 8013026:	bf14      	ite	ne
 8013028:	2202      	movne	r2, #2
 801302a:	2201      	moveq	r2, #1
 801302c:	6122      	str	r2, [r4, #16]
 801302e:	b1bd      	cbz	r5, 8013060 <__d2b+0x94>
 8013030:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013034:	4405      	add	r5, r0
 8013036:	603d      	str	r5, [r7, #0]
 8013038:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801303c:	6030      	str	r0, [r6, #0]
 801303e:	4620      	mov	r0, r4
 8013040:	b003      	add	sp, #12
 8013042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801304a:	e7d6      	b.n	8012ffa <__d2b+0x2e>
 801304c:	6161      	str	r1, [r4, #20]
 801304e:	e7e7      	b.n	8013020 <__d2b+0x54>
 8013050:	a801      	add	r0, sp, #4
 8013052:	f7ff fd61 	bl	8012b18 <__lo0bits>
 8013056:	9b01      	ldr	r3, [sp, #4]
 8013058:	6163      	str	r3, [r4, #20]
 801305a:	3020      	adds	r0, #32
 801305c:	2201      	movs	r2, #1
 801305e:	e7e5      	b.n	801302c <__d2b+0x60>
 8013060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013068:	6038      	str	r0, [r7, #0]
 801306a:	6918      	ldr	r0, [r3, #16]
 801306c:	f7ff fd34 	bl	8012ad8 <__hi0bits>
 8013070:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013074:	e7e2      	b.n	801303c <__d2b+0x70>
 8013076:	bf00      	nop
 8013078:	08014764 	.word	0x08014764
 801307c:	08014775 	.word	0x08014775

08013080 <__ssputs_r>:
 8013080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013084:	688e      	ldr	r6, [r1, #8]
 8013086:	461f      	mov	r7, r3
 8013088:	42be      	cmp	r6, r7
 801308a:	680b      	ldr	r3, [r1, #0]
 801308c:	4682      	mov	sl, r0
 801308e:	460c      	mov	r4, r1
 8013090:	4690      	mov	r8, r2
 8013092:	d82c      	bhi.n	80130ee <__ssputs_r+0x6e>
 8013094:	898a      	ldrh	r2, [r1, #12]
 8013096:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801309a:	d026      	beq.n	80130ea <__ssputs_r+0x6a>
 801309c:	6965      	ldr	r5, [r4, #20]
 801309e:	6909      	ldr	r1, [r1, #16]
 80130a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130a4:	eba3 0901 	sub.w	r9, r3, r1
 80130a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130ac:	1c7b      	adds	r3, r7, #1
 80130ae:	444b      	add	r3, r9
 80130b0:	106d      	asrs	r5, r5, #1
 80130b2:	429d      	cmp	r5, r3
 80130b4:	bf38      	it	cc
 80130b6:	461d      	movcc	r5, r3
 80130b8:	0553      	lsls	r3, r2, #21
 80130ba:	d527      	bpl.n	801310c <__ssputs_r+0x8c>
 80130bc:	4629      	mov	r1, r5
 80130be:	f7fd ffa5 	bl	801100c <_malloc_r>
 80130c2:	4606      	mov	r6, r0
 80130c4:	b360      	cbz	r0, 8013120 <__ssputs_r+0xa0>
 80130c6:	6921      	ldr	r1, [r4, #16]
 80130c8:	464a      	mov	r2, r9
 80130ca:	f000 f9f9 	bl	80134c0 <memcpy>
 80130ce:	89a3      	ldrh	r3, [r4, #12]
 80130d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80130d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130d8:	81a3      	strh	r3, [r4, #12]
 80130da:	6126      	str	r6, [r4, #16]
 80130dc:	6165      	str	r5, [r4, #20]
 80130de:	444e      	add	r6, r9
 80130e0:	eba5 0509 	sub.w	r5, r5, r9
 80130e4:	6026      	str	r6, [r4, #0]
 80130e6:	60a5      	str	r5, [r4, #8]
 80130e8:	463e      	mov	r6, r7
 80130ea:	42be      	cmp	r6, r7
 80130ec:	d900      	bls.n	80130f0 <__ssputs_r+0x70>
 80130ee:	463e      	mov	r6, r7
 80130f0:	6820      	ldr	r0, [r4, #0]
 80130f2:	4632      	mov	r2, r6
 80130f4:	4641      	mov	r1, r8
 80130f6:	f000 f9c9 	bl	801348c <memmove>
 80130fa:	68a3      	ldr	r3, [r4, #8]
 80130fc:	1b9b      	subs	r3, r3, r6
 80130fe:	60a3      	str	r3, [r4, #8]
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	4433      	add	r3, r6
 8013104:	6023      	str	r3, [r4, #0]
 8013106:	2000      	movs	r0, #0
 8013108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801310c:	462a      	mov	r2, r5
 801310e:	f000 fa2b 	bl	8013568 <_realloc_r>
 8013112:	4606      	mov	r6, r0
 8013114:	2800      	cmp	r0, #0
 8013116:	d1e0      	bne.n	80130da <__ssputs_r+0x5a>
 8013118:	6921      	ldr	r1, [r4, #16]
 801311a:	4650      	mov	r0, sl
 801311c:	f7ff fbe8 	bl	80128f0 <_free_r>
 8013120:	230c      	movs	r3, #12
 8013122:	f8ca 3000 	str.w	r3, [sl]
 8013126:	89a3      	ldrh	r3, [r4, #12]
 8013128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801312c:	81a3      	strh	r3, [r4, #12]
 801312e:	f04f 30ff 	mov.w	r0, #4294967295
 8013132:	e7e9      	b.n	8013108 <__ssputs_r+0x88>

08013134 <_svfiprintf_r>:
 8013134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013138:	4698      	mov	r8, r3
 801313a:	898b      	ldrh	r3, [r1, #12]
 801313c:	061b      	lsls	r3, r3, #24
 801313e:	b09d      	sub	sp, #116	; 0x74
 8013140:	4607      	mov	r7, r0
 8013142:	460d      	mov	r5, r1
 8013144:	4614      	mov	r4, r2
 8013146:	d50e      	bpl.n	8013166 <_svfiprintf_r+0x32>
 8013148:	690b      	ldr	r3, [r1, #16]
 801314a:	b963      	cbnz	r3, 8013166 <_svfiprintf_r+0x32>
 801314c:	2140      	movs	r1, #64	; 0x40
 801314e:	f7fd ff5d 	bl	801100c <_malloc_r>
 8013152:	6028      	str	r0, [r5, #0]
 8013154:	6128      	str	r0, [r5, #16]
 8013156:	b920      	cbnz	r0, 8013162 <_svfiprintf_r+0x2e>
 8013158:	230c      	movs	r3, #12
 801315a:	603b      	str	r3, [r7, #0]
 801315c:	f04f 30ff 	mov.w	r0, #4294967295
 8013160:	e0d0      	b.n	8013304 <_svfiprintf_r+0x1d0>
 8013162:	2340      	movs	r3, #64	; 0x40
 8013164:	616b      	str	r3, [r5, #20]
 8013166:	2300      	movs	r3, #0
 8013168:	9309      	str	r3, [sp, #36]	; 0x24
 801316a:	2320      	movs	r3, #32
 801316c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013170:	f8cd 800c 	str.w	r8, [sp, #12]
 8013174:	2330      	movs	r3, #48	; 0x30
 8013176:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801331c <_svfiprintf_r+0x1e8>
 801317a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801317e:	f04f 0901 	mov.w	r9, #1
 8013182:	4623      	mov	r3, r4
 8013184:	469a      	mov	sl, r3
 8013186:	f813 2b01 	ldrb.w	r2, [r3], #1
 801318a:	b10a      	cbz	r2, 8013190 <_svfiprintf_r+0x5c>
 801318c:	2a25      	cmp	r2, #37	; 0x25
 801318e:	d1f9      	bne.n	8013184 <_svfiprintf_r+0x50>
 8013190:	ebba 0b04 	subs.w	fp, sl, r4
 8013194:	d00b      	beq.n	80131ae <_svfiprintf_r+0x7a>
 8013196:	465b      	mov	r3, fp
 8013198:	4622      	mov	r2, r4
 801319a:	4629      	mov	r1, r5
 801319c:	4638      	mov	r0, r7
 801319e:	f7ff ff6f 	bl	8013080 <__ssputs_r>
 80131a2:	3001      	adds	r0, #1
 80131a4:	f000 80a9 	beq.w	80132fa <_svfiprintf_r+0x1c6>
 80131a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131aa:	445a      	add	r2, fp
 80131ac:	9209      	str	r2, [sp, #36]	; 0x24
 80131ae:	f89a 3000 	ldrb.w	r3, [sl]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f000 80a1 	beq.w	80132fa <_svfiprintf_r+0x1c6>
 80131b8:	2300      	movs	r3, #0
 80131ba:	f04f 32ff 	mov.w	r2, #4294967295
 80131be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131c2:	f10a 0a01 	add.w	sl, sl, #1
 80131c6:	9304      	str	r3, [sp, #16]
 80131c8:	9307      	str	r3, [sp, #28]
 80131ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131ce:	931a      	str	r3, [sp, #104]	; 0x68
 80131d0:	4654      	mov	r4, sl
 80131d2:	2205      	movs	r2, #5
 80131d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131d8:	4850      	ldr	r0, [pc, #320]	; (801331c <_svfiprintf_r+0x1e8>)
 80131da:	f7ed f881 	bl	80002e0 <memchr>
 80131de:	9a04      	ldr	r2, [sp, #16]
 80131e0:	b9d8      	cbnz	r0, 801321a <_svfiprintf_r+0xe6>
 80131e2:	06d0      	lsls	r0, r2, #27
 80131e4:	bf44      	itt	mi
 80131e6:	2320      	movmi	r3, #32
 80131e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131ec:	0711      	lsls	r1, r2, #28
 80131ee:	bf44      	itt	mi
 80131f0:	232b      	movmi	r3, #43	; 0x2b
 80131f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131f6:	f89a 3000 	ldrb.w	r3, [sl]
 80131fa:	2b2a      	cmp	r3, #42	; 0x2a
 80131fc:	d015      	beq.n	801322a <_svfiprintf_r+0xf6>
 80131fe:	9a07      	ldr	r2, [sp, #28]
 8013200:	4654      	mov	r4, sl
 8013202:	2000      	movs	r0, #0
 8013204:	f04f 0c0a 	mov.w	ip, #10
 8013208:	4621      	mov	r1, r4
 801320a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801320e:	3b30      	subs	r3, #48	; 0x30
 8013210:	2b09      	cmp	r3, #9
 8013212:	d94d      	bls.n	80132b0 <_svfiprintf_r+0x17c>
 8013214:	b1b0      	cbz	r0, 8013244 <_svfiprintf_r+0x110>
 8013216:	9207      	str	r2, [sp, #28]
 8013218:	e014      	b.n	8013244 <_svfiprintf_r+0x110>
 801321a:	eba0 0308 	sub.w	r3, r0, r8
 801321e:	fa09 f303 	lsl.w	r3, r9, r3
 8013222:	4313      	orrs	r3, r2
 8013224:	9304      	str	r3, [sp, #16]
 8013226:	46a2      	mov	sl, r4
 8013228:	e7d2      	b.n	80131d0 <_svfiprintf_r+0x9c>
 801322a:	9b03      	ldr	r3, [sp, #12]
 801322c:	1d19      	adds	r1, r3, #4
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	9103      	str	r1, [sp, #12]
 8013232:	2b00      	cmp	r3, #0
 8013234:	bfbb      	ittet	lt
 8013236:	425b      	neglt	r3, r3
 8013238:	f042 0202 	orrlt.w	r2, r2, #2
 801323c:	9307      	strge	r3, [sp, #28]
 801323e:	9307      	strlt	r3, [sp, #28]
 8013240:	bfb8      	it	lt
 8013242:	9204      	strlt	r2, [sp, #16]
 8013244:	7823      	ldrb	r3, [r4, #0]
 8013246:	2b2e      	cmp	r3, #46	; 0x2e
 8013248:	d10c      	bne.n	8013264 <_svfiprintf_r+0x130>
 801324a:	7863      	ldrb	r3, [r4, #1]
 801324c:	2b2a      	cmp	r3, #42	; 0x2a
 801324e:	d134      	bne.n	80132ba <_svfiprintf_r+0x186>
 8013250:	9b03      	ldr	r3, [sp, #12]
 8013252:	1d1a      	adds	r2, r3, #4
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	9203      	str	r2, [sp, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	bfb8      	it	lt
 801325c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013260:	3402      	adds	r4, #2
 8013262:	9305      	str	r3, [sp, #20]
 8013264:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801332c <_svfiprintf_r+0x1f8>
 8013268:	7821      	ldrb	r1, [r4, #0]
 801326a:	2203      	movs	r2, #3
 801326c:	4650      	mov	r0, sl
 801326e:	f7ed f837 	bl	80002e0 <memchr>
 8013272:	b138      	cbz	r0, 8013284 <_svfiprintf_r+0x150>
 8013274:	9b04      	ldr	r3, [sp, #16]
 8013276:	eba0 000a 	sub.w	r0, r0, sl
 801327a:	2240      	movs	r2, #64	; 0x40
 801327c:	4082      	lsls	r2, r0
 801327e:	4313      	orrs	r3, r2
 8013280:	3401      	adds	r4, #1
 8013282:	9304      	str	r3, [sp, #16]
 8013284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013288:	4825      	ldr	r0, [pc, #148]	; (8013320 <_svfiprintf_r+0x1ec>)
 801328a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801328e:	2206      	movs	r2, #6
 8013290:	f7ed f826 	bl	80002e0 <memchr>
 8013294:	2800      	cmp	r0, #0
 8013296:	d038      	beq.n	801330a <_svfiprintf_r+0x1d6>
 8013298:	4b22      	ldr	r3, [pc, #136]	; (8013324 <_svfiprintf_r+0x1f0>)
 801329a:	bb1b      	cbnz	r3, 80132e4 <_svfiprintf_r+0x1b0>
 801329c:	9b03      	ldr	r3, [sp, #12]
 801329e:	3307      	adds	r3, #7
 80132a0:	f023 0307 	bic.w	r3, r3, #7
 80132a4:	3308      	adds	r3, #8
 80132a6:	9303      	str	r3, [sp, #12]
 80132a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132aa:	4433      	add	r3, r6
 80132ac:	9309      	str	r3, [sp, #36]	; 0x24
 80132ae:	e768      	b.n	8013182 <_svfiprintf_r+0x4e>
 80132b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80132b4:	460c      	mov	r4, r1
 80132b6:	2001      	movs	r0, #1
 80132b8:	e7a6      	b.n	8013208 <_svfiprintf_r+0xd4>
 80132ba:	2300      	movs	r3, #0
 80132bc:	3401      	adds	r4, #1
 80132be:	9305      	str	r3, [sp, #20]
 80132c0:	4619      	mov	r1, r3
 80132c2:	f04f 0c0a 	mov.w	ip, #10
 80132c6:	4620      	mov	r0, r4
 80132c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132cc:	3a30      	subs	r2, #48	; 0x30
 80132ce:	2a09      	cmp	r2, #9
 80132d0:	d903      	bls.n	80132da <_svfiprintf_r+0x1a6>
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d0c6      	beq.n	8013264 <_svfiprintf_r+0x130>
 80132d6:	9105      	str	r1, [sp, #20]
 80132d8:	e7c4      	b.n	8013264 <_svfiprintf_r+0x130>
 80132da:	fb0c 2101 	mla	r1, ip, r1, r2
 80132de:	4604      	mov	r4, r0
 80132e0:	2301      	movs	r3, #1
 80132e2:	e7f0      	b.n	80132c6 <_svfiprintf_r+0x192>
 80132e4:	ab03      	add	r3, sp, #12
 80132e6:	9300      	str	r3, [sp, #0]
 80132e8:	462a      	mov	r2, r5
 80132ea:	4b0f      	ldr	r3, [pc, #60]	; (8013328 <_svfiprintf_r+0x1f4>)
 80132ec:	a904      	add	r1, sp, #16
 80132ee:	4638      	mov	r0, r7
 80132f0:	f7fd ffaa 	bl	8011248 <_printf_float>
 80132f4:	1c42      	adds	r2, r0, #1
 80132f6:	4606      	mov	r6, r0
 80132f8:	d1d6      	bne.n	80132a8 <_svfiprintf_r+0x174>
 80132fa:	89ab      	ldrh	r3, [r5, #12]
 80132fc:	065b      	lsls	r3, r3, #25
 80132fe:	f53f af2d 	bmi.w	801315c <_svfiprintf_r+0x28>
 8013302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013304:	b01d      	add	sp, #116	; 0x74
 8013306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801330a:	ab03      	add	r3, sp, #12
 801330c:	9300      	str	r3, [sp, #0]
 801330e:	462a      	mov	r2, r5
 8013310:	4b05      	ldr	r3, [pc, #20]	; (8013328 <_svfiprintf_r+0x1f4>)
 8013312:	a904      	add	r1, sp, #16
 8013314:	4638      	mov	r0, r7
 8013316:	f7fe fa1f 	bl	8011758 <_printf_i>
 801331a:	e7eb      	b.n	80132f4 <_svfiprintf_r+0x1c0>
 801331c:	080148cc 	.word	0x080148cc
 8013320:	080148d6 	.word	0x080148d6
 8013324:	08011249 	.word	0x08011249
 8013328:	08013081 	.word	0x08013081
 801332c:	080148d2 	.word	0x080148d2

08013330 <__sflush_r>:
 8013330:	898a      	ldrh	r2, [r1, #12]
 8013332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013336:	4605      	mov	r5, r0
 8013338:	0710      	lsls	r0, r2, #28
 801333a:	460c      	mov	r4, r1
 801333c:	d458      	bmi.n	80133f0 <__sflush_r+0xc0>
 801333e:	684b      	ldr	r3, [r1, #4]
 8013340:	2b00      	cmp	r3, #0
 8013342:	dc05      	bgt.n	8013350 <__sflush_r+0x20>
 8013344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013346:	2b00      	cmp	r3, #0
 8013348:	dc02      	bgt.n	8013350 <__sflush_r+0x20>
 801334a:	2000      	movs	r0, #0
 801334c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013352:	2e00      	cmp	r6, #0
 8013354:	d0f9      	beq.n	801334a <__sflush_r+0x1a>
 8013356:	2300      	movs	r3, #0
 8013358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801335c:	682f      	ldr	r7, [r5, #0]
 801335e:	6a21      	ldr	r1, [r4, #32]
 8013360:	602b      	str	r3, [r5, #0]
 8013362:	d032      	beq.n	80133ca <__sflush_r+0x9a>
 8013364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013366:	89a3      	ldrh	r3, [r4, #12]
 8013368:	075a      	lsls	r2, r3, #29
 801336a:	d505      	bpl.n	8013378 <__sflush_r+0x48>
 801336c:	6863      	ldr	r3, [r4, #4]
 801336e:	1ac0      	subs	r0, r0, r3
 8013370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013372:	b10b      	cbz	r3, 8013378 <__sflush_r+0x48>
 8013374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013376:	1ac0      	subs	r0, r0, r3
 8013378:	2300      	movs	r3, #0
 801337a:	4602      	mov	r2, r0
 801337c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801337e:	6a21      	ldr	r1, [r4, #32]
 8013380:	4628      	mov	r0, r5
 8013382:	47b0      	blx	r6
 8013384:	1c43      	adds	r3, r0, #1
 8013386:	89a3      	ldrh	r3, [r4, #12]
 8013388:	d106      	bne.n	8013398 <__sflush_r+0x68>
 801338a:	6829      	ldr	r1, [r5, #0]
 801338c:	291d      	cmp	r1, #29
 801338e:	d82b      	bhi.n	80133e8 <__sflush_r+0xb8>
 8013390:	4a29      	ldr	r2, [pc, #164]	; (8013438 <__sflush_r+0x108>)
 8013392:	410a      	asrs	r2, r1
 8013394:	07d6      	lsls	r6, r2, #31
 8013396:	d427      	bmi.n	80133e8 <__sflush_r+0xb8>
 8013398:	2200      	movs	r2, #0
 801339a:	6062      	str	r2, [r4, #4]
 801339c:	04d9      	lsls	r1, r3, #19
 801339e:	6922      	ldr	r2, [r4, #16]
 80133a0:	6022      	str	r2, [r4, #0]
 80133a2:	d504      	bpl.n	80133ae <__sflush_r+0x7e>
 80133a4:	1c42      	adds	r2, r0, #1
 80133a6:	d101      	bne.n	80133ac <__sflush_r+0x7c>
 80133a8:	682b      	ldr	r3, [r5, #0]
 80133aa:	b903      	cbnz	r3, 80133ae <__sflush_r+0x7e>
 80133ac:	6560      	str	r0, [r4, #84]	; 0x54
 80133ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133b0:	602f      	str	r7, [r5, #0]
 80133b2:	2900      	cmp	r1, #0
 80133b4:	d0c9      	beq.n	801334a <__sflush_r+0x1a>
 80133b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133ba:	4299      	cmp	r1, r3
 80133bc:	d002      	beq.n	80133c4 <__sflush_r+0x94>
 80133be:	4628      	mov	r0, r5
 80133c0:	f7ff fa96 	bl	80128f0 <_free_r>
 80133c4:	2000      	movs	r0, #0
 80133c6:	6360      	str	r0, [r4, #52]	; 0x34
 80133c8:	e7c0      	b.n	801334c <__sflush_r+0x1c>
 80133ca:	2301      	movs	r3, #1
 80133cc:	4628      	mov	r0, r5
 80133ce:	47b0      	blx	r6
 80133d0:	1c41      	adds	r1, r0, #1
 80133d2:	d1c8      	bne.n	8013366 <__sflush_r+0x36>
 80133d4:	682b      	ldr	r3, [r5, #0]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d0c5      	beq.n	8013366 <__sflush_r+0x36>
 80133da:	2b1d      	cmp	r3, #29
 80133dc:	d001      	beq.n	80133e2 <__sflush_r+0xb2>
 80133de:	2b16      	cmp	r3, #22
 80133e0:	d101      	bne.n	80133e6 <__sflush_r+0xb6>
 80133e2:	602f      	str	r7, [r5, #0]
 80133e4:	e7b1      	b.n	801334a <__sflush_r+0x1a>
 80133e6:	89a3      	ldrh	r3, [r4, #12]
 80133e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133ec:	81a3      	strh	r3, [r4, #12]
 80133ee:	e7ad      	b.n	801334c <__sflush_r+0x1c>
 80133f0:	690f      	ldr	r7, [r1, #16]
 80133f2:	2f00      	cmp	r7, #0
 80133f4:	d0a9      	beq.n	801334a <__sflush_r+0x1a>
 80133f6:	0793      	lsls	r3, r2, #30
 80133f8:	680e      	ldr	r6, [r1, #0]
 80133fa:	bf08      	it	eq
 80133fc:	694b      	ldreq	r3, [r1, #20]
 80133fe:	600f      	str	r7, [r1, #0]
 8013400:	bf18      	it	ne
 8013402:	2300      	movne	r3, #0
 8013404:	eba6 0807 	sub.w	r8, r6, r7
 8013408:	608b      	str	r3, [r1, #8]
 801340a:	f1b8 0f00 	cmp.w	r8, #0
 801340e:	dd9c      	ble.n	801334a <__sflush_r+0x1a>
 8013410:	6a21      	ldr	r1, [r4, #32]
 8013412:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013414:	4643      	mov	r3, r8
 8013416:	463a      	mov	r2, r7
 8013418:	4628      	mov	r0, r5
 801341a:	47b0      	blx	r6
 801341c:	2800      	cmp	r0, #0
 801341e:	dc06      	bgt.n	801342e <__sflush_r+0xfe>
 8013420:	89a3      	ldrh	r3, [r4, #12]
 8013422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013426:	81a3      	strh	r3, [r4, #12]
 8013428:	f04f 30ff 	mov.w	r0, #4294967295
 801342c:	e78e      	b.n	801334c <__sflush_r+0x1c>
 801342e:	4407      	add	r7, r0
 8013430:	eba8 0800 	sub.w	r8, r8, r0
 8013434:	e7e9      	b.n	801340a <__sflush_r+0xda>
 8013436:	bf00      	nop
 8013438:	dfbffffe 	.word	0xdfbffffe

0801343c <_fflush_r>:
 801343c:	b538      	push	{r3, r4, r5, lr}
 801343e:	690b      	ldr	r3, [r1, #16]
 8013440:	4605      	mov	r5, r0
 8013442:	460c      	mov	r4, r1
 8013444:	b913      	cbnz	r3, 801344c <_fflush_r+0x10>
 8013446:	2500      	movs	r5, #0
 8013448:	4628      	mov	r0, r5
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	b118      	cbz	r0, 8013456 <_fflush_r+0x1a>
 801344e:	6a03      	ldr	r3, [r0, #32]
 8013450:	b90b      	cbnz	r3, 8013456 <_fflush_r+0x1a>
 8013452:	f7fe fb2f 	bl	8011ab4 <__sinit>
 8013456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d0f3      	beq.n	8013446 <_fflush_r+0xa>
 801345e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013460:	07d0      	lsls	r0, r2, #31
 8013462:	d404      	bmi.n	801346e <_fflush_r+0x32>
 8013464:	0599      	lsls	r1, r3, #22
 8013466:	d402      	bmi.n	801346e <_fflush_r+0x32>
 8013468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801346a:	f7fe fc4a 	bl	8011d02 <__retarget_lock_acquire_recursive>
 801346e:	4628      	mov	r0, r5
 8013470:	4621      	mov	r1, r4
 8013472:	f7ff ff5d 	bl	8013330 <__sflush_r>
 8013476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013478:	07da      	lsls	r2, r3, #31
 801347a:	4605      	mov	r5, r0
 801347c:	d4e4      	bmi.n	8013448 <_fflush_r+0xc>
 801347e:	89a3      	ldrh	r3, [r4, #12]
 8013480:	059b      	lsls	r3, r3, #22
 8013482:	d4e1      	bmi.n	8013448 <_fflush_r+0xc>
 8013484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013486:	f7fe fc3d 	bl	8011d04 <__retarget_lock_release_recursive>
 801348a:	e7dd      	b.n	8013448 <_fflush_r+0xc>

0801348c <memmove>:
 801348c:	4288      	cmp	r0, r1
 801348e:	b510      	push	{r4, lr}
 8013490:	eb01 0402 	add.w	r4, r1, r2
 8013494:	d902      	bls.n	801349c <memmove+0x10>
 8013496:	4284      	cmp	r4, r0
 8013498:	4623      	mov	r3, r4
 801349a:	d807      	bhi.n	80134ac <memmove+0x20>
 801349c:	1e43      	subs	r3, r0, #1
 801349e:	42a1      	cmp	r1, r4
 80134a0:	d008      	beq.n	80134b4 <memmove+0x28>
 80134a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134aa:	e7f8      	b.n	801349e <memmove+0x12>
 80134ac:	4402      	add	r2, r0
 80134ae:	4601      	mov	r1, r0
 80134b0:	428a      	cmp	r2, r1
 80134b2:	d100      	bne.n	80134b6 <memmove+0x2a>
 80134b4:	bd10      	pop	{r4, pc}
 80134b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134be:	e7f7      	b.n	80134b0 <memmove+0x24>

080134c0 <memcpy>:
 80134c0:	440a      	add	r2, r1
 80134c2:	4291      	cmp	r1, r2
 80134c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80134c8:	d100      	bne.n	80134cc <memcpy+0xc>
 80134ca:	4770      	bx	lr
 80134cc:	b510      	push	{r4, lr}
 80134ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134d6:	4291      	cmp	r1, r2
 80134d8:	d1f9      	bne.n	80134ce <memcpy+0xe>
 80134da:	bd10      	pop	{r4, pc}

080134dc <__assert_func>:
 80134dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134de:	4614      	mov	r4, r2
 80134e0:	461a      	mov	r2, r3
 80134e2:	4b09      	ldr	r3, [pc, #36]	; (8013508 <__assert_func+0x2c>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	4605      	mov	r5, r0
 80134e8:	68d8      	ldr	r0, [r3, #12]
 80134ea:	b14c      	cbz	r4, 8013500 <__assert_func+0x24>
 80134ec:	4b07      	ldr	r3, [pc, #28]	; (801350c <__assert_func+0x30>)
 80134ee:	9100      	str	r1, [sp, #0]
 80134f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80134f4:	4906      	ldr	r1, [pc, #24]	; (8013510 <__assert_func+0x34>)
 80134f6:	462b      	mov	r3, r5
 80134f8:	f000 f872 	bl	80135e0 <fiprintf>
 80134fc:	f000 f882 	bl	8013604 <abort>
 8013500:	4b04      	ldr	r3, [pc, #16]	; (8013514 <__assert_func+0x38>)
 8013502:	461c      	mov	r4, r3
 8013504:	e7f3      	b.n	80134ee <__assert_func+0x12>
 8013506:	bf00      	nop
 8013508:	24000160 	.word	0x24000160
 801350c:	080148e7 	.word	0x080148e7
 8013510:	080148f4 	.word	0x080148f4
 8013514:	08014922 	.word	0x08014922

08013518 <_calloc_r>:
 8013518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801351a:	fba1 2402 	umull	r2, r4, r1, r2
 801351e:	b94c      	cbnz	r4, 8013534 <_calloc_r+0x1c>
 8013520:	4611      	mov	r1, r2
 8013522:	9201      	str	r2, [sp, #4]
 8013524:	f7fd fd72 	bl	801100c <_malloc_r>
 8013528:	9a01      	ldr	r2, [sp, #4]
 801352a:	4605      	mov	r5, r0
 801352c:	b930      	cbnz	r0, 801353c <_calloc_r+0x24>
 801352e:	4628      	mov	r0, r5
 8013530:	b003      	add	sp, #12
 8013532:	bd30      	pop	{r4, r5, pc}
 8013534:	220c      	movs	r2, #12
 8013536:	6002      	str	r2, [r0, #0]
 8013538:	2500      	movs	r5, #0
 801353a:	e7f8      	b.n	801352e <_calloc_r+0x16>
 801353c:	4621      	mov	r1, r4
 801353e:	f7fe fb52 	bl	8011be6 <memset>
 8013542:	e7f4      	b.n	801352e <_calloc_r+0x16>

08013544 <__ascii_mbtowc>:
 8013544:	b082      	sub	sp, #8
 8013546:	b901      	cbnz	r1, 801354a <__ascii_mbtowc+0x6>
 8013548:	a901      	add	r1, sp, #4
 801354a:	b142      	cbz	r2, 801355e <__ascii_mbtowc+0x1a>
 801354c:	b14b      	cbz	r3, 8013562 <__ascii_mbtowc+0x1e>
 801354e:	7813      	ldrb	r3, [r2, #0]
 8013550:	600b      	str	r3, [r1, #0]
 8013552:	7812      	ldrb	r2, [r2, #0]
 8013554:	1e10      	subs	r0, r2, #0
 8013556:	bf18      	it	ne
 8013558:	2001      	movne	r0, #1
 801355a:	b002      	add	sp, #8
 801355c:	4770      	bx	lr
 801355e:	4610      	mov	r0, r2
 8013560:	e7fb      	b.n	801355a <__ascii_mbtowc+0x16>
 8013562:	f06f 0001 	mvn.w	r0, #1
 8013566:	e7f8      	b.n	801355a <__ascii_mbtowc+0x16>

08013568 <_realloc_r>:
 8013568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801356c:	4680      	mov	r8, r0
 801356e:	4614      	mov	r4, r2
 8013570:	460e      	mov	r6, r1
 8013572:	b921      	cbnz	r1, 801357e <_realloc_r+0x16>
 8013574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013578:	4611      	mov	r1, r2
 801357a:	f7fd bd47 	b.w	801100c <_malloc_r>
 801357e:	b92a      	cbnz	r2, 801358c <_realloc_r+0x24>
 8013580:	f7ff f9b6 	bl	80128f0 <_free_r>
 8013584:	4625      	mov	r5, r4
 8013586:	4628      	mov	r0, r5
 8013588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801358c:	f000 f841 	bl	8013612 <_malloc_usable_size_r>
 8013590:	4284      	cmp	r4, r0
 8013592:	4607      	mov	r7, r0
 8013594:	d802      	bhi.n	801359c <_realloc_r+0x34>
 8013596:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801359a:	d812      	bhi.n	80135c2 <_realloc_r+0x5a>
 801359c:	4621      	mov	r1, r4
 801359e:	4640      	mov	r0, r8
 80135a0:	f7fd fd34 	bl	801100c <_malloc_r>
 80135a4:	4605      	mov	r5, r0
 80135a6:	2800      	cmp	r0, #0
 80135a8:	d0ed      	beq.n	8013586 <_realloc_r+0x1e>
 80135aa:	42bc      	cmp	r4, r7
 80135ac:	4622      	mov	r2, r4
 80135ae:	4631      	mov	r1, r6
 80135b0:	bf28      	it	cs
 80135b2:	463a      	movcs	r2, r7
 80135b4:	f7ff ff84 	bl	80134c0 <memcpy>
 80135b8:	4631      	mov	r1, r6
 80135ba:	4640      	mov	r0, r8
 80135bc:	f7ff f998 	bl	80128f0 <_free_r>
 80135c0:	e7e1      	b.n	8013586 <_realloc_r+0x1e>
 80135c2:	4635      	mov	r5, r6
 80135c4:	e7df      	b.n	8013586 <_realloc_r+0x1e>

080135c6 <__ascii_wctomb>:
 80135c6:	b149      	cbz	r1, 80135dc <__ascii_wctomb+0x16>
 80135c8:	2aff      	cmp	r2, #255	; 0xff
 80135ca:	bf85      	ittet	hi
 80135cc:	238a      	movhi	r3, #138	; 0x8a
 80135ce:	6003      	strhi	r3, [r0, #0]
 80135d0:	700a      	strbls	r2, [r1, #0]
 80135d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80135d6:	bf98      	it	ls
 80135d8:	2001      	movls	r0, #1
 80135da:	4770      	bx	lr
 80135dc:	4608      	mov	r0, r1
 80135de:	4770      	bx	lr

080135e0 <fiprintf>:
 80135e0:	b40e      	push	{r1, r2, r3}
 80135e2:	b503      	push	{r0, r1, lr}
 80135e4:	4601      	mov	r1, r0
 80135e6:	ab03      	add	r3, sp, #12
 80135e8:	4805      	ldr	r0, [pc, #20]	; (8013600 <fiprintf+0x20>)
 80135ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ee:	6800      	ldr	r0, [r0, #0]
 80135f0:	9301      	str	r3, [sp, #4]
 80135f2:	f000 f83f 	bl	8013674 <_vfiprintf_r>
 80135f6:	b002      	add	sp, #8
 80135f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135fc:	b003      	add	sp, #12
 80135fe:	4770      	bx	lr
 8013600:	24000160 	.word	0x24000160

08013604 <abort>:
 8013604:	b508      	push	{r3, lr}
 8013606:	2006      	movs	r0, #6
 8013608:	f000 fa0c 	bl	8013a24 <raise>
 801360c:	2001      	movs	r0, #1
 801360e:	f7ed fdb5 	bl	800117c <_exit>

08013612 <_malloc_usable_size_r>:
 8013612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013616:	1f18      	subs	r0, r3, #4
 8013618:	2b00      	cmp	r3, #0
 801361a:	bfbc      	itt	lt
 801361c:	580b      	ldrlt	r3, [r1, r0]
 801361e:	18c0      	addlt	r0, r0, r3
 8013620:	4770      	bx	lr

08013622 <__sfputc_r>:
 8013622:	6893      	ldr	r3, [r2, #8]
 8013624:	3b01      	subs	r3, #1
 8013626:	2b00      	cmp	r3, #0
 8013628:	b410      	push	{r4}
 801362a:	6093      	str	r3, [r2, #8]
 801362c:	da08      	bge.n	8013640 <__sfputc_r+0x1e>
 801362e:	6994      	ldr	r4, [r2, #24]
 8013630:	42a3      	cmp	r3, r4
 8013632:	db01      	blt.n	8013638 <__sfputc_r+0x16>
 8013634:	290a      	cmp	r1, #10
 8013636:	d103      	bne.n	8013640 <__sfputc_r+0x1e>
 8013638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801363c:	f000 b934 	b.w	80138a8 <__swbuf_r>
 8013640:	6813      	ldr	r3, [r2, #0]
 8013642:	1c58      	adds	r0, r3, #1
 8013644:	6010      	str	r0, [r2, #0]
 8013646:	7019      	strb	r1, [r3, #0]
 8013648:	4608      	mov	r0, r1
 801364a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801364e:	4770      	bx	lr

08013650 <__sfputs_r>:
 8013650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013652:	4606      	mov	r6, r0
 8013654:	460f      	mov	r7, r1
 8013656:	4614      	mov	r4, r2
 8013658:	18d5      	adds	r5, r2, r3
 801365a:	42ac      	cmp	r4, r5
 801365c:	d101      	bne.n	8013662 <__sfputs_r+0x12>
 801365e:	2000      	movs	r0, #0
 8013660:	e007      	b.n	8013672 <__sfputs_r+0x22>
 8013662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013666:	463a      	mov	r2, r7
 8013668:	4630      	mov	r0, r6
 801366a:	f7ff ffda 	bl	8013622 <__sfputc_r>
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	d1f3      	bne.n	801365a <__sfputs_r+0xa>
 8013672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013674 <_vfiprintf_r>:
 8013674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	460d      	mov	r5, r1
 801367a:	b09d      	sub	sp, #116	; 0x74
 801367c:	4614      	mov	r4, r2
 801367e:	4698      	mov	r8, r3
 8013680:	4606      	mov	r6, r0
 8013682:	b118      	cbz	r0, 801368c <_vfiprintf_r+0x18>
 8013684:	6a03      	ldr	r3, [r0, #32]
 8013686:	b90b      	cbnz	r3, 801368c <_vfiprintf_r+0x18>
 8013688:	f7fe fa14 	bl	8011ab4 <__sinit>
 801368c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801368e:	07d9      	lsls	r1, r3, #31
 8013690:	d405      	bmi.n	801369e <_vfiprintf_r+0x2a>
 8013692:	89ab      	ldrh	r3, [r5, #12]
 8013694:	059a      	lsls	r2, r3, #22
 8013696:	d402      	bmi.n	801369e <_vfiprintf_r+0x2a>
 8013698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801369a:	f7fe fb32 	bl	8011d02 <__retarget_lock_acquire_recursive>
 801369e:	89ab      	ldrh	r3, [r5, #12]
 80136a0:	071b      	lsls	r3, r3, #28
 80136a2:	d501      	bpl.n	80136a8 <_vfiprintf_r+0x34>
 80136a4:	692b      	ldr	r3, [r5, #16]
 80136a6:	b99b      	cbnz	r3, 80136d0 <_vfiprintf_r+0x5c>
 80136a8:	4629      	mov	r1, r5
 80136aa:	4630      	mov	r0, r6
 80136ac:	f000 f93a 	bl	8013924 <__swsetup_r>
 80136b0:	b170      	cbz	r0, 80136d0 <_vfiprintf_r+0x5c>
 80136b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136b4:	07dc      	lsls	r4, r3, #31
 80136b6:	d504      	bpl.n	80136c2 <_vfiprintf_r+0x4e>
 80136b8:	f04f 30ff 	mov.w	r0, #4294967295
 80136bc:	b01d      	add	sp, #116	; 0x74
 80136be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c2:	89ab      	ldrh	r3, [r5, #12]
 80136c4:	0598      	lsls	r0, r3, #22
 80136c6:	d4f7      	bmi.n	80136b8 <_vfiprintf_r+0x44>
 80136c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136ca:	f7fe fb1b 	bl	8011d04 <__retarget_lock_release_recursive>
 80136ce:	e7f3      	b.n	80136b8 <_vfiprintf_r+0x44>
 80136d0:	2300      	movs	r3, #0
 80136d2:	9309      	str	r3, [sp, #36]	; 0x24
 80136d4:	2320      	movs	r3, #32
 80136d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136da:	f8cd 800c 	str.w	r8, [sp, #12]
 80136de:	2330      	movs	r3, #48	; 0x30
 80136e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013894 <_vfiprintf_r+0x220>
 80136e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136e8:	f04f 0901 	mov.w	r9, #1
 80136ec:	4623      	mov	r3, r4
 80136ee:	469a      	mov	sl, r3
 80136f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136f4:	b10a      	cbz	r2, 80136fa <_vfiprintf_r+0x86>
 80136f6:	2a25      	cmp	r2, #37	; 0x25
 80136f8:	d1f9      	bne.n	80136ee <_vfiprintf_r+0x7a>
 80136fa:	ebba 0b04 	subs.w	fp, sl, r4
 80136fe:	d00b      	beq.n	8013718 <_vfiprintf_r+0xa4>
 8013700:	465b      	mov	r3, fp
 8013702:	4622      	mov	r2, r4
 8013704:	4629      	mov	r1, r5
 8013706:	4630      	mov	r0, r6
 8013708:	f7ff ffa2 	bl	8013650 <__sfputs_r>
 801370c:	3001      	adds	r0, #1
 801370e:	f000 80a9 	beq.w	8013864 <_vfiprintf_r+0x1f0>
 8013712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013714:	445a      	add	r2, fp
 8013716:	9209      	str	r2, [sp, #36]	; 0x24
 8013718:	f89a 3000 	ldrb.w	r3, [sl]
 801371c:	2b00      	cmp	r3, #0
 801371e:	f000 80a1 	beq.w	8013864 <_vfiprintf_r+0x1f0>
 8013722:	2300      	movs	r3, #0
 8013724:	f04f 32ff 	mov.w	r2, #4294967295
 8013728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801372c:	f10a 0a01 	add.w	sl, sl, #1
 8013730:	9304      	str	r3, [sp, #16]
 8013732:	9307      	str	r3, [sp, #28]
 8013734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013738:	931a      	str	r3, [sp, #104]	; 0x68
 801373a:	4654      	mov	r4, sl
 801373c:	2205      	movs	r2, #5
 801373e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013742:	4854      	ldr	r0, [pc, #336]	; (8013894 <_vfiprintf_r+0x220>)
 8013744:	f7ec fdcc 	bl	80002e0 <memchr>
 8013748:	9a04      	ldr	r2, [sp, #16]
 801374a:	b9d8      	cbnz	r0, 8013784 <_vfiprintf_r+0x110>
 801374c:	06d1      	lsls	r1, r2, #27
 801374e:	bf44      	itt	mi
 8013750:	2320      	movmi	r3, #32
 8013752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013756:	0713      	lsls	r3, r2, #28
 8013758:	bf44      	itt	mi
 801375a:	232b      	movmi	r3, #43	; 0x2b
 801375c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013760:	f89a 3000 	ldrb.w	r3, [sl]
 8013764:	2b2a      	cmp	r3, #42	; 0x2a
 8013766:	d015      	beq.n	8013794 <_vfiprintf_r+0x120>
 8013768:	9a07      	ldr	r2, [sp, #28]
 801376a:	4654      	mov	r4, sl
 801376c:	2000      	movs	r0, #0
 801376e:	f04f 0c0a 	mov.w	ip, #10
 8013772:	4621      	mov	r1, r4
 8013774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013778:	3b30      	subs	r3, #48	; 0x30
 801377a:	2b09      	cmp	r3, #9
 801377c:	d94d      	bls.n	801381a <_vfiprintf_r+0x1a6>
 801377e:	b1b0      	cbz	r0, 80137ae <_vfiprintf_r+0x13a>
 8013780:	9207      	str	r2, [sp, #28]
 8013782:	e014      	b.n	80137ae <_vfiprintf_r+0x13a>
 8013784:	eba0 0308 	sub.w	r3, r0, r8
 8013788:	fa09 f303 	lsl.w	r3, r9, r3
 801378c:	4313      	orrs	r3, r2
 801378e:	9304      	str	r3, [sp, #16]
 8013790:	46a2      	mov	sl, r4
 8013792:	e7d2      	b.n	801373a <_vfiprintf_r+0xc6>
 8013794:	9b03      	ldr	r3, [sp, #12]
 8013796:	1d19      	adds	r1, r3, #4
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	9103      	str	r1, [sp, #12]
 801379c:	2b00      	cmp	r3, #0
 801379e:	bfbb      	ittet	lt
 80137a0:	425b      	neglt	r3, r3
 80137a2:	f042 0202 	orrlt.w	r2, r2, #2
 80137a6:	9307      	strge	r3, [sp, #28]
 80137a8:	9307      	strlt	r3, [sp, #28]
 80137aa:	bfb8      	it	lt
 80137ac:	9204      	strlt	r2, [sp, #16]
 80137ae:	7823      	ldrb	r3, [r4, #0]
 80137b0:	2b2e      	cmp	r3, #46	; 0x2e
 80137b2:	d10c      	bne.n	80137ce <_vfiprintf_r+0x15a>
 80137b4:	7863      	ldrb	r3, [r4, #1]
 80137b6:	2b2a      	cmp	r3, #42	; 0x2a
 80137b8:	d134      	bne.n	8013824 <_vfiprintf_r+0x1b0>
 80137ba:	9b03      	ldr	r3, [sp, #12]
 80137bc:	1d1a      	adds	r2, r3, #4
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	9203      	str	r2, [sp, #12]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	bfb8      	it	lt
 80137c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80137ca:	3402      	adds	r4, #2
 80137cc:	9305      	str	r3, [sp, #20]
 80137ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80138a4 <_vfiprintf_r+0x230>
 80137d2:	7821      	ldrb	r1, [r4, #0]
 80137d4:	2203      	movs	r2, #3
 80137d6:	4650      	mov	r0, sl
 80137d8:	f7ec fd82 	bl	80002e0 <memchr>
 80137dc:	b138      	cbz	r0, 80137ee <_vfiprintf_r+0x17a>
 80137de:	9b04      	ldr	r3, [sp, #16]
 80137e0:	eba0 000a 	sub.w	r0, r0, sl
 80137e4:	2240      	movs	r2, #64	; 0x40
 80137e6:	4082      	lsls	r2, r0
 80137e8:	4313      	orrs	r3, r2
 80137ea:	3401      	adds	r4, #1
 80137ec:	9304      	str	r3, [sp, #16]
 80137ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f2:	4829      	ldr	r0, [pc, #164]	; (8013898 <_vfiprintf_r+0x224>)
 80137f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137f8:	2206      	movs	r2, #6
 80137fa:	f7ec fd71 	bl	80002e0 <memchr>
 80137fe:	2800      	cmp	r0, #0
 8013800:	d03f      	beq.n	8013882 <_vfiprintf_r+0x20e>
 8013802:	4b26      	ldr	r3, [pc, #152]	; (801389c <_vfiprintf_r+0x228>)
 8013804:	bb1b      	cbnz	r3, 801384e <_vfiprintf_r+0x1da>
 8013806:	9b03      	ldr	r3, [sp, #12]
 8013808:	3307      	adds	r3, #7
 801380a:	f023 0307 	bic.w	r3, r3, #7
 801380e:	3308      	adds	r3, #8
 8013810:	9303      	str	r3, [sp, #12]
 8013812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013814:	443b      	add	r3, r7
 8013816:	9309      	str	r3, [sp, #36]	; 0x24
 8013818:	e768      	b.n	80136ec <_vfiprintf_r+0x78>
 801381a:	fb0c 3202 	mla	r2, ip, r2, r3
 801381e:	460c      	mov	r4, r1
 8013820:	2001      	movs	r0, #1
 8013822:	e7a6      	b.n	8013772 <_vfiprintf_r+0xfe>
 8013824:	2300      	movs	r3, #0
 8013826:	3401      	adds	r4, #1
 8013828:	9305      	str	r3, [sp, #20]
 801382a:	4619      	mov	r1, r3
 801382c:	f04f 0c0a 	mov.w	ip, #10
 8013830:	4620      	mov	r0, r4
 8013832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013836:	3a30      	subs	r2, #48	; 0x30
 8013838:	2a09      	cmp	r2, #9
 801383a:	d903      	bls.n	8013844 <_vfiprintf_r+0x1d0>
 801383c:	2b00      	cmp	r3, #0
 801383e:	d0c6      	beq.n	80137ce <_vfiprintf_r+0x15a>
 8013840:	9105      	str	r1, [sp, #20]
 8013842:	e7c4      	b.n	80137ce <_vfiprintf_r+0x15a>
 8013844:	fb0c 2101 	mla	r1, ip, r1, r2
 8013848:	4604      	mov	r4, r0
 801384a:	2301      	movs	r3, #1
 801384c:	e7f0      	b.n	8013830 <_vfiprintf_r+0x1bc>
 801384e:	ab03      	add	r3, sp, #12
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	462a      	mov	r2, r5
 8013854:	4b12      	ldr	r3, [pc, #72]	; (80138a0 <_vfiprintf_r+0x22c>)
 8013856:	a904      	add	r1, sp, #16
 8013858:	4630      	mov	r0, r6
 801385a:	f7fd fcf5 	bl	8011248 <_printf_float>
 801385e:	4607      	mov	r7, r0
 8013860:	1c78      	adds	r0, r7, #1
 8013862:	d1d6      	bne.n	8013812 <_vfiprintf_r+0x19e>
 8013864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013866:	07d9      	lsls	r1, r3, #31
 8013868:	d405      	bmi.n	8013876 <_vfiprintf_r+0x202>
 801386a:	89ab      	ldrh	r3, [r5, #12]
 801386c:	059a      	lsls	r2, r3, #22
 801386e:	d402      	bmi.n	8013876 <_vfiprintf_r+0x202>
 8013870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013872:	f7fe fa47 	bl	8011d04 <__retarget_lock_release_recursive>
 8013876:	89ab      	ldrh	r3, [r5, #12]
 8013878:	065b      	lsls	r3, r3, #25
 801387a:	f53f af1d 	bmi.w	80136b8 <_vfiprintf_r+0x44>
 801387e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013880:	e71c      	b.n	80136bc <_vfiprintf_r+0x48>
 8013882:	ab03      	add	r3, sp, #12
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	462a      	mov	r2, r5
 8013888:	4b05      	ldr	r3, [pc, #20]	; (80138a0 <_vfiprintf_r+0x22c>)
 801388a:	a904      	add	r1, sp, #16
 801388c:	4630      	mov	r0, r6
 801388e:	f7fd ff63 	bl	8011758 <_printf_i>
 8013892:	e7e4      	b.n	801385e <_vfiprintf_r+0x1ea>
 8013894:	080148cc 	.word	0x080148cc
 8013898:	080148d6 	.word	0x080148d6
 801389c:	08011249 	.word	0x08011249
 80138a0:	08013651 	.word	0x08013651
 80138a4:	080148d2 	.word	0x080148d2

080138a8 <__swbuf_r>:
 80138a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138aa:	460e      	mov	r6, r1
 80138ac:	4614      	mov	r4, r2
 80138ae:	4605      	mov	r5, r0
 80138b0:	b118      	cbz	r0, 80138ba <__swbuf_r+0x12>
 80138b2:	6a03      	ldr	r3, [r0, #32]
 80138b4:	b90b      	cbnz	r3, 80138ba <__swbuf_r+0x12>
 80138b6:	f7fe f8fd 	bl	8011ab4 <__sinit>
 80138ba:	69a3      	ldr	r3, [r4, #24]
 80138bc:	60a3      	str	r3, [r4, #8]
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	071a      	lsls	r2, r3, #28
 80138c2:	d525      	bpl.n	8013910 <__swbuf_r+0x68>
 80138c4:	6923      	ldr	r3, [r4, #16]
 80138c6:	b31b      	cbz	r3, 8013910 <__swbuf_r+0x68>
 80138c8:	6823      	ldr	r3, [r4, #0]
 80138ca:	6922      	ldr	r2, [r4, #16]
 80138cc:	1a98      	subs	r0, r3, r2
 80138ce:	6963      	ldr	r3, [r4, #20]
 80138d0:	b2f6      	uxtb	r6, r6
 80138d2:	4283      	cmp	r3, r0
 80138d4:	4637      	mov	r7, r6
 80138d6:	dc04      	bgt.n	80138e2 <__swbuf_r+0x3a>
 80138d8:	4621      	mov	r1, r4
 80138da:	4628      	mov	r0, r5
 80138dc:	f7ff fdae 	bl	801343c <_fflush_r>
 80138e0:	b9e0      	cbnz	r0, 801391c <__swbuf_r+0x74>
 80138e2:	68a3      	ldr	r3, [r4, #8]
 80138e4:	3b01      	subs	r3, #1
 80138e6:	60a3      	str	r3, [r4, #8]
 80138e8:	6823      	ldr	r3, [r4, #0]
 80138ea:	1c5a      	adds	r2, r3, #1
 80138ec:	6022      	str	r2, [r4, #0]
 80138ee:	701e      	strb	r6, [r3, #0]
 80138f0:	6962      	ldr	r2, [r4, #20]
 80138f2:	1c43      	adds	r3, r0, #1
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d004      	beq.n	8013902 <__swbuf_r+0x5a>
 80138f8:	89a3      	ldrh	r3, [r4, #12]
 80138fa:	07db      	lsls	r3, r3, #31
 80138fc:	d506      	bpl.n	801390c <__swbuf_r+0x64>
 80138fe:	2e0a      	cmp	r6, #10
 8013900:	d104      	bne.n	801390c <__swbuf_r+0x64>
 8013902:	4621      	mov	r1, r4
 8013904:	4628      	mov	r0, r5
 8013906:	f7ff fd99 	bl	801343c <_fflush_r>
 801390a:	b938      	cbnz	r0, 801391c <__swbuf_r+0x74>
 801390c:	4638      	mov	r0, r7
 801390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013910:	4621      	mov	r1, r4
 8013912:	4628      	mov	r0, r5
 8013914:	f000 f806 	bl	8013924 <__swsetup_r>
 8013918:	2800      	cmp	r0, #0
 801391a:	d0d5      	beq.n	80138c8 <__swbuf_r+0x20>
 801391c:	f04f 37ff 	mov.w	r7, #4294967295
 8013920:	e7f4      	b.n	801390c <__swbuf_r+0x64>
	...

08013924 <__swsetup_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4b2a      	ldr	r3, [pc, #168]	; (80139d0 <__swsetup_r+0xac>)
 8013928:	4605      	mov	r5, r0
 801392a:	6818      	ldr	r0, [r3, #0]
 801392c:	460c      	mov	r4, r1
 801392e:	b118      	cbz	r0, 8013938 <__swsetup_r+0x14>
 8013930:	6a03      	ldr	r3, [r0, #32]
 8013932:	b90b      	cbnz	r3, 8013938 <__swsetup_r+0x14>
 8013934:	f7fe f8be 	bl	8011ab4 <__sinit>
 8013938:	89a3      	ldrh	r3, [r4, #12]
 801393a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801393e:	0718      	lsls	r0, r3, #28
 8013940:	d422      	bmi.n	8013988 <__swsetup_r+0x64>
 8013942:	06d9      	lsls	r1, r3, #27
 8013944:	d407      	bmi.n	8013956 <__swsetup_r+0x32>
 8013946:	2309      	movs	r3, #9
 8013948:	602b      	str	r3, [r5, #0]
 801394a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801394e:	81a3      	strh	r3, [r4, #12]
 8013950:	f04f 30ff 	mov.w	r0, #4294967295
 8013954:	e034      	b.n	80139c0 <__swsetup_r+0x9c>
 8013956:	0758      	lsls	r0, r3, #29
 8013958:	d512      	bpl.n	8013980 <__swsetup_r+0x5c>
 801395a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801395c:	b141      	cbz	r1, 8013970 <__swsetup_r+0x4c>
 801395e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013962:	4299      	cmp	r1, r3
 8013964:	d002      	beq.n	801396c <__swsetup_r+0x48>
 8013966:	4628      	mov	r0, r5
 8013968:	f7fe ffc2 	bl	80128f0 <_free_r>
 801396c:	2300      	movs	r3, #0
 801396e:	6363      	str	r3, [r4, #52]	; 0x34
 8013970:	89a3      	ldrh	r3, [r4, #12]
 8013972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013976:	81a3      	strh	r3, [r4, #12]
 8013978:	2300      	movs	r3, #0
 801397a:	6063      	str	r3, [r4, #4]
 801397c:	6923      	ldr	r3, [r4, #16]
 801397e:	6023      	str	r3, [r4, #0]
 8013980:	89a3      	ldrh	r3, [r4, #12]
 8013982:	f043 0308 	orr.w	r3, r3, #8
 8013986:	81a3      	strh	r3, [r4, #12]
 8013988:	6923      	ldr	r3, [r4, #16]
 801398a:	b94b      	cbnz	r3, 80139a0 <__swsetup_r+0x7c>
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013996:	d003      	beq.n	80139a0 <__swsetup_r+0x7c>
 8013998:	4621      	mov	r1, r4
 801399a:	4628      	mov	r0, r5
 801399c:	f000 f884 	bl	8013aa8 <__smakebuf_r>
 80139a0:	89a0      	ldrh	r0, [r4, #12]
 80139a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80139a6:	f010 0301 	ands.w	r3, r0, #1
 80139aa:	d00a      	beq.n	80139c2 <__swsetup_r+0x9e>
 80139ac:	2300      	movs	r3, #0
 80139ae:	60a3      	str	r3, [r4, #8]
 80139b0:	6963      	ldr	r3, [r4, #20]
 80139b2:	425b      	negs	r3, r3
 80139b4:	61a3      	str	r3, [r4, #24]
 80139b6:	6923      	ldr	r3, [r4, #16]
 80139b8:	b943      	cbnz	r3, 80139cc <__swsetup_r+0xa8>
 80139ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80139be:	d1c4      	bne.n	801394a <__swsetup_r+0x26>
 80139c0:	bd38      	pop	{r3, r4, r5, pc}
 80139c2:	0781      	lsls	r1, r0, #30
 80139c4:	bf58      	it	pl
 80139c6:	6963      	ldrpl	r3, [r4, #20]
 80139c8:	60a3      	str	r3, [r4, #8]
 80139ca:	e7f4      	b.n	80139b6 <__swsetup_r+0x92>
 80139cc:	2000      	movs	r0, #0
 80139ce:	e7f7      	b.n	80139c0 <__swsetup_r+0x9c>
 80139d0:	24000160 	.word	0x24000160

080139d4 <_raise_r>:
 80139d4:	291f      	cmp	r1, #31
 80139d6:	b538      	push	{r3, r4, r5, lr}
 80139d8:	4604      	mov	r4, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	d904      	bls.n	80139e8 <_raise_r+0x14>
 80139de:	2316      	movs	r3, #22
 80139e0:	6003      	str	r3, [r0, #0]
 80139e2:	f04f 30ff 	mov.w	r0, #4294967295
 80139e6:	bd38      	pop	{r3, r4, r5, pc}
 80139e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80139ea:	b112      	cbz	r2, 80139f2 <_raise_r+0x1e>
 80139ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139f0:	b94b      	cbnz	r3, 8013a06 <_raise_r+0x32>
 80139f2:	4620      	mov	r0, r4
 80139f4:	f000 f830 	bl	8013a58 <_getpid_r>
 80139f8:	462a      	mov	r2, r5
 80139fa:	4601      	mov	r1, r0
 80139fc:	4620      	mov	r0, r4
 80139fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a02:	f000 b817 	b.w	8013a34 <_kill_r>
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d00a      	beq.n	8013a20 <_raise_r+0x4c>
 8013a0a:	1c59      	adds	r1, r3, #1
 8013a0c:	d103      	bne.n	8013a16 <_raise_r+0x42>
 8013a0e:	2316      	movs	r3, #22
 8013a10:	6003      	str	r3, [r0, #0]
 8013a12:	2001      	movs	r0, #1
 8013a14:	e7e7      	b.n	80139e6 <_raise_r+0x12>
 8013a16:	2400      	movs	r4, #0
 8013a18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	4798      	blx	r3
 8013a20:	2000      	movs	r0, #0
 8013a22:	e7e0      	b.n	80139e6 <_raise_r+0x12>

08013a24 <raise>:
 8013a24:	4b02      	ldr	r3, [pc, #8]	; (8013a30 <raise+0xc>)
 8013a26:	4601      	mov	r1, r0
 8013a28:	6818      	ldr	r0, [r3, #0]
 8013a2a:	f7ff bfd3 	b.w	80139d4 <_raise_r>
 8013a2e:	bf00      	nop
 8013a30:	24000160 	.word	0x24000160

08013a34 <_kill_r>:
 8013a34:	b538      	push	{r3, r4, r5, lr}
 8013a36:	4d07      	ldr	r5, [pc, #28]	; (8013a54 <_kill_r+0x20>)
 8013a38:	2300      	movs	r3, #0
 8013a3a:	4604      	mov	r4, r0
 8013a3c:	4608      	mov	r0, r1
 8013a3e:	4611      	mov	r1, r2
 8013a40:	602b      	str	r3, [r5, #0]
 8013a42:	f7ed fb8b 	bl	800115c <_kill>
 8013a46:	1c43      	adds	r3, r0, #1
 8013a48:	d102      	bne.n	8013a50 <_kill_r+0x1c>
 8013a4a:	682b      	ldr	r3, [r5, #0]
 8013a4c:	b103      	cbz	r3, 8013a50 <_kill_r+0x1c>
 8013a4e:	6023      	str	r3, [r4, #0]
 8013a50:	bd38      	pop	{r3, r4, r5, pc}
 8013a52:	bf00      	nop
 8013a54:	24002284 	.word	0x24002284

08013a58 <_getpid_r>:
 8013a58:	f7ed bb78 	b.w	800114c <_getpid>

08013a5c <__swhatbuf_r>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	460c      	mov	r4, r1
 8013a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a64:	2900      	cmp	r1, #0
 8013a66:	b096      	sub	sp, #88	; 0x58
 8013a68:	4615      	mov	r5, r2
 8013a6a:	461e      	mov	r6, r3
 8013a6c:	da0d      	bge.n	8013a8a <__swhatbuf_r+0x2e>
 8013a6e:	89a3      	ldrh	r3, [r4, #12]
 8013a70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013a74:	f04f 0100 	mov.w	r1, #0
 8013a78:	bf0c      	ite	eq
 8013a7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013a7e:	2340      	movne	r3, #64	; 0x40
 8013a80:	2000      	movs	r0, #0
 8013a82:	6031      	str	r1, [r6, #0]
 8013a84:	602b      	str	r3, [r5, #0]
 8013a86:	b016      	add	sp, #88	; 0x58
 8013a88:	bd70      	pop	{r4, r5, r6, pc}
 8013a8a:	466a      	mov	r2, sp
 8013a8c:	f000 f848 	bl	8013b20 <_fstat_r>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	dbec      	blt.n	8013a6e <__swhatbuf_r+0x12>
 8013a94:	9901      	ldr	r1, [sp, #4]
 8013a96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013a9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013a9e:	4259      	negs	r1, r3
 8013aa0:	4159      	adcs	r1, r3
 8013aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013aa6:	e7eb      	b.n	8013a80 <__swhatbuf_r+0x24>

08013aa8 <__smakebuf_r>:
 8013aa8:	898b      	ldrh	r3, [r1, #12]
 8013aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aac:	079d      	lsls	r5, r3, #30
 8013aae:	4606      	mov	r6, r0
 8013ab0:	460c      	mov	r4, r1
 8013ab2:	d507      	bpl.n	8013ac4 <__smakebuf_r+0x1c>
 8013ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ab8:	6023      	str	r3, [r4, #0]
 8013aba:	6123      	str	r3, [r4, #16]
 8013abc:	2301      	movs	r3, #1
 8013abe:	6163      	str	r3, [r4, #20]
 8013ac0:	b002      	add	sp, #8
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	ab01      	add	r3, sp, #4
 8013ac6:	466a      	mov	r2, sp
 8013ac8:	f7ff ffc8 	bl	8013a5c <__swhatbuf_r>
 8013acc:	9900      	ldr	r1, [sp, #0]
 8013ace:	4605      	mov	r5, r0
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7fd fa9b 	bl	801100c <_malloc_r>
 8013ad6:	b948      	cbnz	r0, 8013aec <__smakebuf_r+0x44>
 8013ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013adc:	059a      	lsls	r2, r3, #22
 8013ade:	d4ef      	bmi.n	8013ac0 <__smakebuf_r+0x18>
 8013ae0:	f023 0303 	bic.w	r3, r3, #3
 8013ae4:	f043 0302 	orr.w	r3, r3, #2
 8013ae8:	81a3      	strh	r3, [r4, #12]
 8013aea:	e7e3      	b.n	8013ab4 <__smakebuf_r+0xc>
 8013aec:	89a3      	ldrh	r3, [r4, #12]
 8013aee:	6020      	str	r0, [r4, #0]
 8013af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013af4:	81a3      	strh	r3, [r4, #12]
 8013af6:	9b00      	ldr	r3, [sp, #0]
 8013af8:	6163      	str	r3, [r4, #20]
 8013afa:	9b01      	ldr	r3, [sp, #4]
 8013afc:	6120      	str	r0, [r4, #16]
 8013afe:	b15b      	cbz	r3, 8013b18 <__smakebuf_r+0x70>
 8013b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b04:	4630      	mov	r0, r6
 8013b06:	f000 f81d 	bl	8013b44 <_isatty_r>
 8013b0a:	b128      	cbz	r0, 8013b18 <__smakebuf_r+0x70>
 8013b0c:	89a3      	ldrh	r3, [r4, #12]
 8013b0e:	f023 0303 	bic.w	r3, r3, #3
 8013b12:	f043 0301 	orr.w	r3, r3, #1
 8013b16:	81a3      	strh	r3, [r4, #12]
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	431d      	orrs	r5, r3
 8013b1c:	81a5      	strh	r5, [r4, #12]
 8013b1e:	e7cf      	b.n	8013ac0 <__smakebuf_r+0x18>

08013b20 <_fstat_r>:
 8013b20:	b538      	push	{r3, r4, r5, lr}
 8013b22:	4d07      	ldr	r5, [pc, #28]	; (8013b40 <_fstat_r+0x20>)
 8013b24:	2300      	movs	r3, #0
 8013b26:	4604      	mov	r4, r0
 8013b28:	4608      	mov	r0, r1
 8013b2a:	4611      	mov	r1, r2
 8013b2c:	602b      	str	r3, [r5, #0]
 8013b2e:	f7ed fb74 	bl	800121a <_fstat>
 8013b32:	1c43      	adds	r3, r0, #1
 8013b34:	d102      	bne.n	8013b3c <_fstat_r+0x1c>
 8013b36:	682b      	ldr	r3, [r5, #0]
 8013b38:	b103      	cbz	r3, 8013b3c <_fstat_r+0x1c>
 8013b3a:	6023      	str	r3, [r4, #0]
 8013b3c:	bd38      	pop	{r3, r4, r5, pc}
 8013b3e:	bf00      	nop
 8013b40:	24002284 	.word	0x24002284

08013b44 <_isatty_r>:
 8013b44:	b538      	push	{r3, r4, r5, lr}
 8013b46:	4d06      	ldr	r5, [pc, #24]	; (8013b60 <_isatty_r+0x1c>)
 8013b48:	2300      	movs	r3, #0
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	4608      	mov	r0, r1
 8013b4e:	602b      	str	r3, [r5, #0]
 8013b50:	f7ed fb73 	bl	800123a <_isatty>
 8013b54:	1c43      	adds	r3, r0, #1
 8013b56:	d102      	bne.n	8013b5e <_isatty_r+0x1a>
 8013b58:	682b      	ldr	r3, [r5, #0]
 8013b5a:	b103      	cbz	r3, 8013b5e <_isatty_r+0x1a>
 8013b5c:	6023      	str	r3, [r4, #0]
 8013b5e:	bd38      	pop	{r3, r4, r5, pc}
 8013b60:	24002284 	.word	0x24002284
 8013b64:	00000000 	.word	0x00000000

08013b68 <fmod>:
 8013b68:	b508      	push	{r3, lr}
 8013b6a:	ed2d 8b04 	vpush	{d8-d9}
 8013b6e:	eeb0 9b40 	vmov.f64	d9, d0
 8013b72:	eeb0 8b41 	vmov.f64	d8, d1
 8013b76:	f000 f81b 	bl	8013bb0 <__ieee754_fmod>
 8013b7a:	eeb4 9b48 	vcmp.f64	d9, d8
 8013b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b82:	d60c      	bvs.n	8013b9e <fmod+0x36>
 8013b84:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8013ba8 <fmod+0x40>
 8013b88:	eeb4 8b49 	vcmp.f64	d8, d9
 8013b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b90:	d105      	bne.n	8013b9e <fmod+0x36>
 8013b92:	f7fe f88b 	bl	8011cac <__errno>
 8013b96:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8013b9a:	2321      	movs	r3, #33	; 0x21
 8013b9c:	6003      	str	r3, [r0, #0]
 8013b9e:	ecbd 8b04 	vpop	{d8-d9}
 8013ba2:	bd08      	pop	{r3, pc}
 8013ba4:	f3af 8000 	nop.w
	...

08013bb0 <__ieee754_fmod>:
 8013bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bb4:	ed8d 1b00 	vstr	d1, [sp]
 8013bb8:	e9dd 6500 	ldrd	r6, r5, [sp]
 8013bbc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013bc0:	ea57 0306 	orrs.w	r3, r7, r6
 8013bc4:	46b6      	mov	lr, r6
 8013bc6:	d00d      	beq.n	8013be4 <__ieee754_fmod+0x34>
 8013bc8:	ee10 ca90 	vmov	ip, s1
 8013bcc:	4b79      	ldr	r3, [pc, #484]	; (8013db4 <__ieee754_fmod+0x204>)
 8013bce:	f02c 4800 	bic.w	r8, ip, #2147483648	; 0x80000000
 8013bd2:	4598      	cmp	r8, r3
 8013bd4:	dc06      	bgt.n	8013be4 <__ieee754_fmod+0x34>
 8013bd6:	4273      	negs	r3, r6
 8013bd8:	4a77      	ldr	r2, [pc, #476]	; (8013db8 <__ieee754_fmod+0x208>)
 8013bda:	4333      	orrs	r3, r6
 8013bdc:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d908      	bls.n	8013bf6 <__ieee754_fmod+0x46>
 8013be4:	ed9d 7b00 	vldr	d7, [sp]
 8013be8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013bec:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8013bf0:	b003      	add	sp, #12
 8013bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bf6:	45b8      	cmp	r8, r7
 8013bf8:	ee10 9a10 	vmov	r9, s0
 8013bfc:	ee10 1a10 	vmov	r1, s0
 8013c00:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 8013c04:	dc09      	bgt.n	8013c1a <__ieee754_fmod+0x6a>
 8013c06:	dbf3      	blt.n	8013bf0 <__ieee754_fmod+0x40>
 8013c08:	45b1      	cmp	r9, r6
 8013c0a:	d3f1      	bcc.n	8013bf0 <__ieee754_fmod+0x40>
 8013c0c:	d105      	bne.n	8013c1a <__ieee754_fmod+0x6a>
 8013c0e:	4b6b      	ldr	r3, [pc, #428]	; (8013dbc <__ieee754_fmod+0x20c>)
 8013c10:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8013c14:	ed93 0b00 	vldr	d0, [r3]
 8013c18:	e7ea      	b.n	8013bf0 <__ieee754_fmod+0x40>
 8013c1a:	4a67      	ldr	r2, [pc, #412]	; (8013db8 <__ieee754_fmod+0x208>)
 8013c1c:	ea1c 0f02 	tst.w	ip, r2
 8013c20:	d14a      	bne.n	8013cb8 <__ieee754_fmod+0x108>
 8013c22:	f1b8 0f00 	cmp.w	r8, #0
 8013c26:	d13f      	bne.n	8013ca8 <__ieee754_fmod+0xf8>
 8013c28:	4865      	ldr	r0, [pc, #404]	; (8013dc0 <__ieee754_fmod+0x210>)
 8013c2a:	464b      	mov	r3, r9
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	dc38      	bgt.n	8013ca2 <__ieee754_fmod+0xf2>
 8013c30:	4215      	tst	r5, r2
 8013c32:	d150      	bne.n	8013cd6 <__ieee754_fmod+0x126>
 8013c34:	2f00      	cmp	r7, #0
 8013c36:	d147      	bne.n	8013cc8 <__ieee754_fmod+0x118>
 8013c38:	4a61      	ldr	r2, [pc, #388]	; (8013dc0 <__ieee754_fmod+0x210>)
 8013c3a:	4633      	mov	r3, r6
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	dc40      	bgt.n	8013cc2 <__ieee754_fmod+0x112>
 8013c40:	4b60      	ldr	r3, [pc, #384]	; (8013dc4 <__ieee754_fmod+0x214>)
 8013c42:	4298      	cmp	r0, r3
 8013c44:	db4b      	blt.n	8013cde <__ieee754_fmod+0x12e>
 8013c46:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8013c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c4e:	f8df c174 	ldr.w	ip, [pc, #372]	; 8013dc4 <__ieee754_fmod+0x214>
 8013c52:	4562      	cmp	r2, ip
 8013c54:	db58      	blt.n	8013d08 <__ieee754_fmod+0x158>
 8013c56:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013c5a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8013c5e:	1a80      	subs	r0, r0, r2
 8013c60:	1b5e      	subs	r6, r3, r5
 8013c62:	eba1 070e 	sub.w	r7, r1, lr
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d164      	bne.n	8013d34 <__ieee754_fmod+0x184>
 8013c6a:	4571      	cmp	r1, lr
 8013c6c:	bf38      	it	cc
 8013c6e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8013c72:	2e00      	cmp	r6, #0
 8013c74:	bfa4      	itt	ge
 8013c76:	4639      	movge	r1, r7
 8013c78:	4633      	movge	r3, r6
 8013c7a:	ea53 0001 	orrs.w	r0, r3, r1
 8013c7e:	d0c6      	beq.n	8013c0e <__ieee754_fmod+0x5e>
 8013c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c84:	db6b      	blt.n	8013d5e <__ieee754_fmod+0x1ae>
 8013c86:	484f      	ldr	r0, [pc, #316]	; (8013dc4 <__ieee754_fmod+0x214>)
 8013c88:	4282      	cmp	r2, r0
 8013c8a:	db6e      	blt.n	8013d6a <__ieee754_fmod+0x1ba>
 8013c8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c90:	4323      	orrs	r3, r4
 8013c92:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8013c96:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	ec45 4b10 	vmov	d0, r4, r5
 8013ca0:	e7a6      	b.n	8013bf0 <__ieee754_fmod+0x40>
 8013ca2:	3801      	subs	r0, #1
 8013ca4:	005b      	lsls	r3, r3, #1
 8013ca6:	e7c1      	b.n	8013c2c <__ieee754_fmod+0x7c>
 8013ca8:	4846      	ldr	r0, [pc, #280]	; (8013dc4 <__ieee754_fmod+0x214>)
 8013caa:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	ddbe      	ble.n	8013c30 <__ieee754_fmod+0x80>
 8013cb2:	3801      	subs	r0, #1
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	e7fa      	b.n	8013cae <__ieee754_fmod+0xfe>
 8013cb8:	ea4f 5028 	mov.w	r0, r8, asr #20
 8013cbc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013cc0:	e7b6      	b.n	8013c30 <__ieee754_fmod+0x80>
 8013cc2:	3a01      	subs	r2, #1
 8013cc4:	005b      	lsls	r3, r3, #1
 8013cc6:	e7b9      	b.n	8013c3c <__ieee754_fmod+0x8c>
 8013cc8:	4a3e      	ldr	r2, [pc, #248]	; (8013dc4 <__ieee754_fmod+0x214>)
 8013cca:	02fb      	lsls	r3, r7, #11
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	ddb7      	ble.n	8013c40 <__ieee754_fmod+0x90>
 8013cd0:	3a01      	subs	r2, #1
 8013cd2:	005b      	lsls	r3, r3, #1
 8013cd4:	e7fa      	b.n	8013ccc <__ieee754_fmod+0x11c>
 8013cd6:	153a      	asrs	r2, r7, #20
 8013cd8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013cdc:	e7b0      	b.n	8013c40 <__ieee754_fmod+0x90>
 8013cde:	eba3 0c00 	sub.w	ip, r3, r0
 8013ce2:	f1bc 0f1f 	cmp.w	ip, #31
 8013ce6:	dc09      	bgt.n	8013cfc <__ieee754_fmod+0x14c>
 8013ce8:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 8013cec:	fa08 f10c 	lsl.w	r1, r8, ip
 8013cf0:	fa29 f303 	lsr.w	r3, r9, r3
 8013cf4:	430b      	orrs	r3, r1
 8013cf6:	fa09 f10c 	lsl.w	r1, r9, ip
 8013cfa:	e7a8      	b.n	8013c4e <__ieee754_fmod+0x9e>
 8013cfc:	4b32      	ldr	r3, [pc, #200]	; (8013dc8 <__ieee754_fmod+0x218>)
 8013cfe:	1a1b      	subs	r3, r3, r0
 8013d00:	fa09 f303 	lsl.w	r3, r9, r3
 8013d04:	2100      	movs	r1, #0
 8013d06:	e7a2      	b.n	8013c4e <__ieee754_fmod+0x9e>
 8013d08:	ebac 0c02 	sub.w	ip, ip, r2
 8013d0c:	f1bc 0f1f 	cmp.w	ip, #31
 8013d10:	dc09      	bgt.n	8013d26 <__ieee754_fmod+0x176>
 8013d12:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8013d16:	fa07 f70c 	lsl.w	r7, r7, ip
 8013d1a:	fa26 f505 	lsr.w	r5, r6, r5
 8013d1e:	433d      	orrs	r5, r7
 8013d20:	fa06 fe0c 	lsl.w	lr, r6, ip
 8013d24:	e79b      	b.n	8013c5e <__ieee754_fmod+0xae>
 8013d26:	4d28      	ldr	r5, [pc, #160]	; (8013dc8 <__ieee754_fmod+0x218>)
 8013d28:	1aad      	subs	r5, r5, r2
 8013d2a:	fa06 f505 	lsl.w	r5, r6, r5
 8013d2e:	f04f 0e00 	mov.w	lr, #0
 8013d32:	e794      	b.n	8013c5e <__ieee754_fmod+0xae>
 8013d34:	4571      	cmp	r1, lr
 8013d36:	bf38      	it	cc
 8013d38:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8013d3c:	2e00      	cmp	r6, #0
 8013d3e:	da05      	bge.n	8013d4c <__ieee754_fmod+0x19c>
 8013d40:	0fce      	lsrs	r6, r1, #31
 8013d42:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8013d46:	0049      	lsls	r1, r1, #1
 8013d48:	3801      	subs	r0, #1
 8013d4a:	e789      	b.n	8013c60 <__ieee754_fmod+0xb0>
 8013d4c:	ea56 0307 	orrs.w	r3, r6, r7
 8013d50:	f43f af5d 	beq.w	8013c0e <__ieee754_fmod+0x5e>
 8013d54:	0ffb      	lsrs	r3, r7, #31
 8013d56:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8013d5a:	0079      	lsls	r1, r7, #1
 8013d5c:	e7f4      	b.n	8013d48 <__ieee754_fmod+0x198>
 8013d5e:	0fc8      	lsrs	r0, r1, #31
 8013d60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013d64:	0049      	lsls	r1, r1, #1
 8013d66:	3a01      	subs	r2, #1
 8013d68:	e78a      	b.n	8013c80 <__ieee754_fmod+0xd0>
 8013d6a:	1a80      	subs	r0, r0, r2
 8013d6c:	2814      	cmp	r0, #20
 8013d6e:	dc0c      	bgt.n	8013d8a <__ieee754_fmod+0x1da>
 8013d70:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8013d74:	fa03 f202 	lsl.w	r2, r3, r2
 8013d78:	40c1      	lsrs	r1, r0
 8013d7a:	430a      	orrs	r2, r1
 8013d7c:	4103      	asrs	r3, r0
 8013d7e:	ea43 0104 	orr.w	r1, r3, r4
 8013d82:	4610      	mov	r0, r2
 8013d84:	ec41 0b10 	vmov	d0, r0, r1
 8013d88:	e732      	b.n	8013bf0 <__ieee754_fmod+0x40>
 8013d8a:	281f      	cmp	r0, #31
 8013d8c:	dc07      	bgt.n	8013d9e <__ieee754_fmod+0x1ee>
 8013d8e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8013d92:	40c1      	lsrs	r1, r0
 8013d94:	fa03 f202 	lsl.w	r2, r3, r2
 8013d98:	430a      	orrs	r2, r1
 8013d9a:	4623      	mov	r3, r4
 8013d9c:	e7ef      	b.n	8013d7e <__ieee754_fmod+0x1ce>
 8013d9e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8013da2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013da6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8013daa:	32e2      	adds	r2, #226	; 0xe2
 8013dac:	fa43 f202 	asr.w	r2, r3, r2
 8013db0:	e7f3      	b.n	8013d9a <__ieee754_fmod+0x1ea>
 8013db2:	bf00      	nop
 8013db4:	7fefffff 	.word	0x7fefffff
 8013db8:	7ff00000 	.word	0x7ff00000
 8013dbc:	08014a28 	.word	0x08014a28
 8013dc0:	fffffbed 	.word	0xfffffbed
 8013dc4:	fffffc02 	.word	0xfffffc02
 8013dc8:	fffffbe2 	.word	0xfffffbe2

08013dcc <_init>:
 8013dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dce:	bf00      	nop
 8013dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dd2:	bc08      	pop	{r3}
 8013dd4:	469e      	mov	lr, r3
 8013dd6:	4770      	bx	lr

08013dd8 <_fini>:
 8013dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dda:	bf00      	nop
 8013ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dde:	bc08      	pop	{r3}
 8013de0:	469e      	mov	lr, r3
 8013de2:	4770      	bx	lr
