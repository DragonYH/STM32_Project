
EX_TMP117_F103ZET6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  08006a80  08006a80  00016a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800741c  0800741c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800741c  0800741c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800741c  0800741c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001d4  080075f8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080075f8  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009706  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3d  00000000  00000000  00029946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002b888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007df  00000000  00000000  0002c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a93e  00000000  00000000  0002cac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de4d  00000000  00000000  00047405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094eac  00000000  00000000  00055252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a64  00000000  00000000  000ea100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000edb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08006a64 	.word	0x08006a64

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08006a64 	.word	0x08006a64

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a30      	ldr	r2, [pc, #192]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a24      	ldr	r2, [pc, #144]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2120      	movs	r1, #32
 8000c78:	481f      	ldr	r0, [pc, #124]	; (8000cf8 <MX_GPIO_Init+0xf8>)
 8000c7a:	f000 fe07 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	481e      	ldr	r0, [pc, #120]	; (8000cfc <MX_GPIO_Init+0xfc>)
 8000c84:	f000 fe02 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <MX_GPIO_Init+0x100>)
 8000c90:	f000 fdfc 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <MX_GPIO_Init+0xf8>)
 8000cac:	f000 fc5a 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_GPIO_Init+0xfc>)
 8000cc8:	f000 fc4c 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_GPIO_Init+0x100>)
 8000ce6:	f000 fc3d 	bl	8001564 <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40011c00 	.word	0x40011c00

08000d04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C1_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_I2C1_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d42:	f000 fdbb 	bl	80018bc <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 f8d5 	bl	8000efa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200001f0 	.word	0x200001f0
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	000186a0 	.word	0x000186a0

08000d60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x70>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d98:	23c0      	movs	r3, #192	; 0xc0
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_I2C_MspInit+0x78>)
 8000dac:	f000 fbda 	bl	8001564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dba:	61d3      	str	r3, [r2, #28]
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_I2C_MspInit+0x74>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <oled_display>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char tmp[8];
BMP280 *bmp280;
void oled_display()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	sprintf(tmp, "%.3fC", bmp280_getTemprature(bmp280, &hi2c1));
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <oled_display+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <oled_display+0x3c>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fde8 	bl	80039bc <bmp280_getTemprature>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fb86 	bl	8000500 <__aeabi_f2d>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <oled_display+0x40>)
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <oled_display+0x44>)
 8000dfc:	f003 fce6 	bl	80047cc <siprintf>
	OLED_ShowString(0, 0, (uint8_t*)tmp);
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <oled_display+0x44>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f002 ff09 	bl	8003c1c <OLED_ShowString>
	HAL_Delay(100);
 8000e0a:	2064      	movs	r0, #100	; 0x64
 8000e0c:	f000 faa2 	bl	8001354 <HAL_Delay>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000024c 	.word	0x2000024c
 8000e18:	200001f0 	.word	0x200001f0
 8000e1c:	08006a80 	.word	0x08006a80
 8000e20:	20000244 	.word	0x20000244

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fa32 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f820 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f7ff fee6 	bl	8000c00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e34:	f7ff ff66 	bl	8000d04 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e38:	f000 f864 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000e3c:	f002 ff1c 	bl	8003c78 <OLED_Init>
  OLED_ShowString(0, 0, (uint8_t*)"123");
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <main+0x40>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f002 fee9 	bl	8003c1c <OLED_ShowString>
  HAL_Delay(100);
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f000 fa82 	bl	8001354 <HAL_Delay>
  bmp280_init(bmp280, &hi2c1);
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <main+0x44>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4905      	ldr	r1, [pc, #20]	; (8000e6c <main+0x48>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fc7b 	bl	8003752 <bmp280_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  oled_display();
 8000e5c:	f7ff ffbe 	bl	8000ddc <oled_display>
 8000e60:	e7fc      	b.n	8000e5c <main+0x38>
 8000e62:	bf00      	nop
 8000e64:	08006a88 	.word	0x08006a88
 8000e68:	2000024c 	.word	0x2000024c
 8000e6c:	200001f0 	.word	0x200001f0

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b090      	sub	sp, #64	; 0x40
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	2228      	movs	r2, #40	; 0x28
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fd07 	bl	8004892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fd59 	bl	8002970 <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ec4:	f000 f819 	bl	8000efa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 ffc6 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eee:	f000 f804 	bl	8000efa <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3740      	adds	r7, #64	; 0x40
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efe:	b672      	cpsid	i
}
 8000f00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <Error_Handler+0x8>

08000f04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f002 f907 	bl	8003168 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f7ff ffcb 	bl	8000efa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000250 	.word	0x20000250
 8000f6c:	40013000 	.word	0x40013000

08000f70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d12f      	bne.n	8000ff0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000f96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8000fc0:	23a0      	movs	r3, #160	; 0xa0
 8000fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <HAL_SPI_MspInit+0x90>)
 8000fd4:	f000 fac6 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_SPI_MspInit+0x90>)
 8000fec:	f000 faba 	bl	8001564 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010800 	.word	0x40010800

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 f935 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <_kill>:

int _kill(int pid, int sig)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ce:	f003 fc33 	bl	8004938 <__errno>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2216      	movs	r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
  return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_exit>:

void _exit (int status)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffe7 	bl	80010c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f6:	e7fe      	b.n	80010f6 <_exit+0x12>

080010f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e00a      	b.n	8001120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110a:	f3af 8000 	nop.w
 800110e:	4601      	mov	r1, r0
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf0      	blt.n	800110a <_read+0x12>
  }

  return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e009      	b.n	8001158 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf1      	blt.n	8001144 <_write+0x12>
  }
  return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_close>:

int _close(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	605a      	str	r2, [r3, #4]
  return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f003 fb9c 	bl	8004938 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20010000 	.word	0x20010000
 800122c:	00000400 	.word	0x00000400
 8001230:	200002a8 	.word	0x200002a8
 8001234:	20000400 	.word	0x20000400

08001238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001244:	f7ff fff8 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800124a:	490c      	ldr	r1, [pc, #48]	; (800127c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <LoopFillZerobss+0x16>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001260:	4c09      	ldr	r4, [pc, #36]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f003 fb69 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001272:	f7ff fdd7 	bl	8000e24 <main>
  bx lr
 8001276:	4770      	bx	lr
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001280:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 8001284:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001288:	200003fc 	.word	0x200003fc

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x28>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x28>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f92b 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff feaa 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f935 	bl	800154a <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f90b 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x1c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_IncTick+0x20>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <HAL_IncTick+0x20>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000008 	.word	0x20000008
 800133c:	200002ac 	.word	0x200002ac

08001340 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_GetTick+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200002ac 	.word	0x200002ac

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff fff0 	bl	8001340 <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffe0 	bl	8001340 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff90 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff49 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff5e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffb0 	bl	80014b8 <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b08b      	sub	sp, #44	; 0x2c
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001576:	e179      	b.n	800186c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001578:	2201      	movs	r2, #1
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8168 	bne.w	8001866 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <HAL_GPIO_Init+0x290>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d05e      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015a0:	4a94      	ldr	r2, [pc, #592]	; (80017f4 <HAL_GPIO_Init+0x290>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d875      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015a6:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_GPIO_Init+0x294>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d058      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015ac:	4a92      	ldr	r2, [pc, #584]	; (80017f8 <HAL_GPIO_Init+0x294>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d86f      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015b2:	4a92      	ldr	r2, [pc, #584]	; (80017fc <HAL_GPIO_Init+0x298>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d052      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015b8:	4a90      	ldr	r2, [pc, #576]	; (80017fc <HAL_GPIO_Init+0x298>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d869      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015be:	4a90      	ldr	r2, [pc, #576]	; (8001800 <HAL_GPIO_Init+0x29c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d04c      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015c4:	4a8e      	ldr	r2, [pc, #568]	; (8001800 <HAL_GPIO_Init+0x29c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d863      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015ca:	4a8e      	ldr	r2, [pc, #568]	; (8001804 <HAL_GPIO_Init+0x2a0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d046      	beq.n	800165e <HAL_GPIO_Init+0xfa>
 80015d0:	4a8c      	ldr	r2, [pc, #560]	; (8001804 <HAL_GPIO_Init+0x2a0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d85d      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015d6:	2b12      	cmp	r3, #18
 80015d8:	d82a      	bhi.n	8001630 <HAL_GPIO_Init+0xcc>
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d859      	bhi.n	8001692 <HAL_GPIO_Init+0x12e>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <HAL_GPIO_Init+0x80>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	08001639 	.word	0x08001639
 80015ec:	0800164b 	.word	0x0800164b
 80015f0:	0800168d 	.word	0x0800168d
 80015f4:	08001693 	.word	0x08001693
 80015f8:	08001693 	.word	0x08001693
 80015fc:	08001693 	.word	0x08001693
 8001600:	08001693 	.word	0x08001693
 8001604:	08001693 	.word	0x08001693
 8001608:	08001693 	.word	0x08001693
 800160c:	08001693 	.word	0x08001693
 8001610:	08001693 	.word	0x08001693
 8001614:	08001693 	.word	0x08001693
 8001618:	08001693 	.word	0x08001693
 800161c:	08001693 	.word	0x08001693
 8001620:	08001693 	.word	0x08001693
 8001624:	08001693 	.word	0x08001693
 8001628:	08001641 	.word	0x08001641
 800162c:	08001655 	.word	0x08001655
 8001630:	4a75      	ldr	r2, [pc, #468]	; (8001808 <HAL_GPIO_Init+0x2a4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001636:	e02c      	b.n	8001692 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e029      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	3304      	adds	r3, #4
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e024      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	3308      	adds	r3, #8
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e01f      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	330c      	adds	r3, #12
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e01a      	b.n	8001694 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001666:	2304      	movs	r3, #4
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e013      	b.n	8001694 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	611a      	str	r2, [r3, #16]
          break;
 800167e:	e009      	b.n	8001694 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001680:	2308      	movs	r3, #8
 8001682:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	615a      	str	r2, [r3, #20]
          break;
 800168a:	e003      	b.n	8001694 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x130>
          break;
 8001692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d801      	bhi.n	800169e <HAL_GPIO_Init+0x13a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_Init+0x13e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3304      	adds	r3, #4
 80016a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2bff      	cmp	r3, #255	; 0xff
 80016a8:	d802      	bhi.n	80016b0 <HAL_GPIO_Init+0x14c>
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	e002      	b.n	80016b6 <HAL_GPIO_Init+0x152>
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3b08      	subs	r3, #8
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	210f      	movs	r1, #15
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401a      	ands	r2, r3
 80016c8:	6a39      	ldr	r1, [r7, #32]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80c1 	beq.w	8001866 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e4:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_GPIO_Init+0x2a8>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2a8>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_GPIO_Init+0x2a8>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016fc:	4a44      	ldr	r2, [pc, #272]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3c      	ldr	r2, [pc, #240]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d01f      	beq.n	8001768 <HAL_GPIO_Init+0x204>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <HAL_GPIO_Init+0x2b4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d019      	beq.n	8001764 <HAL_GPIO_Init+0x200>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3a      	ldr	r2, [pc, #232]	; (800181c <HAL_GPIO_Init+0x2b8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d013      	beq.n	8001760 <HAL_GPIO_Init+0x1fc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a39      	ldr	r2, [pc, #228]	; (8001820 <HAL_GPIO_Init+0x2bc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_GPIO_Init+0x1f8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a38      	ldr	r2, [pc, #224]	; (8001824 <HAL_GPIO_Init+0x2c0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x1f4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a37      	ldr	r2, [pc, #220]	; (8001828 <HAL_GPIO_Init+0x2c4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_GPIO_Init+0x1f0>
 8001750:	2305      	movs	r3, #5
 8001752:	e00a      	b.n	800176a <HAL_GPIO_Init+0x206>
 8001754:	2306      	movs	r3, #6
 8001756:	e008      	b.n	800176a <HAL_GPIO_Init+0x206>
 8001758:	2304      	movs	r3, #4
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x206>
 800175c:	2303      	movs	r3, #3
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x206>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x206>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x206>
 8001768:	2300      	movs	r3, #0
 800176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177a:	4925      	ldr	r1, [pc, #148]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_GPIO_Init+0x2c8>)
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	4924      	ldr	r1, [pc, #144]	; (800182c <HAL_GPIO_Init+0x2c8>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4920      	ldr	r1, [pc, #128]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	491a      	ldr	r1, [pc, #104]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4916      	ldr	r1, [pc, #88]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d025      	beq.n	8001830 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4910      	ldr	r1, [pc, #64]	; (800182c <HAL_GPIO_Init+0x2c8>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	e025      	b.n	800183e <HAL_GPIO_Init+0x2da>
 80017f2:	bf00      	nop
 80017f4:	10320000 	.word	0x10320000
 80017f8:	10310000 	.word	0x10310000
 80017fc:	10220000 	.word	0x10220000
 8001800:	10210000 	.word	0x10210000
 8001804:	10120000 	.word	0x10120000
 8001808:	10110000 	.word	0x10110000
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	40010800 	.word	0x40010800
 8001818:	40010c00 	.word	0x40010c00
 800181c:	40011000 	.word	0x40011000
 8001820:	40011400 	.word	0x40011400
 8001824:	40011800 	.word	0x40011800
 8001828:	40011c00 	.word	0x40011c00
 800182c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	4913      	ldr	r1, [pc, #76]	; (8001888 <HAL_GPIO_Init+0x324>)
 800183a:	4013      	ands	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_GPIO_Init+0x324>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_GPIO_Init+0x324>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4909      	ldr	r1, [pc, #36]	; (8001888 <HAL_GPIO_Init+0x324>)
 8001862:	4013      	ands	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f ae7e 	bne.w	8001578 <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	372c      	adds	r7, #44	; 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e12b      	b.n	8001b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fa3c 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2224      	movs	r2, #36	; 0x24
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800191e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001920:	f001 fbf0 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8001924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a81      	ldr	r2, [pc, #516]	; (8001b30 <HAL_I2C_Init+0x274>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d807      	bhi.n	8001940 <HAL_I2C_Init+0x84>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_I2C_Init+0x278>)
 8001934:	4293      	cmp	r3, r2
 8001936:	bf94      	ite	ls
 8001938:	2301      	movls	r3, #1
 800193a:	2300      	movhi	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e006      	b.n	800194e <HAL_I2C_Init+0x92>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4a7d      	ldr	r2, [pc, #500]	; (8001b38 <HAL_I2C_Init+0x27c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	bf94      	ite	ls
 8001948:	2301      	movls	r3, #1
 800194a:	2300      	movhi	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0e7      	b.n	8001b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4a78      	ldr	r2, [pc, #480]	; (8001b3c <HAL_I2C_Init+0x280>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a6a      	ldr	r2, [pc, #424]	; (8001b30 <HAL_I2C_Init+0x274>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d802      	bhi.n	8001990 <HAL_I2C_Init+0xd4>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	e009      	b.n	80019a4 <HAL_I2C_Init+0xe8>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <HAL_I2C_Init+0x284>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	3301      	adds	r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	495c      	ldr	r1, [pc, #368]	; (8001b30 <HAL_I2C_Init+0x274>)
 80019c0:	428b      	cmp	r3, r1
 80019c2:	d819      	bhi.n	80019f8 <HAL_I2C_Init+0x13c>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e59      	subs	r1, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d2:	1c59      	adds	r1, r3, #1
 80019d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019d8:	400b      	ands	r3, r1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00a      	beq.n	80019f4 <HAL_I2C_Init+0x138>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e59      	subs	r1, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f2:	e051      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e04f      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <HAL_I2C_Init+0x168>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	440b      	add	r3, r1
 8001a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e012      	b.n	8001a4a <HAL_I2C_Init+0x18e>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	0099      	lsls	r1, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_Init+0x196>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e022      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10e      	bne.n	8001a78 <HAL_I2C_Init+0x1bc>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1e58      	subs	r0, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	440b      	add	r3, r1
 8001a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a76:	e00f      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e58      	subs	r0, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	0099      	lsls	r1, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	6809      	ldr	r1, [r1, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6911      	ldr	r1, [r2, #16]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	000186a0 	.word	0x000186a0
 8001b34:	001e847f 	.word	0x001e847f
 8001b38:	003d08ff 	.word	0x003d08ff
 8001b3c:	431bde83 	.word	0x431bde83
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	817b      	strh	r3, [r7, #10]
 8001b56:	460b      	mov	r3, r1
 8001b58:	813b      	strh	r3, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b5e:	f7ff fbef 	bl	8001340 <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	f040 80d9 	bne.w	8001d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2319      	movs	r3, #25
 8001b78:	2201      	movs	r2, #1
 8001b7a:	496d      	ldr	r1, [pc, #436]	; (8001d30 <HAL_I2C_Mem_Write+0x1ec>)
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fcc1 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e0cc      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Mem_Write+0x56>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0c5      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d007      	beq.n	8001bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2221      	movs	r2, #33	; 0x21
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_I2C_Mem_Write+0x1f0>)
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c02:	88f8      	ldrh	r0, [r7, #6]
 8001c04:	893a      	ldrh	r2, [r7, #8]
 8001c06:	8979      	ldrh	r1, [r7, #10]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4603      	mov	r3, r0
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 faf8 	bl	8002208 <I2C_RequestMemoryWrite>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d052      	beq.n	8001cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e081      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fd86 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d107      	bne.n	8001c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06b      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_I2C_Mem_Write+0x180>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d017      	beq.n	8001cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1aa      	bne.n	8001c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fd79 	bl	80027c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00d      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d107      	bne.n	8001cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e016      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	00100002 	.word	0x00100002
 8001d34:	ffff0000 	.word	0xffff0000

08001d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	817b      	strh	r3, [r7, #10]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	813b      	strh	r3, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d56:	f7ff faf3 	bl	8001340 <HAL_GetTick>
 8001d5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	f040 8244 	bne.w	80021f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2319      	movs	r3, #25
 8001d70:	2201      	movs	r2, #1
 8001d72:	4982      	ldr	r1, [pc, #520]	; (8001f7c <HAL_I2C_Mem_Read+0x244>)
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fbc5 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	e237      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Mem_Read+0x5a>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e230      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d007      	beq.n	8001db8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2222      	movs	r2, #34	; 0x22
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a62      	ldr	r2, [pc, #392]	; (8001f80 <HAL_I2C_Mem_Read+0x248>)
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dfa:	88f8      	ldrh	r0, [r7, #6]
 8001dfc:	893a      	ldrh	r2, [r7, #8]
 8001dfe:	8979      	ldrh	r1, [r7, #10]
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fa92 	bl	8002334 <I2C_RequestMemoryRead>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1ec      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d113      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e1c0      	b.n	80021cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d11e      	bne.n	8001e90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e62:	b672      	cpsid	i
}
 8001e64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e8c:	b662      	cpsie	i
}
 8001e8e:	e035      	b.n	8001efc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d11e      	bne.n	8001ed6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed2:	b662      	cpsie	i
}
 8001ed4:	e012      	b.n	8001efc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ee4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001efc:	e166      	b.n	80021cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	f200 811f 	bhi.w	8002146 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d123      	bne.n	8001f58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fc9f 	bl	8002858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e167      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f56:	e139      	b.n	80021cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d152      	bne.n	8002006 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	2200      	movs	r2, #0
 8001f68:	4906      	ldr	r1, [pc, #24]	; (8001f84 <HAL_I2C_Mem_Read+0x24c>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 faca 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e13c      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
 8001f7a:	bf00      	nop
 8001f7c:	00100002 	.word	0x00100002
 8001f80:	ffff0000 	.word	0xffff0000
 8001f84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fce:	b662      	cpsie	i
}
 8001fd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002004:	e0e2      	b.n	80021cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	2200      	movs	r2, #0
 800200e:	497b      	ldr	r1, [pc, #492]	; (80021fc <HAL_I2C_Mem_Read+0x4c4>)
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fa77 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0e9      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
}
 8002032:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002066:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_I2C_Mem_Read+0x4c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_I2C_Mem_Read+0x4cc>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a1a      	lsrs	r2, r3, #8
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00da      	lsls	r2, r3, #3
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	3b01      	subs	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d118      	bne.n	80020be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020ae:	b662      	cpsie	i
}
 80020b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e09a      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d1d9      	bne.n	8002080 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800210e:	b662      	cpsie	i
}
 8002110:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002144:	e042      	b.n	80021cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fb84 	bl	8002858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e04c      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d118      	bne.n	80021cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f47f ae94 	bne.w	8001efe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3728      	adds	r7, #40	; 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	00010004 	.word	0x00010004
 8002200:	20000000 	.word	0x20000000
 8002204:	14f8b589 	.word	0x14f8b589

08002208 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	460b      	mov	r3, r1
 800221c:	813b      	strh	r3, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2200      	movs	r2, #0
 800223a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f960 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002258:	d103      	bne.n	8002262 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e05f      	b.n	8002326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	492d      	ldr	r1, [pc, #180]	; (8002330 <I2C_RequestMemoryWrite+0x128>)
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9bb 	bl	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e04c      	b.n	8002326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fa46 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d107      	bne.n	80022ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e02b      	b.n	8002326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e021      	b.n	8002324 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022e0:	893b      	ldrh	r3, [r7, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa20 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e005      	b.n	8002326 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800231a:	893b      	ldrh	r3, [r7, #8]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	00010002 	.word	0x00010002

08002334 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	460b      	mov	r3, r1
 8002348:	813b      	strh	r3, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800236c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	2200      	movs	r2, #0
 8002376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f8c2 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	d103      	bne.n	800239e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0aa      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	6a3a      	ldr	r2, [r7, #32]
 80023b6:	4952      	ldr	r1, [pc, #328]	; (8002500 <I2C_RequestMemoryRead+0x1cc>)
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f91d 	bl	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e097      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	6a39      	ldr	r1, [r7, #32]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f9a8 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d107      	bne.n	8002406 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e076      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002410:	893b      	ldrh	r3, [r7, #8]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	e021      	b.n	8002460 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800241c:	893b      	ldrh	r3, [r7, #8]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	6a39      	ldr	r1, [r7, #32]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f982 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e050      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	6a39      	ldr	r1, [r7, #32]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f967 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b04      	cmp	r3, #4
 8002476:	d107      	bne.n	8002488 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e035      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f82b 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c2:	d103      	bne.n	80024cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e013      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024d0:	897b      	ldrh	r3, [r7, #10]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <I2C_RequestMemoryRead+0x1cc>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f886 	bl	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00010002 	.word	0x00010002

08002504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	e048      	b.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d044      	beq.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe ff0f 	bl	8001340 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d139      	bne.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10d      	bne.n	800255a <I2C_WaitOnFlagUntilTimeout+0x56>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	e00c      	b.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x70>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	43da      	mvns	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	429a      	cmp	r2, r3
 8002578:	d116      	bne.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e023      	b.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	0c1b      	lsrs	r3, r3, #16
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d10d      	bne.n	80025ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	e00c      	b.n	80025e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	43da      	mvns	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d093      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002606:	e071      	b.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d123      	bne.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e067      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d041      	beq.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7fe fe6a 	bl	8001340 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d136      	bne.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10c      	bne.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e00b      	b.n	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e021      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10c      	bne.n	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e00b      	b.n	8002728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f af6d 	bne.w	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002744:	e034      	b.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f8e3 	bl	8002912 <I2C_IsAcknowledgeFailed>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d028      	beq.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fdef 	bl	8001340 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11d      	bne.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d016      	beq.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d1c3      	bne.n	8002746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d4:	e034      	b.n	8002840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f89b 	bl	8002912 <I2C_IsAcknowledgeFailed>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e034      	b.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d028      	beq.n	8002840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7fe fda7 	bl	8001340 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11d      	bne.n	8002840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b04      	cmp	r3, #4
 8002810:	d016      	beq.n	8002840 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e007      	b.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b04      	cmp	r3, #4
 800284c:	d1c3      	bne.n	80027d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002864:	e049      	b.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b10      	cmp	r3, #16
 8002872:	d119      	bne.n	80028a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0210 	mvn.w	r2, #16
 800287c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e030      	b.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a8:	f7fe fd4a 	bl	8001340 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d302      	bcc.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11d      	bne.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d016      	beq.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e007      	b.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d1ae      	bne.n	8002866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002928:	d11b      	bne.n	8002962 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002932:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e272      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002990:	4b92      	ldr	r3, [pc, #584]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00c      	beq.n	80029b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800299c:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d112      	bne.n	80029ce <HAL_RCC_OscConfig+0x5e>
 80029a8:	4b8c      	ldr	r3, [pc, #560]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d10b      	bne.n	80029ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b6:	4b89      	ldr	r3, [pc, #548]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d06c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x12c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d168      	bne.n	8002a9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e24c      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x76>
 80029d8:	4b80      	ldr	r3, [pc, #512]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a7f      	ldr	r2, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e02e      	b.n	8002a44 <HAL_RCC_OscConfig+0xd4>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x98>
 80029ee:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7a      	ldr	r2, [pc, #488]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b78      	ldr	r3, [pc, #480]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a77      	ldr	r2, [pc, #476]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01d      	b.n	8002a44 <HAL_RCC_OscConfig+0xd4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0xbc>
 8002a12:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a71      	ldr	r2, [pc, #452]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	4b6b      	ldr	r3, [pc, #428]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b68      	ldr	r3, [pc, #416]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a67      	ldr	r2, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fc78 	bl	8001340 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fc74 	bl	8001340 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e200      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe4>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fc64 	bl	8001340 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fc60 	bl	8001340 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1ec      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x10c>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d063      	beq.n	8002b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ab6:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d11c      	bne.n	8002afc <HAL_RCC_OscConfig+0x18c>
 8002ac2:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x176>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1c0      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4939      	ldr	r1, [pc, #228]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e03a      	b.n	8002b72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_RCC_OscConfig+0x270>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fc19 	bl	8001340 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fc15 	bl	8001340 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e1a1      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4927      	ldr	r1, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_RCC_OscConfig+0x270>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fbf8 	bl	8001340 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fbf4 	bl	8001340 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e180      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03a      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d019      	beq.n	8002bba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fbd8 	bl	8001340 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fbd4 	bl	8001340 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e160      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f000 faba 	bl	800312c <RCC_Delay>
 8002bb8:	e01c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fbbe 	bl	8001340 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc6:	e00f      	b.n	8002be8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fbba 	bl	8001340 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d908      	bls.n	8002be8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e146      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	42420000 	.word	0x42420000
 8002be4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e9      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a6 	beq.w	8002d4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b8b      	ldr	r3, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	61d3      	str	r3, [r2, #28]
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x4c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x4c8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	; (8002e38 <HAL_RCC_OscConfig+0x4c8>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe fb7b 	bl	8001340 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fe fb77 	bl	8001340 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	; 0x64
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e103      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x4c8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x312>
 8002c74:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e02d      	b.n	8002cde <HAL_RCC_OscConfig+0x36e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x334>
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6213      	str	r3, [r2, #32]
 8002c96:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a66      	ldr	r2, [pc, #408]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	6213      	str	r3, [r2, #32]
 8002ca2:	e01c      	b.n	8002cde <HAL_RCC_OscConfig+0x36e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x356>
 8002cac:	4b61      	ldr	r3, [pc, #388]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6213      	str	r3, [r2, #32]
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0x36e>
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a5a      	ldr	r2, [pc, #360]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d015      	beq.n	8002d12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fb2b 	bl	8001340 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fb27 	bl	8001340 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0b1      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	4b4b      	ldr	r3, [pc, #300]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RCC_OscConfig+0x37e>
 8002d10:	e014      	b.n	8002d3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d12:	f7fe fb15 	bl	8001340 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe fb11 	bl	8001340 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e09b      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d42:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4a3b      	ldr	r2, [pc, #236]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8087 	beq.w	8002e66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d061      	beq.n	8002e28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d146      	bne.n	8002dfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b33      	ldr	r3, [pc, #204]	; (8002e3c <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fae5 	bl	8001340 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fae1 	bl	8001340 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e06d      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8c:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d108      	bne.n	8002db4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4921      	ldr	r1, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a19      	ldr	r1, [r3, #32]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fab5 	bl	8001340 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe fab1 	bl	8001340 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e03d      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x46a>
 8002df8:	e035      	b.n	8002e66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fa9e 	bl	8001340 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fa9a 	bl	8001340 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e026      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x498>
 8002e26:	e01e      	b.n	8002e66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e019      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_OscConfig+0x500>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0d0      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	4965      	ldr	r1, [pc, #404]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0b8      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ef2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	494d      	ldr	r1, [pc, #308]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d040      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d115      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07f      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e073      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4936      	ldr	r1, [pc, #216]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe f9ec 	bl	8001340 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe f9e8 	bl	8001340 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e053      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d210      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 0207 	bic.w	r2, r3, #7
 8002faa:	4922      	ldr	r1, [pc, #136]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e032      	b.n	800302a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4916      	ldr	r1, [pc, #88]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003002:	f000 f821 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	490a      	ldr	r1, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1cc>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1d0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe f94a 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40022000 	.word	0x40022000
 8003038:	40021000 	.word	0x40021000
 800303c:	08006a8c 	.word	0x08006a8c
 8003040:	20000000 	.word	0x20000000
 8003044:	20000004 	.word	0x20000004

08003048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d002      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x30>
 8003072:	2b08      	cmp	r3, #8
 8003074:	d003      	beq.n	800307e <HAL_RCC_GetSysClockFreq+0x36>
 8003076:	e027      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800307a:	613b      	str	r3, [r7, #16]
      break;
 800307c:	e027      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	0c9b      	lsrs	r3, r3, #18
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0c5b      	lsrs	r3, r3, #17
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030aa:	fb03 f202 	mul.w	r2, r3, r2
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e004      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	613b      	str	r3, [r7, #16]
      break;
 80030c6:	e002      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ca:	613b      	str	r3, [r7, #16]
      break;
 80030cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ce:	693b      	ldr	r3, [r7, #16]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	08006aa4 	.word	0x08006aa4
 80030e8:	08006ab4 	.word	0x08006ab4
 80030ec:	003d0900 	.word	0x003d0900

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_RCC_GetHCLKFreq+0x10>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003108:	f7ff fff2 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08006a9c 	.word	0x08006a9c

0800312c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <RCC_Delay+0x34>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <RCC_Delay+0x38>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a5b      	lsrs	r3, r3, #9
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003148:	bf00      	nop
  }
  while (Delay --);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	60fa      	str	r2, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <RCC_Delay+0x1c>
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	20000000 	.word	0x20000000
 8003164:	10624dd3 	.word	0x10624dd3

08003168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e076      	b.n	8003268 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318a:	d009      	beq.n	80031a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	e005      	b.n	80031a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fed8 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	0c1a      	lsrs	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f002 0204 	and.w	r2, r2, #4
 8003246:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003256:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_SPI_Transmit+0x22>
 800328e:	2302      	movs	r3, #2
 8003290:	e12d      	b.n	80034ee <HAL_SPI_Transmit+0x27e>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800329a:	f7fe f851 	bl	8001340 <HAL_GetTick>
 800329e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d002      	beq.n	80032b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032b4:	e116      	b.n	80034e4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_Transmit+0x52>
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c6:	e10d      	b.n	80034e4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2203      	movs	r2, #3
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d10f      	bne.n	8003330 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800332e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d007      	beq.n	800334e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003356:	d14f      	bne.n	80033f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_SPI_Transmit+0xf6>
 8003360:	8afb      	ldrh	r3, [r7, #22]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d142      	bne.n	80033ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	1c9a      	adds	r2, r3, #2
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800338a:	e02f      	b.n	80033ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d112      	bne.n	80033c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80033be:	e015      	b.n	80033ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c0:	f7fd ffbe 	bl	8001340 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d803      	bhi.n	80033d8 <HAL_SPI_Transmit+0x168>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Transmit+0x16e>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033ea:	e07b      	b.n	80034e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ca      	bne.n	800338c <HAL_SPI_Transmit+0x11c>
 80033f6:	e050      	b.n	800349a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_SPI_Transmit+0x196>
 8003400:	8afb      	ldrh	r3, [r7, #22]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d144      	bne.n	8003490 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800342c:	e030      	b.n	8003490 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d113      	bne.n	8003464 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	86da      	strh	r2, [r3, #54]	; 0x36
 8003462:	e015      	b.n	8003490 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003464:	f7fd ff6c 	bl	8001340 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d803      	bhi.n	800347c <HAL_SPI_Transmit+0x20c>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d102      	bne.n	8003482 <HAL_SPI_Transmit+0x212>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800348e:	e029      	b.n	80034e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1c9      	bne.n	800342e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8b2 	bl	8003608 <SPI_EndRxTxTransaction>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e003      	b.n	80034e4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003508:	f7fd ff1a 	bl	8001340 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4413      	add	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003518:	f7fd ff12 	bl	8001340 <HAL_GetTick>
 800351c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	015b      	lsls	r3, r3, #5
 8003524:	0d1b      	lsrs	r3, r3, #20
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352e:	e054      	b.n	80035da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d050      	beq.n	80035da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003538:	f7fd ff02 	bl	8001340 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	429a      	cmp	r2, r3
 8003546:	d902      	bls.n	800354e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d13d      	bne.n	80035ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800355c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003566:	d111      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003570:	d004      	beq.n	800357c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d107      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003594:	d10f      	bne.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e017      	b.n	80035fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d19b      	bne.n	8003530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000000 	.word	0x20000000

08003608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff6a 	bl	80034f8 <SPI_WaitFlagStateUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e000      	b.n	800363c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <bmp280_read_calib_>:
#include "bmp280.h"
#include "math.h"
// 读取校准系数子函数
HAL_StatusTypeDef bmp280_read_calib_(I2C_HandleTypeDef *hi2c, uint16_t MemAddress, uint16_t *value)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af04      	add	r7, sp, #16
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	460b      	mov	r3, r1
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	817b      	strh	r3, [r7, #10]
    uint8_t temp[2];
    if (HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), MemAddress, I2C_MEMADD_SIZE_8BIT, temp, 2, 5000) == HAL_OK) {
 8003652:	897a      	ldrh	r2, [r7, #10]
 8003654:	f241 3388 	movw	r3, #5000	; 0x1388
 8003658:	9302      	str	r3, [sp, #8]
 800365a:	2302      	movs	r3, #2
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2301      	movs	r3, #1
 8003666:	21ec      	movs	r1, #236	; 0xec
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7fe fb65 	bl	8001d38 <HAL_I2C_Mem_Read>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <bmp280_read_calib_+0x48>
        *value = (uint16_t)(((uint16_t)temp[1] << 8) | temp[0]);
 8003674:	7d7b      	ldrb	r3, [r7, #21]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	b21a      	sxth	r2, r3
 800367a:	7d3b      	ldrb	r3, [r7, #20]
 800367c:	b21b      	sxth	r3, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	b21b      	sxth	r3, r3
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	801a      	strh	r2, [r3, #0]
        return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <bmp280_read_calib_+0x4a>
    } else
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <bmp280_read_calib>:
// 读取校准系数
HAL_StatusTypeDef bmp280_read_calib(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
    bmp280_read_calib_(hi2c, BMP280_DIG_T1_LSB, (uint16_t *)&bmp280->dig_T1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	330c      	adds	r3, #12
 80036a4:	461a      	mov	r2, r3
 80036a6:	2188      	movs	r1, #136	; 0x88
 80036a8:	6838      	ldr	r0, [r7, #0]
 80036aa:	f7ff ffcb 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_T2_LSB, (uint16_t *)&bmp280->dig_T2);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	330e      	adds	r3, #14
 80036b2:	461a      	mov	r2, r3
 80036b4:	218a      	movs	r1, #138	; 0x8a
 80036b6:	6838      	ldr	r0, [r7, #0]
 80036b8:	f7ff ffc4 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_T3_LSB, (uint16_t *)&bmp280->dig_T3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3310      	adds	r3, #16
 80036c0:	461a      	mov	r2, r3
 80036c2:	218c      	movs	r1, #140	; 0x8c
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f7ff ffbd 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P1_LSB, (uint16_t *)&bmp280->dig_P1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3312      	adds	r3, #18
 80036ce:	461a      	mov	r2, r3
 80036d0:	218e      	movs	r1, #142	; 0x8e
 80036d2:	6838      	ldr	r0, [r7, #0]
 80036d4:	f7ff ffb6 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P2_LSB, (uint16_t *)&bmp280->dig_P2);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3314      	adds	r3, #20
 80036dc:	461a      	mov	r2, r3
 80036de:	2190      	movs	r1, #144	; 0x90
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f7ff ffaf 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P3_LSB, (uint16_t *)&bmp280->dig_P3);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3316      	adds	r3, #22
 80036ea:	461a      	mov	r2, r3
 80036ec:	2192      	movs	r1, #146	; 0x92
 80036ee:	6838      	ldr	r0, [r7, #0]
 80036f0:	f7ff ffa8 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P4_LSB, (uint16_t *)&bmp280->dig_P4);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3318      	adds	r3, #24
 80036f8:	461a      	mov	r2, r3
 80036fa:	2194      	movs	r1, #148	; 0x94
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f7ff ffa1 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P5_LSB, (uint16_t *)&bmp280->dig_P5);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	331a      	adds	r3, #26
 8003706:	461a      	mov	r2, r3
 8003708:	2196      	movs	r1, #150	; 0x96
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f7ff ff9a 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P6_LSB, (uint16_t *)&bmp280->dig_P6);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	331c      	adds	r3, #28
 8003714:	461a      	mov	r2, r3
 8003716:	2198      	movs	r1, #152	; 0x98
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f7ff ff93 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P7_LSB, (uint16_t *)&bmp280->dig_P7);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	331e      	adds	r3, #30
 8003722:	461a      	mov	r2, r3
 8003724:	219a      	movs	r1, #154	; 0x9a
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	f7ff ff8c 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P8_LSB, (uint16_t *)&bmp280->dig_P8);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3320      	adds	r3, #32
 8003730:	461a      	mov	r2, r3
 8003732:	219c      	movs	r1, #156	; 0x9c
 8003734:	6838      	ldr	r0, [r7, #0]
 8003736:	f7ff ff85 	bl	8003644 <bmp280_read_calib_>
    bmp280_read_calib_(hi2c, BMP280_DIG_P9_LSB, (uint16_t *)&bmp280->dig_P9);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3322      	adds	r3, #34	; 0x22
 800373e:	461a      	mov	r2, r3
 8003740:	219e      	movs	r1, #158	; 0x9e
 8003742:	6838      	ldr	r0, [r7, #0]
 8003744:	f7ff ff7e 	bl	8003644 <bmp280_read_calib_>
    return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <bmp280_init>:
// bmp280初始化
HAL_StatusTypeDef bmp280_init(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af04      	add	r7, sp, #16
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
    uint8_t temp = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &temp, 1, 5000);
 8003760:	f241 3388 	movw	r3, #5000	; 0x1388
 8003764:	9302      	str	r3, [sp, #8]
 8003766:	2301      	movs	r3, #1
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	f107 030f 	add.w	r3, r7, #15
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2301      	movs	r3, #1
 8003772:	22d0      	movs	r2, #208	; 0xd0
 8003774:	21ec      	movs	r1, #236	; 0xec
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f7fe fade 	bl	8001d38 <HAL_I2C_Mem_Read>
    if (temp != 0x58) // 未识别到芯片，报错
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b58      	cmp	r3, #88	; 0x58
 8003780:	d001      	beq.n	8003786 <bmp280_init+0x34>
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e053      	b.n	800382e <bmp280_init+0xdc>
    // 识别到芯片，先重置
    temp = 0xB6;
 8003786:	23b6      	movs	r3, #182	; 0xb6
 8003788:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_RESET, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 800378a:	f242 7310 	movw	r3, #10000	; 0x2710
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2301      	movs	r3, #1
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	f107 030f 	add.w	r3, r7, #15
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2301      	movs	r3, #1
 800379c:	22e0      	movs	r2, #224	; 0xe0
 800379e:	21ec      	movs	r1, #236	; 0xec
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f7fe f9cf 	bl	8001b44 <HAL_I2C_Mem_Write>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <bmp280_init+0x5e>
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e03e      	b.n	800382e <bmp280_init+0xdc>
            break;
        case 5:
            temp = BMP280_MODE_5_CTRL;
            break;
        case 6:
            temp = BMP280_MODE_6_CTRL;
 80037b0:	2357      	movs	r3, #87	; 0x57
 80037b2:	73fb      	strb	r3, [r7, #15]
            break;
 80037b4:	bf00      	nop
        default:
            return HAL_ERROR;
    }
    if (HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 80037b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	2301      	movs	r3, #1
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	f107 030f 	add.w	r3, r7, #15
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2301      	movs	r3, #1
 80037c8:	22f4      	movs	r2, #244	; 0xf4
 80037ca:	21ec      	movs	r1, #236	; 0xec
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f7fe f9b9 	bl	8001b44 <HAL_I2C_Mem_Write>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <bmp280_init+0x8a>
        return HAL_ERROR; // 写入失败
 80037d8:	2301      	movs	r3, #1
 80037da:	e028      	b.n	800382e <bmp280_init+0xdc>
    HAL_Delay(100);
 80037dc:	2064      	movs	r0, #100	; 0x64
 80037de:	f7fd fdb9 	bl	8001354 <HAL_Delay>
            break;
        case 5:
            temp = BMP280_MODE_5_CONFIG;
            break;
        case 6:
            temp = BMP280_MODE_6_CONFIG;
 80037e2:	2314      	movs	r3, #20
 80037e4:	73fb      	strb	r3, [r7, #15]
            break;
 80037e6:	bf00      	nop
        default:
            return HAL_ERROR;
    }
    if (HAL_I2C_Mem_Write(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10000) != HAL_OK)
 80037e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80037ec:	9302      	str	r3, [sp, #8]
 80037ee:	2301      	movs	r3, #1
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	f107 030f 	add.w	r3, r7, #15
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2301      	movs	r3, #1
 80037fa:	22f5      	movs	r2, #245	; 0xf5
 80037fc:	21ec      	movs	r1, #236	; 0xec
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f7fe f9a0 	bl	8001b44 <HAL_I2C_Mem_Write>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <bmp280_init+0xbc>
        return HAL_ERROR; // 写入失败
 800380a:	2301      	movs	r3, #1
 800380c:	e00f      	b.n	800382e <bmp280_init+0xdc>
    HAL_Delay(100);
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	f7fd fda0 	bl	8001354 <HAL_Delay>
    if (bmp280_read_calib(bmp280, hi2c) != HAL_OK)
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff3d 	bl	8003696 <bmp280_read_calib>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <bmp280_init+0xd4>
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e003      	b.n	800382e <bmp280_init+0xdc>
    HAL_Delay(100);
 8003826:	2064      	movs	r0, #100	; 0x64
 8003828:	f7fd fd94 	bl	8001354 <HAL_Delay>
    return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <bmp280_compensate_T_int32>:
// 转换温度采样值
float bmp280_compensate_T_int32(BMP280 *bmp280, int32_t t_raw)
{
 8003838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800383c:	b088      	sub	sp, #32
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
    double var1, var2, T;
    var1           = (((double)t_raw) / 16384.0f - ((double)bmp280->dig_T1) / 1024.0f) * ((double)bmp280->dig_T2);
 8003844:	6838      	ldr	r0, [r7, #0]
 8003846:	f7fc fe49 	bl	80004dc <__aeabi_i2d>
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	4b57      	ldr	r3, [pc, #348]	; (80039ac <bmp280_compensate_T_int32+0x174>)
 8003850:	f7fc ffd8 	bl	8000804 <__aeabi_ddiv>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	899b      	ldrh	r3, [r3, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe2b 	bl	80004bc <__aeabi_ui2d>
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <bmp280_compensate_T_int32+0x178>)
 800386c:	f7fc ffca 	bl	8000804 <__aeabi_ddiv>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	f7fc fce2 	bl	8000240 <__aeabi_dsub>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4614      	mov	r4, r2
 8003882:	461d      	mov	r5, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fc fe26 	bl	80004dc <__aeabi_i2d>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4620      	mov	r0, r4
 8003896:	4629      	mov	r1, r5
 8003898:	f7fc fe8a 	bl	80005b0 <__aeabi_dmul>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2           = ((((double)t_raw) / 131072.0f - ((double)bmp280->dig_T1) / 8192.0f) * (((double)t_raw) / 131072.0f - ((double)bmp280->dig_T1) / 8192.0f)) * ((double)bmp280->dig_T3);
 80038a4:	6838      	ldr	r0, [r7, #0]
 80038a6:	f7fc fe19 	bl	80004dc <__aeabi_i2d>
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80038b2:	f7fc ffa7 	bl	8000804 <__aeabi_ddiv>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4614      	mov	r4, r2
 80038bc:	461d      	mov	r5, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	899b      	ldrh	r3, [r3, #12]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fdfa 	bl	80004bc <__aeabi_ui2d>
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <bmp280_compensate_T_int32+0x17c>)
 80038ce:	f7fc ff99 	bl	8000804 <__aeabi_ddiv>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4620      	mov	r0, r4
 80038d8:	4629      	mov	r1, r5
 80038da:	f7fc fcb1 	bl	8000240 <__aeabi_dsub>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4614      	mov	r4, r2
 80038e4:	461d      	mov	r5, r3
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	f7fc fdf8 	bl	80004dc <__aeabi_i2d>
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80038f4:	f7fc ff86 	bl	8000804 <__aeabi_ddiv>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4690      	mov	r8, r2
 80038fe:	4699      	mov	r9, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	899b      	ldrh	r3, [r3, #12]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fc fdd9 	bl	80004bc <__aeabi_ui2d>
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <bmp280_compensate_T_int32+0x17c>)
 8003910:	f7fc ff78 	bl	8000804 <__aeabi_ddiv>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4640      	mov	r0, r8
 800391a:	4649      	mov	r1, r9
 800391c:	f7fc fc90 	bl	8000240 <__aeabi_dsub>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4620      	mov	r0, r4
 8003926:	4629      	mov	r1, r5
 8003928:	f7fc fe42 	bl	80005b0 <__aeabi_dmul>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4614      	mov	r4, r2
 8003932:	461d      	mov	r5, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fdce 	bl	80004dc <__aeabi_i2d>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	f7fc fe32 	bl	80005b0 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	e9c7 2304 	strd	r2, r3, [r7, #16]
    bmp280->t_fine = (int32_t)(var1 + var2);
 8003954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800395c:	f7fc fc72 	bl	8000244 <__adddf3>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	f7fd f8d2 	bl	8000b10 <__aeabi_d2iz>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]
    T              = (var1 + var2) / 5120.0f;
 8003972:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003976:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800397a:	f7fc fc63 	bl	8000244 <__adddf3>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <bmp280_compensate_T_int32+0x180>)
 800398c:	f7fc ff3a 	bl	8000804 <__aeabi_ddiv>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return T;
 8003998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800399c:	f7fd f8e0 	bl	8000b60 <__aeabi_d2f>
 80039a0:	4603      	mov	r3, r0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039ac:	40d00000 	.word	0x40d00000
 80039b0:	40900000 	.word	0x40900000
 80039b4:	40c00000 	.word	0x40c00000
 80039b8:	40b40000 	.word	0x40b40000

080039bc <bmp280_getTemprature>:
    p    = p / 100.0f;
    return p;
}
// 返回实际温度（℃）
float bmp280_getTemprature(BMP280 *bmp280, I2C_HandleTypeDef *hi2c)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
    uint8_t temp[3];
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_MSB, I2C_MEMADD_SIZE_8BIT, &temp[0], 1, 1000);
 80039c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ca:	9302      	str	r3, [sp, #8]
 80039cc:	2301      	movs	r3, #1
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	f107 0308 	add.w	r3, r7, #8
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2301      	movs	r3, #1
 80039d8:	22fa      	movs	r2, #250	; 0xfa
 80039da:	21ec      	movs	r1, #236	; 0xec
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f7fe f9ab 	bl	8001d38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_LSB, I2C_MEMADD_SIZE_8BIT, &temp[1], 1, 1000);
 80039e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	2301      	movs	r3, #1
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	3301      	adds	r3, #1
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2301      	movs	r3, #1
 80039f6:	22fb      	movs	r2, #251	; 0xfb
 80039f8:	21ec      	movs	r1, #236	; 0xec
 80039fa:	6838      	ldr	r0, [r7, #0]
 80039fc:	f7fe f99c 	bl	8001d38 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(hi2c, (BMP280_ADDRESS_READ << 1), BMP280_TEMPERATURE_XLSB, I2C_MEMADD_SIZE_8BIT, &temp[2], 1, 1000);
 8003a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	2301      	movs	r3, #1
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	3302      	adds	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2301      	movs	r3, #1
 8003a14:	22fc      	movs	r2, #252	; 0xfc
 8003a16:	21ec      	movs	r1, #236	; 0xec
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f7fe f98d 	bl	8001d38 <HAL_I2C_Mem_Read>
    int32_t t_raw    = (((int32_t)temp[0]) << 12) | (((int32_t)temp[1]) << 4) | (((int32_t)temp[2]) >> 4);
 8003a1e:	7a3b      	ldrb	r3, [r7, #8]
 8003a20:	031a      	lsls	r2, r3, #12
 8003a22:	7a7b      	ldrb	r3, [r7, #9]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4313      	orrs	r3, r2
 8003a28:	7aba      	ldrb	r2, [r7, #10]
 8003a2a:	0912      	lsrs	r2, r2, #4
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
    bmp280->t_result = bmp280_compensate_T_int32(bmp280, t_raw);
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff feff 	bl	8003838 <bmp280_compensate_T_int32>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]
    return bmp280->t_result;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <OLED_WR_Byte>:
//向SSD1306写入一个字节
//dat:要写入的数据/命令
//cmd:数据/命令标志 0，表示命令；1，表示数据

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{				  
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	460a      	mov	r2, r1
 8003a56:	71fb      	strb	r3, [r7, #7]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 8003a5c:	79bb      	ldrb	r3, [r7, #6]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set();//命令/数据标志位置为1，则表示传送的是命令字节
 8003a62:	2201      	movs	r2, #1
 8003a64:	2102      	movs	r1, #2
 8003a66:	4812      	ldr	r0, [pc, #72]	; (8003ab0 <OLED_WR_Byte+0x64>)
 8003a68:	f7fd ff10 	bl	800188c <HAL_GPIO_WritePin>
 8003a6c:	e004      	b.n	8003a78 <OLED_WR_Byte+0x2c>
	}
	  
	else
	OLED_DC_Clr();//命令/数据标志位置为0，则表示传送的是数据字节		  
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2102      	movs	r1, #2
 8003a72:	480f      	ldr	r0, [pc, #60]	; (8003ab0 <OLED_WR_Byte+0x64>)
 8003a74:	f7fd ff0a 	bl	800188c <HAL_GPIO_WritePin>
	  OLED_CS_Clr();//片选信号为低，表示选中OLED
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a7e:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <OLED_WR_Byte+0x68>)
 8003a80:	f7fd ff04 	bl	800188c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,&dat,1,1000);//oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 8003a84:	1df9      	adds	r1, r7, #7
 8003a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <OLED_WR_Byte+0x6c>)
 8003a8e:	f7ff fbef 	bl	8003270 <HAL_SPI_Transmit>
	  OLED_CS_Set();
 8003a92:	2201      	movs	r2, #1
 8003a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a98:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <OLED_WR_Byte+0x68>)
 8003a9a:	f7fd fef7 	bl	800188c <HAL_GPIO_WritePin>
	  OLED_DC_Set();	  
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4803      	ldr	r0, [pc, #12]	; (8003ab0 <OLED_WR_Byte+0x64>)
 8003aa4:	f7fd fef2 	bl	800188c <HAL_GPIO_WritePin>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40010c00 	.word	0x40010c00
 8003ab4:	40011c00 	.word	0x40011c00
 8003ab8:	20000250 	.word	0x20000250

08003abc <OLED_Set_Pos>:

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	71fb      	strb	r3, [r7, #7]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	3b50      	subs	r3, #80	; 0x50
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ffb9 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	3302      	adds	r3, #2
 8003ade:	111b      	asrs	r3, r3, #4
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ffaa 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	3302      	adds	r3, #2
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ffa0 	bl	8003a4c <OLED_WR_Byte>
}    	  
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <OLED_Clear>:
/**
 * @brief 清屏
 * 
 */
void OLED_Clear(void)  
{  
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	71fb      	strb	r3, [r7, #7]
 8003b1e:	e01f      	b.n	8003b60 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	3b50      	subs	r3, #80	; 0x50
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff8f 	bl	8003a4c <OLED_WR_Byte>
		OLED_WR_Byte (0x02,OLED_CMD);      //设置起始列低地址
 8003b2e:	2100      	movs	r1, #0
 8003b30:	2002      	movs	r0, #2
 8003b32:	f7ff ff8b 	bl	8003a4c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置起始列高地址   
 8003b36:	2100      	movs	r1, #0
 8003b38:	2010      	movs	r0, #16
 8003b3a:	f7ff ff87 	bl	8003a4c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8003b3e:	2300      	movs	r3, #0
 8003b40:	71bb      	strb	r3, [r7, #6]
 8003b42:	e006      	b.n	8003b52 <OLED_Clear+0x3e>
 8003b44:	2101      	movs	r1, #1
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7ff ff80 	bl	8003a4c <OLED_WR_Byte>
 8003b4c:	79bb      	ldrb	r3, [r7, #6]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	71bb      	strb	r3, [r7, #6]
 8003b52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	daf4      	bge.n	8003b44 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	71fb      	strb	r3, [r7, #7]
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	2b07      	cmp	r3, #7
 8003b64:	d9dc      	bls.n	8003b20 <OLED_Clear+0xc>
	} //更新显示
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <OLED_ShowChar>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 显示的字符
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr)
{      	
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	71bb      	strb	r3, [r7, #6]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 8003b82:	2300      	movs	r3, #0
 8003b84:	73bb      	strb	r3, [r7, #14]
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值			
 8003b8a:	797b      	ldrb	r3, [r7, #5]
 8003b8c:	3b20      	subs	r3, #32
 8003b8e:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	da04      	bge.n	8003ba2 <OLED_ShowChar+0x32>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	79bb      	ldrb	r3, [r7, #6]
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 8003ba2:	79ba      	ldrb	r2, [r7, #6]
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff87 	bl	8003abc <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	e00c      	b.n	8003bce <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	011a      	lsls	r2, r3, #4
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <OLED_ShowChar+0xa8>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff42 	bl	8003a4c <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b07      	cmp	r3, #7
 8003bd2:	d9ef      	bls.n	8003bb4 <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 8003bd4:	79bb      	ldrb	r3, [r7, #6]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff6c 	bl	8003abc <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e00d      	b.n	8003c06 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8003bea:	7bbb      	ldrb	r3, [r7, #14]
 8003bec:	011a      	lsls	r2, r3, #4
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <OLED_ShowChar+0xa8>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff26 	bl	8003a4c <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	3301      	adds	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b07      	cmp	r3, #7
 8003c0a:	d9ee      	bls.n	8003bea <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	08006ab8 	.word	0x08006ab8

08003c1c <OLED_ShowString>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 单个字符
 */
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	603a      	str	r2, [r7, #0]
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8003c30:	e016      	b.n	8003c60 <OLED_ShowString+0x44>
	{		OLED_ShowChar(x,y,chr[j]);
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	79b9      	ldrb	r1, [r7, #6]
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff96 	bl	8003b70 <OLED_ShowChar>
			x+=8;
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	3308      	adds	r3, #8
 8003c48:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b78      	cmp	r3, #120	; 0x78
 8003c4e:	d904      	bls.n	8003c5a <OLED_ShowString+0x3e>
 8003c50:	2300      	movs	r3, #0
 8003c52:	71fb      	strb	r3, [r7, #7]
 8003c54:	79bb      	ldrb	r3, [r7, #6]
 8003c56:	3302      	adds	r3, #2
 8003c58:	71bb      	strb	r3, [r7, #6]
			j++;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e2      	bne.n	8003c32 <OLED_ShowString+0x16>
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <OLED_Init>:
/**
 * @brief 初始化SSD1306
 * 
 */
void OLED_Init(void)
{ 	
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
	
	OLED_RST_Clr();
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2120      	movs	r1, #32
 8003c80:	4841      	ldr	r0, [pc, #260]	; (8003d88 <OLED_Init+0x110>)
 8003c82:	f7fd fe03 	bl	800188c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8003c86:	20c8      	movs	r0, #200	; 0xc8
 8003c88:	f7fd fb64 	bl	8001354 <HAL_Delay>
	OLED_RST_Set(); 
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2120      	movs	r1, #32
 8003c90:	483d      	ldr	r0, [pc, #244]	; (8003d88 <OLED_Init+0x110>)
 8003c92:	f7fd fdfb 	bl	800188c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8003c96:	2100      	movs	r1, #0
 8003c98:	20ae      	movs	r0, #174	; 0xae
 8003c9a:	f7ff fed7 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//---set low column address
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2002      	movs	r0, #2
 8003ca2:	f7ff fed3 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2010      	movs	r0, #16
 8003caa:	f7ff fecf 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2040      	movs	r0, #64	; 0x40
 8003cb2:	f7ff fecb 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2081      	movs	r0, #129	; 0x81
 8003cba:	f7ff fec7 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	20cf      	movs	r0, #207	; 0xcf
 8003cc2:	f7ff fec3 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0Xa0左右反置 0Xa1正常
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	20a1      	movs	r0, #161	; 0xa1
 8003cca:	f7ff febf 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0Xc0上下反置 0Xc8正常
 8003cce:	2100      	movs	r1, #0
 8003cd0:	20c8      	movs	r0, #200	; 0xc8
 8003cd2:	f7ff febb 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	20a6      	movs	r0, #166	; 0xa6
 8003cda:	f7ff feb7 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8003cde:	2100      	movs	r1, #0
 8003ce0:	20a8      	movs	r0, #168	; 0xa8
 8003ce2:	f7ff feb3 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	203f      	movs	r0, #63	; 0x3f
 8003cea:	f7ff feaf 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	20d3      	movs	r0, #211	; 0xd3
 8003cf2:	f7ff feab 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7ff fea7 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8003cfe:	2100      	movs	r1, #0
 8003d00:	20d5      	movs	r0, #213	; 0xd5
 8003d02:	f7ff fea3 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8003d06:	2100      	movs	r1, #0
 8003d08:	2080      	movs	r0, #128	; 0x80
 8003d0a:	f7ff fe9f 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8003d0e:	2100      	movs	r1, #0
 8003d10:	20d9      	movs	r0, #217	; 0xd9
 8003d12:	f7ff fe9b 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8003d16:	2100      	movs	r1, #0
 8003d18:	20f1      	movs	r0, #241	; 0xf1
 8003d1a:	f7ff fe97 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8003d1e:	2100      	movs	r1, #0
 8003d20:	20da      	movs	r0, #218	; 0xda
 8003d22:	f7ff fe93 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8003d26:	2100      	movs	r1, #0
 8003d28:	2012      	movs	r0, #18
 8003d2a:	f7ff fe8f 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8003d2e:	2100      	movs	r1, #0
 8003d30:	20db      	movs	r0, #219	; 0xdb
 8003d32:	f7ff fe8b 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 8003d36:	2100      	movs	r1, #0
 8003d38:	2040      	movs	r0, #64	; 0x40
 8003d3a:	f7ff fe87 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2020      	movs	r0, #32
 8003d42:	f7ff fe83 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 8003d46:	2100      	movs	r1, #0
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f7ff fe7f 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8003d4e:	2100      	movs	r1, #0
 8003d50:	208d      	movs	r0, #141	; 0x8d
 8003d52:	f7ff fe7b 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 8003d56:	2100      	movs	r1, #0
 8003d58:	2014      	movs	r0, #20
 8003d5a:	f7ff fe77 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8003d5e:	2100      	movs	r1, #0
 8003d60:	20a4      	movs	r0, #164	; 0xa4
 8003d62:	f7ff fe73 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 8003d66:	2100      	movs	r1, #0
 8003d68:	20a6      	movs	r0, #166	; 0xa6
 8003d6a:	f7ff fe6f 	bl	8003a4c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8003d6e:	2100      	movs	r1, #0
 8003d70:	20af      	movs	r0, #175	; 0xaf
 8003d72:	f7ff fe6b 	bl	8003a4c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 8003d76:	2100      	movs	r1, #0
 8003d78:	20af      	movs	r0, #175	; 0xaf
 8003d7a:	f7ff fe67 	bl	8003a4c <OLED_WR_Byte>
	OLED_Clear();
 8003d7e:	f7ff fec9 	bl	8003b14 <OLED_Clear>
}  
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40011000 	.word	0x40011000

08003d8c <__cvt>:
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d92:	461f      	mov	r7, r3
 8003d94:	bfbb      	ittet	lt
 8003d96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	461f      	movlt	r7, r3
 8003d9c:	2300      	movge	r3, #0
 8003d9e:	232d      	movlt	r3, #45	; 0x2d
 8003da0:	b088      	sub	sp, #32
 8003da2:	4614      	mov	r4, r2
 8003da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003da6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003da8:	7013      	strb	r3, [r2, #0]
 8003daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003db0:	f023 0820 	bic.w	r8, r3, #32
 8003db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003db8:	d005      	beq.n	8003dc6 <__cvt+0x3a>
 8003dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dbe:	d100      	bne.n	8003dc2 <__cvt+0x36>
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e000      	b.n	8003dc8 <__cvt+0x3c>
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	aa07      	add	r2, sp, #28
 8003dca:	9204      	str	r2, [sp, #16]
 8003dcc:	aa06      	add	r2, sp, #24
 8003dce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dd2:	e9cd 3500 	strd	r3, r5, [sp]
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	463b      	mov	r3, r7
 8003dda:	f000 fe71 	bl	8004ac0 <_dtoa_r>
 8003dde:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003de2:	4606      	mov	r6, r0
 8003de4:	d102      	bne.n	8003dec <__cvt+0x60>
 8003de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003de8:	07db      	lsls	r3, r3, #31
 8003dea:	d522      	bpl.n	8003e32 <__cvt+0xa6>
 8003dec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003df0:	eb06 0905 	add.w	r9, r6, r5
 8003df4:	d110      	bne.n	8003e18 <__cvt+0x8c>
 8003df6:	7833      	ldrb	r3, [r6, #0]
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	d10a      	bne.n	8003e12 <__cvt+0x86>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4620      	mov	r0, r4
 8003e02:	4639      	mov	r1, r7
 8003e04:	f7fc fe3c 	bl	8000a80 <__aeabi_dcmpeq>
 8003e08:	b918      	cbnz	r0, 8003e12 <__cvt+0x86>
 8003e0a:	f1c5 0501 	rsb	r5, r5, #1
 8003e0e:	f8ca 5000 	str.w	r5, [sl]
 8003e12:	f8da 3000 	ldr.w	r3, [sl]
 8003e16:	4499      	add	r9, r3
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4639      	mov	r1, r7
 8003e20:	f7fc fe2e 	bl	8000a80 <__aeabi_dcmpeq>
 8003e24:	b108      	cbz	r0, 8003e2a <__cvt+0x9e>
 8003e26:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e2a:	2230      	movs	r2, #48	; 0x30
 8003e2c:	9b07      	ldr	r3, [sp, #28]
 8003e2e:	454b      	cmp	r3, r9
 8003e30:	d307      	bcc.n	8003e42 <__cvt+0xb6>
 8003e32:	4630      	mov	r0, r6
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e38:	1b9b      	subs	r3, r3, r6
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	b008      	add	sp, #32
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	9107      	str	r1, [sp, #28]
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e7f0      	b.n	8003e2c <__cvt+0xa0>

08003e4a <__exponent>:
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	f803 2b02 	strb.w	r2, [r3], #2
 8003e54:	bfb6      	itet	lt
 8003e56:	222d      	movlt	r2, #45	; 0x2d
 8003e58:	222b      	movge	r2, #43	; 0x2b
 8003e5a:	4249      	neglt	r1, r1
 8003e5c:	2909      	cmp	r1, #9
 8003e5e:	7042      	strb	r2, [r0, #1]
 8003e60:	dd2a      	ble.n	8003eb8 <__exponent+0x6e>
 8003e62:	f10d 0207 	add.w	r2, sp, #7
 8003e66:	4617      	mov	r7, r2
 8003e68:	260a      	movs	r6, #10
 8003e6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e6e:	4694      	mov	ip, r2
 8003e70:	fb06 1415 	mls	r4, r6, r5, r1
 8003e74:	3430      	adds	r4, #48	; 0x30
 8003e76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	2c63      	cmp	r4, #99	; 0x63
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e84:	dcf1      	bgt.n	8003e6a <__exponent+0x20>
 8003e86:	3130      	adds	r1, #48	; 0x30
 8003e88:	f1ac 0402 	sub.w	r4, ip, #2
 8003e8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e90:	4622      	mov	r2, r4
 8003e92:	1c41      	adds	r1, r0, #1
 8003e94:	42ba      	cmp	r2, r7
 8003e96:	d30a      	bcc.n	8003eae <__exponent+0x64>
 8003e98:	f10d 0209 	add.w	r2, sp, #9
 8003e9c:	eba2 020c 	sub.w	r2, r2, ip
 8003ea0:	42bc      	cmp	r4, r7
 8003ea2:	bf88      	it	hi
 8003ea4:	2200      	movhi	r2, #0
 8003ea6:	4413      	add	r3, r2
 8003ea8:	1a18      	subs	r0, r3, r0
 8003eaa:	b003      	add	sp, #12
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003eb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003eb6:	e7ed      	b.n	8003e94 <__exponent+0x4a>
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	3130      	adds	r1, #48	; 0x30
 8003ebc:	7083      	strb	r3, [r0, #2]
 8003ebe:	70c1      	strb	r1, [r0, #3]
 8003ec0:	1d03      	adds	r3, r0, #4
 8003ec2:	e7f1      	b.n	8003ea8 <__exponent+0x5e>

08003ec4 <_printf_float>:
 8003ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec8:	b091      	sub	sp, #68	; 0x44
 8003eca:	460c      	mov	r4, r1
 8003ecc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	461f      	mov	r7, r3
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	f000 fce5 	bl	80048a4 <_localeconv_r>
 8003eda:	6803      	ldr	r3, [r0, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee0:	f7fc f9a2 	bl	8000228 <strlen>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8003ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8003eec:	900a      	str	r0, [sp, #40]	; 0x28
 8003eee:	3307      	adds	r3, #7
 8003ef0:	f023 0307 	bic.w	r3, r3, #7
 8003ef4:	f103 0208 	add.w	r2, r3, #8
 8003ef8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003efc:	f8d4 b000 	ldr.w	fp, [r4]
 8003f00:	f8c8 2000 	str.w	r2, [r8]
 8003f04:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003f08:	4652      	mov	r2, sl
 8003f0a:	4643      	mov	r3, r8
 8003f0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f10:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1a:	4650      	mov	r0, sl
 8003f1c:	4b9c      	ldr	r3, [pc, #624]	; (8004190 <_printf_float+0x2cc>)
 8003f1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f20:	f7fc fde0 	bl	8000ae4 <__aeabi_dcmpun>
 8003f24:	bb70      	cbnz	r0, 8003f84 <_printf_float+0xc0>
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	4b98      	ldr	r3, [pc, #608]	; (8004190 <_printf_float+0x2cc>)
 8003f2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f30:	f7fc fdba 	bl	8000aa8 <__aeabi_dcmple>
 8003f34:	bb30      	cbnz	r0, 8003f84 <_printf_float+0xc0>
 8003f36:	2200      	movs	r2, #0
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	f7fc fda9 	bl	8000a94 <__aeabi_dcmplt>
 8003f42:	b110      	cbz	r0, 8003f4a <_printf_float+0x86>
 8003f44:	232d      	movs	r3, #45	; 0x2d
 8003f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4a:	4a92      	ldr	r2, [pc, #584]	; (8004194 <_printf_float+0x2d0>)
 8003f4c:	4b92      	ldr	r3, [pc, #584]	; (8004198 <_printf_float+0x2d4>)
 8003f4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f52:	bf94      	ite	ls
 8003f54:	4690      	movls	r8, r2
 8003f56:	4698      	movhi	r8, r3
 8003f58:	2303      	movs	r3, #3
 8003f5a:	f04f 0a00 	mov.w	sl, #0
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	f02b 0304 	bic.w	r3, fp, #4
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	4633      	mov	r3, r6
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	9700      	str	r7, [sp, #0]
 8003f6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f70:	f000 f9d6 	bl	8004320 <_printf_common>
 8003f74:	3001      	adds	r0, #1
 8003f76:	f040 8090 	bne.w	800409a <_printf_float+0x1d6>
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7e:	b011      	add	sp, #68	; 0x44
 8003f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f84:	4652      	mov	r2, sl
 8003f86:	4643      	mov	r3, r8
 8003f88:	4650      	mov	r0, sl
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	f7fc fdaa 	bl	8000ae4 <__aeabi_dcmpun>
 8003f90:	b148      	cbz	r0, 8003fa6 <_printf_float+0xe2>
 8003f92:	f1b8 0f00 	cmp.w	r8, #0
 8003f96:	bfb8      	it	lt
 8003f98:	232d      	movlt	r3, #45	; 0x2d
 8003f9a:	4a80      	ldr	r2, [pc, #512]	; (800419c <_printf_float+0x2d8>)
 8003f9c:	bfb8      	it	lt
 8003f9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <_printf_float+0x2dc>)
 8003fa4:	e7d3      	b.n	8003f4e <_printf_float+0x8a>
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	d142      	bne.n	8004036 <_printf_float+0x172>
 8003fb0:	2306      	movs	r3, #6
 8003fb2:	6063      	str	r3, [r4, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	9206      	str	r2, [sp, #24]
 8003fb8:	aa0e      	add	r2, sp, #56	; 0x38
 8003fba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003fbe:	aa0d      	add	r2, sp, #52	; 0x34
 8003fc0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003fc4:	9203      	str	r2, [sp, #12]
 8003fc6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003fca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	4652      	mov	r2, sl
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	4643      	mov	r3, r8
 8003fda:	910b      	str	r1, [sp, #44]	; 0x2c
 8003fdc:	f7ff fed6 	bl	8003d8c <__cvt>
 8003fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fe2:	4680      	mov	r8, r0
 8003fe4:	2947      	cmp	r1, #71	; 0x47
 8003fe6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003fe8:	d108      	bne.n	8003ffc <_printf_float+0x138>
 8003fea:	1cc8      	adds	r0, r1, #3
 8003fec:	db02      	blt.n	8003ff4 <_printf_float+0x130>
 8003fee:	6863      	ldr	r3, [r4, #4]
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	dd40      	ble.n	8004076 <_printf_float+0x1b2>
 8003ff4:	f1a9 0902 	sub.w	r9, r9, #2
 8003ff8:	fa5f f989 	uxtb.w	r9, r9
 8003ffc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004000:	d81f      	bhi.n	8004042 <_printf_float+0x17e>
 8004002:	464a      	mov	r2, r9
 8004004:	3901      	subs	r1, #1
 8004006:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800400a:	910d      	str	r1, [sp, #52]	; 0x34
 800400c:	f7ff ff1d 	bl	8003e4a <__exponent>
 8004010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004012:	4682      	mov	sl, r0
 8004014:	1813      	adds	r3, r2, r0
 8004016:	2a01      	cmp	r2, #1
 8004018:	6123      	str	r3, [r4, #16]
 800401a:	dc02      	bgt.n	8004022 <_printf_float+0x15e>
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	07d2      	lsls	r2, r2, #31
 8004020:	d501      	bpl.n	8004026 <_printf_float+0x162>
 8004022:	3301      	adds	r3, #1
 8004024:	6123      	str	r3, [r4, #16]
 8004026:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800402a:	2b00      	cmp	r3, #0
 800402c:	d09b      	beq.n	8003f66 <_printf_float+0xa2>
 800402e:	232d      	movs	r3, #45	; 0x2d
 8004030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004034:	e797      	b.n	8003f66 <_printf_float+0xa2>
 8004036:	2947      	cmp	r1, #71	; 0x47
 8004038:	d1bc      	bne.n	8003fb4 <_printf_float+0xf0>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ba      	bne.n	8003fb4 <_printf_float+0xf0>
 800403e:	2301      	movs	r3, #1
 8004040:	e7b7      	b.n	8003fb2 <_printf_float+0xee>
 8004042:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004046:	d118      	bne.n	800407a <_printf_float+0x1b6>
 8004048:	2900      	cmp	r1, #0
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	dd0b      	ble.n	8004066 <_printf_float+0x1a2>
 800404e:	6121      	str	r1, [r4, #16]
 8004050:	b913      	cbnz	r3, 8004058 <_printf_float+0x194>
 8004052:	6822      	ldr	r2, [r4, #0]
 8004054:	07d0      	lsls	r0, r2, #31
 8004056:	d502      	bpl.n	800405e <_printf_float+0x19a>
 8004058:	3301      	adds	r3, #1
 800405a:	440b      	add	r3, r1
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	f04f 0a00 	mov.w	sl, #0
 8004062:	65a1      	str	r1, [r4, #88]	; 0x58
 8004064:	e7df      	b.n	8004026 <_printf_float+0x162>
 8004066:	b913      	cbnz	r3, 800406e <_printf_float+0x1aa>
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	07d2      	lsls	r2, r2, #31
 800406c:	d501      	bpl.n	8004072 <_printf_float+0x1ae>
 800406e:	3302      	adds	r3, #2
 8004070:	e7f4      	b.n	800405c <_printf_float+0x198>
 8004072:	2301      	movs	r3, #1
 8004074:	e7f2      	b.n	800405c <_printf_float+0x198>
 8004076:	f04f 0967 	mov.w	r9, #103	; 0x67
 800407a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800407c:	4299      	cmp	r1, r3
 800407e:	db05      	blt.n	800408c <_printf_float+0x1c8>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	6121      	str	r1, [r4, #16]
 8004084:	07d8      	lsls	r0, r3, #31
 8004086:	d5ea      	bpl.n	800405e <_printf_float+0x19a>
 8004088:	1c4b      	adds	r3, r1, #1
 800408a:	e7e7      	b.n	800405c <_printf_float+0x198>
 800408c:	2900      	cmp	r1, #0
 800408e:	bfcc      	ite	gt
 8004090:	2201      	movgt	r2, #1
 8004092:	f1c1 0202 	rsble	r2, r1, #2
 8004096:	4413      	add	r3, r2
 8004098:	e7e0      	b.n	800405c <_printf_float+0x198>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	055a      	lsls	r2, r3, #21
 800409e:	d407      	bmi.n	80040b0 <_printf_float+0x1ec>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	4642      	mov	r2, r8
 80040a4:	4631      	mov	r1, r6
 80040a6:	4628      	mov	r0, r5
 80040a8:	47b8      	blx	r7
 80040aa:	3001      	adds	r0, #1
 80040ac:	d12b      	bne.n	8004106 <_printf_float+0x242>
 80040ae:	e764      	b.n	8003f7a <_printf_float+0xb6>
 80040b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040b4:	f240 80dd 	bls.w	8004272 <_printf_float+0x3ae>
 80040b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040bc:	2200      	movs	r2, #0
 80040be:	2300      	movs	r3, #0
 80040c0:	f7fc fcde 	bl	8000a80 <__aeabi_dcmpeq>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d033      	beq.n	8004130 <_printf_float+0x26c>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	4a35      	ldr	r2, [pc, #212]	; (80041a4 <_printf_float+0x2e0>)
 80040d0:	47b8      	blx	r7
 80040d2:	3001      	adds	r0, #1
 80040d4:	f43f af51 	beq.w	8003f7a <_printf_float+0xb6>
 80040d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040dc:	429a      	cmp	r2, r3
 80040de:	db02      	blt.n	80040e6 <_printf_float+0x222>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	07d8      	lsls	r0, r3, #31
 80040e4:	d50f      	bpl.n	8004106 <_printf_float+0x242>
 80040e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ea:	4631      	mov	r1, r6
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b8      	blx	r7
 80040f0:	3001      	adds	r0, #1
 80040f2:	f43f af42 	beq.w	8003f7a <_printf_float+0xb6>
 80040f6:	f04f 0800 	mov.w	r8, #0
 80040fa:	f104 091a 	add.w	r9, r4, #26
 80040fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004100:	3b01      	subs	r3, #1
 8004102:	4543      	cmp	r3, r8
 8004104:	dc09      	bgt.n	800411a <_printf_float+0x256>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	079b      	lsls	r3, r3, #30
 800410a:	f100 8104 	bmi.w	8004316 <_printf_float+0x452>
 800410e:	68e0      	ldr	r0, [r4, #12]
 8004110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004112:	4298      	cmp	r0, r3
 8004114:	bfb8      	it	lt
 8004116:	4618      	movlt	r0, r3
 8004118:	e731      	b.n	8003f7e <_printf_float+0xba>
 800411a:	2301      	movs	r3, #1
 800411c:	464a      	mov	r2, r9
 800411e:	4631      	mov	r1, r6
 8004120:	4628      	mov	r0, r5
 8004122:	47b8      	blx	r7
 8004124:	3001      	adds	r0, #1
 8004126:	f43f af28 	beq.w	8003f7a <_printf_float+0xb6>
 800412a:	f108 0801 	add.w	r8, r8, #1
 800412e:	e7e6      	b.n	80040fe <_printf_float+0x23a>
 8004130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	dc38      	bgt.n	80041a8 <_printf_float+0x2e4>
 8004136:	2301      	movs	r3, #1
 8004138:	4631      	mov	r1, r6
 800413a:	4628      	mov	r0, r5
 800413c:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <_printf_float+0x2e0>)
 800413e:	47b8      	blx	r7
 8004140:	3001      	adds	r0, #1
 8004142:	f43f af1a 	beq.w	8003f7a <_printf_float+0xb6>
 8004146:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800414a:	4313      	orrs	r3, r2
 800414c:	d102      	bne.n	8004154 <_printf_float+0x290>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	07d9      	lsls	r1, r3, #31
 8004152:	d5d8      	bpl.n	8004106 <_printf_float+0x242>
 8004154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004158:	4631      	mov	r1, r6
 800415a:	4628      	mov	r0, r5
 800415c:	47b8      	blx	r7
 800415e:	3001      	adds	r0, #1
 8004160:	f43f af0b 	beq.w	8003f7a <_printf_float+0xb6>
 8004164:	f04f 0900 	mov.w	r9, #0
 8004168:	f104 0a1a 	add.w	sl, r4, #26
 800416c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800416e:	425b      	negs	r3, r3
 8004170:	454b      	cmp	r3, r9
 8004172:	dc01      	bgt.n	8004178 <_printf_float+0x2b4>
 8004174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004176:	e794      	b.n	80040a2 <_printf_float+0x1de>
 8004178:	2301      	movs	r3, #1
 800417a:	4652      	mov	r2, sl
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f aef9 	beq.w	8003f7a <_printf_float+0xb6>
 8004188:	f109 0901 	add.w	r9, r9, #1
 800418c:	e7ee      	b.n	800416c <_printf_float+0x2a8>
 800418e:	bf00      	nop
 8004190:	7fefffff 	.word	0x7fefffff
 8004194:	080070a8 	.word	0x080070a8
 8004198:	080070ac 	.word	0x080070ac
 800419c:	080070b0 	.word	0x080070b0
 80041a0:	080070b4 	.word	0x080070b4
 80041a4:	080070b8 	.word	0x080070b8
 80041a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bfa8      	it	ge
 80041b0:	461a      	movge	r2, r3
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	4691      	mov	r9, r2
 80041b6:	dc37      	bgt.n	8004228 <_printf_float+0x364>
 80041b8:	f04f 0b00 	mov.w	fp, #0
 80041bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041c0:	f104 021a 	add.w	r2, r4, #26
 80041c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041c8:	ebaa 0309 	sub.w	r3, sl, r9
 80041cc:	455b      	cmp	r3, fp
 80041ce:	dc33      	bgt.n	8004238 <_printf_float+0x374>
 80041d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041d4:	429a      	cmp	r2, r3
 80041d6:	db3b      	blt.n	8004250 <_printf_float+0x38c>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	07da      	lsls	r2, r3, #31
 80041dc:	d438      	bmi.n	8004250 <_printf_float+0x38c>
 80041de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80041e2:	eba2 0903 	sub.w	r9, r2, r3
 80041e6:	eba2 020a 	sub.w	r2, r2, sl
 80041ea:	4591      	cmp	r9, r2
 80041ec:	bfa8      	it	ge
 80041ee:	4691      	movge	r9, r2
 80041f0:	f1b9 0f00 	cmp.w	r9, #0
 80041f4:	dc34      	bgt.n	8004260 <_printf_float+0x39c>
 80041f6:	f04f 0800 	mov.w	r8, #0
 80041fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041fe:	f104 0a1a 	add.w	sl, r4, #26
 8004202:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	eba3 0309 	sub.w	r3, r3, r9
 800420c:	4543      	cmp	r3, r8
 800420e:	f77f af7a 	ble.w	8004106 <_printf_float+0x242>
 8004212:	2301      	movs	r3, #1
 8004214:	4652      	mov	r2, sl
 8004216:	4631      	mov	r1, r6
 8004218:	4628      	mov	r0, r5
 800421a:	47b8      	blx	r7
 800421c:	3001      	adds	r0, #1
 800421e:	f43f aeac 	beq.w	8003f7a <_printf_float+0xb6>
 8004222:	f108 0801 	add.w	r8, r8, #1
 8004226:	e7ec      	b.n	8004202 <_printf_float+0x33e>
 8004228:	4613      	mov	r3, r2
 800422a:	4631      	mov	r1, r6
 800422c:	4642      	mov	r2, r8
 800422e:	4628      	mov	r0, r5
 8004230:	47b8      	blx	r7
 8004232:	3001      	adds	r0, #1
 8004234:	d1c0      	bne.n	80041b8 <_printf_float+0x2f4>
 8004236:	e6a0      	b.n	8003f7a <_printf_float+0xb6>
 8004238:	2301      	movs	r3, #1
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f ae99 	beq.w	8003f7a <_printf_float+0xb6>
 8004248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800424a:	f10b 0b01 	add.w	fp, fp, #1
 800424e:	e7b9      	b.n	80041c4 <_printf_float+0x300>
 8004250:	4631      	mov	r1, r6
 8004252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004256:	4628      	mov	r0, r5
 8004258:	47b8      	blx	r7
 800425a:	3001      	adds	r0, #1
 800425c:	d1bf      	bne.n	80041de <_printf_float+0x31a>
 800425e:	e68c      	b.n	8003f7a <_printf_float+0xb6>
 8004260:	464b      	mov	r3, r9
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	eb08 020a 	add.w	r2, r8, sl
 800426a:	47b8      	blx	r7
 800426c:	3001      	adds	r0, #1
 800426e:	d1c2      	bne.n	80041f6 <_printf_float+0x332>
 8004270:	e683      	b.n	8003f7a <_printf_float+0xb6>
 8004272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004274:	2a01      	cmp	r2, #1
 8004276:	dc01      	bgt.n	800427c <_printf_float+0x3b8>
 8004278:	07db      	lsls	r3, r3, #31
 800427a:	d539      	bpl.n	80042f0 <_printf_float+0x42c>
 800427c:	2301      	movs	r3, #1
 800427e:	4642      	mov	r2, r8
 8004280:	4631      	mov	r1, r6
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f ae77 	beq.w	8003f7a <_printf_float+0xb6>
 800428c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004290:	4631      	mov	r1, r6
 8004292:	4628      	mov	r0, r5
 8004294:	47b8      	blx	r7
 8004296:	3001      	adds	r0, #1
 8004298:	f43f ae6f 	beq.w	8003f7a <_printf_float+0xb6>
 800429c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042a0:	2200      	movs	r2, #0
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80042a8:	f7fc fbea 	bl	8000a80 <__aeabi_dcmpeq>
 80042ac:	b9d8      	cbnz	r0, 80042e6 <_printf_float+0x422>
 80042ae:	f109 33ff 	add.w	r3, r9, #4294967295
 80042b2:	f108 0201 	add.w	r2, r8, #1
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	d10e      	bne.n	80042de <_printf_float+0x41a>
 80042c0:	e65b      	b.n	8003f7a <_printf_float+0xb6>
 80042c2:	2301      	movs	r3, #1
 80042c4:	464a      	mov	r2, r9
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f ae54 	beq.w	8003f7a <_printf_float+0xb6>
 80042d2:	f108 0801 	add.w	r8, r8, #1
 80042d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042d8:	3b01      	subs	r3, #1
 80042da:	4543      	cmp	r3, r8
 80042dc:	dcf1      	bgt.n	80042c2 <_printf_float+0x3fe>
 80042de:	4653      	mov	r3, sl
 80042e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042e4:	e6de      	b.n	80040a4 <_printf_float+0x1e0>
 80042e6:	f04f 0800 	mov.w	r8, #0
 80042ea:	f104 091a 	add.w	r9, r4, #26
 80042ee:	e7f2      	b.n	80042d6 <_printf_float+0x412>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4642      	mov	r2, r8
 80042f4:	e7df      	b.n	80042b6 <_printf_float+0x3f2>
 80042f6:	2301      	movs	r3, #1
 80042f8:	464a      	mov	r2, r9
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f ae3a 	beq.w	8003f7a <_printf_float+0xb6>
 8004306:	f108 0801 	add.w	r8, r8, #1
 800430a:	68e3      	ldr	r3, [r4, #12]
 800430c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800430e:	1a5b      	subs	r3, r3, r1
 8004310:	4543      	cmp	r3, r8
 8004312:	dcf0      	bgt.n	80042f6 <_printf_float+0x432>
 8004314:	e6fb      	b.n	800410e <_printf_float+0x24a>
 8004316:	f04f 0800 	mov.w	r8, #0
 800431a:	f104 0919 	add.w	r9, r4, #25
 800431e:	e7f4      	b.n	800430a <_printf_float+0x446>

08004320 <_printf_common>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	4699      	mov	r9, r3
 8004328:	688a      	ldr	r2, [r1, #8]
 800432a:	690b      	ldr	r3, [r1, #16]
 800432c:	4607      	mov	r7, r0
 800432e:	4293      	cmp	r3, r2
 8004330:	bfb8      	it	lt
 8004332:	4613      	movlt	r3, r2
 8004334:	6033      	str	r3, [r6, #0]
 8004336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800433a:	460c      	mov	r4, r1
 800433c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004340:	b10a      	cbz	r2, 8004346 <_printf_common+0x26>
 8004342:	3301      	adds	r3, #1
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	6833      	ldrmi	r3, [r6, #0]
 800434e:	3302      	addmi	r3, #2
 8004350:	6033      	strmi	r3, [r6, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	f015 0506 	ands.w	r5, r5, #6
 8004358:	d106      	bne.n	8004368 <_printf_common+0x48>
 800435a:	f104 0a19 	add.w	sl, r4, #25
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	6832      	ldr	r2, [r6, #0]
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	42ab      	cmp	r3, r5
 8004366:	dc2b      	bgt.n	80043c0 <_printf_common+0xa0>
 8004368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800436c:	1e13      	subs	r3, r2, #0
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	bf18      	it	ne
 8004372:	2301      	movne	r3, #1
 8004374:	0692      	lsls	r2, r2, #26
 8004376:	d430      	bmi.n	80043da <_printf_common+0xba>
 8004378:	4649      	mov	r1, r9
 800437a:	4638      	mov	r0, r7
 800437c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004380:	47c0      	blx	r8
 8004382:	3001      	adds	r0, #1
 8004384:	d023      	beq.n	80043ce <_printf_common+0xae>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf14      	ite	ne
 8004392:	2500      	movne	r5, #0
 8004394:	6833      	ldreq	r3, [r6, #0]
 8004396:	f04f 0600 	mov.w	r6, #0
 800439a:	bf08      	it	eq
 800439c:	68e5      	ldreq	r5, [r4, #12]
 800439e:	f104 041a 	add.w	r4, r4, #26
 80043a2:	bf08      	it	eq
 80043a4:	1aed      	subeq	r5, r5, r3
 80043a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043aa:	bf08      	it	eq
 80043ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfc4      	itt	gt
 80043b4:	1a9b      	subgt	r3, r3, r2
 80043b6:	18ed      	addgt	r5, r5, r3
 80043b8:	42b5      	cmp	r5, r6
 80043ba:	d11a      	bne.n	80043f2 <_printf_common+0xd2>
 80043bc:	2000      	movs	r0, #0
 80043be:	e008      	b.n	80043d2 <_printf_common+0xb2>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4652      	mov	r2, sl
 80043c4:	4649      	mov	r1, r9
 80043c6:	4638      	mov	r0, r7
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d103      	bne.n	80043d6 <_printf_common+0xb6>
 80043ce:	f04f 30ff 	mov.w	r0, #4294967295
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	3501      	adds	r5, #1
 80043d8:	e7c1      	b.n	800435e <_printf_common+0x3e>
 80043da:	2030      	movs	r0, #48	; 0x30
 80043dc:	18e1      	adds	r1, r4, r3
 80043de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043e8:	4422      	add	r2, r4
 80043ea:	3302      	adds	r3, #2
 80043ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f0:	e7c2      	b.n	8004378 <_printf_common+0x58>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4622      	mov	r2, r4
 80043f6:	4649      	mov	r1, r9
 80043f8:	4638      	mov	r0, r7
 80043fa:	47c0      	blx	r8
 80043fc:	3001      	adds	r0, #1
 80043fe:	d0e6      	beq.n	80043ce <_printf_common+0xae>
 8004400:	3601      	adds	r6, #1
 8004402:	e7d9      	b.n	80043b8 <_printf_common+0x98>

08004404 <_printf_i>:
 8004404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	7e0f      	ldrb	r7, [r1, #24]
 800440a:	4691      	mov	r9, r2
 800440c:	2f78      	cmp	r7, #120	; 0x78
 800440e:	4680      	mov	r8, r0
 8004410:	460c      	mov	r4, r1
 8004412:	469a      	mov	sl, r3
 8004414:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441a:	d807      	bhi.n	800442c <_printf_i+0x28>
 800441c:	2f62      	cmp	r7, #98	; 0x62
 800441e:	d80a      	bhi.n	8004436 <_printf_i+0x32>
 8004420:	2f00      	cmp	r7, #0
 8004422:	f000 80d5 	beq.w	80045d0 <_printf_i+0x1cc>
 8004426:	2f58      	cmp	r7, #88	; 0x58
 8004428:	f000 80c1 	beq.w	80045ae <_printf_i+0x1aa>
 800442c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004434:	e03a      	b.n	80044ac <_printf_i+0xa8>
 8004436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443a:	2b15      	cmp	r3, #21
 800443c:	d8f6      	bhi.n	800442c <_printf_i+0x28>
 800443e:	a101      	add	r1, pc, #4	; (adr r1, 8004444 <_printf_i+0x40>)
 8004440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044b1 	.word	0x080044b1
 800444c:	0800442d 	.word	0x0800442d
 8004450:	0800442d 	.word	0x0800442d
 8004454:	0800442d 	.word	0x0800442d
 8004458:	0800442d 	.word	0x0800442d
 800445c:	080044b1 	.word	0x080044b1
 8004460:	0800442d 	.word	0x0800442d
 8004464:	0800442d 	.word	0x0800442d
 8004468:	0800442d 	.word	0x0800442d
 800446c:	0800442d 	.word	0x0800442d
 8004470:	080045b7 	.word	0x080045b7
 8004474:	080044dd 	.word	0x080044dd
 8004478:	08004571 	.word	0x08004571
 800447c:	0800442d 	.word	0x0800442d
 8004480:	0800442d 	.word	0x0800442d
 8004484:	080045d9 	.word	0x080045d9
 8004488:	0800442d 	.word	0x0800442d
 800448c:	080044dd 	.word	0x080044dd
 8004490:	0800442d 	.word	0x0800442d
 8004494:	0800442d 	.word	0x0800442d
 8004498:	08004579 	.word	0x08004579
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	602a      	str	r2, [r5, #0]
 80044a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0a0      	b.n	80045f2 <_printf_i+0x1ee>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	0607      	lsls	r7, r0, #24
 80044b6:	f103 0104 	add.w	r1, r3, #4
 80044ba:	6029      	str	r1, [r5, #0]
 80044bc:	d501      	bpl.n	80044c2 <_printf_i+0xbe>
 80044be:	681e      	ldr	r6, [r3, #0]
 80044c0:	e003      	b.n	80044ca <_printf_i+0xc6>
 80044c2:	0646      	lsls	r6, r0, #25
 80044c4:	d5fb      	bpl.n	80044be <_printf_i+0xba>
 80044c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	da03      	bge.n	80044d6 <_printf_i+0xd2>
 80044ce:	232d      	movs	r3, #45	; 0x2d
 80044d0:	4276      	negs	r6, r6
 80044d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d6:	230a      	movs	r3, #10
 80044d8:	4859      	ldr	r0, [pc, #356]	; (8004640 <_printf_i+0x23c>)
 80044da:	e012      	b.n	8004502 <_printf_i+0xfe>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	6820      	ldr	r0, [r4, #0]
 80044e0:	1d19      	adds	r1, r3, #4
 80044e2:	6029      	str	r1, [r5, #0]
 80044e4:	0605      	lsls	r5, r0, #24
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0xe8>
 80044e8:	681e      	ldr	r6, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <_printf_i+0xee>
 80044ec:	0641      	lsls	r1, r0, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0xe4>
 80044f0:	881e      	ldrh	r6, [r3, #0]
 80044f2:	2f6f      	cmp	r7, #111	; 0x6f
 80044f4:	bf0c      	ite	eq
 80044f6:	2308      	moveq	r3, #8
 80044f8:	230a      	movne	r3, #10
 80044fa:	4851      	ldr	r0, [pc, #324]	; (8004640 <_printf_i+0x23c>)
 80044fc:	2100      	movs	r1, #0
 80044fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004502:	6865      	ldr	r5, [r4, #4]
 8004504:	2d00      	cmp	r5, #0
 8004506:	bfa8      	it	ge
 8004508:	6821      	ldrge	r1, [r4, #0]
 800450a:	60a5      	str	r5, [r4, #8]
 800450c:	bfa4      	itt	ge
 800450e:	f021 0104 	bicge.w	r1, r1, #4
 8004512:	6021      	strge	r1, [r4, #0]
 8004514:	b90e      	cbnz	r6, 800451a <_printf_i+0x116>
 8004516:	2d00      	cmp	r5, #0
 8004518:	d04b      	beq.n	80045b2 <_printf_i+0x1ae>
 800451a:	4615      	mov	r5, r2
 800451c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004520:	fb03 6711 	mls	r7, r3, r1, r6
 8004524:	5dc7      	ldrb	r7, [r0, r7]
 8004526:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452a:	4637      	mov	r7, r6
 800452c:	42bb      	cmp	r3, r7
 800452e:	460e      	mov	r6, r1
 8004530:	d9f4      	bls.n	800451c <_printf_i+0x118>
 8004532:	2b08      	cmp	r3, #8
 8004534:	d10b      	bne.n	800454e <_printf_i+0x14a>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	07de      	lsls	r6, r3, #31
 800453a:	d508      	bpl.n	800454e <_printf_i+0x14a>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	6861      	ldr	r1, [r4, #4]
 8004540:	4299      	cmp	r1, r3
 8004542:	bfde      	ittt	le
 8004544:	2330      	movle	r3, #48	; 0x30
 8004546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800454e:	1b52      	subs	r2, r2, r5
 8004550:	6122      	str	r2, [r4, #16]
 8004552:	464b      	mov	r3, r9
 8004554:	4621      	mov	r1, r4
 8004556:	4640      	mov	r0, r8
 8004558:	f8cd a000 	str.w	sl, [sp]
 800455c:	aa03      	add	r2, sp, #12
 800455e:	f7ff fedf 	bl	8004320 <_printf_common>
 8004562:	3001      	adds	r0, #1
 8004564:	d14a      	bne.n	80045fc <_printf_i+0x1f8>
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	b004      	add	sp, #16
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	f043 0320 	orr.w	r3, r3, #32
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	2778      	movs	r7, #120	; 0x78
 800457a:	4832      	ldr	r0, [pc, #200]	; (8004644 <_printf_i+0x240>)
 800457c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	6829      	ldr	r1, [r5, #0]
 8004584:	061f      	lsls	r7, r3, #24
 8004586:	f851 6b04 	ldr.w	r6, [r1], #4
 800458a:	d402      	bmi.n	8004592 <_printf_i+0x18e>
 800458c:	065f      	lsls	r7, r3, #25
 800458e:	bf48      	it	mi
 8004590:	b2b6      	uxthmi	r6, r6
 8004592:	07df      	lsls	r7, r3, #31
 8004594:	bf48      	it	mi
 8004596:	f043 0320 	orrmi.w	r3, r3, #32
 800459a:	6029      	str	r1, [r5, #0]
 800459c:	bf48      	it	mi
 800459e:	6023      	strmi	r3, [r4, #0]
 80045a0:	b91e      	cbnz	r6, 80045aa <_printf_i+0x1a6>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	f023 0320 	bic.w	r3, r3, #32
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	2310      	movs	r3, #16
 80045ac:	e7a6      	b.n	80044fc <_printf_i+0xf8>
 80045ae:	4824      	ldr	r0, [pc, #144]	; (8004640 <_printf_i+0x23c>)
 80045b0:	e7e4      	b.n	800457c <_printf_i+0x178>
 80045b2:	4615      	mov	r5, r2
 80045b4:	e7bd      	b.n	8004532 <_printf_i+0x12e>
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	6826      	ldr	r6, [r4, #0]
 80045ba:	1d18      	adds	r0, r3, #4
 80045bc:	6961      	ldr	r1, [r4, #20]
 80045be:	6028      	str	r0, [r5, #0]
 80045c0:	0635      	lsls	r5, r6, #24
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	d501      	bpl.n	80045ca <_printf_i+0x1c6>
 80045c6:	6019      	str	r1, [r3, #0]
 80045c8:	e002      	b.n	80045d0 <_printf_i+0x1cc>
 80045ca:	0670      	lsls	r0, r6, #25
 80045cc:	d5fb      	bpl.n	80045c6 <_printf_i+0x1c2>
 80045ce:	8019      	strh	r1, [r3, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	4615      	mov	r5, r2
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	e7bc      	b.n	8004552 <_printf_i+0x14e>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	1d1a      	adds	r2, r3, #4
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 f9d4 	bl	8004992 <memchr>
 80045ea:	b108      	cbz	r0, 80045f0 <_printf_i+0x1ec>
 80045ec:	1b40      	subs	r0, r0, r5
 80045ee:	6060      	str	r0, [r4, #4]
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	2300      	movs	r3, #0
 80045f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fa:	e7aa      	b.n	8004552 <_printf_i+0x14e>
 80045fc:	462a      	mov	r2, r5
 80045fe:	4649      	mov	r1, r9
 8004600:	4640      	mov	r0, r8
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	47d0      	blx	sl
 8004606:	3001      	adds	r0, #1
 8004608:	d0ad      	beq.n	8004566 <_printf_i+0x162>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	079b      	lsls	r3, r3, #30
 800460e:	d413      	bmi.n	8004638 <_printf_i+0x234>
 8004610:	68e0      	ldr	r0, [r4, #12]
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	4298      	cmp	r0, r3
 8004616:	bfb8      	it	lt
 8004618:	4618      	movlt	r0, r3
 800461a:	e7a6      	b.n	800456a <_printf_i+0x166>
 800461c:	2301      	movs	r3, #1
 800461e:	4632      	mov	r2, r6
 8004620:	4649      	mov	r1, r9
 8004622:	4640      	mov	r0, r8
 8004624:	47d0      	blx	sl
 8004626:	3001      	adds	r0, #1
 8004628:	d09d      	beq.n	8004566 <_printf_i+0x162>
 800462a:	3501      	adds	r5, #1
 800462c:	68e3      	ldr	r3, [r4, #12]
 800462e:	9903      	ldr	r1, [sp, #12]
 8004630:	1a5b      	subs	r3, r3, r1
 8004632:	42ab      	cmp	r3, r5
 8004634:	dcf2      	bgt.n	800461c <_printf_i+0x218>
 8004636:	e7eb      	b.n	8004610 <_printf_i+0x20c>
 8004638:	2500      	movs	r5, #0
 800463a:	f104 0619 	add.w	r6, r4, #25
 800463e:	e7f5      	b.n	800462c <_printf_i+0x228>
 8004640:	080070ba 	.word	0x080070ba
 8004644:	080070cb 	.word	0x080070cb

08004648 <std>:
 8004648:	2300      	movs	r3, #0
 800464a:	b510      	push	{r4, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	e9c0 3300 	strd	r3, r3, [r0]
 8004652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004656:	6083      	str	r3, [r0, #8]
 8004658:	8181      	strh	r1, [r0, #12]
 800465a:	6643      	str	r3, [r0, #100]	; 0x64
 800465c:	81c2      	strh	r2, [r0, #14]
 800465e:	6183      	str	r3, [r0, #24]
 8004660:	4619      	mov	r1, r3
 8004662:	2208      	movs	r2, #8
 8004664:	305c      	adds	r0, #92	; 0x5c
 8004666:	f000 f914 	bl	8004892 <memset>
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <std+0x58>)
 800466c:	6224      	str	r4, [r4, #32]
 800466e:	6263      	str	r3, [r4, #36]	; 0x24
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <std+0x5c>)
 8004672:	62a3      	str	r3, [r4, #40]	; 0x28
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <std+0x60>)
 8004676:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <std+0x64>)
 800467a:	6323      	str	r3, [r4, #48]	; 0x30
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <std+0x68>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d006      	beq.n	8004690 <std+0x48>
 8004682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004686:	4294      	cmp	r4, r2
 8004688:	d002      	beq.n	8004690 <std+0x48>
 800468a:	33d0      	adds	r3, #208	; 0xd0
 800468c:	429c      	cmp	r4, r3
 800468e:	d105      	bne.n	800469c <std+0x54>
 8004690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f000 b978 	b.w	800498c <__retarget_lock_init_recursive>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	0800480d 	.word	0x0800480d
 80046a4:	0800482f 	.word	0x0800482f
 80046a8:	08004867 	.word	0x08004867
 80046ac:	0800488b 	.word	0x0800488b
 80046b0:	200002b0 	.word	0x200002b0

080046b4 <stdio_exit_handler>:
 80046b4:	4a02      	ldr	r2, [pc, #8]	; (80046c0 <stdio_exit_handler+0xc>)
 80046b6:	4903      	ldr	r1, [pc, #12]	; (80046c4 <stdio_exit_handler+0x10>)
 80046b8:	4803      	ldr	r0, [pc, #12]	; (80046c8 <stdio_exit_handler+0x14>)
 80046ba:	f000 b869 	b.w	8004790 <_fwalk_sglue>
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c
 80046c4:	08006325 	.word	0x08006325
 80046c8:	20000018 	.word	0x20000018

080046cc <cleanup_stdio>:
 80046cc:	6841      	ldr	r1, [r0, #4]
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <cleanup_stdio+0x34>)
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4299      	cmp	r1, r3
 80046d4:	4604      	mov	r4, r0
 80046d6:	d001      	beq.n	80046dc <cleanup_stdio+0x10>
 80046d8:	f001 fe24 	bl	8006324 <_fflush_r>
 80046dc:	68a1      	ldr	r1, [r4, #8]
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <cleanup_stdio+0x38>)
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d002      	beq.n	80046ea <cleanup_stdio+0x1e>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f001 fe1d 	bl	8006324 <_fflush_r>
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <cleanup_stdio+0x3c>)
 80046ee:	4299      	cmp	r1, r3
 80046f0:	d004      	beq.n	80046fc <cleanup_stdio+0x30>
 80046f2:	4620      	mov	r0, r4
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f001 be14 	b.w	8006324 <_fflush_r>
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	200002b0 	.word	0x200002b0
 8004704:	20000318 	.word	0x20000318
 8004708:	20000380 	.word	0x20000380

0800470c <global_stdio_init.part.0>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <global_stdio_init.part.0+0x30>)
 8004710:	4c0b      	ldr	r4, [pc, #44]	; (8004740 <global_stdio_init.part.0+0x34>)
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <global_stdio_init.part.0+0x38>)
 8004714:	4620      	mov	r0, r4
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	2104      	movs	r1, #4
 800471a:	2200      	movs	r2, #0
 800471c:	f7ff ff94 	bl	8004648 <std>
 8004720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004724:	2201      	movs	r2, #1
 8004726:	2109      	movs	r1, #9
 8004728:	f7ff ff8e 	bl	8004648 <std>
 800472c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004730:	2202      	movs	r2, #2
 8004732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004736:	2112      	movs	r1, #18
 8004738:	f7ff bf86 	b.w	8004648 <std>
 800473c:	200003e8 	.word	0x200003e8
 8004740:	200002b0 	.word	0x200002b0
 8004744:	080046b5 	.word	0x080046b5

08004748 <__sfp_lock_acquire>:
 8004748:	4801      	ldr	r0, [pc, #4]	; (8004750 <__sfp_lock_acquire+0x8>)
 800474a:	f000 b920 	b.w	800498e <__retarget_lock_acquire_recursive>
 800474e:	bf00      	nop
 8004750:	200003f1 	.word	0x200003f1

08004754 <__sfp_lock_release>:
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <__sfp_lock_release+0x8>)
 8004756:	f000 b91b 	b.w	8004990 <__retarget_lock_release_recursive>
 800475a:	bf00      	nop
 800475c:	200003f1 	.word	0x200003f1

08004760 <__sinit>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4604      	mov	r4, r0
 8004764:	f7ff fff0 	bl	8004748 <__sfp_lock_acquire>
 8004768:	6a23      	ldr	r3, [r4, #32]
 800476a:	b11b      	cbz	r3, 8004774 <__sinit+0x14>
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f7ff bff0 	b.w	8004754 <__sfp_lock_release>
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <__sinit+0x28>)
 8004776:	6223      	str	r3, [r4, #32]
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <__sinit+0x2c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f5      	bne.n	800476c <__sinit+0xc>
 8004780:	f7ff ffc4 	bl	800470c <global_stdio_init.part.0>
 8004784:	e7f2      	b.n	800476c <__sinit+0xc>
 8004786:	bf00      	nop
 8004788:	080046cd 	.word	0x080046cd
 800478c:	200003e8 	.word	0x200003e8

08004790 <_fwalk_sglue>:
 8004790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004794:	4607      	mov	r7, r0
 8004796:	4688      	mov	r8, r1
 8004798:	4614      	mov	r4, r2
 800479a:	2600      	movs	r6, #0
 800479c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047a0:	f1b9 0901 	subs.w	r9, r9, #1
 80047a4:	d505      	bpl.n	80047b2 <_fwalk_sglue+0x22>
 80047a6:	6824      	ldr	r4, [r4, #0]
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	d1f7      	bne.n	800479c <_fwalk_sglue+0xc>
 80047ac:	4630      	mov	r0, r6
 80047ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d907      	bls.n	80047c8 <_fwalk_sglue+0x38>
 80047b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047bc:	3301      	adds	r3, #1
 80047be:	d003      	beq.n	80047c8 <_fwalk_sglue+0x38>
 80047c0:	4629      	mov	r1, r5
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	4306      	orrs	r6, r0
 80047c8:	3568      	adds	r5, #104	; 0x68
 80047ca:	e7e9      	b.n	80047a0 <_fwalk_sglue+0x10>

080047cc <siprintf>:
 80047cc:	b40e      	push	{r1, r2, r3}
 80047ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047d2:	b500      	push	{lr}
 80047d4:	b09c      	sub	sp, #112	; 0x70
 80047d6:	ab1d      	add	r3, sp, #116	; 0x74
 80047d8:	9002      	str	r0, [sp, #8]
 80047da:	9006      	str	r0, [sp, #24]
 80047dc:	9107      	str	r1, [sp, #28]
 80047de:	9104      	str	r1, [sp, #16]
 80047e0:	4808      	ldr	r0, [pc, #32]	; (8004804 <siprintf+0x38>)
 80047e2:	4909      	ldr	r1, [pc, #36]	; (8004808 <siprintf+0x3c>)
 80047e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e8:	9105      	str	r1, [sp, #20]
 80047ea:	6800      	ldr	r0, [r0, #0]
 80047ec:	a902      	add	r1, sp, #8
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	f001 fc18 	bl	8006024 <_svfiprintf_r>
 80047f4:	2200      	movs	r2, #0
 80047f6:	9b02      	ldr	r3, [sp, #8]
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	b01c      	add	sp, #112	; 0x70
 80047fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004800:	b003      	add	sp, #12
 8004802:	4770      	bx	lr
 8004804:	20000064 	.word	0x20000064
 8004808:	ffff0208 	.word	0xffff0208

0800480c <__sread>:
 800480c:	b510      	push	{r4, lr}
 800480e:	460c      	mov	r4, r1
 8004810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004814:	f000 f86c 	bl	80048f0 <_read_r>
 8004818:	2800      	cmp	r0, #0
 800481a:	bfab      	itete	ge
 800481c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800481e:	89a3      	ldrhlt	r3, [r4, #12]
 8004820:	181b      	addge	r3, r3, r0
 8004822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004826:	bfac      	ite	ge
 8004828:	6563      	strge	r3, [r4, #84]	; 0x54
 800482a:	81a3      	strhlt	r3, [r4, #12]
 800482c:	bd10      	pop	{r4, pc}

0800482e <__swrite>:
 800482e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004832:	461f      	mov	r7, r3
 8004834:	898b      	ldrh	r3, [r1, #12]
 8004836:	4605      	mov	r5, r0
 8004838:	05db      	lsls	r3, r3, #23
 800483a:	460c      	mov	r4, r1
 800483c:	4616      	mov	r6, r2
 800483e:	d505      	bpl.n	800484c <__swrite+0x1e>
 8004840:	2302      	movs	r3, #2
 8004842:	2200      	movs	r2, #0
 8004844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004848:	f000 f840 	bl	80048cc <_lseek_r>
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	4632      	mov	r2, r6
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	4628      	mov	r0, r5
 8004858:	463b      	mov	r3, r7
 800485a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800485e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004862:	f000 b857 	b.w	8004914 <_write_r>

08004866 <__sseek>:
 8004866:	b510      	push	{r4, lr}
 8004868:	460c      	mov	r4, r1
 800486a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486e:	f000 f82d 	bl	80048cc <_lseek_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	bf15      	itete	ne
 8004878:	6560      	strne	r0, [r4, #84]	; 0x54
 800487a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800487e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004882:	81a3      	strheq	r3, [r4, #12]
 8004884:	bf18      	it	ne
 8004886:	81a3      	strhne	r3, [r4, #12]
 8004888:	bd10      	pop	{r4, pc}

0800488a <__sclose>:
 800488a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488e:	f000 b80d 	b.w	80048ac <_close_r>

08004892 <memset>:
 8004892:	4603      	mov	r3, r0
 8004894:	4402      	add	r2, r0
 8004896:	4293      	cmp	r3, r2
 8004898:	d100      	bne.n	800489c <memset+0xa>
 800489a:	4770      	bx	lr
 800489c:	f803 1b01 	strb.w	r1, [r3], #1
 80048a0:	e7f9      	b.n	8004896 <memset+0x4>
	...

080048a4 <_localeconv_r>:
 80048a4:	4800      	ldr	r0, [pc, #0]	; (80048a8 <_localeconv_r+0x4>)
 80048a6:	4770      	bx	lr
 80048a8:	20000158 	.word	0x20000158

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	2300      	movs	r3, #0
 80048b0:	4d05      	ldr	r5, [pc, #20]	; (80048c8 <_close_r+0x1c>)
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fc fc57 	bl	800116a <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	200003ec 	.word	0x200003ec

080048cc <_lseek_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	2200      	movs	r2, #0
 80048d6:	4d05      	ldr	r5, [pc, #20]	; (80048ec <_lseek_r+0x20>)
 80048d8:	602a      	str	r2, [r5, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	f7fc fc69 	bl	80011b2 <_lseek>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_lseek_r+0x1e>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_lseek_r+0x1e>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	200003ec 	.word	0x200003ec

080048f0 <_read_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	4d05      	ldr	r5, [pc, #20]	; (8004910 <_read_r+0x20>)
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fc fbfa 	bl	80010f8 <_read>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_read_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_read_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200003ec 	.word	0x200003ec

08004914 <_write_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	2200      	movs	r2, #0
 800491e:	4d05      	ldr	r5, [pc, #20]	; (8004934 <_write_r+0x20>)
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc fc05 	bl	8001132 <_write>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_write_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_write_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	200003ec 	.word	0x200003ec

08004938 <__errno>:
 8004938:	4b01      	ldr	r3, [pc, #4]	; (8004940 <__errno+0x8>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000064 	.word	0x20000064

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	2600      	movs	r6, #0
 8004948:	4d0c      	ldr	r5, [pc, #48]	; (800497c <__libc_init_array+0x38>)
 800494a:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <__libc_init_array+0x3c>)
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	42a6      	cmp	r6, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	f002 f886 	bl	8006a64 <_init>
 8004958:	2600      	movs	r6, #0
 800495a:	4d0a      	ldr	r5, [pc, #40]	; (8004984 <__libc_init_array+0x40>)
 800495c:	4c0a      	ldr	r4, [pc, #40]	; (8004988 <__libc_init_array+0x44>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	42a6      	cmp	r6, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f855 3b04 	ldr.w	r3, [r5], #4
 800496c:	4798      	blx	r3
 800496e:	3601      	adds	r6, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f855 3b04 	ldr.w	r3, [r5], #4
 8004976:	4798      	blx	r3
 8004978:	3601      	adds	r6, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	0800741c 	.word	0x0800741c
 8004980:	0800741c 	.word	0x0800741c
 8004984:	0800741c 	.word	0x0800741c
 8004988:	08007420 	.word	0x08007420

0800498c <__retarget_lock_init_recursive>:
 800498c:	4770      	bx	lr

0800498e <__retarget_lock_acquire_recursive>:
 800498e:	4770      	bx	lr

08004990 <__retarget_lock_release_recursive>:
 8004990:	4770      	bx	lr

08004992 <memchr>:
 8004992:	4603      	mov	r3, r0
 8004994:	b510      	push	{r4, lr}
 8004996:	b2c9      	uxtb	r1, r1
 8004998:	4402      	add	r2, r0
 800499a:	4293      	cmp	r3, r2
 800499c:	4618      	mov	r0, r3
 800499e:	d101      	bne.n	80049a4 <memchr+0x12>
 80049a0:	2000      	movs	r0, #0
 80049a2:	e003      	b.n	80049ac <memchr+0x1a>
 80049a4:	7804      	ldrb	r4, [r0, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	428c      	cmp	r4, r1
 80049aa:	d1f6      	bne.n	800499a <memchr+0x8>
 80049ac:	bd10      	pop	{r4, pc}

080049ae <quorem>:
 80049ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b2:	6903      	ldr	r3, [r0, #16]
 80049b4:	690c      	ldr	r4, [r1, #16]
 80049b6:	4607      	mov	r7, r0
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	db7f      	blt.n	8004abc <quorem+0x10e>
 80049bc:	3c01      	subs	r4, #1
 80049be:	f100 0514 	add.w	r5, r0, #20
 80049c2:	f101 0814 	add.w	r8, r1, #20
 80049c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049d4:	3301      	adds	r3, #1
 80049d6:	429a      	cmp	r2, r3
 80049d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80049dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049e4:	d331      	bcc.n	8004a4a <quorem+0x9c>
 80049e6:	f04f 0e00 	mov.w	lr, #0
 80049ea:	4640      	mov	r0, r8
 80049ec:	46ac      	mov	ip, r5
 80049ee:	46f2      	mov	sl, lr
 80049f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049f4:	b293      	uxth	r3, r2
 80049f6:	fb06 e303 	mla	r3, r6, r3, lr
 80049fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049fe:	0c1a      	lsrs	r2, r3, #16
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	fb06 220e 	mla	r2, r6, lr, r2
 8004a06:	ebaa 0303 	sub.w	r3, sl, r3
 8004a0a:	f8dc a000 	ldr.w	sl, [ip]
 8004a0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a12:	fa1f fa8a 	uxth.w	sl, sl
 8004a16:	4453      	add	r3, sl
 8004a18:	f8dc a000 	ldr.w	sl, [ip]
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a2c:	4581      	cmp	r9, r0
 8004a2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a32:	f84c 3b04 	str.w	r3, [ip], #4
 8004a36:	d2db      	bcs.n	80049f0 <quorem+0x42>
 8004a38:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a3c:	b92b      	cbnz	r3, 8004a4a <quorem+0x9c>
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	429d      	cmp	r5, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	d32d      	bcc.n	8004aa4 <quorem+0xf6>
 8004a48:	613c      	str	r4, [r7, #16]
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f001 f992 	bl	8005d74 <__mcmp>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	db23      	blt.n	8004a9c <quorem+0xee>
 8004a54:	4629      	mov	r1, r5
 8004a56:	2000      	movs	r0, #0
 8004a58:	3601      	adds	r6, #1
 8004a5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a5e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a62:	b293      	uxth	r3, r2
 8004a64:	1ac3      	subs	r3, r0, r3
 8004a66:	0c12      	lsrs	r2, r2, #16
 8004a68:	fa1f f08c 	uxth.w	r0, ip
 8004a6c:	4403      	add	r3, r0
 8004a6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a7c:	45c1      	cmp	r9, r8
 8004a7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a82:	f841 3b04 	str.w	r3, [r1], #4
 8004a86:	d2e8      	bcs.n	8004a5a <quorem+0xac>
 8004a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a90:	b922      	cbnz	r2, 8004a9c <quorem+0xee>
 8004a92:	3b04      	subs	r3, #4
 8004a94:	429d      	cmp	r5, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	d30a      	bcc.n	8004ab0 <quorem+0x102>
 8004a9a:	613c      	str	r4, [r7, #16]
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	b003      	add	sp, #12
 8004aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	3b04      	subs	r3, #4
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d1cd      	bne.n	8004a48 <quorem+0x9a>
 8004aac:	3c01      	subs	r4, #1
 8004aae:	e7c8      	b.n	8004a42 <quorem+0x94>
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	3b04      	subs	r3, #4
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d1f0      	bne.n	8004a9a <quorem+0xec>
 8004ab8:	3c01      	subs	r4, #1
 8004aba:	e7eb      	b.n	8004a94 <quorem+0xe6>
 8004abc:	2000      	movs	r0, #0
 8004abe:	e7ee      	b.n	8004a9e <quorem+0xf0>

08004ac0 <_dtoa_r>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	69c4      	ldr	r4, [r0, #28]
 8004aca:	b099      	sub	sp, #100	; 0x64
 8004acc:	4605      	mov	r5, r0
 8004ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ad2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ad6:	b974      	cbnz	r4, 8004af6 <_dtoa_r+0x36>
 8004ad8:	2010      	movs	r0, #16
 8004ada:	f000 fe1d 	bl	8005718 <malloc>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	61e8      	str	r0, [r5, #28]
 8004ae2:	b920      	cbnz	r0, 8004aee <_dtoa_r+0x2e>
 8004ae4:	21ef      	movs	r1, #239	; 0xef
 8004ae6:	4bac      	ldr	r3, [pc, #688]	; (8004d98 <_dtoa_r+0x2d8>)
 8004ae8:	48ac      	ldr	r0, [pc, #688]	; (8004d9c <_dtoa_r+0x2dc>)
 8004aea:	f001 fc7b 	bl	80063e4 <__assert_func>
 8004aee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004af2:	6004      	str	r4, [r0, #0]
 8004af4:	60c4      	str	r4, [r0, #12]
 8004af6:	69eb      	ldr	r3, [r5, #28]
 8004af8:	6819      	ldr	r1, [r3, #0]
 8004afa:	b151      	cbz	r1, 8004b12 <_dtoa_r+0x52>
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	2301      	movs	r3, #1
 8004b00:	4093      	lsls	r3, r2
 8004b02:	604a      	str	r2, [r1, #4]
 8004b04:	608b      	str	r3, [r1, #8]
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 fefa 	bl	8005900 <_Bfree>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	69eb      	ldr	r3, [r5, #28]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	1e3b      	subs	r3, r7, #0
 8004b14:	bfaf      	iteee	ge
 8004b16:	2300      	movge	r3, #0
 8004b18:	2201      	movlt	r2, #1
 8004b1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	9305      	strlt	r3, [sp, #20]
 8004b20:	bfa8      	it	ge
 8004b22:	f8c8 3000 	strge.w	r3, [r8]
 8004b26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b2a:	4b9d      	ldr	r3, [pc, #628]	; (8004da0 <_dtoa_r+0x2e0>)
 8004b2c:	bfb8      	it	lt
 8004b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8004b32:	ea33 0309 	bics.w	r3, r3, r9
 8004b36:	d119      	bne.n	8004b6c <_dtoa_r+0xac>
 8004b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b44:	4333      	orrs	r3, r6
 8004b46:	f000 8589 	beq.w	800565c <_dtoa_r+0xb9c>
 8004b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b4c:	b953      	cbnz	r3, 8004b64 <_dtoa_r+0xa4>
 8004b4e:	4b95      	ldr	r3, [pc, #596]	; (8004da4 <_dtoa_r+0x2e4>)
 8004b50:	e023      	b.n	8004b9a <_dtoa_r+0xda>
 8004b52:	4b95      	ldr	r3, [pc, #596]	; (8004da8 <_dtoa_r+0x2e8>)
 8004b54:	9303      	str	r3, [sp, #12]
 8004b56:	3308      	adds	r3, #8
 8004b58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	9803      	ldr	r0, [sp, #12]
 8004b5e:	b019      	add	sp, #100	; 0x64
 8004b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b64:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <_dtoa_r+0x2e4>)
 8004b66:	9303      	str	r3, [sp, #12]
 8004b68:	3303      	adds	r3, #3
 8004b6a:	e7f5      	b.n	8004b58 <_dtoa_r+0x98>
 8004b6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f7fb ff80 	bl	8000a80 <__aeabi_dcmpeq>
 8004b80:	4680      	mov	r8, r0
 8004b82:	b160      	cbz	r0, 8004b9e <_dtoa_r+0xde>
 8004b84:	2301      	movs	r3, #1
 8004b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8562 	beq.w	8005656 <_dtoa_r+0xb96>
 8004b92:	4b86      	ldr	r3, [pc, #536]	; (8004dac <_dtoa_r+0x2ec>)
 8004b94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	9303      	str	r3, [sp, #12]
 8004b9c:	e7de      	b.n	8004b5c <_dtoa_r+0x9c>
 8004b9e:	ab16      	add	r3, sp, #88	; 0x58
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	ab17      	add	r3, sp, #92	; 0x5c
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004bac:	f001 f98a 	bl	8005ec4 <__d2b>
 8004bb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004bb4:	4682      	mov	sl, r0
 8004bb6:	2c00      	cmp	r4, #0
 8004bb8:	d07e      	beq.n	8004cb8 <_dtoa_r+0x1f8>
 8004bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004bcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004bd0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	4b75      	ldr	r3, [pc, #468]	; (8004db0 <_dtoa_r+0x2f0>)
 8004bda:	f7fb fb31 	bl	8000240 <__aeabi_dsub>
 8004bde:	a368      	add	r3, pc, #416	; (adr r3, 8004d80 <_dtoa_r+0x2c0>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fce4 	bl	80005b0 <__aeabi_dmul>
 8004be8:	a367      	add	r3, pc, #412	; (adr r3, 8004d88 <_dtoa_r+0x2c8>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fb29 	bl	8000244 <__adddf3>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	f7fb fc70 	bl	80004dc <__aeabi_i2d>
 8004bfc:	a364      	add	r3, pc, #400	; (adr r3, 8004d90 <_dtoa_r+0x2d0>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fcd5 	bl	80005b0 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb fb19 	bl	8000244 <__adddf3>
 8004c12:	4606      	mov	r6, r0
 8004c14:	460f      	mov	r7, r1
 8004c16:	f7fb ff7b 	bl	8000b10 <__aeabi_d2iz>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4683      	mov	fp, r0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4630      	mov	r0, r6
 8004c22:	4639      	mov	r1, r7
 8004c24:	f7fb ff36 	bl	8000a94 <__aeabi_dcmplt>
 8004c28:	b148      	cbz	r0, 8004c3e <_dtoa_r+0x17e>
 8004c2a:	4658      	mov	r0, fp
 8004c2c:	f7fb fc56 	bl	80004dc <__aeabi_i2d>
 8004c30:	4632      	mov	r2, r6
 8004c32:	463b      	mov	r3, r7
 8004c34:	f7fb ff24 	bl	8000a80 <__aeabi_dcmpeq>
 8004c38:	b908      	cbnz	r0, 8004c3e <_dtoa_r+0x17e>
 8004c3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c3e:	f1bb 0f16 	cmp.w	fp, #22
 8004c42:	d857      	bhi.n	8004cf4 <_dtoa_r+0x234>
 8004c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c48:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <_dtoa_r+0x2f4>)
 8004c4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb ff1f 	bl	8000a94 <__aeabi_dcmplt>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d04e      	beq.n	8004cf8 <_dtoa_r+0x238>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c64:	1b1b      	subs	r3, r3, r4
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	bf46      	itte	mi
 8004c6a:	f1c3 0901 	rsbmi	r9, r3, #1
 8004c6e:	2300      	movmi	r3, #0
 8004c70:	f04f 0900 	movpl.w	r9, #0
 8004c74:	9209      	str	r2, [sp, #36]	; 0x24
 8004c76:	bf48      	it	mi
 8004c78:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c7a:	f1bb 0f00 	cmp.w	fp, #0
 8004c7e:	db3d      	blt.n	8004cfc <_dtoa_r+0x23c>
 8004c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c82:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004c86:	445b      	add	r3, fp
 8004c88:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	930a      	str	r3, [sp, #40]	; 0x28
 8004c8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c90:	2b09      	cmp	r3, #9
 8004c92:	d867      	bhi.n	8004d64 <_dtoa_r+0x2a4>
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	bfc4      	itt	gt
 8004c98:	3b04      	subgt	r3, #4
 8004c9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c9e:	bfc8      	it	gt
 8004ca0:	2400      	movgt	r4, #0
 8004ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ca6:	bfd8      	it	le
 8004ca8:	2401      	movle	r4, #1
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	f200 8086 	bhi.w	8004dbc <_dtoa_r+0x2fc>
 8004cb0:	e8df f003 	tbb	[pc, r3]
 8004cb4:	5637392c 	.word	0x5637392c
 8004cb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004cbc:	441c      	add	r4, r3
 8004cbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	bfc1      	itttt	gt
 8004cc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cca:	fa09 f903 	lslgt.w	r9, r9, r3
 8004cce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004cd2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cd6:	bfd6      	itet	le
 8004cd8:	f1c3 0320 	rsble	r3, r3, #32
 8004cdc:	ea49 0003 	orrgt.w	r0, r9, r3
 8004ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8004ce4:	f7fb fbea 	bl	80004bc <__aeabi_ui2d>
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004cee:	3c01      	subs	r4, #1
 8004cf0:	9213      	str	r2, [sp, #76]	; 0x4c
 8004cf2:	e76f      	b.n	8004bd4 <_dtoa_r+0x114>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e7b3      	b.n	8004c60 <_dtoa_r+0x1a0>
 8004cf8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cfa:	e7b2      	b.n	8004c62 <_dtoa_r+0x1a2>
 8004cfc:	f1cb 0300 	rsb	r3, fp, #0
 8004d00:	930a      	str	r3, [sp, #40]	; 0x28
 8004d02:	2300      	movs	r3, #0
 8004d04:	eba9 090b 	sub.w	r9, r9, fp
 8004d08:	930e      	str	r3, [sp, #56]	; 0x38
 8004d0a:	e7c0      	b.n	8004c8e <_dtoa_r+0x1ce>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dc55      	bgt.n	8004dc2 <_dtoa_r+0x302>
 8004d16:	2301      	movs	r3, #1
 8004d18:	461a      	mov	r2, r3
 8004d1a:	9306      	str	r3, [sp, #24]
 8004d1c:	9308      	str	r3, [sp, #32]
 8004d1e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004d20:	e00b      	b.n	8004d3a <_dtoa_r+0x27a>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7f3      	b.n	8004d0e <_dtoa_r+0x24e>
 8004d26:	2300      	movs	r3, #0
 8004d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d2c:	445b      	add	r3, fp
 8004d2e:	9306      	str	r3, [sp, #24]
 8004d30:	3301      	adds	r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	9308      	str	r3, [sp, #32]
 8004d36:	bfb8      	it	lt
 8004d38:	2301      	movlt	r3, #1
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	69e8      	ldr	r0, [r5, #28]
 8004d40:	f102 0614 	add.w	r6, r2, #20
 8004d44:	429e      	cmp	r6, r3
 8004d46:	d940      	bls.n	8004dca <_dtoa_r+0x30a>
 8004d48:	6041      	str	r1, [r0, #4]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 fd98 	bl	8005880 <_Balloc>
 8004d50:	9003      	str	r0, [sp, #12]
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d13c      	bne.n	8004dd0 <_dtoa_r+0x310>
 8004d56:	4602      	mov	r2, r0
 8004d58:	f240 11af 	movw	r1, #431	; 0x1af
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <_dtoa_r+0x2f8>)
 8004d5e:	e6c3      	b.n	8004ae8 <_dtoa_r+0x28>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e7e1      	b.n	8004d28 <_dtoa_r+0x268>
 8004d64:	2401      	movs	r4, #1
 8004d66:	2300      	movs	r3, #0
 8004d68:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d6a:	9322      	str	r3, [sp, #136]	; 0x88
 8004d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d70:	2200      	movs	r2, #0
 8004d72:	9306      	str	r3, [sp, #24]
 8004d74:	9308      	str	r3, [sp, #32]
 8004d76:	2312      	movs	r3, #18
 8004d78:	e7d1      	b.n	8004d1e <_dtoa_r+0x25e>
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w
 8004d80:	636f4361 	.word	0x636f4361
 8004d84:	3fd287a7 	.word	0x3fd287a7
 8004d88:	8b60c8b3 	.word	0x8b60c8b3
 8004d8c:	3fc68a28 	.word	0x3fc68a28
 8004d90:	509f79fb 	.word	0x509f79fb
 8004d94:	3fd34413 	.word	0x3fd34413
 8004d98:	080070e9 	.word	0x080070e9
 8004d9c:	08007100 	.word	0x08007100
 8004da0:	7ff00000 	.word	0x7ff00000
 8004da4:	080070e5 	.word	0x080070e5
 8004da8:	080070dc 	.word	0x080070dc
 8004dac:	080070b9 	.word	0x080070b9
 8004db0:	3ff80000 	.word	0x3ff80000
 8004db4:	080071f0 	.word	0x080071f0
 8004db8:	08007158 	.word	0x08007158
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc0:	e7d4      	b.n	8004d6c <_dtoa_r+0x2ac>
 8004dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dc4:	9306      	str	r3, [sp, #24]
 8004dc6:	9308      	str	r3, [sp, #32]
 8004dc8:	e7b7      	b.n	8004d3a <_dtoa_r+0x27a>
 8004dca:	3101      	adds	r1, #1
 8004dcc:	0052      	lsls	r2, r2, #1
 8004dce:	e7b7      	b.n	8004d40 <_dtoa_r+0x280>
 8004dd0:	69eb      	ldr	r3, [r5, #28]
 8004dd2:	9a03      	ldr	r2, [sp, #12]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	9b08      	ldr	r3, [sp, #32]
 8004dd8:	2b0e      	cmp	r3, #14
 8004dda:	f200 80a8 	bhi.w	8004f2e <_dtoa_r+0x46e>
 8004dde:	2c00      	cmp	r4, #0
 8004de0:	f000 80a5 	beq.w	8004f2e <_dtoa_r+0x46e>
 8004de4:	f1bb 0f00 	cmp.w	fp, #0
 8004de8:	dd34      	ble.n	8004e54 <_dtoa_r+0x394>
 8004dea:	4b9a      	ldr	r3, [pc, #616]	; (8005054 <_dtoa_r+0x594>)
 8004dec:	f00b 020f 	and.w	r2, fp, #15
 8004df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e00:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004e04:	d016      	beq.n	8004e34 <_dtoa_r+0x374>
 8004e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e0a:	4b93      	ldr	r3, [pc, #588]	; (8005058 <_dtoa_r+0x598>)
 8004e0c:	2703      	movs	r7, #3
 8004e0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e12:	f7fb fcf7 	bl	8000804 <__aeabi_ddiv>
 8004e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e1a:	f004 040f 	and.w	r4, r4, #15
 8004e1e:	4e8e      	ldr	r6, [pc, #568]	; (8005058 <_dtoa_r+0x598>)
 8004e20:	b954      	cbnz	r4, 8004e38 <_dtoa_r+0x378>
 8004e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e2a:	f7fb fceb 	bl	8000804 <__aeabi_ddiv>
 8004e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e32:	e029      	b.n	8004e88 <_dtoa_r+0x3c8>
 8004e34:	2702      	movs	r7, #2
 8004e36:	e7f2      	b.n	8004e1e <_dtoa_r+0x35e>
 8004e38:	07e1      	lsls	r1, r4, #31
 8004e3a:	d508      	bpl.n	8004e4e <_dtoa_r+0x38e>
 8004e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e44:	f7fb fbb4 	bl	80005b0 <__aeabi_dmul>
 8004e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e4c:	3701      	adds	r7, #1
 8004e4e:	1064      	asrs	r4, r4, #1
 8004e50:	3608      	adds	r6, #8
 8004e52:	e7e5      	b.n	8004e20 <_dtoa_r+0x360>
 8004e54:	f000 80a5 	beq.w	8004fa2 <_dtoa_r+0x4e2>
 8004e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e5c:	f1cb 0400 	rsb	r4, fp, #0
 8004e60:	4b7c      	ldr	r3, [pc, #496]	; (8005054 <_dtoa_r+0x594>)
 8004e62:	f004 020f 	and.w	r2, r4, #15
 8004e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fb9f 	bl	80005b0 <__aeabi_dmul>
 8004e72:	2702      	movs	r7, #2
 8004e74:	2300      	movs	r3, #0
 8004e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e7a:	4e77      	ldr	r6, [pc, #476]	; (8005058 <_dtoa_r+0x598>)
 8004e7c:	1124      	asrs	r4, r4, #4
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	f040 8084 	bne.w	8004f8c <_dtoa_r+0x4cc>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1d2      	bne.n	8004e2e <_dtoa_r+0x36e>
 8004e88:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 8087 	beq.w	8004fa6 <_dtoa_r+0x4e6>
 8004e98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4b6f      	ldr	r3, [pc, #444]	; (800505c <_dtoa_r+0x59c>)
 8004ea0:	f7fb fdf8 	bl	8000a94 <__aeabi_dcmplt>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d07e      	beq.n	8004fa6 <_dtoa_r+0x4e6>
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d07b      	beq.n	8004fa6 <_dtoa_r+0x4e6>
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dd38      	ble.n	8004f26 <_dtoa_r+0x466>
 8004eb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4b69      	ldr	r3, [pc, #420]	; (8005060 <_dtoa_r+0x5a0>)
 8004ebc:	f7fb fb78 	bl	80005b0 <__aeabi_dmul>
 8004ec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ec4:	9c06      	ldr	r4, [sp, #24]
 8004ec6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004eca:	3701      	adds	r7, #1
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f7fb fb05 	bl	80004dc <__aeabi_i2d>
 8004ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ed6:	f7fb fb6b 	bl	80005b0 <__aeabi_dmul>
 8004eda:	2200      	movs	r2, #0
 8004edc:	4b61      	ldr	r3, [pc, #388]	; (8005064 <_dtoa_r+0x5a4>)
 8004ede:	f7fb f9b1 	bl	8000244 <__adddf3>
 8004ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004eea:	9611      	str	r6, [sp, #68]	; 0x44
 8004eec:	2c00      	cmp	r4, #0
 8004eee:	d15d      	bne.n	8004fac <_dtoa_r+0x4ec>
 8004ef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4b5c      	ldr	r3, [pc, #368]	; (8005068 <_dtoa_r+0x5a8>)
 8004ef8:	f7fb f9a2 	bl	8000240 <__aeabi_dsub>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f04:	4633      	mov	r3, r6
 8004f06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f08:	f7fb fde2 	bl	8000ad0 <__aeabi_dcmpgt>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f040 8295 	bne.w	800543c <_dtoa_r+0x97c>
 8004f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f1c:	f7fb fdba 	bl	8000a94 <__aeabi_dcmplt>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f040 8289 	bne.w	8005438 <_dtoa_r+0x978>
 8004f26:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f2c0 8151 	blt.w	80051d8 <_dtoa_r+0x718>
 8004f36:	f1bb 0f0e 	cmp.w	fp, #14
 8004f3a:	f300 814d 	bgt.w	80051d8 <_dtoa_r+0x718>
 8004f3e:	4b45      	ldr	r3, [pc, #276]	; (8005054 <_dtoa_r+0x594>)
 8004f40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f280 80da 	bge.w	8005108 <_dtoa_r+0x648>
 8004f54:	9b08      	ldr	r3, [sp, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f300 80d6 	bgt.w	8005108 <_dtoa_r+0x648>
 8004f5c:	f040 826b 	bne.w	8005436 <_dtoa_r+0x976>
 8004f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f64:	2200      	movs	r2, #0
 8004f66:	4b40      	ldr	r3, [pc, #256]	; (8005068 <_dtoa_r+0x5a8>)
 8004f68:	f7fb fb22 	bl	80005b0 <__aeabi_dmul>
 8004f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f70:	f7fb fda4 	bl	8000abc <__aeabi_dcmpge>
 8004f74:	9c08      	ldr	r4, [sp, #32]
 8004f76:	4626      	mov	r6, r4
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f040 8241 	bne.w	8005400 <_dtoa_r+0x940>
 8004f7e:	2331      	movs	r3, #49	; 0x31
 8004f80:	9f03      	ldr	r7, [sp, #12]
 8004f82:	f10b 0b01 	add.w	fp, fp, #1
 8004f86:	f807 3b01 	strb.w	r3, [r7], #1
 8004f8a:	e23d      	b.n	8005408 <_dtoa_r+0x948>
 8004f8c:	07e2      	lsls	r2, r4, #31
 8004f8e:	d505      	bpl.n	8004f9c <_dtoa_r+0x4dc>
 8004f90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f94:	f7fb fb0c 	bl	80005b0 <__aeabi_dmul>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	3701      	adds	r7, #1
 8004f9c:	1064      	asrs	r4, r4, #1
 8004f9e:	3608      	adds	r6, #8
 8004fa0:	e76d      	b.n	8004e7e <_dtoa_r+0x3be>
 8004fa2:	2702      	movs	r7, #2
 8004fa4:	e770      	b.n	8004e88 <_dtoa_r+0x3c8>
 8004fa6:	46d8      	mov	r8, fp
 8004fa8:	9c08      	ldr	r4, [sp, #32]
 8004faa:	e78f      	b.n	8004ecc <_dtoa_r+0x40c>
 8004fac:	9903      	ldr	r1, [sp, #12]
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <_dtoa_r+0x594>)
 8004fb0:	4421      	add	r1, r4
 8004fb2:	9112      	str	r1, [sp, #72]	; 0x48
 8004fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	d054      	beq.n	8005070 <_dtoa_r+0x5b0>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	4928      	ldr	r1, [pc, #160]	; (800506c <_dtoa_r+0x5ac>)
 8004fca:	f7fb fc1b 	bl	8000804 <__aeabi_ddiv>
 8004fce:	463b      	mov	r3, r7
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	f7fb f935 	bl	8000240 <__aeabi_dsub>
 8004fd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fda:	9f03      	ldr	r7, [sp, #12]
 8004fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe0:	f7fb fd96 	bl	8000b10 <__aeabi_d2iz>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	f7fb fa79 	bl	80004dc <__aeabi_i2d>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff2:	f7fb f925 	bl	8000240 <__aeabi_dsub>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	3430      	adds	r4, #48	; 0x30
 8004ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005004:	f807 4b01 	strb.w	r4, [r7], #1
 8005008:	f7fb fd44 	bl	8000a94 <__aeabi_dcmplt>
 800500c:	2800      	cmp	r0, #0
 800500e:	d173      	bne.n	80050f8 <_dtoa_r+0x638>
 8005010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005014:	2000      	movs	r0, #0
 8005016:	4911      	ldr	r1, [pc, #68]	; (800505c <_dtoa_r+0x59c>)
 8005018:	f7fb f912 	bl	8000240 <__aeabi_dsub>
 800501c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005020:	f7fb fd38 	bl	8000a94 <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	f040 80b6 	bne.w	8005196 <_dtoa_r+0x6d6>
 800502a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800502c:	429f      	cmp	r7, r3
 800502e:	f43f af7a 	beq.w	8004f26 <_dtoa_r+0x466>
 8005032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005036:	2200      	movs	r2, #0
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <_dtoa_r+0x5a0>)
 800503a:	f7fb fab9 	bl	80005b0 <__aeabi_dmul>
 800503e:	2200      	movs	r2, #0
 8005040:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <_dtoa_r+0x5a0>)
 800504a:	f7fb fab1 	bl	80005b0 <__aeabi_dmul>
 800504e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005052:	e7c3      	b.n	8004fdc <_dtoa_r+0x51c>
 8005054:	080071f0 	.word	0x080071f0
 8005058:	080071c8 	.word	0x080071c8
 800505c:	3ff00000 	.word	0x3ff00000
 8005060:	40240000 	.word	0x40240000
 8005064:	401c0000 	.word	0x401c0000
 8005068:	40140000 	.word	0x40140000
 800506c:	3fe00000 	.word	0x3fe00000
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb fa9c 	bl	80005b0 <__aeabi_dmul>
 8005078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800507a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800507e:	9c03      	ldr	r4, [sp, #12]
 8005080:	9314      	str	r3, [sp, #80]	; 0x50
 8005082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005086:	f7fb fd43 	bl	8000b10 <__aeabi_d2iz>
 800508a:	9015      	str	r0, [sp, #84]	; 0x54
 800508c:	f7fb fa26 	bl	80004dc <__aeabi_i2d>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005098:	f7fb f8d2 	bl	8000240 <__aeabi_dsub>
 800509c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800509e:	4606      	mov	r6, r0
 80050a0:	3330      	adds	r3, #48	; 0x30
 80050a2:	f804 3b01 	strb.w	r3, [r4], #1
 80050a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050a8:	460f      	mov	r7, r1
 80050aa:	429c      	cmp	r4, r3
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	d124      	bne.n	80050fc <_dtoa_r+0x63c>
 80050b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050b6:	4baf      	ldr	r3, [pc, #700]	; (8005374 <_dtoa_r+0x8b4>)
 80050b8:	f7fb f8c4 	bl	8000244 <__adddf3>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4630      	mov	r0, r6
 80050c2:	4639      	mov	r1, r7
 80050c4:	f7fb fd04 	bl	8000ad0 <__aeabi_dcmpgt>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d163      	bne.n	8005194 <_dtoa_r+0x6d4>
 80050cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050d0:	2000      	movs	r0, #0
 80050d2:	49a8      	ldr	r1, [pc, #672]	; (8005374 <_dtoa_r+0x8b4>)
 80050d4:	f7fb f8b4 	bl	8000240 <__aeabi_dsub>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f7fb fcd8 	bl	8000a94 <__aeabi_dcmplt>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f43f af1e 	beq.w	8004f26 <_dtoa_r+0x466>
 80050ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050ec:	1e7b      	subs	r3, r7, #1
 80050ee:	9314      	str	r3, [sp, #80]	; 0x50
 80050f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d0f8      	beq.n	80050ea <_dtoa_r+0x62a>
 80050f8:	46c3      	mov	fp, r8
 80050fa:	e03b      	b.n	8005174 <_dtoa_r+0x6b4>
 80050fc:	4b9e      	ldr	r3, [pc, #632]	; (8005378 <_dtoa_r+0x8b8>)
 80050fe:	f7fb fa57 	bl	80005b0 <__aeabi_dmul>
 8005102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005106:	e7bc      	b.n	8005082 <_dtoa_r+0x5c2>
 8005108:	9f03      	ldr	r7, [sp, #12]
 800510a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800510e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005112:	4640      	mov	r0, r8
 8005114:	4649      	mov	r1, r9
 8005116:	f7fb fb75 	bl	8000804 <__aeabi_ddiv>
 800511a:	f7fb fcf9 	bl	8000b10 <__aeabi_d2iz>
 800511e:	4604      	mov	r4, r0
 8005120:	f7fb f9dc 	bl	80004dc <__aeabi_i2d>
 8005124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005128:	f7fb fa42 	bl	80005b0 <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb f884 	bl	8000240 <__aeabi_dsub>
 8005138:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800513c:	f807 6b01 	strb.w	r6, [r7], #1
 8005140:	9e03      	ldr	r6, [sp, #12]
 8005142:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005146:	1bbe      	subs	r6, r7, r6
 8005148:	45b4      	cmp	ip, r6
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	d136      	bne.n	80051be <_dtoa_r+0x6fe>
 8005150:	f7fb f878 	bl	8000244 <__adddf3>
 8005154:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	f7fb fcb8 	bl	8000ad0 <__aeabi_dcmpgt>
 8005160:	bb58      	cbnz	r0, 80051ba <_dtoa_r+0x6fa>
 8005162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005166:	4640      	mov	r0, r8
 8005168:	4649      	mov	r1, r9
 800516a:	f7fb fc89 	bl	8000a80 <__aeabi_dcmpeq>
 800516e:	b108      	cbz	r0, 8005174 <_dtoa_r+0x6b4>
 8005170:	07e3      	lsls	r3, r4, #31
 8005172:	d422      	bmi.n	80051ba <_dtoa_r+0x6fa>
 8005174:	4651      	mov	r1, sl
 8005176:	4628      	mov	r0, r5
 8005178:	f000 fbc2 	bl	8005900 <_Bfree>
 800517c:	2300      	movs	r3, #0
 800517e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005180:	703b      	strb	r3, [r7, #0]
 8005182:	f10b 0301 	add.w	r3, fp, #1
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800518a:	2b00      	cmp	r3, #0
 800518c:	f43f ace6 	beq.w	8004b5c <_dtoa_r+0x9c>
 8005190:	601f      	str	r7, [r3, #0]
 8005192:	e4e3      	b.n	8004b5c <_dtoa_r+0x9c>
 8005194:	4627      	mov	r7, r4
 8005196:	463b      	mov	r3, r7
 8005198:	461f      	mov	r7, r3
 800519a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800519e:	2a39      	cmp	r2, #57	; 0x39
 80051a0:	d107      	bne.n	80051b2 <_dtoa_r+0x6f2>
 80051a2:	9a03      	ldr	r2, [sp, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d1f7      	bne.n	8005198 <_dtoa_r+0x6d8>
 80051a8:	2230      	movs	r2, #48	; 0x30
 80051aa:	9903      	ldr	r1, [sp, #12]
 80051ac:	f108 0801 	add.w	r8, r8, #1
 80051b0:	700a      	strb	r2, [r1, #0]
 80051b2:	781a      	ldrb	r2, [r3, #0]
 80051b4:	3201      	adds	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e79e      	b.n	80050f8 <_dtoa_r+0x638>
 80051ba:	46d8      	mov	r8, fp
 80051bc:	e7eb      	b.n	8005196 <_dtoa_r+0x6d6>
 80051be:	2200      	movs	r2, #0
 80051c0:	4b6d      	ldr	r3, [pc, #436]	; (8005378 <_dtoa_r+0x8b8>)
 80051c2:	f7fb f9f5 	bl	80005b0 <__aeabi_dmul>
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	4680      	mov	r8, r0
 80051cc:	4689      	mov	r9, r1
 80051ce:	f7fb fc57 	bl	8000a80 <__aeabi_dcmpeq>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d09b      	beq.n	800510e <_dtoa_r+0x64e>
 80051d6:	e7cd      	b.n	8005174 <_dtoa_r+0x6b4>
 80051d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051da:	2a00      	cmp	r2, #0
 80051dc:	f000 80c4 	beq.w	8005368 <_dtoa_r+0x8a8>
 80051e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051e2:	2a01      	cmp	r2, #1
 80051e4:	f300 80a8 	bgt.w	8005338 <_dtoa_r+0x878>
 80051e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	f000 80a0 	beq.w	8005330 <_dtoa_r+0x870>
 80051f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051f4:	464f      	mov	r7, r9
 80051f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fa:	2101      	movs	r1, #1
 80051fc:	441a      	add	r2, r3
 80051fe:	4628      	mov	r0, r5
 8005200:	4499      	add	r9, r3
 8005202:	9209      	str	r2, [sp, #36]	; 0x24
 8005204:	f000 fc32 	bl	8005a6c <__i2b>
 8005208:	4606      	mov	r6, r0
 800520a:	b15f      	cbz	r7, 8005224 <_dtoa_r+0x764>
 800520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	dd08      	ble.n	8005224 <_dtoa_r+0x764>
 8005212:	42bb      	cmp	r3, r7
 8005214:	bfa8      	it	ge
 8005216:	463b      	movge	r3, r7
 8005218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800521a:	eba9 0903 	sub.w	r9, r9, r3
 800521e:	1aff      	subs	r7, r7, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	9309      	str	r3, [sp, #36]	; 0x24
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	b1f3      	cbz	r3, 8005266 <_dtoa_r+0x7a6>
 8005228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80a0 	beq.w	8005370 <_dtoa_r+0x8b0>
 8005230:	2c00      	cmp	r4, #0
 8005232:	dd10      	ble.n	8005256 <_dtoa_r+0x796>
 8005234:	4631      	mov	r1, r6
 8005236:	4622      	mov	r2, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fcd5 	bl	8005be8 <__pow5mult>
 800523e:	4652      	mov	r2, sl
 8005240:	4601      	mov	r1, r0
 8005242:	4606      	mov	r6, r0
 8005244:	4628      	mov	r0, r5
 8005246:	f000 fc27 	bl	8005a98 <__multiply>
 800524a:	4680      	mov	r8, r0
 800524c:	4651      	mov	r1, sl
 800524e:	4628      	mov	r0, r5
 8005250:	f000 fb56 	bl	8005900 <_Bfree>
 8005254:	46c2      	mov	sl, r8
 8005256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005258:	1b1a      	subs	r2, r3, r4
 800525a:	d004      	beq.n	8005266 <_dtoa_r+0x7a6>
 800525c:	4651      	mov	r1, sl
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fcc2 	bl	8005be8 <__pow5mult>
 8005264:	4682      	mov	sl, r0
 8005266:	2101      	movs	r1, #1
 8005268:	4628      	mov	r0, r5
 800526a:	f000 fbff 	bl	8005a6c <__i2b>
 800526e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005270:	4604      	mov	r4, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f340 8082 	ble.w	800537c <_dtoa_r+0x8bc>
 8005278:	461a      	mov	r2, r3
 800527a:	4601      	mov	r1, r0
 800527c:	4628      	mov	r0, r5
 800527e:	f000 fcb3 	bl	8005be8 <__pow5mult>
 8005282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005284:	4604      	mov	r4, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	dd7b      	ble.n	8005382 <_dtoa_r+0x8c2>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005294:	6918      	ldr	r0, [r3, #16]
 8005296:	f000 fb9b 	bl	80059d0 <__hi0bits>
 800529a:	f1c0 0020 	rsb	r0, r0, #32
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	4418      	add	r0, r3
 80052a2:	f010 001f 	ands.w	r0, r0, #31
 80052a6:	f000 8092 	beq.w	80053ce <_dtoa_r+0x90e>
 80052aa:	f1c0 0320 	rsb	r3, r0, #32
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	f340 8085 	ble.w	80053be <_dtoa_r+0x8fe>
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	f1c0 001c 	rsb	r0, r0, #28
 80052ba:	4403      	add	r3, r0
 80052bc:	4481      	add	r9, r0
 80052be:	4407      	add	r7, r0
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	f1b9 0f00 	cmp.w	r9, #0
 80052c6:	dd05      	ble.n	80052d4 <_dtoa_r+0x814>
 80052c8:	4651      	mov	r1, sl
 80052ca:	464a      	mov	r2, r9
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fce5 	bl	8005c9c <__lshift>
 80052d2:	4682      	mov	sl, r0
 80052d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dd05      	ble.n	80052e6 <_dtoa_r+0x826>
 80052da:	4621      	mov	r1, r4
 80052dc:	461a      	mov	r2, r3
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fcdc 	bl	8005c9c <__lshift>
 80052e4:	4604      	mov	r4, r0
 80052e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d072      	beq.n	80053d2 <_dtoa_r+0x912>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4650      	mov	r0, sl
 80052f0:	f000 fd40 	bl	8005d74 <__mcmp>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	da6c      	bge.n	80053d2 <_dtoa_r+0x912>
 80052f8:	2300      	movs	r3, #0
 80052fa:	4651      	mov	r1, sl
 80052fc:	220a      	movs	r2, #10
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fb20 	bl	8005944 <__multadd>
 8005304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005306:	4682      	mov	sl, r0
 8005308:	f10b 3bff 	add.w	fp, fp, #4294967295
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 81ac 	beq.w	800566a <_dtoa_r+0xbaa>
 8005312:	2300      	movs	r3, #0
 8005314:	4631      	mov	r1, r6
 8005316:	220a      	movs	r2, #10
 8005318:	4628      	mov	r0, r5
 800531a:	f000 fb13 	bl	8005944 <__multadd>
 800531e:	9b06      	ldr	r3, [sp, #24]
 8005320:	4606      	mov	r6, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	f300 8093 	bgt.w	800544e <_dtoa_r+0x98e>
 8005328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800532a:	2b02      	cmp	r3, #2
 800532c:	dc59      	bgt.n	80053e2 <_dtoa_r+0x922>
 800532e:	e08e      	b.n	800544e <_dtoa_r+0x98e>
 8005330:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005332:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005336:	e75d      	b.n	80051f4 <_dtoa_r+0x734>
 8005338:	9b08      	ldr	r3, [sp, #32]
 800533a:	1e5c      	subs	r4, r3, #1
 800533c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533e:	42a3      	cmp	r3, r4
 8005340:	bfbf      	itttt	lt
 8005342:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005344:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005346:	1ae3      	sublt	r3, r4, r3
 8005348:	18d2      	addlt	r2, r2, r3
 800534a:	bfa8      	it	ge
 800534c:	1b1c      	subge	r4, r3, r4
 800534e:	9b08      	ldr	r3, [sp, #32]
 8005350:	bfbe      	ittt	lt
 8005352:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005354:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005356:	2400      	movlt	r4, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	bfb5      	itete	lt
 800535c:	eba9 0703 	sublt.w	r7, r9, r3
 8005360:	464f      	movge	r7, r9
 8005362:	2300      	movlt	r3, #0
 8005364:	9b08      	ldrge	r3, [sp, #32]
 8005366:	e747      	b.n	80051f8 <_dtoa_r+0x738>
 8005368:	464f      	mov	r7, r9
 800536a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800536c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800536e:	e74c      	b.n	800520a <_dtoa_r+0x74a>
 8005370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005372:	e773      	b.n	800525c <_dtoa_r+0x79c>
 8005374:	3fe00000 	.word	0x3fe00000
 8005378:	40240000 	.word	0x40240000
 800537c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800537e:	2b01      	cmp	r3, #1
 8005380:	dc18      	bgt.n	80053b4 <_dtoa_r+0x8f4>
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	b9b3      	cbnz	r3, 80053b4 <_dtoa_r+0x8f4>
 8005386:	9b05      	ldr	r3, [sp, #20]
 8005388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800538c:	b993      	cbnz	r3, 80053b4 <_dtoa_r+0x8f4>
 800538e:	9b05      	ldr	r3, [sp, #20]
 8005390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005394:	0d1b      	lsrs	r3, r3, #20
 8005396:	051b      	lsls	r3, r3, #20
 8005398:	b17b      	cbz	r3, 80053ba <_dtoa_r+0x8fa>
 800539a:	f04f 0801 	mov.w	r8, #1
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	f109 0901 	add.w	r9, r9, #1
 80053a4:	3301      	adds	r3, #1
 80053a6:	9309      	str	r3, [sp, #36]	; 0x24
 80053a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f47f af6f 	bne.w	800528e <_dtoa_r+0x7ce>
 80053b0:	2001      	movs	r0, #1
 80053b2:	e774      	b.n	800529e <_dtoa_r+0x7de>
 80053b4:	f04f 0800 	mov.w	r8, #0
 80053b8:	e7f6      	b.n	80053a8 <_dtoa_r+0x8e8>
 80053ba:	4698      	mov	r8, r3
 80053bc:	e7f4      	b.n	80053a8 <_dtoa_r+0x8e8>
 80053be:	d080      	beq.n	80052c2 <_dtoa_r+0x802>
 80053c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c2:	331c      	adds	r3, #28
 80053c4:	441a      	add	r2, r3
 80053c6:	4499      	add	r9, r3
 80053c8:	441f      	add	r7, r3
 80053ca:	9209      	str	r2, [sp, #36]	; 0x24
 80053cc:	e779      	b.n	80052c2 <_dtoa_r+0x802>
 80053ce:	4603      	mov	r3, r0
 80053d0:	e7f6      	b.n	80053c0 <_dtoa_r+0x900>
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dc34      	bgt.n	8005442 <_dtoa_r+0x982>
 80053d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053da:	2b02      	cmp	r3, #2
 80053dc:	dd31      	ble.n	8005442 <_dtoa_r+0x982>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	9306      	str	r3, [sp, #24]
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	b963      	cbnz	r3, 8005400 <_dtoa_r+0x940>
 80053e6:	4621      	mov	r1, r4
 80053e8:	2205      	movs	r2, #5
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 faaa 	bl	8005944 <__multadd>
 80053f0:	4601      	mov	r1, r0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4650      	mov	r0, sl
 80053f6:	f000 fcbd 	bl	8005d74 <__mcmp>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	f73f adbf 	bgt.w	8004f7e <_dtoa_r+0x4be>
 8005400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005402:	9f03      	ldr	r7, [sp, #12]
 8005404:	ea6f 0b03 	mvn.w	fp, r3
 8005408:	f04f 0800 	mov.w	r8, #0
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fa76 	bl	8005900 <_Bfree>
 8005414:	2e00      	cmp	r6, #0
 8005416:	f43f aead 	beq.w	8005174 <_dtoa_r+0x6b4>
 800541a:	f1b8 0f00 	cmp.w	r8, #0
 800541e:	d005      	beq.n	800542c <_dtoa_r+0x96c>
 8005420:	45b0      	cmp	r8, r6
 8005422:	d003      	beq.n	800542c <_dtoa_r+0x96c>
 8005424:	4641      	mov	r1, r8
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fa6a 	bl	8005900 <_Bfree>
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	f000 fa66 	bl	8005900 <_Bfree>
 8005434:	e69e      	b.n	8005174 <_dtoa_r+0x6b4>
 8005436:	2400      	movs	r4, #0
 8005438:	4626      	mov	r6, r4
 800543a:	e7e1      	b.n	8005400 <_dtoa_r+0x940>
 800543c:	46c3      	mov	fp, r8
 800543e:	4626      	mov	r6, r4
 8005440:	e59d      	b.n	8004f7e <_dtoa_r+0x4be>
 8005442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80c8 	beq.w	80055da <_dtoa_r+0xb1a>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	9306      	str	r3, [sp, #24]
 800544e:	2f00      	cmp	r7, #0
 8005450:	dd05      	ble.n	800545e <_dtoa_r+0x99e>
 8005452:	4631      	mov	r1, r6
 8005454:	463a      	mov	r2, r7
 8005456:	4628      	mov	r0, r5
 8005458:	f000 fc20 	bl	8005c9c <__lshift>
 800545c:	4606      	mov	r6, r0
 800545e:	f1b8 0f00 	cmp.w	r8, #0
 8005462:	d05b      	beq.n	800551c <_dtoa_r+0xa5c>
 8005464:	4628      	mov	r0, r5
 8005466:	6871      	ldr	r1, [r6, #4]
 8005468:	f000 fa0a 	bl	8005880 <_Balloc>
 800546c:	4607      	mov	r7, r0
 800546e:	b928      	cbnz	r0, 800547c <_dtoa_r+0x9bc>
 8005470:	4602      	mov	r2, r0
 8005472:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005476:	4b81      	ldr	r3, [pc, #516]	; (800567c <_dtoa_r+0xbbc>)
 8005478:	f7ff bb36 	b.w	8004ae8 <_dtoa_r+0x28>
 800547c:	6932      	ldr	r2, [r6, #16]
 800547e:	f106 010c 	add.w	r1, r6, #12
 8005482:	3202      	adds	r2, #2
 8005484:	0092      	lsls	r2, r2, #2
 8005486:	300c      	adds	r0, #12
 8005488:	f000 ff9e 	bl	80063c8 <memcpy>
 800548c:	2201      	movs	r2, #1
 800548e:	4639      	mov	r1, r7
 8005490:	4628      	mov	r0, r5
 8005492:	f000 fc03 	bl	8005c9c <__lshift>
 8005496:	46b0      	mov	r8, r6
 8005498:	4606      	mov	r6, r0
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	9a03      	ldr	r2, [sp, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	9308      	str	r3, [sp, #32]
 80054a2:	9b06      	ldr	r3, [sp, #24]
 80054a4:	4413      	add	r3, r2
 80054a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80054a8:	9b04      	ldr	r3, [sp, #16]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	930a      	str	r3, [sp, #40]	; 0x28
 80054b0:	9b08      	ldr	r3, [sp, #32]
 80054b2:	4621      	mov	r1, r4
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4650      	mov	r0, sl
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	f7ff fa78 	bl	80049ae <quorem>
 80054be:	4641      	mov	r1, r8
 80054c0:	9006      	str	r0, [sp, #24]
 80054c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054c6:	4650      	mov	r0, sl
 80054c8:	f000 fc54 	bl	8005d74 <__mcmp>
 80054cc:	4632      	mov	r2, r6
 80054ce:	9009      	str	r0, [sp, #36]	; 0x24
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fc6a 	bl	8005dac <__mdiff>
 80054d8:	68c2      	ldr	r2, [r0, #12]
 80054da:	4607      	mov	r7, r0
 80054dc:	bb02      	cbnz	r2, 8005520 <_dtoa_r+0xa60>
 80054de:	4601      	mov	r1, r0
 80054e0:	4650      	mov	r0, sl
 80054e2:	f000 fc47 	bl	8005d74 <__mcmp>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4639      	mov	r1, r7
 80054ea:	4628      	mov	r0, r5
 80054ec:	920c      	str	r2, [sp, #48]	; 0x30
 80054ee:	f000 fa07 	bl	8005900 <_Bfree>
 80054f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054f6:	9f08      	ldr	r7, [sp, #32]
 80054f8:	ea43 0102 	orr.w	r1, r3, r2
 80054fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054fe:	4319      	orrs	r1, r3
 8005500:	d110      	bne.n	8005524 <_dtoa_r+0xa64>
 8005502:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005506:	d029      	beq.n	800555c <_dtoa_r+0xa9c>
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	dd02      	ble.n	8005514 <_dtoa_r+0xa54>
 800550e:	9b06      	ldr	r3, [sp, #24]
 8005510:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	f883 9000 	strb.w	r9, [r3]
 800551a:	e777      	b.n	800540c <_dtoa_r+0x94c>
 800551c:	4630      	mov	r0, r6
 800551e:	e7ba      	b.n	8005496 <_dtoa_r+0x9d6>
 8005520:	2201      	movs	r2, #1
 8005522:	e7e1      	b.n	80054e8 <_dtoa_r+0xa28>
 8005524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	db04      	blt.n	8005534 <_dtoa_r+0xa74>
 800552a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800552c:	430b      	orrs	r3, r1
 800552e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005530:	430b      	orrs	r3, r1
 8005532:	d120      	bne.n	8005576 <_dtoa_r+0xab6>
 8005534:	2a00      	cmp	r2, #0
 8005536:	dded      	ble.n	8005514 <_dtoa_r+0xa54>
 8005538:	4651      	mov	r1, sl
 800553a:	2201      	movs	r2, #1
 800553c:	4628      	mov	r0, r5
 800553e:	f000 fbad 	bl	8005c9c <__lshift>
 8005542:	4621      	mov	r1, r4
 8005544:	4682      	mov	sl, r0
 8005546:	f000 fc15 	bl	8005d74 <__mcmp>
 800554a:	2800      	cmp	r0, #0
 800554c:	dc03      	bgt.n	8005556 <_dtoa_r+0xa96>
 800554e:	d1e1      	bne.n	8005514 <_dtoa_r+0xa54>
 8005550:	f019 0f01 	tst.w	r9, #1
 8005554:	d0de      	beq.n	8005514 <_dtoa_r+0xa54>
 8005556:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800555a:	d1d8      	bne.n	800550e <_dtoa_r+0xa4e>
 800555c:	2339      	movs	r3, #57	; 0x39
 800555e:	9a04      	ldr	r2, [sp, #16]
 8005560:	7013      	strb	r3, [r2, #0]
 8005562:	463b      	mov	r3, r7
 8005564:	461f      	mov	r7, r3
 8005566:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800556a:	3b01      	subs	r3, #1
 800556c:	2a39      	cmp	r2, #57	; 0x39
 800556e:	d06b      	beq.n	8005648 <_dtoa_r+0xb88>
 8005570:	3201      	adds	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e74a      	b.n	800540c <_dtoa_r+0x94c>
 8005576:	2a00      	cmp	r2, #0
 8005578:	dd07      	ble.n	800558a <_dtoa_r+0xaca>
 800557a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800557e:	d0ed      	beq.n	800555c <_dtoa_r+0xa9c>
 8005580:	9a04      	ldr	r2, [sp, #16]
 8005582:	f109 0301 	add.w	r3, r9, #1
 8005586:	7013      	strb	r3, [r2, #0]
 8005588:	e740      	b.n	800540c <_dtoa_r+0x94c>
 800558a:	9b08      	ldr	r3, [sp, #32]
 800558c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800558e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005592:	4293      	cmp	r3, r2
 8005594:	d042      	beq.n	800561c <_dtoa_r+0xb5c>
 8005596:	4651      	mov	r1, sl
 8005598:	2300      	movs	r3, #0
 800559a:	220a      	movs	r2, #10
 800559c:	4628      	mov	r0, r5
 800559e:	f000 f9d1 	bl	8005944 <__multadd>
 80055a2:	45b0      	cmp	r8, r6
 80055a4:	4682      	mov	sl, r0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f04f 020a 	mov.w	r2, #10
 80055ae:	4641      	mov	r1, r8
 80055b0:	4628      	mov	r0, r5
 80055b2:	d107      	bne.n	80055c4 <_dtoa_r+0xb04>
 80055b4:	f000 f9c6 	bl	8005944 <__multadd>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4606      	mov	r6, r0
 80055bc:	9b08      	ldr	r3, [sp, #32]
 80055be:	3301      	adds	r3, #1
 80055c0:	9308      	str	r3, [sp, #32]
 80055c2:	e775      	b.n	80054b0 <_dtoa_r+0x9f0>
 80055c4:	f000 f9be 	bl	8005944 <__multadd>
 80055c8:	4631      	mov	r1, r6
 80055ca:	4680      	mov	r8, r0
 80055cc:	2300      	movs	r3, #0
 80055ce:	220a      	movs	r2, #10
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f9b7 	bl	8005944 <__multadd>
 80055d6:	4606      	mov	r6, r0
 80055d8:	e7f0      	b.n	80055bc <_dtoa_r+0xafc>
 80055da:	9b08      	ldr	r3, [sp, #32]
 80055dc:	9306      	str	r3, [sp, #24]
 80055de:	9f03      	ldr	r7, [sp, #12]
 80055e0:	4621      	mov	r1, r4
 80055e2:	4650      	mov	r0, sl
 80055e4:	f7ff f9e3 	bl	80049ae <quorem>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055ee:	f807 9b01 	strb.w	r9, [r7], #1
 80055f2:	1afa      	subs	r2, r7, r3
 80055f4:	9b06      	ldr	r3, [sp, #24]
 80055f6:	4293      	cmp	r3, r2
 80055f8:	dd07      	ble.n	800560a <_dtoa_r+0xb4a>
 80055fa:	4651      	mov	r1, sl
 80055fc:	2300      	movs	r3, #0
 80055fe:	220a      	movs	r2, #10
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f99f 	bl	8005944 <__multadd>
 8005606:	4682      	mov	sl, r0
 8005608:	e7ea      	b.n	80055e0 <_dtoa_r+0xb20>
 800560a:	9b06      	ldr	r3, [sp, #24]
 800560c:	f04f 0800 	mov.w	r8, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	bfcc      	ite	gt
 8005614:	461f      	movgt	r7, r3
 8005616:	2701      	movle	r7, #1
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	441f      	add	r7, r3
 800561c:	4651      	mov	r1, sl
 800561e:	2201      	movs	r2, #1
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fb3b 	bl	8005c9c <__lshift>
 8005626:	4621      	mov	r1, r4
 8005628:	4682      	mov	sl, r0
 800562a:	f000 fba3 	bl	8005d74 <__mcmp>
 800562e:	2800      	cmp	r0, #0
 8005630:	dc97      	bgt.n	8005562 <_dtoa_r+0xaa2>
 8005632:	d102      	bne.n	800563a <_dtoa_r+0xb7a>
 8005634:	f019 0f01 	tst.w	r9, #1
 8005638:	d193      	bne.n	8005562 <_dtoa_r+0xaa2>
 800563a:	463b      	mov	r3, r7
 800563c:	461f      	mov	r7, r3
 800563e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005642:	2a30      	cmp	r2, #48	; 0x30
 8005644:	d0fa      	beq.n	800563c <_dtoa_r+0xb7c>
 8005646:	e6e1      	b.n	800540c <_dtoa_r+0x94c>
 8005648:	9a03      	ldr	r2, [sp, #12]
 800564a:	429a      	cmp	r2, r3
 800564c:	d18a      	bne.n	8005564 <_dtoa_r+0xaa4>
 800564e:	2331      	movs	r3, #49	; 0x31
 8005650:	f10b 0b01 	add.w	fp, fp, #1
 8005654:	e797      	b.n	8005586 <_dtoa_r+0xac6>
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <_dtoa_r+0xbc0>)
 8005658:	f7ff ba9f 	b.w	8004b9a <_dtoa_r+0xda>
 800565c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800565e:	2b00      	cmp	r3, #0
 8005660:	f47f aa77 	bne.w	8004b52 <_dtoa_r+0x92>
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <_dtoa_r+0xbc4>)
 8005666:	f7ff ba98 	b.w	8004b9a <_dtoa_r+0xda>
 800566a:	9b06      	ldr	r3, [sp, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	dcb6      	bgt.n	80055de <_dtoa_r+0xb1e>
 8005670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005672:	2b02      	cmp	r3, #2
 8005674:	f73f aeb5 	bgt.w	80053e2 <_dtoa_r+0x922>
 8005678:	e7b1      	b.n	80055de <_dtoa_r+0xb1e>
 800567a:	bf00      	nop
 800567c:	08007158 	.word	0x08007158
 8005680:	080070b8 	.word	0x080070b8
 8005684:	080070dc 	.word	0x080070dc

08005688 <_free_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4605      	mov	r5, r0
 800568c:	2900      	cmp	r1, #0
 800568e:	d040      	beq.n	8005712 <_free_r+0x8a>
 8005690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005694:	1f0c      	subs	r4, r1, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	bfb8      	it	lt
 800569a:	18e4      	addlt	r4, r4, r3
 800569c:	f000 f8e4 	bl	8005868 <__malloc_lock>
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <_free_r+0x8c>)
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	b933      	cbnz	r3, 80056b4 <_free_r+0x2c>
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	6014      	str	r4, [r2, #0]
 80056aa:	4628      	mov	r0, r5
 80056ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b0:	f000 b8e0 	b.w	8005874 <__malloc_unlock>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d908      	bls.n	80056ca <_free_r+0x42>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	1821      	adds	r1, r4, r0
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf01      	itttt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	1809      	addeq	r1, r1, r0
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	e7ed      	b.n	80056a6 <_free_r+0x1e>
 80056ca:	461a      	mov	r2, r3
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b10b      	cbz	r3, 80056d4 <_free_r+0x4c>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x42>
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	1850      	adds	r0, r2, r1
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x6c>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	4401      	add	r1, r0
 80056e0:	1850      	adds	r0, r2, r1
 80056e2:	4283      	cmp	r3, r0
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	d1e0      	bne.n	80056aa <_free_r+0x22>
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4408      	add	r0, r1
 80056ee:	6010      	str	r0, [r2, #0]
 80056f0:	6053      	str	r3, [r2, #4]
 80056f2:	e7da      	b.n	80056aa <_free_r+0x22>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x74>
 80056f6:	230c      	movs	r3, #12
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	e7d6      	b.n	80056aa <_free_r+0x22>
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	1821      	adds	r1, r4, r0
 8005700:	428b      	cmp	r3, r1
 8005702:	bf01      	itttt	eq
 8005704:	6819      	ldreq	r1, [r3, #0]
 8005706:	685b      	ldreq	r3, [r3, #4]
 8005708:	1809      	addeq	r1, r1, r0
 800570a:	6021      	streq	r1, [r4, #0]
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	6054      	str	r4, [r2, #4]
 8005710:	e7cb      	b.n	80056aa <_free_r+0x22>
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	200003f4 	.word	0x200003f4

08005718 <malloc>:
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <malloc+0xc>)
 800571a:	4601      	mov	r1, r0
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	f000 b823 	b.w	8005768 <_malloc_r>
 8005722:	bf00      	nop
 8005724:	20000064 	.word	0x20000064

08005728 <sbrk_aligned>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4e0e      	ldr	r6, [pc, #56]	; (8005764 <sbrk_aligned+0x3c>)
 800572c:	460c      	mov	r4, r1
 800572e:	6831      	ldr	r1, [r6, #0]
 8005730:	4605      	mov	r5, r0
 8005732:	b911      	cbnz	r1, 800573a <sbrk_aligned+0x12>
 8005734:	f000 fe38 	bl	80063a8 <_sbrk_r>
 8005738:	6030      	str	r0, [r6, #0]
 800573a:	4621      	mov	r1, r4
 800573c:	4628      	mov	r0, r5
 800573e:	f000 fe33 	bl	80063a8 <_sbrk_r>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d00a      	beq.n	800575c <sbrk_aligned+0x34>
 8005746:	1cc4      	adds	r4, r0, #3
 8005748:	f024 0403 	bic.w	r4, r4, #3
 800574c:	42a0      	cmp	r0, r4
 800574e:	d007      	beq.n	8005760 <sbrk_aligned+0x38>
 8005750:	1a21      	subs	r1, r4, r0
 8005752:	4628      	mov	r0, r5
 8005754:	f000 fe28 	bl	80063a8 <_sbrk_r>
 8005758:	3001      	adds	r0, #1
 800575a:	d101      	bne.n	8005760 <sbrk_aligned+0x38>
 800575c:	f04f 34ff 	mov.w	r4, #4294967295
 8005760:	4620      	mov	r0, r4
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	200003f8 	.word	0x200003f8

08005768 <_malloc_r>:
 8005768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800576c:	1ccd      	adds	r5, r1, #3
 800576e:	f025 0503 	bic.w	r5, r5, #3
 8005772:	3508      	adds	r5, #8
 8005774:	2d0c      	cmp	r5, #12
 8005776:	bf38      	it	cc
 8005778:	250c      	movcc	r5, #12
 800577a:	2d00      	cmp	r5, #0
 800577c:	4607      	mov	r7, r0
 800577e:	db01      	blt.n	8005784 <_malloc_r+0x1c>
 8005780:	42a9      	cmp	r1, r5
 8005782:	d905      	bls.n	8005790 <_malloc_r+0x28>
 8005784:	230c      	movs	r3, #12
 8005786:	2600      	movs	r6, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4630      	mov	r0, r6
 800578c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005790:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005864 <_malloc_r+0xfc>
 8005794:	f000 f868 	bl	8005868 <__malloc_lock>
 8005798:	f8d8 3000 	ldr.w	r3, [r8]
 800579c:	461c      	mov	r4, r3
 800579e:	bb5c      	cbnz	r4, 80057f8 <_malloc_r+0x90>
 80057a0:	4629      	mov	r1, r5
 80057a2:	4638      	mov	r0, r7
 80057a4:	f7ff ffc0 	bl	8005728 <sbrk_aligned>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	4604      	mov	r4, r0
 80057ac:	d155      	bne.n	800585a <_malloc_r+0xf2>
 80057ae:	f8d8 4000 	ldr.w	r4, [r8]
 80057b2:	4626      	mov	r6, r4
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	d145      	bne.n	8005844 <_malloc_r+0xdc>
 80057b8:	2c00      	cmp	r4, #0
 80057ba:	d048      	beq.n	800584e <_malloc_r+0xe6>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	4631      	mov	r1, r6
 80057c0:	4638      	mov	r0, r7
 80057c2:	eb04 0903 	add.w	r9, r4, r3
 80057c6:	f000 fdef 	bl	80063a8 <_sbrk_r>
 80057ca:	4581      	cmp	r9, r0
 80057cc:	d13f      	bne.n	800584e <_malloc_r+0xe6>
 80057ce:	6821      	ldr	r1, [r4, #0]
 80057d0:	4638      	mov	r0, r7
 80057d2:	1a6d      	subs	r5, r5, r1
 80057d4:	4629      	mov	r1, r5
 80057d6:	f7ff ffa7 	bl	8005728 <sbrk_aligned>
 80057da:	3001      	adds	r0, #1
 80057dc:	d037      	beq.n	800584e <_malloc_r+0xe6>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	442b      	add	r3, r5
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	f8d8 3000 	ldr.w	r3, [r8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d038      	beq.n	800585e <_malloc_r+0xf6>
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	42a2      	cmp	r2, r4
 80057f0:	d12b      	bne.n	800584a <_malloc_r+0xe2>
 80057f2:	2200      	movs	r2, #0
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e00f      	b.n	8005818 <_malloc_r+0xb0>
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	1b52      	subs	r2, r2, r5
 80057fc:	d41f      	bmi.n	800583e <_malloc_r+0xd6>
 80057fe:	2a0b      	cmp	r2, #11
 8005800:	d917      	bls.n	8005832 <_malloc_r+0xca>
 8005802:	1961      	adds	r1, r4, r5
 8005804:	42a3      	cmp	r3, r4
 8005806:	6025      	str	r5, [r4, #0]
 8005808:	bf18      	it	ne
 800580a:	6059      	strne	r1, [r3, #4]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	bf08      	it	eq
 8005810:	f8c8 1000 	streq.w	r1, [r8]
 8005814:	5162      	str	r2, [r4, r5]
 8005816:	604b      	str	r3, [r1, #4]
 8005818:	4638      	mov	r0, r7
 800581a:	f104 060b 	add.w	r6, r4, #11
 800581e:	f000 f829 	bl	8005874 <__malloc_unlock>
 8005822:	f026 0607 	bic.w	r6, r6, #7
 8005826:	1d23      	adds	r3, r4, #4
 8005828:	1af2      	subs	r2, r6, r3
 800582a:	d0ae      	beq.n	800578a <_malloc_r+0x22>
 800582c:	1b9b      	subs	r3, r3, r6
 800582e:	50a3      	str	r3, [r4, r2]
 8005830:	e7ab      	b.n	800578a <_malloc_r+0x22>
 8005832:	42a3      	cmp	r3, r4
 8005834:	6862      	ldr	r2, [r4, #4]
 8005836:	d1dd      	bne.n	80057f4 <_malloc_r+0x8c>
 8005838:	f8c8 2000 	str.w	r2, [r8]
 800583c:	e7ec      	b.n	8005818 <_malloc_r+0xb0>
 800583e:	4623      	mov	r3, r4
 8005840:	6864      	ldr	r4, [r4, #4]
 8005842:	e7ac      	b.n	800579e <_malloc_r+0x36>
 8005844:	4634      	mov	r4, r6
 8005846:	6876      	ldr	r6, [r6, #4]
 8005848:	e7b4      	b.n	80057b4 <_malloc_r+0x4c>
 800584a:	4613      	mov	r3, r2
 800584c:	e7cc      	b.n	80057e8 <_malloc_r+0x80>
 800584e:	230c      	movs	r3, #12
 8005850:	4638      	mov	r0, r7
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	f000 f80e 	bl	8005874 <__malloc_unlock>
 8005858:	e797      	b.n	800578a <_malloc_r+0x22>
 800585a:	6025      	str	r5, [r4, #0]
 800585c:	e7dc      	b.n	8005818 <_malloc_r+0xb0>
 800585e:	605b      	str	r3, [r3, #4]
 8005860:	deff      	udf	#255	; 0xff
 8005862:	bf00      	nop
 8005864:	200003f4 	.word	0x200003f4

08005868 <__malloc_lock>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__malloc_lock+0x8>)
 800586a:	f7ff b890 	b.w	800498e <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	200003f0 	.word	0x200003f0

08005874 <__malloc_unlock>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__malloc_unlock+0x8>)
 8005876:	f7ff b88b 	b.w	8004990 <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	200003f0 	.word	0x200003f0

08005880 <_Balloc>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	69c6      	ldr	r6, [r0, #28]
 8005884:	4604      	mov	r4, r0
 8005886:	460d      	mov	r5, r1
 8005888:	b976      	cbnz	r6, 80058a8 <_Balloc+0x28>
 800588a:	2010      	movs	r0, #16
 800588c:	f7ff ff44 	bl	8005718 <malloc>
 8005890:	4602      	mov	r2, r0
 8005892:	61e0      	str	r0, [r4, #28]
 8005894:	b920      	cbnz	r0, 80058a0 <_Balloc+0x20>
 8005896:	216b      	movs	r1, #107	; 0x6b
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <_Balloc+0x78>)
 800589a:	4818      	ldr	r0, [pc, #96]	; (80058fc <_Balloc+0x7c>)
 800589c:	f000 fda2 	bl	80063e4 <__assert_func>
 80058a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058a4:	6006      	str	r6, [r0, #0]
 80058a6:	60c6      	str	r6, [r0, #12]
 80058a8:	69e6      	ldr	r6, [r4, #28]
 80058aa:	68f3      	ldr	r3, [r6, #12]
 80058ac:	b183      	cbz	r3, 80058d0 <_Balloc+0x50>
 80058ae:	69e3      	ldr	r3, [r4, #28]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058b6:	b9b8      	cbnz	r0, 80058e8 <_Balloc+0x68>
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f605 	lsl.w	r6, r1, r5
 80058be:	1d72      	adds	r2, r6, #5
 80058c0:	4620      	mov	r0, r4
 80058c2:	0092      	lsls	r2, r2, #2
 80058c4:	f000 fdac 	bl	8006420 <_calloc_r>
 80058c8:	b160      	cbz	r0, 80058e4 <_Balloc+0x64>
 80058ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ce:	e00e      	b.n	80058ee <_Balloc+0x6e>
 80058d0:	2221      	movs	r2, #33	; 0x21
 80058d2:	2104      	movs	r1, #4
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fda3 	bl	8006420 <_calloc_r>
 80058da:	69e3      	ldr	r3, [r4, #28]
 80058dc:	60f0      	str	r0, [r6, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e4      	bne.n	80058ae <_Balloc+0x2e>
 80058e4:	2000      	movs	r0, #0
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	6802      	ldr	r2, [r0, #0]
 80058ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058ee:	2300      	movs	r3, #0
 80058f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058f4:	e7f7      	b.n	80058e6 <_Balloc+0x66>
 80058f6:	bf00      	nop
 80058f8:	080070e9 	.word	0x080070e9
 80058fc:	08007169 	.word	0x08007169

08005900 <_Bfree>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	69c6      	ldr	r6, [r0, #28]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b976      	cbnz	r6, 8005928 <_Bfree+0x28>
 800590a:	2010      	movs	r0, #16
 800590c:	f7ff ff04 	bl	8005718 <malloc>
 8005910:	4602      	mov	r2, r0
 8005912:	61e8      	str	r0, [r5, #28]
 8005914:	b920      	cbnz	r0, 8005920 <_Bfree+0x20>
 8005916:	218f      	movs	r1, #143	; 0x8f
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <_Bfree+0x3c>)
 800591a:	4809      	ldr	r0, [pc, #36]	; (8005940 <_Bfree+0x40>)
 800591c:	f000 fd62 	bl	80063e4 <__assert_func>
 8005920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005924:	6006      	str	r6, [r0, #0]
 8005926:	60c6      	str	r6, [r0, #12]
 8005928:	b13c      	cbz	r4, 800593a <_Bfree+0x3a>
 800592a:	69eb      	ldr	r3, [r5, #28]
 800592c:	6862      	ldr	r2, [r4, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005934:	6021      	str	r1, [r4, #0]
 8005936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	080070e9 	.word	0x080070e9
 8005940:	08007169 	.word	0x08007169

08005944 <__multadd>:
 8005944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005948:	4607      	mov	r7, r0
 800594a:	460c      	mov	r4, r1
 800594c:	461e      	mov	r6, r3
 800594e:	2000      	movs	r0, #0
 8005950:	690d      	ldr	r5, [r1, #16]
 8005952:	f101 0c14 	add.w	ip, r1, #20
 8005956:	f8dc 3000 	ldr.w	r3, [ip]
 800595a:	3001      	adds	r0, #1
 800595c:	b299      	uxth	r1, r3
 800595e:	fb02 6101 	mla	r1, r2, r1, r6
 8005962:	0c1e      	lsrs	r6, r3, #16
 8005964:	0c0b      	lsrs	r3, r1, #16
 8005966:	fb02 3306 	mla	r3, r2, r6, r3
 800596a:	b289      	uxth	r1, r1
 800596c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005970:	4285      	cmp	r5, r0
 8005972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005976:	f84c 1b04 	str.w	r1, [ip], #4
 800597a:	dcec      	bgt.n	8005956 <__multadd+0x12>
 800597c:	b30e      	cbz	r6, 80059c2 <__multadd+0x7e>
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	42ab      	cmp	r3, r5
 8005982:	dc19      	bgt.n	80059b8 <__multadd+0x74>
 8005984:	6861      	ldr	r1, [r4, #4]
 8005986:	4638      	mov	r0, r7
 8005988:	3101      	adds	r1, #1
 800598a:	f7ff ff79 	bl	8005880 <_Balloc>
 800598e:	4680      	mov	r8, r0
 8005990:	b928      	cbnz	r0, 800599e <__multadd+0x5a>
 8005992:	4602      	mov	r2, r0
 8005994:	21ba      	movs	r1, #186	; 0xba
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <__multadd+0x84>)
 8005998:	480c      	ldr	r0, [pc, #48]	; (80059cc <__multadd+0x88>)
 800599a:	f000 fd23 	bl	80063e4 <__assert_func>
 800599e:	6922      	ldr	r2, [r4, #16]
 80059a0:	f104 010c 	add.w	r1, r4, #12
 80059a4:	3202      	adds	r2, #2
 80059a6:	0092      	lsls	r2, r2, #2
 80059a8:	300c      	adds	r0, #12
 80059aa:	f000 fd0d 	bl	80063c8 <memcpy>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff ffa5 	bl	8005900 <_Bfree>
 80059b6:	4644      	mov	r4, r8
 80059b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059bc:	3501      	adds	r5, #1
 80059be:	615e      	str	r6, [r3, #20]
 80059c0:	6125      	str	r5, [r4, #16]
 80059c2:	4620      	mov	r0, r4
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	08007158 	.word	0x08007158
 80059cc:	08007169 	.word	0x08007169

080059d0 <__hi0bits>:
 80059d0:	0c02      	lsrs	r2, r0, #16
 80059d2:	0412      	lsls	r2, r2, #16
 80059d4:	4603      	mov	r3, r0
 80059d6:	b9ca      	cbnz	r2, 8005a0c <__hi0bits+0x3c>
 80059d8:	0403      	lsls	r3, r0, #16
 80059da:	2010      	movs	r0, #16
 80059dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059e0:	bf04      	itt	eq
 80059e2:	021b      	lsleq	r3, r3, #8
 80059e4:	3008      	addeq	r0, #8
 80059e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059ea:	bf04      	itt	eq
 80059ec:	011b      	lsleq	r3, r3, #4
 80059ee:	3004      	addeq	r0, #4
 80059f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059f4:	bf04      	itt	eq
 80059f6:	009b      	lsleq	r3, r3, #2
 80059f8:	3002      	addeq	r0, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	db05      	blt.n	8005a0a <__hi0bits+0x3a>
 80059fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a02:	f100 0001 	add.w	r0, r0, #1
 8005a06:	bf08      	it	eq
 8005a08:	2020      	moveq	r0, #32
 8005a0a:	4770      	bx	lr
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e7e5      	b.n	80059dc <__hi0bits+0xc>

08005a10 <__lo0bits>:
 8005a10:	6803      	ldr	r3, [r0, #0]
 8005a12:	4602      	mov	r2, r0
 8005a14:	f013 0007 	ands.w	r0, r3, #7
 8005a18:	d00b      	beq.n	8005a32 <__lo0bits+0x22>
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	d421      	bmi.n	8005a62 <__lo0bits+0x52>
 8005a1e:	0798      	lsls	r0, r3, #30
 8005a20:	bf49      	itett	mi
 8005a22:	085b      	lsrmi	r3, r3, #1
 8005a24:	089b      	lsrpl	r3, r3, #2
 8005a26:	2001      	movmi	r0, #1
 8005a28:	6013      	strmi	r3, [r2, #0]
 8005a2a:	bf5c      	itt	pl
 8005a2c:	2002      	movpl	r0, #2
 8005a2e:	6013      	strpl	r3, [r2, #0]
 8005a30:	4770      	bx	lr
 8005a32:	b299      	uxth	r1, r3
 8005a34:	b909      	cbnz	r1, 8005a3a <__lo0bits+0x2a>
 8005a36:	2010      	movs	r0, #16
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	b2d9      	uxtb	r1, r3
 8005a3c:	b909      	cbnz	r1, 8005a42 <__lo0bits+0x32>
 8005a3e:	3008      	adds	r0, #8
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	0719      	lsls	r1, r3, #28
 8005a44:	bf04      	itt	eq
 8005a46:	091b      	lsreq	r3, r3, #4
 8005a48:	3004      	addeq	r0, #4
 8005a4a:	0799      	lsls	r1, r3, #30
 8005a4c:	bf04      	itt	eq
 8005a4e:	089b      	lsreq	r3, r3, #2
 8005a50:	3002      	addeq	r0, #2
 8005a52:	07d9      	lsls	r1, r3, #31
 8005a54:	d403      	bmi.n	8005a5e <__lo0bits+0x4e>
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	f100 0001 	add.w	r0, r0, #1
 8005a5c:	d003      	beq.n	8005a66 <__lo0bits+0x56>
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	4770      	bx	lr
 8005a62:	2000      	movs	r0, #0
 8005a64:	4770      	bx	lr
 8005a66:	2020      	movs	r0, #32
 8005a68:	4770      	bx	lr
	...

08005a6c <__i2b>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	460c      	mov	r4, r1
 8005a70:	2101      	movs	r1, #1
 8005a72:	f7ff ff05 	bl	8005880 <_Balloc>
 8005a76:	4602      	mov	r2, r0
 8005a78:	b928      	cbnz	r0, 8005a86 <__i2b+0x1a>
 8005a7a:	f240 1145 	movw	r1, #325	; 0x145
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <__i2b+0x24>)
 8005a80:	4804      	ldr	r0, [pc, #16]	; (8005a94 <__i2b+0x28>)
 8005a82:	f000 fcaf 	bl	80063e4 <__assert_func>
 8005a86:	2301      	movs	r3, #1
 8005a88:	6144      	str	r4, [r0, #20]
 8005a8a:	6103      	str	r3, [r0, #16]
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	bf00      	nop
 8005a90:	08007158 	.word	0x08007158
 8005a94:	08007169 	.word	0x08007169

08005a98 <__multiply>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	4691      	mov	r9, r2
 8005a9e:	690a      	ldr	r2, [r1, #16]
 8005aa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	bfbe      	ittt	lt
 8005aaa:	460b      	movlt	r3, r1
 8005aac:	464c      	movlt	r4, r9
 8005aae:	4699      	movlt	r9, r3
 8005ab0:	6927      	ldr	r7, [r4, #16]
 8005ab2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ab6:	68a3      	ldr	r3, [r4, #8]
 8005ab8:	6861      	ldr	r1, [r4, #4]
 8005aba:	eb07 060a 	add.w	r6, r7, sl
 8005abe:	42b3      	cmp	r3, r6
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	bfb8      	it	lt
 8005ac4:	3101      	addlt	r1, #1
 8005ac6:	f7ff fedb 	bl	8005880 <_Balloc>
 8005aca:	b930      	cbnz	r0, 8005ada <__multiply+0x42>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005ad2:	4b43      	ldr	r3, [pc, #268]	; (8005be0 <__multiply+0x148>)
 8005ad4:	4843      	ldr	r0, [pc, #268]	; (8005be4 <__multiply+0x14c>)
 8005ad6:	f000 fc85 	bl	80063e4 <__assert_func>
 8005ada:	f100 0514 	add.w	r5, r0, #20
 8005ade:	462b      	mov	r3, r5
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ae6:	4543      	cmp	r3, r8
 8005ae8:	d321      	bcc.n	8005b2e <__multiply+0x96>
 8005aea:	f104 0314 	add.w	r3, r4, #20
 8005aee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005af2:	f109 0314 	add.w	r3, r9, #20
 8005af6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005afa:	9202      	str	r2, [sp, #8]
 8005afc:	1b3a      	subs	r2, r7, r4
 8005afe:	3a15      	subs	r2, #21
 8005b00:	f022 0203 	bic.w	r2, r2, #3
 8005b04:	3204      	adds	r2, #4
 8005b06:	f104 0115 	add.w	r1, r4, #21
 8005b0a:	428f      	cmp	r7, r1
 8005b0c:	bf38      	it	cc
 8005b0e:	2204      	movcc	r2, #4
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9a02      	ldr	r2, [sp, #8]
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d80c      	bhi.n	8005b34 <__multiply+0x9c>
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	dd03      	ble.n	8005b26 <__multiply+0x8e>
 8005b1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d05a      	beq.n	8005bdc <__multiply+0x144>
 8005b26:	6106      	str	r6, [r0, #16]
 8005b28:	b005      	add	sp, #20
 8005b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2e:	f843 2b04 	str.w	r2, [r3], #4
 8005b32:	e7d8      	b.n	8005ae6 <__multiply+0x4e>
 8005b34:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b38:	f1ba 0f00 	cmp.w	sl, #0
 8005b3c:	d023      	beq.n	8005b86 <__multiply+0xee>
 8005b3e:	46a9      	mov	r9, r5
 8005b40:	f04f 0c00 	mov.w	ip, #0
 8005b44:	f104 0e14 	add.w	lr, r4, #20
 8005b48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b4c:	f8d9 1000 	ldr.w	r1, [r9]
 8005b50:	fa1f fb82 	uxth.w	fp, r2
 8005b54:	b289      	uxth	r1, r1
 8005b56:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b5a:	4461      	add	r1, ip
 8005b5c:	f8d9 c000 	ldr.w	ip, [r9]
 8005b60:	0c12      	lsrs	r2, r2, #16
 8005b62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b66:	fb0a c202 	mla	r2, sl, r2, ip
 8005b6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b6e:	b289      	uxth	r1, r1
 8005b70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b74:	4577      	cmp	r7, lr
 8005b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b7a:	f849 1b04 	str.w	r1, [r9], #4
 8005b7e:	d8e3      	bhi.n	8005b48 <__multiply+0xb0>
 8005b80:	9a01      	ldr	r2, [sp, #4]
 8005b82:	f845 c002 	str.w	ip, [r5, r2]
 8005b86:	9a03      	ldr	r2, [sp, #12]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b8e:	f1b9 0f00 	cmp.w	r9, #0
 8005b92:	d021      	beq.n	8005bd8 <__multiply+0x140>
 8005b94:	46ae      	mov	lr, r5
 8005b96:	f04f 0a00 	mov.w	sl, #0
 8005b9a:	6829      	ldr	r1, [r5, #0]
 8005b9c:	f104 0c14 	add.w	ip, r4, #20
 8005ba0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ba4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ba8:	b289      	uxth	r1, r1
 8005baa:	fb09 220b 	mla	r2, r9, fp, r2
 8005bae:	4452      	add	r2, sl
 8005bb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bb4:	f84e 1b04 	str.w	r1, [lr], #4
 8005bb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005bbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bc0:	f8be 1000 	ldrh.w	r1, [lr]
 8005bc4:	4567      	cmp	r7, ip
 8005bc6:	fb09 110a 	mla	r1, r9, sl, r1
 8005bca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005bce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bd2:	d8e5      	bhi.n	8005ba0 <__multiply+0x108>
 8005bd4:	9a01      	ldr	r2, [sp, #4]
 8005bd6:	50a9      	str	r1, [r5, r2]
 8005bd8:	3504      	adds	r5, #4
 8005bda:	e79a      	b.n	8005b12 <__multiply+0x7a>
 8005bdc:	3e01      	subs	r6, #1
 8005bde:	e79c      	b.n	8005b1a <__multiply+0x82>
 8005be0:	08007158 	.word	0x08007158
 8005be4:	08007169 	.word	0x08007169

08005be8 <__pow5mult>:
 8005be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bec:	4615      	mov	r5, r2
 8005bee:	f012 0203 	ands.w	r2, r2, #3
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	460f      	mov	r7, r1
 8005bf6:	d007      	beq.n	8005c08 <__pow5mult+0x20>
 8005bf8:	4c25      	ldr	r4, [pc, #148]	; (8005c90 <__pow5mult+0xa8>)
 8005bfa:	3a01      	subs	r2, #1
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c02:	f7ff fe9f 	bl	8005944 <__multadd>
 8005c06:	4607      	mov	r7, r0
 8005c08:	10ad      	asrs	r5, r5, #2
 8005c0a:	d03d      	beq.n	8005c88 <__pow5mult+0xa0>
 8005c0c:	69f4      	ldr	r4, [r6, #28]
 8005c0e:	b97c      	cbnz	r4, 8005c30 <__pow5mult+0x48>
 8005c10:	2010      	movs	r0, #16
 8005c12:	f7ff fd81 	bl	8005718 <malloc>
 8005c16:	4602      	mov	r2, r0
 8005c18:	61f0      	str	r0, [r6, #28]
 8005c1a:	b928      	cbnz	r0, 8005c28 <__pow5mult+0x40>
 8005c1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005c20:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <__pow5mult+0xac>)
 8005c22:	481d      	ldr	r0, [pc, #116]	; (8005c98 <__pow5mult+0xb0>)
 8005c24:	f000 fbde 	bl	80063e4 <__assert_func>
 8005c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c2c:	6004      	str	r4, [r0, #0]
 8005c2e:	60c4      	str	r4, [r0, #12]
 8005c30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c38:	b94c      	cbnz	r4, 8005c4e <__pow5mult+0x66>
 8005c3a:	f240 2171 	movw	r1, #625	; 0x271
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff ff14 	bl	8005a6c <__i2b>
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	f04f 0900 	mov.w	r9, #0
 8005c52:	07eb      	lsls	r3, r5, #31
 8005c54:	d50a      	bpl.n	8005c6c <__pow5mult+0x84>
 8005c56:	4639      	mov	r1, r7
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7ff ff1c 	bl	8005a98 <__multiply>
 8005c60:	4680      	mov	r8, r0
 8005c62:	4639      	mov	r1, r7
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff fe4b 	bl	8005900 <_Bfree>
 8005c6a:	4647      	mov	r7, r8
 8005c6c:	106d      	asrs	r5, r5, #1
 8005c6e:	d00b      	beq.n	8005c88 <__pow5mult+0xa0>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	b938      	cbnz	r0, 8005c84 <__pow5mult+0x9c>
 8005c74:	4622      	mov	r2, r4
 8005c76:	4621      	mov	r1, r4
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7ff ff0d 	bl	8005a98 <__multiply>
 8005c7e:	6020      	str	r0, [r4, #0]
 8005c80:	f8c0 9000 	str.w	r9, [r0]
 8005c84:	4604      	mov	r4, r0
 8005c86:	e7e4      	b.n	8005c52 <__pow5mult+0x6a>
 8005c88:	4638      	mov	r0, r7
 8005c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8e:	bf00      	nop
 8005c90:	080072b8 	.word	0x080072b8
 8005c94:	080070e9 	.word	0x080070e9
 8005c98:	08007169 	.word	0x08007169

08005c9c <__lshift>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	4691      	mov	r9, r2
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	6849      	ldr	r1, [r1, #4]
 8005caa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cb4:	f108 0601 	add.w	r6, r8, #1
 8005cb8:	42b3      	cmp	r3, r6
 8005cba:	db0b      	blt.n	8005cd4 <__lshift+0x38>
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f7ff fddf 	bl	8005880 <_Balloc>
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	b948      	cbnz	r0, 8005cda <__lshift+0x3e>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <__lshift+0xd0>)
 8005cce:	4828      	ldr	r0, [pc, #160]	; (8005d70 <__lshift+0xd4>)
 8005cd0:	f000 fb88 	bl	80063e4 <__assert_func>
 8005cd4:	3101      	adds	r1, #1
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__lshift+0x1c>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f100 0114 	add.w	r1, r0, #20
 8005ce0:	f100 0210 	add.w	r2, r0, #16
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	4553      	cmp	r3, sl
 8005ce8:	db33      	blt.n	8005d52 <__lshift+0xb6>
 8005cea:	6920      	ldr	r0, [r4, #16]
 8005cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cf0:	f104 0314 	add.w	r3, r4, #20
 8005cf4:	f019 091f 	ands.w	r9, r9, #31
 8005cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d00:	d02b      	beq.n	8005d5a <__lshift+0xbe>
 8005d02:	468a      	mov	sl, r1
 8005d04:	2200      	movs	r2, #0
 8005d06:	f1c9 0e20 	rsb	lr, r9, #32
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d10:	4310      	orrs	r0, r2
 8005d12:	f84a 0b04 	str.w	r0, [sl], #4
 8005d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1a:	459c      	cmp	ip, r3
 8005d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d20:	d8f3      	bhi.n	8005d0a <__lshift+0x6e>
 8005d22:	ebac 0304 	sub.w	r3, ip, r4
 8005d26:	3b15      	subs	r3, #21
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	f104 0015 	add.w	r0, r4, #21
 8005d32:	4584      	cmp	ip, r0
 8005d34:	bf38      	it	cc
 8005d36:	2304      	movcc	r3, #4
 8005d38:	50ca      	str	r2, [r1, r3]
 8005d3a:	b10a      	cbz	r2, 8005d40 <__lshift+0xa4>
 8005d3c:	f108 0602 	add.w	r6, r8, #2
 8005d40:	3e01      	subs	r6, #1
 8005d42:	4638      	mov	r0, r7
 8005d44:	4621      	mov	r1, r4
 8005d46:	612e      	str	r6, [r5, #16]
 8005d48:	f7ff fdda 	bl	8005900 <_Bfree>
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d56:	3301      	adds	r3, #1
 8005d58:	e7c5      	b.n	8005ce6 <__lshift+0x4a>
 8005d5a:	3904      	subs	r1, #4
 8005d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d60:	459c      	cmp	ip, r3
 8005d62:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d66:	d8f9      	bhi.n	8005d5c <__lshift+0xc0>
 8005d68:	e7ea      	b.n	8005d40 <__lshift+0xa4>
 8005d6a:	bf00      	nop
 8005d6c:	08007158 	.word	0x08007158
 8005d70:	08007169 	.word	0x08007169

08005d74 <__mcmp>:
 8005d74:	4603      	mov	r3, r0
 8005d76:	690a      	ldr	r2, [r1, #16]
 8005d78:	6900      	ldr	r0, [r0, #16]
 8005d7a:	b530      	push	{r4, r5, lr}
 8005d7c:	1a80      	subs	r0, r0, r2
 8005d7e:	d10d      	bne.n	8005d9c <__mcmp+0x28>
 8005d80:	3314      	adds	r3, #20
 8005d82:	3114      	adds	r1, #20
 8005d84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d94:	4295      	cmp	r5, r2
 8005d96:	d002      	beq.n	8005d9e <__mcmp+0x2a>
 8005d98:	d304      	bcc.n	8005da4 <__mcmp+0x30>
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	bd30      	pop	{r4, r5, pc}
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	d3f4      	bcc.n	8005d8c <__mcmp+0x18>
 8005da2:	e7fb      	b.n	8005d9c <__mcmp+0x28>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e7f8      	b.n	8005d9c <__mcmp+0x28>
	...

08005dac <__mdiff>:
 8005dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db0:	460d      	mov	r5, r1
 8005db2:	4607      	mov	r7, r0
 8005db4:	4611      	mov	r1, r2
 8005db6:	4628      	mov	r0, r5
 8005db8:	4614      	mov	r4, r2
 8005dba:	f7ff ffdb 	bl	8005d74 <__mcmp>
 8005dbe:	1e06      	subs	r6, r0, #0
 8005dc0:	d111      	bne.n	8005de6 <__mdiff+0x3a>
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f7ff fd5b 	bl	8005880 <_Balloc>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	b928      	cbnz	r0, 8005dda <__mdiff+0x2e>
 8005dce:	f240 2137 	movw	r1, #567	; 0x237
 8005dd2:	4b3a      	ldr	r3, [pc, #232]	; (8005ebc <__mdiff+0x110>)
 8005dd4:	483a      	ldr	r0, [pc, #232]	; (8005ec0 <__mdiff+0x114>)
 8005dd6:	f000 fb05 	bl	80063e4 <__assert_func>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005de0:	4610      	mov	r0, r2
 8005de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	bfa4      	itt	ge
 8005de8:	4623      	movge	r3, r4
 8005dea:	462c      	movge	r4, r5
 8005dec:	4638      	mov	r0, r7
 8005dee:	6861      	ldr	r1, [r4, #4]
 8005df0:	bfa6      	itte	ge
 8005df2:	461d      	movge	r5, r3
 8005df4:	2600      	movge	r6, #0
 8005df6:	2601      	movlt	r6, #1
 8005df8:	f7ff fd42 	bl	8005880 <_Balloc>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	b918      	cbnz	r0, 8005e08 <__mdiff+0x5c>
 8005e00:	f240 2145 	movw	r1, #581	; 0x245
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <__mdiff+0x110>)
 8005e06:	e7e5      	b.n	8005dd4 <__mdiff+0x28>
 8005e08:	f102 0814 	add.w	r8, r2, #20
 8005e0c:	46c2      	mov	sl, r8
 8005e0e:	f04f 0c00 	mov.w	ip, #0
 8005e12:	6927      	ldr	r7, [r4, #16]
 8005e14:	60c6      	str	r6, [r0, #12]
 8005e16:	692e      	ldr	r6, [r5, #16]
 8005e18:	f104 0014 	add.w	r0, r4, #20
 8005e1c:	f105 0914 	add.w	r9, r5, #20
 8005e20:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e28:	3410      	adds	r4, #16
 8005e2a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e32:	fa1f f18b 	uxth.w	r1, fp
 8005e36:	4461      	add	r1, ip
 8005e38:	fa1f fc83 	uxth.w	ip, r3
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	eba1 010c 	sub.w	r1, r1, ip
 8005e42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e4a:	b289      	uxth	r1, r1
 8005e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005e50:	454e      	cmp	r6, r9
 8005e52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e56:	f84a 1b04 	str.w	r1, [sl], #4
 8005e5a:	d8e6      	bhi.n	8005e2a <__mdiff+0x7e>
 8005e5c:	1b73      	subs	r3, r6, r5
 8005e5e:	3b15      	subs	r3, #21
 8005e60:	f023 0303 	bic.w	r3, r3, #3
 8005e64:	3515      	adds	r5, #21
 8005e66:	3304      	adds	r3, #4
 8005e68:	42ae      	cmp	r6, r5
 8005e6a:	bf38      	it	cc
 8005e6c:	2304      	movcc	r3, #4
 8005e6e:	4418      	add	r0, r3
 8005e70:	4443      	add	r3, r8
 8005e72:	461e      	mov	r6, r3
 8005e74:	4605      	mov	r5, r0
 8005e76:	4575      	cmp	r5, lr
 8005e78:	d30e      	bcc.n	8005e98 <__mdiff+0xec>
 8005e7a:	f10e 0103 	add.w	r1, lr, #3
 8005e7e:	1a09      	subs	r1, r1, r0
 8005e80:	f021 0103 	bic.w	r1, r1, #3
 8005e84:	3803      	subs	r0, #3
 8005e86:	4586      	cmp	lr, r0
 8005e88:	bf38      	it	cc
 8005e8a:	2100      	movcc	r1, #0
 8005e8c:	440b      	add	r3, r1
 8005e8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e92:	b189      	cbz	r1, 8005eb8 <__mdiff+0x10c>
 8005e94:	6117      	str	r7, [r2, #16]
 8005e96:	e7a3      	b.n	8005de0 <__mdiff+0x34>
 8005e98:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e9c:	fa1f f188 	uxth.w	r1, r8
 8005ea0:	4461      	add	r1, ip
 8005ea2:	140c      	asrs	r4, r1, #16
 8005ea4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ea8:	b289      	uxth	r1, r1
 8005eaa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005eae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005eb2:	f846 1b04 	str.w	r1, [r6], #4
 8005eb6:	e7de      	b.n	8005e76 <__mdiff+0xca>
 8005eb8:	3f01      	subs	r7, #1
 8005eba:	e7e8      	b.n	8005e8e <__mdiff+0xe2>
 8005ebc:	08007158 	.word	0x08007158
 8005ec0:	08007169 	.word	0x08007169

08005ec4 <__d2b>:
 8005ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	4617      	mov	r7, r2
 8005eca:	461c      	mov	r4, r3
 8005ecc:	9e08      	ldr	r6, [sp, #32]
 8005ece:	f7ff fcd7 	bl	8005880 <_Balloc>
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	b930      	cbnz	r0, 8005ee4 <__d2b+0x20>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	f240 310f 	movw	r1, #783	; 0x30f
 8005edc:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <__d2b+0xa4>)
 8005ede:	4823      	ldr	r0, [pc, #140]	; (8005f6c <__d2b+0xa8>)
 8005ee0:	f000 fa80 	bl	80063e4 <__assert_func>
 8005ee4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005ee8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005eec:	bb24      	cbnz	r4, 8005f38 <__d2b+0x74>
 8005eee:	2f00      	cmp	r7, #0
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	d026      	beq.n	8005f42 <__d2b+0x7e>
 8005ef4:	4668      	mov	r0, sp
 8005ef6:	9700      	str	r7, [sp, #0]
 8005ef8:	f7ff fd8a 	bl	8005a10 <__lo0bits>
 8005efc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f00:	b1e8      	cbz	r0, 8005f3e <__d2b+0x7a>
 8005f02:	f1c0 0320 	rsb	r3, r0, #32
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	40c2      	lsrs	r2, r0
 8005f0e:	616b      	str	r3, [r5, #20]
 8005f10:	9201      	str	r2, [sp, #4]
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf14      	ite	ne
 8005f18:	2102      	movne	r1, #2
 8005f1a:	2101      	moveq	r1, #1
 8005f1c:	61ab      	str	r3, [r5, #24]
 8005f1e:	6129      	str	r1, [r5, #16]
 8005f20:	b1bc      	cbz	r4, 8005f52 <__d2b+0x8e>
 8005f22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005f26:	4404      	add	r4, r0
 8005f28:	6034      	str	r4, [r6, #0]
 8005f2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f30:	6018      	str	r0, [r3, #0]
 8005f32:	4628      	mov	r0, r5
 8005f34:	b003      	add	sp, #12
 8005f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f3c:	e7d7      	b.n	8005eee <__d2b+0x2a>
 8005f3e:	6169      	str	r1, [r5, #20]
 8005f40:	e7e7      	b.n	8005f12 <__d2b+0x4e>
 8005f42:	a801      	add	r0, sp, #4
 8005f44:	f7ff fd64 	bl	8005a10 <__lo0bits>
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	616b      	str	r3, [r5, #20]
 8005f4e:	3020      	adds	r0, #32
 8005f50:	e7e5      	b.n	8005f1e <__d2b+0x5a>
 8005f52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f56:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005f5a:	6030      	str	r0, [r6, #0]
 8005f5c:	6918      	ldr	r0, [r3, #16]
 8005f5e:	f7ff fd37 	bl	80059d0 <__hi0bits>
 8005f62:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005f66:	e7e2      	b.n	8005f2e <__d2b+0x6a>
 8005f68:	08007158 	.word	0x08007158
 8005f6c:	08007169 	.word	0x08007169

08005f70 <__ssputs_r>:
 8005f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	461f      	mov	r7, r3
 8005f76:	688e      	ldr	r6, [r1, #8]
 8005f78:	4682      	mov	sl, r0
 8005f7a:	42be      	cmp	r6, r7
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	4690      	mov	r8, r2
 8005f80:	680b      	ldr	r3, [r1, #0]
 8005f82:	d82c      	bhi.n	8005fde <__ssputs_r+0x6e>
 8005f84:	898a      	ldrh	r2, [r1, #12]
 8005f86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f8a:	d026      	beq.n	8005fda <__ssputs_r+0x6a>
 8005f8c:	6965      	ldr	r5, [r4, #20]
 8005f8e:	6909      	ldr	r1, [r1, #16]
 8005f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f94:	eba3 0901 	sub.w	r9, r3, r1
 8005f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f9c:	1c7b      	adds	r3, r7, #1
 8005f9e:	444b      	add	r3, r9
 8005fa0:	106d      	asrs	r5, r5, #1
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	bf38      	it	cc
 8005fa6:	461d      	movcc	r5, r3
 8005fa8:	0553      	lsls	r3, r2, #21
 8005faa:	d527      	bpl.n	8005ffc <__ssputs_r+0x8c>
 8005fac:	4629      	mov	r1, r5
 8005fae:	f7ff fbdb 	bl	8005768 <_malloc_r>
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	b360      	cbz	r0, 8006010 <__ssputs_r+0xa0>
 8005fb6:	464a      	mov	r2, r9
 8005fb8:	6921      	ldr	r1, [r4, #16]
 8005fba:	f000 fa05 	bl	80063c8 <memcpy>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	6126      	str	r6, [r4, #16]
 8005fcc:	444e      	add	r6, r9
 8005fce:	6026      	str	r6, [r4, #0]
 8005fd0:	463e      	mov	r6, r7
 8005fd2:	6165      	str	r5, [r4, #20]
 8005fd4:	eba5 0509 	sub.w	r5, r5, r9
 8005fd8:	60a5      	str	r5, [r4, #8]
 8005fda:	42be      	cmp	r6, r7
 8005fdc:	d900      	bls.n	8005fe0 <__ssputs_r+0x70>
 8005fde:	463e      	mov	r6, r7
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	f000 f9c5 	bl	8006374 <memmove>
 8005fea:	2000      	movs	r0, #0
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	1b9b      	subs	r3, r3, r6
 8005ff0:	60a3      	str	r3, [r4, #8]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	4433      	add	r3, r6
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	f000 fa35 	bl	800646c <_realloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d1e0      	bne.n	8005fca <__ssputs_r+0x5a>
 8006008:	4650      	mov	r0, sl
 800600a:	6921      	ldr	r1, [r4, #16]
 800600c:	f7ff fb3c 	bl	8005688 <_free_r>
 8006010:	230c      	movs	r3, #12
 8006012:	f8ca 3000 	str.w	r3, [sl]
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006020:	81a3      	strh	r3, [r4, #12]
 8006022:	e7e9      	b.n	8005ff8 <__ssputs_r+0x88>

08006024 <_svfiprintf_r>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	4698      	mov	r8, r3
 800602a:	898b      	ldrh	r3, [r1, #12]
 800602c:	4607      	mov	r7, r0
 800602e:	061b      	lsls	r3, r3, #24
 8006030:	460d      	mov	r5, r1
 8006032:	4614      	mov	r4, r2
 8006034:	b09d      	sub	sp, #116	; 0x74
 8006036:	d50e      	bpl.n	8006056 <_svfiprintf_r+0x32>
 8006038:	690b      	ldr	r3, [r1, #16]
 800603a:	b963      	cbnz	r3, 8006056 <_svfiprintf_r+0x32>
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	f7ff fb93 	bl	8005768 <_malloc_r>
 8006042:	6028      	str	r0, [r5, #0]
 8006044:	6128      	str	r0, [r5, #16]
 8006046:	b920      	cbnz	r0, 8006052 <_svfiprintf_r+0x2e>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	e0d0      	b.n	80061f4 <_svfiprintf_r+0x1d0>
 8006052:	2340      	movs	r3, #64	; 0x40
 8006054:	616b      	str	r3, [r5, #20]
 8006056:	2300      	movs	r3, #0
 8006058:	9309      	str	r3, [sp, #36]	; 0x24
 800605a:	2320      	movs	r3, #32
 800605c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006060:	2330      	movs	r3, #48	; 0x30
 8006062:	f04f 0901 	mov.w	r9, #1
 8006066:	f8cd 800c 	str.w	r8, [sp, #12]
 800606a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800620c <_svfiprintf_r+0x1e8>
 800606e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006072:	4623      	mov	r3, r4
 8006074:	469a      	mov	sl, r3
 8006076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800607a:	b10a      	cbz	r2, 8006080 <_svfiprintf_r+0x5c>
 800607c:	2a25      	cmp	r2, #37	; 0x25
 800607e:	d1f9      	bne.n	8006074 <_svfiprintf_r+0x50>
 8006080:	ebba 0b04 	subs.w	fp, sl, r4
 8006084:	d00b      	beq.n	800609e <_svfiprintf_r+0x7a>
 8006086:	465b      	mov	r3, fp
 8006088:	4622      	mov	r2, r4
 800608a:	4629      	mov	r1, r5
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ff6f 	bl	8005f70 <__ssputs_r>
 8006092:	3001      	adds	r0, #1
 8006094:	f000 80a9 	beq.w	80061ea <_svfiprintf_r+0x1c6>
 8006098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609a:	445a      	add	r2, fp
 800609c:	9209      	str	r2, [sp, #36]	; 0x24
 800609e:	f89a 3000 	ldrb.w	r3, [sl]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80a1 	beq.w	80061ea <_svfiprintf_r+0x1c6>
 80060a8:	2300      	movs	r3, #0
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060b2:	f10a 0a01 	add.w	sl, sl, #1
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	9307      	str	r3, [sp, #28]
 80060ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060be:	931a      	str	r3, [sp, #104]	; 0x68
 80060c0:	4654      	mov	r4, sl
 80060c2:	2205      	movs	r2, #5
 80060c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c8:	4850      	ldr	r0, [pc, #320]	; (800620c <_svfiprintf_r+0x1e8>)
 80060ca:	f7fe fc62 	bl	8004992 <memchr>
 80060ce:	9a04      	ldr	r2, [sp, #16]
 80060d0:	b9d8      	cbnz	r0, 800610a <_svfiprintf_r+0xe6>
 80060d2:	06d0      	lsls	r0, r2, #27
 80060d4:	bf44      	itt	mi
 80060d6:	2320      	movmi	r3, #32
 80060d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060dc:	0711      	lsls	r1, r2, #28
 80060de:	bf44      	itt	mi
 80060e0:	232b      	movmi	r3, #43	; 0x2b
 80060e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ea:	2b2a      	cmp	r3, #42	; 0x2a
 80060ec:	d015      	beq.n	800611a <_svfiprintf_r+0xf6>
 80060ee:	4654      	mov	r4, sl
 80060f0:	2000      	movs	r0, #0
 80060f2:	f04f 0c0a 	mov.w	ip, #10
 80060f6:	9a07      	ldr	r2, [sp, #28]
 80060f8:	4621      	mov	r1, r4
 80060fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060fe:	3b30      	subs	r3, #48	; 0x30
 8006100:	2b09      	cmp	r3, #9
 8006102:	d94d      	bls.n	80061a0 <_svfiprintf_r+0x17c>
 8006104:	b1b0      	cbz	r0, 8006134 <_svfiprintf_r+0x110>
 8006106:	9207      	str	r2, [sp, #28]
 8006108:	e014      	b.n	8006134 <_svfiprintf_r+0x110>
 800610a:	eba0 0308 	sub.w	r3, r0, r8
 800610e:	fa09 f303 	lsl.w	r3, r9, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	46a2      	mov	sl, r4
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	e7d2      	b.n	80060c0 <_svfiprintf_r+0x9c>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	1d19      	adds	r1, r3, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	9103      	str	r1, [sp, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfbb      	ittet	lt
 8006126:	425b      	neglt	r3, r3
 8006128:	f042 0202 	orrlt.w	r2, r2, #2
 800612c:	9307      	strge	r3, [sp, #28]
 800612e:	9307      	strlt	r3, [sp, #28]
 8006130:	bfb8      	it	lt
 8006132:	9204      	strlt	r2, [sp, #16]
 8006134:	7823      	ldrb	r3, [r4, #0]
 8006136:	2b2e      	cmp	r3, #46	; 0x2e
 8006138:	d10c      	bne.n	8006154 <_svfiprintf_r+0x130>
 800613a:	7863      	ldrb	r3, [r4, #1]
 800613c:	2b2a      	cmp	r3, #42	; 0x2a
 800613e:	d134      	bne.n	80061aa <_svfiprintf_r+0x186>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	3402      	adds	r4, #2
 8006144:	1d1a      	adds	r2, r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9203      	str	r2, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfb8      	it	lt
 800614e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006210 <_svfiprintf_r+0x1ec>
 8006158:	2203      	movs	r2, #3
 800615a:	4650      	mov	r0, sl
 800615c:	7821      	ldrb	r1, [r4, #0]
 800615e:	f7fe fc18 	bl	8004992 <memchr>
 8006162:	b138      	cbz	r0, 8006174 <_svfiprintf_r+0x150>
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	eba0 000a 	sub.w	r0, r0, sl
 800616c:	4082      	lsls	r2, r0
 800616e:	4313      	orrs	r3, r2
 8006170:	3401      	adds	r4, #1
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006178:	2206      	movs	r2, #6
 800617a:	4826      	ldr	r0, [pc, #152]	; (8006214 <_svfiprintf_r+0x1f0>)
 800617c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006180:	f7fe fc07 	bl	8004992 <memchr>
 8006184:	2800      	cmp	r0, #0
 8006186:	d038      	beq.n	80061fa <_svfiprintf_r+0x1d6>
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <_svfiprintf_r+0x1f4>)
 800618a:	bb1b      	cbnz	r3, 80061d4 <_svfiprintf_r+0x1b0>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	3307      	adds	r3, #7
 8006190:	f023 0307 	bic.w	r3, r3, #7
 8006194:	3308      	adds	r3, #8
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619a:	4433      	add	r3, r6
 800619c:	9309      	str	r3, [sp, #36]	; 0x24
 800619e:	e768      	b.n	8006072 <_svfiprintf_r+0x4e>
 80061a0:	460c      	mov	r4, r1
 80061a2:	2001      	movs	r0, #1
 80061a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061a8:	e7a6      	b.n	80060f8 <_svfiprintf_r+0xd4>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f04f 0c0a 	mov.w	ip, #10
 80061b0:	4619      	mov	r1, r3
 80061b2:	3401      	adds	r4, #1
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	4620      	mov	r0, r4
 80061b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061bc:	3a30      	subs	r2, #48	; 0x30
 80061be:	2a09      	cmp	r2, #9
 80061c0:	d903      	bls.n	80061ca <_svfiprintf_r+0x1a6>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0c6      	beq.n	8006154 <_svfiprintf_r+0x130>
 80061c6:	9105      	str	r1, [sp, #20]
 80061c8:	e7c4      	b.n	8006154 <_svfiprintf_r+0x130>
 80061ca:	4604      	mov	r4, r0
 80061cc:	2301      	movs	r3, #1
 80061ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80061d2:	e7f0      	b.n	80061b6 <_svfiprintf_r+0x192>
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	462a      	mov	r2, r5
 80061da:	4638      	mov	r0, r7
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <_svfiprintf_r+0x1f8>)
 80061de:	a904      	add	r1, sp, #16
 80061e0:	f7fd fe70 	bl	8003ec4 <_printf_float>
 80061e4:	1c42      	adds	r2, r0, #1
 80061e6:	4606      	mov	r6, r0
 80061e8:	d1d6      	bne.n	8006198 <_svfiprintf_r+0x174>
 80061ea:	89ab      	ldrh	r3, [r5, #12]
 80061ec:	065b      	lsls	r3, r3, #25
 80061ee:	f53f af2d 	bmi.w	800604c <_svfiprintf_r+0x28>
 80061f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061f4:	b01d      	add	sp, #116	; 0x74
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	ab03      	add	r3, sp, #12
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	462a      	mov	r2, r5
 8006200:	4638      	mov	r0, r7
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <_svfiprintf_r+0x1f8>)
 8006204:	a904      	add	r1, sp, #16
 8006206:	f7fe f8fd 	bl	8004404 <_printf_i>
 800620a:	e7eb      	b.n	80061e4 <_svfiprintf_r+0x1c0>
 800620c:	080072c4 	.word	0x080072c4
 8006210:	080072ca 	.word	0x080072ca
 8006214:	080072ce 	.word	0x080072ce
 8006218:	08003ec5 	.word	0x08003ec5
 800621c:	08005f71 	.word	0x08005f71

08006220 <__sflush_r>:
 8006220:	898a      	ldrh	r2, [r1, #12]
 8006222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006224:	4605      	mov	r5, r0
 8006226:	0710      	lsls	r0, r2, #28
 8006228:	460c      	mov	r4, r1
 800622a:	d457      	bmi.n	80062dc <__sflush_r+0xbc>
 800622c:	684b      	ldr	r3, [r1, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	dc04      	bgt.n	800623c <__sflush_r+0x1c>
 8006232:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	dc01      	bgt.n	800623c <__sflush_r+0x1c>
 8006238:	2000      	movs	r0, #0
 800623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800623c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800623e:	2e00      	cmp	r6, #0
 8006240:	d0fa      	beq.n	8006238 <__sflush_r+0x18>
 8006242:	2300      	movs	r3, #0
 8006244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006248:	682f      	ldr	r7, [r5, #0]
 800624a:	6a21      	ldr	r1, [r4, #32]
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	d032      	beq.n	80062b6 <__sflush_r+0x96>
 8006250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	075a      	lsls	r2, r3, #29
 8006256:	d505      	bpl.n	8006264 <__sflush_r+0x44>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	1ac0      	subs	r0, r0, r3
 800625c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800625e:	b10b      	cbz	r3, 8006264 <__sflush_r+0x44>
 8006260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006262:	1ac0      	subs	r0, r0, r3
 8006264:	2300      	movs	r3, #0
 8006266:	4602      	mov	r2, r0
 8006268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800626a:	4628      	mov	r0, r5
 800626c:	6a21      	ldr	r1, [r4, #32]
 800626e:	47b0      	blx	r6
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	d106      	bne.n	8006284 <__sflush_r+0x64>
 8006276:	6829      	ldr	r1, [r5, #0]
 8006278:	291d      	cmp	r1, #29
 800627a:	d82b      	bhi.n	80062d4 <__sflush_r+0xb4>
 800627c:	4a28      	ldr	r2, [pc, #160]	; (8006320 <__sflush_r+0x100>)
 800627e:	410a      	asrs	r2, r1
 8006280:	07d6      	lsls	r6, r2, #31
 8006282:	d427      	bmi.n	80062d4 <__sflush_r+0xb4>
 8006284:	2200      	movs	r2, #0
 8006286:	6062      	str	r2, [r4, #4]
 8006288:	6922      	ldr	r2, [r4, #16]
 800628a:	04d9      	lsls	r1, r3, #19
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	d504      	bpl.n	800629a <__sflush_r+0x7a>
 8006290:	1c42      	adds	r2, r0, #1
 8006292:	d101      	bne.n	8006298 <__sflush_r+0x78>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b903      	cbnz	r3, 800629a <__sflush_r+0x7a>
 8006298:	6560      	str	r0, [r4, #84]	; 0x54
 800629a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800629c:	602f      	str	r7, [r5, #0]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d0ca      	beq.n	8006238 <__sflush_r+0x18>
 80062a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a6:	4299      	cmp	r1, r3
 80062a8:	d002      	beq.n	80062b0 <__sflush_r+0x90>
 80062aa:	4628      	mov	r0, r5
 80062ac:	f7ff f9ec 	bl	8005688 <_free_r>
 80062b0:	2000      	movs	r0, #0
 80062b2:	6360      	str	r0, [r4, #52]	; 0x34
 80062b4:	e7c1      	b.n	800623a <__sflush_r+0x1a>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b0      	blx	r6
 80062bc:	1c41      	adds	r1, r0, #1
 80062be:	d1c8      	bne.n	8006252 <__sflush_r+0x32>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0c5      	beq.n	8006252 <__sflush_r+0x32>
 80062c6:	2b1d      	cmp	r3, #29
 80062c8:	d001      	beq.n	80062ce <__sflush_r+0xae>
 80062ca:	2b16      	cmp	r3, #22
 80062cc:	d101      	bne.n	80062d2 <__sflush_r+0xb2>
 80062ce:	602f      	str	r7, [r5, #0]
 80062d0:	e7b2      	b.n	8006238 <__sflush_r+0x18>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d8:	81a3      	strh	r3, [r4, #12]
 80062da:	e7ae      	b.n	800623a <__sflush_r+0x1a>
 80062dc:	690f      	ldr	r7, [r1, #16]
 80062de:	2f00      	cmp	r7, #0
 80062e0:	d0aa      	beq.n	8006238 <__sflush_r+0x18>
 80062e2:	0793      	lsls	r3, r2, #30
 80062e4:	bf18      	it	ne
 80062e6:	2300      	movne	r3, #0
 80062e8:	680e      	ldr	r6, [r1, #0]
 80062ea:	bf08      	it	eq
 80062ec:	694b      	ldreq	r3, [r1, #20]
 80062ee:	1bf6      	subs	r6, r6, r7
 80062f0:	600f      	str	r7, [r1, #0]
 80062f2:	608b      	str	r3, [r1, #8]
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	dd9f      	ble.n	8006238 <__sflush_r+0x18>
 80062f8:	4633      	mov	r3, r6
 80062fa:	463a      	mov	r2, r7
 80062fc:	4628      	mov	r0, r5
 80062fe:	6a21      	ldr	r1, [r4, #32]
 8006300:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006304:	47e0      	blx	ip
 8006306:	2800      	cmp	r0, #0
 8006308:	dc06      	bgt.n	8006318 <__sflush_r+0xf8>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	e790      	b.n	800623a <__sflush_r+0x1a>
 8006318:	4407      	add	r7, r0
 800631a:	1a36      	subs	r6, r6, r0
 800631c:	e7ea      	b.n	80062f4 <__sflush_r+0xd4>
 800631e:	bf00      	nop
 8006320:	dfbffffe 	.word	0xdfbffffe

08006324 <_fflush_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	690b      	ldr	r3, [r1, #16]
 8006328:	4605      	mov	r5, r0
 800632a:	460c      	mov	r4, r1
 800632c:	b913      	cbnz	r3, 8006334 <_fflush_r+0x10>
 800632e:	2500      	movs	r5, #0
 8006330:	4628      	mov	r0, r5
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	b118      	cbz	r0, 800633e <_fflush_r+0x1a>
 8006336:	6a03      	ldr	r3, [r0, #32]
 8006338:	b90b      	cbnz	r3, 800633e <_fflush_r+0x1a>
 800633a:	f7fe fa11 	bl	8004760 <__sinit>
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f3      	beq.n	800632e <_fflush_r+0xa>
 8006346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006348:	07d0      	lsls	r0, r2, #31
 800634a:	d404      	bmi.n	8006356 <_fflush_r+0x32>
 800634c:	0599      	lsls	r1, r3, #22
 800634e:	d402      	bmi.n	8006356 <_fflush_r+0x32>
 8006350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006352:	f7fe fb1c 	bl	800498e <__retarget_lock_acquire_recursive>
 8006356:	4628      	mov	r0, r5
 8006358:	4621      	mov	r1, r4
 800635a:	f7ff ff61 	bl	8006220 <__sflush_r>
 800635e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006360:	4605      	mov	r5, r0
 8006362:	07da      	lsls	r2, r3, #31
 8006364:	d4e4      	bmi.n	8006330 <_fflush_r+0xc>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	059b      	lsls	r3, r3, #22
 800636a:	d4e1      	bmi.n	8006330 <_fflush_r+0xc>
 800636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800636e:	f7fe fb0f 	bl	8004990 <__retarget_lock_release_recursive>
 8006372:	e7dd      	b.n	8006330 <_fflush_r+0xc>

08006374 <memmove>:
 8006374:	4288      	cmp	r0, r1
 8006376:	b510      	push	{r4, lr}
 8006378:	eb01 0402 	add.w	r4, r1, r2
 800637c:	d902      	bls.n	8006384 <memmove+0x10>
 800637e:	4284      	cmp	r4, r0
 8006380:	4623      	mov	r3, r4
 8006382:	d807      	bhi.n	8006394 <memmove+0x20>
 8006384:	1e43      	subs	r3, r0, #1
 8006386:	42a1      	cmp	r1, r4
 8006388:	d008      	beq.n	800639c <memmove+0x28>
 800638a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800638e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006392:	e7f8      	b.n	8006386 <memmove+0x12>
 8006394:	4601      	mov	r1, r0
 8006396:	4402      	add	r2, r0
 8006398:	428a      	cmp	r2, r1
 800639a:	d100      	bne.n	800639e <memmove+0x2a>
 800639c:	bd10      	pop	{r4, pc}
 800639e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063a6:	e7f7      	b.n	8006398 <memmove+0x24>

080063a8 <_sbrk_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	2300      	movs	r3, #0
 80063ac:	4d05      	ldr	r5, [pc, #20]	; (80063c4 <_sbrk_r+0x1c>)
 80063ae:	4604      	mov	r4, r0
 80063b0:	4608      	mov	r0, r1
 80063b2:	602b      	str	r3, [r5, #0]
 80063b4:	f7fa ff0a 	bl	80011cc <_sbrk>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_sbrk_r+0x1a>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_sbrk_r+0x1a>
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	200003ec 	.word	0x200003ec

080063c8 <memcpy>:
 80063c8:	440a      	add	r2, r1
 80063ca:	4291      	cmp	r1, r2
 80063cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063d0:	d100      	bne.n	80063d4 <memcpy+0xc>
 80063d2:	4770      	bx	lr
 80063d4:	b510      	push	{r4, lr}
 80063d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063da:	4291      	cmp	r1, r2
 80063dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e0:	d1f9      	bne.n	80063d6 <memcpy+0xe>
 80063e2:	bd10      	pop	{r4, pc}

080063e4 <__assert_func>:
 80063e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063e6:	4614      	mov	r4, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <__assert_func+0x2c>)
 80063ec:	4605      	mov	r5, r0
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68d8      	ldr	r0, [r3, #12]
 80063f2:	b14c      	cbz	r4, 8006408 <__assert_func+0x24>
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <__assert_func+0x30>)
 80063f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063fa:	9100      	str	r1, [sp, #0]
 80063fc:	462b      	mov	r3, r5
 80063fe:	4906      	ldr	r1, [pc, #24]	; (8006418 <__assert_func+0x34>)
 8006400:	f000 f870 	bl	80064e4 <fiprintf>
 8006404:	f000 f880 	bl	8006508 <abort>
 8006408:	4b04      	ldr	r3, [pc, #16]	; (800641c <__assert_func+0x38>)
 800640a:	461c      	mov	r4, r3
 800640c:	e7f3      	b.n	80063f6 <__assert_func+0x12>
 800640e:	bf00      	nop
 8006410:	20000064 	.word	0x20000064
 8006414:	080072df 	.word	0x080072df
 8006418:	080072ec 	.word	0x080072ec
 800641c:	0800731a 	.word	0x0800731a

08006420 <_calloc_r>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	fba1 5402 	umull	r5, r4, r1, r2
 8006426:	b934      	cbnz	r4, 8006436 <_calloc_r+0x16>
 8006428:	4629      	mov	r1, r5
 800642a:	f7ff f99d 	bl	8005768 <_malloc_r>
 800642e:	4606      	mov	r6, r0
 8006430:	b928      	cbnz	r0, 800643e <_calloc_r+0x1e>
 8006432:	4630      	mov	r0, r6
 8006434:	bd70      	pop	{r4, r5, r6, pc}
 8006436:	220c      	movs	r2, #12
 8006438:	2600      	movs	r6, #0
 800643a:	6002      	str	r2, [r0, #0]
 800643c:	e7f9      	b.n	8006432 <_calloc_r+0x12>
 800643e:	462a      	mov	r2, r5
 8006440:	4621      	mov	r1, r4
 8006442:	f7fe fa26 	bl	8004892 <memset>
 8006446:	e7f4      	b.n	8006432 <_calloc_r+0x12>

08006448 <__ascii_mbtowc>:
 8006448:	b082      	sub	sp, #8
 800644a:	b901      	cbnz	r1, 800644e <__ascii_mbtowc+0x6>
 800644c:	a901      	add	r1, sp, #4
 800644e:	b142      	cbz	r2, 8006462 <__ascii_mbtowc+0x1a>
 8006450:	b14b      	cbz	r3, 8006466 <__ascii_mbtowc+0x1e>
 8006452:	7813      	ldrb	r3, [r2, #0]
 8006454:	600b      	str	r3, [r1, #0]
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	1e10      	subs	r0, r2, #0
 800645a:	bf18      	it	ne
 800645c:	2001      	movne	r0, #1
 800645e:	b002      	add	sp, #8
 8006460:	4770      	bx	lr
 8006462:	4610      	mov	r0, r2
 8006464:	e7fb      	b.n	800645e <__ascii_mbtowc+0x16>
 8006466:	f06f 0001 	mvn.w	r0, #1
 800646a:	e7f8      	b.n	800645e <__ascii_mbtowc+0x16>

0800646c <_realloc_r>:
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	4680      	mov	r8, r0
 8006472:	4614      	mov	r4, r2
 8006474:	460e      	mov	r6, r1
 8006476:	b921      	cbnz	r1, 8006482 <_realloc_r+0x16>
 8006478:	4611      	mov	r1, r2
 800647a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800647e:	f7ff b973 	b.w	8005768 <_malloc_r>
 8006482:	b92a      	cbnz	r2, 8006490 <_realloc_r+0x24>
 8006484:	f7ff f900 	bl	8005688 <_free_r>
 8006488:	4625      	mov	r5, r4
 800648a:	4628      	mov	r0, r5
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006490:	f000 f841 	bl	8006516 <_malloc_usable_size_r>
 8006494:	4284      	cmp	r4, r0
 8006496:	4607      	mov	r7, r0
 8006498:	d802      	bhi.n	80064a0 <_realloc_r+0x34>
 800649a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800649e:	d812      	bhi.n	80064c6 <_realloc_r+0x5a>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4640      	mov	r0, r8
 80064a4:	f7ff f960 	bl	8005768 <_malloc_r>
 80064a8:	4605      	mov	r5, r0
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0ed      	beq.n	800648a <_realloc_r+0x1e>
 80064ae:	42bc      	cmp	r4, r7
 80064b0:	4622      	mov	r2, r4
 80064b2:	4631      	mov	r1, r6
 80064b4:	bf28      	it	cs
 80064b6:	463a      	movcs	r2, r7
 80064b8:	f7ff ff86 	bl	80063c8 <memcpy>
 80064bc:	4631      	mov	r1, r6
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff f8e2 	bl	8005688 <_free_r>
 80064c4:	e7e1      	b.n	800648a <_realloc_r+0x1e>
 80064c6:	4635      	mov	r5, r6
 80064c8:	e7df      	b.n	800648a <_realloc_r+0x1e>

080064ca <__ascii_wctomb>:
 80064ca:	4603      	mov	r3, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	b141      	cbz	r1, 80064e2 <__ascii_wctomb+0x18>
 80064d0:	2aff      	cmp	r2, #255	; 0xff
 80064d2:	d904      	bls.n	80064de <__ascii_wctomb+0x14>
 80064d4:	228a      	movs	r2, #138	; 0x8a
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	4770      	bx	lr
 80064de:	2001      	movs	r0, #1
 80064e0:	700a      	strb	r2, [r1, #0]
 80064e2:	4770      	bx	lr

080064e4 <fiprintf>:
 80064e4:	b40e      	push	{r1, r2, r3}
 80064e6:	b503      	push	{r0, r1, lr}
 80064e8:	4601      	mov	r1, r0
 80064ea:	ab03      	add	r3, sp, #12
 80064ec:	4805      	ldr	r0, [pc, #20]	; (8006504 <fiprintf+0x20>)
 80064ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	f000 f83d 	bl	8006574 <_vfiprintf_r>
 80064fa:	b002      	add	sp, #8
 80064fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006500:	b003      	add	sp, #12
 8006502:	4770      	bx	lr
 8006504:	20000064 	.word	0x20000064

08006508 <abort>:
 8006508:	2006      	movs	r0, #6
 800650a:	b508      	push	{r3, lr}
 800650c:	f000 fa0a 	bl	8006924 <raise>
 8006510:	2001      	movs	r0, #1
 8006512:	f7fa fde7 	bl	80010e4 <_exit>

08006516 <_malloc_usable_size_r>:
 8006516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800651a:	1f18      	subs	r0, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfbc      	itt	lt
 8006520:	580b      	ldrlt	r3, [r1, r0]
 8006522:	18c0      	addlt	r0, r0, r3
 8006524:	4770      	bx	lr

08006526 <__sfputc_r>:
 8006526:	6893      	ldr	r3, [r2, #8]
 8006528:	b410      	push	{r4}
 800652a:	3b01      	subs	r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	6093      	str	r3, [r2, #8]
 8006530:	da07      	bge.n	8006542 <__sfputc_r+0x1c>
 8006532:	6994      	ldr	r4, [r2, #24]
 8006534:	42a3      	cmp	r3, r4
 8006536:	db01      	blt.n	800653c <__sfputc_r+0x16>
 8006538:	290a      	cmp	r1, #10
 800653a:	d102      	bne.n	8006542 <__sfputc_r+0x1c>
 800653c:	bc10      	pop	{r4}
 800653e:	f000 b933 	b.w	80067a8 <__swbuf_r>
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	1c58      	adds	r0, r3, #1
 8006546:	6010      	str	r0, [r2, #0]
 8006548:	7019      	strb	r1, [r3, #0]
 800654a:	4608      	mov	r0, r1
 800654c:	bc10      	pop	{r4}
 800654e:	4770      	bx	lr

08006550 <__sfputs_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	4614      	mov	r4, r2
 8006558:	18d5      	adds	r5, r2, r3
 800655a:	42ac      	cmp	r4, r5
 800655c:	d101      	bne.n	8006562 <__sfputs_r+0x12>
 800655e:	2000      	movs	r0, #0
 8006560:	e007      	b.n	8006572 <__sfputs_r+0x22>
 8006562:	463a      	mov	r2, r7
 8006564:	4630      	mov	r0, r6
 8006566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800656a:	f7ff ffdc 	bl	8006526 <__sfputc_r>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	d1f3      	bne.n	800655a <__sfputs_r+0xa>
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006574 <_vfiprintf_r>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	460d      	mov	r5, r1
 800657a:	4614      	mov	r4, r2
 800657c:	4698      	mov	r8, r3
 800657e:	4606      	mov	r6, r0
 8006580:	b09d      	sub	sp, #116	; 0x74
 8006582:	b118      	cbz	r0, 800658c <_vfiprintf_r+0x18>
 8006584:	6a03      	ldr	r3, [r0, #32]
 8006586:	b90b      	cbnz	r3, 800658c <_vfiprintf_r+0x18>
 8006588:	f7fe f8ea 	bl	8004760 <__sinit>
 800658c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800658e:	07d9      	lsls	r1, r3, #31
 8006590:	d405      	bmi.n	800659e <_vfiprintf_r+0x2a>
 8006592:	89ab      	ldrh	r3, [r5, #12]
 8006594:	059a      	lsls	r2, r3, #22
 8006596:	d402      	bmi.n	800659e <_vfiprintf_r+0x2a>
 8006598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800659a:	f7fe f9f8 	bl	800498e <__retarget_lock_acquire_recursive>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	071b      	lsls	r3, r3, #28
 80065a2:	d501      	bpl.n	80065a8 <_vfiprintf_r+0x34>
 80065a4:	692b      	ldr	r3, [r5, #16]
 80065a6:	b99b      	cbnz	r3, 80065d0 <_vfiprintf_r+0x5c>
 80065a8:	4629      	mov	r1, r5
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 f93a 	bl	8006824 <__swsetup_r>
 80065b0:	b170      	cbz	r0, 80065d0 <_vfiprintf_r+0x5c>
 80065b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b4:	07dc      	lsls	r4, r3, #31
 80065b6:	d504      	bpl.n	80065c2 <_vfiprintf_r+0x4e>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	b01d      	add	sp, #116	; 0x74
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	0598      	lsls	r0, r3, #22
 80065c6:	d4f7      	bmi.n	80065b8 <_vfiprintf_r+0x44>
 80065c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ca:	f7fe f9e1 	bl	8004990 <__retarget_lock_release_recursive>
 80065ce:	e7f3      	b.n	80065b8 <_vfiprintf_r+0x44>
 80065d0:	2300      	movs	r3, #0
 80065d2:	9309      	str	r3, [sp, #36]	; 0x24
 80065d4:	2320      	movs	r3, #32
 80065d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065da:	2330      	movs	r3, #48	; 0x30
 80065dc:	f04f 0901 	mov.w	r9, #1
 80065e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006794 <_vfiprintf_r+0x220>
 80065e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ec:	4623      	mov	r3, r4
 80065ee:	469a      	mov	sl, r3
 80065f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f4:	b10a      	cbz	r2, 80065fa <_vfiprintf_r+0x86>
 80065f6:	2a25      	cmp	r2, #37	; 0x25
 80065f8:	d1f9      	bne.n	80065ee <_vfiprintf_r+0x7a>
 80065fa:	ebba 0b04 	subs.w	fp, sl, r4
 80065fe:	d00b      	beq.n	8006618 <_vfiprintf_r+0xa4>
 8006600:	465b      	mov	r3, fp
 8006602:	4622      	mov	r2, r4
 8006604:	4629      	mov	r1, r5
 8006606:	4630      	mov	r0, r6
 8006608:	f7ff ffa2 	bl	8006550 <__sfputs_r>
 800660c:	3001      	adds	r0, #1
 800660e:	f000 80a9 	beq.w	8006764 <_vfiprintf_r+0x1f0>
 8006612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006614:	445a      	add	r2, fp
 8006616:	9209      	str	r2, [sp, #36]	; 0x24
 8006618:	f89a 3000 	ldrb.w	r3, [sl]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80a1 	beq.w	8006764 <_vfiprintf_r+0x1f0>
 8006622:	2300      	movs	r3, #0
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662c:	f10a 0a01 	add.w	sl, sl, #1
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	9307      	str	r3, [sp, #28]
 8006634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006638:	931a      	str	r3, [sp, #104]	; 0x68
 800663a:	4654      	mov	r4, sl
 800663c:	2205      	movs	r2, #5
 800663e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006642:	4854      	ldr	r0, [pc, #336]	; (8006794 <_vfiprintf_r+0x220>)
 8006644:	f7fe f9a5 	bl	8004992 <memchr>
 8006648:	9a04      	ldr	r2, [sp, #16]
 800664a:	b9d8      	cbnz	r0, 8006684 <_vfiprintf_r+0x110>
 800664c:	06d1      	lsls	r1, r2, #27
 800664e:	bf44      	itt	mi
 8006650:	2320      	movmi	r3, #32
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006656:	0713      	lsls	r3, r2, #28
 8006658:	bf44      	itt	mi
 800665a:	232b      	movmi	r3, #43	; 0x2b
 800665c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006660:	f89a 3000 	ldrb.w	r3, [sl]
 8006664:	2b2a      	cmp	r3, #42	; 0x2a
 8006666:	d015      	beq.n	8006694 <_vfiprintf_r+0x120>
 8006668:	4654      	mov	r4, sl
 800666a:	2000      	movs	r0, #0
 800666c:	f04f 0c0a 	mov.w	ip, #10
 8006670:	9a07      	ldr	r2, [sp, #28]
 8006672:	4621      	mov	r1, r4
 8006674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006678:	3b30      	subs	r3, #48	; 0x30
 800667a:	2b09      	cmp	r3, #9
 800667c:	d94d      	bls.n	800671a <_vfiprintf_r+0x1a6>
 800667e:	b1b0      	cbz	r0, 80066ae <_vfiprintf_r+0x13a>
 8006680:	9207      	str	r2, [sp, #28]
 8006682:	e014      	b.n	80066ae <_vfiprintf_r+0x13a>
 8006684:	eba0 0308 	sub.w	r3, r0, r8
 8006688:	fa09 f303 	lsl.w	r3, r9, r3
 800668c:	4313      	orrs	r3, r2
 800668e:	46a2      	mov	sl, r4
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	e7d2      	b.n	800663a <_vfiprintf_r+0xc6>
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	1d19      	adds	r1, r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	9103      	str	r1, [sp, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	bfbb      	ittet	lt
 80066a0:	425b      	neglt	r3, r3
 80066a2:	f042 0202 	orrlt.w	r2, r2, #2
 80066a6:	9307      	strge	r3, [sp, #28]
 80066a8:	9307      	strlt	r3, [sp, #28]
 80066aa:	bfb8      	it	lt
 80066ac:	9204      	strlt	r2, [sp, #16]
 80066ae:	7823      	ldrb	r3, [r4, #0]
 80066b0:	2b2e      	cmp	r3, #46	; 0x2e
 80066b2:	d10c      	bne.n	80066ce <_vfiprintf_r+0x15a>
 80066b4:	7863      	ldrb	r3, [r4, #1]
 80066b6:	2b2a      	cmp	r3, #42	; 0x2a
 80066b8:	d134      	bne.n	8006724 <_vfiprintf_r+0x1b0>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	3402      	adds	r4, #2
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	9203      	str	r2, [sp, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfb8      	it	lt
 80066c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006798 <_vfiprintf_r+0x224>
 80066d2:	2203      	movs	r2, #3
 80066d4:	4650      	mov	r0, sl
 80066d6:	7821      	ldrb	r1, [r4, #0]
 80066d8:	f7fe f95b 	bl	8004992 <memchr>
 80066dc:	b138      	cbz	r0, 80066ee <_vfiprintf_r+0x17a>
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	eba0 000a 	sub.w	r0, r0, sl
 80066e6:	4082      	lsls	r2, r0
 80066e8:	4313      	orrs	r3, r2
 80066ea:	3401      	adds	r4, #1
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f2:	2206      	movs	r2, #6
 80066f4:	4829      	ldr	r0, [pc, #164]	; (800679c <_vfiprintf_r+0x228>)
 80066f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066fa:	f7fe f94a 	bl	8004992 <memchr>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d03f      	beq.n	8006782 <_vfiprintf_r+0x20e>
 8006702:	4b27      	ldr	r3, [pc, #156]	; (80067a0 <_vfiprintf_r+0x22c>)
 8006704:	bb1b      	cbnz	r3, 800674e <_vfiprintf_r+0x1da>
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	3307      	adds	r3, #7
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	3308      	adds	r3, #8
 8006710:	9303      	str	r3, [sp, #12]
 8006712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006714:	443b      	add	r3, r7
 8006716:	9309      	str	r3, [sp, #36]	; 0x24
 8006718:	e768      	b.n	80065ec <_vfiprintf_r+0x78>
 800671a:	460c      	mov	r4, r1
 800671c:	2001      	movs	r0, #1
 800671e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006722:	e7a6      	b.n	8006672 <_vfiprintf_r+0xfe>
 8006724:	2300      	movs	r3, #0
 8006726:	f04f 0c0a 	mov.w	ip, #10
 800672a:	4619      	mov	r1, r3
 800672c:	3401      	adds	r4, #1
 800672e:	9305      	str	r3, [sp, #20]
 8006730:	4620      	mov	r0, r4
 8006732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006736:	3a30      	subs	r2, #48	; 0x30
 8006738:	2a09      	cmp	r2, #9
 800673a:	d903      	bls.n	8006744 <_vfiprintf_r+0x1d0>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0c6      	beq.n	80066ce <_vfiprintf_r+0x15a>
 8006740:	9105      	str	r1, [sp, #20]
 8006742:	e7c4      	b.n	80066ce <_vfiprintf_r+0x15a>
 8006744:	4604      	mov	r4, r0
 8006746:	2301      	movs	r3, #1
 8006748:	fb0c 2101 	mla	r1, ip, r1, r2
 800674c:	e7f0      	b.n	8006730 <_vfiprintf_r+0x1bc>
 800674e:	ab03      	add	r3, sp, #12
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	462a      	mov	r2, r5
 8006754:	4630      	mov	r0, r6
 8006756:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <_vfiprintf_r+0x230>)
 8006758:	a904      	add	r1, sp, #16
 800675a:	f7fd fbb3 	bl	8003ec4 <_printf_float>
 800675e:	4607      	mov	r7, r0
 8006760:	1c78      	adds	r0, r7, #1
 8006762:	d1d6      	bne.n	8006712 <_vfiprintf_r+0x19e>
 8006764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	d405      	bmi.n	8006776 <_vfiprintf_r+0x202>
 800676a:	89ab      	ldrh	r3, [r5, #12]
 800676c:	059a      	lsls	r2, r3, #22
 800676e:	d402      	bmi.n	8006776 <_vfiprintf_r+0x202>
 8006770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006772:	f7fe f90d 	bl	8004990 <__retarget_lock_release_recursive>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	065b      	lsls	r3, r3, #25
 800677a:	f53f af1d 	bmi.w	80065b8 <_vfiprintf_r+0x44>
 800677e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006780:	e71c      	b.n	80065bc <_vfiprintf_r+0x48>
 8006782:	ab03      	add	r3, sp, #12
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	462a      	mov	r2, r5
 8006788:	4630      	mov	r0, r6
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <_vfiprintf_r+0x230>)
 800678c:	a904      	add	r1, sp, #16
 800678e:	f7fd fe39 	bl	8004404 <_printf_i>
 8006792:	e7e4      	b.n	800675e <_vfiprintf_r+0x1ea>
 8006794:	080072c4 	.word	0x080072c4
 8006798:	080072ca 	.word	0x080072ca
 800679c:	080072ce 	.word	0x080072ce
 80067a0:	08003ec5 	.word	0x08003ec5
 80067a4:	08006551 	.word	0x08006551

080067a8 <__swbuf_r>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	460e      	mov	r6, r1
 80067ac:	4614      	mov	r4, r2
 80067ae:	4605      	mov	r5, r0
 80067b0:	b118      	cbz	r0, 80067ba <__swbuf_r+0x12>
 80067b2:	6a03      	ldr	r3, [r0, #32]
 80067b4:	b90b      	cbnz	r3, 80067ba <__swbuf_r+0x12>
 80067b6:	f7fd ffd3 	bl	8004760 <__sinit>
 80067ba:	69a3      	ldr	r3, [r4, #24]
 80067bc:	60a3      	str	r3, [r4, #8]
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	071a      	lsls	r2, r3, #28
 80067c2:	d525      	bpl.n	8006810 <__swbuf_r+0x68>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	b31b      	cbz	r3, 8006810 <__swbuf_r+0x68>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	6922      	ldr	r2, [r4, #16]
 80067cc:	b2f6      	uxtb	r6, r6
 80067ce:	1a98      	subs	r0, r3, r2
 80067d0:	6963      	ldr	r3, [r4, #20]
 80067d2:	4637      	mov	r7, r6
 80067d4:	4283      	cmp	r3, r0
 80067d6:	dc04      	bgt.n	80067e2 <__swbuf_r+0x3a>
 80067d8:	4621      	mov	r1, r4
 80067da:	4628      	mov	r0, r5
 80067dc:	f7ff fda2 	bl	8006324 <_fflush_r>
 80067e0:	b9e0      	cbnz	r0, 800681c <__swbuf_r+0x74>
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	60a3      	str	r3, [r4, #8]
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	701e      	strb	r6, [r3, #0]
 80067f0:	6962      	ldr	r2, [r4, #20]
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d004      	beq.n	8006802 <__swbuf_r+0x5a>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	07db      	lsls	r3, r3, #31
 80067fc:	d506      	bpl.n	800680c <__swbuf_r+0x64>
 80067fe:	2e0a      	cmp	r6, #10
 8006800:	d104      	bne.n	800680c <__swbuf_r+0x64>
 8006802:	4621      	mov	r1, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f7ff fd8d 	bl	8006324 <_fflush_r>
 800680a:	b938      	cbnz	r0, 800681c <__swbuf_r+0x74>
 800680c:	4638      	mov	r0, r7
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	4621      	mov	r1, r4
 8006812:	4628      	mov	r0, r5
 8006814:	f000 f806 	bl	8006824 <__swsetup_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	d0d5      	beq.n	80067c8 <__swbuf_r+0x20>
 800681c:	f04f 37ff 	mov.w	r7, #4294967295
 8006820:	e7f4      	b.n	800680c <__swbuf_r+0x64>
	...

08006824 <__swsetup_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <__swsetup_r+0xac>)
 8006828:	4605      	mov	r5, r0
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	460c      	mov	r4, r1
 800682e:	b118      	cbz	r0, 8006838 <__swsetup_r+0x14>
 8006830:	6a03      	ldr	r3, [r0, #32]
 8006832:	b90b      	cbnz	r3, 8006838 <__swsetup_r+0x14>
 8006834:	f7fd ff94 	bl	8004760 <__sinit>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800683e:	0718      	lsls	r0, r3, #28
 8006840:	d422      	bmi.n	8006888 <__swsetup_r+0x64>
 8006842:	06d9      	lsls	r1, r3, #27
 8006844:	d407      	bmi.n	8006856 <__swsetup_r+0x32>
 8006846:	2309      	movs	r3, #9
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800684e:	f04f 30ff 	mov.w	r0, #4294967295
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	e034      	b.n	80068c0 <__swsetup_r+0x9c>
 8006856:	0758      	lsls	r0, r3, #29
 8006858:	d512      	bpl.n	8006880 <__swsetup_r+0x5c>
 800685a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800685c:	b141      	cbz	r1, 8006870 <__swsetup_r+0x4c>
 800685e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006862:	4299      	cmp	r1, r3
 8006864:	d002      	beq.n	800686c <__swsetup_r+0x48>
 8006866:	4628      	mov	r0, r5
 8006868:	f7fe ff0e 	bl	8005688 <_free_r>
 800686c:	2300      	movs	r3, #0
 800686e:	6363      	str	r3, [r4, #52]	; 0x34
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	2300      	movs	r3, #0
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	f043 0308 	orr.w	r3, r3, #8
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	b94b      	cbnz	r3, 80068a0 <__swsetup_r+0x7c>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d003      	beq.n	80068a0 <__swsetup_r+0x7c>
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f883 	bl	80069a6 <__smakebuf_r>
 80068a0:	89a0      	ldrh	r0, [r4, #12]
 80068a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068a6:	f010 0301 	ands.w	r3, r0, #1
 80068aa:	d00a      	beq.n	80068c2 <__swsetup_r+0x9e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	60a3      	str	r3, [r4, #8]
 80068b0:	6963      	ldr	r3, [r4, #20]
 80068b2:	425b      	negs	r3, r3
 80068b4:	61a3      	str	r3, [r4, #24]
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	b943      	cbnz	r3, 80068cc <__swsetup_r+0xa8>
 80068ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068be:	d1c4      	bne.n	800684a <__swsetup_r+0x26>
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	0781      	lsls	r1, r0, #30
 80068c4:	bf58      	it	pl
 80068c6:	6963      	ldrpl	r3, [r4, #20]
 80068c8:	60a3      	str	r3, [r4, #8]
 80068ca:	e7f4      	b.n	80068b6 <__swsetup_r+0x92>
 80068cc:	2000      	movs	r0, #0
 80068ce:	e7f7      	b.n	80068c0 <__swsetup_r+0x9c>
 80068d0:	20000064 	.word	0x20000064

080068d4 <_raise_r>:
 80068d4:	291f      	cmp	r1, #31
 80068d6:	b538      	push	{r3, r4, r5, lr}
 80068d8:	4604      	mov	r4, r0
 80068da:	460d      	mov	r5, r1
 80068dc:	d904      	bls.n	80068e8 <_raise_r+0x14>
 80068de:	2316      	movs	r3, #22
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80068ea:	b112      	cbz	r2, 80068f2 <_raise_r+0x1e>
 80068ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068f0:	b94b      	cbnz	r3, 8006906 <_raise_r+0x32>
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f830 	bl	8006958 <_getpid_r>
 80068f8:	462a      	mov	r2, r5
 80068fa:	4601      	mov	r1, r0
 80068fc:	4620      	mov	r0, r4
 80068fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006902:	f000 b817 	b.w	8006934 <_kill_r>
 8006906:	2b01      	cmp	r3, #1
 8006908:	d00a      	beq.n	8006920 <_raise_r+0x4c>
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	d103      	bne.n	8006916 <_raise_r+0x42>
 800690e:	2316      	movs	r3, #22
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	2001      	movs	r0, #1
 8006914:	e7e7      	b.n	80068e6 <_raise_r+0x12>
 8006916:	2400      	movs	r4, #0
 8006918:	4628      	mov	r0, r5
 800691a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800691e:	4798      	blx	r3
 8006920:	2000      	movs	r0, #0
 8006922:	e7e0      	b.n	80068e6 <_raise_r+0x12>

08006924 <raise>:
 8006924:	4b02      	ldr	r3, [pc, #8]	; (8006930 <raise+0xc>)
 8006926:	4601      	mov	r1, r0
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	f7ff bfd3 	b.w	80068d4 <_raise_r>
 800692e:	bf00      	nop
 8006930:	20000064 	.word	0x20000064

08006934 <_kill_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	2300      	movs	r3, #0
 8006938:	4d06      	ldr	r5, [pc, #24]	; (8006954 <_kill_r+0x20>)
 800693a:	4604      	mov	r4, r0
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	f7fa fbbf 	bl	80010c4 <_kill>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d102      	bne.n	8006950 <_kill_r+0x1c>
 800694a:	682b      	ldr	r3, [r5, #0]
 800694c:	b103      	cbz	r3, 8006950 <_kill_r+0x1c>
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop
 8006954:	200003ec 	.word	0x200003ec

08006958 <_getpid_r>:
 8006958:	f7fa bbad 	b.w	80010b6 <_getpid>

0800695c <__swhatbuf_r>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	460c      	mov	r4, r1
 8006960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006964:	4615      	mov	r5, r2
 8006966:	2900      	cmp	r1, #0
 8006968:	461e      	mov	r6, r3
 800696a:	b096      	sub	sp, #88	; 0x58
 800696c:	da0c      	bge.n	8006988 <__swhatbuf_r+0x2c>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	2100      	movs	r1, #0
 8006972:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006976:	bf0c      	ite	eq
 8006978:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800697c:	2340      	movne	r3, #64	; 0x40
 800697e:	2000      	movs	r0, #0
 8006980:	6031      	str	r1, [r6, #0]
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	b016      	add	sp, #88	; 0x58
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	466a      	mov	r2, sp
 800698a:	f000 f849 	bl	8006a20 <_fstat_r>
 800698e:	2800      	cmp	r0, #0
 8006990:	dbed      	blt.n	800696e <__swhatbuf_r+0x12>
 8006992:	9901      	ldr	r1, [sp, #4]
 8006994:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006998:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800699c:	4259      	negs	r1, r3
 800699e:	4159      	adcs	r1, r3
 80069a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a4:	e7eb      	b.n	800697e <__swhatbuf_r+0x22>

080069a6 <__smakebuf_r>:
 80069a6:	898b      	ldrh	r3, [r1, #12]
 80069a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069aa:	079d      	lsls	r5, r3, #30
 80069ac:	4606      	mov	r6, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	d507      	bpl.n	80069c2 <__smakebuf_r+0x1c>
 80069b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	2301      	movs	r3, #1
 80069bc:	6163      	str	r3, [r4, #20]
 80069be:	b002      	add	sp, #8
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	466a      	mov	r2, sp
 80069c4:	ab01      	add	r3, sp, #4
 80069c6:	f7ff ffc9 	bl	800695c <__swhatbuf_r>
 80069ca:	9900      	ldr	r1, [sp, #0]
 80069cc:	4605      	mov	r5, r0
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7fe feca 	bl	8005768 <_malloc_r>
 80069d4:	b948      	cbnz	r0, 80069ea <__smakebuf_r+0x44>
 80069d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069da:	059a      	lsls	r2, r3, #22
 80069dc:	d4ef      	bmi.n	80069be <__smakebuf_r+0x18>
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	f043 0302 	orr.w	r3, r3, #2
 80069e6:	81a3      	strh	r3, [r4, #12]
 80069e8:	e7e3      	b.n	80069b2 <__smakebuf_r+0xc>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	6020      	str	r0, [r4, #0]
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	9b00      	ldr	r3, [sp, #0]
 80069f6:	6120      	str	r0, [r4, #16]
 80069f8:	6163      	str	r3, [r4, #20]
 80069fa:	9b01      	ldr	r3, [sp, #4]
 80069fc:	b15b      	cbz	r3, 8006a16 <__smakebuf_r+0x70>
 80069fe:	4630      	mov	r0, r6
 8006a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a04:	f000 f81e 	bl	8006a44 <_isatty_r>
 8006a08:	b128      	cbz	r0, 8006a16 <__smakebuf_r+0x70>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f023 0303 	bic.w	r3, r3, #3
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	431d      	orrs	r5, r3
 8006a1a:	81a5      	strh	r5, [r4, #12]
 8006a1c:	e7cf      	b.n	80069be <__smakebuf_r+0x18>
	...

08006a20 <_fstat_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	2300      	movs	r3, #0
 8006a24:	4d06      	ldr	r5, [pc, #24]	; (8006a40 <_fstat_r+0x20>)
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	f7fa fba7 	bl	8001180 <_fstat>
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	d102      	bne.n	8006a3c <_fstat_r+0x1c>
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	b103      	cbz	r3, 8006a3c <_fstat_r+0x1c>
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
 8006a3e:	bf00      	nop
 8006a40:	200003ec 	.word	0x200003ec

08006a44 <_isatty_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	2300      	movs	r3, #0
 8006a48:	4d05      	ldr	r5, [pc, #20]	; (8006a60 <_isatty_r+0x1c>)
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fa fba5 	bl	800119e <_isatty>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_isatty_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_isatty_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	200003ec 	.word	0x200003ec

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	bf00      	nop
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
