
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001484c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002508  08014af0  08014af0  00015af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016ff8  08016ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017000  08017000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017004  08017004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  08017008  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006e10  240002f4  080172fc  000192f4  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  24007104  080172fc  0001a104  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038f84  00000000  00000000  00019322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d60  00000000  00000000  000522a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026e8  00000000  00000000  0005a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d55  00000000  00000000  0005c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000414fe  00000000  00000000  0005e445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000370f5  00000000  00000000  0009f943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176af1  00000000  00000000  000d6a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024d529  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b14c  00000000  00000000  0024d5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00258730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  002587a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0025899a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ad4 	.word	0x08014ad4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08014ad4 	.word	0x08014ad4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f012 f85a 	bl	8012672 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fc9b 	bl	8001f00 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 fd5f 	bl	8001092 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fd8a 	bl	8002108 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 fd4a 	bl	8001092 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 fe8d 	bl	80023a0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fb98 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fbaf 	bl	8001df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80006b0:	f010 fa28 	bl	8010b04 <OLED_Init>
  ad7606_Init();
 80006b4:	f00f fde8 	bl	8010288 <ad7606_Init>
  INA228_config(INA228_0);
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_FREERTOS_Init+0xa4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f00f fef8 	bl	80104b2 <INA228_config>
  pll_Init_V(&signal_V, 50, 20000, 10.f);
 80006c2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80006c6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006ca:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8000754 <MX_FREERTOS_Init+0xa8>
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <MX_FREERTOS_Init+0xac>)
 80006d0:	f010 fd36 	bl	8011140 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006d4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006d8:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000754 <MX_FREERTOS_Init+0xa8>
 80006dc:	481f      	ldr	r0, [pc, #124]	@ (800075c <MX_FREERTOS_Init+0xb0>)
 80006de:	f010 fdc7 	bl	8011270 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	481e      	ldr	r0, [pc, #120]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006e6:	f008 fd0d 	bl	8009104 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006ee:	f008 fd09 	bl	8009104 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	481a      	ldr	r0, [pc, #104]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006f6:	f008 fd05 	bl	8009104 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4819      	ldr	r0, [pc, #100]	@ (8000764 <MX_FREERTOS_Init+0xb8>)
 80006fe:	f001 fc21 	bl	8001f44 <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 8000706:	f00f fdf9 	bl	80102fc <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 800070c:	2100      	movs	r1, #0
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 8000710:	f00c fae8 	bl	800cce4 <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 800071c:	2100      	movs	r1, #0
 800071e:	4817      	ldr	r0, [pc, #92]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 8000720:	f00c fae0 	bl	800cce4 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 800072c:	2100      	movs	r1, #0
 800072e:	4816      	ldr	r0, [pc, #88]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 8000730:	f00c fad8 	bl	800cce4 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 800073c:	2100      	movs	r1, #0
 800073e:	4815      	ldr	r0, [pc, #84]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 8000740:	f00c fad0 	bl	800cce4 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0801646c 	.word	0x0801646c
 8000754:	42480000 	.word	0x42480000
 8000758:	24006fb0 	.word	0x24006fb0
 800075c:	24006fb4 	.word	0x24006fb4
 8000760:	2400052c 	.word	0x2400052c
 8000764:	24000310 	.word	0x24000310
 8000768:	24000578 	.word	0x24000578
 800076c:	08014bcc 	.word	0x08014bcc
 8000770:	0800079d 	.word	0x0800079d
 8000774:	24000324 	.word	0x24000324
 8000778:	08014bf0 	.word	0x08014bf0
 800077c:	080007fd 	.word	0x080007fd
 8000780:	24000328 	.word	0x24000328
 8000784:	08014c14 	.word	0x08014c14
 8000788:	080008b5 	.word	0x080008b5
 800078c:	2400032c 	.word	0x2400032c
 8000790:	08014c38 	.word	0x08014c38
 8000794:	080008fd 	.word	0x080008fd
 8000798:	24000330 	.word	0x24000330

0800079c <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007a4:	f00f f830 	bl	800f808 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007a8:	2101      	movs	r1, #1
 80007aa:	4813      	ldr	r0, [pc, #76]	@ (80007f8 <StartStateLED+0x5c>)
 80007ac:	f001 ffc1 	bl	8002732 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007b0:	2064      	movs	r0, #100	@ 0x64
 80007b2:	f00c fb29 	bl	800ce08 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007b6:	2101      	movs	r1, #1
 80007b8:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <StartStateLED+0x5c>)
 80007ba:	f001 ffba 	bl	8002732 <HAL_GPIO_TogglePin>
    osDelay(200);
 80007be:	20c8      	movs	r0, #200	@ 0xc8
 80007c0:	f00c fb22 	bl	800ce08 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007c4:	2101      	movs	r1, #1
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <StartStateLED+0x5c>)
 80007c8:	f001 ffb3 	bl	8002732 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f00c fb1b 	bl	800ce08 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007d2:	2101      	movs	r1, #1
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <StartStateLED+0x5c>)
 80007d6:	f001 ffac 	bl	8002732 <HAL_GPIO_TogglePin>
    osDelay(200);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f00c fb14 	bl	800ce08 <osDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <StartStateLED+0x5c>)
 80007e6:	f001 ff8b 	bl	8002700 <HAL_GPIO_WritePin>
    osDelay(1000);
 80007ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ee:	f00c fb0b 	bl	800ce08 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007f2:	bf00      	nop
 80007f4:	e7d8      	b.n	80007a8 <StartStateLED+0xc>
 80007f6:	bf00      	nop
 80007f8:	58022000 	.word	0x58022000

080007fc <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */
  static uint8_t text[32] = {0};
  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "Ua: %6.3f Ub: %6.3f", signal_V->basic->input_a, signal_V->basic->input_b);
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <StartOledShow+0x9c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	edd3 7a00 	vldr	s15, [r3]
 800080e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <StartOledShow+0x9c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	edd3 7a01 	vldr	s15, [r3, #4]
 800081c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000820:	ed8d 7b00 	vstr	d7, [sp]
 8000824:	ec53 2b16 	vmov	r2, r3, d6
 8000828:	491c      	ldr	r1, [pc, #112]	@ (800089c <StartOledShow+0xa0>)
 800082a:	481d      	ldr	r0, [pc, #116]	@ (80008a0 <StartOledShow+0xa4>)
 800082c:	f011 febe 	bl	80125ac <siprintf>
    OLED_ShowString(0, 0, text, 12);
 8000830:	230c      	movs	r3, #12
 8000832:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <StartOledShow+0xa4>)
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f010 f930 	bl	8010a9c <OLED_ShowString>
    sprintf((char *)text, "Ia: %6.3f Ib: %6.3f", adcValue[3], adcValue[4]);
 800083c:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <StartOledShow+0xa8>)
 800083e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <StartOledShow+0xa8>)
 8000848:	edd3 7a04 	vldr	s15, [r3, #16]
 800084c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000850:	ed8d 7b00 	vstr	d7, [sp]
 8000854:	ec53 2b16 	vmov	r2, r3, d6
 8000858:	4913      	ldr	r1, [pc, #76]	@ (80008a8 <StartOledShow+0xac>)
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <StartOledShow+0xa4>)
 800085c:	f011 fea6 	bl	80125ac <siprintf>
    OLED_ShowString(0, 12, text, 12);
 8000860:	230c      	movs	r3, #12
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <StartOledShow+0xa4>)
 8000864:	210c      	movs	r1, #12
 8000866:	2000      	movs	r0, #0
 8000868:	f010 f918 	bl	8010a9c <OLED_ShowString>
    sprintf((char *)text, "cnt: %ld", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1));
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <StartOledShow+0xb0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000872:	461a      	mov	r2, r3
 8000874:	490e      	ldr	r1, [pc, #56]	@ (80008b0 <StartOledShow+0xb4>)
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <StartOledShow+0xa4>)
 8000878:	f011 fe98 	bl	80125ac <siprintf>
    OLED_ShowString(0, 24, text, 12);
 800087c:	230c      	movs	r3, #12
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <StartOledShow+0xa4>)
 8000880:	2118      	movs	r1, #24
 8000882:	2000      	movs	r0, #0
 8000884:	f010 f90a 	bl	8010a9c <OLED_ShowString>
    OLED_Refresh();
 8000888:	f00f ff98 	bl	80107bc <OLED_Refresh>
    osDelay(100);
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f00c fabb 	bl	800ce08 <osDelay>
    sprintf((char *)text, "Ua: %6.3f Ub: %6.3f", signal_V->basic->input_a, signal_V->basic->input_b);
 8000892:	bf00      	nop
 8000894:	e7b6      	b.n	8000804 <StartOledShow+0x8>
 8000896:	bf00      	nop
 8000898:	24006fb0 	.word	0x24006fb0
 800089c:	08014b1c 	.word	0x08014b1c
 80008a0:	24000334 	.word	0x24000334
 80008a4:	24006f88 	.word	0x24006f88
 80008a8:	08014b30 	.word	0x08014b30
 80008ac:	2400052c 	.word	0x2400052c
 80008b0:	08014b44 	.word	0x08014b44

080008b4 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <StartDcSamp+0x3c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00f fea5 	bl	8010610 <INA228_getVBUS_V>
 80008c6:	eef0 7a40 	vmov.f32	s15, s0
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <StartDcSamp+0x40>)
 80008cc:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <StartDcSamp+0x3c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00f ff1f 	bl	8010718 <INA228_getCURRENT_A>
 80008da:	eef0 7a40 	vmov.f32	s15, s0
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <StartDcSamp+0x44>)
 80008e0:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 80008e4:	200a      	movs	r0, #10
 80008e6:	f00c fa8f 	bl	800ce08 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 80008ea:	bf00      	nop
 80008ec:	e7e6      	b.n	80008bc <StartDcSamp+0x8>
 80008ee:	bf00      	nop
 80008f0:	0801646c 	.word	0x0801646c
 80008f4:	24006fa8 	.word	0x24006fa8
 80008f8:	24006fac 	.word	0x24006fac

080008fc <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b0ac      	sub	sp, #176	@ 0xb0
 8000900:	af02      	add	r7, sp, #8
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsartDebug */
  static uint8_t text[32] = {0};
  osThreadId_t currentTaskId[] = {stateLEDHandle, oledShowHandle, dcSampHandle, usartDebugHandle};
 8000904:	4b46      	ldr	r3, [pc, #280]	@ (8000a20 <StartUsartDebug+0x124>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800090c:	4b45      	ldr	r3, [pc, #276]	@ (8000a24 <StartUsartDebug+0x128>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000914:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <StartUsartDebug+0x12c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800091c:	4b43      	ldr	r3, [pc, #268]	@ (8000a2c <StartUsartDebug+0x130>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  osThreadAttr_t currentTaskAttr[] = {stateLED_attributes, oledShow_attributes, dcSamp_attributes, usartDebug_attributes};
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	2224      	movs	r2, #36	@ 0x24
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f011 fea0 	bl	8012672 <memset>
 8000932:	4b3f      	ldr	r3, [pc, #252]	@ (8000a30 <StartUsartDebug+0x134>)
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	2318      	movs	r3, #24
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000944:	2224      	movs	r2, #36	@ 0x24
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f011 fe92 	bl	8012672 <memset>
 800094e:	4b39      	ldr	r3, [pc, #228]	@ (8000a34 <StartUsartDebug+0x138>)
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000956:	643b      	str	r3, [r7, #64]	@ 0x40
 8000958:	2318      	movs	r3, #24
 800095a:	647b      	str	r3, [r7, #68]	@ 0x44
 800095c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000960:	2224      	movs	r2, #36	@ 0x24
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f011 fe84 	bl	8012672 <memset>
 800096a:	4b33      	ldr	r3, [pc, #204]	@ (8000a38 <StartUsartDebug+0x13c>)
 800096c:	653b      	str	r3, [r7, #80]	@ 0x50
 800096e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000972:	667b      	str	r3, [r7, #100]	@ 0x64
 8000974:	2328      	movs	r3, #40	@ 0x28
 8000976:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000978:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800097c:	2224      	movs	r2, #36	@ 0x24
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f011 fe76 	bl	8012672 <memset>
 8000986:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <StartUsartDebug+0x140>)
 8000988:	677b      	str	r3, [r7, #116]	@ 0x74
 800098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000992:	2318      	movs	r3, #24
 8000994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  static int i = 0;
  /* Infinite loop */
  for (;;)
  {
    // 输出各任务堆栈使用情况
    sprintf((char *)text, "%d.%-10s: %4ld / %4ld \r\n", i, pcTaskGetTaskName(currentTaskId[i]), uxTaskGetStackHighWaterMark(currentTaskId[i]), currentTaskAttr[i].stack_size);
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <StartUsartDebug+0x144>)
 800099a:	681c      	ldr	r4, [r3, #0]
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <StartUsartDebug+0x144>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	33a8      	adds	r3, #168	@ 0xa8
 80009a4:	443b      	add	r3, r7
 80009a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00d fb2a 	bl	800e004 <pcTaskGetName>
 80009b0:	4605      	mov	r5, r0
 80009b2:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <StartUsartDebug+0x144>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	33a8      	adds	r3, #168	@ 0xa8
 80009ba:	443b      	add	r3, r7
 80009bc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f00d fe3b 	bl	800e63c <uxTaskGetStackHighWaterMark>
 80009c6:	4601      	mov	r1, r0
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <StartUsartDebug+0x144>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4413      	add	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	33a8      	adds	r3, #168	@ 0xa8
 80009d6:	443b      	add	r3, r7
 80009d8:	3b8c      	subs	r3, #140	@ 0x8c
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9100      	str	r1, [sp, #0]
 80009e0:	462b      	mov	r3, r5
 80009e2:	4622      	mov	r2, r4
 80009e4:	4917      	ldr	r1, [pc, #92]	@ (8000a44 <StartUsartDebug+0x148>)
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <StartUsartDebug+0x14c>)
 80009e8:	f011 fde0 	bl	80125ac <siprintf>
    CDC_Transmit_FS(text, 32);
 80009ec:	2120      	movs	r1, #32
 80009ee:	4816      	ldr	r0, [pc, #88]	@ (8000a48 <StartUsartDebug+0x14c>)
 80009f0:	f00e ffca 	bl	800f988 <CDC_Transmit_FS>
    memset(text, 0, 32);
 80009f4:	2220      	movs	r2, #32
 80009f6:	2100      	movs	r1, #0
 80009f8:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <StartUsartDebug+0x14c>)
 80009fa:	f011 fe3a 	bl	8012672 <memset>
    i++;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <StartUsartDebug+0x144>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <StartUsartDebug+0x144>)
 8000a06:	6013      	str	r3, [r2, #0]
    if (i >= 4)
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <StartUsartDebug+0x144>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	dd02      	ble.n	8000a16 <StartUsartDebug+0x11a>
    {
      i = 0;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <StartUsartDebug+0x144>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
    }
    osDelay(500);
 8000a16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a1a:	f00c f9f5 	bl	800ce08 <osDelay>
    sprintf((char *)text, "%d.%-10s: %4ld / %4ld \r\n", i, pcTaskGetTaskName(currentTaskId[i]), uxTaskGetStackHighWaterMark(currentTaskId[i]), currentTaskAttr[i].stack_size);
 8000a1e:	e7bb      	b.n	8000998 <StartUsartDebug+0x9c>
 8000a20:	24000324 	.word	0x24000324
 8000a24:	24000328 	.word	0x24000328
 8000a28:	2400032c 	.word	0x2400032c
 8000a2c:	24000330 	.word	0x24000330
 8000a30:	08014af0 	.word	0x08014af0
 8000a34:	08014afc 	.word	0x08014afc
 8000a38:	08014b08 	.word	0x08014b08
 8000a3c:	08014b10 	.word	0x08014b10
 8000a40:	24000354 	.word	0x24000354
 8000a44:	08014b50 	.word	0x08014b50
 8000a48:	24000358 	.word	0x24000358

08000a4c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b69      	ldr	r3, [pc, #420]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4a67      	ldr	r2, [pc, #412]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4b65      	ldr	r3, [pc, #404]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a80:	4b61      	ldr	r3, [pc, #388]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	4a60      	ldr	r2, [pc, #384]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a90:	4b5d      	ldr	r3, [pc, #372]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	4a58      	ldr	r2, [pc, #352]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aae:	4b56      	ldr	r3, [pc, #344]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	4a51      	ldr	r2, [pc, #324]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000acc:	4b4e      	ldr	r3, [pc, #312]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ada:	4b4b      	ldr	r3, [pc, #300]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a49      	ldr	r2, [pc, #292]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000af8:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a42      	ldr	r2, [pc, #264]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b3f      	ldr	r3, [pc, #252]	@ (8000c08 <MX_GPIO_Init+0x1bc>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	483c      	ldr	r0, [pc, #240]	@ (8000c0c <MX_GPIO_Init+0x1c0>)
 8000b1c:	f001 fdf0 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2102      	movs	r1, #2
 8000b24:	483a      	ldr	r0, [pc, #232]	@ (8000c10 <MX_GPIO_Init+0x1c4>)
 8000b26:	f001 fdeb 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2188      	movs	r1, #136	@ 0x88
 8000b2e:	4839      	ldr	r0, [pc, #228]	@ (8000c14 <MX_GPIO_Init+0x1c8>)
 8000b30:	f001 fde6 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	4837      	ldr	r0, [pc, #220]	@ (8000c18 <MX_GPIO_Init+0x1cc>)
 8000b3a:	f001 fde1 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	@ 0x40
 8000b42:	4835      	ldr	r0, [pc, #212]	@ (8000c18 <MX_GPIO_Init+0x1cc>)
 8000b44:	f001 fddc 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	482b      	ldr	r0, [pc, #172]	@ (8000c0c <MX_GPIO_Init+0x1c0>)
 8000b60:	f001 fc1e 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4825      	ldr	r0, [pc, #148]	@ (8000c10 <MX_GPIO_Init+0x1c4>)
 8000b7c:	f001 fc10 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000b80:	2388      	movs	r3, #136	@ 0x88
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	481f      	ldr	r0, [pc, #124]	@ (8000c14 <MX_GPIO_Init+0x1c8>)
 8000b98:	f001 fc02 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000b9c:	2340      	movs	r3, #64	@ 0x40
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4818      	ldr	r0, [pc, #96]	@ (8000c14 <MX_GPIO_Init+0x1c8>)
 8000bb2:	f001 fbf5 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <MX_GPIO_Init+0x1cc>)
 8000bce:	f001 fbe7 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000bd2:	2340      	movs	r3, #64	@ 0x40
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <MX_GPIO_Init+0x1cc>)
 8000bea:	f001 fbd9 	bl	80023a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f001 f8e4 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f001 f8fb 	bl	8001df4 <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020800 	.word	0x58020800
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58021800 	.word	0x58021800
 8000c18:	58022000 	.word	0x58022000

08000c1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <MX_I2C1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_I2C1_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c58:	f001 fda0 	bl	800279c <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 fa16 	bl	8001092 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c6a:	f002 fb23 	bl	80032b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 fa0d 	bl	8001092 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c7c:	f002 fb65 	bl	800334a <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 fa04 	bl	8001092 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24000378 	.word	0x24000378
 8000c94:	40005400 	.word	0x40005400
 8000c98:	307075b1 	.word	0x307075b1

08000c9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	22c0      	movs	r2, #192	@ 0xc0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f011 fcd8 	bl	8012672 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <HAL_I2C_MspInit+0xc4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d145      	bne.n	8000d58 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ccc:	f04f 0208 	mov.w	r2, #8
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fe78 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cee:	f000 f9d0 	bl	8001092 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_I2C_MspInit+0xc8>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d64 <HAL_I2C_MspInit+0xc8>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_I2C_MspInit+0xc8>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d10:	23c0      	movs	r3, #192	@ 0xc0
 8000d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <HAL_I2C_MspInit+0xcc>)
 8000d36:	f001 fb33 	bl	80023a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_I2C_MspInit+0xc8>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d40:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_I2C_MspInit+0xc8>)
 8000d42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_I2C_MspInit+0xc8>)
 8000d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d58:	bf00      	nop
 8000d5a:	37e8      	adds	r7, #232	@ 0xe8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40005400 	.word	0x40005400
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58020400 	.word	0x58020400

08000d6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d72:	f000 f961 	bl	8001038 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d76:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <main+0x10c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11b      	bne.n	8000dba <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d82:	f3bf 8f4f 	dsb	sy
}
 8000d86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d88:	f3bf 8f6f 	isb	sy
}
 8000d8c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e78 <main+0x10c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d96:	f3bf 8f4f 	dsb	sy
}
 8000d9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d9c:	f3bf 8f6f 	isb	sy
}
 8000da0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000da2:	4b35      	ldr	r3, [pc, #212]	@ (8000e78 <main+0x10c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a34      	ldr	r2, [pc, #208]	@ (8000e78 <main+0x10c>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dae:	f3bf 8f4f 	dsb	sy
}
 8000db2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000db4:	f3bf 8f6f 	isb	sy
}
 8000db8:	e000      	b.n	8000dbc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000dba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <main+0x10c>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d138      	bne.n	8000e3a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e78 <main+0x10c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
}
 8000dd4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dd6:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <main+0x10c>)
 8000dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ddc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	0b5b      	lsrs	r3, r3, #13
 8000de2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000de6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000df0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	015a      	lsls	r2, r3, #5
 8000df6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000dfa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e00:	491d      	ldr	r1, [pc, #116]	@ (8000e78 <main+0x10c>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1e5a      	subs	r2, r3, #1
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1ef      	bne.n	8000df2 <main+0x86>
    } while(sets-- != 0U);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	60ba      	str	r2, [r7, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e5      	bne.n	8000de8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1c:	f3bf 8f4f 	dsb	sy
}
 8000e20:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <main+0x10c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <main+0x10c>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e2e:	f3bf 8f4f 	dsb	sy
}
 8000e32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e34:	f3bf 8f6f 	isb	sy
}
 8000e38:	e000      	b.n	8000e3c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e3a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 fe7c 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f81c 	bl	8000e7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e44:	f000 f8c8 	bl	8000fd8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f7ff fe00 	bl	8000a4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e4c:	f000 f928 	bl	80010a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e50:	f000 f97c 	bl	800114c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e54:	f000 fd34 	bl	80018c0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e58:	f7ff fee0 	bl	8000c1c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e5c:	f000 fc68 	bl	8001730 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000e60:	f7ff fba4 	bl	80005ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000e64:	f00e fcd0 	bl	800f808 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e68:	f00b fef2 	bl	800cc50 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e6c:	f7ff fc1e 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e70:	f00b ff12 	bl	800cc98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <main+0x108>
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09e      	sub	sp, #120	@ 0x78
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e86:	224c      	movs	r2, #76	@ 0x4c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f011 fbf1 	bl	8012672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2220      	movs	r2, #32
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f011 fbea 	bl	8012672 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f003 fd3e 	bl	8004920 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	4b48      	ldr	r3, [pc, #288]	@ (8000fcc <SystemClock_Config+0x150>)
 8000eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eac:	4a47      	ldr	r2, [pc, #284]	@ (8000fcc <SystemClock_Config+0x150>)
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000eb4:	4b45      	ldr	r3, [pc, #276]	@ (8000fcc <SystemClock_Config+0x150>)
 8000eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b44      	ldr	r3, [pc, #272]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a43      	ldr	r2, [pc, #268]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b41      	ldr	r3, [pc, #260]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000ed6:	bf00      	nop
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ee4:	d1f8      	bne.n	8000ed8 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <SystemClock_Config+0x158>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eec:	4a39      	ldr	r2, [pc, #228]	@ (8000fd4 <SystemClock_Config+0x158>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ef6:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <SystemClock_Config+0x158>)
 8000ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a30      	ldr	r2, [pc, #192]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <SystemClock_Config+0x150>)
 8000f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f22:	4a2a      	ldr	r2, [pc, #168]	@ (8000fcc <SystemClock_Config+0x150>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <SystemClock_Config+0x150>)
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000f36:	bf00      	nop
 8000f38:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <SystemClock_Config+0x154>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f44:	d1f8      	bne.n	8000f38 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f54:	2302      	movs	r3, #2
 8000f56:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f5c:	23c0      	movs	r3, #192	@ 0xc0
 8000f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000f64:	2314      	movs	r3, #20
 8000f66:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fd19 	bl	80049b4 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000f88:	f000 f883 	bl	8001092 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000f8c:	233f      	movs	r3, #63	@ 0x3f
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f9c:	2340      	movs	r3, #64	@ 0x40
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fa0:	2340      	movs	r3, #64	@ 0x40
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000faa:	2340      	movs	r3, #64	@ 0x40
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 f957 	bl	8005268 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000fc0:	f000 f867 	bl	8001092 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3778      	adds	r7, #120	@ 0x78
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58000400 	.word	0x58000400
 8000fd0:	58024800 	.word	0x58024800
 8000fd4:	58024400 	.word	0x58024400

08000fd8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0b0      	sub	sp, #192	@ 0xc0
 8000fdc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	22c0      	movs	r2, #192	@ 0xc0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f011 fb44 	bl	8012672 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000fea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000ff6:	2319      	movs	r3, #25
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000ffa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800100c:	2300      	movs	r3, #0
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001010:	2300      	movs	r3, #0
 8001012:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fcd9 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800102c:	f000 f831 	bl	8001092 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	37c0      	adds	r7, #192	@ 0xc0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800104a:	f000 fee1 	bl	8001e10 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800104e:	2301      	movs	r3, #1
 8001050:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001052:	2300      	movs	r3, #0
 8001054:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001056:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800105a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800105c:	2312      	movs	r3, #18
 800105e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001060:	2300      	movs	r3, #0
 8001062:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001064:	2301      	movs	r3, #1
 8001066:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001068:	2303      	movs	r3, #3
 800106a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001074:	2301      	movs	r3, #1
 8001076:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800107c:	463b      	mov	r3, r7
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fefe 	bl	8001e80 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001084:	2004      	movs	r0, #4
 8001086:	f000 fedb 	bl	8001e40 <HAL_MPU_Enable>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001096:	b672      	cpsid	i
}
 8001098:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109a:	bf00      	nop
 800109c:	e7fd      	b.n	800109a <Error_Handler+0x8>
	...

080010a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010a6:	4a28      	ldr	r2, [pc, #160]	@ (8001148 <MX_SPI1_Init+0xa8>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80010b2:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010bc:	2207      	movs	r2, #7
 80010be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c0:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_SPI1_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001100:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_SPI1_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_SPI1_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <MX_SPI1_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_SPI1_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <MX_SPI1_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_SPI1_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <MX_SPI1_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_SPI1_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_SPI1_Init+0xa4>)
 8001132:	f005 ffbf 	bl	80070b4 <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800113c:	f7ff ffa9 	bl	8001092 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	240003cc 	.word	0x240003cc
 8001148:	40013000 	.word	0x40013000

0800114c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001152:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <MX_SPI2_Init+0xac>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001158:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800115c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001160:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001164:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001168:	220f      	movs	r2, #15
 800116a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 800116e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001172:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 800117c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001180:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001184:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001188:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_SPI2_Init+0xa8>)
 80011e2:	f005 ff67 	bl	80070b4 <HAL_SPI_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80011ec:	f7ff ff51 	bl	8001092 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	24000454 	.word	0x24000454
 80011f8:	40003800 	.word	0x40003800

080011fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	@ 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a34      	ldr	r2, [pc, #208]	@ (80012ec <HAL_SPI_MspInit+0xf0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12e      	bne.n	800127c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800121e:	4b34      	ldr	r3, [pc, #208]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 8001220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001224:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800122a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 8001230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800125a:	23a0      	movs	r3, #160	@ 0xa0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126a:	2305      	movs	r3, #5
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	481f      	ldr	r0, [pc, #124]	@ (80012f4 <HAL_SPI_MspInit+0xf8>)
 8001276:	f001 f893 	bl	80023a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800127a:	e032      	b.n	80012e2 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1d      	ldr	r2, [pc, #116]	@ (80012f8 <HAL_SPI_MspInit+0xfc>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12d      	bne.n	80012e2 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 8001288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800128c:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001292:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001296:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 8001298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_SPI_MspInit+0xf4>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012c2:	2306      	movs	r3, #6
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d2:	2305      	movs	r3, #5
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <HAL_SPI_MspInit+0x100>)
 80012de:	f001 f85f 	bl	80023a0 <HAL_GPIO_Init>
}
 80012e2:	bf00      	nop
 80012e4:	3730      	adds	r7, #48	@ 0x30
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40013000 	.word	0x40013000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020000 	.word	0x58020000
 80012f8:	40003800 	.word	0x40003800
 80012fc:	58022000 	.word	0x58022000

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_MspInit+0x38>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800130c:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_MspInit+0x38>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_MspInit+0x38>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	210f      	movs	r1, #15
 8001328:	f06f 0001 	mvn.w	r0, #1
 800132c:	f000 fd48 	bl	8001dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	@ 0x40
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d827      	bhi.n	800139a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800134a:	2200      	movs	r2, #0
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	2036      	movs	r0, #54	@ 0x36
 8001350:	f000 fd36 	bl	8001dc0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001354:	2036      	movs	r0, #54	@ 0x36
 8001356:	f000 fd4d 	bl	8001df4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800135a:	4a29      	ldr	r2, [pc, #164]	@ (8001400 <HAL_InitTick+0xc4>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001360:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <HAL_InitTick+0xc8>)
 8001362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001366:	4a27      	ldr	r2, [pc, #156]	@ (8001404 <HAL_InitTick+0xc8>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001370:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <HAL_InitTick+0xc8>)
 8001372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137e:	f107 0210 	add.w	r2, r7, #16
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fae3 	bl	8005954 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800138e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <HAL_InitTick+0x6a>
 8001398:	e001      	b.n	800139e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e02b      	b.n	80013f6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800139e:	f004 fac3 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 80013a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80013a4:	e004      	b.n	80013b0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013a6:	f004 fabf 	bl	8005928 <HAL_RCC_GetPCLK1Freq>
 80013aa:	4603      	mov	r3, r0
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b2:	4a15      	ldr	r2, [pc, #84]	@ (8001408 <HAL_InitTick+0xcc>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9b      	lsrs	r3, r3, #18
 80013ba:	3b01      	subs	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <HAL_InitTick+0xd0>)
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <HAL_InitTick+0xd4>)
 80013c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_InitTick+0xd0>)
 80013c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013cc:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <HAL_InitTick+0xd0>)
 80013ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_InitTick+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_InitTick+0xd0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013de:	480b      	ldr	r0, [pc, #44]	@ (800140c <HAL_InitTick+0xd0>)
 80013e0:	f006 fcd5 	bl	8007d8e <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013ea:	4808      	ldr	r0, [pc, #32]	@ (800140c <HAL_InitTick+0xd0>)
 80013ec:	f006 fd26 	bl	8007e3c <HAL_TIM_Base_Start_IT>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e000      	b.n	80013f6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3740      	adds	r7, #64	@ 0x40
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24000008 	.word	0x24000008
 8001404:	58024400 	.word	0x58024400
 8001408:	431bde83 	.word	0x431bde83
 800140c:	240004dc 	.word	0x240004dc
 8001410:	40001000 	.word	0x40001000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800144e:	2040      	movs	r0, #64	@ 0x40
 8001450:	f001 f989 	bl	8002766 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <TIM6_DAC_IRQHandler+0x20>)
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001466:	4804      	ldr	r0, [pc, #16]	@ (8001478 <TIM6_DAC_IRQHandler+0x20>)
 8001468:	f000 fdc3 	bl	8001ff2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <TIM6_DAC_IRQHandler+0x24>)
 800146e:	f006 fecd 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000310 	.word	0x24000310
 800147c:	240004dc 	.word	0x240004dc

08001480 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <OTG_FS_IRQHandler+0x10>)
 8001486:	f002 f8ed 	bl	8003664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	240063f8 	.word	0x240063f8

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ae:	f011 f943 	bl	8012738 <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
  return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d6:	bf00      	nop
 80014d8:	e7fd      	b.n	80014d6 <_exit+0x12>

080014da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e00a      	b.n	8001502 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ec:	f3af 8000 	nop.w
 80014f0:	4601      	mov	r1, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf0      	blt.n	80014ec <_read+0x12>
  }

  return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e009      	b.n	800153a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf1      	blt.n	8001526 <_write+0x12>
  }
  return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_close>:

int _close(int file)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	605a      	str	r2, [r3, #4]
  return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_isatty>:

int _isatty(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	@ (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f011 f8a8 	bl	8012738 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24080000 	.word	0x24080000
 8001614:	00004000 	.word	0x00004000
 8001618:	24000528 	.word	0x24000528
 800161c:	24007108 	.word	0x24007108

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <SystemInit+0xe4>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162a:	4a36      	ldr	r2, [pc, #216]	@ (8001704 <SystemInit+0xe4>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <SystemInit+0xe8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	2b06      	cmp	r3, #6
 800163e:	d807      	bhi.n	8001650 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <SystemInit+0xe8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 030f 	bic.w	r3, r3, #15
 8001648:	4a2f      	ldr	r2, [pc, #188]	@ (8001708 <SystemInit+0xe8>)
 800164a:	f043 0307 	orr.w	r3, r3, #7
 800164e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001650:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <SystemInit+0xec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2d      	ldr	r2, [pc, #180]	@ (800170c <SystemInit+0xec>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <SystemInit+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <SystemInit+0xec>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4929      	ldr	r1, [pc, #164]	@ (800170c <SystemInit+0xec>)
 8001668:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <SystemInit+0xf0>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <SystemInit+0xe8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800167a:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <SystemInit+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 030f 	bic.w	r3, r3, #15
 8001682:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <SystemInit+0xe8>)
 8001684:	f043 0307 	orr.w	r3, r3, #7
 8001688:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <SystemInit+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <SystemInit+0xec>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <SystemInit+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <SystemInit+0xec>)
 800169e:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <SystemInit+0xf4>)
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <SystemInit+0xec>)
 80016a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <SystemInit+0xf8>)
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <SystemInit+0xec>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <SystemInit+0xfc>)
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <SystemInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <SystemInit+0xec>)
 80016b6:	4a19      	ldr	r2, [pc, #100]	@ (800171c <SystemInit+0xfc>)
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <SystemInit+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <SystemInit+0xec>)
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <SystemInit+0xfc>)
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <SystemInit+0xec>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <SystemInit+0xec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <SystemInit+0xec>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <SystemInit+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <SystemInit+0x100>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <SystemInit+0x104>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016ea:	d202      	bcs.n	80016f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <SystemInit+0x108>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <SystemInit+0x10c>)
 80016f4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	52002000 	.word	0x52002000
 800170c:	58024400 	.word	0x58024400
 8001710:	eaf6ed7f 	.word	0xeaf6ed7f
 8001714:	02020200 	.word	0x02020200
 8001718:	01ff0000 	.word	0x01ff0000
 800171c:	01010280 	.word	0x01010280
 8001720:	5c001000 	.word	0x5c001000
 8001724:	ffff0000 	.word	0xffff0000
 8001728:	51008108 	.word	0x51008108
 800172c:	52004000 	.word	0x52004000

08001730 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b09a      	sub	sp, #104	@ 0x68
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	222c      	movs	r2, #44	@ 0x2c
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f010 ff81 	bl	8012672 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001770:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001772:	4a52      	ldr	r2, [pc, #328]	@ (80018bc <MX_TIM1_Init+0x18c>)
 8001774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001776:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800177c:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <MX_TIM1_Init+0x188>)
 800177e:	2220      	movs	r2, #32
 8001780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8001782:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001784:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001788:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <MX_TIM1_Init+0x188>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001790:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b48      	ldr	r3, [pc, #288]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800179c:	4846      	ldr	r0, [pc, #280]	@ (80018b8 <MX_TIM1_Init+0x188>)
 800179e:	f006 faf6 	bl	8007d8e <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f7ff fc73 	bl	8001092 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017b6:	4619      	mov	r1, r3
 80017b8:	483f      	ldr	r0, [pc, #252]	@ (80018b8 <MX_TIM1_Init+0x188>)
 80017ba:	f006 ff43 	bl	8008644 <HAL_TIM_ConfigClockSource>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017c4:	f7ff fc65 	bl	8001092 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017c8:	483b      	ldr	r0, [pc, #236]	@ (80018b8 <MX_TIM1_Init+0x188>)
 80017ca:	f006 fbaf 	bl	8007f2c <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017d4:	f7ff fc5d 	bl	8001092 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4833      	ldr	r0, [pc, #204]	@ (80018b8 <MX_TIM1_Init+0x188>)
 80017ec:	f007 fd4c 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017f6:	f7ff fc4c 	bl	8001092 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	@ 0x60
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 80017fe:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800180c:	2304      	movs	r3, #4
 800180e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	4825      	ldr	r0, [pc, #148]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001822:	f006 fdfb 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800182c:	f7ff fc31 	bl	8001092 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001830:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001834:	2204      	movs	r2, #4
 8001836:	4619      	mov	r1, r3
 8001838:	481f      	ldr	r0, [pc, #124]	@ (80018b8 <MX_TIM1_Init+0x188>)
 800183a:	f006 fdef 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001844:	f7ff fc25 	bl	8001092 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800184c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001850:	2208      	movs	r2, #8
 8001852:	4619      	mov	r1, r3
 8001854:	4818      	ldr	r0, [pc, #96]	@ (80018b8 <MX_TIM1_Init+0x188>)
 8001856:	f006 fde1 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001860:	f7ff fc17 	bl	8001092 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <MX_TIM1_Init+0x188>)
 800189a:	f007 fd83 	bl	80093a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80018a4:	f7ff fbf5 	bl	8001092 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <MX_TIM1_Init+0x188>)
 80018aa:	f000 f8b9 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80018ae:	bf00      	nop
 80018b0:	3768      	adds	r7, #104	@ 0x68
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2400052c 	.word	0x2400052c
 80018bc:	40010000 	.word	0x40010000

080018c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08e      	sub	sp, #56	@ 0x38
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018f2:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <MX_TIM2_Init+0xec>)
 80018f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018fa:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <MX_TIM2_Init+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001908:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800190c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800191a:	4824      	ldr	r0, [pc, #144]	@ (80019ac <MX_TIM2_Init+0xec>)
 800191c:	f006 fa37 	bl	8007d8e <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001926:	f7ff fbb4 	bl	8001092 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001934:	4619      	mov	r1, r3
 8001936:	481d      	ldr	r0, [pc, #116]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001938:	f006 fe84 	bl	8008644 <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001942:	f7ff fba6 	bl	8001092 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001946:	4819      	ldr	r0, [pc, #100]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001948:	f006 faf0 	bl	8007f2c <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001952:	f7ff fb9e 	bl	8001092 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_TIM2_Init+0xec>)
 8001966:	f007 fc8f 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001970:	f7ff fb8f 	bl	8001092 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	@ 0x60
 8001976:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001978:	f242 3327 	movw	r3, #8999	@ 0x2327
 800197c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4807      	ldr	r0, [pc, #28]	@ (80019ac <MX_TIM2_Init+0xec>)
 800198e:	f006 fd45 	bl	800841c <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001998:	f7ff fb7b 	bl	8001092 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <MX_TIM2_Init+0xec>)
 800199e:	f000 f83f 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	3738      	adds	r7, #56	@ 0x38
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	24000578 	.word	0x24000578

080019b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a16      	ldr	r2, [pc, #88]	@ (8001a18 <HAL_TIM_Base_MspInit+0x68>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10f      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c2:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <HAL_TIM_Base_MspInit+0x6c>)
 80019c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019c8:	4a14      	ldr	r2, [pc, #80]	@ (8001a1c <HAL_TIM_Base_MspInit+0x6c>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_TIM_Base_MspInit+0x6c>)
 80019d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019e0:	e013      	b.n	8001a0a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ea:	d10e      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_TIM_Base_MspInit+0x6c>)
 80019ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <HAL_TIM_Base_MspInit+0x6c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019fc:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_TIM_Base_MspInit+0x6c>)
 80019fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	58024400 	.word	0x58024400

08001a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d120      	bne.n	8001a84 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001a60:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4817      	ldr	r0, [pc, #92]	@ (8001adc <HAL_TIM_MspPostInit+0xbc>)
 8001a7e:	f000 fc8f 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a82:	e023      	b.n	8001acc <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a8c:	d11e      	bne.n	8001acc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <HAL_TIM_MspPostInit+0xc0>)
 8001ac8:	f000 fc6a 	bl	80023a0 <HAL_GPIO_Init>
}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	58020400 	.word	0x58020400
 8001ae0:	58020000 	.word	0x58020000

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae8:	f7ff fd9a 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	@ (8001b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f010 fe17 	bl	8012744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b16:	f7ff f929 	bl	8000d6c <main>
  bx  lr
 8001b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b24:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001b28:	08017008 	.word	0x08017008
  ldr r2, =_sbss
 8001b2c:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001b30:	24007104 	.word	0x24007104

08001b34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC3_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f000 f933 	bl	8001daa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b44:	f003 fd46 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_Init+0x68>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	4913      	ldr	r1, [pc, #76]	@ (8001ba4 <HAL_Init+0x6c>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_Init+0x68>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <HAL_Init+0x6c>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <HAL_Init+0x70>)
 8001b7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_Init+0x74>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b82:	2005      	movs	r0, #5
 8001b84:	f7ff fbda 	bl	800133c <HAL_InitTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e002      	b.n	8001b98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b92:	f7ff fbb5 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	08014c5c 	.word	0x08014c5c
 8001ba8:	24000004 	.word	0x24000004
 8001bac:	24000000 	.word	0x24000000

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2400000c 	.word	0x2400000c
 8001bd4:	240005c4 	.word	0x240005c4

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	240005c4 	.word	0x240005c4

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2400000c 	.word	0x2400000c

08001c38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetREVID+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0c1b      	lsrs	r3, r3, #16
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	5c001000 	.word	0x5c001000

08001c50 <__NVIC_SetPriorityGrouping>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	05fa0000 	.word	0x05fa0000

08001c98 <__NVIC_GetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	@ (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	@ (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff4c 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dce:	f7ff ff63 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001dd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	6978      	ldr	r0, [r7, #20]
 8001dda:	f7ff ffb3 	bl	8001d44 <NVIC_EncodePriority>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff82 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001dec:	bf00      	nop
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff56 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e14:	f3bf 8f5f 	dmb	sy
}
 8001e18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_MPU_Disable+0x28>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <HAL_MPU_Disable+0x28>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e24:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_MPU_Disable+0x2c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00
 8001e3c:	e000ed90 	.word	0xe000ed90

08001e40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_MPU_Enable+0x38>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_MPU_Enable+0x3c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_MPU_Enable+0x3c>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e5e:	f3bf 8f4f 	dsb	sy
}
 8001e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e64:	f3bf 8f6f 	isb	sy
}
 8001e68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed90 	.word	0xe000ed90
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	785a      	ldrb	r2, [r3, #1]
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7b1b      	ldrb	r3, [r3, #12]
 8001ea8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7adb      	ldrb	r3, [r3, #11]
 8001eae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7a9b      	ldrb	r3, [r3, #10]
 8001eb6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b5b      	ldrb	r3, [r3, #13]
 8001ebe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7b9b      	ldrb	r3, [r3, #14]
 8001ec6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7bdb      	ldrb	r3, [r3, #15]
 8001ece:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7a5b      	ldrb	r3, [r3, #9]
 8001ed6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7a1b      	ldrb	r3, [r3, #8]
 8001ede:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ee0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eec:	6113      	str	r3, [r2, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed90 	.word	0xe000ed90

08001f00 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e014      	b.n	8001f3c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fb74 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e046      	b.n	8001fe6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	795b      	ldrb	r3, [r3, #5]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_DAC_Start+0x20>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e040      	b.n	8001fe6 <HAL_DAC_Start+0xa2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d11d      	bne.n	8001fd8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	e014      	b.n	8001fd8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0202 	orr.w	r2, r2, #2
 8001fd6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002008:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01d      	beq.n	8002050 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d018      	beq.n	8002050 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2204      	movs	r2, #4
 8002022:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002038:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002048:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f851 	bl	80020f2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01d      	beq.n	8002096 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d018      	beq.n	8002096 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2204      	movs	r2, #4
 8002068:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800208e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f97b 	bl	800238c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800209e:	b480      	push	{r7}
 80020a0:	b087      	sub	sp, #28
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e015      	b.n	80020e6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	3308      	adds	r3, #8
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e004      	b.n	80020dc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	3314      	adds	r3, #20
 80020da:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_DAC_ConfigChannel+0x1e>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e12a      	b.n	8002380 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	795b      	ldrb	r3, [r3, #5]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_DAC_ConfigChannel+0x2e>
 8002132:	2302      	movs	r3, #2
 8002134:	e124      	b.n	8002380 <HAL_DAC_ConfigChannel+0x278>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2202      	movs	r2, #2
 8002140:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d17a      	bne.n	8002240 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800214a:	f7ff fd45 	bl	8001bd8 <HAL_GetTick>
 800214e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d13d      	bne.n	80021d2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002156:	e018      	b.n	800218a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002158:	f7ff fd3e 	bl	8001bd8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d911      	bls.n	800218a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216c:	4b86      	ldr	r3, [pc, #536]	@ (8002388 <HAL_DAC_ConfigChannel+0x280>)
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f043 0208 	orr.w	r2, r3, #8
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2203      	movs	r2, #3
 8002184:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0fa      	b.n	8002380 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002190:	4b7d      	ldr	r3, [pc, #500]	@ (8002388 <HAL_DAC_ConfigChannel+0x280>)
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1df      	bne.n	8002158 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	6992      	ldr	r2, [r2, #24]
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80021a2:	e020      	b.n	80021e6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80021a4:	f7ff fd18 	bl	8001bd8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d90f      	bls.n	80021d2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0a      	bge.n	80021d2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f043 0208 	orr.w	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2203      	movs	r2, #3
 80021cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0d6      	b.n	8002380 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	2b00      	cmp	r3, #0
 80021da:	dbe3      	blt.n	80021a4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	6992      	ldr	r2, [r2, #24]
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	ea02 0103 	and.w	r1, r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	21ff      	movs	r1, #255	@ 0xff
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	ea02 0103 	and.w	r1, r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11d      	bne.n	8002284 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	221f      	movs	r2, #31
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2207      	movs	r2, #7
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d102      	bne.n	80022ae <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ac:	e00f      	b.n	80022ce <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d102      	bne.n	80022bc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	e008      	b.n	80022ce <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80022c4:	2301      	movs	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c8:	e001      	b.n	80022ce <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43da      	mvns	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	22c0      	movs	r2, #192	@ 0xc0
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	400a      	ands	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800237c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	@ 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20008000 	.word	0x20008000

0800238c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023ae:	4b89      	ldr	r3, [pc, #548]	@ (80025d4 <HAL_GPIO_Init+0x234>)
 80023b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023b2:	e194      	b.n	80026de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2101      	movs	r1, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8186 	beq.w	80026d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d005      	beq.n	80023e4 <HAL_GPIO_Init+0x44>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d130      	bne.n	8002446 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800241a:	2201      	movs	r2, #1
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0201 	and.w	r2, r3, #1
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b03      	cmp	r3, #3
 8002450:	d017      	beq.n	8002482 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d123      	bne.n	80024d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	220f      	movs	r2, #15
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	69b9      	ldr	r1, [r7, #24]
 80024d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0203 	and.w	r2, r3, #3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80e0 	beq.w	80026d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002518:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_GPIO_Init+0x238>)
 800251a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800251e:	4a2e      	ldr	r2, [pc, #184]	@ (80025d8 <HAL_GPIO_Init+0x238>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <HAL_GPIO_Init+0x238>)
 800252a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	4a29      	ldr	r2, [pc, #164]	@ (80025dc <HAL_GPIO_Init+0x23c>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a20      	ldr	r2, [pc, #128]	@ (80025e0 <HAL_GPIO_Init+0x240>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d052      	beq.n	8002608 <HAL_GPIO_Init+0x268>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1f      	ldr	r2, [pc, #124]	@ (80025e4 <HAL_GPIO_Init+0x244>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d031      	beq.n	80025ce <HAL_GPIO_Init+0x22e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1e      	ldr	r2, [pc, #120]	@ (80025e8 <HAL_GPIO_Init+0x248>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x22a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1d      	ldr	r2, [pc, #116]	@ (80025ec <HAL_GPIO_Init+0x24c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_GPIO_Init+0x250>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <HAL_GPIO_Init+0x254>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1a      	ldr	r2, [pc, #104]	@ (80025f8 <HAL_GPIO_Init+0x258>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a19      	ldr	r2, [pc, #100]	@ (80025fc <HAL_GPIO_Init+0x25c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_GPIO_Init+0x260>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <HAL_GPIO_Init+0x264>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x20e>
 80025aa:	2309      	movs	r3, #9
 80025ac:	e02d      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025ae:	230a      	movs	r3, #10
 80025b0:	e02b      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025b2:	2308      	movs	r3, #8
 80025b4:	e029      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e027      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e025      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025be:	2305      	movs	r3, #5
 80025c0:	e023      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e021      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e01f      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e01d      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e01b      	b.n	800260a <HAL_GPIO_Init+0x26a>
 80025d2:	bf00      	nop
 80025d4:	58000080 	.word	0x58000080
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58000400 	.word	0x58000400
 80025e0:	58020000 	.word	0x58020000
 80025e4:	58020400 	.word	0x58020400
 80025e8:	58020800 	.word	0x58020800
 80025ec:	58020c00 	.word	0x58020c00
 80025f0:	58021000 	.word	0x58021000
 80025f4:	58021400 	.word	0x58021400
 80025f8:	58021800 	.word	0x58021800
 80025fc:	58021c00 	.word	0x58021c00
 8002600:	58022000 	.word	0x58022000
 8002604:	58022400 	.word	0x58022400
 8002608:	2300      	movs	r3, #0
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4093      	lsls	r3, r2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261a:	4938      	ldr	r1, [pc, #224]	@ (80026fc <HAL_GPIO_Init+0x35c>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800264e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800267c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f47f ae63 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3724      	adds	r7, #36	@ 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	58000400 	.word	0x58000400

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002744:	887a      	ldrh	r2, [r7, #2]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43d9      	mvns	r1, r3
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	400b      	ands	r3, r1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002774:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	4618      	mov	r0, r3
 800278e:	f00f f83b 	bl	8011808 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08b      	b.n	80028c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fa6a 	bl	8000c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e006      	b.n	8002824 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002822:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d108      	bne.n	800283e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	e007      	b.n	800284e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800284c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_I2C_Init+0x134>)
 800285a:	430b      	orrs	r3, r1
 800285c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800286c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	02008000 	.word	0x02008000

080028d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	817b      	strh	r3, [r7, #10]
 80028e6:	460b      	mov	r3, r1
 80028e8:	813b      	strh	r3, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	f040 80f9 	bne.w	8002aee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_I2C_Mem_Write+0x34>
 8002902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0ed      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2C_Mem_Write+0x4e>
 800291e:	2302      	movs	r3, #2
 8002920:	e0e6      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800292a:	f7ff f955 	bl	8001bd8 <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2319      	movs	r3, #25
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fac3 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d1      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2221      	movs	r2, #33	@ 0x21
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2240      	movs	r2, #64	@ 0x40
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002974:	88f8      	ldrh	r0, [r7, #6]
 8002976:	893a      	ldrh	r2, [r7, #8]
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4603      	mov	r3, r0
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f9d3 	bl	8002d30 <I2C_RequestMemoryWrite>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0a9      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	@ 0xff
 80029a4:	d90e      	bls.n	80029c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	@ 0xff
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc47 	bl	8003250 <I2C_TransferConfig>
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	8979      	ldrh	r1, [r7, #10]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fc36 	bl	8003250 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fac6 	bl	8002f7a <I2C_WaitOnTXISFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07b      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d034      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d130      	bne.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	@ 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fa3f 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04d      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2bff      	cmp	r3, #255	@ 0xff
 8002a5c:	d90e      	bls.n	8002a7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	22ff      	movs	r2, #255	@ 0xff
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fbeb 	bl	8003250 <I2C_TransferConfig>
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fbda 	bl	8003250 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d19e      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 faac 	bl	8003008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01a      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_I2C_Mem_Write+0x224>)
 8002ace:	400b      	ands	r3, r1
 8002ad0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fe00e800 	.word	0xfe00e800

08002afc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	f040 80fd 	bne.w	8002d1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x34>
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b36:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0f1      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Mem_Read+0x4e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0ea      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b52:	f7ff f841 	bl	8001bd8 <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f9af 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d5      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2222      	movs	r2, #34	@ 0x22
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2240      	movs	r2, #64	@ 0x40
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b9c:	88f8      	ldrh	r0, [r7, #6]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f913 	bl	8002dd8 <I2C_RequestMemoryRead>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ad      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2bff      	cmp	r3, #255	@ 0xff
 8002bcc:	d90e      	bls.n	8002bec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	@ 0xff
 8002bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	4b52      	ldr	r3, [pc, #328]	@ (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fb33 	bl	8003250 <I2C_TransferConfig>
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fb22 	bl	8003250 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	2200      	movs	r2, #0
 8002c14:	2104      	movs	r1, #4
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f956 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07c      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d034      	beq.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d130      	bne.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	2180      	movs	r1, #128	@ 0x80
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f927 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04d      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2bff      	cmp	r3, #255	@ 0xff
 8002c8c:	d90e      	bls.n	8002cac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	@ 0xff
 8002c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	8979      	ldrh	r1, [r7, #10]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fad3 	bl	8003250 <I2C_TransferConfig>
 8002caa:	e00f      	b.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fac2 	bl	8003250 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d19a      	bne.n	8002c0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f994 	bl	8003008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e01a      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_I2C_Mem_Read+0x230>)
 8002cfe:	400b      	ands	r3, r1
 8002d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	80002400 	.word	0x80002400
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <I2C_RequestMemoryWrite+0xa4>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa79 	bl	8003250 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f909 	bl	8002f7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02c      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d82:	e015      	b.n	8002db0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	69b9      	ldr	r1, [r7, #24]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8ef 	bl	8002f7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e012      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2180      	movs	r1, #128	@ 0x80
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f884 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	80002000 	.word	0x80002000

08002dd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <I2C_RequestMemoryRead+0xa4>)
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa26 	bl	8003250 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f8b6 	bl	8002f7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02c      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e28:	e015      	b.n	8002e56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f89c 	bl	8002f7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e012      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	@ 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f831 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	80002000 	.word	0x80002000

08002e80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d103      	bne.n	8002e9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	619a      	str	r2, [r3, #24]
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e03b      	b.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8d6 	bl	8003090 <I2C_IsErrorOccurred>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e041      	b.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d02d      	beq.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe fe6f 	bl	8001bd8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d122      	bne.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d113      	bne.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d0b4      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f86:	e033      	b.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f87f 	bl	8003090 <I2C_IsErrorOccurred>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e031      	b.n	8003000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d025      	beq.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fe fe18 	bl	8001bd8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d11a      	bne.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d013      	beq.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d1c4      	bne.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003014:	e02f      	b.n	8003076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f838 	bl	8003090 <I2C_IsErrorOccurred>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02d      	b.n	8003086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe fdd5 	bl	8001bd8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11a      	bne.n	8003076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d013      	beq.n	8003076 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e007      	b.n	8003086 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b20      	cmp	r3, #32
 8003082:	d1c8      	bne.n	8003016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d068      	beq.n	800318e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030c4:	e049      	b.n	800315a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d045      	beq.n	800315a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fd83 	bl	8001bd8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_IsErrorOccurred+0x54>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d13a      	bne.n	800315a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003106:	d121      	bne.n	800314c <I2C_IsErrorOccurred+0xbc>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800310e:	d01d      	beq.n	800314c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	2b20      	cmp	r3, #32
 8003114:	d01a      	beq.n	800314c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003124:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003126:	f7fe fd57 	bl	8001bd8 <HAL_GetTick>
 800312a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	e00e      	b.n	800314c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800312e:	f7fe fd53 	bl	8001bd8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b19      	cmp	r3, #25
 800313a:	d907      	bls.n	800314c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800314a:	e006      	b.n	800315a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d1e9      	bne.n	800312e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d003      	beq.n	8003170 <I2C_IsErrorOccurred+0xe0>
 8003168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0aa      	beq.n	80030c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2220      	movs	r2, #32
 800317e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01c      	beq.n	800323e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff fe3b 	bl	8002e80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <I2C_IsErrorOccurred+0x1bc>)
 8003216:	400b      	ands	r3, r1
 8003218:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800323e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003242:	4618      	mov	r0, r3
 8003244:	3728      	adds	r7, #40	@ 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	fe00e800 	.word	0xfe00e800

08003250 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	4613      	mov	r3, r2
 8003260:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003268:	7a7b      	ldrb	r3, [r7, #9]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003270:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	4313      	orrs	r3, r2
 800327a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800327e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	0d5b      	lsrs	r3, r3, #21
 800328a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <I2C_TransferConfig+0x60>)
 8003290:	430b      	orrs	r3, r1
 8003292:	43db      	mvns	r3, r3
 8003294:	ea02 0103 	and.w	r1, r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	03ff63ff 	.word	0x03ff63ff

080032b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d138      	bne.n	800333c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e032      	b.n	800333e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	@ 0x24
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003306:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b20      	cmp	r3, #32
 800335e:	d139      	bne.n	80033d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800336a:	2302      	movs	r3, #2
 800336c:	e033      	b.n	80033d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2224      	movs	r2, #36	@ 0x24
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800339c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af02      	add	r7, sp, #8
 80033e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0fe      	b.n	80035f2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d106      	bne.n	800340e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f00c fc05 	bl	800fc18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2203      	movs	r2, #3
 8003412:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f006 f9a9 	bl	8009772 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7c1a      	ldrb	r2, [r3, #16]
 8003428:	f88d 2000 	strb.w	r2, [sp]
 800342c:	3304      	adds	r3, #4
 800342e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003430:	f006 f87a 	bl	8009528 <USB_CoreInit>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0d5      	b.n	80035f2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f006 f9a1 	bl	8009794 <USB_SetCurrentMode>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0c6      	b.n	80035f2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e04a      	b.n	8003500 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3315      	adds	r3, #21
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3314      	adds	r3, #20
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	b298      	uxth	r0, r3
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	332e      	adds	r3, #46	@ 0x2e
 80034a6:	4602      	mov	r2, r0
 80034a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3318      	adds	r3, #24
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	331c      	adds	r3, #28
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3320      	adds	r3, #32
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3324      	adds	r3, #36	@ 0x24
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3301      	adds	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	791b      	ldrb	r3, [r3, #4]
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	429a      	cmp	r2, r3
 8003508:	d3af      	bcc.n	800346a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e044      	b.n	800359a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	3301      	adds	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3b5      	bcc.n	8003510 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7c1a      	ldrb	r2, [r3, #16]
 80035ac:	f88d 2000 	strb.w	r2, [sp]
 80035b0:	3304      	adds	r3, #4
 80035b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b4:	f006 f93a 	bl	800982c <USB_DevInit>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e013      	b.n	80035f2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7b1b      	ldrb	r3, [r3, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f001 f96d 	bl	80048c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f007 f979 	bl	800a8e2 <USB_DevDisconnect>

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_PCD_Start+0x1c>
 8003612:	2302      	movs	r3, #2
 8003614:	e022      	b.n	800365c <HAL_PCD_Start+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f006 f884 	bl	8009750 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f007 f927 	bl	800a8a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b08d      	sub	sp, #52	@ 0x34
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f007 f9e5 	bl	800aa4a <USB_GetMode>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 84b9 	bne.w	8003ffa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f007 f949 	bl	800a924 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 84af 	beq.w	8003ff8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f007 f936 	bl	800a924 <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d107      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f002 0202 	and.w	r2, r2, #2
 80036d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f007 f924 	bl	800a924 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d161      	bne.n	80037aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0210 	bic.w	r2, r2, #16
 80036f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	3304      	adds	r3, #4
 8003714:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	0c5b      	lsrs	r3, r3, #17
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	2b02      	cmp	r3, #2
 8003720:	d124      	bne.n	800376c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d035      	beq.n	800379a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	6a38      	ldr	r0, [r7, #32]
 8003742:	f006 ff5b 	bl	800a5fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003752:	441a      	add	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003764:	441a      	add	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	615a      	str	r2, [r3, #20]
 800376a:	e016      	b.n	800379a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	0c5b      	lsrs	r3, r3, #17
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	2b06      	cmp	r3, #6
 8003776:	d110      	bne.n	800379a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800377e:	2208      	movs	r2, #8
 8003780:	4619      	mov	r1, r3
 8003782:	6a38      	ldr	r0, [r7, #32]
 8003784:	f006 ff3a 	bl	800a5fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003794:	441a      	add	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0210 	orr.w	r2, r2, #16
 80037a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f007 f8b8 	bl	800a924 <USB_ReadInterrupts>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037be:	f040 80a7 	bne.w	8003910 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f007 f8bd 	bl	800a94a <USB_ReadDevAllOutEpInterrupt>
 80037d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80037d2:	e099      	b.n	8003908 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 808e 	beq.w	80038fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f007 f8e1 	bl	800a9b2 <USB_ReadDevOutEPInterrupt>
 80037f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	2301      	movs	r3, #1
 800380c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800380e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fecf 	bl	80045b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	2308      	movs	r3, #8
 8003830:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003832:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 ffa5 	bl	8004784 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003850:	461a      	mov	r2, r3
 8003852:	2310      	movs	r3, #16
 8003854:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d030      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003868:	2b80      	cmp	r3, #128	@ 0x80
 800386a:	d109      	bne.n	8003880 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800387e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	78db      	ldrb	r3, [r3, #3]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f00c fada 	bl	800fe64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038bc:	461a      	mov	r2, r3
 80038be:	2302      	movs	r3, #2
 80038c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	2320      	movs	r3, #32
 80038dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	3301      	adds	r3, #1
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	f47f af62 	bne.w	80037d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f007 f805 	bl	800a924 <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003920:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003924:	f040 80db 	bne.w	8003ade <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f007 f826 	bl	800a97e <USB_ReadDevAllInEpInterrupt>
 8003932:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003938:	e0cd      	b.n	8003ad6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800393a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80c2 	beq.w	8003aca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f007 f84c 	bl	800a9ee <USB_ReadDevInEPInterrupt>
 8003956:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d057      	beq.n	8003a12 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	2201      	movs	r2, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003982:	4013      	ands	r3, r2
 8003984:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003992:	461a      	mov	r2, r3
 8003994:	2301      	movs	r3, #1
 8003996:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	799b      	ldrb	r3, [r3, #6]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d132      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3320      	adds	r3, #32
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4403      	add	r3, r0
 80039c0:	331c      	adds	r3, #28
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4419      	add	r1, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4403      	add	r3, r0
 80039d4:	3320      	adds	r3, #32
 80039d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d113      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x3a2>
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3324      	adds	r3, #36	@ 0x24
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d108      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039fe:	461a      	mov	r2, r3
 8003a00:	2101      	movs	r1, #1
 8003a02:	f007 f855 	bl	800aab0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f00c f9a4 	bl	800fd5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a44:	461a      	mov	r2, r3
 8003a46:	2310      	movs	r3, #16
 8003a48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	2340      	movs	r3, #64	@ 0x40
 8003a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d023      	beq.n	8003ab8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a72:	6a38      	ldr	r0, [r7, #32]
 8003a74:	f006 f838 	bl	8009ae8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	3310      	adds	r3, #16
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	78db      	ldrb	r3, [r3, #3]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d108      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f00c f9f1 	bl	800fe88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ac2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fce8 	bl	800449a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f af2e 	bne.w	800393a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f006 ff1e 	bl	800a924 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af2:	d122      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d108      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fef3 	bl	8004908 <HAL_PCDEx_LPM_Callback>
 8003b22:	e002      	b.n	8003b2a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f00c f98f 	bl	800fe48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f006 fef0 	bl	800a924 <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4e:	d112      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d102      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f00c f94b 	bl	800fdfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f006 fed2 	bl	800a924 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b8a:	d121      	bne.n	8003bd0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003b9a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d111      	bne.n	8003bca <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	f003 020f 	and.w	r2, r3, #15
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fea0 	bl	8004908 <HAL_PCDEx_LPM_Callback>
 8003bc8:	e002      	b.n	8003bd0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f00c f916 	bl	800fdfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f006 fea5 	bl	800a924 <USB_ReadInterrupts>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be4:	f040 80b7 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2110      	movs	r1, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f005 ff70 	bl	8009ae8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c0c:	e046      	b.n	8003c9c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c98:	3301      	adds	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	791b      	ldrb	r3, [r3, #4]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d3b2      	bcc.n	8003c0e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cb6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003cba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7bdb      	ldrb	r3, [r3, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d016      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd4:	f043 030b 	orr.w	r3, r3, #11
 8003cd8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cea:	f043 030b 	orr.w	r3, r3, #11
 8003cee:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf0:	e015      	b.n	8003d1e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	4619      	mov	r1, r3
 8003d02:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003d06:	4313      	orrs	r3, r2
 8003d08:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d18:	f043 030b 	orr.w	r3, r3, #11
 8003d1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d2c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d40:	461a      	mov	r2, r3
 8003d42:	f006 feb5 	bl	800aab0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f006 fde2 	bl	800a924 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	d123      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f006 fe79 	bl	800aa68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f005 ff2d 	bl	8009bda <USB_GetDevSpeed>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681c      	ldr	r4, [r3, #0]
 8003d8c:	f001 fd9c 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8003d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d96:	461a      	mov	r2, r3
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f005 fc37 	bl	800960c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f00c f803 	bl	800fdaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f006 fdb3 	bl	800a924 <USB_ReadInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d10a      	bne.n	8003dde <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f00b ffe0 	bl	800fd8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f002 0208 	and.w	r2, r2, #8
 8003ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f006 fd9e 	bl	800a924 <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d123      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dfe:	2301      	movs	r3, #1
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e02:	e014      	b.n	8003e2e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fb08 	bl	8004438 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	791b      	ldrb	r3, [r3, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d3e4      	bcc.n	8003e04 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f006 fd70 	bl	800a924 <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e4e:	d13c      	bne.n	8003eca <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e50:	2301      	movs	r3, #1
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e54:	e02b      	b.n	8003eae <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3318      	adds	r3, #24
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d115      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da12      	bge.n	8003ea8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3317      	adds	r3, #23
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fac8 	bl	8004438 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	3301      	adds	r3, #1
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	791b      	ldrb	r3, [r3, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d3cd      	bcc.n	8003e56 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f006 fd28 	bl	800a924 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ede:	d156      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee4:	e045      	b.n	8003f72 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d12e      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da2b      	bge.n	8003f6c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d121      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f68:	6053      	str	r3, [r2, #4]
            break;
 8003f6a:	e008      	b.n	8003f7e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	791b      	ldrb	r3, [r3, #4]
 8003f76:	461a      	mov	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d3b3      	bcc.n	8003ee6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f006 fcc6 	bl	800a924 <USB_ReadInterrupts>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d10a      	bne.n	8003fba <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f00b ff81 	bl	800feac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f006 fcb0 	bl	800a924 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d115      	bne.n	8003ffa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f00b ff71 	bl	800fec8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	e000      	b.n	8003ffa <HAL_PCD_IRQHandler+0x996>
      return;
 8003ff8:	bf00      	nop
    }
  }
}
 8003ffa:	3734      	adds	r7, #52	@ 0x34
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd90      	pop	{r4, r7, pc}

08004000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_PCD_SetAddress+0x1a>
 8004016:	2302      	movs	r3, #2
 8004018:	e012      	b.n	8004040 <HAL_PCD_SetAddress+0x40>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f006 fc0f 	bl	800a854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	70fb      	strb	r3, [r7, #3]
 800405a:	460b      	mov	r3, r1
 800405c:	803b      	strh	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da0f      	bge.n	800408e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3310      	adds	r3, #16
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	705a      	strb	r2, [r3, #1]
 800408c:	e00f      	b.n	80040ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 020f 	and.w	r2, r3, #15
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ba:	883a      	ldrh	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	78ba      	ldrb	r2, [r7, #2]
 80040c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040d8:	78bb      	ldrb	r3, [r7, #2]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d102      	bne.n	80040e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_EP_Open+0xaa>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e00e      	b.n	8004110 <HAL_PCD_EP_Open+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f005 fd8f 	bl	8009c24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800410e:	7afb      	ldrb	r3, [r7, #11]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da0f      	bge.n	800414c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	4613      	mov	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	3310      	adds	r3, #16
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	3304      	adds	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	705a      	strb	r2, [r3, #1]
 800414a:	e00f      	b.n	800416c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	3304      	adds	r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	b2da      	uxtb	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_PCD_EP_Close+0x6e>
 8004182:	2302      	movs	r3, #2
 8004184:	e00e      	b.n	80041a4 <HAL_PCD_EP_Close+0x8c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	f005 fdcd 	bl	8009d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	460b      	mov	r3, r1
 80041ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	7afb      	ldrb	r3, [r7, #11]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	799b      	ldrb	r3, [r3, #6]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	799b      	ldrb	r3, [r3, #6]
 8004210:	461a      	mov	r2, r3
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	f005 fe6a 	bl	8009eec <USB_EPStartXfer>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 020f 	and.w	r2, r3, #15
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004244:	681b      	ldr	r3, [r3, #0]
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	460b      	mov	r3, r1
 8004260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	3310      	adds	r3, #16
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2201      	movs	r2, #1
 8004290:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	b2da      	uxtb	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	799b      	ldrb	r3, [r3, #6]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d102      	bne.n	80042ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	799b      	ldrb	r3, [r3, #6]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	f005 fe18 	bl	8009eec <USB_EPStartXfer>

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	7912      	ldrb	r2, [r2, #4]
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04f      	b.n	8004384 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da0f      	bge.n	800430c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3310      	adds	r3, #16
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	705a      	strb	r2, [r3, #1]
 800430a:	e00d      	b.n	8004328 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_EP_SetStall+0x82>
 8004344:	2302      	movs	r3, #2
 8004346:	e01d      	b.n	8004384 <HAL_PCD_EP_SetStall+0xbe>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	f006 f9a8 	bl	800a6ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7999      	ldrb	r1, [r3, #6]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004374:	461a      	mov	r2, r3
 8004376:	f006 fb9b 	bl	800aab0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	7912      	ldrb	r2, [r2, #4]
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e042      	b.n	8004430 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da0f      	bge.n	80043d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	3310      	adds	r3, #16
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	705a      	strb	r2, [r3, #1]
 80043d0:	e00f      	b.n	80043f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 020f 	and.w	r2, r3, #15
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_PCD_EP_ClrStall+0x86>
 800440e:	2302      	movs	r3, #2
 8004410:	e00e      	b.n	8004430 <HAL_PCD_EP_ClrStall+0xa4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	4618      	mov	r0, r3
 8004422:	f006 f9b1 	bl	800a788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004448:	2b00      	cmp	r3, #0
 800444a:	da0c      	bge.n	8004466 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	3310      	adds	r3, #16
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e00c      	b.n	8004480 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	3304      	adds	r3, #4
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f005 ffd0 	bl	800a42c <USB_EPStopXfer>
 800448c:	4603      	mov	r3, r0
 800448e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004490:	7afb      	ldrb	r3, [r7, #11]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b08a      	sub	sp, #40	@ 0x28
 800449e:	af02      	add	r7, sp, #8
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	3310      	adds	r3, #16
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	3304      	adds	r3, #4
 80044c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d901      	bls.n	80044d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e06b      	b.n	80045aa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d902      	bls.n	80044ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3303      	adds	r3, #3
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f6:	e02a      	b.n	800454e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d902      	bls.n	8004514 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3303      	adds	r3, #3
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68d9      	ldr	r1, [r3, #12]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4603      	mov	r3, r0
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f006 f825 	bl	800a580 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d809      	bhi.n	8004578 <PCD_WriteEmptyTxFifo+0xde>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800456c:	429a      	cmp	r2, r3
 800456e:	d203      	bcs.n	8004578 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1bf      	bne.n	80044f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	d811      	bhi.n	80045a8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	2201      	movs	r2, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	43db      	mvns	r3, r3
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a4:	4013      	ands	r3, r2
 80045a6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	333c      	adds	r3, #60	@ 0x3c
 80045cc:	3304      	adds	r3, #4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	799b      	ldrb	r3, [r3, #6]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d17b      	bne.n	80046e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4a61      	ldr	r2, [pc, #388]	@ (800477c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	f240 80b9 	bls.w	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80b3 	beq.w	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004616:	461a      	mov	r2, r3
 8004618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	e0a7      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004636:	461a      	mov	r2, r3
 8004638:	2320      	movs	r3, #32
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	e098      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 8093 	bne.w	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4a4b      	ldr	r2, [pc, #300]	@ (800477c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d90f      	bls.n	8004672 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800466e:	6093      	str	r3, [r2, #8]
 8004670:	e07e      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	440b      	add	r3, r1
 8004694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d114      	bne.n	80046d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046bc:	461a      	mov	r2, r3
 80046be:	2101      	movs	r1, #1
 80046c0:	f006 f9f6 	bl	800aab0 <USB_EP0_OutStart>
 80046c4:	e006      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f00b fb22 	bl	800fd24 <HAL_PCD_DataOutStageCallback>
 80046e0:	e046      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4a26      	ldr	r2, [pc, #152]	@ (8004780 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d124      	bne.n	8004734 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004700:	461a      	mov	r2, r3
 8004702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004706:	6093      	str	r3, [r2, #8]
 8004708:	e032      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004720:	461a      	mov	r2, r3
 8004722:	2320      	movs	r3, #32
 8004724:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f00b faf9 	bl	800fd24 <HAL_PCD_DataOutStageCallback>
 8004732:	e01d      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d114      	bne.n	8004764 <PCD_EP_OutXfrComplete_int+0x1b0>
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800475c:	461a      	mov	r2, r3
 800475e:	2100      	movs	r1, #0
 8004760:	f006 f9a6 	bl	800aab0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f00b fada 	bl	800fd24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	4f54300a 	.word	0x4f54300a
 8004780:	4f54310a 	.word	0x4f54310a

08004784 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	333c      	adds	r3, #60	@ 0x3c
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a15      	ldr	r2, [pc, #84]	@ (800480c <PCD_EP_OutSetupPacket_int+0x88>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d90e      	bls.n	80047d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f00b fa91 	bl	800fd00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <PCD_EP_OutSetupPacket_int+0x88>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d90c      	bls.n	8004800 <PCD_EP_OutSetupPacket_int+0x7c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	799b      	ldrb	r3, [r3, #6]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d108      	bne.n	8004800 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047f8:	461a      	mov	r2, r3
 80047fa:	2101      	movs	r1, #1
 80047fc:	f006 f958 	bl	800aab0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	4f54300a 	.word	0x4f54300a

08004810 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
 800481c:	4613      	mov	r3, r2
 800481e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800482e:	883b      	ldrh	r3, [r7, #0]
 8004830:	0419      	lsls	r1, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	430a      	orrs	r2, r1
 800483a:	629a      	str	r2, [r3, #40]	@ 0x28
 800483c:	e028      	b.n	8004890 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e00d      	b.n	800486e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	3340      	adds	r3, #64	@ 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4413      	add	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	3301      	adds	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	3b01      	subs	r3, #1
 8004874:	429a      	cmp	r2, r3
 8004876:	d3ec      	bcc.n	8004852 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004878:	883b      	ldrh	r3, [r7, #0]
 800487a:	0418      	lsls	r0, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	3b01      	subs	r3, #1
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	4302      	orrs	r2, r0
 8004888:	3340      	adds	r3, #64	@ 0x40
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	887a      	ldrh	r2, [r7, #2]
 80048b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_PCDEx_ActivateLPM+0x44>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	10000003 	.word	0x10000003

08004908 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004928:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <HAL_PWREx_ConfigSupply+0x70>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b04      	cmp	r3, #4
 8004932:	d00a      	beq.n	800494a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004934:	4b16      	ldr	r3, [pc, #88]	@ (8004990 <HAL_PWREx_ConfigSupply+0x70>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d001      	beq.n	8004946 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01f      	b.n	8004986 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e01d      	b.n	8004986 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800494a:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <HAL_PWREx_ConfigSupply+0x70>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f023 0207 	bic.w	r2, r3, #7
 8004952:	490f      	ldr	r1, [pc, #60]	@ (8004990 <HAL_PWREx_ConfigSupply+0x70>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4313      	orrs	r3, r2
 8004958:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800495a:	f7fd f93d 	bl	8001bd8 <HAL_GetTick>
 800495e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004960:	e009      	b.n	8004976 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004962:	f7fd f939 	bl	8001bd8 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004970:	d901      	bls.n	8004976 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e007      	b.n	8004986 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004976:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <HAL_PWREx_ConfigSupply+0x70>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	d1ee      	bne.n	8004962 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	58024800 	.word	0x58024800

08004994 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a04      	ldr	r2, [pc, #16]	@ (80049b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	60d3      	str	r3, [r2, #12]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	58024800 	.word	0x58024800

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	@ 0x30
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f000 bc48 	b.w	8005258 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8088 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d6:	4b99      	ldr	r3, [pc, #612]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049e0:	4b96      	ldr	r3, [pc, #600]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d007      	beq.n	80049fc <HAL_RCC_OscConfig+0x48>
 80049ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ee:	2b18      	cmp	r3, #24
 80049f0:	d111      	bne.n	8004a16 <HAL_RCC_OscConfig+0x62>
 80049f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d10c      	bne.n	8004a16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	4b8f      	ldr	r3, [pc, #572]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d06d      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x130>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d169      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f000 bc21 	b.w	8005258 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCC_OscConfig+0x7a>
 8004a20:	4b86      	ldr	r3, [pc, #536]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a85      	ldr	r2, [pc, #532]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e02e      	b.n	8004a8c <HAL_RCC_OscConfig+0xd8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x9c>
 8004a36:	4b81      	ldr	r3, [pc, #516]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a80      	ldr	r2, [pc, #512]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b7e      	ldr	r3, [pc, #504]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7d      	ldr	r2, [pc, #500]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e01d      	b.n	8004a8c <HAL_RCC_OscConfig+0xd8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0xc0>
 8004a5a:	4b78      	ldr	r3, [pc, #480]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a77      	ldr	r2, [pc, #476]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b75      	ldr	r3, [pc, #468]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a74      	ldr	r2, [pc, #464]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0xd8>
 8004a74:	4b71      	ldr	r3, [pc, #452]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a70      	ldr	r2, [pc, #448]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b6e      	ldr	r3, [pc, #440]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6d      	ldr	r2, [pc, #436]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd f8a0 	bl	8001bd8 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd f89c 	bl	8001bd8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e3d4      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aae:	4b63      	ldr	r3, [pc, #396]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0xe8>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd f88c 	bl	8001bd8 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fd f888 	bl	8001bd8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e3c0      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad6:	4b59      	ldr	r3, [pc, #356]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x110>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80ca 	beq.w	8004c88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af4:	4b51      	ldr	r3, [pc, #324]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004afc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004afe:	4b4f      	ldr	r3, [pc, #316]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_RCC_OscConfig+0x166>
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b18      	cmp	r3, #24
 8004b0e:	d156      	bne.n	8004bbe <HAL_RCC_OscConfig+0x20a>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d151      	bne.n	8004bbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1a:	4b48      	ldr	r3, [pc, #288]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x17e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e392      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b32:	4b42      	ldr	r3, [pc, #264]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 0219 	bic.w	r2, r3, #25
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	493f      	ldr	r1, [pc, #252]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd f848 	bl	8001bd8 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fd f844 	bl	8001bd8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e37c      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b5e:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6a:	f7fd f865 	bl	8001c38 <HAL_GetREVID>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d817      	bhi.n	8004ba8 <HAL_RCC_OscConfig+0x1f4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b40      	cmp	r3, #64	@ 0x40
 8004b7e:	d108      	bne.n	8004b92 <HAL_RCC_OscConfig+0x1de>
 8004b80:	4b2e      	ldr	r3, [pc, #184]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b88:	4a2c      	ldr	r2, [pc, #176]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b90:	e07a      	b.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b2a      	ldr	r3, [pc, #168]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	4926      	ldr	r1, [pc, #152]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba6:	e06f      	b.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	4921      	ldr	r1, [pc, #132]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	e064      	b.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d047      	beq.n	8004c56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 0219 	bic.w	r2, r3, #25
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	491a      	ldr	r1, [pc, #104]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fffe 	bl	8001bd8 <HAL_GetTick>
 8004bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be0:	f7fc fffa 	bl	8001bd8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e332      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf2:	4b12      	ldr	r3, [pc, #72]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfe:	f7fd f81b 	bl	8001c38 <HAL_GetREVID>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d819      	bhi.n	8004c40 <HAL_RCC_OscConfig+0x28c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d108      	bne.n	8004c26 <HAL_RCC_OscConfig+0x272>
 8004c14:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c1c:	4a07      	ldr	r2, [pc, #28]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c22:	6053      	str	r3, [r2, #4]
 8004c24:	e030      	b.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	031b      	lsls	r3, r3, #12
 8004c34:	4901      	ldr	r1, [pc, #4]	@ (8004c3c <HAL_RCC_OscConfig+0x288>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
 8004c3a:	e025      	b.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	4b9a      	ldr	r3, [pc, #616]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	4997      	ldr	r1, [pc, #604]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
 8004c54:	e018      	b.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c56:	4b95      	ldr	r3, [pc, #596]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a94      	ldr	r2, [pc, #592]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fc ffb9 	bl	8001bd8 <HAL_GetTick>
 8004c66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fc ffb5 	bl	8001bd8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e2ed      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c7c:	4b8b      	ldr	r3, [pc, #556]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80a9 	beq.w	8004de8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c96:	4b85      	ldr	r3, [pc, #532]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca0:	4b82      	ldr	r3, [pc, #520]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d007      	beq.n	8004cbc <HAL_RCC_OscConfig+0x308>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	d13a      	bne.n	8004d28 <HAL_RCC_OscConfig+0x374>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d135      	bne.n	8004d28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x320>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e2c1      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cd4:	f7fc ffb0 	bl	8001c38 <HAL_GetREVID>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d817      	bhi.n	8004d12 <HAL_RCC_OscConfig+0x35e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d108      	bne.n	8004cfc <HAL_RCC_OscConfig+0x348>
 8004cea:	4b70      	ldr	r3, [pc, #448]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004cf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cf8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cfa:	e075      	b.n	8004de8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	069b      	lsls	r3, r3, #26
 8004d0a:	4968      	ldr	r1, [pc, #416]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d10:	e06a      	b.n	8004de8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d12:	4b66      	ldr	r3, [pc, #408]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	4962      	ldr	r1, [pc, #392]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d26:	e05f      	b.n	8004de8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d042      	beq.n	8004db6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d30:	4b5e      	ldr	r3, [pc, #376]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5d      	ldr	r2, [pc, #372]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fc ff4c 	bl	8001bd8 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d44:	f7fc ff48 	bl	8001bd8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e280      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d56:	4b55      	ldr	r3, [pc, #340]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d62:	f7fc ff69 	bl	8001c38 <HAL_GetREVID>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d817      	bhi.n	8004da0 <HAL_RCC_OscConfig+0x3ec>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d108      	bne.n	8004d8a <HAL_RCC_OscConfig+0x3d6>
 8004d78:	4b4c      	ldr	r3, [pc, #304]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d80:	4a4a      	ldr	r2, [pc, #296]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d86:	6053      	str	r3, [r2, #4]
 8004d88:	e02e      	b.n	8004de8 <HAL_RCC_OscConfig+0x434>
 8004d8a:	4b48      	ldr	r3, [pc, #288]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	069b      	lsls	r3, r3, #26
 8004d98:	4944      	ldr	r1, [pc, #272]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]
 8004d9e:	e023      	b.n	8004de8 <HAL_RCC_OscConfig+0x434>
 8004da0:	4b42      	ldr	r3, [pc, #264]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	493f      	ldr	r1, [pc, #252]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60cb      	str	r3, [r1, #12]
 8004db4:	e018      	b.n	8004de8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004db6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3c      	ldr	r2, [pc, #240]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fc ff09 	bl	8001bd8 <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dca:	f7fc ff05 	bl	8001bd8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e23d      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ddc:	4b33      	ldr	r3, [pc, #204]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d036      	beq.n	8004e62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d019      	beq.n	8004e30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	4a2a      	ldr	r2, [pc, #168]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fc fee6 	bl	8001bd8 <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e10:	f7fc fee2 	bl	8001bd8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e21a      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e22:	4b22      	ldr	r3, [pc, #136]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x45c>
 8004e2e:	e018      	b.n	8004e62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e30:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	4a1d      	ldr	r2, [pc, #116]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fc fecc 	bl	8001bd8 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fc fec8 	bl	8001bd8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e200      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d039      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e82:	f7fc fea9 	bl	8001bd8 <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e8a:	f7fc fea5 	bl	8001bd8 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1dd      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e9c:	4b03      	ldr	r3, [pc, #12]	@ (8004eac <HAL_RCC_OscConfig+0x4f8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4d6>
 8004ea8:	e01b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
 8004eaa:	bf00      	nop
 8004eac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eb0:	4b9b      	ldr	r3, [pc, #620]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a9a      	ldr	r2, [pc, #616]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ebc:	f7fc fe8c 	bl	8001bd8 <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec4:	f7fc fe88 	bl	8001bd8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1c0      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ed6:	4b92      	ldr	r3, [pc, #584]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8081 	beq.w	8004ff2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8005124 <HAL_RCC_OscConfig+0x770>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a8b      	ldr	r2, [pc, #556]	@ (8005124 <HAL_RCC_OscConfig+0x770>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efc:	f7fc fe6c 	bl	8001bd8 <HAL_GetTick>
 8004f00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fc fe68 	bl	8001bd8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	@ 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e1a0      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f16:	4b83      	ldr	r3, [pc, #524]	@ (8005124 <HAL_RCC_OscConfig+0x770>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d106      	bne.n	8004f38 <HAL_RCC_OscConfig+0x584>
 8004f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f36:	e02d      	b.n	8004f94 <HAL_RCC_OscConfig+0x5e0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10c      	bne.n	8004f5a <HAL_RCC_OscConfig+0x5a6>
 8004f40:	4b77      	ldr	r3, [pc, #476]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f44:	4a76      	ldr	r2, [pc, #472]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4c:	4b74      	ldr	r3, [pc, #464]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f50:	4a73      	ldr	r2, [pc, #460]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f52:	f023 0304 	bic.w	r3, r3, #4
 8004f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f58:	e01c      	b.n	8004f94 <HAL_RCC_OscConfig+0x5e0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5c8>
 8004f62:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a6e      	ldr	r2, [pc, #440]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a6b      	ldr	r2, [pc, #428]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCC_OscConfig+0x5e0>
 8004f7c:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	4a67      	ldr	r2, [pc, #412]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f88:	4b65      	ldr	r3, [pc, #404]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a64      	ldr	r2, [pc, #400]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004f8e:	f023 0304 	bic.w	r3, r3, #4
 8004f92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fc fe1c 	bl	8001bd8 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa4:	f7fc fe18 	bl	8001bd8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e14e      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fba:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ee      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x5f0>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fc fe06 	bl	8001bd8 <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fc fe02 	bl	8001bd8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e138      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ee      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 812d 	beq.w	8005256 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ffc:	4b48      	ldr	r3, [pc, #288]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005004:	2b18      	cmp	r3, #24
 8005006:	f000 80bd 	beq.w	8005184 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	2b02      	cmp	r3, #2
 8005010:	f040 809e 	bne.w	8005150 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005014:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a41      	ldr	r2, [pc, #260]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc fdda 	bl	8001bd8 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc fdd6 	bl	8001bd8 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e10e      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800503a:	4b39      	ldr	r3, [pc, #228]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	4b36      	ldr	r3, [pc, #216]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800504a:	4b37      	ldr	r3, [pc, #220]	@ (8005128 <HAL_RCC_OscConfig+0x774>)
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	430a      	orrs	r2, r1
 800505a:	4931      	ldr	r1, [pc, #196]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	3b01      	subs	r3, #1
 8005066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506e:	3b01      	subs	r3, #1
 8005070:	025b      	lsls	r3, r3, #9
 8005072:	b29b      	uxth	r3, r3
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	3b01      	subs	r3, #1
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	3b01      	subs	r3, #1
 800508a:	061b      	lsls	r3, r3, #24
 800508c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005090:	4923      	ldr	r1, [pc, #140]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005096:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a21      	ldr	r2, [pc, #132]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050a6:	4b21      	ldr	r3, [pc, #132]	@ (800512c <HAL_RCC_OscConfig+0x778>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050ae:	00d2      	lsls	r2, r2, #3
 80050b0:	491b      	ldr	r1, [pc, #108]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	f023 020c 	bic.w	r2, r3, #12
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	4917      	ldr	r1, [pc, #92]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050c8:	4b15      	ldr	r3, [pc, #84]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	f023 0202 	bic.w	r2, r3, #2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d4:	4912      	ldr	r1, [pc, #72]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050da:	4b11      	ldr	r3, [pc, #68]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4a10      	ldr	r2, [pc, #64]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 80050f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050fe:	4b08      	ldr	r3, [pc, #32]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	4a07      	ldr	r2, [pc, #28]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <HAL_RCC_OscConfig+0x76c>)
 8005110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fc fd5f 	bl	8001bd8 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800511c:	e011      	b.n	8005142 <HAL_RCC_OscConfig+0x78e>
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	58024800 	.word	0x58024800
 8005128:	fffffc0c 	.word	0xfffffc0c
 800512c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005130:	f7fc fd52 	bl	8001bd8 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e08a      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005142:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x77c>
 800514e:	e082      	b.n	8005256 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005150:	4b43      	ldr	r3, [pc, #268]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a42      	ldr	r2, [pc, #264]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800515a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fc fd3c 	bl	8001bd8 <HAL_GetTick>
 8005160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fc fd38 	bl	8001bd8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e070      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005176:	4b3a      	ldr	r3, [pc, #232]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x7b0>
 8005182:	e068      	b.n	8005256 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005184:	4b36      	ldr	r3, [pc, #216]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800518a:	4b35      	ldr	r3, [pc, #212]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	2b01      	cmp	r3, #1
 8005196:	d031      	beq.n	80051fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0203 	and.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d12a      	bne.n	80051fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d122      	bne.n	80051fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d11a      	bne.n	80051fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	0a5b      	lsrs	r3, r3, #9
 80051ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d111      	bne.n	80051fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d108      	bne.n	80051fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	0e1b      	lsrs	r3, r3, #24
 80051ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e02b      	b.n	8005258 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005200:	4b17      	ldr	r3, [pc, #92]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800520a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	429a      	cmp	r2, r3
 8005214:	d01f      	beq.n	8005256 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005216:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	4a11      	ldr	r2, [pc, #68]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005222:	f7fc fcd9 	bl	8001bd8 <HAL_GetTick>
 8005226:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005228:	bf00      	nop
 800522a:	f7fc fcd5 	bl	8001bd8 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	4293      	cmp	r3, r2
 8005234:	d0f9      	beq.n	800522a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800523a:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <HAL_RCC_OscConfig+0x8b0>)
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005242:	00d2      	lsls	r2, r2, #3
 8005244:	4906      	ldr	r1, [pc, #24]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005246:	4313      	orrs	r3, r2
 8005248:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800524a:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	4a04      	ldr	r2, [pc, #16]	@ (8005260 <HAL_RCC_OscConfig+0x8ac>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3730      	adds	r7, #48	@ 0x30
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	58024400 	.word	0x58024400
 8005264:	ffff0007 	.word	0xffff0007

08005268 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e19c      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800527c:	4b8a      	ldr	r3, [pc, #552]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d910      	bls.n	80052ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b87      	ldr	r3, [pc, #540]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 020f 	bic.w	r2, r3, #15
 8005292:	4985      	ldr	r1, [pc, #532]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b83      	ldr	r3, [pc, #524]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e184      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d010      	beq.n	80052da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	4b7b      	ldr	r3, [pc, #492]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d908      	bls.n	80052da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052c8:	4b78      	ldr	r3, [pc, #480]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	4975      	ldr	r1, [pc, #468]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	4b70      	ldr	r3, [pc, #448]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d908      	bls.n	8005308 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052f6:	4b6d      	ldr	r3, [pc, #436]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	496a      	ldr	r1, [pc, #424]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005304:	4313      	orrs	r3, r2
 8005306:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	4b64      	ldr	r3, [pc, #400]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005320:	429a      	cmp	r2, r3
 8005322:	d908      	bls.n	8005336 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005324:	4b61      	ldr	r3, [pc, #388]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	495e      	ldr	r1, [pc, #376]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005332:	4313      	orrs	r3, r2
 8005334:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d010      	beq.n	8005364 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	4b59      	ldr	r3, [pc, #356]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800534e:	429a      	cmp	r2, r3
 8005350:	d908      	bls.n	8005364 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005352:	4b56      	ldr	r3, [pc, #344]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4953      	ldr	r1, [pc, #332]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005360:	4313      	orrs	r3, r2
 8005362:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	4b4d      	ldr	r3, [pc, #308]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	429a      	cmp	r2, r3
 800537e:	d908      	bls.n	8005392 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005380:	4b4a      	ldr	r3, [pc, #296]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f023 020f 	bic.w	r2, r3, #15
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4947      	ldr	r1, [pc, #284]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 800538e:	4313      	orrs	r3, r2
 8005390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d055      	beq.n	800544a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800539e:	4b43      	ldr	r3, [pc, #268]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4940      	ldr	r1, [pc, #256]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053b8:	4b3c      	ldr	r3, [pc, #240]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d121      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0f6      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d107      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053d0:	4b36      	ldr	r3, [pc, #216]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d115      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0ea      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053e8:	4b30      	ldr	r3, [pc, #192]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0de      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f8:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0d6      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005408:	4b28      	ldr	r3, [pc, #160]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f023 0207 	bic.w	r2, r3, #7
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4925      	ldr	r1, [pc, #148]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005416:	4313      	orrs	r3, r2
 8005418:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800541a:	f7fc fbdd 	bl	8001bd8 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005420:	e00a      	b.n	8005438 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005422:	f7fc fbd9 	bl	8001bd8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0be      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005438:	4b1c      	ldr	r3, [pc, #112]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	429a      	cmp	r2, r3
 8005448:	d1eb      	bne.n	8005422 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	429a      	cmp	r2, r3
 8005464:	d208      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005466:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f023 020f 	bic.w	r2, r3, #15
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	490e      	ldr	r1, [pc, #56]	@ (80054ac <HAL_RCC_ClockConfig+0x244>)
 8005474:	4313      	orrs	r3, r2
 8005476:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d214      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 020f 	bic.w	r2, r3, #15
 800548e:	4906      	ldr	r1, [pc, #24]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <HAL_RCC_ClockConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e086      	b.n	80055b6 <HAL_RCC_ClockConfig+0x34e>
 80054a8:	52002000 	.word	0x52002000
 80054ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d010      	beq.n	80054de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	4b3f      	ldr	r3, [pc, #252]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d208      	bcs.n	80054de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054cc:	4b3c      	ldr	r3, [pc, #240]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4939      	ldr	r1, [pc, #228]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d010      	beq.n	800550c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	4b34      	ldr	r3, [pc, #208]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d208      	bcs.n	800550c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054fa:	4b31      	ldr	r3, [pc, #196]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	492e      	ldr	r1, [pc, #184]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005508:	4313      	orrs	r3, r2
 800550a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005524:	429a      	cmp	r2, r3
 8005526:	d208      	bcs.n	800553a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005528:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4922      	ldr	r1, [pc, #136]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005536:	4313      	orrs	r3, r2
 8005538:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d010      	beq.n	8005568 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005552:	429a      	cmp	r2, r3
 8005554:	d208      	bcs.n	8005568 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005556:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4917      	ldr	r1, [pc, #92]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005564:	4313      	orrs	r3, r2
 8005566:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005568:	f000 f834 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	4912      	ldr	r1, [pc, #72]	@ (80055c4 <HAL_RCC_ClockConfig+0x35c>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005586:	4b0e      	ldr	r3, [pc, #56]	@ (80055c0 <HAL_RCC_ClockConfig+0x358>)
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	4a0d      	ldr	r2, [pc, #52]	@ (80055c4 <HAL_RCC_ClockConfig+0x35c>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	4a0a      	ldr	r2, [pc, #40]	@ (80055c8 <HAL_RCC_ClockConfig+0x360>)
 800559e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055a0:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <HAL_RCC_ClockConfig+0x364>)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055a6:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <HAL_RCC_ClockConfig+0x368>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb fec6 	bl	800133c <HAL_InitTick>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
 80055c4:	08014c5c 	.word	0x08014c5c
 80055c8:	24000004 	.word	0x24000004
 80055cc:	24000000 	.word	0x24000000
 80055d0:	24000008 	.word	0x24000008

080055d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	@ 0x24
 80055d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055da:	4bb3      	ldr	r3, [pc, #716]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055e2:	2b18      	cmp	r3, #24
 80055e4:	f200 8155 	bhi.w	8005892 <HAL_RCC_GetSysClockFreq+0x2be>
 80055e8:	a201      	add	r2, pc, #4	@ (adr r2, 80055f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005893 	.word	0x08005893
 80055f8:	08005893 	.word	0x08005893
 80055fc:	08005893 	.word	0x08005893
 8005600:	08005893 	.word	0x08005893
 8005604:	08005893 	.word	0x08005893
 8005608:	08005893 	.word	0x08005893
 800560c:	08005893 	.word	0x08005893
 8005610:	0800567b 	.word	0x0800567b
 8005614:	08005893 	.word	0x08005893
 8005618:	08005893 	.word	0x08005893
 800561c:	08005893 	.word	0x08005893
 8005620:	08005893 	.word	0x08005893
 8005624:	08005893 	.word	0x08005893
 8005628:	08005893 	.word	0x08005893
 800562c:	08005893 	.word	0x08005893
 8005630:	08005681 	.word	0x08005681
 8005634:	08005893 	.word	0x08005893
 8005638:	08005893 	.word	0x08005893
 800563c:	08005893 	.word	0x08005893
 8005640:	08005893 	.word	0x08005893
 8005644:	08005893 	.word	0x08005893
 8005648:	08005893 	.word	0x08005893
 800564c:	08005893 	.word	0x08005893
 8005650:	08005687 	.word	0x08005687
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005654:	4b94      	ldr	r3, [pc, #592]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005660:	4b91      	ldr	r3, [pc, #580]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	08db      	lsrs	r3, r3, #3
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	4a90      	ldr	r2, [pc, #576]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005672:	e111      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005674:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005676:	61bb      	str	r3, [r7, #24]
      break;
 8005678:	e10e      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800567a:	4b8d      	ldr	r3, [pc, #564]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800567c:	61bb      	str	r3, [r7, #24]
      break;
 800567e:	e10b      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005680:	4b8c      	ldr	r3, [pc, #560]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005682:	61bb      	str	r3, [r7, #24]
      break;
 8005684:	e108      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005686:	4b88      	ldr	r3, [pc, #544]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005690:	4b85      	ldr	r3, [pc, #532]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800569a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800569c:	4b82      	ldr	r3, [pc, #520]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056a6:	4b80      	ldr	r3, [pc, #512]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80e1 	beq.w	800588c <HAL_RCC_GetSysClockFreq+0x2b8>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	f000 8083 	beq.w	80057d8 <HAL_RCC_GetSysClockFreq+0x204>
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	f200 80a1 	bhi.w	800581c <HAL_RCC_GetSysClockFreq+0x248>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x114>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d056      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056e6:	e099      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e8:	4b6f      	ldr	r3, [pc, #444]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02d      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056f4:	4b6c      	ldr	r3, [pc, #432]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	08db      	lsrs	r3, r3, #3
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	4a6b      	ldr	r2, [pc, #428]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
 8005704:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571e:	4b62      	ldr	r3, [pc, #392]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005732:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800574e:	e087      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800575e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005762:	4b51      	ldr	r3, [pc, #324]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005772:	ed97 6a02 	vldr	s12, [r7, #8]
 8005776:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800577a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005792:	e065      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a6:	4b40      	ldr	r3, [pc, #256]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057d6:	e043      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80057fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800581a:	e021      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b1e      	ldr	r3, [pc, #120]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005842:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800585e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005860:	4b11      	ldr	r3, [pc, #68]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	0a5b      	lsrs	r3, r3, #9
 8005866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800586a:	3301      	adds	r3, #1
 800586c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005878:	edd7 6a07 	vldr	s13, [r7, #28]
 800587c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005884:	ee17 3a90 	vmov	r3, s15
 8005888:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800588a:	e005      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
      break;
 8005890:	e002      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005892:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005894:	61bb      	str	r3, [r7, #24]
      break;
 8005896:	bf00      	nop
  }

  return sysclockfreq;
 8005898:	69bb      	ldr	r3, [r7, #24]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3724      	adds	r7, #36	@ 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	58024400 	.word	0x58024400
 80058ac:	03d09000 	.word	0x03d09000
 80058b0:	003d0900 	.word	0x003d0900
 80058b4:	017d7840 	.word	0x017d7840
 80058b8:	46000000 	.word	0x46000000
 80058bc:	4c742400 	.word	0x4c742400
 80058c0:	4a742400 	.word	0x4a742400
 80058c4:	4bbebc20 	.word	0x4bbebc20

080058c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058ce:	f7ff fe81 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 80058d2:	4602      	mov	r2, r0
 80058d4:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <HAL_RCC_GetHCLKFreq+0x50>)
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	490f      	ldr	r1, [pc, #60]	@ (800591c <HAL_RCC_GetHCLKFreq+0x54>)
 80058e0:	5ccb      	ldrb	r3, [r1, r3]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <HAL_RCC_GetHCLKFreq+0x50>)
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	4a09      	ldr	r2, [pc, #36]	@ (800591c <HAL_RCC_GetHCLKFreq+0x54>)
 80058f6:	5cd3      	ldrb	r3, [r2, r3]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	4a07      	ldr	r2, [pc, #28]	@ (8005920 <HAL_RCC_GetHCLKFreq+0x58>)
 8005904:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005906:	4a07      	ldr	r2, [pc, #28]	@ (8005924 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800590c:	4b04      	ldr	r3, [pc, #16]	@ (8005920 <HAL_RCC_GetHCLKFreq+0x58>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	58024400 	.word	0x58024400
 800591c:	08014c5c 	.word	0x08014c5c
 8005920:	24000004 	.word	0x24000004
 8005924:	24000000 	.word	0x24000000

08005928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800592c:	f7ff ffcc 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b06      	ldr	r3, [pc, #24]	@ (800594c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	4904      	ldr	r1, [pc, #16]	@ (8005950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	08014c5c 	.word	0x08014c5c

08005954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	223f      	movs	r2, #63	@ 0x3f
 8005962:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005964:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0207 	and.w	r2, r3, #7
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005970:	4b17      	ldr	r3, [pc, #92]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800597c:	4b14      	ldr	r3, [pc, #80]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005994:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80059ac:	4b08      	ldr	r3, [pc, #32]	@ (80059d0 <HAL_RCC_GetClockConfig+0x7c>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059b8:	4b06      	ldr	r3, [pc, #24]	@ (80059d4 <HAL_RCC_GetClockConfig+0x80>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	58024400 	.word	0x58024400
 80059d4:	52002000 	.word	0x52002000

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059dc:	b0ca      	sub	sp, #296	@ 0x128
 80059de:	af00      	add	r7, sp, #0
 80059e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80059fc:	2500      	movs	r5, #0
 80059fe:	ea54 0305 	orrs.w	r3, r4, r5
 8005a02:	d049      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a0e:	d02f      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a14:	d828      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a1a:	d01a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a20:	d822      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a2a:	d007      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2e:	4bb8      	ldr	r3, [pc, #736]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	4ab7      	ldr	r2, [pc, #732]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a3a:	e01a      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	3308      	adds	r3, #8
 8005a42:	2102      	movs	r1, #2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 f9d1 	bl	8006dec <RCCEx_PLL2_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a50:	e00f      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	3328      	adds	r3, #40	@ 0x28
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fa78 	bl	8006f50 <RCCEx_PLL3_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a66:	e004      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a7a:	4ba5      	ldr	r3, [pc, #660]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a88:	4aa1      	ldr	r2, [pc, #644]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005aa4:	f04f 0900 	mov.w	r9, #0
 8005aa8:	ea58 0309 	orrs.w	r3, r8, r9
 8005aac:	d047      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d82a      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005ad5 	.word	0x08005ad5
 8005ac4:	08005ae3 	.word	0x08005ae3
 8005ac8:	08005af9 	.word	0x08005af9
 8005acc:	08005b17 	.word	0x08005b17
 8005ad0:	08005b17 	.word	0x08005b17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	4a8d      	ldr	r2, [pc, #564]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ae0:	e01a      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f97e 	bl	8006dec <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af6:	e00f      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	3328      	adds	r3, #40	@ 0x28
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fa25 	bl	8006f50 <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e004      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b20:	4b7b      	ldr	r3, [pc, #492]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b24:	f023 0107 	bic.w	r1, r3, #7
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2e:	4a78      	ldr	r2, [pc, #480]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b4a:	f04f 0b00 	mov.w	fp, #0
 8005b4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b52:	d04c      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5e:	d030      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b64:	d829      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b68:	d02d      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b6c:	d825      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b6e:	2b80      	cmp	r3, #128	@ 0x80
 8005b70:	d018      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b72:	2b80      	cmp	r3, #128	@ 0x80
 8005b74:	d821      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b7a:	2b40      	cmp	r3, #64	@ 0x40
 8005b7c:	d007      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b7e:	e01c      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b80:	4b63      	ldr	r3, [pc, #396]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	4a62      	ldr	r2, [pc, #392]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b8c:	e01c      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	3308      	adds	r3, #8
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 f928 	bl	8006dec <RCCEx_PLL2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ba2:	e011      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	3328      	adds	r3, #40	@ 0x28
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f9cf 	bl	8006f50 <RCCEx_PLL3_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bc0:	e002      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bde:	4a4c      	ldr	r2, [pc, #304]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005bfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d053      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c1a:	d035      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c20:	d82e      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c26:	d031      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c2c:	d828      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c32:	d01a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c38:	d822      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c42:	d007      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c44:	e01c      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c46:	4b32      	ldr	r3, [pc, #200]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	4a31      	ldr	r2, [pc, #196]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c52:	e01c      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	3308      	adds	r3, #8
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 f8c5 	bl	8006dec <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c68:	e011      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	3328      	adds	r3, #40	@ 0x28
 8005c70:	2100      	movs	r1, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 f96c 	bl	8006f50 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c7e:	e006      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c86:	e002      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c96:	4b1e      	ldr	r3, [pc, #120]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cac:	e003      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cc2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ccc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d056      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce2:	d038      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce8:	d831      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cee:	d034      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cf4:	d82b      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cfa:	d01d      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d00:	d825      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d006      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d0c:	e01f      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d0e:	bf00      	nop
 8005d10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4ba2      	ldr	r3, [pc, #648]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	4aa1      	ldr	r2, [pc, #644]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d20:	e01c      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	3308      	adds	r3, #8
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 f85e 	bl	8006dec <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d36:	e011      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	3328      	adds	r3, #40	@ 0x28
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 f905 	bl	8006f50 <RCCEx_PLL3_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d54:	e002      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d64:	4b8e      	ldr	r3, [pc, #568]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d74:	4a8a      	ldr	r2, [pc, #552]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d03a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	2b30      	cmp	r3, #48	@ 0x30
 8005dac:	d01f      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dae:	2b30      	cmp	r3, #48	@ 0x30
 8005db0:	d819      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d00c      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d815      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d019      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d111      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc2:	4b77      	ldr	r3, [pc, #476]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	4a76      	ldr	r2, [pc, #472]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dce:	e011      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f807 	bl	8006dec <RCCEx_PLL2_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005de4:	e006      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dec:	e002      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dfc:	4b68      	ldr	r3, [pc, #416]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0a:	4a65      	ldr	r2, [pc, #404]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4313      	orrs	r3, r2
 8005e38:	d051      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e44:	d035      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e4a:	d82e      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e50:	d031      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e56:	d828      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5c:	d01a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e62:	d822      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6c:	d007      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e6e:	e01c      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	3308      	adds	r3, #8
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 ffb0 	bl	8006dec <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e92:	e011      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	3328      	adds	r3, #40	@ 0x28
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f857 	bl	8006f50 <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ec0:	4b37      	ldr	r3, [pc, #220]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ece:	4a34      	ldr	r2, [pc, #208]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ed4:	e003      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ef4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4313      	orrs	r3, r2
 8005efc:	d056      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f08:	d033      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f0e:	d82c      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f14:	d02f      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f1a:	d826      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f20:	d02b      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f26:	d820      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2c:	d012      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f32:	d81a      	bhi.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d022      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3c:	d115      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	3308      	adds	r3, #8
 8005f44:	2101      	movs	r1, #1
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 ff50 	bl	8006dec <RCCEx_PLL2_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f52:	e015      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	3328      	adds	r3, #40	@ 0x28
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fff7 	bl	8006f50 <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f68:	e00a      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f72:	bf00      	nop
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f76:	bf00      	nop
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10d      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f96:	4a02      	ldr	r2, [pc, #8]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f9c:	e006      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d055      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd8:	d033      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fde:	d82c      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe4:	d02f      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fea:	d826      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ff0:	d02b      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ff2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ff6:	d820      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffc:	d012      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006002:	d81a      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d022      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800600c:	d115      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006012:	3308      	adds	r3, #8
 8006014:	2101      	movs	r1, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fee8 	bl	8006dec <RCCEx_PLL2_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006022:	e015      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006028:	3328      	adds	r3, #40	@ 0x28
 800602a:	2101      	movs	r1, #1
 800602c:	4618      	mov	r0, r3
 800602e:	f000 ff8f 	bl	8006f50 <RCCEx_PLL3_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006038:	e00a      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800604e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006058:	4ba3      	ldr	r3, [pc, #652]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006068:	4a9f      	ldr	r2, [pc, #636]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606a:	430b      	orrs	r3, r1
 800606c:	6593      	str	r3, [r2, #88]	@ 0x58
 800606e:	e003      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006088:	2300      	movs	r3, #0
 800608a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800608e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d037      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a2:	d00e      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a8:	d816      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d018      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060b2:	d111      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b4:	4b8c      	ldr	r3, [pc, #560]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4a8b      	ldr	r2, [pc, #556]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060c0:	e00f      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	3308      	adds	r3, #8
 80060c8:	2101      	movs	r1, #1
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fe8e 	bl	8006dec <RCCEx_PLL2_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060d6:	e004      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060de:	e000      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060ea:	4b7f      	ldr	r3, [pc, #508]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f8:	4a7b      	ldr	r2, [pc, #492]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800611e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d039      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800612e:	2b03      	cmp	r3, #3
 8006130:	d81c      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006175 	.word	0x08006175
 800613c:	08006149 	.word	0x08006149
 8006140:	08006157 	.word	0x08006157
 8006144:	08006175 	.word	0x08006175
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006148:	4b67      	ldr	r3, [pc, #412]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	4a66      	ldr	r2, [pc, #408]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006154:	e00f      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	3308      	adds	r3, #8
 800615c:	2102      	movs	r1, #2
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fe44 	bl	8006dec <RCCEx_PLL2_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800616a:	e004      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800617e:	4b5a      	ldr	r3, [pc, #360]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	f023 0103 	bic.w	r1, r3, #3
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800618c:	4a56      	ldr	r2, [pc, #344]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618e:	430b      	orrs	r3, r1
 8006190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006192:	e003      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f000 809f 	beq.w	80062fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061be:	4b4b      	ldr	r3, [pc, #300]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a4a      	ldr	r2, [pc, #296]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ca:	f7fb fd05 	bl	8001bd8 <HAL_GetTick>
 80061ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d2:	e00b      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d4:	f7fb fd00 	bl	8001bd8 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b64      	cmp	r3, #100	@ 0x64
 80061e2:	d903      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ea:	e005      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ec:	4b3f      	ldr	r3, [pc, #252]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ed      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80061f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d179      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006200:	4b39      	ldr	r3, [pc, #228]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006202:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800620c:	4053      	eors	r3, r2
 800620e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006212:	2b00      	cmp	r3, #0
 8006214:	d015      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006216:	4b34      	ldr	r3, [pc, #208]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006222:	4b31      	ldr	r3, [pc, #196]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006226:	4a30      	ldr	r2, [pc, #192]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800622e:	4b2e      	ldr	r3, [pc, #184]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006232:	4a2d      	ldr	r2, [pc, #180]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006238:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800623a:	4a2b      	ldr	r2, [pc, #172]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800623c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006240:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800624a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624e:	d118      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fb fcc2 	bl	8001bd8 <HAL_GetTick>
 8006254:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006258:	e00d      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625a:	f7fb fcbd 	bl	8001bd8 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	f241 3388 	movw	r3, #5000	@ 0x1388
 800626a:	429a      	cmp	r2, r3
 800626c:	d903      	bls.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006274:	e005      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006276:	4b1c      	ldr	r3, [pc, #112]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0eb      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d129      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800629a:	d10e      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800629c:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ac:	091a      	lsrs	r2, r3, #4
 80062ae:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	4a0d      	ldr	r2, [pc, #52]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6113      	str	r3, [r2, #16]
 80062b8:	e005      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062ba:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	4a0a      	ldr	r2, [pc, #40]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062c4:	6113      	str	r3, [r2, #16]
 80062c6:	4b08      	ldr	r3, [pc, #32]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d6:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6713      	str	r3, [r2, #112]	@ 0x70
 80062dc:	e00e      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80062e6:	e009      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062e8:	58024400 	.word	0x58024400
 80062ec:	58024800 	.word	0x58024800
 80062f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f002 0301 	and.w	r3, r2, #1
 8006308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800630c:	2300      	movs	r3, #0
 800630e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006312:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006316:	460b      	mov	r3, r1
 8006318:	4313      	orrs	r3, r2
 800631a:	f000 8089 	beq.w	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006324:	2b28      	cmp	r3, #40	@ 0x28
 8006326:	d86b      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006328:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006409 	.word	0x08006409
 8006334:	08006401 	.word	0x08006401
 8006338:	08006401 	.word	0x08006401
 800633c:	08006401 	.word	0x08006401
 8006340:	08006401 	.word	0x08006401
 8006344:	08006401 	.word	0x08006401
 8006348:	08006401 	.word	0x08006401
 800634c:	08006401 	.word	0x08006401
 8006350:	080063d5 	.word	0x080063d5
 8006354:	08006401 	.word	0x08006401
 8006358:	08006401 	.word	0x08006401
 800635c:	08006401 	.word	0x08006401
 8006360:	08006401 	.word	0x08006401
 8006364:	08006401 	.word	0x08006401
 8006368:	08006401 	.word	0x08006401
 800636c:	08006401 	.word	0x08006401
 8006370:	080063eb 	.word	0x080063eb
 8006374:	08006401 	.word	0x08006401
 8006378:	08006401 	.word	0x08006401
 800637c:	08006401 	.word	0x08006401
 8006380:	08006401 	.word	0x08006401
 8006384:	08006401 	.word	0x08006401
 8006388:	08006401 	.word	0x08006401
 800638c:	08006401 	.word	0x08006401
 8006390:	08006409 	.word	0x08006409
 8006394:	08006401 	.word	0x08006401
 8006398:	08006401 	.word	0x08006401
 800639c:	08006401 	.word	0x08006401
 80063a0:	08006401 	.word	0x08006401
 80063a4:	08006401 	.word	0x08006401
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006401 	.word	0x08006401
 80063b0:	08006409 	.word	0x08006409
 80063b4:	08006401 	.word	0x08006401
 80063b8:	08006401 	.word	0x08006401
 80063bc:	08006401 	.word	0x08006401
 80063c0:	08006401 	.word	0x08006401
 80063c4:	08006401 	.word	0x08006401
 80063c8:	08006401 	.word	0x08006401
 80063cc:	08006401 	.word	0x08006401
 80063d0:	08006409 	.word	0x08006409
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d8:	3308      	adds	r3, #8
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fd05 	bl	8006dec <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063e8:	e00f      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ee:	3328      	adds	r3, #40	@ 0x28
 80063f0:	2101      	movs	r1, #1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fdac 	bl	8006f50 <RCCEx_PLL3_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006412:	4bbf      	ldr	r3, [pc, #764]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006416:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006420:	4abb      	ldr	r2, [pc, #748]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006422:	430b      	orrs	r3, r1
 8006424:	6553      	str	r3, [r2, #84]	@ 0x54
 8006426:	e003      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f002 0302 	and.w	r3, r2, #2
 800643c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006446:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d041      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006456:	2b05      	cmp	r3, #5
 8006458:	d824      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800645a:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	080064ad 	.word	0x080064ad
 8006464:	08006479 	.word	0x08006479
 8006468:	0800648f 	.word	0x0800648f
 800646c:	080064ad 	.word	0x080064ad
 8006470:	080064ad 	.word	0x080064ad
 8006474:	080064ad 	.word	0x080064ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	3308      	adds	r3, #8
 800647e:	2101      	movs	r1, #1
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fcb3 	bl	8006dec <RCCEx_PLL2_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800648c:	e00f      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	3328      	adds	r3, #40	@ 0x28
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fd5a 	bl	8006f50 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a2:	e004      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064aa:	e000      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064b6:	4b96      	ldr	r3, [pc, #600]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ba:	f023 0107 	bic.w	r1, r3, #7
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c4:	4a92      	ldr	r2, [pc, #584]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c6:	430b      	orrs	r3, r1
 80064c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ca:	e003      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f002 0304 	and.w	r3, r2, #4
 80064e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d044      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064fc:	2b05      	cmp	r3, #5
 80064fe:	d825      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006500:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006555 	.word	0x08006555
 800650c:	08006521 	.word	0x08006521
 8006510:	08006537 	.word	0x08006537
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	3308      	adds	r3, #8
 8006526:	2101      	movs	r1, #1
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fc5f 	bl	8006dec <RCCEx_PLL2_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006534:	e00f      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	3328      	adds	r3, #40	@ 0x28
 800653c:	2101      	movs	r1, #1
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fd06 	bl	8006f50 <RCCEx_PLL3_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800654a:	e004      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006552:	e000      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800655e:	4b6c      	ldr	r3, [pc, #432]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	f023 0107 	bic.w	r1, r3, #7
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656e:	4a68      	ldr	r2, [pc, #416]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006570:	430b      	orrs	r3, r1
 8006572:	6593      	str	r3, [r2, #88]	@ 0x58
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800657a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f002 0320 	and.w	r3, r2, #32
 800658a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d055      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065aa:	d033      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b0:	d82c      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b6:	d02f      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065bc:	d826      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065c2:	d02b      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065c8:	d820      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ce:	d012      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d4:	d81a      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d022      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065de:	d115      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	3308      	adds	r3, #8
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fbff 	bl	8006dec <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065f4:	e015      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	3328      	adds	r3, #40	@ 0x28
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fca6 	bl	8006f50 <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800660a:	e00a      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006612:	e006      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006614:	bf00      	nop
 8006616:	e004      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662a:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663a:	4a35      	ldr	r2, [pc, #212]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006640:	e003      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006660:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d058      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006672:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006676:	d033      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006678:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800667c:	d82c      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d02f      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006688:	d826      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800668a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800668e:	d02b      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006690:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006694:	d820      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800669a:	d012      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800669c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a0:	d81a      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d022      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d115      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b0:	3308      	adds	r3, #8
 80066b2:	2100      	movs	r1, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fb99 	bl	8006dec <RCCEx_PLL2_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066c0:	e015      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	3328      	adds	r3, #40	@ 0x28
 80066c8:	2102      	movs	r1, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fc40 	bl	8006f50 <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066d6:	e00a      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066de:	e006      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066e0:	bf00      	nop
 80066e2:	e004      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066e4:	bf00      	nop
 80066e6:	e002      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10e      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066f6:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006706:	4a02      	ldr	r2, [pc, #8]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006708:	430b      	orrs	r3, r1
 800670a:	6593      	str	r3, [r2, #88]	@ 0x58
 800670c:	e006      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006732:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d055      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006744:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006748:	d033      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800674a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800674e:	d82c      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006754:	d02f      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675a:	d826      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800675c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006760:	d02b      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006762:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006766:	d820      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800676c:	d012      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800676e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006772:	d81a      	bhi.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800677c:	d115      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	3308      	adds	r3, #8
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fb30 	bl	8006dec <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006792:	e015      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006798:	3328      	adds	r3, #40	@ 0x28
 800679a:	2102      	movs	r1, #2
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbd7 	bl	8006f50 <RCCEx_PLL3_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a8:	e00a      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067b0:	e006      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067b2:	bf00      	nop
 80067b4:	e004      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067b6:	bf00      	nop
 80067b8:	e002      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067d8:	4a9d      	ldr	r2, [pc, #628]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f002 0308 	and.w	r3, r2, #8
 80067f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006802:	460b      	mov	r3, r1
 8006804:	4313      	orrs	r3, r2
 8006806:	d01e      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006814:	d10c      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	3328      	adds	r3, #40	@ 0x28
 800681c:	2102      	movs	r1, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fb96 	bl	8006f50 <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006830:	4b87      	ldr	r3, [pc, #540]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006840:	4a83      	ldr	r2, [pc, #524]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006842:	430b      	orrs	r3, r1
 8006844:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f002 0310 	and.w	r3, r2, #16
 8006852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006856:	2300      	movs	r3, #0
 8006858:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800685c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006860:	460b      	mov	r3, r1
 8006862:	4313      	orrs	r3, r2
 8006864:	d01e      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d10c      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	3328      	adds	r3, #40	@ 0x28
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fb67 	bl	8006f50 <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800688e:	4b70      	ldr	r3, [pc, #448]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006892:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800689e:	4a6c      	ldr	r2, [pc, #432]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d03e      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d0:	d022      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d6:	d81b      	bhi.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e0:	d00b      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068e2:	e015      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e8:	3308      	adds	r3, #8
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa7d 	bl	8006dec <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068f8:	e00f      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fe:	3328      	adds	r3, #40	@ 0x28
 8006900:	2102      	movs	r1, #2
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fb24 	bl	8006f50 <RCCEx_PLL3_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006916:	e000      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006922:	4b4b      	ldr	r3, [pc, #300]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006926:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006932:	4a47      	ldr	r2, [pc, #284]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6593      	str	r3, [r2, #88]	@ 0x58
 8006938:	e003      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800694e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006950:	2300      	movs	r3, #0
 8006952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006954:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d03b      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006966:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800696a:	d01f      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800696c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006970:	d818      	bhi.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006976:	d003      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800697c:	d007      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800697e:	e011      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006980:	4b33      	ldr	r3, [pc, #204]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	4a32      	ldr	r2, [pc, #200]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800698c:	e00f      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	3328      	adds	r3, #40	@ 0x28
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fada 	bl	8006f50 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a2:	e004      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069aa:	e000      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069b6:	4b26      	ldr	r3, [pc, #152]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c6:	4a22      	ldr	r2, [pc, #136]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80069cc:	e003      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069e4:	2300      	movs	r3, #0
 80069e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069ec:	460b      	mov	r3, r1
 80069ee:	4313      	orrs	r3, r2
 80069f0:	d034      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a00:	d007      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a02:	e011      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a04:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	4a11      	ldr	r2, [pc, #68]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a10:	e00e      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	3308      	adds	r3, #8
 8006a18:	2102      	movs	r1, #2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f9e6 	bl	8006dec <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10d      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a38:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a46:	4a02      	ldr	r2, [pc, #8]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a4c:	e006      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a4e:	bf00      	nop
 8006a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a72:	460b      	mov	r3, r1
 8006a74:	4313      	orrs	r3, r2
 8006a76:	d00c      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7c:	3328      	adds	r3, #40	@ 0x28
 8006a7e:	2102      	movs	r1, #2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fa65 	bl	8006f50 <RCCEx_PLL3_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aa4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	d038      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aba:	d018      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ac0:	d811      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac6:	d014      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006acc:	d80b      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d011      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad6:	d106      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad8:	4bc3      	ldr	r3, [pc, #780]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	4ac2      	ldr	r2, [pc, #776]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ae4:	e008      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aec:	e004      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b00:	4bb9      	ldr	r3, [pc, #740]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b10:	4ab5      	ldr	r2, [pc, #724]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b2e:	2300      	movs	r3, #0
 8006b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d009      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b3c:	4baa      	ldr	r3, [pc, #680]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4a:	4aa7      	ldr	r2, [pc, #668]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b5e:	2300      	movs	r3, #0
 8006b60:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b66:	460b      	mov	r3, r1
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	d00a      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b6c:	4b9e      	ldr	r3, [pc, #632]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b7c:	4a9a      	ldr	r2, [pc, #616]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b90:	2300      	movs	r3, #0
 8006b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b9e:	4b92      	ldr	r3, [pc, #584]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bac:	4a8e      	ldr	r2, [pc, #568]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d00e      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bce:	4b86      	ldr	r3, [pc, #536]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	4a85      	ldr	r2, [pc, #532]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bd8:	6113      	str	r3, [r2, #16]
 8006bda:	4b83      	ldr	r3, [pc, #524]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bdc:	6919      	ldr	r1, [r3, #16]
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006be6:	4a80      	ldr	r2, [pc, #512]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c08:	4b77      	ldr	r3, [pc, #476]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c16:	4a74      	ldr	r2, [pc, #464]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c32:	460b      	mov	r3, r1
 8006c34:	4313      	orrs	r3, r2
 8006c36:	d00a      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c38:	4b6b      	ldr	r3, [pc, #428]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c48:	4a67      	ldr	r2, [pc, #412]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	2100      	movs	r1, #0
 8006c58:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c64:	460b      	mov	r3, r1
 8006c66:	4313      	orrs	r3, r2
 8006c68:	d011      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	3308      	adds	r3, #8
 8006c70:	2100      	movs	r1, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 f8ba 	bl	8006dec <RCCEx_PLL2_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	2100      	movs	r1, #0
 8006c98:	6239      	str	r1, [r7, #32]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	d011      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	3308      	adds	r3, #8
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f89a 	bl	8006dec <RCCEx_PLL2_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	61b9      	str	r1, [r7, #24]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d011      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f87a 	bl	8006dec <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	2100      	movs	r1, #0
 8006d18:	6139      	str	r1, [r7, #16]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d24:	460b      	mov	r3, r1
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d011      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	3328      	adds	r3, #40	@ 0x28
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f90c 	bl	8006f50 <RCCEx_PLL3_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	2100      	movs	r1, #0
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d64:	460b      	mov	r3, r1
 8006d66:	4313      	orrs	r3, r2
 8006d68:	d011      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	3328      	adds	r3, #40	@ 0x28
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f8ec 	bl	8006f50 <RCCEx_PLL3_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	2100      	movs	r1, #0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d011      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	3328      	adds	r3, #40	@ 0x28
 8006db0:	2102      	movs	r1, #2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f8cc 	bl	8006f50 <RCCEx_PLL3_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006dce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006de2:	46bd      	mov	sp, r7
 8006de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de8:	58024400 	.word	0x58024400

08006dec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dfa:	4b53      	ldr	r3, [pc, #332]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d101      	bne.n	8006e0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e099      	b.n	8006f3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a4e      	ldr	r2, [pc, #312]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e16:	f7fa fedf 	bl	8001bd8 <HAL_GetTick>
 8006e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e1c:	e008      	b.n	8006e30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e1e:	f7fa fedb 	bl	8001bd8 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e086      	b.n	8006f3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e30:	4b45      	ldr	r3, [pc, #276]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e3c:	4b42      	ldr	r3, [pc, #264]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	493f      	ldr	r1, [pc, #252]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	025b      	lsls	r3, r3, #9
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e80:	4931      	ldr	r1, [pc, #196]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e86:	4b30      	ldr	r3, [pc, #192]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	492d      	ldr	r1, [pc, #180]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e98:	4b2b      	ldr	r3, [pc, #172]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	f023 0220 	bic.w	r2, r3, #32
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	4928      	ldr	r1, [pc, #160]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006eaa:	4b27      	ldr	r3, [pc, #156]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eae:	4a26      	ldr	r2, [pc, #152]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	f023 0310 	bic.w	r3, r3, #16
 8006eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006eb6:	4b24      	ldr	r3, [pc, #144]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006eb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <RCCEx_PLL2_Config+0x160>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	69d2      	ldr	r2, [r2, #28]
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	4920      	ldr	r1, [pc, #128]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006eca:	4b1f      	ldr	r3, [pc, #124]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ece:	4a1e      	ldr	r2, [pc, #120]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ed0:	f043 0310 	orr.w	r3, r3, #16
 8006ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006edc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	4a19      	ldr	r2, [pc, #100]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ee2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ee8:	e00f      	b.n	8006f0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d106      	bne.n	8006efe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ef0:	4b15      	ldr	r3, [pc, #84]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	4a14      	ldr	r2, [pc, #80]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006efc:	e005      	b.n	8006f0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006efe:	4b12      	ldr	r3, [pc, #72]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	4a11      	ldr	r2, [pc, #68]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f16:	f7fa fe5f 	bl	8001bd8 <HAL_GetTick>
 8006f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f1c:	e008      	b.n	8006f30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f1e:	f7fa fe5b 	bl	8001bd8 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f30:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <RCCEx_PLL2_Config+0x15c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	ffff0007 	.word	0xffff0007

08006f50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f5e:	4b53      	ldr	r3, [pc, #332]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d101      	bne.n	8006f6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e099      	b.n	80070a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4e      	ldr	r2, [pc, #312]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7a:	f7fa fe2d 	bl	8001bd8 <HAL_GetTick>
 8006f7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f82:	f7fa fe29 	bl	8001bd8 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e086      	b.n	80070a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f94:	4b45      	ldr	r3, [pc, #276]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fa0:	4b42      	ldr	r3, [pc, #264]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	493f      	ldr	r1, [pc, #252]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	025b      	lsls	r3, r3, #9
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fe4:	4931      	ldr	r1, [pc, #196]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fea:	4b30      	ldr	r3, [pc, #192]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	492d      	ldr	r1, [pc, #180]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4928      	ldr	r1, [pc, #160]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800700e:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	4a26      	ldr	r2, [pc, #152]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800701a:	4b24      	ldr	r3, [pc, #144]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 800701c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800701e:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <RCCEx_PLL3_Config+0x160>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	69d2      	ldr	r2, [r2, #28]
 8007026:	00d2      	lsls	r2, r2, #3
 8007028:	4920      	ldr	r1, [pc, #128]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 800702a:	4313      	orrs	r3, r2
 800702c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800702e:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	4a1e      	ldr	r2, [pc, #120]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007040:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	4a19      	ldr	r2, [pc, #100]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007046:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800704a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800704c:	e00f      	b.n	800706e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007054:	4b15      	ldr	r3, [pc, #84]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4a14      	ldr	r2, [pc, #80]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 800705a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007060:	e005      	b.n	800706e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007062:	4b12      	ldr	r3, [pc, #72]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007068:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800706c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800706e:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a0e      	ldr	r2, [pc, #56]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707a:	f7fa fdad 	bl	8001bd8 <HAL_GetTick>
 800707e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007080:	e008      	b.n	8007094 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007082:	f7fa fda9 	bl	8001bd8 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <RCCEx_PLL3_Config+0x15c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	ffff0007 	.word	0xffff0007

080070b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e10f      	b.n	80072e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a87      	ldr	r2, [pc, #540]	@ (80072f0 <HAL_SPI_Init+0x23c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00f      	beq.n	80070f6 <HAL_SPI_Init+0x42>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a86      	ldr	r2, [pc, #536]	@ (80072f4 <HAL_SPI_Init+0x240>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00a      	beq.n	80070f6 <HAL_SPI_Init+0x42>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a84      	ldr	r2, [pc, #528]	@ (80072f8 <HAL_SPI_Init+0x244>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d005      	beq.n	80070f6 <HAL_SPI_Init+0x42>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d901      	bls.n	80070f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e0f7      	b.n	80072e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fe2e 	bl	8007d58 <SPI_GetPacketSize>
 80070fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a7b      	ldr	r2, [pc, #492]	@ (80072f0 <HAL_SPI_Init+0x23c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00c      	beq.n	8007122 <HAL_SPI_Init+0x6e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a79      	ldr	r2, [pc, #484]	@ (80072f4 <HAL_SPI_Init+0x240>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <HAL_SPI_Init+0x6e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a78      	ldr	r2, [pc, #480]	@ (80072f8 <HAL_SPI_Init+0x244>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d002      	beq.n	8007122 <HAL_SPI_Init+0x6e>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b08      	cmp	r3, #8
 8007120:	d811      	bhi.n	8007146 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007126:	4a72      	ldr	r2, [pc, #456]	@ (80072f0 <HAL_SPI_Init+0x23c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a70      	ldr	r2, [pc, #448]	@ (80072f4 <HAL_SPI_Init+0x240>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_SPI_Init+0x8c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6f      	ldr	r2, [pc, #444]	@ (80072f8 <HAL_SPI_Init+0x244>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d104      	bne.n	800714a <HAL_SPI_Init+0x96>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b10      	cmp	r3, #16
 8007144:	d901      	bls.n	800714a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e0cd      	b.n	80072e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fa f84c 	bl	80011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007186:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007190:	d119      	bne.n	80071c6 <HAL_SPI_Init+0x112>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800719a:	d103      	bne.n	80071a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10c      	bne.n	80071c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80071b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b4:	d107      	bne.n	80071c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00f      	beq.n	80071f2 <HAL_SPI_Init+0x13e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d90b      	bls.n	80071f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e007      	b.n	8007202 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	431a      	orrs	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007214:	ea42 0103 	orr.w	r1, r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007262:	ea42 0103 	orr.w	r1, r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d113      	bne.n	80072a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800728c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	40013000 	.word	0x40013000
 80072f4:	40003800 	.word	0x40003800
 80072f8:	40003c00 	.word	0x40003c00

080072fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	4613      	mov	r3, r2
 800730a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3320      	adds	r3, #32
 8007312:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007314:	f7fa fc60 	bl	8001bd8 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
 8007328:	e1d1      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_SPI_Transmit+0x3a>
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e1c9      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_SPI_Transmit+0x4c>
 8007344:	2302      	movs	r3, #2
 8007346:	e1c2      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2203      	movs	r2, #3
 8007354:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	88fa      	ldrh	r2, [r7, #6]
 800736a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	88fa      	ldrh	r2, [r7, #6]
 8007372:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80073a0:	d108      	bne.n	80073b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e009      	b.n	80073c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80073c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	4b96      	ldr	r3, [pc, #600]	@ (8007628 <HAL_SPI_Transmit+0x32c>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	88f9      	ldrh	r1, [r7, #6]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	430b      	orrs	r3, r1
 80073da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073f4:	d107      	bne.n	8007406 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d947      	bls.n	800749e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800740e:	e03f      	b.n	8007490 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d114      	bne.n	8007448 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742e:	1d1a      	adds	r2, r3, #4
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007446:	e023      	b.n	8007490 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007448:	f7fa fbc6 	bl	8001bd8 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d803      	bhi.n	8007460 <HAL_SPI_Transmit+0x164>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <HAL_SPI_Transmit+0x16a>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d114      	bne.n	8007490 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fba8 	bl	8007bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007472:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e11e      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1b9      	bne.n	8007410 <HAL_SPI_Transmit+0x114>
 800749c:	e0f1      	b.n	8007682 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b07      	cmp	r3, #7
 80074a4:	f240 80e6 	bls.w	8007674 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80074a8:	e05d      	b.n	8007566 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d132      	bne.n	800751e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d918      	bls.n	80074f6 <HAL_SPI_Transmit+0x1fa>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d014      	beq.n	80074f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074dc:	1d1a      	adds	r2, r3, #4
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b02      	subs	r3, #2
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074f4:	e037      	b.n	8007566 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fa:	881a      	ldrh	r2, [r3, #0]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007504:	1c9a      	adds	r2, r3, #2
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800751c:	e023      	b.n	8007566 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800751e:	f7fa fb5b 	bl	8001bd8 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d803      	bhi.n	8007536 <HAL_SPI_Transmit+0x23a>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d102      	bne.n	800753c <HAL_SPI_Transmit+0x240>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d114      	bne.n	8007566 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fb3d 	bl	8007bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007548:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e0b3      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d19b      	bne.n	80074aa <HAL_SPI_Transmit+0x1ae>
 8007572:	e086      	b.n	8007682 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d154      	bne.n	800762c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d918      	bls.n	80075c0 <HAL_SPI_Transmit+0x2c4>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007592:	2b40      	cmp	r3, #64	@ 0x40
 8007594:	d914      	bls.n	80075c0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075a6:	1d1a      	adds	r2, r3, #4
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b04      	subs	r3, #4
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075be:	e059      	b.n	8007674 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d917      	bls.n	80075fc <HAL_SPI_Transmit+0x300>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d013      	beq.n	80075fc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e2:	1c9a      	adds	r2, r3, #2
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b02      	subs	r3, #2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075fa:	e03b      	b.n	8007674 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3320      	adds	r3, #32
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007626:	e025      	b.n	8007674 <HAL_SPI_Transmit+0x378>
 8007628:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762c:	f7fa fad4 	bl	8001bd8 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d803      	bhi.n	8007644 <HAL_SPI_Transmit+0x348>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d102      	bne.n	800764a <HAL_SPI_Transmit+0x34e>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d114      	bne.n	8007674 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fab6 	bl	8007bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007656:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e02c      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f af79 	bne.w	8007574 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2200      	movs	r2, #0
 800768a:	2108      	movs	r1, #8
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb35 	bl	8007cfc <SPI_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769e:	f043 0220 	orr.w	r2, r3, #32
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fa87 	bl	8007bbc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e000      	b.n	80076ce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
  }
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3301      	adds	r3, #1
 80076f2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3330      	adds	r3, #48	@ 0x30
 80076fa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076fc:	f7fa fa6c 	bl	8001bd8 <HAL_GetTick>
 8007700:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b01      	cmp	r3, #1
 800770c:	d001      	beq.n	8007712 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800770e:	2302      	movs	r3, #2
 8007710:	e250      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_SPI_Receive+0x46>
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e248      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <HAL_SPI_Receive+0x58>
 800772c:	2302      	movs	r3, #2
 800772e:	e241      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2204      	movs	r2, #4
 800773c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007788:	d108      	bne.n	800779c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e009      	b.n	80077b0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80077ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	4b95      	ldr	r3, [pc, #596]	@ (8007a0c <HAL_SPI_Receive+0x334>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	88f9      	ldrh	r1, [r7, #6]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077dc:	d107      	bne.n	80077ee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2b0f      	cmp	r3, #15
 80077f4:	d96c      	bls.n	80078d0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80077f6:	e064      	b.n	80078c2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b01      	cmp	r3, #1
 800780c:	d114      	bne.n	8007838 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007816:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007818:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800781e:	1d1a      	adds	r2, r3, #4
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007836:	e044      	b.n	80078c2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800783e:	b29b      	uxth	r3, r3
 8007840:	8bfa      	ldrh	r2, [r7, #30]
 8007842:	429a      	cmp	r2, r3
 8007844:	d919      	bls.n	800787a <HAL_SPI_Receive+0x1a2>
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d014      	beq.n	800787a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007858:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800785a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007860:	1d1a      	adds	r2, r3, #4
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007878:	e023      	b.n	80078c2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800787a:	f7fa f9ad 	bl	8001bd8 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d803      	bhi.n	8007892 <HAL_SPI_Receive+0x1ba>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d102      	bne.n	8007898 <HAL_SPI_Receive+0x1c0>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d114      	bne.n	80078c2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f98f 	bl	8007bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e178      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d194      	bne.n	80077f8 <HAL_SPI_Receive+0x120>
 80078ce:	e15e      	b.n	8007b8e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b07      	cmp	r3, #7
 80078d6:	f240 8153 	bls.w	8007b80 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80078da:	e08f      	b.n	80079fc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d114      	bne.n	800791c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	8812      	ldrh	r2, [r2, #0]
 80078fa:	b292      	uxth	r2, r2
 80078fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007902:	1c9a      	adds	r2, r3, #2
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800791a:	e06f      	b.n	80079fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007922:	b29b      	uxth	r3, r3
 8007924:	8bfa      	ldrh	r2, [r7, #30]
 8007926:	429a      	cmp	r2, r3
 8007928:	d924      	bls.n	8007974 <HAL_SPI_Receive+0x29c>
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01f      	beq.n	8007974 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	8812      	ldrh	r2, [r2, #0]
 800793c:	b292      	uxth	r2, r2
 800793e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007944:	1c9a      	adds	r2, r3, #2
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	8812      	ldrh	r2, [r2, #0]
 8007952:	b292      	uxth	r2, r2
 8007954:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b02      	subs	r3, #2
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007972:	e043      	b.n	80079fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d119      	bne.n	80079b4 <HAL_SPI_Receive+0x2dc>
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d014      	beq.n	80079b4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	8812      	ldrh	r2, [r2, #0]
 8007992:	b292      	uxth	r2, r2
 8007994:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800799a:	1c9a      	adds	r2, r3, #2
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079b2:	e023      	b.n	80079fc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079b4:	f7fa f910 	bl	8001bd8 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d803      	bhi.n	80079cc <HAL_SPI_Receive+0x2f4>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ca:	d102      	bne.n	80079d2 <HAL_SPI_Receive+0x2fa>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d114      	bne.n	80079fc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f8f2 	bl	8007bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e0db      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f47f af69 	bne.w	80078dc <HAL_SPI_Receive+0x204>
 8007a0a:	e0c0      	b.n	8007b8e <HAL_SPI_Receive+0x4b6>
 8007a0c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d117      	bne.n	8007a56 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a54:	e094      	b.n	8007b80 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	8bfa      	ldrh	r2, [r7, #30]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d946      	bls.n	8007af2 <HAL_SPI_Receive+0x41a>
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d041      	beq.n	8007af2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ace:	7812      	ldrb	r2, [r2, #0]
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b04      	subs	r3, #4
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007af0:	e046      	b.n	8007b80 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d81c      	bhi.n	8007b38 <HAL_SPI_Receive+0x460>
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b36:	e023      	b.n	8007b80 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b38:	f7fa f84e 	bl	8001bd8 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d803      	bhi.n	8007b50 <HAL_SPI_Receive+0x478>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d102      	bne.n	8007b56 <HAL_SPI_Receive+0x47e>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d114      	bne.n	8007b80 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f830 	bl	8007bbc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e019      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f af41 	bne.w	8007a10 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f814 	bl	8007bbc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0208 	orr.w	r2, r2, #8
 8007bda:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0210 	orr.w	r2, r2, #16
 8007bea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0201 	bic.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6919      	ldr	r1, [r3, #16]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b3c      	ldr	r3, [pc, #240]	@ (8007cf8 <SPI_CloseTransfer+0x13c>)
 8007c08:	400b      	ands	r3, r1
 8007c0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d014      	beq.n	8007c52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00f      	beq.n	8007c52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	699a      	ldr	r2, [r3, #24]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0220 	orr.w	r2, r2, #32
 8007c50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d014      	beq.n	8007c88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00f      	beq.n	8007c88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c6e:	f043 0204 	orr.w	r2, r3, #4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00f      	beq.n	8007cb2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c98:	f043 0201 	orr.w	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cb0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00f      	beq.n	8007cdc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc2:	f043 0208 	orr.w	r2, r3, #8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	fffffc90 	.word	0xfffffc90

08007cfc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d0c:	e010      	b.n	8007d30 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d0e:	f7f9 ff63 	bl	8001bd8 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d803      	bhi.n	8007d26 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d102      	bne.n	8007d2c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e00f      	b.n	8007d50 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695a      	ldr	r2, [r3, #20]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d0df      	beq.n	8007d0e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	3307      	adds	r3, #7
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e049      	b.n	8007e34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7f9 fdfb 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f000 fd59 	bl	8008884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d001      	beq.n	8007e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e054      	b.n	8007efe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a26      	ldr	r2, [pc, #152]	@ (8007f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d022      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7e:	d01d      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a22      	ldr	r2, [pc, #136]	@ (8007f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d018      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a21      	ldr	r2, [pc, #132]	@ (8007f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1f      	ldr	r2, [pc, #124]	@ (8007f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00e      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8007f1c <HAL_TIM_Base_Start_IT+0xe0>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1c      	ldr	r2, [pc, #112]	@ (8007f20 <HAL_TIM_Base_Start_IT+0xe4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <HAL_TIM_Base_Start_IT+0xe8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d115      	bne.n	8007ee8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	4b19      	ldr	r3, [pc, #100]	@ (8007f28 <HAL_TIM_Base_Start_IT+0xec>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	d015      	beq.n	8007efa <HAL_TIM_Base_Start_IT+0xbe>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed4:	d011      	beq.n	8007efa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee6:	e008      	b.n	8007efa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	e000      	b.n	8007efc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800
 8007f18:	40000c00 	.word	0x40000c00
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40001800 	.word	0x40001800
 8007f24:	40014000 	.word	0x40014000
 8007f28:	00010007 	.word	0x00010007

08007f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e049      	b.n	8007fd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f841 	bl	8007fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f000 fc8a 	bl	8008884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
	...

08007ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <HAL_TIM_PWM_Start+0x24>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	bf14      	ite	ne
 800800c:	2301      	movne	r3, #1
 800800e:	2300      	moveq	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e03c      	b.n	800808e <HAL_TIM_PWM_Start+0x9e>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b04      	cmp	r3, #4
 8008018:	d109      	bne.n	800802e <HAL_TIM_PWM_Start+0x3e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	bf14      	ite	ne
 8008026:	2301      	movne	r3, #1
 8008028:	2300      	moveq	r3, #0
 800802a:	b2db      	uxtb	r3, r3
 800802c:	e02f      	b.n	800808e <HAL_TIM_PWM_Start+0x9e>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d109      	bne.n	8008048 <HAL_TIM_PWM_Start+0x58>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	e022      	b.n	800808e <HAL_TIM_PWM_Start+0x9e>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b0c      	cmp	r3, #12
 800804c:	d109      	bne.n	8008062 <HAL_TIM_PWM_Start+0x72>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b01      	cmp	r3, #1
 8008058:	bf14      	ite	ne
 800805a:	2301      	movne	r3, #1
 800805c:	2300      	moveq	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	e015      	b.n	800808e <HAL_TIM_PWM_Start+0x9e>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b10      	cmp	r3, #16
 8008066:	d109      	bne.n	800807c <HAL_TIM_PWM_Start+0x8c>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b01      	cmp	r3, #1
 8008072:	bf14      	ite	ne
 8008074:	2301      	movne	r3, #1
 8008076:	2300      	moveq	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	e008      	b.n	800808e <HAL_TIM_PWM_Start+0x9e>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e0a1      	b.n	80081da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_PWM_Start+0xb6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080a4:	e023      	b.n	80080ee <HAL_TIM_PWM_Start+0xfe>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_PWM_Start+0xc6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080b4:	e01b      	b.n	80080ee <HAL_TIM_PWM_Start+0xfe>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d104      	bne.n	80080c6 <HAL_TIM_PWM_Start+0xd6>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080c4:	e013      	b.n	80080ee <HAL_TIM_PWM_Start+0xfe>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b0c      	cmp	r3, #12
 80080ca:	d104      	bne.n	80080d6 <HAL_TIM_PWM_Start+0xe6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080d4:	e00b      	b.n	80080ee <HAL_TIM_PWM_Start+0xfe>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d104      	bne.n	80080e6 <HAL_TIM_PWM_Start+0xf6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080e4:	e003      	b.n	80080ee <HAL_TIM_PWM_Start+0xfe>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2201      	movs	r2, #1
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 ffde 	bl	80090b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a38      	ldr	r2, [pc, #224]	@ (80081e4 <HAL_TIM_PWM_Start+0x1f4>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_TIM_PWM_Start+0x13e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a37      	ldr	r2, [pc, #220]	@ (80081e8 <HAL_TIM_PWM_Start+0x1f8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00e      	beq.n	800812e <HAL_TIM_PWM_Start+0x13e>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a35      	ldr	r2, [pc, #212]	@ (80081ec <HAL_TIM_PWM_Start+0x1fc>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_TIM_PWM_Start+0x13e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a34      	ldr	r2, [pc, #208]	@ (80081f0 <HAL_TIM_PWM_Start+0x200>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_TIM_PWM_Start+0x13e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a32      	ldr	r2, [pc, #200]	@ (80081f4 <HAL_TIM_PWM_Start+0x204>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <HAL_TIM_PWM_Start+0x142>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <HAL_TIM_PWM_Start+0x144>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008146:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a25      	ldr	r2, [pc, #148]	@ (80081e4 <HAL_TIM_PWM_Start+0x1f4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d022      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800815a:	d01d      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a25      	ldr	r2, [pc, #148]	@ (80081f8 <HAL_TIM_PWM_Start+0x208>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d018      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a24      	ldr	r2, [pc, #144]	@ (80081fc <HAL_TIM_PWM_Start+0x20c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d013      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a22      	ldr	r2, [pc, #136]	@ (8008200 <HAL_TIM_PWM_Start+0x210>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00e      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1a      	ldr	r2, [pc, #104]	@ (80081e8 <HAL_TIM_PWM_Start+0x1f8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d009      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1e      	ldr	r2, [pc, #120]	@ (8008204 <HAL_TIM_PWM_Start+0x214>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <HAL_TIM_PWM_Start+0x1a8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a16      	ldr	r2, [pc, #88]	@ (80081ec <HAL_TIM_PWM_Start+0x1fc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d115      	bne.n	80081c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	4b1a      	ldr	r3, [pc, #104]	@ (8008208 <HAL_TIM_PWM_Start+0x218>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b06      	cmp	r3, #6
 80081a8:	d015      	beq.n	80081d6 <HAL_TIM_PWM_Start+0x1e6>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b0:	d011      	beq.n	80081d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c2:	e008      	b.n	80081d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e000      	b.n	80081d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40014400 	.word	0x40014400
 80081f4:	40014800 	.word	0x40014800
 80081f8:	40000400 	.word	0x40000400
 80081fc:	40000800 	.word	0x40000800
 8008200:	40000c00 	.word	0x40000c00
 8008204:	40001800 	.word	0x40001800
 8008208:	00010007 	.word	0x00010007

0800820c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d020      	beq.n	8008270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01b      	beq.n	8008270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0202 	mvn.w	r2, #2
 8008240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 faf6 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fae8 	bl	8008834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 faf9 	bl	800885c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	d020      	beq.n	80082bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01b      	beq.n	80082bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0204 	mvn.w	r2, #4
 800828c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fad0 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 80082a8:	e005      	b.n	80082b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fac2 	bl	8008834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fad3 	bl	800885c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d020      	beq.n	8008308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f003 0308 	and.w	r3, r3, #8
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01b      	beq.n	8008308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0208 	mvn.w	r2, #8
 80082d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2204      	movs	r2, #4
 80082de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 faaa 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 80082f4:	e005      	b.n	8008302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa9c 	bl	8008834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 faad 	bl	800885c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	2b00      	cmp	r3, #0
 8008310:	d020      	beq.n	8008354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01b      	beq.n	8008354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0210 	mvn.w	r2, #16
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2208      	movs	r2, #8
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa84 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa76 	bl	8008834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fa87 	bl	800885c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0201 	mvn.w	r2, #1
 8008370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f009 fac8 	bl	8011908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800839e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 f887 	bl	80094b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f87f 	bl	80094c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00c      	beq.n	80083ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d007      	beq.n	80083ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa41 	bl	8008870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00c      	beq.n	8008412 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f06f 0220 	mvn.w	r2, #32
 800840a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f847 	bl	80094a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008436:	2302      	movs	r3, #2
 8008438:	e0ff      	b.n	800863a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b14      	cmp	r3, #20
 8008446:	f200 80f0 	bhi.w	800862a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800844a:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	080084a5 	.word	0x080084a5
 8008454:	0800862b 	.word	0x0800862b
 8008458:	0800862b 	.word	0x0800862b
 800845c:	0800862b 	.word	0x0800862b
 8008460:	080084e5 	.word	0x080084e5
 8008464:	0800862b 	.word	0x0800862b
 8008468:	0800862b 	.word	0x0800862b
 800846c:	0800862b 	.word	0x0800862b
 8008470:	08008527 	.word	0x08008527
 8008474:	0800862b 	.word	0x0800862b
 8008478:	0800862b 	.word	0x0800862b
 800847c:	0800862b 	.word	0x0800862b
 8008480:	08008567 	.word	0x08008567
 8008484:	0800862b 	.word	0x0800862b
 8008488:	0800862b 	.word	0x0800862b
 800848c:	0800862b 	.word	0x0800862b
 8008490:	080085a9 	.word	0x080085a9
 8008494:	0800862b 	.word	0x0800862b
 8008498:	0800862b 	.word	0x0800862b
 800849c:	0800862b 	.word	0x0800862b
 80084a0:	080085e9 	.word	0x080085e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fa90 	bl	80089d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0204 	bic.w	r2, r2, #4
 80084ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6999      	ldr	r1, [r3, #24]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691a      	ldr	r2, [r3, #16]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	619a      	str	r2, [r3, #24]
      break;
 80084e2:	e0a5      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fb00 	bl	8008af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800850e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6999      	ldr	r1, [r3, #24]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	021a      	lsls	r2, r3, #8
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	619a      	str	r2, [r3, #24]
      break;
 8008524:	e084      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fb69 	bl	8008c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0208 	orr.w	r2, r2, #8
 8008540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0204 	bic.w	r2, r2, #4
 8008550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69d9      	ldr	r1, [r3, #28]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	61da      	str	r2, [r3, #28]
      break;
 8008564:	e064      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fbd1 	bl	8008d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69d9      	ldr	r1, [r3, #28]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	021a      	lsls	r2, r3, #8
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	61da      	str	r2, [r3, #28]
      break;
 80085a6:	e043      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fc1a 	bl	8008de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0208 	orr.w	r2, r2, #8
 80085c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0204 	bic.w	r2, r2, #4
 80085d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80085e6:	e023      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fc5e 	bl	8008eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008602:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008612:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	021a      	lsls	r2, r3, #8
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008628:	e002      	b.n	8008630 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	75fb      	strb	r3, [r7, #23]
      break;
 800862e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop

08008644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_TIM_ConfigClockSource+0x1c>
 800865c:	2302      	movs	r3, #2
 800865e:	e0dc      	b.n	800881a <HAL_TIM_ConfigClockSource+0x1d6>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	4b6a      	ldr	r3, [pc, #424]	@ (8008824 <HAL_TIM_ConfigClockSource+0x1e0>)
 800867c:	4013      	ands	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a64      	ldr	r2, [pc, #400]	@ (8008828 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	f000 80a9 	beq.w	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 800869c:	4a62      	ldr	r2, [pc, #392]	@ (8008828 <HAL_TIM_ConfigClockSource+0x1e4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	f200 80ae 	bhi.w	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 80086a4:	4a61      	ldr	r2, [pc, #388]	@ (800882c <HAL_TIM_ConfigClockSource+0x1e8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	f000 80a1 	beq.w	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 80086ac:	4a5f      	ldr	r2, [pc, #380]	@ (800882c <HAL_TIM_ConfigClockSource+0x1e8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	f200 80a6 	bhi.w	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 80086b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008830 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	f000 8099 	beq.w	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 80086bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008830 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	f200 809e 	bhi.w	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 80086c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086c8:	f000 8091 	beq.w	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 80086cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086d0:	f200 8096 	bhi.w	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 80086d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086d8:	f000 8089 	beq.w	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 80086dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086e0:	f200 808e 	bhi.w	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 80086e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e8:	d03e      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x124>
 80086ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ee:	f200 8087 	bhi.w	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 80086f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f6:	f000 8086 	beq.w	8008806 <HAL_TIM_ConfigClockSource+0x1c2>
 80086fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086fe:	d87f      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008700:	2b70      	cmp	r3, #112	@ 0x70
 8008702:	d01a      	beq.n	800873a <HAL_TIM_ConfigClockSource+0xf6>
 8008704:	2b70      	cmp	r3, #112	@ 0x70
 8008706:	d87b      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008708:	2b60      	cmp	r3, #96	@ 0x60
 800870a:	d050      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x16a>
 800870c:	2b60      	cmp	r3, #96	@ 0x60
 800870e:	d877      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008710:	2b50      	cmp	r3, #80	@ 0x50
 8008712:	d03c      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x14a>
 8008714:	2b50      	cmp	r3, #80	@ 0x50
 8008716:	d873      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008718:	2b40      	cmp	r3, #64	@ 0x40
 800871a:	d058      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0x18a>
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	d86f      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008720:	2b30      	cmp	r3, #48	@ 0x30
 8008722:	d064      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008724:	2b30      	cmp	r3, #48	@ 0x30
 8008726:	d86b      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008728:	2b20      	cmp	r3, #32
 800872a:	d060      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 800872c:	2b20      	cmp	r3, #32
 800872e:	d867      	bhi.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d05c      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008734:	2b10      	cmp	r3, #16
 8008736:	d05a      	beq.n	80087ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008738:	e062      	b.n	8008800 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800874a:	f000 fc95 	bl	8009078 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800875c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	609a      	str	r2, [r3, #8]
      break;
 8008766:	e04f      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008778:	f000 fc7e 	bl	8009078 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800878a:	609a      	str	r2, [r3, #8]
      break;
 800878c:	e03c      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800879a:	461a      	mov	r2, r3
 800879c:	f000 fbee 	bl	8008f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2150      	movs	r1, #80	@ 0x50
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fc48 	bl	800903c <TIM_ITRx_SetConfig>
      break;
 80087ac:	e02c      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ba:	461a      	mov	r2, r3
 80087bc:	f000 fc0d 	bl	8008fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2160      	movs	r1, #96	@ 0x60
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fc38 	bl	800903c <TIM_ITRx_SetConfig>
      break;
 80087cc:	e01c      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087da:	461a      	mov	r2, r3
 80087dc:	f000 fbce 	bl	8008f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2140      	movs	r1, #64	@ 0x40
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fc28 	bl	800903c <TIM_ITRx_SetConfig>
      break;
 80087ec:	e00c      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f000 fc1f 	bl	800903c <TIM_ITRx_SetConfig>
      break;
 80087fe:	e003      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	73fb      	strb	r3, [r7, #15]
      break;
 8008804:	e000      	b.n	8008808 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	ffceff88 	.word	0xffceff88
 8008828:	00100040 	.word	0x00100040
 800882c:	00100030 	.word	0x00100030
 8008830:	00100020 	.word	0x00100020

08008834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a46      	ldr	r2, [pc, #280]	@ (80089b0 <TIM_Base_SetConfig+0x12c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d013      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a2:	d00f      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a43      	ldr	r2, [pc, #268]	@ (80089b4 <TIM_Base_SetConfig+0x130>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00b      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a42      	ldr	r2, [pc, #264]	@ (80089b8 <TIM_Base_SetConfig+0x134>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d007      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a41      	ldr	r2, [pc, #260]	@ (80089bc <TIM_Base_SetConfig+0x138>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d003      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a40      	ldr	r2, [pc, #256]	@ (80089c0 <TIM_Base_SetConfig+0x13c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d108      	bne.n	80088d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a35      	ldr	r2, [pc, #212]	@ (80089b0 <TIM_Base_SetConfig+0x12c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01f      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e4:	d01b      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a32      	ldr	r2, [pc, #200]	@ (80089b4 <TIM_Base_SetConfig+0x130>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d017      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a31      	ldr	r2, [pc, #196]	@ (80089b8 <TIM_Base_SetConfig+0x134>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d013      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a30      	ldr	r2, [pc, #192]	@ (80089bc <TIM_Base_SetConfig+0x138>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00f      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a2f      	ldr	r2, [pc, #188]	@ (80089c0 <TIM_Base_SetConfig+0x13c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00b      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a2e      	ldr	r2, [pc, #184]	@ (80089c4 <TIM_Base_SetConfig+0x140>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d007      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a2d      	ldr	r2, [pc, #180]	@ (80089c8 <TIM_Base_SetConfig+0x144>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_Base_SetConfig+0x9a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a2c      	ldr	r2, [pc, #176]	@ (80089cc <TIM_Base_SetConfig+0x148>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d108      	bne.n	8008930 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a16      	ldr	r2, [pc, #88]	@ (80089b0 <TIM_Base_SetConfig+0x12c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00f      	beq.n	800897c <TIM_Base_SetConfig+0xf8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a18      	ldr	r2, [pc, #96]	@ (80089c0 <TIM_Base_SetConfig+0x13c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00b      	beq.n	800897c <TIM_Base_SetConfig+0xf8>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a17      	ldr	r2, [pc, #92]	@ (80089c4 <TIM_Base_SetConfig+0x140>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d007      	beq.n	800897c <TIM_Base_SetConfig+0xf8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a16      	ldr	r2, [pc, #88]	@ (80089c8 <TIM_Base_SetConfig+0x144>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d003      	beq.n	800897c <TIM_Base_SetConfig+0xf8>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a15      	ldr	r2, [pc, #84]	@ (80089cc <TIM_Base_SetConfig+0x148>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d103      	bne.n	8008984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	691a      	ldr	r2, [r3, #16]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b01      	cmp	r3, #1
 8008994:	d105      	bne.n	80089a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f023 0201 	bic.w	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]
  }
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00
 80089c0:	40010400 	.word	0x40010400
 80089c4:	40014000 	.word	0x40014000
 80089c8:	40014400 	.word	0x40014400
 80089cc:	40014800 	.word	0x40014800

080089d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	f023 0201 	bic.w	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	4b37      	ldr	r3, [pc, #220]	@ (8008ad8 <TIM_OC1_SetConfig+0x108>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 0302 	bic.w	r3, r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a2d      	ldr	r2, [pc, #180]	@ (8008adc <TIM_OC1_SetConfig+0x10c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00f      	beq.n	8008a4c <TIM_OC1_SetConfig+0x7c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ae0 <TIM_OC1_SetConfig+0x110>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d00b      	beq.n	8008a4c <TIM_OC1_SetConfig+0x7c>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a2b      	ldr	r2, [pc, #172]	@ (8008ae4 <TIM_OC1_SetConfig+0x114>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d007      	beq.n	8008a4c <TIM_OC1_SetConfig+0x7c>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae8 <TIM_OC1_SetConfig+0x118>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_OC1_SetConfig+0x7c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a29      	ldr	r2, [pc, #164]	@ (8008aec <TIM_OC1_SetConfig+0x11c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d10c      	bne.n	8008a66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 0308 	bic.w	r3, r3, #8
 8008a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f023 0304 	bic.w	r3, r3, #4
 8008a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a1c      	ldr	r2, [pc, #112]	@ (8008adc <TIM_OC1_SetConfig+0x10c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00f      	beq.n	8008a8e <TIM_OC1_SetConfig+0xbe>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae0 <TIM_OC1_SetConfig+0x110>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00b      	beq.n	8008a8e <TIM_OC1_SetConfig+0xbe>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae4 <TIM_OC1_SetConfig+0x114>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_OC1_SetConfig+0xbe>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a19      	ldr	r2, [pc, #100]	@ (8008ae8 <TIM_OC1_SetConfig+0x118>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_OC1_SetConfig+0xbe>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a18      	ldr	r2, [pc, #96]	@ (8008aec <TIM_OC1_SetConfig+0x11c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d111      	bne.n	8008ab2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	621a      	str	r2, [r3, #32]
}
 8008acc:	bf00      	nop
 8008ace:	371c      	adds	r7, #28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	fffeff8f 	.word	0xfffeff8f
 8008adc:	40010000 	.word	0x40010000
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800

08008af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	f023 0210 	bic.w	r2, r3, #16
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4b34      	ldr	r3, [pc, #208]	@ (8008bec <TIM_OC2_SetConfig+0xfc>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f023 0320 	bic.w	r3, r3, #32
 8008b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a29      	ldr	r2, [pc, #164]	@ (8008bf0 <TIM_OC2_SetConfig+0x100>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC2_SetConfig+0x68>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a28      	ldr	r2, [pc, #160]	@ (8008bf4 <TIM_OC2_SetConfig+0x104>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d10d      	bne.n	8008b74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a1e      	ldr	r2, [pc, #120]	@ (8008bf0 <TIM_OC2_SetConfig+0x100>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00f      	beq.n	8008b9c <TIM_OC2_SetConfig+0xac>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf4 <TIM_OC2_SetConfig+0x104>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00b      	beq.n	8008b9c <TIM_OC2_SetConfig+0xac>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf8 <TIM_OC2_SetConfig+0x108>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d007      	beq.n	8008b9c <TIM_OC2_SetConfig+0xac>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8008bfc <TIM_OC2_SetConfig+0x10c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d003      	beq.n	8008b9c <TIM_OC2_SetConfig+0xac>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a1a      	ldr	r2, [pc, #104]	@ (8008c00 <TIM_OC2_SetConfig+0x110>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d113      	bne.n	8008bc4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	feff8fff 	.word	0xfeff8fff
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	40014000 	.word	0x40014000
 8008bfc:	40014400 	.word	0x40014400
 8008c00:	40014800 	.word	0x40014800

08008c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4b33      	ldr	r3, [pc, #204]	@ (8008cfc <TIM_OC3_SetConfig+0xf8>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a28      	ldr	r2, [pc, #160]	@ (8008d00 <TIM_OC3_SetConfig+0xfc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_OC3_SetConfig+0x66>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a27      	ldr	r2, [pc, #156]	@ (8008d04 <TIM_OC3_SetConfig+0x100>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d10d      	bne.n	8008c86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <TIM_OC3_SetConfig+0xfc>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <TIM_OC3_SetConfig+0xaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a1c      	ldr	r2, [pc, #112]	@ (8008d04 <TIM_OC3_SetConfig+0x100>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00b      	beq.n	8008cae <TIM_OC3_SetConfig+0xaa>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a1b      	ldr	r2, [pc, #108]	@ (8008d08 <TIM_OC3_SetConfig+0x104>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <TIM_OC3_SetConfig+0xaa>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8008d0c <TIM_OC3_SetConfig+0x108>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <TIM_OC3_SetConfig+0xaa>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a19      	ldr	r2, [pc, #100]	@ (8008d10 <TIM_OC3_SetConfig+0x10c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d113      	bne.n	8008cd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	621a      	str	r2, [r3, #32]
}
 8008cf0:	bf00      	nop
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	fffeff8f 	.word	0xfffeff8f
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40010400 	.word	0x40010400
 8008d08:	40014000 	.word	0x40014000
 8008d0c:	40014400 	.word	0x40014400
 8008d10:	40014800 	.word	0x40014800

08008d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4b24      	ldr	r3, [pc, #144]	@ (8008dd0 <TIM_OC4_SetConfig+0xbc>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	031b      	lsls	r3, r3, #12
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a19      	ldr	r2, [pc, #100]	@ (8008dd4 <TIM_OC4_SetConfig+0xc0>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00f      	beq.n	8008d94 <TIM_OC4_SetConfig+0x80>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a18      	ldr	r2, [pc, #96]	@ (8008dd8 <TIM_OC4_SetConfig+0xc4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00b      	beq.n	8008d94 <TIM_OC4_SetConfig+0x80>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a17      	ldr	r2, [pc, #92]	@ (8008ddc <TIM_OC4_SetConfig+0xc8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d007      	beq.n	8008d94 <TIM_OC4_SetConfig+0x80>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a16      	ldr	r2, [pc, #88]	@ (8008de0 <TIM_OC4_SetConfig+0xcc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_OC4_SetConfig+0x80>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a15      	ldr	r2, [pc, #84]	@ (8008de4 <TIM_OC4_SetConfig+0xd0>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d109      	bne.n	8008da8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	019b      	lsls	r3, r3, #6
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	621a      	str	r2, [r3, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	feff8fff 	.word	0xfeff8fff
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40010400 	.word	0x40010400
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40014400 	.word	0x40014400
 8008de4:	40014800 	.word	0x40014800

08008de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4b21      	ldr	r3, [pc, #132]	@ (8008e98 <TIM_OC5_SetConfig+0xb0>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	041b      	lsls	r3, r3, #16
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <TIM_OC5_SetConfig+0xb4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00f      	beq.n	8008e5e <TIM_OC5_SetConfig+0x76>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a17      	ldr	r2, [pc, #92]	@ (8008ea0 <TIM_OC5_SetConfig+0xb8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00b      	beq.n	8008e5e <TIM_OC5_SetConfig+0x76>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a16      	ldr	r2, [pc, #88]	@ (8008ea4 <TIM_OC5_SetConfig+0xbc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d007      	beq.n	8008e5e <TIM_OC5_SetConfig+0x76>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a15      	ldr	r2, [pc, #84]	@ (8008ea8 <TIM_OC5_SetConfig+0xc0>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d003      	beq.n	8008e5e <TIM_OC5_SetConfig+0x76>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a14      	ldr	r2, [pc, #80]	@ (8008eac <TIM_OC5_SetConfig+0xc4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d109      	bne.n	8008e72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	621a      	str	r2, [r3, #32]
}
 8008e8c:	bf00      	nop
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	fffeff8f 	.word	0xfffeff8f
 8008e9c:	40010000 	.word	0x40010000
 8008ea0:	40010400 	.word	0x40010400
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	40014400 	.word	0x40014400
 8008eac:	40014800 	.word	0x40014800

08008eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	4b22      	ldr	r3, [pc, #136]	@ (8008f64 <TIM_OC6_SetConfig+0xb4>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	051b      	lsls	r3, r3, #20
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a19      	ldr	r2, [pc, #100]	@ (8008f68 <TIM_OC6_SetConfig+0xb8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00f      	beq.n	8008f28 <TIM_OC6_SetConfig+0x78>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a18      	ldr	r2, [pc, #96]	@ (8008f6c <TIM_OC6_SetConfig+0xbc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00b      	beq.n	8008f28 <TIM_OC6_SetConfig+0x78>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a17      	ldr	r2, [pc, #92]	@ (8008f70 <TIM_OC6_SetConfig+0xc0>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <TIM_OC6_SetConfig+0x78>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a16      	ldr	r2, [pc, #88]	@ (8008f74 <TIM_OC6_SetConfig+0xc4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_OC6_SetConfig+0x78>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a15      	ldr	r2, [pc, #84]	@ (8008f78 <TIM_OC6_SetConfig+0xc8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d109      	bne.n	8008f3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	029b      	lsls	r3, r3, #10
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	621a      	str	r2, [r3, #32]
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	feff8fff 	.word	0xfeff8fff
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40010400 	.word	0x40010400
 8008f70:	40014000 	.word	0x40014000
 8008f74:	40014400 	.word	0x40014400
 8008f78:	40014800 	.word	0x40014800

08008f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	f023 0201 	bic.w	r2, r3, #1
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f023 030a 	bic.w	r3, r3, #10
 8008fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	621a      	str	r2, [r3, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b087      	sub	sp, #28
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	f023 0210 	bic.w	r2, r3, #16
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	031b      	lsls	r3, r3, #12
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009016:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	621a      	str	r2, [r3, #32]
}
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4b09      	ldr	r3, [pc, #36]	@ (8009074 <TIM_ITRx_SetConfig+0x38>)
 8009050:	4013      	ands	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	f043 0307 	orr.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	609a      	str	r2, [r3, #8]
}
 8009066:	bf00      	nop
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	ffcfff8f 	.word	0xffcfff8f

08009078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	021a      	lsls	r2, r3, #8
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	431a      	orrs	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4313      	orrs	r3, r2
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	609a      	str	r2, [r3, #8]
}
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2201      	movs	r2, #1
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a1a      	ldr	r2, [r3, #32]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	43db      	mvns	r3, r3
 80090da:	401a      	ands	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a1a      	ldr	r2, [r3, #32]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f003 031f 	and.w	r3, r3, #31
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	431a      	orrs	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	621a      	str	r2, [r3, #32]
}
 80090f6:	bf00      	nop
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
	...

08009104 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <HAL_TIMEx_PWMN_Start+0x24>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b01      	cmp	r3, #1
 800911e:	bf14      	ite	ne
 8009120:	2301      	movne	r3, #1
 8009122:	2300      	moveq	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e022      	b.n	800916e <HAL_TIMEx_PWMN_Start+0x6a>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b04      	cmp	r3, #4
 800912c:	d109      	bne.n	8009142 <HAL_TIMEx_PWMN_Start+0x3e>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b01      	cmp	r3, #1
 8009138:	bf14      	ite	ne
 800913a:	2301      	movne	r3, #1
 800913c:	2300      	moveq	r3, #0
 800913e:	b2db      	uxtb	r3, r3
 8009140:	e015      	b.n	800916e <HAL_TIMEx_PWMN_Start+0x6a>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b08      	cmp	r3, #8
 8009146:	d109      	bne.n	800915c <HAL_TIMEx_PWMN_Start+0x58>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	bf14      	ite	ne
 8009154:	2301      	movne	r3, #1
 8009156:	2300      	moveq	r3, #0
 8009158:	b2db      	uxtb	r3, r3
 800915a:	e008      	b.n	800916e <HAL_TIMEx_PWMN_Start+0x6a>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	bf14      	ite	ne
 8009168:	2301      	movne	r3, #1
 800916a:	2300      	moveq	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e073      	b.n	800925e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d104      	bne.n	8009186 <HAL_TIMEx_PWMN_Start+0x82>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009184:	e013      	b.n	80091ae <HAL_TIMEx_PWMN_Start+0xaa>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b04      	cmp	r3, #4
 800918a:	d104      	bne.n	8009196 <HAL_TIMEx_PWMN_Start+0x92>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009194:	e00b      	b.n	80091ae <HAL_TIMEx_PWMN_Start+0xaa>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b08      	cmp	r3, #8
 800919a:	d104      	bne.n	80091a6 <HAL_TIMEx_PWMN_Start+0xa2>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091a4:	e003      	b.n	80091ae <HAL_TIMEx_PWMN_Start+0xaa>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2202      	movs	r2, #2
 80091aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2204      	movs	r2, #4
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f990 	bl	80094dc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a25      	ldr	r2, [pc, #148]	@ (8009268 <HAL_TIMEx_PWMN_Start+0x164>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d022      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091de:	d01d      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a21      	ldr	r2, [pc, #132]	@ (800926c <HAL_TIMEx_PWMN_Start+0x168>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d018      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a20      	ldr	r2, [pc, #128]	@ (8009270 <HAL_TIMEx_PWMN_Start+0x16c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d013      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009274 <HAL_TIMEx_PWMN_Start+0x170>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00e      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1d      	ldr	r2, [pc, #116]	@ (8009278 <HAL_TIMEx_PWMN_Start+0x174>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d009      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1b      	ldr	r2, [pc, #108]	@ (800927c <HAL_TIMEx_PWMN_Start+0x178>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d004      	beq.n	800921c <HAL_TIMEx_PWMN_Start+0x118>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1a      	ldr	r2, [pc, #104]	@ (8009280 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d115      	bne.n	8009248 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	4b18      	ldr	r3, [pc, #96]	@ (8009284 <HAL_TIMEx_PWMN_Start+0x180>)
 8009224:	4013      	ands	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b06      	cmp	r3, #6
 800922c:	d015      	beq.n	800925a <HAL_TIMEx_PWMN_Start+0x156>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009234:	d011      	beq.n	800925a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0201 	orr.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009246:	e008      	b.n	800925a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e000      	b.n	800925c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800925a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000
 800926c:	40000400 	.word	0x40000400
 8009270:	40000800 	.word	0x40000800
 8009274:	40000c00 	.word	0x40000c00
 8009278:	40010400 	.word	0x40010400
 800927c:	40001800 	.word	0x40001800
 8009280:	40014000 	.word	0x40014000
 8009284:	00010007 	.word	0x00010007

08009288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800929c:	2302      	movs	r3, #2
 800929e:	e06d      	b.n	800937c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a30      	ldr	r2, [pc, #192]	@ (8009388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a2f      	ldr	r2, [pc, #188]	@ (800938c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d108      	bne.n	80092e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a20      	ldr	r2, [pc, #128]	@ (8009388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d022      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009312:	d01d      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1d      	ldr	r2, [pc, #116]	@ (8009390 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d018      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1c      	ldr	r2, [pc, #112]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d013      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a1a      	ldr	r2, [pc, #104]	@ (8009398 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00e      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a15      	ldr	r2, [pc, #84]	@ (800938c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d009      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a16      	ldr	r2, [pc, #88]	@ (800939c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d004      	beq.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a15      	ldr	r2, [pc, #84]	@ (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d10c      	bne.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	4313      	orrs	r3, r2
 8009360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400
 8009390:	40000400 	.word	0x40000400
 8009394:	40000800 	.word	0x40000800
 8009398:	40000c00 	.word	0x40000c00
 800939c:	40001800 	.word	0x40001800
 80093a0:	40014000 	.word	0x40014000

080093a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093bc:	2302      	movs	r3, #2
 80093be:	e065      	b.n	800948c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	041b      	lsls	r3, r3, #16
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a16      	ldr	r2, [pc, #88]	@ (8009498 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d004      	beq.n	800944e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a14      	ldr	r2, [pc, #80]	@ (800949c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d115      	bne.n	800947a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009458:	051b      	lsls	r3, r3, #20
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	4313      	orrs	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	40010000 	.word	0x40010000
 800949c:	40010400 	.word	0x40010400

080094a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	2204      	movs	r2, #4
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a1a      	ldr	r2, [r3, #32]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	43db      	mvns	r3, r3
 80094fe:	401a      	ands	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	fa01 f303 	lsl.w	r3, r1, r3
 8009514:	431a      	orrs	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	621a      	str	r2, [r3, #32]
}
 800951a:	bf00      	nop
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
	...

08009528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009528:	b084      	sub	sp, #16
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	f107 001c 	add.w	r0, r7, #28
 8009536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800953a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800953e:	2b01      	cmp	r3, #1
 8009540:	d121      	bne.n	8009586 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009546:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	4b2c      	ldr	r3, [pc, #176]	@ (8009604 <USB_CoreInit+0xdc>)
 8009554:	4013      	ands	r3, r2
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009566:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800956a:	2b01      	cmp	r3, #1
 800956c:	d105      	bne.n	800957a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 faf6 	bl	800ab6c <USB_CoreReset>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
 8009584:	e01b      	b.n	80095be <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 faea 	bl	800ab6c <USB_CoreReset>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800959c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80095b0:	e005      	b.n	80095be <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095be:	7fbb      	ldrb	r3, [r7, #30]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d116      	bne.n	80095f2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <USB_CoreInit+0xe0>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f043 0206 	orr.w	r2, r3, #6
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f043 0220 	orr.w	r2, r3, #32
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095fe:	b004      	add	sp, #16
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	ffbdffbf 	.word	0xffbdffbf
 8009608:	03ee0000 	.word	0x03ee0000

0800960c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d165      	bne.n	80096ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4a41      	ldr	r2, [pc, #260]	@ (8009728 <USB_SetTurnaroundTime+0x11c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d906      	bls.n	8009636 <USB_SetTurnaroundTime+0x2a>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4a40      	ldr	r2, [pc, #256]	@ (800972c <USB_SetTurnaroundTime+0x120>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d202      	bcs.n	8009636 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009630:	230f      	movs	r3, #15
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e062      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4a3c      	ldr	r2, [pc, #240]	@ (800972c <USB_SetTurnaroundTime+0x120>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d306      	bcc.n	800964c <USB_SetTurnaroundTime+0x40>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4a3b      	ldr	r2, [pc, #236]	@ (8009730 <USB_SetTurnaroundTime+0x124>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d202      	bcs.n	800964c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009646:	230e      	movs	r3, #14
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e057      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a38      	ldr	r2, [pc, #224]	@ (8009730 <USB_SetTurnaroundTime+0x124>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d306      	bcc.n	8009662 <USB_SetTurnaroundTime+0x56>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4a37      	ldr	r2, [pc, #220]	@ (8009734 <USB_SetTurnaroundTime+0x128>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d202      	bcs.n	8009662 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800965c:	230d      	movs	r3, #13
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e04c      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4a33      	ldr	r2, [pc, #204]	@ (8009734 <USB_SetTurnaroundTime+0x128>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d306      	bcc.n	8009678 <USB_SetTurnaroundTime+0x6c>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	4a32      	ldr	r2, [pc, #200]	@ (8009738 <USB_SetTurnaroundTime+0x12c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d802      	bhi.n	8009678 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009672:	230c      	movs	r3, #12
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	e041      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4a2f      	ldr	r2, [pc, #188]	@ (8009738 <USB_SetTurnaroundTime+0x12c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d906      	bls.n	800968e <USB_SetTurnaroundTime+0x82>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4a2e      	ldr	r2, [pc, #184]	@ (800973c <USB_SetTurnaroundTime+0x130>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d802      	bhi.n	800968e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009688:	230b      	movs	r3, #11
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	e036      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4a2a      	ldr	r2, [pc, #168]	@ (800973c <USB_SetTurnaroundTime+0x130>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d906      	bls.n	80096a4 <USB_SetTurnaroundTime+0x98>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4a29      	ldr	r2, [pc, #164]	@ (8009740 <USB_SetTurnaroundTime+0x134>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d802      	bhi.n	80096a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800969e:	230a      	movs	r3, #10
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e02b      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4a26      	ldr	r2, [pc, #152]	@ (8009740 <USB_SetTurnaroundTime+0x134>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d906      	bls.n	80096ba <USB_SetTurnaroundTime+0xae>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	4a25      	ldr	r2, [pc, #148]	@ (8009744 <USB_SetTurnaroundTime+0x138>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d202      	bcs.n	80096ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096b4:	2309      	movs	r3, #9
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	e020      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	4a21      	ldr	r2, [pc, #132]	@ (8009744 <USB_SetTurnaroundTime+0x138>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d306      	bcc.n	80096d0 <USB_SetTurnaroundTime+0xc4>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	4a20      	ldr	r2, [pc, #128]	@ (8009748 <USB_SetTurnaroundTime+0x13c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d802      	bhi.n	80096d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096ca:	2308      	movs	r3, #8
 80096cc:	617b      	str	r3, [r7, #20]
 80096ce:	e015      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4a1d      	ldr	r2, [pc, #116]	@ (8009748 <USB_SetTurnaroundTime+0x13c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d906      	bls.n	80096e6 <USB_SetTurnaroundTime+0xda>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4a1c      	ldr	r2, [pc, #112]	@ (800974c <USB_SetTurnaroundTime+0x140>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d202      	bcs.n	80096e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096e0:	2307      	movs	r3, #7
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e00a      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096e6:	2306      	movs	r3, #6
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e007      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d102      	bne.n	80096f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096f2:	2309      	movs	r3, #9
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	e001      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096f8:	2309      	movs	r3, #9
 80096fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	029b      	lsls	r3, r3, #10
 8009710:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009714:	431a      	orrs	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	371c      	adds	r7, #28
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	00d8acbf 	.word	0x00d8acbf
 800972c:	00e4e1c0 	.word	0x00e4e1c0
 8009730:	00f42400 	.word	0x00f42400
 8009734:	01067380 	.word	0x01067380
 8009738:	011a499f 	.word	0x011a499f
 800973c:	01312cff 	.word	0x01312cff
 8009740:	014ca43f 	.word	0x014ca43f
 8009744:	016e3600 	.word	0x016e3600
 8009748:	01a6ab1f 	.word	0x01a6ab1f
 800974c:	01e84800 	.word	0x01e84800

08009750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f043 0201 	orr.w	r2, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f023 0201 	bic.w	r2, r3, #1
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d115      	bne.n	80097e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097c2:	200a      	movs	r0, #10
 80097c4:	f7f8 fa14 	bl	8001bf0 <HAL_Delay>
      ms += 10U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	330a      	adds	r3, #10
 80097cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 f93b 	bl	800aa4a <USB_GetMode>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d01e      	beq.n	8009818 <USB_SetCurrentMode+0x84>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80097de:	d9f0      	bls.n	80097c2 <USB_SetCurrentMode+0x2e>
 80097e0:	e01a      	b.n	8009818 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d115      	bne.n	8009814 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097f4:	200a      	movs	r0, #10
 80097f6:	f7f8 f9fb 	bl	8001bf0 <HAL_Delay>
      ms += 10U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	330a      	adds	r3, #10
 80097fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 f922 	bl	800aa4a <USB_GetMode>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <USB_SetCurrentMode+0x84>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009810:	d9f0      	bls.n	80097f4 <USB_SetCurrentMode+0x60>
 8009812:	e001      	b.n	8009818 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e005      	b.n	8009824 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2bc8      	cmp	r3, #200	@ 0xc8
 800981c:	d101      	bne.n	8009822 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800982c:	b084      	sub	sp, #16
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800983a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009846:	2300      	movs	r3, #0
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	e009      	b.n	8009860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	3340      	adds	r3, #64	@ 0x40
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	2200      	movs	r2, #0
 8009858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3301      	adds	r3, #1
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2b0e      	cmp	r3, #14
 8009864:	d9f2      	bls.n	800984c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009866:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800986a:	2b00      	cmp	r3, #0
 800986c:	d11c      	bne.n	80098a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009886:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	e005      	b.n	80098b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098ba:	461a      	mov	r2, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d10d      	bne.n	80098e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098d0:	2100      	movs	r1, #0
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f968 	bl	8009ba8 <USB_SetDevSpeed>
 80098d8:	e008      	b.n	80098ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098da:	2101      	movs	r1, #1
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f963 	bl	8009ba8 <USB_SetDevSpeed>
 80098e2:	e003      	b.n	80098ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098e4:	2103      	movs	r1, #3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f95e 	bl	8009ba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098ec:	2110      	movs	r1, #16
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8fa 	bl	8009ae8 <USB_FlushTxFifo>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f924 	bl	8009b4c <USB_FlushRxFifo>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009914:	461a      	mov	r2, r3
 8009916:	2300      	movs	r3, #0
 8009918:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009920:	461a      	mov	r2, r3
 8009922:	2300      	movs	r3, #0
 8009924:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800992c:	461a      	mov	r2, r3
 800992e:	2300      	movs	r3, #0
 8009930:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e043      	b.n	80099c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800994a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800994e:	d118      	bne.n	8009982 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10a      	bne.n	800996c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009962:	461a      	mov	r2, r3
 8009964:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e013      	b.n	8009994 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009978:	461a      	mov	r2, r3
 800997a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	e008      	b.n	8009994 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998e:	461a      	mov	r2, r3
 8009990:	2300      	movs	r3, #0
 8009992:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	461a      	mov	r2, r3
 80099a2:	2300      	movs	r3, #0
 80099a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b2:	461a      	mov	r2, r3
 80099b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	3301      	adds	r3, #1
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099c4:	461a      	mov	r2, r3
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d3b5      	bcc.n	8009938 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e043      	b.n	8009a5a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099e8:	d118      	bne.n	8009a1c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fc:	461a      	mov	r2, r3
 80099fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	e013      	b.n	8009a2e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a12:	461a      	mov	r2, r3
 8009a14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	e008      	b.n	8009a2e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a28:	461a      	mov	r2, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	3301      	adds	r3, #1
 8009a58:	613b      	str	r3, [r7, #16]
 8009a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a5e:	461a      	mov	r2, r3
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d3b5      	bcc.n	80099d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d105      	bne.n	8009a9c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f043 0210 	orr.w	r2, r3, #16
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	699a      	ldr	r2, [r3, #24]
 8009aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae0 <USB_DevInit+0x2b4>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f043 0208 	orr.w	r2, r3, #8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009abc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d105      	bne.n	8009ad0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699a      	ldr	r2, [r3, #24]
 8009ac8:	4b06      	ldr	r3, [pc, #24]	@ (8009ae4 <USB_DevInit+0x2b8>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009adc:	b004      	add	sp, #16
 8009ade:	4770      	bx	lr
 8009ae0:	803c3800 	.word	0x803c3800
 8009ae4:	40000004 	.word	0x40000004

08009ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b02:	d901      	bls.n	8009b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e01b      	b.n	8009b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	daf2      	bge.n	8009af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	019b      	lsls	r3, r3, #6
 8009b18:	f043 0220 	orr.w	r2, r3, #32
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b2c:	d901      	bls.n	8009b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e006      	b.n	8009b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d0f0      	beq.n	8009b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b64:	d901      	bls.n	8009b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e018      	b.n	8009b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	daf2      	bge.n	8009b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2210      	movs	r2, #16
 8009b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b88:	d901      	bls.n	8009b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e006      	b.n	8009b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0310 	and.w	r3, r3, #16
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d0f0      	beq.n	8009b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b087      	sub	sp, #28
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f003 0306 	and.w	r3, r3, #6
 8009bf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d102      	bne.n	8009c00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	e00a      	b.n	8009c16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d002      	beq.n	8009c0c <USB_GetDevSpeed+0x32>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b06      	cmp	r3, #6
 8009c0a:	d102      	bne.n	8009c12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	75fb      	strb	r3, [r7, #23]
 8009c10:	e001      	b.n	8009c16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c12:	230f      	movs	r3, #15
 8009c14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	371c      	adds	r7, #28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d139      	bne.n	8009cb4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	2101      	movs	r1, #1
 8009c52:	fa01 f303 	lsl.w	r3, r1, r3
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d153      	bne.n	8009d20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	059b      	lsls	r3, r3, #22
 8009c9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	0159      	lsls	r1, r3, #5
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	440b      	add	r3, r1
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009caa:	4619      	mov	r1, r3
 8009cac:	4b20      	ldr	r3, [pc, #128]	@ (8009d30 <USB_ActivateEndpoint+0x10c>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	600b      	str	r3, [r1, #0]
 8009cb2:	e035      	b.n	8009d20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cba:	69da      	ldr	r2, [r3, #28]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 030f 	and.w	r3, r3, #15
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cca:	041b      	lsls	r3, r3, #16
 8009ccc:	68f9      	ldr	r1, [r7, #12]
 8009cce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d119      	bne.n	8009d20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	791b      	ldrb	r3, [r3, #4]
 8009d06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	0159      	lsls	r1, r3, #5
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	440b      	add	r3, r1
 8009d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4b05      	ldr	r3, [pc, #20]	@ (8009d30 <USB_ActivateEndpoint+0x10c>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	10008000 	.word	0x10008000

08009d34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d161      	bne.n	8009e14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d66:	d11f      	bne.n	8009da8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009da6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	2101      	movs	r1, #1
 8009dba:	fa01 f303 	lsl.w	r3, r1, r3
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	68f9      	ldr	r1, [r7, #12]
 8009dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dc8:	4013      	ands	r3, r2
 8009dca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd2:	69da      	ldr	r2, [r3, #28]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	2101      	movs	r1, #1
 8009dde:	fa01 f303 	lsl.w	r3, r1, r3
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	43db      	mvns	r3, r3
 8009de6:	68f9      	ldr	r1, [r7, #12]
 8009de8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dec:	4013      	ands	r3, r2
 8009dee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	0159      	lsls	r1, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	440b      	add	r3, r1
 8009e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4b35      	ldr	r3, [pc, #212]	@ (8009ee4 <USB_DeactivateEndpoint+0x1b0>)
 8009e0e:	4013      	ands	r3, r2
 8009e10:	600b      	str	r3, [r1, #0]
 8009e12:	e060      	b.n	8009ed6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e2a:	d11f      	bne.n	8009e6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e82:	041b      	lsls	r3, r3, #16
 8009e84:	43db      	mvns	r3, r3
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f003 030f 	and.w	r3, r3, #15
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea6:	041b      	lsls	r3, r3, #16
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	0159      	lsls	r1, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	440b      	add	r3, r1
 8009eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <USB_DeactivateEndpoint+0x1b4>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	ec337800 	.word	0xec337800
 8009ee8:	eff37800 	.word	0xeff37800

08009eec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	@ 0x28
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	f040 8181 	bne.w	800a210 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d132      	bne.n	8009f7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	0159      	lsls	r1, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	440b      	add	r3, r1
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f30:	4619      	mov	r1, r3
 8009f32:	4ba5      	ldr	r3, [pc, #660]	@ (800a1c8 <USB_EPStartXfer+0x2dc>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	69ba      	ldr	r2, [r7, #24]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f64:	691a      	ldr	r2, [r3, #16]
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	0159      	lsls	r1, r3, #5
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	440b      	add	r3, r1
 8009f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f72:	4619      	mov	r1, r3
 8009f74:	4b95      	ldr	r3, [pc, #596]	@ (800a1cc <USB_EPStartXfer+0x2e0>)
 8009f76:	4013      	ands	r3, r2
 8009f78:	610b      	str	r3, [r1, #16]
 8009f7a:	e092      	b.n	800a0a2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	0159      	lsls	r1, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f96:	4619      	mov	r1, r3
 8009f98:	4b8c      	ldr	r3, [pc, #560]	@ (800a1cc <USB_EPStartXfer+0x2e0>)
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	0159      	lsls	r1, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	440b      	add	r3, r1
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4b83      	ldr	r3, [pc, #524]	@ (800a1c8 <USB_EPStartXfer+0x2dc>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d11a      	bne.n	8009ffc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d903      	bls.n	8009fda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ff8:	6113      	str	r3, [r2, #16]
 8009ffa:	e01b      	b.n	800a034 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a008:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6919      	ldr	r1, [r3, #16]
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	440b      	add	r3, r1
 800a014:	1e59      	subs	r1, r3, #1
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a01e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a020:	4b6b      	ldr	r3, [pc, #428]	@ (800a1d0 <USB_EPStartXfer+0x2e4>)
 800a022:	400b      	ands	r3, r1
 800a024:	69b9      	ldr	r1, [r7, #24]
 800a026:	0148      	lsls	r0, r1, #5
 800a028:	69f9      	ldr	r1, [r7, #28]
 800a02a:	4401      	add	r1, r0
 800a02c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a030:	4313      	orrs	r3, r2
 800a032:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a04a:	69b9      	ldr	r1, [r7, #24]
 800a04c:	0148      	lsls	r0, r1, #5
 800a04e:	69f9      	ldr	r1, [r7, #28]
 800a050:	4401      	add	r1, r0
 800a052:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a056:	4313      	orrs	r3, r2
 800a058:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	791b      	ldrb	r3, [r3, #4]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d11f      	bne.n	800a0a2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	0151      	lsls	r1, r2, #5
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	440a      	add	r2, r1
 800a078:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a07c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a080:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d14b      	bne.n	800a140 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0bc:	461a      	mov	r2, r3
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	791b      	ldrb	r3, [r3, #4]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d128      	bne.n	800a11e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d110      	bne.n	800a0fe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	69fa      	ldr	r2, [r7, #28]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	e00f      	b.n	800a11e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	0151      	lsls	r1, r2, #5
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	440a      	add	r2, r1
 800a114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a11c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a138:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	e16a      	b.n	800a416 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	015a      	lsls	r2, r3, #5
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	4413      	add	r3, r2
 800a148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a15a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a15e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	791b      	ldrb	r3, [r3, #4]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d015      	beq.n	800a194 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 8152 	beq.w	800a416 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 030f 	and.w	r3, r3, #15
 800a182:	2101      	movs	r1, #1
 800a184:	fa01 f303 	lsl.w	r3, r1, r3
 800a188:	69f9      	ldr	r1, [r7, #28]
 800a18a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a18e:	4313      	orrs	r3, r2
 800a190:	634b      	str	r3, [r1, #52]	@ 0x34
 800a192:	e140      	b.n	800a416 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d117      	bne.n	800a1d4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	e016      	b.n	800a1f4 <USB_EPStartXfer+0x308>
 800a1c6:	bf00      	nop
 800a1c8:	e007ffff 	.word	0xe007ffff
 800a1cc:	fff80000 	.word	0xfff80000
 800a1d0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1f2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	68d9      	ldr	r1, [r3, #12]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	b298      	uxth	r0, r3
 800a202:	79fb      	ldrb	r3, [r7, #7]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	4603      	mov	r3, r0
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f9b9 	bl	800a580 <USB_WritePacket>
 800a20e:	e102      	b.n	800a416 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	0159      	lsls	r1, r3, #5
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	440b      	add	r3, r1
 800a226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22a:	4619      	mov	r1, r3
 800a22c:	4b7c      	ldr	r3, [pc, #496]	@ (800a420 <USB_EPStartXfer+0x534>)
 800a22e:	4013      	ands	r3, r2
 800a230:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	0159      	lsls	r1, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	440b      	add	r3, r1
 800a248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24c:	4619      	mov	r1, r3
 800a24e:	4b75      	ldr	r3, [pc, #468]	@ (800a424 <USB_EPStartXfer+0x538>)
 800a250:	4013      	ands	r3, r2
 800a252:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d12f      	bne.n	800a2ba <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a288:	69b9      	ldr	r1, [r7, #24]
 800a28a:	0148      	lsls	r0, r1, #5
 800a28c:	69f9      	ldr	r1, [r7, #28]
 800a28e:	4401      	add	r1, r0
 800a290:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a294:	4313      	orrs	r3, r2
 800a296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	0151      	lsls	r1, r2, #5
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	440a      	add	r2, r1
 800a2ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b6:	6113      	str	r3, [r2, #16]
 800a2b8:	e05f      	b.n	800a37a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d123      	bne.n	800a30a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ce:	691a      	ldr	r2, [r3, #16]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d8:	69b9      	ldr	r1, [r7, #24]
 800a2da:	0148      	lsls	r0, r1, #5
 800a2dc:	69f9      	ldr	r1, [r7, #28]
 800a2de:	4401      	add	r1, r0
 800a2e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	69fa      	ldr	r2, [r7, #28]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a302:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a306:	6113      	str	r3, [r2, #16]
 800a308:	e037      	b.n	800a37a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	691a      	ldr	r2, [r3, #16]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	4413      	add	r3, r2
 800a314:	1e5a      	subs	r2, r3, #1
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	8afa      	ldrh	r2, [r7, #22]
 800a326:	fb03 f202 	mul.w	r2, r3, r2
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	8afb      	ldrh	r3, [r7, #22]
 800a33e:	04d9      	lsls	r1, r3, #19
 800a340:	4b39      	ldr	r3, [pc, #228]	@ (800a428 <USB_EPStartXfer+0x53c>)
 800a342:	400b      	ands	r3, r1
 800a344:	69b9      	ldr	r1, [r7, #24]
 800a346:	0148      	lsls	r0, r1, #5
 800a348:	69f9      	ldr	r1, [r7, #28]
 800a34a:	4401      	add	r1, r0
 800a34c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a350:	4313      	orrs	r3, r2
 800a352:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a36a:	69b9      	ldr	r1, [r7, #24]
 800a36c:	0148      	lsls	r0, r1, #5
 800a36e:	69f9      	ldr	r1, [r7, #28]
 800a370:	4401      	add	r1, r0
 800a372:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a376:	4313      	orrs	r3, r2
 800a378:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d10d      	bne.n	800a39c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d009      	beq.n	800a39c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	68d9      	ldr	r1, [r3, #12]
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a398:	460a      	mov	r2, r1
 800a39a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	791b      	ldrb	r3, [r3, #4]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d128      	bne.n	800a3f6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d110      	bne.n	800a3d6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3d2:	6013      	str	r3, [r2, #0]
 800a3d4:	e00f      	b.n	800a3f6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	0151      	lsls	r1, r2, #5
 800a3e8:	69fa      	ldr	r2, [r7, #28]
 800a3ea:	440a      	add	r2, r1
 800a3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	0151      	lsls	r1, r2, #5
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	440a      	add	r2, r1
 800a40c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a410:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3720      	adds	r7, #32
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	fff80000 	.word	0xfff80000
 800a424:	e007ffff 	.word	0xe007ffff
 800a428:	1ff80000 	.word	0x1ff80000

0800a42c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d14a      	bne.n	800a4e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a45e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a462:	f040 8086 	bne.w	800a572 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a484:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a488:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	7812      	ldrb	r2, [r2, #0]
 800a49e:	0151      	lsls	r1, r2, #5
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	440a      	add	r2, r1
 800a4a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d902      	bls.n	800a4c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4c2:	e056      	b.n	800a572 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4dc:	d0e7      	beq.n	800a4ae <USB_EPStopXfer+0x82>
 800a4de:	e048      	b.n	800a572 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f8:	d13b      	bne.n	800a572 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	7812      	ldrb	r2, [r2, #0]
 800a50e:	0151      	lsls	r1, r2, #5
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	440a      	add	r2, r1
 800a514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a518:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a51c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	7812      	ldrb	r2, [r2, #0]
 800a532:	0151      	lsls	r1, r2, #5
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	440a      	add	r2, r1
 800a538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a53c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a540:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3301      	adds	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a54e:	4293      	cmp	r3, r2
 800a550:	d902      	bls.n	800a558 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	75fb      	strb	r3, [r7, #23]
          break;
 800a556:	e00c      	b.n	800a572 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a56c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a570:	d0e7      	beq.n	800a542 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a572:	7dfb      	ldrb	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	371c      	adds	r7, #28
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a580:	b480      	push	{r7}
 800a582:	b089      	sub	sp, #36	@ 0x24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4611      	mov	r1, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	460b      	mov	r3, r1
 800a590:	71fb      	strb	r3, [r7, #7]
 800a592:	4613      	mov	r3, r2
 800a594:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a59e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d123      	bne.n	800a5ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5a6:	88bb      	ldrh	r3, [r7, #4]
 800a5a8:	3303      	adds	r3, #3
 800a5aa:	089b      	lsrs	r3, r3, #2
 800a5ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	e018      	b.n	800a5e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	031a      	lsls	r2, r3, #12
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d3e2      	bcc.n	800a5b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3724      	adds	r7, #36	@ 0x24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b08b      	sub	sp, #44	@ 0x2c
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	089b      	lsrs	r3, r3, #2
 800a616:	b29b      	uxth	r3, r3
 800a618:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	f003 0303 	and.w	r3, r3, #3
 800a620:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a622:	2300      	movs	r3, #0
 800a624:	623b      	str	r3, [r7, #32]
 800a626:	e014      	b.n	800a652 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	601a      	str	r2, [r3, #0]
    pDest++;
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	3301      	adds	r3, #1
 800a638:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63c:	3301      	adds	r3, #1
 800a63e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	3301      	adds	r3, #1
 800a644:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	3301      	adds	r3, #1
 800a64a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	3301      	adds	r3, #1
 800a650:	623b      	str	r3, [r7, #32]
 800a652:	6a3a      	ldr	r2, [r7, #32]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	429a      	cmp	r2, r3
 800a658:	d3e6      	bcc.n	800a628 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a65a:	8bfb      	ldrh	r3, [r7, #30]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01e      	beq.n	800a69e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a66a:	461a      	mov	r2, r3
 800a66c:	f107 0310 	add.w	r3, r7, #16
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	fa22 f303 	lsr.w	r3, r2, r3
 800a680:	b2da      	uxtb	r2, r3
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	701a      	strb	r2, [r3, #0]
      i++;
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	3301      	adds	r3, #1
 800a68a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	3301      	adds	r3, #1
 800a690:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a692:	8bfb      	ldrh	r3, [r7, #30]
 800a694:	3b01      	subs	r3, #1
 800a696:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a698:	8bfb      	ldrh	r3, [r7, #30]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1ea      	bne.n	800a674 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	372c      	adds	r7, #44	@ 0x2c
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d12c      	bne.n	800a722 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	db12      	blt.n	800a700 <USB_EPSetStall+0x54>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00f      	beq.n	800a700 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	0151      	lsls	r1, r2, #5
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a71a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	e02b      	b.n	800a77a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	db12      	blt.n	800a75a <USB_EPSetStall+0xae>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	0151      	lsls	r1, r2, #5
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	440a      	add	r2, r1
 800a750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a754:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a758:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d128      	bne.n	800a7f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	0151      	lsls	r1, r2, #5
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	440a      	add	r2, r1
 800a7ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	791b      	ldrb	r3, [r3, #4]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d003      	beq.n	800a7d4 <USB_EPClearStall+0x4c>
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	791b      	ldrb	r3, [r3, #4]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d138      	bne.n	800a846 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	e027      	b.n	800a846 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a810:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a814:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d003      	beq.n	800a826 <USB_EPClearStall+0x9e>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	791b      	ldrb	r3, [r3, #4]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d10f      	bne.n	800a846 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a844:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a872:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a876:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	011b      	lsls	r3, r3, #4
 800a884:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a88e:	4313      	orrs	r3, r2
 800a890:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ce:	f023 0302 	bic.w	r3, r3, #2
 800a8d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a910:	f043 0302 	orr.w	r3, r3, #2
 800a914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4013      	ands	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a93c:	68fb      	ldr	r3, [r7, #12]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	4013      	ands	r3, r2
 800a96c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	0c1b      	lsrs	r3, r3, #16
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	b29b      	uxth	r3, r3
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b087      	sub	sp, #28
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	f003 030f 	and.w	r3, r3, #15
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1e:	01db      	lsls	r3, r3, #7
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	f003 0301 	and.w	r3, r3, #1
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
	...

0800aa68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa82:	4619      	mov	r1, r3
 800aa84:	4b09      	ldr	r3, [pc, #36]	@ (800aaac <USB_ActivateSetup+0x44>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	fffff800 	.word	0xfffff800

0800aab0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	460b      	mov	r3, r1
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	333c      	adds	r3, #60	@ 0x3c
 800aac6:	3304      	adds	r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	4a26      	ldr	r2, [pc, #152]	@ (800ab68 <USB_EP0_OutStart+0xb8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d90a      	bls.n	800aaea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aae4:	d101      	bne.n	800aaea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	e037      	b.n	800ab5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab18:	f043 0318 	orr.w	r3, r3, #24
 800ab1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab32:	7afb      	ldrb	r3, [r7, #11]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d10f      	bne.n	800ab58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ab56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	4f54300a 	.word	0x4f54300a

0800ab6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab84:	d901      	bls.n	800ab8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e01b      	b.n	800abc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	daf2      	bge.n	800ab78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	f043 0201 	orr.w	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abae:	d901      	bls.n	800abb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e006      	b.n	800abc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d0f0      	beq.n	800aba2 <USB_CoreReset+0x36>

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abdc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abe0:	f005 fb0e 	bl	8010200 <USBD_static_malloc>
 800abe4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d109      	bne.n	800ac00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32b0      	adds	r2, #176	@ 0xb0
 800abf6:	2100      	movs	r1, #0
 800abf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abfc:	2302      	movs	r3, #2
 800abfe:	e0d4      	b.n	800adaa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac04:	2100      	movs	r1, #0
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f007 fd33 	bl	8012672 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32b0      	adds	r2, #176	@ 0xb0
 800ac16:	68f9      	ldr	r1, [r7, #12]
 800ac18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	32b0      	adds	r2, #176	@ 0xb0
 800ac26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7c1b      	ldrb	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d138      	bne.n	800acaa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac38:	4b5e      	ldr	r3, [pc, #376]	@ (800adb4 <USBD_CDC_Init+0x1e4>)
 800ac3a:	7819      	ldrb	r1, [r3, #0]
 800ac3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac40:	2202      	movs	r2, #2
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f005 f9b9 	bl	800ffba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac48:	4b5a      	ldr	r3, [pc, #360]	@ (800adb4 <USBD_CDC_Init+0x1e4>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	f003 020f 	and.w	r2, r3, #15
 800ac50:	6879      	ldr	r1, [r7, #4]
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3324      	adds	r3, #36	@ 0x24
 800ac5e:	2201      	movs	r2, #1
 800ac60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac62:	4b55      	ldr	r3, [pc, #340]	@ (800adb8 <USBD_CDC_Init+0x1e8>)
 800ac64:	7819      	ldrb	r1, [r3, #0]
 800ac66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f005 f9a4 	bl	800ffba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac72:	4b51      	ldr	r3, [pc, #324]	@ (800adb8 <USBD_CDC_Init+0x1e8>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	f003 020f 	and.w	r2, r3, #15
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	440b      	add	r3, r1
 800ac86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac8e:	4b4b      	ldr	r3, [pc, #300]	@ (800adbc <USBD_CDC_Init+0x1ec>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	f003 020f 	and.w	r2, r3, #15
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	440b      	add	r3, r1
 800aca2:	3326      	adds	r3, #38	@ 0x26
 800aca4:	2210      	movs	r2, #16
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e035      	b.n	800ad16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acaa:	4b42      	ldr	r3, [pc, #264]	@ (800adb4 <USBD_CDC_Init+0x1e4>)
 800acac:	7819      	ldrb	r1, [r3, #0]
 800acae:	2340      	movs	r3, #64	@ 0x40
 800acb0:	2202      	movs	r2, #2
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f005 f981 	bl	800ffba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acb8:	4b3e      	ldr	r3, [pc, #248]	@ (800adb4 <USBD_CDC_Init+0x1e4>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	f003 020f 	and.w	r2, r3, #15
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	4613      	mov	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	440b      	add	r3, r1
 800accc:	3324      	adds	r3, #36	@ 0x24
 800acce:	2201      	movs	r2, #1
 800acd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acd2:	4b39      	ldr	r3, [pc, #228]	@ (800adb8 <USBD_CDC_Init+0x1e8>)
 800acd4:	7819      	ldrb	r1, [r3, #0]
 800acd6:	2340      	movs	r3, #64	@ 0x40
 800acd8:	2202      	movs	r2, #2
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f005 f96d 	bl	800ffba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ace0:	4b35      	ldr	r3, [pc, #212]	@ (800adb8 <USBD_CDC_Init+0x1e8>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 020f 	and.w	r2, r3, #15
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acf8:	2201      	movs	r2, #1
 800acfa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acfc:	4b2f      	ldr	r3, [pc, #188]	@ (800adbc <USBD_CDC_Init+0x1ec>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	f003 020f 	and.w	r2, r3, #15
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	440b      	add	r3, r1
 800ad10:	3326      	adds	r3, #38	@ 0x26
 800ad12:	2210      	movs	r2, #16
 800ad14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad16:	4b29      	ldr	r3, [pc, #164]	@ (800adbc <USBD_CDC_Init+0x1ec>)
 800ad18:	7819      	ldrb	r1, [r3, #0]
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f005 f94b 	bl	800ffba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad24:	4b25      	ldr	r3, [pc, #148]	@ (800adbc <USBD_CDC_Init+0x1ec>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 020f 	and.w	r2, r3, #15
 800ad2c:	6879      	ldr	r1, [r7, #4]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	440b      	add	r3, r1
 800ad38:	3324      	adds	r3, #36	@ 0x24
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	33b0      	adds	r3, #176	@ 0xb0
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad74:	2302      	movs	r3, #2
 800ad76:	e018      	b.n	800adaa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7c1b      	ldrb	r3, [r3, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad80:	4b0d      	ldr	r3, [pc, #52]	@ (800adb8 <USBD_CDC_Init+0x1e8>)
 800ad82:	7819      	ldrb	r1, [r3, #0]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f005 fa02 	bl	8010198 <USBD_LL_PrepareReceive>
 800ad94:	e008      	b.n	800ada8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad96:	4b08      	ldr	r3, [pc, #32]	@ (800adb8 <USBD_CDC_Init+0x1e8>)
 800ad98:	7819      	ldrb	r1, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ada0:	2340      	movs	r3, #64	@ 0x40
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f005 f9f8 	bl	8010198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	24000097 	.word	0x24000097
 800adb8:	24000098 	.word	0x24000098
 800adbc:	24000099 	.word	0x24000099

0800adc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adcc:	4b3a      	ldr	r3, [pc, #232]	@ (800aeb8 <USBD_CDC_DeInit+0xf8>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f005 f917 	bl	8010006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800add8:	4b37      	ldr	r3, [pc, #220]	@ (800aeb8 <USBD_CDC_DeInit+0xf8>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	f003 020f 	and.w	r2, r3, #15
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	3324      	adds	r3, #36	@ 0x24
 800adee:	2200      	movs	r2, #0
 800adf0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800adf2:	4b32      	ldr	r3, [pc, #200]	@ (800aebc <USBD_CDC_DeInit+0xfc>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f005 f904 	bl	8010006 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adfe:	4b2f      	ldr	r3, [pc, #188]	@ (800aebc <USBD_CDC_DeInit+0xfc>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f003 020f 	and.w	r2, r3, #15
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	440b      	add	r3, r1
 800ae12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae16:	2200      	movs	r2, #0
 800ae18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae1a:	4b29      	ldr	r3, [pc, #164]	@ (800aec0 <USBD_CDC_DeInit+0x100>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f005 f8f0 	bl	8010006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae26:	4b26      	ldr	r3, [pc, #152]	@ (800aec0 <USBD_CDC_DeInit+0x100>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f003 020f 	and.w	r2, r3, #15
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	440b      	add	r3, r1
 800ae3a:	3324      	adds	r3, #36	@ 0x24
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae40:	4b1f      	ldr	r3, [pc, #124]	@ (800aec0 <USBD_CDC_DeInit+0x100>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 020f 	and.w	r2, r3, #15
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	3326      	adds	r3, #38	@ 0x26
 800ae56:	2200      	movs	r2, #0
 800ae58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	32b0      	adds	r2, #176	@ 0xb0
 800ae64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01f      	beq.n	800aeac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	33b0      	adds	r3, #176	@ 0xb0
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	32b0      	adds	r2, #176	@ 0xb0
 800ae8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f005 f9c4 	bl	801021c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32b0      	adds	r2, #176	@ 0xb0
 800ae9e:	2100      	movs	r1, #0
 800aea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	24000097 	.word	0x24000097
 800aebc:	24000098 	.word	0x24000098
 800aec0:	24000099 	.word	0x24000099

0800aec4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	32b0      	adds	r2, #176	@ 0xb0
 800aed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aedc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e0bf      	b.n	800b074 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d050      	beq.n	800afa2 <USBD_CDC_Setup+0xde>
 800af00:	2b20      	cmp	r3, #32
 800af02:	f040 80af 	bne.w	800b064 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	88db      	ldrh	r3, [r3, #6]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d03a      	beq.n	800af84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	b25b      	sxtb	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	da1b      	bge.n	800af50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	33b0      	adds	r3, #176	@ 0xb0
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	88d2      	ldrh	r2, [r2, #6]
 800af34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	88db      	ldrh	r3, [r3, #6]
 800af3a:	2b07      	cmp	r3, #7
 800af3c:	bf28      	it	cs
 800af3e:	2307      	movcs	r3, #7
 800af40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	89fa      	ldrh	r2, [r7, #14]
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f001 fdbd 	bl	800cac8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af4e:	e090      	b.n	800b072 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	785a      	ldrb	r2, [r3, #1]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	88db      	ldrh	r3, [r3, #6]
 800af5e:	2b3f      	cmp	r3, #63	@ 0x3f
 800af60:	d803      	bhi.n	800af6a <USBD_CDC_Setup+0xa6>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	88db      	ldrh	r3, [r3, #6]
 800af66:	b2da      	uxtb	r2, r3
 800af68:	e000      	b.n	800af6c <USBD_CDC_Setup+0xa8>
 800af6a:	2240      	movs	r2, #64	@ 0x40
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af72:	6939      	ldr	r1, [r7, #16]
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af7a:	461a      	mov	r2, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 fdcf 	bl	800cb20 <USBD_CtlPrepareRx>
      break;
 800af82:	e076      	b.n	800b072 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	33b0      	adds	r3, #176	@ 0xb0
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	7850      	ldrb	r0, [r2, #1]
 800af9a:	2200      	movs	r2, #0
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	4798      	blx	r3
      break;
 800afa0:	e067      	b.n	800b072 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b0b      	cmp	r3, #11
 800afa8:	d851      	bhi.n	800b04e <USBD_CDC_Setup+0x18a>
 800afaa:	a201      	add	r2, pc, #4	@ (adr r2, 800afb0 <USBD_CDC_Setup+0xec>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800afe1 	.word	0x0800afe1
 800afb4:	0800b05d 	.word	0x0800b05d
 800afb8:	0800b04f 	.word	0x0800b04f
 800afbc:	0800b04f 	.word	0x0800b04f
 800afc0:	0800b04f 	.word	0x0800b04f
 800afc4:	0800b04f 	.word	0x0800b04f
 800afc8:	0800b04f 	.word	0x0800b04f
 800afcc:	0800b04f 	.word	0x0800b04f
 800afd0:	0800b04f 	.word	0x0800b04f
 800afd4:	0800b04f 	.word	0x0800b04f
 800afd8:	0800b00b 	.word	0x0800b00b
 800afdc:	0800b035 	.word	0x0800b035
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d107      	bne.n	800affc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afec:	f107 030a 	add.w	r3, r7, #10
 800aff0:	2202      	movs	r2, #2
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 fd67 	bl	800cac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800affa:	e032      	b.n	800b062 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f001 fce5 	bl	800c9ce <USBD_CtlError>
            ret = USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	75fb      	strb	r3, [r7, #23]
          break;
 800b008:	e02b      	b.n	800b062 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b03      	cmp	r3, #3
 800b014:	d107      	bne.n	800b026 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b016:	f107 030d 	add.w	r3, r7, #13
 800b01a:	2201      	movs	r2, #1
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 fd52 	bl	800cac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b024:	e01d      	b.n	800b062 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 fcd0 	bl	800c9ce <USBD_CtlError>
            ret = USBD_FAIL;
 800b02e:	2303      	movs	r3, #3
 800b030:	75fb      	strb	r3, [r7, #23]
          break;
 800b032:	e016      	b.n	800b062 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d00f      	beq.n	800b060 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 fcc3 	bl	800c9ce <USBD_CtlError>
            ret = USBD_FAIL;
 800b048:	2303      	movs	r3, #3
 800b04a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b04c:	e008      	b.n	800b060 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f001 fcbc 	bl	800c9ce <USBD_CtlError>
          ret = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	75fb      	strb	r3, [r7, #23]
          break;
 800b05a:	e002      	b.n	800b062 <USBD_CDC_Setup+0x19e>
          break;
 800b05c:	bf00      	nop
 800b05e:	e008      	b.n	800b072 <USBD_CDC_Setup+0x1ae>
          break;
 800b060:	bf00      	nop
      }
      break;
 800b062:	e006      	b.n	800b072 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f001 fcb1 	bl	800c9ce <USBD_CtlError>
      ret = USBD_FAIL;
 800b06c:	2303      	movs	r3, #3
 800b06e:	75fb      	strb	r3, [r7, #23]
      break;
 800b070:	bf00      	nop
  }

  return (uint8_t)ret;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b08e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	32b0      	adds	r2, #176	@ 0xb0
 800b09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e065      	b.n	800b172 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	32b0      	adds	r2, #176	@ 0xb0
 800b0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0b6:	78fb      	ldrb	r3, [r7, #3]
 800b0b8:	f003 020f 	and.w	r2, r3, #15
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	440b      	add	r3, r1
 800b0c8:	3318      	adds	r3, #24
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02f      	beq.n	800b130 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	f003 020f 	and.w	r2, r3, #15
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	440b      	add	r3, r1
 800b0e2:	3318      	adds	r3, #24
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	78fb      	ldrb	r3, [r7, #3]
 800b0e8:	f003 010f 	and.w	r1, r3, #15
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	440b      	add	r3, r1
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4403      	add	r3, r0
 800b0f8:	331c      	adds	r3, #28
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b100:	fb01 f303 	mul.w	r3, r1, r3
 800b104:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b106:	2b00      	cmp	r3, #0
 800b108:	d112      	bne.n	800b130 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	f003 020f 	and.w	r2, r3, #15
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	4613      	mov	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	440b      	add	r3, r1
 800b11c:	3318      	adds	r3, #24
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b122:	78f9      	ldrb	r1, [r7, #3]
 800b124:	2300      	movs	r3, #0
 800b126:	2200      	movs	r2, #0
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f005 f814 	bl	8010156 <USBD_LL_Transmit>
 800b12e:	e01f      	b.n	800b170 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	33b0      	adds	r3, #176	@ 0xb0
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d010      	beq.n	800b170 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	33b0      	adds	r3, #176	@ 0xb0
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b16c:	78fa      	ldrb	r2, [r7, #3]
 800b16e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b084      	sub	sp, #16
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	460b      	mov	r3, r1
 800b184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	32b0      	adds	r2, #176	@ 0xb0
 800b190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b194:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	32b0      	adds	r2, #176	@ 0xb0
 800b1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e01a      	b.n	800b1e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f005 f812 	bl	80101da <USBD_LL_GetRxDataSize>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	33b0      	adds	r3, #176	@ 0xb0
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b1dc:	4611      	mov	r1, r2
 800b1de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	32b0      	adds	r2, #176	@ 0xb0
 800b1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b200:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	e024      	b.n	800b256 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	33b0      	adds	r3, #176	@ 0xb0
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d019      	beq.n	800b254 <USBD_CDC_EP0_RxReady+0x6a>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b226:	2bff      	cmp	r3, #255	@ 0xff
 800b228:	d014      	beq.n	800b254 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	33b0      	adds	r3, #176	@ 0xb0
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b242:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b24a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	22ff      	movs	r2, #255	@ 0xff
 800b250:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b268:	2182      	movs	r1, #130	@ 0x82
 800b26a:	4818      	ldr	r0, [pc, #96]	@ (800b2cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b26c:	f000 fd4f 	bl	800bd0e <USBD_GetEpDesc>
 800b270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b272:	2101      	movs	r1, #1
 800b274:	4815      	ldr	r0, [pc, #84]	@ (800b2cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b276:	f000 fd4a 	bl	800bd0e <USBD_GetEpDesc>
 800b27a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b27c:	2181      	movs	r1, #129	@ 0x81
 800b27e:	4813      	ldr	r0, [pc, #76]	@ (800b2cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b280:	f000 fd45 	bl	800bd0e <USBD_GetEpDesc>
 800b284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2210      	movs	r2, #16
 800b290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d006      	beq.n	800b2a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2a0:	711a      	strb	r2, [r3, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2b4:	711a      	strb	r2, [r3, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2243      	movs	r2, #67	@ 0x43
 800b2be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2c0:	4b02      	ldr	r3, [pc, #8]	@ (800b2cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	24000054 	.word	0x24000054

0800b2d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2d8:	2182      	movs	r1, #130	@ 0x82
 800b2da:	4818      	ldr	r0, [pc, #96]	@ (800b33c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2dc:	f000 fd17 	bl	800bd0e <USBD_GetEpDesc>
 800b2e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	4815      	ldr	r0, [pc, #84]	@ (800b33c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2e6:	f000 fd12 	bl	800bd0e <USBD_GetEpDesc>
 800b2ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2ec:	2181      	movs	r1, #129	@ 0x81
 800b2ee:	4813      	ldr	r0, [pc, #76]	@ (800b33c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2f0:	f000 fd0d 	bl	800bd0e <USBD_GetEpDesc>
 800b2f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2210      	movs	r2, #16
 800b300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d006      	beq.n	800b316 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	2200      	movs	r2, #0
 800b30c:	711a      	strb	r2, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f042 0202 	orr.w	r2, r2, #2
 800b314:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	711a      	strb	r2, [r3, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f042 0202 	orr.w	r2, r2, #2
 800b328:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2243      	movs	r2, #67	@ 0x43
 800b32e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b330:	4b02      	ldr	r3, [pc, #8]	@ (800b33c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	24000054 	.word	0x24000054

0800b340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b348:	2182      	movs	r1, #130	@ 0x82
 800b34a:	4818      	ldr	r0, [pc, #96]	@ (800b3ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b34c:	f000 fcdf 	bl	800bd0e <USBD_GetEpDesc>
 800b350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b352:	2101      	movs	r1, #1
 800b354:	4815      	ldr	r0, [pc, #84]	@ (800b3ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b356:	f000 fcda 	bl	800bd0e <USBD_GetEpDesc>
 800b35a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b35c:	2181      	movs	r1, #129	@ 0x81
 800b35e:	4813      	ldr	r0, [pc, #76]	@ (800b3ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b360:	f000 fcd5 	bl	800bd0e <USBD_GetEpDesc>
 800b364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2210      	movs	r2, #16
 800b370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d006      	beq.n	800b386 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b380:	711a      	strb	r2, [r3, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d006      	beq.n	800b39a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b394:	711a      	strb	r2, [r3, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2243      	movs	r2, #67	@ 0x43
 800b39e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3a0:	4b02      	ldr	r3, [pc, #8]	@ (800b3ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3718      	adds	r7, #24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	24000054 	.word	0x24000054

0800b3b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	220a      	movs	r2, #10
 800b3bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3be:	4b03      	ldr	r3, [pc, #12]	@ (800b3cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	24000010 	.word	0x24000010

0800b3d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e009      	b.n	800b3f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	33b0      	adds	r3, #176	@ 0xb0
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b404:	b480      	push	{r7}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	32b0      	adds	r2, #176	@ 0xb0
 800b41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b426:	2303      	movs	r3, #3
 800b428:	e008      	b.n	800b43c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	371c      	adds	r7, #28
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	32b0      	adds	r2, #176	@ 0xb0
 800b45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b468:	2303      	movs	r3, #3
 800b46a:	e004      	b.n	800b476 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
	...

0800b484 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32b0      	adds	r2, #176	@ 0xb0
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b49c:	2301      	movs	r3, #1
 800b49e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e025      	b.n	800b4f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11f      	bne.n	800b4f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4bc:	4b10      	ldr	r3, [pc, #64]	@ (800b500 <USBD_CDC_TransmitPacket+0x7c>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	f003 020f 	and.w	r2, r3, #15
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4403      	add	r3, r0
 800b4d6:	3318      	adds	r3, #24
 800b4d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4da:	4b09      	ldr	r3, [pc, #36]	@ (800b500 <USBD_CDC_TransmitPacket+0x7c>)
 800b4dc:	7819      	ldrb	r1, [r3, #0]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f004 fe33 	bl	8010156 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	24000097 	.word	0x24000097

0800b504 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	32b0      	adds	r2, #176	@ 0xb0
 800b516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	32b0      	adds	r2, #176	@ 0xb0
 800b526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b52e:	2303      	movs	r3, #3
 800b530:	e018      	b.n	800b564 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7c1b      	ldrb	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b53a:	4b0c      	ldr	r3, [pc, #48]	@ (800b56c <USBD_CDC_ReceivePacket+0x68>)
 800b53c:	7819      	ldrb	r1, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f004 fe25 	bl	8010198 <USBD_LL_PrepareReceive>
 800b54e:	e008      	b.n	800b562 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b550:	4b06      	ldr	r3, [pc, #24]	@ (800b56c <USBD_CDC_ReceivePacket+0x68>)
 800b552:	7819      	ldrb	r1, [r3, #0]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b55a:	2340      	movs	r3, #64	@ 0x40
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f004 fe1b 	bl	8010198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	24000098 	.word	0x24000098

0800b570 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	e01f      	b.n	800b5c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	79fa      	ldrb	r2, [r7, #7]
 800b5ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f004 fc91 	bl	800fee4 <USBD_LL_Init>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e025      	b.n	800b634 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	32ae      	adds	r2, #174	@ 0xae
 800b5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00f      	beq.n	800b624 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	32ae      	adds	r2, #174	@ 0xae
 800b60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b614:	f107 020e 	add.w	r2, r7, #14
 800b618:	4610      	mov	r0, r2
 800b61a:	4798      	blx	r3
 800b61c:	4602      	mov	r2, r0
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f004 fc9d 	bl	800ff84 <USBD_LL_Start>
 800b64a:	4603      	mov	r3, r0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	78fa      	ldrb	r2, [r7, #3]
 800b68e:	4611      	mov	r1, r2
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	4798      	blx	r3
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	78fa      	ldrb	r2, [r7, #3]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f936 	bl	800c95a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b70a:	f003 031f 	and.w	r3, r3, #31
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d01a      	beq.n	800b748 <USBD_LL_SetupStage+0x72>
 800b712:	2b02      	cmp	r3, #2
 800b714:	d822      	bhi.n	800b75c <USBD_LL_SetupStage+0x86>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <USBD_LL_SetupStage+0x4a>
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d00a      	beq.n	800b734 <USBD_LL_SetupStage+0x5e>
 800b71e:	e01d      	b.n	800b75c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fb63 	bl	800bdf4 <USBD_StdDevReq>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
      break;
 800b732:	e020      	b.n	800b776 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fbcb 	bl	800bed8 <USBD_StdItfReq>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]
      break;
 800b746:	e016      	b.n	800b776 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fc2d 	bl	800bfb0 <USBD_StdEPReq>
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]
      break;
 800b75a:	e00c      	b.n	800b776 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b762:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b766:	b2db      	uxtb	r3, r3
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f004 fc6a 	bl	8010044 <USBD_LL_StallEP>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]
      break;
 800b774:	bf00      	nop
  }

  return ret;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	460b      	mov	r3, r1
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d16e      	bne.n	800b876 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b79e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	f040 8098 	bne.w	800b8dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d913      	bls.n	800b7e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	689a      	ldr	r2, [r3, #8]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	1ad2      	subs	r2, r2, r3
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	bf28      	it	cs
 800b7d2:	4613      	movcs	r3, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f001 f9be 	bl	800cb5a <USBD_CtlContinueRx>
 800b7de:	e07d      	b.n	800b8dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7e6:	f003 031f 	and.w	r3, r3, #31
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d014      	beq.n	800b818 <USBD_LL_DataOutStage+0x98>
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d81d      	bhi.n	800b82e <USBD_LL_DataOutStage+0xae>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <USBD_LL_DataOutStage+0x7c>
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d003      	beq.n	800b802 <USBD_LL_DataOutStage+0x82>
 800b7fa:	e018      	b.n	800b82e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	75bb      	strb	r3, [r7, #22]
            break;
 800b800:	e018      	b.n	800b834 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	4619      	mov	r1, r3
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fa64 	bl	800bcda <USBD_CoreFindIF>
 800b812:	4603      	mov	r3, r0
 800b814:	75bb      	strb	r3, [r7, #22]
            break;
 800b816:	e00d      	b.n	800b834 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4619      	mov	r1, r3
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 fa66 	bl	800bcf4 <USBD_CoreFindEP>
 800b828:	4603      	mov	r3, r0
 800b82a:	75bb      	strb	r3, [r7, #22]
            break;
 800b82c:	e002      	b.n	800b834 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	75bb      	strb	r3, [r7, #22]
            break;
 800b832:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b834:	7dbb      	ldrb	r3, [r7, #22]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d119      	bne.n	800b86e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b03      	cmp	r3, #3
 800b844:	d113      	bne.n	800b86e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b846:	7dba      	ldrb	r2, [r7, #22]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	32ae      	adds	r2, #174	@ 0xae
 800b84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00b      	beq.n	800b86e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b856:	7dba      	ldrb	r2, [r7, #22]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b85e:	7dba      	ldrb	r2, [r7, #22]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	32ae      	adds	r2, #174	@ 0xae
 800b864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f001 f984 	bl	800cb7c <USBD_CtlSendStatus>
 800b874:	e032      	b.n	800b8dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b876:	7afb      	ldrb	r3, [r7, #11]
 800b878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	4619      	mov	r1, r3
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 fa37 	bl	800bcf4 <USBD_CoreFindEP>
 800b886:	4603      	mov	r3, r0
 800b888:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b88a:	7dbb      	ldrb	r3, [r7, #22]
 800b88c:	2bff      	cmp	r3, #255	@ 0xff
 800b88e:	d025      	beq.n	800b8dc <USBD_LL_DataOutStage+0x15c>
 800b890:	7dbb      	ldrb	r3, [r7, #22]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d122      	bne.n	800b8dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d117      	bne.n	800b8d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8a2:	7dba      	ldrb	r2, [r7, #22]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	32ae      	adds	r2, #174	@ 0xae
 800b8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00f      	beq.n	800b8d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8b2:	7dba      	ldrb	r2, [r7, #22]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8ba:	7dba      	ldrb	r2, [r7, #22]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	32ae      	adds	r2, #174	@ 0xae
 800b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	7afa      	ldrb	r2, [r7, #11]
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	4798      	blx	r3
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	e000      	b.n	800b8de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b086      	sub	sp, #24
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	607a      	str	r2, [r7, #4]
 800b8f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8f4:	7afb      	ldrb	r3, [r7, #11]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d16f      	bne.n	800b9da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3314      	adds	r3, #20
 800b8fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b906:	2b02      	cmp	r3, #2
 800b908:	d15a      	bne.n	800b9c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	689a      	ldr	r2, [r3, #8]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d914      	bls.n	800b940 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	1ad2      	subs	r2, r2, r3
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	461a      	mov	r2, r3
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f001 f8e6 	bl	800cafe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b932:	2300      	movs	r3, #0
 800b934:	2200      	movs	r2, #0
 800b936:	2100      	movs	r1, #0
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f004 fc2d 	bl	8010198 <USBD_LL_PrepareReceive>
 800b93e:	e03f      	b.n	800b9c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	68da      	ldr	r2, [r3, #12]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d11c      	bne.n	800b986 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b954:	429a      	cmp	r2, r3
 800b956:	d316      	bcc.n	800b986 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b962:	429a      	cmp	r2, r3
 800b964:	d20f      	bcs.n	800b986 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b966:	2200      	movs	r2, #0
 800b968:	2100      	movs	r1, #0
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f001 f8c7 	bl	800cafe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b978:	2300      	movs	r3, #0
 800b97a:	2200      	movs	r2, #0
 800b97c:	2100      	movs	r1, #0
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f004 fc0a 	bl	8010198 <USBD_LL_PrepareReceive>
 800b984:	e01c      	b.n	800b9c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d10f      	bne.n	800b9b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d009      	beq.n	800b9b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9b2:	2180      	movs	r1, #128	@ 0x80
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f004 fb45 	bl	8010044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f001 f8f1 	bl	800cba2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d03a      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fe42 	bl	800b654 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9d8:	e032      	b.n	800ba40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9da:	7afb      	ldrb	r3, [r7, #11]
 800b9dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 f985 	bl	800bcf4 <USBD_CoreFindEP>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	2bff      	cmp	r3, #255	@ 0xff
 800b9f2:	d025      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d122      	bne.n	800ba40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d11c      	bne.n	800ba40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba06:	7dfa      	ldrb	r2, [r7, #23]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	32ae      	adds	r2, #174	@ 0xae
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d014      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba16:	7dfa      	ldrb	r2, [r7, #23]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba1e:	7dfa      	ldrb	r2, [r7, #23]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	32ae      	adds	r2, #174	@ 0xae
 800ba24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	7afa      	ldrb	r2, [r7, #11]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	4798      	blx	r3
 800ba32:	4603      	mov	r3, r0
 800ba34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba36:	7dbb      	ldrb	r3, [r7, #22]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba3c:	7dbb      	ldrb	r3, [r7, #22]
 800ba3e:	e000      	b.n	800ba42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d014      	beq.n	800bab0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00e      	beq.n	800bab0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	6852      	ldr	r2, [r2, #4]
 800ba9e:	b2d2      	uxtb	r2, r2
 800baa0:	4611      	mov	r1, r2
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800baac:	2303      	movs	r3, #3
 800baae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bab0:	2340      	movs	r3, #64	@ 0x40
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f004 fa7f 	bl	800ffba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2240      	movs	r2, #64	@ 0x40
 800bac8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bacc:	2340      	movs	r3, #64	@ 0x40
 800bace:	2200      	movs	r2, #0
 800bad0:	2180      	movs	r1, #128	@ 0x80
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f004 fa71 	bl	800ffba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2240      	movs	r2, #64	@ 0x40
 800bae2:	621a      	str	r2, [r3, #32]

  return ret;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d006      	beq.n	800bb30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2204      	movs	r2, #4
 800bb34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d106      	bne.n	800bb68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d110      	bne.n	800bbac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32ae      	adds	r2, #174	@ 0xae
 800bbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e01c      	b.n	800bc12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d115      	bne.n	800bc10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	32ae      	adds	r2, #174	@ 0xae
 800bbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	32ae      	adds	r2, #174	@ 0xae
 800bc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	32ae      	adds	r2, #174	@ 0xae
 800bc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e01c      	b.n	800bc76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d115      	bne.n	800bc74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	32ae      	adds	r2, #174	@ 0xae
 800bc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	32ae      	adds	r2, #174	@ 0xae
 800bc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	78fa      	ldrb	r2, [r7, #3]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00e      	beq.n	800bcd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	6852      	ldr	r2, [r2, #4]
 800bcbe:	b2d2      	uxtb	r2, r2
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	4798      	blx	r3
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bccc:	2303      	movs	r3, #3
 800bcce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bce6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b086      	sub	sp, #24
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	885b      	ldrh	r3, [r3, #2]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d91f      	bls.n	800bd74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd3a:	e013      	b.n	800bd64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd3c:	f107 030a 	add.w	r3, r7, #10
 800bd40:	4619      	mov	r1, r3
 800bd42:	6978      	ldr	r0, [r7, #20]
 800bd44:	f000 f81b 	bl	800bd7e <USBD_GetNextDesc>
 800bd48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d108      	bne.n	800bd64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	789b      	ldrb	r3, [r3, #2]
 800bd5a:	78fa      	ldrb	r2, [r7, #3]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d008      	beq.n	800bd72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd60:	2300      	movs	r3, #0
 800bd62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	885b      	ldrh	r3, [r3, #2]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	897b      	ldrh	r3, [r7, #10]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d8e5      	bhi.n	800bd3c <USBD_GetEpDesc+0x2e>
 800bd70:	e000      	b.n	800bd74 <USBD_GetEpDesc+0x66>
          break;
 800bd72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd74:	693b      	ldr	r3, [r7, #16]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b085      	sub	sp, #20
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	7812      	ldrb	r2, [r2, #0]
 800bd94:	4413      	add	r3, r2
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4413      	add	r3, r2
 800bda6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bda8:	68fb      	ldr	r3, [r7, #12]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b087      	sub	sp, #28
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdd4:	8a3b      	ldrh	r3, [r7, #16]
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	b21a      	sxth	r2, r3
 800bdda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	b21b      	sxth	r3, r3
 800bde2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bde4:	89fb      	ldrh	r3, [r7, #14]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be0a:	2b40      	cmp	r3, #64	@ 0x40
 800be0c:	d005      	beq.n	800be1a <USBD_StdDevReq+0x26>
 800be0e:	2b40      	cmp	r3, #64	@ 0x40
 800be10:	d857      	bhi.n	800bec2 <USBD_StdDevReq+0xce>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00f      	beq.n	800be36 <USBD_StdDevReq+0x42>
 800be16:	2b20      	cmp	r3, #32
 800be18:	d153      	bne.n	800bec2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	32ae      	adds	r2, #174	@ 0xae
 800be24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	4798      	blx	r3
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]
      break;
 800be34:	e04a      	b.n	800becc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	785b      	ldrb	r3, [r3, #1]
 800be3a:	2b09      	cmp	r3, #9
 800be3c:	d83b      	bhi.n	800beb6 <USBD_StdDevReq+0xc2>
 800be3e:	a201      	add	r2, pc, #4	@ (adr r2, 800be44 <USBD_StdDevReq+0x50>)
 800be40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be44:	0800be99 	.word	0x0800be99
 800be48:	0800bead 	.word	0x0800bead
 800be4c:	0800beb7 	.word	0x0800beb7
 800be50:	0800bea3 	.word	0x0800bea3
 800be54:	0800beb7 	.word	0x0800beb7
 800be58:	0800be77 	.word	0x0800be77
 800be5c:	0800be6d 	.word	0x0800be6d
 800be60:	0800beb7 	.word	0x0800beb7
 800be64:	0800be8f 	.word	0x0800be8f
 800be68:	0800be81 	.word	0x0800be81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fa3c 	bl	800c2ec <USBD_GetDescriptor>
          break;
 800be74:	e024      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fbcb 	bl	800c614 <USBD_SetAddress>
          break;
 800be7e:	e01f      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fc0a 	bl	800c69c <USBD_SetConfig>
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
          break;
 800be8c:	e018      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fcad 	bl	800c7f0 <USBD_GetConfig>
          break;
 800be96:	e013      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fcde 	bl	800c85c <USBD_GetStatus>
          break;
 800bea0:	e00e      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fd0d 	bl	800c8c4 <USBD_SetFeature>
          break;
 800beaa:	e009      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fd31 	bl	800c916 <USBD_ClrFeature>
          break;
 800beb4:	e004      	b.n	800bec0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fd88 	bl	800c9ce <USBD_CtlError>
          break;
 800bebe:	bf00      	nop
      }
      break;
 800bec0:	e004      	b.n	800becc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fd82 	bl	800c9ce <USBD_CtlError>
      break;
 800beca:	bf00      	nop
  }

  return ret;
 800becc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop

0800bed8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800beee:	2b40      	cmp	r3, #64	@ 0x40
 800bef0:	d005      	beq.n	800befe <USBD_StdItfReq+0x26>
 800bef2:	2b40      	cmp	r3, #64	@ 0x40
 800bef4:	d852      	bhi.n	800bf9c <USBD_StdItfReq+0xc4>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <USBD_StdItfReq+0x26>
 800befa:	2b20      	cmp	r3, #32
 800befc:	d14e      	bne.n	800bf9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	3b01      	subs	r3, #1
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d840      	bhi.n	800bf8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	889b      	ldrh	r3, [r3, #4]
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d836      	bhi.n	800bf84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	889b      	ldrh	r3, [r3, #4]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff fedb 	bl	800bcda <USBD_CoreFindIF>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	2bff      	cmp	r3, #255	@ 0xff
 800bf2c:	d01d      	beq.n	800bf6a <USBD_StdItfReq+0x92>
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d11a      	bne.n	800bf6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf34:	7bba      	ldrb	r2, [r7, #14]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	32ae      	adds	r2, #174	@ 0xae
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00f      	beq.n	800bf64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf44:	7bba      	ldrb	r2, [r7, #14]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf4c:	7bba      	ldrb	r2, [r7, #14]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	32ae      	adds	r2, #174	@ 0xae
 800bf52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	4798      	blx	r3
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf62:	e004      	b.n	800bf6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf68:	e001      	b.n	800bf6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	88db      	ldrh	r3, [r3, #6]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d110      	bne.n	800bf98 <USBD_StdItfReq+0xc0>
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10d      	bne.n	800bf98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fdfd 	bl	800cb7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf82:	e009      	b.n	800bf98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fd21 	bl	800c9ce <USBD_CtlError>
          break;
 800bf8c:	e004      	b.n	800bf98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fd1c 	bl	800c9ce <USBD_CtlError>
          break;
 800bf96:	e000      	b.n	800bf9a <USBD_StdItfReq+0xc2>
          break;
 800bf98:	bf00      	nop
      }
      break;
 800bf9a:	e004      	b.n	800bfa6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fd15 	bl	800c9ce <USBD_CtlError>
      break;
 800bfa4:	bf00      	nop
  }

  return ret;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	889b      	ldrh	r3, [r3, #4]
 800bfc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfcc:	2b40      	cmp	r3, #64	@ 0x40
 800bfce:	d007      	beq.n	800bfe0 <USBD_StdEPReq+0x30>
 800bfd0:	2b40      	cmp	r3, #64	@ 0x40
 800bfd2:	f200 817f 	bhi.w	800c2d4 <USBD_StdEPReq+0x324>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d02a      	beq.n	800c030 <USBD_StdEPReq+0x80>
 800bfda:	2b20      	cmp	r3, #32
 800bfdc:	f040 817a 	bne.w	800c2d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff fe85 	bl	800bcf4 <USBD_CoreFindEP>
 800bfea:	4603      	mov	r3, r0
 800bfec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfee:	7b7b      	ldrb	r3, [r7, #13]
 800bff0:	2bff      	cmp	r3, #255	@ 0xff
 800bff2:	f000 8174 	beq.w	800c2de <USBD_StdEPReq+0x32e>
 800bff6:	7b7b      	ldrb	r3, [r7, #13]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f040 8170 	bne.w	800c2de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bffe:	7b7a      	ldrb	r2, [r7, #13]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c006:	7b7a      	ldrb	r2, [r7, #13]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	32ae      	adds	r2, #174	@ 0xae
 800c00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 8163 	beq.w	800c2de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c018:	7b7a      	ldrb	r2, [r7, #13]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	32ae      	adds	r2, #174	@ 0xae
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	4798      	blx	r3
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c02e:	e156      	b.n	800c2de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	785b      	ldrb	r3, [r3, #1]
 800c034:	2b03      	cmp	r3, #3
 800c036:	d008      	beq.n	800c04a <USBD_StdEPReq+0x9a>
 800c038:	2b03      	cmp	r3, #3
 800c03a:	f300 8145 	bgt.w	800c2c8 <USBD_StdEPReq+0x318>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 809b 	beq.w	800c17a <USBD_StdEPReq+0x1ca>
 800c044:	2b01      	cmp	r3, #1
 800c046:	d03c      	beq.n	800c0c2 <USBD_StdEPReq+0x112>
 800c048:	e13e      	b.n	800c2c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b02      	cmp	r3, #2
 800c054:	d002      	beq.n	800c05c <USBD_StdEPReq+0xac>
 800c056:	2b03      	cmp	r3, #3
 800c058:	d016      	beq.n	800c088 <USBD_StdEPReq+0xd8>
 800c05a:	e02c      	b.n	800c0b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00d      	beq.n	800c07e <USBD_StdEPReq+0xce>
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b80      	cmp	r3, #128	@ 0x80
 800c066:	d00a      	beq.n	800c07e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f003 ffe9 	bl	8010044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c072:	2180      	movs	r1, #128	@ 0x80
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f003 ffe5 	bl	8010044 <USBD_LL_StallEP>
 800c07a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c07c:	e020      	b.n	800c0c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fca4 	bl	800c9ce <USBD_CtlError>
              break;
 800c086:	e01b      	b.n	800c0c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	885b      	ldrh	r3, [r3, #2]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10e      	bne.n	800c0ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00b      	beq.n	800c0ae <USBD_StdEPReq+0xfe>
 800c096:	7bbb      	ldrb	r3, [r7, #14]
 800c098:	2b80      	cmp	r3, #128	@ 0x80
 800c09a:	d008      	beq.n	800c0ae <USBD_StdEPReq+0xfe>
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	88db      	ldrh	r3, [r3, #6]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d104      	bne.n	800c0ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f003 ffcb 	bl	8010044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fd64 	bl	800cb7c <USBD_CtlSendStatus>

              break;
 800c0b4:	e004      	b.n	800c0c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fc88 	bl	800c9ce <USBD_CtlError>
              break;
 800c0be:	bf00      	nop
          }
          break;
 800c0c0:	e107      	b.n	800c2d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d002      	beq.n	800c0d4 <USBD_StdEPReq+0x124>
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d016      	beq.n	800c100 <USBD_StdEPReq+0x150>
 800c0d2:	e04b      	b.n	800c16c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00d      	beq.n	800c0f6 <USBD_StdEPReq+0x146>
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	2b80      	cmp	r3, #128	@ 0x80
 800c0de:	d00a      	beq.n	800c0f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f003 ffad 	bl	8010044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ea:	2180      	movs	r1, #128	@ 0x80
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f003 ffa9 	bl	8010044 <USBD_LL_StallEP>
 800c0f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0f4:	e040      	b.n	800c178 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fc68 	bl	800c9ce <USBD_CtlError>
              break;
 800c0fe:	e03b      	b.n	800c178 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	885b      	ldrh	r3, [r3, #2]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d136      	bne.n	800c176 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d004      	beq.n	800c11c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f003 ffb3 	bl	8010082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fd2d 	bl	800cb7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fde4 	bl	800bcf4 <USBD_CoreFindEP>
 800c12c:	4603      	mov	r3, r0
 800c12e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c130:	7b7b      	ldrb	r3, [r7, #13]
 800c132:	2bff      	cmp	r3, #255	@ 0xff
 800c134:	d01f      	beq.n	800c176 <USBD_StdEPReq+0x1c6>
 800c136:	7b7b      	ldrb	r3, [r7, #13]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11c      	bne.n	800c176 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c13c:	7b7a      	ldrb	r2, [r7, #13]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c144:	7b7a      	ldrb	r2, [r7, #13]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	32ae      	adds	r2, #174	@ 0xae
 800c14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d010      	beq.n	800c176 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c154:	7b7a      	ldrb	r2, [r7, #13]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	32ae      	adds	r2, #174	@ 0xae
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	4798      	blx	r3
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c16a:	e004      	b.n	800c176 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fc2d 	bl	800c9ce <USBD_CtlError>
              break;
 800c174:	e000      	b.n	800c178 <USBD_StdEPReq+0x1c8>
              break;
 800c176:	bf00      	nop
          }
          break;
 800c178:	e0ab      	b.n	800c2d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b02      	cmp	r3, #2
 800c184:	d002      	beq.n	800c18c <USBD_StdEPReq+0x1dc>
 800c186:	2b03      	cmp	r3, #3
 800c188:	d032      	beq.n	800c1f0 <USBD_StdEPReq+0x240>
 800c18a:	e097      	b.n	800c2bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d007      	beq.n	800c1a2 <USBD_StdEPReq+0x1f2>
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b80      	cmp	r3, #128	@ 0x80
 800c196:	d004      	beq.n	800c1a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fc17 	bl	800c9ce <USBD_CtlError>
                break;
 800c1a0:	e091      	b.n	800c2c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da0b      	bge.n	800c1c2 <USBD_StdEPReq+0x212>
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	3310      	adds	r3, #16
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	3304      	adds	r3, #4
 800c1c0:	e00b      	b.n	800c1da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	3304      	adds	r3, #4
 800c1da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fc6d 	bl	800cac8 <USBD_CtlSendData>
              break;
 800c1ee:	e06a      	b.n	800c2c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da11      	bge.n	800c21c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	f003 020f 	and.w	r2, r3, #15
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	4613      	mov	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	440b      	add	r3, r1
 800c20a:	3324      	adds	r3, #36	@ 0x24
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d117      	bne.n	800c242 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fbda 	bl	800c9ce <USBD_CtlError>
                  break;
 800c21a:	e054      	b.n	800c2c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	f003 020f 	and.w	r2, r3, #15
 800c222:	6879      	ldr	r1, [r7, #4]
 800c224:	4613      	mov	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	440b      	add	r3, r1
 800c22e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fbc7 	bl	800c9ce <USBD_CtlError>
                  break;
 800c240:	e041      	b.n	800c2c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c242:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c246:	2b00      	cmp	r3, #0
 800c248:	da0b      	bge.n	800c262 <USBD_StdEPReq+0x2b2>
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	3310      	adds	r3, #16
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4413      	add	r3, r2
 800c25e:	3304      	adds	r3, #4
 800c260:	e00b      	b.n	800c27a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	4413      	add	r3, r2
 800c278:	3304      	adds	r3, #4
 800c27a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <USBD_StdEPReq+0x2d8>
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	2b80      	cmp	r3, #128	@ 0x80
 800c286:	d103      	bne.n	800c290 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e00e      	b.n	800c2ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f003 ff13 	bl	80100c0 <USBD_LL_IsStallEP>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	e002      	b.n	800c2ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fc07 	bl	800cac8 <USBD_CtlSendData>
              break;
 800c2ba:	e004      	b.n	800c2c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fb85 	bl	800c9ce <USBD_CtlError>
              break;
 800c2c4:	bf00      	nop
          }
          break;
 800c2c6:	e004      	b.n	800c2d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fb7f 	bl	800c9ce <USBD_CtlError>
          break;
 800c2d0:	bf00      	nop
      }
      break;
 800c2d2:	e005      	b.n	800c2e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fb79 	bl	800c9ce <USBD_CtlError>
      break;
 800c2dc:	e000      	b.n	800c2e0 <USBD_StdEPReq+0x330>
      break;
 800c2de:	bf00      	nop
  }

  return ret;
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
	...

0800c2ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2fe:	2300      	movs	r3, #0
 800c300:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	885b      	ldrh	r3, [r3, #2]
 800c306:	0a1b      	lsrs	r3, r3, #8
 800c308:	b29b      	uxth	r3, r3
 800c30a:	3b01      	subs	r3, #1
 800c30c:	2b0e      	cmp	r3, #14
 800c30e:	f200 8152 	bhi.w	800c5b6 <USBD_GetDescriptor+0x2ca>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <USBD_GetDescriptor+0x2c>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c389 	.word	0x0800c389
 800c31c:	0800c3a1 	.word	0x0800c3a1
 800c320:	0800c3e1 	.word	0x0800c3e1
 800c324:	0800c5b7 	.word	0x0800c5b7
 800c328:	0800c5b7 	.word	0x0800c5b7
 800c32c:	0800c557 	.word	0x0800c557
 800c330:	0800c583 	.word	0x0800c583
 800c334:	0800c5b7 	.word	0x0800c5b7
 800c338:	0800c5b7 	.word	0x0800c5b7
 800c33c:	0800c5b7 	.word	0x0800c5b7
 800c340:	0800c5b7 	.word	0x0800c5b7
 800c344:	0800c5b7 	.word	0x0800c5b7
 800c348:	0800c5b7 	.word	0x0800c5b7
 800c34c:	0800c5b7 	.word	0x0800c5b7
 800c350:	0800c355 	.word	0x0800c355
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c366:	69db      	ldr	r3, [r3, #28]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	7c12      	ldrb	r2, [r2, #16]
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c376:	e126      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fb27 	bl	800c9ce <USBD_CtlError>
        err++;
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	3301      	adds	r3, #1
 800c384:	72fb      	strb	r3, [r7, #11]
      break;
 800c386:	e11e      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
      break;
 800c39e:	e112      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	7c1b      	ldrb	r3, [r3, #16]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10d      	bne.n	800c3c4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b0:	f107 0208 	add.w	r2, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	2202      	movs	r2, #2
 800c3c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3c2:	e100      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3cc:	f107 0208 	add.w	r2, r7, #8
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	2202      	movs	r2, #2
 800c3dc:	701a      	strb	r2, [r3, #0]
      break;
 800c3de:	e0f2      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	885b      	ldrh	r3, [r3, #2]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b05      	cmp	r3, #5
 800c3e8:	f200 80ac 	bhi.w	800c544 <USBD_GetDescriptor+0x258>
 800c3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f4 <USBD_GetDescriptor+0x108>)
 800c3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f2:	bf00      	nop
 800c3f4:	0800c40d 	.word	0x0800c40d
 800c3f8:	0800c441 	.word	0x0800c441
 800c3fc:	0800c475 	.word	0x0800c475
 800c400:	0800c4a9 	.word	0x0800c4a9
 800c404:	0800c4dd 	.word	0x0800c4dd
 800c408:	0800c511 	.word	0x0800c511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00b      	beq.n	800c430 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7c12      	ldrb	r2, [r2, #16]
 800c424:	f107 0108 	add.w	r1, r7, #8
 800c428:	4610      	mov	r0, r2
 800c42a:	4798      	blx	r3
 800c42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42e:	e091      	b.n	800c554 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 facb 	bl	800c9ce <USBD_CtlError>
            err++;
 800c438:	7afb      	ldrb	r3, [r7, #11]
 800c43a:	3301      	adds	r3, #1
 800c43c:	72fb      	strb	r3, [r7, #11]
          break;
 800c43e:	e089      	b.n	800c554 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c462:	e077      	b.n	800c554 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fab1 	bl	800c9ce <USBD_CtlError>
            err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
          break;
 800c472:	e06f      	b.n	800c554 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c496:	e05d      	b.n	800c554 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fa97 	bl	800c9ce <USBD_CtlError>
            err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a6:	e055      	b.n	800c554 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ca:	e043      	b.n	800c554 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa7d 	bl	800c9ce <USBD_CtlError>
            err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4da:	e03b      	b.n	800c554 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fe:	e029      	b.n	800c554 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa63 	bl	800c9ce <USBD_CtlError>
            err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
          break;
 800c50e:	e021      	b.n	800c554 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c532:	e00f      	b.n	800c554 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa49 	bl	800c9ce <USBD_CtlError>
            err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
          break;
 800c542:	e007      	b.n	800c554 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fa41 	bl	800c9ce <USBD_CtlError>
          err++;
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	3301      	adds	r3, #1
 800c550:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c552:	bf00      	nop
      }
      break;
 800c554:	e037      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7c1b      	ldrb	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d109      	bne.n	800c572 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c570:	e029      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fa2a 	bl	800c9ce <USBD_CtlError>
        err++;
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	3301      	adds	r3, #1
 800c57e:	72fb      	strb	r3, [r7, #11]
      break;
 800c580:	e021      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	7c1b      	ldrb	r3, [r3, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10d      	bne.n	800c5a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c592:	f107 0208 	add.w	r2, r7, #8
 800c596:	4610      	mov	r0, r2
 800c598:	4798      	blx	r3
 800c59a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a4:	e00f      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fa10 	bl	800c9ce <USBD_CtlError>
        err++;
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b4:	e007      	b.n	800c5c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fa08 	bl	800c9ce <USBD_CtlError>
      err++;
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c5c4:	bf00      	nop
  }

  if (err != 0U)
 800c5c6:	7afb      	ldrb	r3, [r7, #11]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d11e      	bne.n	800c60a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	88db      	ldrh	r3, [r3, #6]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d016      	beq.n	800c602 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5d4:	893b      	ldrh	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00e      	beq.n	800c5f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	88da      	ldrh	r2, [r3, #6]
 800c5de:	893b      	ldrh	r3, [r7, #8]
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	bf28      	it	cs
 800c5e4:	4613      	movcs	r3, r2
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ea:	893b      	ldrh	r3, [r7, #8]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fa69 	bl	800cac8 <USBD_CtlSendData>
 800c5f6:	e009      	b.n	800c60c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f9e7 	bl	800c9ce <USBD_CtlError>
 800c600:	e004      	b.n	800c60c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 faba 	bl	800cb7c <USBD_CtlSendStatus>
 800c608:	e000      	b.n	800c60c <USBD_GetDescriptor+0x320>
    return;
 800c60a:	bf00      	nop
  }
}
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop

0800c614 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	889b      	ldrh	r3, [r3, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d131      	bne.n	800c68a <USBD_SetAddress+0x76>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	88db      	ldrh	r3, [r3, #6]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d12d      	bne.n	800c68a <USBD_SetAddress+0x76>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	885b      	ldrh	r3, [r3, #2]
 800c632:	2b7f      	cmp	r3, #127	@ 0x7f
 800c634:	d829      	bhi.n	800c68a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	885b      	ldrh	r3, [r3, #2]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d104      	bne.n	800c658 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f9bc 	bl	800c9ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c656:	e01d      	b.n	800c694 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7bfa      	ldrb	r2, [r7, #15]
 800c65c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f003 fd57 	bl	8010118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fa86 	bl	800cb7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67e:	e009      	b.n	800c694 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c688:	e004      	b.n	800c694 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f99e 	bl	800c9ce <USBD_CtlError>
  }
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	885b      	ldrh	r3, [r3, #2]
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	4b4e      	ldr	r3, [pc, #312]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6b4:	4b4d      	ldr	r3, [pc, #308]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d905      	bls.n	800c6c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f985 	bl	800c9ce <USBD_CtlError>
    return USBD_FAIL;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e08c      	b.n	800c7e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d002      	beq.n	800c6da <USBD_SetConfig+0x3e>
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d029      	beq.n	800c72c <USBD_SetConfig+0x90>
 800c6d8:	e075      	b.n	800c7c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6da:	4b44      	ldr	r3, [pc, #272]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d020      	beq.n	800c724 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6e2:	4b42      	ldr	r3, [pc, #264]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6ec:	4b3f      	ldr	r3, [pc, #252]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7fe ffb9 	bl	800b66a <USBD_SetClassConfig>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f962 	bl	800c9ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2202      	movs	r2, #2
 800c70e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c712:	e065      	b.n	800c7e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fa31 	bl	800cb7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2203      	movs	r2, #3
 800c71e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c722:	e05d      	b.n	800c7e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fa29 	bl	800cb7c <USBD_CtlSendStatus>
      break;
 800c72a:	e059      	b.n	800c7e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c72c:	4b2f      	ldr	r3, [pc, #188]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d112      	bne.n	800c75a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c73c:	4b2b      	ldr	r3, [pc, #172]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	461a      	mov	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c746:	4b29      	ldr	r3, [pc, #164]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7fe ffa8 	bl	800b6a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fa12 	bl	800cb7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c758:	e042      	b.n	800c7e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c75a:	4b24      	ldr	r3, [pc, #144]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	429a      	cmp	r2, r3
 800c766:	d02a      	beq.n	800c7be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7fe ff96 	bl	800b6a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c776:	4b1d      	ldr	r3, [pc, #116]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c780:	4b1a      	ldr	r3, [pc, #104]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7fe ff6f 	bl	800b66a <USBD_SetClassConfig>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00f      	beq.n	800c7b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f918 	bl	800c9ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7fe ff7b 	bl	800b6a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7b4:	e014      	b.n	800c7e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f9e0 	bl	800cb7c <USBD_CtlSendStatus>
      break;
 800c7bc:	e010      	b.n	800c7e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f9dc 	bl	800cb7c <USBD_CtlSendStatus>
      break;
 800c7c4:	e00c      	b.n	800c7e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f900 	bl	800c9ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7ce:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7fe ff64 	bl	800b6a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7de:	bf00      	nop
  }

  return ret;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	240005c8 	.word	0x240005c8

0800c7f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	88db      	ldrh	r3, [r3, #6]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d004      	beq.n	800c80c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f8e2 	bl	800c9ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c80a:	e023      	b.n	800c854 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b02      	cmp	r3, #2
 800c816:	dc02      	bgt.n	800c81e <USBD_GetConfig+0x2e>
 800c818:	2b00      	cmp	r3, #0
 800c81a:	dc03      	bgt.n	800c824 <USBD_GetConfig+0x34>
 800c81c:	e015      	b.n	800c84a <USBD_GetConfig+0x5a>
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d00b      	beq.n	800c83a <USBD_GetConfig+0x4a>
 800c822:	e012      	b.n	800c84a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3308      	adds	r3, #8
 800c82e:	2201      	movs	r2, #1
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f948 	bl	800cac8 <USBD_CtlSendData>
        break;
 800c838:	e00c      	b.n	800c854 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	3304      	adds	r3, #4
 800c83e:	2201      	movs	r2, #1
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f940 	bl	800cac8 <USBD_CtlSendData>
        break;
 800c848:	e004      	b.n	800c854 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f8be 	bl	800c9ce <USBD_CtlError>
        break;
 800c852:	bf00      	nop
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	3b01      	subs	r3, #1
 800c870:	2b02      	cmp	r3, #2
 800c872:	d81e      	bhi.n	800c8b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	88db      	ldrh	r3, [r3, #6]
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d004      	beq.n	800c886 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f8a5 	bl	800c9ce <USBD_CtlError>
        break;
 800c884:	e01a      	b.n	800c8bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	f043 0202 	orr.w	r2, r3, #2
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f90c 	bl	800cac8 <USBD_CtlSendData>
      break;
 800c8b0:	e004      	b.n	800c8bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f88a 	bl	800c9ce <USBD_CtlError>
      break;
 800c8ba:	bf00      	nop
  }
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d107      	bne.n	800c8e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f94c 	bl	800cb7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8e4:	e013      	b.n	800c90e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	885b      	ldrh	r3, [r3, #2]
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d10b      	bne.n	800c906 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	889b      	ldrh	r3, [r3, #4]
 800c8f2:	0a1b      	lsrs	r3, r3, #8
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f93c 	bl	800cb7c <USBD_CtlSendStatus>
}
 800c904:	e003      	b.n	800c90e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f860 	bl	800c9ce <USBD_CtlError>
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c926:	b2db      	uxtb	r3, r3
 800c928:	3b01      	subs	r3, #1
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d80b      	bhi.n	800c946 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	885b      	ldrh	r3, [r3, #2]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d10c      	bne.n	800c950 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f91c 	bl	800cb7c <USBD_CtlSendStatus>
      }
      break;
 800c944:	e004      	b.n	800c950 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f840 	bl	800c9ce <USBD_CtlError>
      break;
 800c94e:	e000      	b.n	800c952 <USBD_ClrFeature+0x3c>
      break;
 800c950:	bf00      	nop
  }
}
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	781a      	ldrb	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3301      	adds	r3, #1
 800c982:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7ff fa16 	bl	800bdb6 <SWAPBYTE>
 800c98a:	4603      	mov	r3, r0
 800c98c:	461a      	mov	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3301      	adds	r3, #1
 800c996:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3301      	adds	r3, #1
 800c99c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff fa09 	bl	800bdb6 <SWAPBYTE>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff f9fc 	bl	800bdb6 <SWAPBYTE>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	80da      	strh	r2, [r3, #6]
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9d8:	2180      	movs	r1, #128	@ 0x80
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f003 fb32 	bl	8010044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f003 fb2e 	bl	8010044 <USBD_LL_StallEP>
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d042      	beq.n	800ca8c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f000 f842 	bl	800ca94 <USBD_GetLen>
 800ca10:	4603      	mov	r3, r0
 800ca12:	3301      	adds	r3, #1
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca1a:	d808      	bhi.n	800ca2e <USBD_GetString+0x3e>
 800ca1c:	6938      	ldr	r0, [r7, #16]
 800ca1e:	f000 f839 	bl	800ca94 <USBD_GetLen>
 800ca22:	4603      	mov	r3, r0
 800ca24:	3301      	adds	r3, #1
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	e001      	b.n	800ca32 <USBD_GetString+0x42>
 800ca2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	3301      	adds	r3, #1
 800ca46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	2203      	movs	r2, #3
 800ca50:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	3301      	adds	r3, #1
 800ca56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca58:	e013      	b.n	800ca82 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	4413      	add	r3, r2
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	7812      	ldrb	r2, [r2, #0]
 800ca64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	613b      	str	r3, [r7, #16]
    idx++;
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	4413      	add	r3, r2
 800ca78:	2200      	movs	r2, #0
 800ca7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1e7      	bne.n	800ca5a <USBD_GetString+0x6a>
 800ca8a:	e000      	b.n	800ca8e <USBD_GetString+0x9e>
    return;
 800ca8c:	bf00      	nop
  }
}
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800caa4:	e005      	b.n	800cab2 <USBD_GetLen+0x1e>
  {
    len++;
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	3301      	adds	r3, #1
 800caaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	3301      	adds	r3, #1
 800cab0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1f5      	bne.n	800caa6 <USBD_GetLen+0x12>
  }

  return len;
 800caba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2202      	movs	r2, #2
 800cad8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	2100      	movs	r1, #0
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f003 fb31 	bl	8010156 <USBD_LL_Transmit>

  return USBD_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	2100      	movs	r1, #0
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f003 fb20 	bl	8010156 <USBD_LL_Transmit>

  return USBD_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2203      	movs	r2, #3
 800cb30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f003 fb24 	bl	8010198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f003 fb13 	bl	8010198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2204      	movs	r2, #4
 800cb88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2100      	movs	r1, #0
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f003 fadf 	bl	8010156 <USBD_LL_Transmit>

  return USBD_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2205      	movs	r2, #5
 800cbae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f003 faed 	bl	8010198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <__NVIC_SetPriority>:
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	6039      	str	r1, [r7, #0]
 800cbd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cbd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	db0a      	blt.n	800cbf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	490c      	ldr	r1, [pc, #48]	@ (800cc14 <__NVIC_SetPriority+0x4c>)
 800cbe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cbe6:	0112      	lsls	r2, r2, #4
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	440b      	add	r3, r1
 800cbec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cbf0:	e00a      	b.n	800cc08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	4908      	ldr	r1, [pc, #32]	@ (800cc18 <__NVIC_SetPriority+0x50>)
 800cbf8:	88fb      	ldrh	r3, [r7, #6]
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	3b04      	subs	r3, #4
 800cc00:	0112      	lsls	r2, r2, #4
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	440b      	add	r3, r1
 800cc06:	761a      	strb	r2, [r3, #24]
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	e000e100 	.word	0xe000e100
 800cc18:	e000ed00 	.word	0xe000ed00

0800cc1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc20:	4b05      	ldr	r3, [pc, #20]	@ (800cc38 <SysTick_Handler+0x1c>)
 800cc22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc24:	f001 fd76 	bl	800e714 <xTaskGetSchedulerState>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d001      	beq.n	800cc32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc2e:	f002 fb6b 	bl	800f308 <xPortSysTickHandler>
  }
}
 800cc32:	bf00      	nop
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	e000e010 	.word	0xe000e010

0800cc3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc40:	2100      	movs	r1, #0
 800cc42:	f06f 0004 	mvn.w	r0, #4
 800cc46:	f7ff ffbf 	bl	800cbc8 <__NVIC_SetPriority>
#endif
}
 800cc4a:	bf00      	nop
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc56:	f3ef 8305 	mrs	r3, IPSR
 800cc5a:	603b      	str	r3, [r7, #0]
  return(result);
 800cc5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cc62:	f06f 0305 	mvn.w	r3, #5
 800cc66:	607b      	str	r3, [r7, #4]
 800cc68:	e00c      	b.n	800cc84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc94 <osKernelInitialize+0x44>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc72:	4b08      	ldr	r3, [pc, #32]	@ (800cc94 <osKernelInitialize+0x44>)
 800cc74:	2201      	movs	r2, #1
 800cc76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	e002      	b.n	800cc84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc84:	687b      	ldr	r3, [r7, #4]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	240005cc 	.word	0x240005cc

0800cc98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc9e:	f3ef 8305 	mrs	r3, IPSR
 800cca2:	603b      	str	r3, [r7, #0]
  return(result);
 800cca4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ccaa:	f06f 0305 	mvn.w	r3, #5
 800ccae:	607b      	str	r3, [r7, #4]
 800ccb0:	e010      	b.n	800ccd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ccb2:	4b0b      	ldr	r3, [pc, #44]	@ (800cce0 <osKernelStart+0x48>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d109      	bne.n	800ccce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ccba:	f7ff ffbf 	bl	800cc3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ccbe:	4b08      	ldr	r3, [pc, #32]	@ (800cce0 <osKernelStart+0x48>)
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ccc4:	f001 f87a 	bl	800ddbc <vTaskStartScheduler>
      stat = osOK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	e002      	b.n	800ccd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ccd4:	687b      	ldr	r3, [r7, #4]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	240005cc 	.word	0x240005cc

0800cce4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08e      	sub	sp, #56	@ 0x38
 800cce8:	af04      	add	r7, sp, #16
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccf4:	f3ef 8305 	mrs	r3, IPSR
 800ccf8:	617b      	str	r3, [r7, #20]
  return(result);
 800ccfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d17e      	bne.n	800cdfe <osThreadNew+0x11a>
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d07b      	beq.n	800cdfe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cd06:	2380      	movs	r3, #128	@ 0x80
 800cd08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cd0a:	2318      	movs	r3, #24
 800cd0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
 800cd16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d045      	beq.n	800cdaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <osThreadNew+0x48>
        name = attr->name;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d008      	beq.n	800cd52 <osThreadNew+0x6e>
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	2b38      	cmp	r3, #56	@ 0x38
 800cd44:	d805      	bhi.n	800cd52 <osThreadNew+0x6e>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <osThreadNew+0x72>
        return (NULL);
 800cd52:	2300      	movs	r3, #0
 800cd54:	e054      	b.n	800ce00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	089b      	lsrs	r3, r3, #2
 800cd64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00e      	beq.n	800cd8c <osThreadNew+0xa8>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	2b5b      	cmp	r3, #91	@ 0x5b
 800cd74:	d90a      	bls.n	800cd8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d006      	beq.n	800cd8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	695b      	ldr	r3, [r3, #20]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <osThreadNew+0xa8>
        mem = 1;
 800cd86:	2301      	movs	r3, #1
 800cd88:	61bb      	str	r3, [r7, #24]
 800cd8a:	e010      	b.n	800cdae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10c      	bne.n	800cdae <osThreadNew+0xca>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d108      	bne.n	800cdae <osThreadNew+0xca>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	691b      	ldr	r3, [r3, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d104      	bne.n	800cdae <osThreadNew+0xca>
          mem = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	e001      	b.n	800cdae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d110      	bne.n	800cdd6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdbc:	9202      	str	r2, [sp, #8]
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	6a3a      	ldr	r2, [r7, #32]
 800cdc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f000 fe1a 	bl	800da04 <xTaskCreateStatic>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	e013      	b.n	800cdfe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d110      	bne.n	800cdfe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	f107 0310 	add.w	r3, r7, #16
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f000 fe68 	bl	800dac4 <xTaskCreate>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d001      	beq.n	800cdfe <osThreadNew+0x11a>
            hTask = NULL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdfe:	693b      	ldr	r3, [r7, #16]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3728      	adds	r7, #40	@ 0x28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce10:	f3ef 8305 	mrs	r3, IPSR
 800ce14:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d003      	beq.n	800ce24 <osDelay+0x1c>
    stat = osErrorISR;
 800ce1c:	f06f 0305 	mvn.w	r3, #5
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	e007      	b.n	800ce34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 ff8e 	bl	800dd50 <vTaskDelay>
    }
  }

  return (stat);
 800ce34:	68fb      	ldr	r3, [r7, #12]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a07      	ldr	r2, [pc, #28]	@ (800ce6c <vApplicationGetIdleTaskMemory+0x2c>)
 800ce50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	4a06      	ldr	r2, [pc, #24]	@ (800ce70 <vApplicationGetIdleTaskMemory+0x30>)
 800ce56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2280      	movs	r2, #128	@ 0x80
 800ce5c:	601a      	str	r2, [r3, #0]
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	240005d0 	.word	0x240005d0
 800ce70:	2400062c 	.word	0x2400062c

0800ce74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4a07      	ldr	r2, [pc, #28]	@ (800cea0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	4a06      	ldr	r2, [pc, #24]	@ (800cea4 <vApplicationGetTimerTaskMemory+0x30>)
 800ce8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce92:	601a      	str	r2, [r3, #0]
}
 800ce94:	bf00      	nop
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	2400082c 	.word	0x2400082c
 800cea4:	24000888 	.word	0x24000888

0800cea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f103 0208 	add.w	r2, r3, #8
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f04f 32ff 	mov.w	r2, #4294967295
 800cec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f103 0208 	add.w	r2, r3, #8
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f103 0208 	add.w	r2, r3, #8
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
}
 800cf3e:	bf00      	nop
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b085      	sub	sp, #20
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf60:	d103      	bne.n	800cf6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	e00c      	b.n	800cf84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	3308      	adds	r3, #8
 800cf6e:	60fb      	str	r3, [r7, #12]
 800cf70:	e002      	b.n	800cf78 <vListInsert+0x2e>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d2f6      	bcs.n	800cf72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	601a      	str	r2, [r3, #0]
}
 800cfb0:	bf00      	nop
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	6892      	ldr	r2, [r2, #8]
 800cfd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6852      	ldr	r2, [r2, #4]
 800cfdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d103      	bne.n	800cff0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689a      	ldr	r2, [r3, #8]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	1e5a      	subs	r2, r3, #1
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10b      	bne.n	800d03c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	e7fd      	b.n	800d038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d03c:	f002 f8d4 	bl	800f1e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d04c:	fb01 f303 	mul.w	r3, r1, r3
 800d050:	441a      	add	r2, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d06c:	3b01      	subs	r3, #1
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d072:	fb01 f303 	mul.w	r3, r1, r3
 800d076:	441a      	add	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	22ff      	movs	r2, #255	@ 0xff
 800d080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	22ff      	movs	r2, #255	@ 0xff
 800d088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d114      	bne.n	800d0bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d01a      	beq.n	800d0d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3310      	adds	r3, #16
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f001 f940 	bl	800e324 <xTaskRemoveFromEventList>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d012      	beq.n	800d0d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e0 <xQueueGenericReset+0xd0>)
 800d0ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	e009      	b.n	800d0d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	3310      	adds	r3, #16
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff fef1 	bl	800cea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3324      	adds	r3, #36	@ 0x24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff feec 	bl	800cea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0d0:	f002 f8bc 	bl	800f24c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0d4:	2301      	movs	r3, #1
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	e000ed04 	.word	0xe000ed04

0800d0e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b08e      	sub	sp, #56	@ 0x38
 800d0e8:	af02      	add	r7, sp, #8
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10b      	bne.n	800d110 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	e7fd      	b.n	800d10c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10b      	bne.n	800d12e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d128:	bf00      	nop
 800d12a:	bf00      	nop
 800d12c:	e7fd      	b.n	800d12a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <xQueueGenericCreateStatic+0x56>
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <xQueueGenericCreateStatic+0x5a>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <xQueueGenericCreateStatic+0x5c>
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10b      	bne.n	800d15c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	623b      	str	r3, [r7, #32]
}
 800d156:	bf00      	nop
 800d158:	bf00      	nop
 800d15a:	e7fd      	b.n	800d158 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d102      	bne.n	800d168 <xQueueGenericCreateStatic+0x84>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <xQueueGenericCreateStatic+0x88>
 800d168:	2301      	movs	r3, #1
 800d16a:	e000      	b.n	800d16e <xQueueGenericCreateStatic+0x8a>
 800d16c:	2300      	movs	r3, #0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10b      	bne.n	800d18a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	61fb      	str	r3, [r7, #28]
}
 800d184:	bf00      	nop
 800d186:	bf00      	nop
 800d188:	e7fd      	b.n	800d186 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d18a:	2350      	movs	r3, #80	@ 0x50
 800d18c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b50      	cmp	r3, #80	@ 0x50
 800d192:	d00b      	beq.n	800d1ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	61bb      	str	r3, [r7, #24]
}
 800d1a6:	bf00      	nop
 800d1a8:	bf00      	nop
 800d1aa:	e7fd      	b.n	800d1a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00d      	beq.n	800d1d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	68b9      	ldr	r1, [r7, #8]
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 f805 	bl	800d1de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3730      	adds	r7, #48	@ 0x30
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	607a      	str	r2, [r7, #4]
 800d1ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d103      	bne.n	800d1fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	69ba      	ldr	r2, [r7, #24]
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	e002      	b.n	800d200 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d20c:	2101      	movs	r1, #1
 800d20e:	69b8      	ldr	r0, [r7, #24]
 800d210:	f7ff fefe 	bl	800d010 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	78fa      	ldrb	r2, [r7, #3]
 800d218:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d21c:	bf00      	nop
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08e      	sub	sp, #56	@ 0x38
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
 800d230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d232:	2300      	movs	r3, #0
 800d234:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10b      	bne.n	800d258 <xQueueGenericSend+0x34>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d252:	bf00      	nop
 800d254:	bf00      	nop
 800d256:	e7fd      	b.n	800d254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d103      	bne.n	800d266 <xQueueGenericSend+0x42>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <xQueueGenericSend+0x46>
 800d266:	2301      	movs	r3, #1
 800d268:	e000      	b.n	800d26c <xQueueGenericSend+0x48>
 800d26a:	2300      	movs	r3, #0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10b      	bne.n	800d288 <xQueueGenericSend+0x64>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d282:	bf00      	nop
 800d284:	bf00      	nop
 800d286:	e7fd      	b.n	800d284 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d103      	bne.n	800d296 <xQueueGenericSend+0x72>
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d292:	2b01      	cmp	r3, #1
 800d294:	d101      	bne.n	800d29a <xQueueGenericSend+0x76>
 800d296:	2301      	movs	r3, #1
 800d298:	e000      	b.n	800d29c <xQueueGenericSend+0x78>
 800d29a:	2300      	movs	r3, #0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <xQueueGenericSend+0x94>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	623b      	str	r3, [r7, #32]
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	e7fd      	b.n	800d2b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2b8:	f001 fa2c 	bl	800e714 <xTaskGetSchedulerState>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d102      	bne.n	800d2c8 <xQueueGenericSend+0xa4>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <xQueueGenericSend+0xa8>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e000      	b.n	800d2ce <xQueueGenericSend+0xaa>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10b      	bne.n	800d2ea <xQueueGenericSend+0xc6>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	61fb      	str	r3, [r7, #28]
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2ea:	f001 ff7d 	bl	800f1e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d302      	bcc.n	800d300 <xQueueGenericSend+0xdc>
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d129      	bne.n	800d354 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	68b9      	ldr	r1, [r7, #8]
 800d304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d306:	f000 fa0f 	bl	800d728 <prvCopyDataToQueue>
 800d30a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d310:	2b00      	cmp	r3, #0
 800d312:	d010      	beq.n	800d336 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d316:	3324      	adds	r3, #36	@ 0x24
 800d318:	4618      	mov	r0, r3
 800d31a:	f001 f803 	bl	800e324 <xTaskRemoveFromEventList>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d013      	beq.n	800d34c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d324:	4b3f      	ldr	r3, [pc, #252]	@ (800d424 <xQueueGenericSend+0x200>)
 800d326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	e00a      	b.n	800d34c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d007      	beq.n	800d34c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d33c:	4b39      	ldr	r3, [pc, #228]	@ (800d424 <xQueueGenericSend+0x200>)
 800d33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d342:	601a      	str	r2, [r3, #0]
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d34c:	f001 ff7e 	bl	800f24c <vPortExitCritical>
				return pdPASS;
 800d350:	2301      	movs	r3, #1
 800d352:	e063      	b.n	800d41c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d103      	bne.n	800d362 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d35a:	f001 ff77 	bl	800f24c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	e05c      	b.n	800d41c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d368:	f107 0314 	add.w	r3, r7, #20
 800d36c:	4618      	mov	r0, r3
 800d36e:	f001 f83d 	bl	800e3ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d372:	2301      	movs	r3, #1
 800d374:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d376:	f001 ff69 	bl	800f24c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d37a:	f000 fd87 	bl	800de8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d37e:	f001 ff33 	bl	800f1e8 <vPortEnterCritical>
 800d382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d388:	b25b      	sxtb	r3, r3
 800d38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38e:	d103      	bne.n	800d398 <xQueueGenericSend+0x174>
 800d390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d392:	2200      	movs	r2, #0
 800d394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d39e:	b25b      	sxtb	r3, r3
 800d3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a4:	d103      	bne.n	800d3ae <xQueueGenericSend+0x18a>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ae:	f001 ff4d 	bl	800f24c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3b2:	1d3a      	adds	r2, r7, #4
 800d3b4:	f107 0314 	add.w	r3, r7, #20
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f001 f82c 	bl	800e418 <xTaskCheckForTimeOut>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d124      	bne.n	800d410 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3c8:	f000 faa6 	bl	800d918 <prvIsQueueFull>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d018      	beq.n	800d404 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	3310      	adds	r3, #16
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	4611      	mov	r1, r2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 ff50 	bl	800e280 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d3e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3e2:	f000 fa31 	bl	800d848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d3e6:	f000 fd5f 	bl	800dea8 <xTaskResumeAll>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f47f af7c 	bne.w	800d2ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d424 <xQueueGenericSend+0x200>)
 800d3f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	e772      	b.n	800d2ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d406:	f000 fa1f 	bl	800d848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d40a:	f000 fd4d 	bl	800dea8 <xTaskResumeAll>
 800d40e:	e76c      	b.n	800d2ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d412:	f000 fa19 	bl	800d848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d416:	f000 fd47 	bl	800dea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d41a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3738      	adds	r7, #56	@ 0x38
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	e000ed04 	.word	0xe000ed04

0800d428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b090      	sub	sp, #64	@ 0x40
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10b      	bne.n	800d458 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	e7fd      	b.n	800d454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d103      	bne.n	800d466 <xQueueGenericSendFromISR+0x3e>
 800d45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <xQueueGenericSendFromISR+0x42>
 800d466:	2301      	movs	r3, #1
 800d468:	e000      	b.n	800d46c <xQueueGenericSendFromISR+0x44>
 800d46a:	2300      	movs	r3, #0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d103      	bne.n	800d496 <xQueueGenericSendFromISR+0x6e>
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d492:	2b01      	cmp	r3, #1
 800d494:	d101      	bne.n	800d49a <xQueueGenericSendFromISR+0x72>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <xQueueGenericSendFromISR+0x74>
 800d49a:	2300      	movs	r3, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10b      	bne.n	800d4b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	623b      	str	r3, [r7, #32]
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	e7fd      	b.n	800d4b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4b8:	f001 ff76 	bl	800f3a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4bc:	f3ef 8211 	mrs	r2, BASEPRI
 800d4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fa      	str	r2, [r7, #28]
 800d4d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d4d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d302      	bcc.n	800d4ea <xQueueGenericSendFromISR+0xc2>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d12f      	bne.n	800d54a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	68b9      	ldr	r1, [r7, #8]
 800d4fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d500:	f000 f912 	bl	800d728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d504:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50c:	d112      	bne.n	800d534 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d512:	2b00      	cmp	r3, #0
 800d514:	d016      	beq.n	800d544 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d518:	3324      	adds	r3, #36	@ 0x24
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 ff02 	bl	800e324 <xTaskRemoveFromEventList>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00e      	beq.n	800d544 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	e007      	b.n	800d544 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d534:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d538:	3301      	adds	r3, #1
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	b25a      	sxtb	r2, r3
 800d53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d544:	2301      	movs	r3, #1
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d548:	e001      	b.n	800d54e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d550:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3740      	adds	r7, #64	@ 0x40
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08c      	sub	sp, #48	@ 0x30
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d570:	2300      	movs	r3, #0
 800d572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10b      	bne.n	800d596 <xQueueReceive+0x32>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	623b      	str	r3, [r7, #32]
}
 800d590:	bf00      	nop
 800d592:	bf00      	nop
 800d594:	e7fd      	b.n	800d592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d103      	bne.n	800d5a4 <xQueueReceive+0x40>
 800d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d101      	bne.n	800d5a8 <xQueueReceive+0x44>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e000      	b.n	800d5aa <xQueueReceive+0x46>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10b      	bne.n	800d5c6 <xQueueReceive+0x62>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	61fb      	str	r3, [r7, #28]
}
 800d5c0:	bf00      	nop
 800d5c2:	bf00      	nop
 800d5c4:	e7fd      	b.n	800d5c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5c6:	f001 f8a5 	bl	800e714 <xTaskGetSchedulerState>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <xQueueReceive+0x72>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d101      	bne.n	800d5da <xQueueReceive+0x76>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e000      	b.n	800d5dc <xQueueReceive+0x78>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10b      	bne.n	800d5f8 <xQueueReceive+0x94>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	61bb      	str	r3, [r7, #24]
}
 800d5f2:	bf00      	nop
 800d5f4:	bf00      	nop
 800d5f6:	e7fd      	b.n	800d5f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5f8:	f001 fdf6 	bl	800f1e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d600:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	2b00      	cmp	r3, #0
 800d606:	d01f      	beq.n	800d648 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d60c:	f000 f8f6 	bl	800d7fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d612:	1e5a      	subs	r2, r3, #1
 800d614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d616:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00f      	beq.n	800d640 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d622:	3310      	adds	r3, #16
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fe7d 	bl	800e324 <xTaskRemoveFromEventList>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d007      	beq.n	800d640 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d630:	4b3c      	ldr	r3, [pc, #240]	@ (800d724 <xQueueReceive+0x1c0>)
 800d632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d636:	601a      	str	r2, [r3, #0]
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d640:	f001 fe04 	bl	800f24c <vPortExitCritical>
				return pdPASS;
 800d644:	2301      	movs	r3, #1
 800d646:	e069      	b.n	800d71c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d103      	bne.n	800d656 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d64e:	f001 fdfd 	bl	800f24c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d652:	2300      	movs	r3, #0
 800d654:	e062      	b.n	800d71c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d65c:	f107 0310 	add.w	r3, r7, #16
 800d660:	4618      	mov	r0, r3
 800d662:	f000 fec3 	bl	800e3ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d666:	2301      	movs	r3, #1
 800d668:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d66a:	f001 fdef 	bl	800f24c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d66e:	f000 fc0d 	bl	800de8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d672:	f001 fdb9 	bl	800f1e8 <vPortEnterCritical>
 800d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d67c:	b25b      	sxtb	r3, r3
 800d67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d682:	d103      	bne.n	800d68c <xQueueReceive+0x128>
 800d684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d692:	b25b      	sxtb	r3, r3
 800d694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d698:	d103      	bne.n	800d6a2 <xQueueReceive+0x13e>
 800d69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d69c:	2200      	movs	r2, #0
 800d69e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6a2:	f001 fdd3 	bl	800f24c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6a6:	1d3a      	adds	r2, r7, #4
 800d6a8:	f107 0310 	add.w	r3, r7, #16
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 feb2 	bl	800e418 <xTaskCheckForTimeOut>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d123      	bne.n	800d702 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6bc:	f000 f916 	bl	800d8ec <prvIsQueueEmpty>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d017      	beq.n	800d6f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c8:	3324      	adds	r3, #36	@ 0x24
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 fdd6 	bl	800e280 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6d6:	f000 f8b7 	bl	800d848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6da:	f000 fbe5 	bl	800dea8 <xTaskResumeAll>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d189      	bne.n	800d5f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d724 <xQueueReceive+0x1c0>)
 800d6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	e780      	b.n	800d5f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6f8:	f000 f8a6 	bl	800d848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6fc:	f000 fbd4 	bl	800dea8 <xTaskResumeAll>
 800d700:	e77a      	b.n	800d5f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d704:	f000 f8a0 	bl	800d848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d708:	f000 fbce 	bl	800dea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d70c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d70e:	f000 f8ed 	bl	800d8ec <prvIsQueueEmpty>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	f43f af6f 	beq.w	800d5f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d71a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3730      	adds	r7, #48	@ 0x30
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	e000ed04 	.word	0xe000ed04

0800d728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d734:	2300      	movs	r3, #0
 800d736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10d      	bne.n	800d762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d14d      	bne.n	800d7ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	4618      	mov	r0, r3
 800d754:	f000 fffc 	bl	800e750 <xTaskPriorityDisinherit>
 800d758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	609a      	str	r2, [r3, #8]
 800d760:	e043      	b.n	800d7ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d119      	bne.n	800d79c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6858      	ldr	r0, [r3, #4]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d770:	461a      	mov	r2, r3
 800d772:	68b9      	ldr	r1, [r7, #8]
 800d774:	f005 f80d 	bl	8012792 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d780:	441a      	add	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d32b      	bcc.n	800d7ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	605a      	str	r2, [r3, #4]
 800d79a:	e026      	b.n	800d7ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	68d8      	ldr	r0, [r3, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	68b9      	ldr	r1, [r7, #8]
 800d7a8:	f004 fff3 	bl	8012792 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	68da      	ldr	r2, [r3, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b4:	425b      	negs	r3, r3
 800d7b6:	441a      	add	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	68da      	ldr	r2, [r3, #12]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d207      	bcs.n	800d7d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7d0:	425b      	negs	r3, r3
 800d7d2:	441a      	add	r2, r3
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d105      	bne.n	800d7ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d7f2:	697b      	ldr	r3, [r7, #20]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d018      	beq.n	800d840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68da      	ldr	r2, [r3, #12]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d816:	441a      	add	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	68da      	ldr	r2, [r3, #12]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	429a      	cmp	r2, r3
 800d826:	d303      	bcc.n	800d830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	68d9      	ldr	r1, [r3, #12]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d838:	461a      	mov	r2, r3
 800d83a:	6838      	ldr	r0, [r7, #0]
 800d83c:	f004 ffa9 	bl	8012792 <memcpy>
	}
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d850:	f001 fcca 	bl	800f1e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d85a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d85c:	e011      	b.n	800d882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d862:	2b00      	cmp	r3, #0
 800d864:	d012      	beq.n	800d88c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	3324      	adds	r3, #36	@ 0x24
 800d86a:	4618      	mov	r0, r3
 800d86c:	f000 fd5a 	bl	800e324 <xTaskRemoveFromEventList>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d876:	f000 fe33 	bl	800e4e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d886:	2b00      	cmp	r3, #0
 800d888:	dce9      	bgt.n	800d85e <prvUnlockQueue+0x16>
 800d88a:	e000      	b.n	800d88e <prvUnlockQueue+0x46>
					break;
 800d88c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	22ff      	movs	r2, #255	@ 0xff
 800d892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d896:	f001 fcd9 	bl	800f24c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d89a:	f001 fca5 	bl	800f1e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8a6:	e011      	b.n	800d8cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d012      	beq.n	800d8d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	3310      	adds	r3, #16
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 fd35 	bl	800e324 <xTaskRemoveFromEventList>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8c0:	f000 fe0e 	bl	800e4e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8c4:	7bbb      	ldrb	r3, [r7, #14]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	dce9      	bgt.n	800d8a8 <prvUnlockQueue+0x60>
 800d8d4:	e000      	b.n	800d8d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	22ff      	movs	r2, #255	@ 0xff
 800d8dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d8e0:	f001 fcb4 	bl	800f24c <vPortExitCritical>
}
 800d8e4:	bf00      	nop
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8f4:	f001 fc78 	bl	800f1e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d102      	bne.n	800d906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d900:	2301      	movs	r3, #1
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	e001      	b.n	800d90a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d90a:	f001 fc9f 	bl	800f24c <vPortExitCritical>

	return xReturn;
 800d90e:	68fb      	ldr	r3, [r7, #12]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d920:	f001 fc62 	bl	800f1e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d102      	bne.n	800d936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d930:	2301      	movs	r3, #1
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	e001      	b.n	800d93a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d93a:	f001 fc87 	bl	800f24c <vPortExitCritical>

	return xReturn;
 800d93e:	68fb      	ldr	r3, [r7, #12]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d952:	2300      	movs	r3, #0
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	e014      	b.n	800d982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d958:	4a0f      	ldr	r2, [pc, #60]	@ (800d998 <vQueueAddToRegistry+0x50>)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10b      	bne.n	800d97c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d964:	490c      	ldr	r1, [pc, #48]	@ (800d998 <vQueueAddToRegistry+0x50>)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d96e:	4a0a      	ldr	r2, [pc, #40]	@ (800d998 <vQueueAddToRegistry+0x50>)
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	00db      	lsls	r3, r3, #3
 800d974:	4413      	add	r3, r2
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d97a:	e006      	b.n	800d98a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3301      	adds	r3, #1
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2b07      	cmp	r3, #7
 800d986:	d9e7      	bls.n	800d958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d988:	bf00      	nop
 800d98a:	bf00      	nop
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	24000c88 	.word	0x24000c88

0800d99c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9ac:	f001 fc1c 	bl	800f1e8 <vPortEnterCritical>
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9b6:	b25b      	sxtb	r3, r3
 800d9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9bc:	d103      	bne.n	800d9c6 <vQueueWaitForMessageRestricted+0x2a>
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9cc:	b25b      	sxtb	r3, r3
 800d9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d2:	d103      	bne.n	800d9dc <vQueueWaitForMessageRestricted+0x40>
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9dc:	f001 fc36 	bl	800f24c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d106      	bne.n	800d9f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	3324      	adds	r3, #36	@ 0x24
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	68b9      	ldr	r1, [r7, #8]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 fc6b 	bl	800e2cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9f6:	6978      	ldr	r0, [r7, #20]
 800d9f8:	f7ff ff26 	bl	800d848 <prvUnlockQueue>
	}
 800d9fc:	bf00      	nop
 800d9fe:	3718      	adds	r7, #24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	@ 0x38
 800da08:	af04      	add	r7, sp, #16
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10b      	bne.n	800da30 <xTaskCreateStatic+0x2c>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	623b      	str	r3, [r7, #32]
}
 800da2a:	bf00      	nop
 800da2c:	bf00      	nop
 800da2e:	e7fd      	b.n	800da2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10b      	bne.n	800da4e <xTaskCreateStatic+0x4a>
	__asm volatile
 800da36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	61fb      	str	r3, [r7, #28]
}
 800da48:	bf00      	nop
 800da4a:	bf00      	nop
 800da4c:	e7fd      	b.n	800da4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da4e:	235c      	movs	r3, #92	@ 0x5c
 800da50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b5c      	cmp	r3, #92	@ 0x5c
 800da56:	d00b      	beq.n	800da70 <xTaskCreateStatic+0x6c>
	__asm volatile
 800da58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5c:	f383 8811 	msr	BASEPRI, r3
 800da60:	f3bf 8f6f 	isb	sy
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	61bb      	str	r3, [r7, #24]
}
 800da6a:	bf00      	nop
 800da6c:	bf00      	nop
 800da6e:	e7fd      	b.n	800da6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da74:	2b00      	cmp	r3, #0
 800da76:	d01e      	beq.n	800dab6 <xTaskCreateStatic+0xb2>
 800da78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d01b      	beq.n	800dab6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da90:	2300      	movs	r3, #0
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da96:	9302      	str	r3, [sp, #8]
 800da98:	f107 0314 	add.w	r3, r7, #20
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	68b9      	ldr	r1, [r7, #8]
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 f850 	bl	800db4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800daae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dab0:	f000 f8de 	bl	800dc70 <prvAddNewTaskToReadyList>
 800dab4:	e001      	b.n	800daba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800daba:	697b      	ldr	r3, [r7, #20]
	}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3728      	adds	r7, #40	@ 0x28
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08c      	sub	sp, #48	@ 0x30
 800dac8:	af04      	add	r7, sp, #16
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	4613      	mov	r3, r2
 800dad2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dad4:	88fb      	ldrh	r3, [r7, #6]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4618      	mov	r0, r3
 800dada:	f001 fca7 	bl	800f42c <pvPortMalloc>
 800dade:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00e      	beq.n	800db04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dae6:	205c      	movs	r0, #92	@ 0x5c
 800dae8:	f001 fca0 	bl	800f42c <pvPortMalloc>
 800daec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d003      	beq.n	800dafc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	631a      	str	r2, [r3, #48]	@ 0x30
 800dafa:	e005      	b.n	800db08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dafc:	6978      	ldr	r0, [r7, #20]
 800dafe:	f001 fd63 	bl	800f5c8 <vPortFree>
 800db02:	e001      	b.n	800db08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db04:	2300      	movs	r3, #0
 800db06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d017      	beq.n	800db3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db16:	88fa      	ldrh	r2, [r7, #6]
 800db18:	2300      	movs	r3, #0
 800db1a:	9303      	str	r3, [sp, #12]
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	9302      	str	r3, [sp, #8]
 800db20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	68b9      	ldr	r1, [r7, #8]
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 f80e 	bl	800db4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db32:	69f8      	ldr	r0, [r7, #28]
 800db34:	f000 f89c 	bl	800dc70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db38:	2301      	movs	r3, #1
 800db3a:	61bb      	str	r3, [r7, #24]
 800db3c:	e002      	b.n	800db44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295
 800db42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db44:	69bb      	ldr	r3, [r7, #24]
	}
 800db46:	4618      	mov	r0, r3
 800db48:	3720      	adds	r7, #32
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b088      	sub	sp, #32
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	461a      	mov	r2, r3
 800db66:	21a5      	movs	r1, #165	@ 0xa5
 800db68:	f004 fd83 	bl	8012672 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800db76:	440b      	add	r3, r1
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	f023 0307 	bic.w	r3, r3, #7
 800db84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	f003 0307 	and.w	r3, r3, #7
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00b      	beq.n	800dba8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	617b      	str	r3, [r7, #20]
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	e7fd      	b.n	800dba4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d01f      	beq.n	800dbee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbae:	2300      	movs	r3, #0
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	e012      	b.n	800dbda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	4413      	add	r3, r2
 800dbba:	7819      	ldrb	r1, [r3, #0]
 800dbbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	3334      	adds	r3, #52	@ 0x34
 800dbc4:	460a      	mov	r2, r1
 800dbc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	4413      	add	r3, r2
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d006      	beq.n	800dbe2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	61fb      	str	r3, [r7, #28]
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	2b0f      	cmp	r3, #15
 800dbde:	d9e9      	bls.n	800dbb4 <prvInitialiseNewTask+0x66>
 800dbe0:	e000      	b.n	800dbe4 <prvInitialiseNewTask+0x96>
			{
				break;
 800dbe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dbec:	e003      	b.n	800dbf6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf8:	2b37      	cmp	r3, #55	@ 0x37
 800dbfa:	d901      	bls.n	800dc00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dbfc:	2337      	movs	r3, #55	@ 0x37
 800dbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc0e:	2200      	movs	r2, #0
 800dc10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc14:	3304      	adds	r3, #4
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff f966 	bl	800cee8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1e:	3318      	adds	r3, #24
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff f961 	bl	800cee8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3e:	2200      	movs	r2, #0
 800dc40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	68f9      	ldr	r1, [r7, #12]
 800dc4e:	69b8      	ldr	r0, [r7, #24]
 800dc50:	f001 f99c 	bl	800ef8c <pxPortInitialiseStack>
 800dc54:	4602      	mov	r2, r0
 800dc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc66:	bf00      	nop
 800dc68:	3720      	adds	r7, #32
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
	...

0800dc70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc78:	f001 fab6 	bl	800f1e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc7c:	4b2d      	ldr	r3, [pc, #180]	@ (800dd34 <prvAddNewTaskToReadyList+0xc4>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3301      	adds	r3, #1
 800dc82:	4a2c      	ldr	r2, [pc, #176]	@ (800dd34 <prvAddNewTaskToReadyList+0xc4>)
 800dc84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc86:	4b2c      	ldr	r3, [pc, #176]	@ (800dd38 <prvAddNewTaskToReadyList+0xc8>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d109      	bne.n	800dca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc8e:	4a2a      	ldr	r2, [pc, #168]	@ (800dd38 <prvAddNewTaskToReadyList+0xc8>)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc94:	4b27      	ldr	r3, [pc, #156]	@ (800dd34 <prvAddNewTaskToReadyList+0xc4>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d110      	bne.n	800dcbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc9c:	f000 fc44 	bl	800e528 <prvInitialiseTaskLists>
 800dca0:	e00d      	b.n	800dcbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dca2:	4b26      	ldr	r3, [pc, #152]	@ (800dd3c <prvAddNewTaskToReadyList+0xcc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d109      	bne.n	800dcbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcaa:	4b23      	ldr	r3, [pc, #140]	@ (800dd38 <prvAddNewTaskToReadyList+0xc8>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d802      	bhi.n	800dcbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dcb8:	4a1f      	ldr	r2, [pc, #124]	@ (800dd38 <prvAddNewTaskToReadyList+0xc8>)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dcbe:	4b20      	ldr	r3, [pc, #128]	@ (800dd40 <prvAddNewTaskToReadyList+0xd0>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	4a1e      	ldr	r2, [pc, #120]	@ (800dd40 <prvAddNewTaskToReadyList+0xd0>)
 800dcc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dcc8:	4b1d      	ldr	r3, [pc, #116]	@ (800dd40 <prvAddNewTaskToReadyList+0xd0>)
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcd4:	4b1b      	ldr	r3, [pc, #108]	@ (800dd44 <prvAddNewTaskToReadyList+0xd4>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d903      	bls.n	800dce4 <prvAddNewTaskToReadyList+0x74>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce0:	4a18      	ldr	r2, [pc, #96]	@ (800dd44 <prvAddNewTaskToReadyList+0xd4>)
 800dce2:	6013      	str	r3, [r2, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce8:	4613      	mov	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4413      	add	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4a15      	ldr	r2, [pc, #84]	@ (800dd48 <prvAddNewTaskToReadyList+0xd8>)
 800dcf2:	441a      	add	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	f7ff f901 	bl	800cf02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd00:	f001 faa4 	bl	800f24c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd04:	4b0d      	ldr	r3, [pc, #52]	@ (800dd3c <prvAddNewTaskToReadyList+0xcc>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00e      	beq.n	800dd2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd38 <prvAddNewTaskToReadyList+0xc8>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d207      	bcs.n	800dd2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd4c <prvAddNewTaskToReadyList+0xdc>)
 800dd1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd2a:	bf00      	nop
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	2400119c 	.word	0x2400119c
 800dd38:	24000cc8 	.word	0x24000cc8
 800dd3c:	240011a8 	.word	0x240011a8
 800dd40:	240011b8 	.word	0x240011b8
 800dd44:	240011a4 	.word	0x240011a4
 800dd48:	24000ccc 	.word	0x24000ccc
 800dd4c:	e000ed04 	.word	0xe000ed04

0800dd50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d018      	beq.n	800dd94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd62:	4b14      	ldr	r3, [pc, #80]	@ (800ddb4 <vTaskDelay+0x64>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00b      	beq.n	800dd82 <vTaskDelay+0x32>
	__asm volatile
 800dd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	60bb      	str	r3, [r7, #8]
}
 800dd7c:	bf00      	nop
 800dd7e:	bf00      	nop
 800dd80:	e7fd      	b.n	800dd7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd82:	f000 f883 	bl	800de8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd86:	2100      	movs	r1, #0
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 fd51 	bl	800e830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd8e:	f000 f88b 	bl	800dea8 <xTaskResumeAll>
 800dd92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d107      	bne.n	800ddaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dd9a:	4b07      	ldr	r3, [pc, #28]	@ (800ddb8 <vTaskDelay+0x68>)
 800dd9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddaa:	bf00      	nop
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	240011c4 	.word	0x240011c4
 800ddb8:	e000ed04 	.word	0xe000ed04

0800ddbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08a      	sub	sp, #40	@ 0x28
 800ddc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddca:	463a      	mov	r2, r7
 800ddcc:	1d39      	adds	r1, r7, #4
 800ddce:	f107 0308 	add.w	r3, r7, #8
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff f834 	bl	800ce40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	9202      	str	r2, [sp, #8]
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	2300      	movs	r3, #0
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	2300      	movs	r3, #0
 800dde8:	460a      	mov	r2, r1
 800ddea:	4922      	ldr	r1, [pc, #136]	@ (800de74 <vTaskStartScheduler+0xb8>)
 800ddec:	4822      	ldr	r0, [pc, #136]	@ (800de78 <vTaskStartScheduler+0xbc>)
 800ddee:	f7ff fe09 	bl	800da04 <xTaskCreateStatic>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	4a21      	ldr	r2, [pc, #132]	@ (800de7c <vTaskStartScheduler+0xc0>)
 800ddf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ddf8:	4b20      	ldr	r3, [pc, #128]	@ (800de7c <vTaskStartScheduler+0xc0>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de00:	2301      	movs	r3, #1
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	e001      	b.n	800de0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de06:	2300      	movs	r3, #0
 800de08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d102      	bne.n	800de16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de10:	f000 fd62 	bl	800e8d8 <xTimerCreateTimerTask>
 800de14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d116      	bne.n	800de4a <vTaskStartScheduler+0x8e>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	613b      	str	r3, [r7, #16]
}
 800de2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de30:	4b13      	ldr	r3, [pc, #76]	@ (800de80 <vTaskStartScheduler+0xc4>)
 800de32:	f04f 32ff 	mov.w	r2, #4294967295
 800de36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de38:	4b12      	ldr	r3, [pc, #72]	@ (800de84 <vTaskStartScheduler+0xc8>)
 800de3a:	2201      	movs	r2, #1
 800de3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de3e:	4b12      	ldr	r3, [pc, #72]	@ (800de88 <vTaskStartScheduler+0xcc>)
 800de40:	2200      	movs	r2, #0
 800de42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de44:	f001 f92c 	bl	800f0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de48:	e00f      	b.n	800de6a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de50:	d10b      	bne.n	800de6a <vTaskStartScheduler+0xae>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	60fb      	str	r3, [r7, #12]
}
 800de64:	bf00      	nop
 800de66:	bf00      	nop
 800de68:	e7fd      	b.n	800de66 <vTaskStartScheduler+0xaa>
}
 800de6a:	bf00      	nop
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	08014b6c 	.word	0x08014b6c
 800de78:	0800e4f9 	.word	0x0800e4f9
 800de7c:	240011c0 	.word	0x240011c0
 800de80:	240011bc 	.word	0x240011bc
 800de84:	240011a8 	.word	0x240011a8
 800de88:	240011a0 	.word	0x240011a0

0800de8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de90:	4b04      	ldr	r3, [pc, #16]	@ (800dea4 <vTaskSuspendAll+0x18>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3301      	adds	r3, #1
 800de96:	4a03      	ldr	r2, [pc, #12]	@ (800dea4 <vTaskSuspendAll+0x18>)
 800de98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de9a:	bf00      	nop
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	240011c4 	.word	0x240011c4

0800dea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800deb6:	4b42      	ldr	r3, [pc, #264]	@ (800dfc0 <xTaskResumeAll+0x118>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10b      	bne.n	800ded6 <xTaskResumeAll+0x2e>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	603b      	str	r3, [r7, #0]
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	e7fd      	b.n	800ded2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ded6:	f001 f987 	bl	800f1e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800deda:	4b39      	ldr	r3, [pc, #228]	@ (800dfc0 <xTaskResumeAll+0x118>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3b01      	subs	r3, #1
 800dee0:	4a37      	ldr	r2, [pc, #220]	@ (800dfc0 <xTaskResumeAll+0x118>)
 800dee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dee4:	4b36      	ldr	r3, [pc, #216]	@ (800dfc0 <xTaskResumeAll+0x118>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d162      	bne.n	800dfb2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800deec:	4b35      	ldr	r3, [pc, #212]	@ (800dfc4 <xTaskResumeAll+0x11c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d05e      	beq.n	800dfb2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800def4:	e02f      	b.n	800df56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def6:	4b34      	ldr	r3, [pc, #208]	@ (800dfc8 <xTaskResumeAll+0x120>)
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3318      	adds	r3, #24
 800df02:	4618      	mov	r0, r3
 800df04:	f7ff f85a 	bl	800cfbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3304      	adds	r3, #4
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff f855 	bl	800cfbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df16:	4b2d      	ldr	r3, [pc, #180]	@ (800dfcc <xTaskResumeAll+0x124>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d903      	bls.n	800df26 <xTaskResumeAll+0x7e>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df22:	4a2a      	ldr	r2, [pc, #168]	@ (800dfcc <xTaskResumeAll+0x124>)
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4a27      	ldr	r2, [pc, #156]	@ (800dfd0 <xTaskResumeAll+0x128>)
 800df34:	441a      	add	r2, r3
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3304      	adds	r3, #4
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fe ffe0 	bl	800cf02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df46:	4b23      	ldr	r3, [pc, #140]	@ (800dfd4 <xTaskResumeAll+0x12c>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d302      	bcc.n	800df56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800df50:	4b21      	ldr	r3, [pc, #132]	@ (800dfd8 <xTaskResumeAll+0x130>)
 800df52:	2201      	movs	r2, #1
 800df54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df56:	4b1c      	ldr	r3, [pc, #112]	@ (800dfc8 <xTaskResumeAll+0x120>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1cb      	bne.n	800def6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df64:	f000 fbb6 	bl	800e6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df68:	4b1c      	ldr	r3, [pc, #112]	@ (800dfdc <xTaskResumeAll+0x134>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d010      	beq.n	800df96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df74:	f000 f86c 	bl	800e050 <xTaskIncrementTick>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800df7e:	4b16      	ldr	r3, [pc, #88]	@ (800dfd8 <xTaskResumeAll+0x130>)
 800df80:	2201      	movs	r2, #1
 800df82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	3b01      	subs	r3, #1
 800df88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1f1      	bne.n	800df74 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800df90:	4b12      	ldr	r3, [pc, #72]	@ (800dfdc <xTaskResumeAll+0x134>)
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df96:	4b10      	ldr	r3, [pc, #64]	@ (800dfd8 <xTaskResumeAll+0x130>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d009      	beq.n	800dfb2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfa2:	4b0f      	ldr	r3, [pc, #60]	@ (800dfe0 <xTaskResumeAll+0x138>)
 800dfa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfb2:	f001 f94b 	bl	800f24c <vPortExitCritical>

	return xAlreadyYielded;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	240011c4 	.word	0x240011c4
 800dfc4:	2400119c 	.word	0x2400119c
 800dfc8:	2400115c 	.word	0x2400115c
 800dfcc:	240011a4 	.word	0x240011a4
 800dfd0:	24000ccc 	.word	0x24000ccc
 800dfd4:	24000cc8 	.word	0x24000cc8
 800dfd8:	240011b0 	.word	0x240011b0
 800dfdc:	240011ac 	.word	0x240011ac
 800dfe0:	e000ed04 	.word	0xe000ed04

0800dfe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dfea:	4b05      	ldr	r3, [pc, #20]	@ (800e000 <xTaskGetTickCount+0x1c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dff0:	687b      	ldr	r3, [r7, #4]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	240011a0 	.word	0x240011a0

0800e004 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <pcTaskGetName+0x14>
 800e012:	4b0e      	ldr	r3, [pc, #56]	@ (800e04c <pcTaskGetName+0x48>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	e000      	b.n	800e01a <pcTaskGetName+0x16>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10b      	bne.n	800e03a <pcTaskGetName+0x36>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	60bb      	str	r3, [r7, #8]
}
 800e034:	bf00      	nop
 800e036:	bf00      	nop
 800e038:	e7fd      	b.n	800e036 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3334      	adds	r3, #52	@ 0x34
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	24000cc8 	.word	0x24000cc8

0800e050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e056:	2300      	movs	r3, #0
 800e058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e05a:	4b4f      	ldr	r3, [pc, #316]	@ (800e198 <xTaskIncrementTick+0x148>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f040 8090 	bne.w	800e184 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e064:	4b4d      	ldr	r3, [pc, #308]	@ (800e19c <xTaskIncrementTick+0x14c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3301      	adds	r3, #1
 800e06a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e06c:	4a4b      	ldr	r2, [pc, #300]	@ (800e19c <xTaskIncrementTick+0x14c>)
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d121      	bne.n	800e0bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e078:	4b49      	ldr	r3, [pc, #292]	@ (800e1a0 <xTaskIncrementTick+0x150>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00b      	beq.n	800e09a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	603b      	str	r3, [r7, #0]
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop
 800e098:	e7fd      	b.n	800e096 <xTaskIncrementTick+0x46>
 800e09a:	4b41      	ldr	r3, [pc, #260]	@ (800e1a0 <xTaskIncrementTick+0x150>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	4b40      	ldr	r3, [pc, #256]	@ (800e1a4 <xTaskIncrementTick+0x154>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a3e      	ldr	r2, [pc, #248]	@ (800e1a0 <xTaskIncrementTick+0x150>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	4a3e      	ldr	r2, [pc, #248]	@ (800e1a4 <xTaskIncrementTick+0x154>)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	4b3e      	ldr	r3, [pc, #248]	@ (800e1a8 <xTaskIncrementTick+0x158>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	4a3c      	ldr	r2, [pc, #240]	@ (800e1a8 <xTaskIncrementTick+0x158>)
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	f000 fb0c 	bl	800e6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0bc:	4b3b      	ldr	r3, [pc, #236]	@ (800e1ac <xTaskIncrementTick+0x15c>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d349      	bcc.n	800e15a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c6:	4b36      	ldr	r3, [pc, #216]	@ (800e1a0 <xTaskIncrementTick+0x150>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d104      	bne.n	800e0da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d0:	4b36      	ldr	r3, [pc, #216]	@ (800e1ac <xTaskIncrementTick+0x15c>)
 800e0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d6:	601a      	str	r2, [r3, #0]
					break;
 800e0d8:	e03f      	b.n	800e15a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0da:	4b31      	ldr	r3, [pc, #196]	@ (800e1a0 <xTaskIncrementTick+0x150>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d203      	bcs.n	800e0fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0f2:	4a2e      	ldr	r2, [pc, #184]	@ (800e1ac <xTaskIncrementTick+0x15c>)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0f8:	e02f      	b.n	800e15a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe ff5c 	bl	800cfbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d004      	beq.n	800e116 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	3318      	adds	r3, #24
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe ff53 	bl	800cfbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e11a:	4b25      	ldr	r3, [pc, #148]	@ (800e1b0 <xTaskIncrementTick+0x160>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d903      	bls.n	800e12a <xTaskIncrementTick+0xda>
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e126:	4a22      	ldr	r2, [pc, #136]	@ (800e1b0 <xTaskIncrementTick+0x160>)
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e12e:	4613      	mov	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4413      	add	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4a1f      	ldr	r2, [pc, #124]	@ (800e1b4 <xTaskIncrementTick+0x164>)
 800e138:	441a      	add	r2, r3
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	3304      	adds	r3, #4
 800e13e:	4619      	mov	r1, r3
 800e140:	4610      	mov	r0, r2
 800e142:	f7fe fede 	bl	800cf02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e14a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1b8 <xTaskIncrementTick+0x168>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e150:	429a      	cmp	r2, r3
 800e152:	d3b8      	bcc.n	800e0c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e154:	2301      	movs	r3, #1
 800e156:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e158:	e7b5      	b.n	800e0c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e15a:	4b17      	ldr	r3, [pc, #92]	@ (800e1b8 <xTaskIncrementTick+0x168>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e160:	4914      	ldr	r1, [pc, #80]	@ (800e1b4 <xTaskIncrementTick+0x164>)
 800e162:	4613      	mov	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	440b      	add	r3, r1
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d901      	bls.n	800e176 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e172:	2301      	movs	r3, #1
 800e174:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e176:	4b11      	ldr	r3, [pc, #68]	@ (800e1bc <xTaskIncrementTick+0x16c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d007      	beq.n	800e18e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e17e:	2301      	movs	r3, #1
 800e180:	617b      	str	r3, [r7, #20]
 800e182:	e004      	b.n	800e18e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e184:	4b0e      	ldr	r3, [pc, #56]	@ (800e1c0 <xTaskIncrementTick+0x170>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3301      	adds	r3, #1
 800e18a:	4a0d      	ldr	r2, [pc, #52]	@ (800e1c0 <xTaskIncrementTick+0x170>)
 800e18c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e18e:	697b      	ldr	r3, [r7, #20]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	240011c4 	.word	0x240011c4
 800e19c:	240011a0 	.word	0x240011a0
 800e1a0:	24001154 	.word	0x24001154
 800e1a4:	24001158 	.word	0x24001158
 800e1a8:	240011b4 	.word	0x240011b4
 800e1ac:	240011bc 	.word	0x240011bc
 800e1b0:	240011a4 	.word	0x240011a4
 800e1b4:	24000ccc 	.word	0x24000ccc
 800e1b8:	24000cc8 	.word	0x24000cc8
 800e1bc:	240011b0 	.word	0x240011b0
 800e1c0:	240011ac 	.word	0x240011ac

0800e1c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1ca:	4b28      	ldr	r3, [pc, #160]	@ (800e26c <vTaskSwitchContext+0xa8>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d003      	beq.n	800e1da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1d2:	4b27      	ldr	r3, [pc, #156]	@ (800e270 <vTaskSwitchContext+0xac>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1d8:	e042      	b.n	800e260 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e1da:	4b25      	ldr	r3, [pc, #148]	@ (800e270 <vTaskSwitchContext+0xac>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e0:	4b24      	ldr	r3, [pc, #144]	@ (800e274 <vTaskSwitchContext+0xb0>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60fb      	str	r3, [r7, #12]
 800e1e6:	e011      	b.n	800e20c <vTaskSwitchContext+0x48>
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10b      	bne.n	800e206 <vTaskSwitchContext+0x42>
	__asm volatile
 800e1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	607b      	str	r3, [r7, #4]
}
 800e200:	bf00      	nop
 800e202:	bf00      	nop
 800e204:	e7fd      	b.n	800e202 <vTaskSwitchContext+0x3e>
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	3b01      	subs	r3, #1
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	491a      	ldr	r1, [pc, #104]	@ (800e278 <vTaskSwitchContext+0xb4>)
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	440b      	add	r3, r1
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d0e3      	beq.n	800e1e8 <vTaskSwitchContext+0x24>
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4a13      	ldr	r2, [pc, #76]	@ (800e278 <vTaskSwitchContext+0xb4>)
 800e22c:	4413      	add	r3, r2
 800e22e:	60bb      	str	r3, [r7, #8]
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	605a      	str	r2, [r3, #4]
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	685a      	ldr	r2, [r3, #4]
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	3308      	adds	r3, #8
 800e242:	429a      	cmp	r2, r3
 800e244:	d104      	bne.n	800e250 <vTaskSwitchContext+0x8c>
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	685a      	ldr	r2, [r3, #4]
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	605a      	str	r2, [r3, #4]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	4a09      	ldr	r2, [pc, #36]	@ (800e27c <vTaskSwitchContext+0xb8>)
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	4a06      	ldr	r2, [pc, #24]	@ (800e274 <vTaskSwitchContext+0xb0>)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6013      	str	r3, [r2, #0]
}
 800e260:	bf00      	nop
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	240011c4 	.word	0x240011c4
 800e270:	240011b0 	.word	0x240011b0
 800e274:	240011a4 	.word	0x240011a4
 800e278:	24000ccc 	.word	0x24000ccc
 800e27c:	24000cc8 	.word	0x24000cc8

0800e280 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10b      	bne.n	800e2a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	60fb      	str	r3, [r7, #12]
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	e7fd      	b.n	800e2a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2a8:	4b07      	ldr	r3, [pc, #28]	@ (800e2c8 <vTaskPlaceOnEventList+0x48>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3318      	adds	r3, #24
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7fe fe4a 	bl	800cf4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	6838      	ldr	r0, [r7, #0]
 800e2ba:	f000 fab9 	bl	800e830 <prvAddCurrentTaskToDelayedList>
}
 800e2be:	bf00      	nop
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	24000cc8 	.word	0x24000cc8

0800e2cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d10b      	bne.n	800e2f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	617b      	str	r3, [r7, #20]
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	e7fd      	b.n	800e2f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e320 <vTaskPlaceOnEventListRestricted+0x54>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3318      	adds	r3, #24
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f7fe fdff 	bl	800cf02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e30a:	f04f 33ff 	mov.w	r3, #4294967295
 800e30e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e310:	6879      	ldr	r1, [r7, #4]
 800e312:	68b8      	ldr	r0, [r7, #8]
 800e314:	f000 fa8c 	bl	800e830 <prvAddCurrentTaskToDelayedList>
	}
 800e318:	bf00      	nop
 800e31a:	3718      	adds	r7, #24
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	24000cc8 	.word	0x24000cc8

0800e324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10b      	bne.n	800e352 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	60fb      	str	r3, [r7, #12]
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	e7fd      	b.n	800e34e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	3318      	adds	r3, #24
 800e356:	4618      	mov	r0, r3
 800e358:	f7fe fe30 	bl	800cfbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e35c:	4b1d      	ldr	r3, [pc, #116]	@ (800e3d4 <xTaskRemoveFromEventList+0xb0>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d11d      	bne.n	800e3a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	3304      	adds	r3, #4
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fe fe27 	bl	800cfbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e372:	4b19      	ldr	r3, [pc, #100]	@ (800e3d8 <xTaskRemoveFromEventList+0xb4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d903      	bls.n	800e382 <xTaskRemoveFromEventList+0x5e>
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37e:	4a16      	ldr	r2, [pc, #88]	@ (800e3d8 <xTaskRemoveFromEventList+0xb4>)
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4a13      	ldr	r2, [pc, #76]	@ (800e3dc <xTaskRemoveFromEventList+0xb8>)
 800e390:	441a      	add	r2, r3
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	3304      	adds	r3, #4
 800e396:	4619      	mov	r1, r3
 800e398:	4610      	mov	r0, r2
 800e39a:	f7fe fdb2 	bl	800cf02 <vListInsertEnd>
 800e39e:	e005      	b.n	800e3ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	3318      	adds	r3, #24
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	480e      	ldr	r0, [pc, #56]	@ (800e3e0 <xTaskRemoveFromEventList+0xbc>)
 800e3a8:	f7fe fdab 	bl	800cf02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e3e4 <xTaskRemoveFromEventList+0xc0>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d905      	bls.n	800e3c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3be:	4b0a      	ldr	r3, [pc, #40]	@ (800e3e8 <xTaskRemoveFromEventList+0xc4>)
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e001      	b.n	800e3ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e3ca:	697b      	ldr	r3, [r7, #20]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	240011c4 	.word	0x240011c4
 800e3d8:	240011a4 	.word	0x240011a4
 800e3dc:	24000ccc 	.word	0x24000ccc
 800e3e0:	2400115c 	.word	0x2400115c
 800e3e4:	24000cc8 	.word	0x24000cc8
 800e3e8:	240011b0 	.word	0x240011b0

0800e3ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3f4:	4b06      	ldr	r3, [pc, #24]	@ (800e410 <vTaskInternalSetTimeOutState+0x24>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3fc:	4b05      	ldr	r3, [pc, #20]	@ (800e414 <vTaskInternalSetTimeOutState+0x28>)
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	605a      	str	r2, [r3, #4]
}
 800e404:	bf00      	nop
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	240011b4 	.word	0x240011b4
 800e414:	240011a0 	.word	0x240011a0

0800e418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10b      	bne.n	800e440 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	613b      	str	r3, [r7, #16]
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	e7fd      	b.n	800e43c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10b      	bne.n	800e45e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	60fb      	str	r3, [r7, #12]
}
 800e458:	bf00      	nop
 800e45a:	bf00      	nop
 800e45c:	e7fd      	b.n	800e45a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e45e:	f000 fec3 	bl	800f1e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e462:	4b1d      	ldr	r3, [pc, #116]	@ (800e4d8 <xTaskCheckForTimeOut+0xc0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	69ba      	ldr	r2, [r7, #24]
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47a:	d102      	bne.n	800e482 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	61fb      	str	r3, [r7, #28]
 800e480:	e023      	b.n	800e4ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	4b15      	ldr	r3, [pc, #84]	@ (800e4dc <xTaskCheckForTimeOut+0xc4>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d007      	beq.n	800e49e <xTaskCheckForTimeOut+0x86>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	429a      	cmp	r2, r3
 800e496:	d302      	bcc.n	800e49e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e498:	2301      	movs	r3, #1
 800e49a:	61fb      	str	r3, [r7, #28]
 800e49c:	e015      	b.n	800e4ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d20b      	bcs.n	800e4c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	1ad2      	subs	r2, r2, r3
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7ff ff99 	bl	800e3ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	61fb      	str	r3, [r7, #28]
 800e4be:	e004      	b.n	800e4ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e4ca:	f000 febf 	bl	800f24c <vPortExitCritical>

	return xReturn;
 800e4ce:	69fb      	ldr	r3, [r7, #28]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	240011a0 	.word	0x240011a0
 800e4dc:	240011b4 	.word	0x240011b4

0800e4e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4e4:	4b03      	ldr	r3, [pc, #12]	@ (800e4f4 <vTaskMissedYield+0x14>)
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	601a      	str	r2, [r3, #0]
}
 800e4ea:	bf00      	nop
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	240011b0 	.word	0x240011b0

0800e4f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e500:	f000 f852 	bl	800e5a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e504:	4b06      	ldr	r3, [pc, #24]	@ (800e520 <prvIdleTask+0x28>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d9f9      	bls.n	800e500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e50c:	4b05      	ldr	r3, [pc, #20]	@ (800e524 <prvIdleTask+0x2c>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e51c:	e7f0      	b.n	800e500 <prvIdleTask+0x8>
 800e51e:	bf00      	nop
 800e520:	24000ccc 	.word	0x24000ccc
 800e524:	e000ed04 	.word	0xe000ed04

0800e528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e52e:	2300      	movs	r3, #0
 800e530:	607b      	str	r3, [r7, #4]
 800e532:	e00c      	b.n	800e54e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4a12      	ldr	r2, [pc, #72]	@ (800e588 <prvInitialiseTaskLists+0x60>)
 800e540:	4413      	add	r3, r2
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe fcb0 	bl	800cea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3301      	adds	r3, #1
 800e54c:	607b      	str	r3, [r7, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b37      	cmp	r3, #55	@ 0x37
 800e552:	d9ef      	bls.n	800e534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e554:	480d      	ldr	r0, [pc, #52]	@ (800e58c <prvInitialiseTaskLists+0x64>)
 800e556:	f7fe fca7 	bl	800cea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e55a:	480d      	ldr	r0, [pc, #52]	@ (800e590 <prvInitialiseTaskLists+0x68>)
 800e55c:	f7fe fca4 	bl	800cea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e560:	480c      	ldr	r0, [pc, #48]	@ (800e594 <prvInitialiseTaskLists+0x6c>)
 800e562:	f7fe fca1 	bl	800cea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e566:	480c      	ldr	r0, [pc, #48]	@ (800e598 <prvInitialiseTaskLists+0x70>)
 800e568:	f7fe fc9e 	bl	800cea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e56c:	480b      	ldr	r0, [pc, #44]	@ (800e59c <prvInitialiseTaskLists+0x74>)
 800e56e:	f7fe fc9b 	bl	800cea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e572:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a0 <prvInitialiseTaskLists+0x78>)
 800e574:	4a05      	ldr	r2, [pc, #20]	@ (800e58c <prvInitialiseTaskLists+0x64>)
 800e576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e578:	4b0a      	ldr	r3, [pc, #40]	@ (800e5a4 <prvInitialiseTaskLists+0x7c>)
 800e57a:	4a05      	ldr	r2, [pc, #20]	@ (800e590 <prvInitialiseTaskLists+0x68>)
 800e57c:	601a      	str	r2, [r3, #0]
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	24000ccc 	.word	0x24000ccc
 800e58c:	2400112c 	.word	0x2400112c
 800e590:	24001140 	.word	0x24001140
 800e594:	2400115c 	.word	0x2400115c
 800e598:	24001170 	.word	0x24001170
 800e59c:	24001188 	.word	0x24001188
 800e5a0:	24001154 	.word	0x24001154
 800e5a4:	24001158 	.word	0x24001158

0800e5a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5ae:	e019      	b.n	800e5e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5b0:	f000 fe1a 	bl	800f1e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b4:	4b10      	ldr	r3, [pc, #64]	@ (800e5f8 <prvCheckTasksWaitingTermination+0x50>)
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fe fcfb 	bl	800cfbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e5fc <prvCheckTasksWaitingTermination+0x54>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	4a0b      	ldr	r2, [pc, #44]	@ (800e5fc <prvCheckTasksWaitingTermination+0x54>)
 800e5ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <prvCheckTasksWaitingTermination+0x58>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	4a0a      	ldr	r2, [pc, #40]	@ (800e600 <prvCheckTasksWaitingTermination+0x58>)
 800e5d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5da:	f000 fe37 	bl	800f24c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f848 	bl	800e674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5e4:	4b06      	ldr	r3, [pc, #24]	@ (800e600 <prvCheckTasksWaitingTermination+0x58>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1e1      	bne.n	800e5b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5ec:	bf00      	nop
 800e5ee:	bf00      	nop
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	24001170 	.word	0x24001170
 800e5fc:	2400119c 	.word	0x2400119c
 800e600:	24001184 	.word	0x24001184

0800e604 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e60c:	2300      	movs	r3, #0
 800e60e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e610:	e005      	b.n	800e61e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3301      	adds	r3, #1
 800e616:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	3301      	adds	r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2ba5      	cmp	r3, #165	@ 0xa5
 800e624:	d0f5      	beq.n	800e612 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	089b      	lsrs	r3, r3, #2
 800e62a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	b29b      	uxth	r3, r3
	}
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b086      	sub	sp, #24
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <uxTaskGetStackHighWaterMark+0x14>
 800e64a:	4b09      	ldr	r3, [pc, #36]	@ (800e670 <uxTaskGetStackHighWaterMark+0x34>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	e000      	b.n	800e652 <uxTaskGetStackHighWaterMark+0x16>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e658:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800e65a:	6938      	ldr	r0, [r7, #16]
 800e65c:	f7ff ffd2 	bl	800e604 <prvTaskCheckFreeStackSpace>
 800e660:	4603      	mov	r3, r0
 800e662:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800e664:	68fb      	ldr	r3, [r7, #12]
	}
 800e666:	4618      	mov	r0, r3
 800e668:	3718      	adds	r7, #24
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	24000cc8 	.word	0x24000cc8

0800e674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e682:	2b00      	cmp	r3, #0
 800e684:	d108      	bne.n	800e698 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 ff9c 	bl	800f5c8 <vPortFree>
				vPortFree( pxTCB );
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 ff99 	bl	800f5c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e696:	e019      	b.n	800e6cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d103      	bne.n	800e6aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 ff90 	bl	800f5c8 <vPortFree>
	}
 800e6a8:	e010      	b.n	800e6cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d00b      	beq.n	800e6cc <prvDeleteTCB+0x58>
	__asm volatile
 800e6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b8:	f383 8811 	msr	BASEPRI, r3
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f3bf 8f4f 	dsb	sy
 800e6c4:	60fb      	str	r3, [r7, #12]
}
 800e6c6:	bf00      	nop
 800e6c8:	bf00      	nop
 800e6ca:	e7fd      	b.n	800e6c8 <prvDeleteTCB+0x54>
	}
 800e6cc:	bf00      	nop
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6da:	4b0c      	ldr	r3, [pc, #48]	@ (800e70c <prvResetNextTaskUnblockTime+0x38>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d104      	bne.n	800e6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e710 <prvResetNextTaskUnblockTime+0x3c>)
 800e6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6ec:	e008      	b.n	800e700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ee:	4b07      	ldr	r3, [pc, #28]	@ (800e70c <prvResetNextTaskUnblockTime+0x38>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	4a04      	ldr	r2, [pc, #16]	@ (800e710 <prvResetNextTaskUnblockTime+0x3c>)
 800e6fe:	6013      	str	r3, [r2, #0]
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr
 800e70c:	24001154 	.word	0x24001154
 800e710:	240011bc 	.word	0x240011bc

0800e714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e71a:	4b0b      	ldr	r3, [pc, #44]	@ (800e748 <xTaskGetSchedulerState+0x34>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d102      	bne.n	800e728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e722:	2301      	movs	r3, #1
 800e724:	607b      	str	r3, [r7, #4]
 800e726:	e008      	b.n	800e73a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e728:	4b08      	ldr	r3, [pc, #32]	@ (800e74c <xTaskGetSchedulerState+0x38>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d102      	bne.n	800e736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e730:	2302      	movs	r3, #2
 800e732:	607b      	str	r3, [r7, #4]
 800e734:	e001      	b.n	800e73a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e736:	2300      	movs	r3, #0
 800e738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e73a:	687b      	ldr	r3, [r7, #4]
	}
 800e73c:	4618      	mov	r0, r3
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	240011a8 	.word	0x240011a8
 800e74c:	240011c4 	.word	0x240011c4

0800e750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e75c:	2300      	movs	r3, #0
 800e75e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d058      	beq.n	800e818 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e766:	4b2f      	ldr	r3, [pc, #188]	@ (800e824 <xTaskPriorityDisinherit+0xd4>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d00b      	beq.n	800e788 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e774:	f383 8811 	msr	BASEPRI, r3
 800e778:	f3bf 8f6f 	isb	sy
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	60fb      	str	r3, [r7, #12]
}
 800e782:	bf00      	nop
 800e784:	bf00      	nop
 800e786:	e7fd      	b.n	800e784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10b      	bne.n	800e7a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	60bb      	str	r3, [r7, #8]
}
 800e7a2:	bf00      	nop
 800e7a4:	bf00      	nop
 800e7a6:	e7fd      	b.n	800e7a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ac:	1e5a      	subs	r2, r3, #1
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d02c      	beq.n	800e818 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d128      	bne.n	800e818 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fbf6 	bl	800cfbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e828 <xTaskPriorityDisinherit+0xd8>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d903      	bls.n	800e7f8 <xTaskPriorityDisinherit+0xa8>
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f4:	4a0c      	ldr	r2, [pc, #48]	@ (800e828 <xTaskPriorityDisinherit+0xd8>)
 800e7f6:	6013      	str	r3, [r2, #0]
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4a09      	ldr	r2, [pc, #36]	@ (800e82c <xTaskPriorityDisinherit+0xdc>)
 800e806:	441a      	add	r2, r3
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	3304      	adds	r3, #4
 800e80c:	4619      	mov	r1, r3
 800e80e:	4610      	mov	r0, r2
 800e810:	f7fe fb77 	bl	800cf02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e814:	2301      	movs	r3, #1
 800e816:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e818:	697b      	ldr	r3, [r7, #20]
	}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3718      	adds	r7, #24
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	24000cc8 	.word	0x24000cc8
 800e828:	240011a4 	.word	0x240011a4
 800e82c:	24000ccc 	.word	0x24000ccc

0800e830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e83a:	4b21      	ldr	r3, [pc, #132]	@ (800e8c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e840:	4b20      	ldr	r3, [pc, #128]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3304      	adds	r3, #4
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe fbb8 	bl	800cfbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e852:	d10a      	bne.n	800e86a <prvAddCurrentTaskToDelayedList+0x3a>
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d007      	beq.n	800e86a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e85a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	3304      	adds	r3, #4
 800e860:	4619      	mov	r1, r3
 800e862:	4819      	ldr	r0, [pc, #100]	@ (800e8c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e864:	f7fe fb4d 	bl	800cf02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e868:	e026      	b.n	800e8b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4413      	add	r3, r2
 800e870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e872:	4b14      	ldr	r3, [pc, #80]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d209      	bcs.n	800e896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e882:	4b12      	ldr	r3, [pc, #72]	@ (800e8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	4b0f      	ldr	r3, [pc, #60]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3304      	adds	r3, #4
 800e88c:	4619      	mov	r1, r3
 800e88e:	4610      	mov	r0, r2
 800e890:	f7fe fb5b 	bl	800cf4a <vListInsert>
}
 800e894:	e010      	b.n	800e8b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e896:	4b0e      	ldr	r3, [pc, #56]	@ (800e8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	4b0a      	ldr	r3, [pc, #40]	@ (800e8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	3304      	adds	r3, #4
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	f7fe fb51 	bl	800cf4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d202      	bcs.n	800e8b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8b2:	4a08      	ldr	r2, [pc, #32]	@ (800e8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	6013      	str	r3, [r2, #0]
}
 800e8b8:	bf00      	nop
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	240011a0 	.word	0x240011a0
 800e8c4:	24000cc8 	.word	0x24000cc8
 800e8c8:	24001188 	.word	0x24001188
 800e8cc:	24001158 	.word	0x24001158
 800e8d0:	24001154 	.word	0x24001154
 800e8d4:	240011bc 	.word	0x240011bc

0800e8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08a      	sub	sp, #40	@ 0x28
 800e8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e8e2:	f000 fb13 	bl	800ef0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e8e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e95c <xTimerCreateTimerTask+0x84>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d021      	beq.n	800e932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e8f6:	1d3a      	adds	r2, r7, #4
 800e8f8:	f107 0108 	add.w	r1, r7, #8
 800e8fc:	f107 030c 	add.w	r3, r7, #12
 800e900:	4618      	mov	r0, r3
 800e902:	f7fe fab7 	bl	800ce74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e906:	6879      	ldr	r1, [r7, #4]
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	9202      	str	r2, [sp, #8]
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	2302      	movs	r3, #2
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	2300      	movs	r3, #0
 800e916:	460a      	mov	r2, r1
 800e918:	4911      	ldr	r1, [pc, #68]	@ (800e960 <xTimerCreateTimerTask+0x88>)
 800e91a:	4812      	ldr	r0, [pc, #72]	@ (800e964 <xTimerCreateTimerTask+0x8c>)
 800e91c:	f7ff f872 	bl	800da04 <xTaskCreateStatic>
 800e920:	4603      	mov	r3, r0
 800e922:	4a11      	ldr	r2, [pc, #68]	@ (800e968 <xTimerCreateTimerTask+0x90>)
 800e924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e926:	4b10      	ldr	r3, [pc, #64]	@ (800e968 <xTimerCreateTimerTask+0x90>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e92e:	2301      	movs	r3, #1
 800e930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d10b      	bne.n	800e950 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	613b      	str	r3, [r7, #16]
}
 800e94a:	bf00      	nop
 800e94c:	bf00      	nop
 800e94e:	e7fd      	b.n	800e94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e950:	697b      	ldr	r3, [r7, #20]
}
 800e952:	4618      	mov	r0, r3
 800e954:	3718      	adds	r7, #24
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	240011f8 	.word	0x240011f8
 800e960:	08014b74 	.word	0x08014b74
 800e964:	0800eaa5 	.word	0x0800eaa5
 800e968:	240011fc 	.word	0x240011fc

0800e96c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08a      	sub	sp, #40	@ 0x28
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e97a:	2300      	movs	r3, #0
 800e97c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d10b      	bne.n	800e99c <xTimerGenericCommand+0x30>
	__asm volatile
 800e984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	623b      	str	r3, [r7, #32]
}
 800e996:	bf00      	nop
 800e998:	bf00      	nop
 800e99a:	e7fd      	b.n	800e998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e99c:	4b19      	ldr	r3, [pc, #100]	@ (800ea04 <xTimerGenericCommand+0x98>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d02a      	beq.n	800e9fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2b05      	cmp	r3, #5
 800e9b4:	dc18      	bgt.n	800e9e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9b6:	f7ff fead 	bl	800e714 <xTaskGetSchedulerState>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	d109      	bne.n	800e9d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9c0:	4b10      	ldr	r3, [pc, #64]	@ (800ea04 <xTimerGenericCommand+0x98>)
 800e9c2:	6818      	ldr	r0, [r3, #0]
 800e9c4:	f107 0110 	add.w	r1, r7, #16
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9cc:	f7fe fc2a 	bl	800d224 <xQueueGenericSend>
 800e9d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9d2:	e012      	b.n	800e9fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9d4:	4b0b      	ldr	r3, [pc, #44]	@ (800ea04 <xTimerGenericCommand+0x98>)
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	f107 0110 	add.w	r1, r7, #16
 800e9dc:	2300      	movs	r3, #0
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f7fe fc20 	bl	800d224 <xQueueGenericSend>
 800e9e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9e6:	e008      	b.n	800e9fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ea04 <xTimerGenericCommand+0x98>)
 800e9ea:	6818      	ldr	r0, [r3, #0]
 800e9ec:	f107 0110 	add.w	r1, r7, #16
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	f7fe fd18 	bl	800d428 <xQueueGenericSendFromISR>
 800e9f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3728      	adds	r7, #40	@ 0x28
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	240011f8 	.word	0x240011f8

0800ea08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b088      	sub	sp, #32
 800ea0c:	af02      	add	r7, sp, #8
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea12:	4b23      	ldr	r3, [pc, #140]	@ (800eaa0 <prvProcessExpiredTimer+0x98>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	3304      	adds	r3, #4
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fe facb 	bl	800cfbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea2c:	f003 0304 	and.w	r3, r3, #4
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d023      	beq.n	800ea7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	699a      	ldr	r2, [r3, #24]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	18d1      	adds	r1, r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	6978      	ldr	r0, [r7, #20]
 800ea42:	f000 f8d5 	bl	800ebf0 <prvInsertTimerInActiveList>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d020      	beq.n	800ea8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	2300      	movs	r3, #0
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	2100      	movs	r1, #0
 800ea56:	6978      	ldr	r0, [r7, #20]
 800ea58:	f7ff ff88 	bl	800e96c <xTimerGenericCommand>
 800ea5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d114      	bne.n	800ea8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	60fb      	str	r3, [r7, #12]
}
 800ea76:	bf00      	nop
 800ea78:	bf00      	nop
 800ea7a:	e7fd      	b.n	800ea78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea82:	f023 0301 	bic.w	r3, r3, #1
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	6a1b      	ldr	r3, [r3, #32]
 800ea92:	6978      	ldr	r0, [r7, #20]
 800ea94:	4798      	blx	r3
}
 800ea96:	bf00      	nop
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	240011f0 	.word	0x240011f0

0800eaa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eaac:	f107 0308 	add.w	r3, r7, #8
 800eab0:	4618      	mov	r0, r3
 800eab2:	f000 f859 	bl	800eb68 <prvGetNextExpireTime>
 800eab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	4619      	mov	r1, r3
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f000 f805 	bl	800eacc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eac2:	f000 f8d7 	bl	800ec74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eac6:	bf00      	nop
 800eac8:	e7f0      	b.n	800eaac <prvTimerTask+0x8>
	...

0800eacc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ead6:	f7ff f9d9 	bl	800de8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eada:	f107 0308 	add.w	r3, r7, #8
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 f866 	bl	800ebb0 <prvSampleTimeNow>
 800eae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d130      	bne.n	800eb4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10a      	bne.n	800eb08 <prvProcessTimerOrBlockTask+0x3c>
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d806      	bhi.n	800eb08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eafa:	f7ff f9d5 	bl	800dea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eafe:	68f9      	ldr	r1, [r7, #12]
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7ff ff81 	bl	800ea08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb06:	e024      	b.n	800eb52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d008      	beq.n	800eb20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb0e:	4b13      	ldr	r3, [pc, #76]	@ (800eb5c <prvProcessTimerOrBlockTask+0x90>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <prvProcessTimerOrBlockTask+0x50>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e000      	b.n	800eb1e <prvProcessTimerOrBlockTask+0x52>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb20:	4b0f      	ldr	r3, [pc, #60]	@ (800eb60 <prvProcessTimerOrBlockTask+0x94>)
 800eb22:	6818      	ldr	r0, [r3, #0]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	f7fe ff35 	bl	800d99c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb32:	f7ff f9b9 	bl	800dea8 <xTaskResumeAll>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10a      	bne.n	800eb52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb3c:	4b09      	ldr	r3, [pc, #36]	@ (800eb64 <prvProcessTimerOrBlockTask+0x98>)
 800eb3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	f3bf 8f4f 	dsb	sy
 800eb48:	f3bf 8f6f 	isb	sy
}
 800eb4c:	e001      	b.n	800eb52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb4e:	f7ff f9ab 	bl	800dea8 <xTaskResumeAll>
}
 800eb52:	bf00      	nop
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	240011f4 	.word	0x240011f4
 800eb60:	240011f8 	.word	0x240011f8
 800eb64:	e000ed04 	.word	0xe000ed04

0800eb68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb70:	4b0e      	ldr	r3, [pc, #56]	@ (800ebac <prvGetNextExpireTime+0x44>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <prvGetNextExpireTime+0x16>
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	e000      	b.n	800eb80 <prvGetNextExpireTime+0x18>
 800eb7e:	2200      	movs	r2, #0
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d105      	bne.n	800eb98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb8c:	4b07      	ldr	r3, [pc, #28]	@ (800ebac <prvGetNextExpireTime+0x44>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	60fb      	str	r3, [r7, #12]
 800eb96:	e001      	b.n	800eb9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	240011f0 	.word	0x240011f0

0800ebb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebb8:	f7ff fa14 	bl	800dfe4 <xTaskGetTickCount>
 800ebbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebbe:	4b0b      	ldr	r3, [pc, #44]	@ (800ebec <prvSampleTimeNow+0x3c>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d205      	bcs.n	800ebd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebc8:	f000 f93a 	bl	800ee40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	e002      	b.n	800ebda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebda:	4a04      	ldr	r2, [pc, #16]	@ (800ebec <prvSampleTimeNow+0x3c>)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	24001200 	.word	0x24001200

0800ebf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d812      	bhi.n	800ec3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	1ad2      	subs	r2, r2, r3
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d302      	bcc.n	800ec2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec24:	2301      	movs	r3, #1
 800ec26:	617b      	str	r3, [r7, #20]
 800ec28:	e01b      	b.n	800ec62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec2a:	4b10      	ldr	r3, [pc, #64]	@ (800ec6c <prvInsertTimerInActiveList+0x7c>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	3304      	adds	r3, #4
 800ec32:	4619      	mov	r1, r3
 800ec34:	4610      	mov	r0, r2
 800ec36:	f7fe f988 	bl	800cf4a <vListInsert>
 800ec3a:	e012      	b.n	800ec62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d206      	bcs.n	800ec52 <prvInsertTimerInActiveList+0x62>
 800ec44:	68ba      	ldr	r2, [r7, #8]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d302      	bcc.n	800ec52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	617b      	str	r3, [r7, #20]
 800ec50:	e007      	b.n	800ec62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec52:	4b07      	ldr	r3, [pc, #28]	@ (800ec70 <prvInsertTimerInActiveList+0x80>)
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3304      	adds	r3, #4
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	4610      	mov	r0, r2
 800ec5e:	f7fe f974 	bl	800cf4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec62:	697b      	ldr	r3, [r7, #20]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	240011f4 	.word	0x240011f4
 800ec70:	240011f0 	.word	0x240011f0

0800ec74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08e      	sub	sp, #56	@ 0x38
 800ec78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec7a:	e0ce      	b.n	800ee1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	da19      	bge.n	800ecb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec82:	1d3b      	adds	r3, r7, #4
 800ec84:	3304      	adds	r3, #4
 800ec86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10b      	bne.n	800eca6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ec8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	61fb      	str	r3, [r7, #28]
}
 800eca0:	bf00      	nop
 800eca2:	bf00      	nop
 800eca4:	e7fd      	b.n	800eca2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecac:	6850      	ldr	r0, [r2, #4]
 800ecae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecb0:	6892      	ldr	r2, [r2, #8]
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f2c0 80ae 	blt.w	800ee1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eccc:	3304      	adds	r3, #4
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe f974 	bl	800cfbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecd4:	463b      	mov	r3, r7
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7ff ff6a 	bl	800ebb0 <prvSampleTimeNow>
 800ecdc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b09      	cmp	r3, #9
 800ece2:	f200 8097 	bhi.w	800ee14 <prvProcessReceivedCommands+0x1a0>
 800ece6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecec <prvProcessReceivedCommands+0x78>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed15 	.word	0x0800ed15
 800ecf0:	0800ed15 	.word	0x0800ed15
 800ecf4:	0800ed15 	.word	0x0800ed15
 800ecf8:	0800ed8b 	.word	0x0800ed8b
 800ecfc:	0800ed9f 	.word	0x0800ed9f
 800ed00:	0800edeb 	.word	0x0800edeb
 800ed04:	0800ed15 	.word	0x0800ed15
 800ed08:	0800ed15 	.word	0x0800ed15
 800ed0c:	0800ed8b 	.word	0x0800ed8b
 800ed10:	0800ed9f 	.word	0x0800ed9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed1a:	f043 0301 	orr.w	r3, r3, #1
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	18d1      	adds	r1, r2, r3
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed34:	f7ff ff5c 	bl	800ebf0 <prvInsertTimerInActiveList>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d06c      	beq.n	800ee18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed40:	6a1b      	ldr	r3, [r3, #32]
 800ed42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed4c:	f003 0304 	and.w	r3, r3, #4
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d061      	beq.n	800ee18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed58:	699b      	ldr	r3, [r3, #24]
 800ed5a:	441a      	add	r2, r3
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	2300      	movs	r3, #0
 800ed62:	2100      	movs	r1, #0
 800ed64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed66:	f7ff fe01 	bl	800e96c <xTimerGenericCommand>
 800ed6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d152      	bne.n	800ee18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	61bb      	str	r3, [r7, #24]
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	e7fd      	b.n	800ed86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed90:	f023 0301 	bic.w	r3, r3, #1
 800ed94:	b2da      	uxtb	r2, r3
 800ed96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ed9c:	e03d      	b.n	800ee1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eda4:	f043 0301 	orr.w	r3, r3, #1
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edb0:	68ba      	ldr	r2, [r7, #8]
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d10b      	bne.n	800edd6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800edbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	617b      	str	r3, [r7, #20]
}
 800edd0:	bf00      	nop
 800edd2:	bf00      	nop
 800edd4:	e7fd      	b.n	800edd2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800edd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd8:	699a      	ldr	r2, [r3, #24]
 800edda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eddc:	18d1      	adds	r1, r2, r3
 800edde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ede2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ede4:	f7ff ff04 	bl	800ebf0 <prvInsertTimerInActiveList>
					break;
 800ede8:	e017      	b.n	800ee1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800edea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d103      	bne.n	800ee00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800edf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edfa:	f000 fbe5 	bl	800f5c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800edfe:	e00c      	b.n	800ee1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee06:	f023 0301 	bic.w	r3, r3, #1
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ee12:	e002      	b.n	800ee1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ee14:	bf00      	nop
 800ee16:	e000      	b.n	800ee1a <prvProcessReceivedCommands+0x1a6>
					break;
 800ee18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee1a:	4b08      	ldr	r3, [pc, #32]	@ (800ee3c <prvProcessReceivedCommands+0x1c8>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	1d39      	adds	r1, r7, #4
 800ee20:	2200      	movs	r2, #0
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe fb9e 	bl	800d564 <xQueueReceive>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f47f af26 	bne.w	800ec7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ee30:	bf00      	nop
 800ee32:	bf00      	nop
 800ee34:	3730      	adds	r7, #48	@ 0x30
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	240011f8 	.word	0x240011f8

0800ee40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b088      	sub	sp, #32
 800ee44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee46:	e049      	b.n	800eedc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee48:	4b2e      	ldr	r3, [pc, #184]	@ (800ef04 <prvSwitchTimerLists+0xc4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee52:	4b2c      	ldr	r3, [pc, #176]	@ (800ef04 <prvSwitchTimerLists+0xc4>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe f8ab 	bl	800cfbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee74:	f003 0304 	and.w	r3, r3, #4
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d02f      	beq.n	800eedc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	4413      	add	r3, r2
 800ee84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d90e      	bls.n	800eeac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ef04 <prvSwitchTimerLists+0xc4>)
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3304      	adds	r3, #4
 800eea2:	4619      	mov	r1, r3
 800eea4:	4610      	mov	r0, r2
 800eea6:	f7fe f850 	bl	800cf4a <vListInsert>
 800eeaa:	e017      	b.n	800eedc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eeac:	2300      	movs	r3, #0
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f7ff fd58 	bl	800e96c <xTimerGenericCommand>
 800eebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10b      	bne.n	800eedc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	603b      	str	r3, [r7, #0]
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	e7fd      	b.n	800eed8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eedc:	4b09      	ldr	r3, [pc, #36]	@ (800ef04 <prvSwitchTimerLists+0xc4>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1b0      	bne.n	800ee48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eee6:	4b07      	ldr	r3, [pc, #28]	@ (800ef04 <prvSwitchTimerLists+0xc4>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eeec:	4b06      	ldr	r3, [pc, #24]	@ (800ef08 <prvSwitchTimerLists+0xc8>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a04      	ldr	r2, [pc, #16]	@ (800ef04 <prvSwitchTimerLists+0xc4>)
 800eef2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eef4:	4a04      	ldr	r2, [pc, #16]	@ (800ef08 <prvSwitchTimerLists+0xc8>)
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	6013      	str	r3, [r2, #0]
}
 800eefa:	bf00      	nop
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	240011f0 	.word	0x240011f0
 800ef08:	240011f4 	.word	0x240011f4

0800ef0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef12:	f000 f969 	bl	800f1e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef16:	4b15      	ldr	r3, [pc, #84]	@ (800ef6c <prvCheckForValidListAndQueue+0x60>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d120      	bne.n	800ef60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef1e:	4814      	ldr	r0, [pc, #80]	@ (800ef70 <prvCheckForValidListAndQueue+0x64>)
 800ef20:	f7fd ffc2 	bl	800cea8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef24:	4813      	ldr	r0, [pc, #76]	@ (800ef74 <prvCheckForValidListAndQueue+0x68>)
 800ef26:	f7fd ffbf 	bl	800cea8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef2a:	4b13      	ldr	r3, [pc, #76]	@ (800ef78 <prvCheckForValidListAndQueue+0x6c>)
 800ef2c:	4a10      	ldr	r2, [pc, #64]	@ (800ef70 <prvCheckForValidListAndQueue+0x64>)
 800ef2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef30:	4b12      	ldr	r3, [pc, #72]	@ (800ef7c <prvCheckForValidListAndQueue+0x70>)
 800ef32:	4a10      	ldr	r2, [pc, #64]	@ (800ef74 <prvCheckForValidListAndQueue+0x68>)
 800ef34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef36:	2300      	movs	r3, #0
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	4b11      	ldr	r3, [pc, #68]	@ (800ef80 <prvCheckForValidListAndQueue+0x74>)
 800ef3c:	4a11      	ldr	r2, [pc, #68]	@ (800ef84 <prvCheckForValidListAndQueue+0x78>)
 800ef3e:	2110      	movs	r1, #16
 800ef40:	200a      	movs	r0, #10
 800ef42:	f7fe f8cf 	bl	800d0e4 <xQueueGenericCreateStatic>
 800ef46:	4603      	mov	r3, r0
 800ef48:	4a08      	ldr	r2, [pc, #32]	@ (800ef6c <prvCheckForValidListAndQueue+0x60>)
 800ef4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef4c:	4b07      	ldr	r3, [pc, #28]	@ (800ef6c <prvCheckForValidListAndQueue+0x60>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d005      	beq.n	800ef60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef54:	4b05      	ldr	r3, [pc, #20]	@ (800ef6c <prvCheckForValidListAndQueue+0x60>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	490b      	ldr	r1, [pc, #44]	@ (800ef88 <prvCheckForValidListAndQueue+0x7c>)
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe fcf4 	bl	800d948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef60:	f000 f974 	bl	800f24c <vPortExitCritical>
}
 800ef64:	bf00      	nop
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	240011f8 	.word	0x240011f8
 800ef70:	240011c8 	.word	0x240011c8
 800ef74:	240011dc 	.word	0x240011dc
 800ef78:	240011f0 	.word	0x240011f0
 800ef7c:	240011f4 	.word	0x240011f4
 800ef80:	240012a4 	.word	0x240012a4
 800ef84:	24001204 	.word	0x24001204
 800ef88:	08014b7c 	.word	0x08014b7c

0800ef8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3b04      	subs	r3, #4
 800ef9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800efa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3b04      	subs	r3, #4
 800efaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	f023 0201 	bic.w	r2, r3, #1
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3b04      	subs	r3, #4
 800efba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efbc:	4a0c      	ldr	r2, [pc, #48]	@ (800eff0 <pxPortInitialiseStack+0x64>)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3b14      	subs	r3, #20
 800efc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3b04      	subs	r3, #4
 800efd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f06f 0202 	mvn.w	r2, #2
 800efda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	3b20      	subs	r3, #32
 800efe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efe2:	68fb      	ldr	r3, [r7, #12]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	0800eff5 	.word	0x0800eff5

0800eff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800effe:	4b13      	ldr	r3, [pc, #76]	@ (800f04c <prvTaskExitError+0x58>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f006:	d00b      	beq.n	800f020 <prvTaskExitError+0x2c>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f00c:	f383 8811 	msr	BASEPRI, r3
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	f3bf 8f4f 	dsb	sy
 800f018:	60fb      	str	r3, [r7, #12]
}
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
 800f01e:	e7fd      	b.n	800f01c <prvTaskExitError+0x28>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	60bb      	str	r3, [r7, #8]
}
 800f032:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f034:	bf00      	nop
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d0fc      	beq.n	800f036 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f03c:	bf00      	nop
 800f03e:	bf00      	nop
 800f040:	3714      	adds	r7, #20
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	2400009c 	.word	0x2400009c

0800f050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f050:	4b07      	ldr	r3, [pc, #28]	@ (800f070 <pxCurrentTCBConst2>)
 800f052:	6819      	ldr	r1, [r3, #0]
 800f054:	6808      	ldr	r0, [r1, #0]
 800f056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	f380 8809 	msr	PSP, r0
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f04f 0000 	mov.w	r0, #0
 800f066:	f380 8811 	msr	BASEPRI, r0
 800f06a:	4770      	bx	lr
 800f06c:	f3af 8000 	nop.w

0800f070 <pxCurrentTCBConst2>:
 800f070:	24000cc8 	.word	0x24000cc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop

0800f078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f078:	4808      	ldr	r0, [pc, #32]	@ (800f09c <prvPortStartFirstTask+0x24>)
 800f07a:	6800      	ldr	r0, [r0, #0]
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	f380 8808 	msr	MSP, r0
 800f082:	f04f 0000 	mov.w	r0, #0
 800f086:	f380 8814 	msr	CONTROL, r0
 800f08a:	b662      	cpsie	i
 800f08c:	b661      	cpsie	f
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	df00      	svc	0
 800f098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f09a:	bf00      	nop
 800f09c:	e000ed08 	.word	0xe000ed08

0800f0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b086      	sub	sp, #24
 800f0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0a6:	4b47      	ldr	r3, [pc, #284]	@ (800f1c4 <xPortStartScheduler+0x124>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a47      	ldr	r2, [pc, #284]	@ (800f1c8 <xPortStartScheduler+0x128>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d10b      	bne.n	800f0c8 <xPortStartScheduler+0x28>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	613b      	str	r3, [r7, #16]
}
 800f0c2:	bf00      	nop
 800f0c4:	bf00      	nop
 800f0c6:	e7fd      	b.n	800f0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0c8:	4b3e      	ldr	r3, [pc, #248]	@ (800f1c4 <xPortStartScheduler+0x124>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a3f      	ldr	r2, [pc, #252]	@ (800f1cc <xPortStartScheduler+0x12c>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d10b      	bne.n	800f0ea <xPortStartScheduler+0x4a>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	60fb      	str	r3, [r7, #12]
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop
 800f0e8:	e7fd      	b.n	800f0e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0ea:	4b39      	ldr	r3, [pc, #228]	@ (800f1d0 <xPortStartScheduler+0x130>)
 800f0ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	22ff      	movs	r2, #255	@ 0xff
 800f0fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	b2db      	uxtb	r3, r3
 800f102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f104:	78fb      	ldrb	r3, [r7, #3]
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	4b31      	ldr	r3, [pc, #196]	@ (800f1d4 <xPortStartScheduler+0x134>)
 800f110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f112:	4b31      	ldr	r3, [pc, #196]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f114:	2207      	movs	r2, #7
 800f116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f118:	e009      	b.n	800f12e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f11a:	4b2f      	ldr	r3, [pc, #188]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3b01      	subs	r3, #1
 800f120:	4a2d      	ldr	r2, [pc, #180]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f124:	78fb      	ldrb	r3, [r7, #3]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	005b      	lsls	r3, r3, #1
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f12e:	78fb      	ldrb	r3, [r7, #3]
 800f130:	b2db      	uxtb	r3, r3
 800f132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f136:	2b80      	cmp	r3, #128	@ 0x80
 800f138:	d0ef      	beq.n	800f11a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f13a:	4b27      	ldr	r3, [pc, #156]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f1c3 0307 	rsb	r3, r3, #7
 800f142:	2b04      	cmp	r3, #4
 800f144:	d00b      	beq.n	800f15e <xPortStartScheduler+0xbe>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	60bb      	str	r3, [r7, #8]
}
 800f158:	bf00      	nop
 800f15a:	bf00      	nop
 800f15c:	e7fd      	b.n	800f15a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f15e:	4b1e      	ldr	r3, [pc, #120]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	021b      	lsls	r3, r3, #8
 800f164:	4a1c      	ldr	r2, [pc, #112]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f168:	4b1b      	ldr	r3, [pc, #108]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f170:	4a19      	ldr	r2, [pc, #100]	@ (800f1d8 <xPortStartScheduler+0x138>)
 800f172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	b2da      	uxtb	r2, r3
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f17c:	4b17      	ldr	r3, [pc, #92]	@ (800f1dc <xPortStartScheduler+0x13c>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a16      	ldr	r2, [pc, #88]	@ (800f1dc <xPortStartScheduler+0x13c>)
 800f182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f188:	4b14      	ldr	r3, [pc, #80]	@ (800f1dc <xPortStartScheduler+0x13c>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4a13      	ldr	r2, [pc, #76]	@ (800f1dc <xPortStartScheduler+0x13c>)
 800f18e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f194:	f000 f8da 	bl	800f34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f198:	4b11      	ldr	r3, [pc, #68]	@ (800f1e0 <xPortStartScheduler+0x140>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f19e:	f000 f8f9 	bl	800f394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1a2:	4b10      	ldr	r3, [pc, #64]	@ (800f1e4 <xPortStartScheduler+0x144>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a0f      	ldr	r2, [pc, #60]	@ (800f1e4 <xPortStartScheduler+0x144>)
 800f1a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f1ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1ae:	f7ff ff63 	bl	800f078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1b2:	f7ff f807 	bl	800e1c4 <vTaskSwitchContext>
	prvTaskExitError();
 800f1b6:	f7ff ff1d 	bl	800eff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3718      	adds	r7, #24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	e000ed00 	.word	0xe000ed00
 800f1c8:	410fc271 	.word	0x410fc271
 800f1cc:	410fc270 	.word	0x410fc270
 800f1d0:	e000e400 	.word	0xe000e400
 800f1d4:	240012f4 	.word	0x240012f4
 800f1d8:	240012f8 	.word	0x240012f8
 800f1dc:	e000ed20 	.word	0xe000ed20
 800f1e0:	2400009c 	.word	0x2400009c
 800f1e4:	e000ef34 	.word	0xe000ef34

0800f1e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f2:	f383 8811 	msr	BASEPRI, r3
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	607b      	str	r3, [r7, #4]
}
 800f200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f202:	4b10      	ldr	r3, [pc, #64]	@ (800f244 <vPortEnterCritical+0x5c>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	3301      	adds	r3, #1
 800f208:	4a0e      	ldr	r2, [pc, #56]	@ (800f244 <vPortEnterCritical+0x5c>)
 800f20a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f20c:	4b0d      	ldr	r3, [pc, #52]	@ (800f244 <vPortEnterCritical+0x5c>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b01      	cmp	r3, #1
 800f212:	d110      	bne.n	800f236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f214:	4b0c      	ldr	r3, [pc, #48]	@ (800f248 <vPortEnterCritical+0x60>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00b      	beq.n	800f236 <vPortEnterCritical+0x4e>
	__asm volatile
 800f21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f222:	f383 8811 	msr	BASEPRI, r3
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	603b      	str	r3, [r7, #0]
}
 800f230:	bf00      	nop
 800f232:	bf00      	nop
 800f234:	e7fd      	b.n	800f232 <vPortEnterCritical+0x4a>
	}
}
 800f236:	bf00      	nop
 800f238:	370c      	adds	r7, #12
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	2400009c 	.word	0x2400009c
 800f248:	e000ed04 	.word	0xe000ed04

0800f24c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f252:	4b12      	ldr	r3, [pc, #72]	@ (800f29c <vPortExitCritical+0x50>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d10b      	bne.n	800f272 <vPortExitCritical+0x26>
	__asm volatile
 800f25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	607b      	str	r3, [r7, #4]
}
 800f26c:	bf00      	nop
 800f26e:	bf00      	nop
 800f270:	e7fd      	b.n	800f26e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f272:	4b0a      	ldr	r3, [pc, #40]	@ (800f29c <vPortExitCritical+0x50>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	3b01      	subs	r3, #1
 800f278:	4a08      	ldr	r2, [pc, #32]	@ (800f29c <vPortExitCritical+0x50>)
 800f27a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f27c:	4b07      	ldr	r3, [pc, #28]	@ (800f29c <vPortExitCritical+0x50>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d105      	bne.n	800f290 <vPortExitCritical+0x44>
 800f284:	2300      	movs	r3, #0
 800f286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	f383 8811 	msr	BASEPRI, r3
}
 800f28e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	2400009c 	.word	0x2400009c

0800f2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2a0:	f3ef 8009 	mrs	r0, PSP
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	4b15      	ldr	r3, [pc, #84]	@ (800f300 <pxCurrentTCBConst>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	f01e 0f10 	tst.w	lr, #16
 800f2b0:	bf08      	it	eq
 800f2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ba:	6010      	str	r0, [r2, #0]
 800f2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f2c4:	f380 8811 	msr	BASEPRI, r0
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f7fe ff78 	bl	800e1c4 <vTaskSwitchContext>
 800f2d4:	f04f 0000 	mov.w	r0, #0
 800f2d8:	f380 8811 	msr	BASEPRI, r0
 800f2dc:	bc09      	pop	{r0, r3}
 800f2de:	6819      	ldr	r1, [r3, #0]
 800f2e0:	6808      	ldr	r0, [r1, #0]
 800f2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e6:	f01e 0f10 	tst.w	lr, #16
 800f2ea:	bf08      	it	eq
 800f2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2f0:	f380 8809 	msr	PSP, r0
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	f3af 8000 	nop.w

0800f300 <pxCurrentTCBConst>:
 800f300:	24000cc8 	.word	0x24000cc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop

0800f308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	607b      	str	r3, [r7, #4]
}
 800f320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f322:	f7fe fe95 	bl	800e050 <xTaskIncrementTick>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f32c:	4b06      	ldr	r3, [pc, #24]	@ (800f348 <xPortSysTickHandler+0x40>)
 800f32e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	2300      	movs	r3, #0
 800f336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	f383 8811 	msr	BASEPRI, r3
}
 800f33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f350:	4b0b      	ldr	r3, [pc, #44]	@ (800f380 <vPortSetupTimerInterrupt+0x34>)
 800f352:	2200      	movs	r2, #0
 800f354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f356:	4b0b      	ldr	r3, [pc, #44]	@ (800f384 <vPortSetupTimerInterrupt+0x38>)
 800f358:	2200      	movs	r2, #0
 800f35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f35c:	4b0a      	ldr	r3, [pc, #40]	@ (800f388 <vPortSetupTimerInterrupt+0x3c>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a0a      	ldr	r2, [pc, #40]	@ (800f38c <vPortSetupTimerInterrupt+0x40>)
 800f362:	fba2 2303 	umull	r2, r3, r2, r3
 800f366:	099b      	lsrs	r3, r3, #6
 800f368:	4a09      	ldr	r2, [pc, #36]	@ (800f390 <vPortSetupTimerInterrupt+0x44>)
 800f36a:	3b01      	subs	r3, #1
 800f36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f36e:	4b04      	ldr	r3, [pc, #16]	@ (800f380 <vPortSetupTimerInterrupt+0x34>)
 800f370:	2207      	movs	r2, #7
 800f372:	601a      	str	r2, [r3, #0]
}
 800f374:	bf00      	nop
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	e000e010 	.word	0xe000e010
 800f384:	e000e018 	.word	0xe000e018
 800f388:	24000000 	.word	0x24000000
 800f38c:	10624dd3 	.word	0x10624dd3
 800f390:	e000e014 	.word	0xe000e014

0800f394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f3a4 <vPortEnableVFP+0x10>
 800f398:	6801      	ldr	r1, [r0, #0]
 800f39a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f39e:	6001      	str	r1, [r0, #0]
 800f3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3a2:	bf00      	nop
 800f3a4:	e000ed88 	.word	0xe000ed88

0800f3a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3ae:	f3ef 8305 	mrs	r3, IPSR
 800f3b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b0f      	cmp	r3, #15
 800f3b8:	d915      	bls.n	800f3e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3ba:	4a18      	ldr	r2, [pc, #96]	@ (800f41c <vPortValidateInterruptPriority+0x74>)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3c4:	4b16      	ldr	r3, [pc, #88]	@ (800f420 <vPortValidateInterruptPriority+0x78>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	7afa      	ldrb	r2, [r7, #11]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d20b      	bcs.n	800f3e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	607b      	str	r3, [r7, #4]
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop
 800f3e4:	e7fd      	b.n	800f3e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f424 <vPortValidateInterruptPriority+0x7c>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f428 <vPortValidateInterruptPriority+0x80>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d90b      	bls.n	800f40e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	603b      	str	r3, [r7, #0]
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	e7fd      	b.n	800f40a <vPortValidateInterruptPriority+0x62>
	}
 800f40e:	bf00      	nop
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	e000e3f0 	.word	0xe000e3f0
 800f420:	240012f4 	.word	0x240012f4
 800f424:	e000ed0c 	.word	0xe000ed0c
 800f428:	240012f8 	.word	0x240012f8

0800f42c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08a      	sub	sp, #40	@ 0x28
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f434:	2300      	movs	r3, #0
 800f436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f438:	f7fe fd28 	bl	800de8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f43c:	4b5c      	ldr	r3, [pc, #368]	@ (800f5b0 <pvPortMalloc+0x184>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f444:	f000 f924 	bl	800f690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f448:	4b5a      	ldr	r3, [pc, #360]	@ (800f5b4 <pvPortMalloc+0x188>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4013      	ands	r3, r2
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 8095 	bne.w	800f580 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d01e      	beq.n	800f49a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f45c:	2208      	movs	r2, #8
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f003 0307 	and.w	r3, r3, #7
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d015      	beq.n	800f49a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f023 0307 	bic.w	r3, r3, #7
 800f474:	3308      	adds	r3, #8
 800f476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f003 0307 	and.w	r3, r3, #7
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00b      	beq.n	800f49a <pvPortMalloc+0x6e>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f486:	f383 8811 	msr	BASEPRI, r3
 800f48a:	f3bf 8f6f 	isb	sy
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	617b      	str	r3, [r7, #20]
}
 800f494:	bf00      	nop
 800f496:	bf00      	nop
 800f498:	e7fd      	b.n	800f496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d06f      	beq.n	800f580 <pvPortMalloc+0x154>
 800f4a0:	4b45      	ldr	r3, [pc, #276]	@ (800f5b8 <pvPortMalloc+0x18c>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d86a      	bhi.n	800f580 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4aa:	4b44      	ldr	r3, [pc, #272]	@ (800f5bc <pvPortMalloc+0x190>)
 800f4ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4ae:	4b43      	ldr	r3, [pc, #268]	@ (800f5bc <pvPortMalloc+0x190>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4b4:	e004      	b.n	800f4c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d903      	bls.n	800f4d2 <pvPortMalloc+0xa6>
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1f1      	bne.n	800f4b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4d2:	4b37      	ldr	r3, [pc, #220]	@ (800f5b0 <pvPortMalloc+0x184>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d051      	beq.n	800f580 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4dc:	6a3b      	ldr	r3, [r7, #32]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2208      	movs	r2, #8
 800f4e2:	4413      	add	r3, r2
 800f4e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f0:	685a      	ldr	r2, [r3, #4]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	1ad2      	subs	r2, r2, r3
 800f4f6:	2308      	movs	r3, #8
 800f4f8:	005b      	lsls	r3, r3, #1
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d920      	bls.n	800f540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4413      	add	r3, r2
 800f504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	f003 0307 	and.w	r3, r3, #7
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00b      	beq.n	800f528 <pvPortMalloc+0xfc>
	__asm volatile
 800f510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f514:	f383 8811 	msr	BASEPRI, r3
 800f518:	f3bf 8f6f 	isb	sy
 800f51c:	f3bf 8f4f 	dsb	sy
 800f520:	613b      	str	r3, [r7, #16]
}
 800f522:	bf00      	nop
 800f524:	bf00      	nop
 800f526:	e7fd      	b.n	800f524 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	1ad2      	subs	r2, r2, r3
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f53a:	69b8      	ldr	r0, [r7, #24]
 800f53c:	f000 f90a 	bl	800f754 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f540:	4b1d      	ldr	r3, [pc, #116]	@ (800f5b8 <pvPortMalloc+0x18c>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	1ad3      	subs	r3, r2, r3
 800f54a:	4a1b      	ldr	r2, [pc, #108]	@ (800f5b8 <pvPortMalloc+0x18c>)
 800f54c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f54e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b8 <pvPortMalloc+0x18c>)
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	4b1b      	ldr	r3, [pc, #108]	@ (800f5c0 <pvPortMalloc+0x194>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	429a      	cmp	r2, r3
 800f558:	d203      	bcs.n	800f562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f55a:	4b17      	ldr	r3, [pc, #92]	@ (800f5b8 <pvPortMalloc+0x18c>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4a18      	ldr	r2, [pc, #96]	@ (800f5c0 <pvPortMalloc+0x194>)
 800f560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f564:	685a      	ldr	r2, [r3, #4]
 800f566:	4b13      	ldr	r3, [pc, #76]	@ (800f5b4 <pvPortMalloc+0x188>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	431a      	orrs	r2, r3
 800f56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f56e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f576:	4b13      	ldr	r3, [pc, #76]	@ (800f5c4 <pvPortMalloc+0x198>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3301      	adds	r3, #1
 800f57c:	4a11      	ldr	r2, [pc, #68]	@ (800f5c4 <pvPortMalloc+0x198>)
 800f57e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f580:	f7fe fc92 	bl	800dea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	f003 0307 	and.w	r3, r3, #7
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00b      	beq.n	800f5a6 <pvPortMalloc+0x17a>
	__asm volatile
 800f58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	60fb      	str	r3, [r7, #12]
}
 800f5a0:	bf00      	nop
 800f5a2:	bf00      	nop
 800f5a4:	e7fd      	b.n	800f5a2 <pvPortMalloc+0x176>
	return pvReturn;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3728      	adds	r7, #40	@ 0x28
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	24004f04 	.word	0x24004f04
 800f5b4:	24004f18 	.word	0x24004f18
 800f5b8:	24004f08 	.word	0x24004f08
 800f5bc:	24004efc 	.word	0x24004efc
 800f5c0:	24004f0c 	.word	0x24004f0c
 800f5c4:	24004f10 	.word	0x24004f10

0800f5c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d04f      	beq.n	800f67a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5da:	2308      	movs	r3, #8
 800f5dc:	425b      	negs	r3, r3
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	685a      	ldr	r2, [r3, #4]
 800f5ec:	4b25      	ldr	r3, [pc, #148]	@ (800f684 <vPortFree+0xbc>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4013      	ands	r3, r2
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d10b      	bne.n	800f60e <vPortFree+0x46>
	__asm volatile
 800f5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	60fb      	str	r3, [r7, #12]
}
 800f608:	bf00      	nop
 800f60a:	bf00      	nop
 800f60c:	e7fd      	b.n	800f60a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00b      	beq.n	800f62e <vPortFree+0x66>
	__asm volatile
 800f616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f61a:	f383 8811 	msr	BASEPRI, r3
 800f61e:	f3bf 8f6f 	isb	sy
 800f622:	f3bf 8f4f 	dsb	sy
 800f626:	60bb      	str	r3, [r7, #8]
}
 800f628:	bf00      	nop
 800f62a:	bf00      	nop
 800f62c:	e7fd      	b.n	800f62a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	685a      	ldr	r2, [r3, #4]
 800f632:	4b14      	ldr	r3, [pc, #80]	@ (800f684 <vPortFree+0xbc>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4013      	ands	r3, r2
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d01e      	beq.n	800f67a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d11a      	bne.n	800f67a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	4b0e      	ldr	r3, [pc, #56]	@ (800f684 <vPortFree+0xbc>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	43db      	mvns	r3, r3
 800f64e:	401a      	ands	r2, r3
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f654:	f7fe fc1a 	bl	800de8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	685a      	ldr	r2, [r3, #4]
 800f65c:	4b0a      	ldr	r3, [pc, #40]	@ (800f688 <vPortFree+0xc0>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4413      	add	r3, r2
 800f662:	4a09      	ldr	r2, [pc, #36]	@ (800f688 <vPortFree+0xc0>)
 800f664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f666:	6938      	ldr	r0, [r7, #16]
 800f668:	f000 f874 	bl	800f754 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f66c:	4b07      	ldr	r3, [pc, #28]	@ (800f68c <vPortFree+0xc4>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	3301      	adds	r3, #1
 800f672:	4a06      	ldr	r2, [pc, #24]	@ (800f68c <vPortFree+0xc4>)
 800f674:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f676:	f7fe fc17 	bl	800dea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f67a:	bf00      	nop
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	24004f18 	.word	0x24004f18
 800f688:	24004f08 	.word	0x24004f08
 800f68c:	24004f14 	.word	0x24004f14

0800f690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f696:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f69a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f69c:	4b27      	ldr	r3, [pc, #156]	@ (800f73c <prvHeapInit+0xac>)
 800f69e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f003 0307 	and.w	r3, r3, #7
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00c      	beq.n	800f6c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3307      	adds	r3, #7
 800f6ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f023 0307 	bic.w	r3, r3, #7
 800f6b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	4a1f      	ldr	r2, [pc, #124]	@ (800f73c <prvHeapInit+0xac>)
 800f6c0:	4413      	add	r3, r2
 800f6c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800f740 <prvHeapInit+0xb0>)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6ce:	4b1c      	ldr	r3, [pc, #112]	@ (800f740 <prvHeapInit+0xb0>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	4413      	add	r3, r2
 800f6da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6dc:	2208      	movs	r2, #8
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	1a9b      	subs	r3, r3, r2
 800f6e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f023 0307 	bic.w	r3, r3, #7
 800f6ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	4a15      	ldr	r2, [pc, #84]	@ (800f744 <prvHeapInit+0xb4>)
 800f6f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6f2:	4b14      	ldr	r3, [pc, #80]	@ (800f744 <prvHeapInit+0xb4>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6fa:	4b12      	ldr	r3, [pc, #72]	@ (800f744 <prvHeapInit+0xb4>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2200      	movs	r2, #0
 800f700:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	1ad2      	subs	r2, r2, r3
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f710:	4b0c      	ldr	r3, [pc, #48]	@ (800f744 <prvHeapInit+0xb4>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	4a0a      	ldr	r2, [pc, #40]	@ (800f748 <prvHeapInit+0xb8>)
 800f71e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	4a09      	ldr	r2, [pc, #36]	@ (800f74c <prvHeapInit+0xbc>)
 800f726:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f728:	4b09      	ldr	r3, [pc, #36]	@ (800f750 <prvHeapInit+0xc0>)
 800f72a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f72e:	601a      	str	r2, [r3, #0]
}
 800f730:	bf00      	nop
 800f732:	3714      	adds	r7, #20
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	240012fc 	.word	0x240012fc
 800f740:	24004efc 	.word	0x24004efc
 800f744:	24004f04 	.word	0x24004f04
 800f748:	24004f0c 	.word	0x24004f0c
 800f74c:	24004f08 	.word	0x24004f08
 800f750:	24004f18 	.word	0x24004f18

0800f754 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f75c:	4b28      	ldr	r3, [pc, #160]	@ (800f800 <prvInsertBlockIntoFreeList+0xac>)
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	e002      	b.n	800f768 <prvInsertBlockIntoFreeList+0x14>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	60fb      	str	r3, [r7, #12]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d8f7      	bhi.n	800f762 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	4413      	add	r3, r2
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	429a      	cmp	r2, r3
 800f782:	d108      	bne.n	800f796 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	441a      	add	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	441a      	add	r2, r3
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d118      	bne.n	800f7dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	4b15      	ldr	r3, [pc, #84]	@ (800f804 <prvInsertBlockIntoFreeList+0xb0>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d00d      	beq.n	800f7d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	685a      	ldr	r2, [r3, #4]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	441a      	add	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	e008      	b.n	800f7e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f804 <prvInsertBlockIntoFreeList+0xb0>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	601a      	str	r2, [r3, #0]
 800f7da:	e003      	b.n	800f7e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d002      	beq.n	800f7f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7f2:	bf00      	nop
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	24004efc 	.word	0x24004efc
 800f804:	24004f04 	.word	0x24004f04

0800f808 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f80c:	2200      	movs	r2, #0
 800f80e:	4913      	ldr	r1, [pc, #76]	@ (800f85c <MX_USB_DEVICE_Init+0x54>)
 800f810:	4813      	ldr	r0, [pc, #76]	@ (800f860 <MX_USB_DEVICE_Init+0x58>)
 800f812:	f7fb fead 	bl	800b570 <USBD_Init>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d001      	beq.n	800f820 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f81c:	f7f1 fc39 	bl	8001092 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f820:	4910      	ldr	r1, [pc, #64]	@ (800f864 <MX_USB_DEVICE_Init+0x5c>)
 800f822:	480f      	ldr	r0, [pc, #60]	@ (800f860 <MX_USB_DEVICE_Init+0x58>)
 800f824:	f7fb fed4 	bl	800b5d0 <USBD_RegisterClass>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d001      	beq.n	800f832 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f82e:	f7f1 fc30 	bl	8001092 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f832:	490d      	ldr	r1, [pc, #52]	@ (800f868 <MX_USB_DEVICE_Init+0x60>)
 800f834:	480a      	ldr	r0, [pc, #40]	@ (800f860 <MX_USB_DEVICE_Init+0x58>)
 800f836:	f7fb fdcb 	bl	800b3d0 <USBD_CDC_RegisterInterface>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d001      	beq.n	800f844 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f840:	f7f1 fc27 	bl	8001092 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f844:	4806      	ldr	r0, [pc, #24]	@ (800f860 <MX_USB_DEVICE_Init+0x58>)
 800f846:	f7fb fef9 	bl	800b63c <USBD_Start>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f850:	f7f1 fc1f 	bl	8001092 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f854:	f7f5 f89e 	bl	8004994 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f858:	bf00      	nop
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	240000b4 	.word	0x240000b4
 800f860:	24004f1c 	.word	0x24004f1c
 800f864:	2400001c 	.word	0x2400001c
 800f868:	240000a0 	.word	0x240000a0

0800f86c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f870:	2200      	movs	r2, #0
 800f872:	4905      	ldr	r1, [pc, #20]	@ (800f888 <CDC_Init_FS+0x1c>)
 800f874:	4805      	ldr	r0, [pc, #20]	@ (800f88c <CDC_Init_FS+0x20>)
 800f876:	f7fb fdc5 	bl	800b404 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f87a:	4905      	ldr	r1, [pc, #20]	@ (800f890 <CDC_Init_FS+0x24>)
 800f87c:	4803      	ldr	r0, [pc, #12]	@ (800f88c <CDC_Init_FS+0x20>)
 800f87e:	f7fb fde3 	bl	800b448 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f882:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f884:	4618      	mov	r0, r3
 800f886:	bd80      	pop	{r7, pc}
 800f888:	240059f8 	.word	0x240059f8
 800f88c:	24004f1c 	.word	0x24004f1c
 800f890:	240051f8 	.word	0x240051f8

0800f894 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f894:	b480      	push	{r7}
 800f896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	6039      	str	r1, [r7, #0]
 800f8ae:	71fb      	strb	r3, [r7, #7]
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	2b23      	cmp	r3, #35	@ 0x23
 800f8b8:	d84a      	bhi.n	800f950 <CDC_Control_FS+0xac>
 800f8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f8c0 <CDC_Control_FS+0x1c>)
 800f8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c0:	0800f951 	.word	0x0800f951
 800f8c4:	0800f951 	.word	0x0800f951
 800f8c8:	0800f951 	.word	0x0800f951
 800f8cc:	0800f951 	.word	0x0800f951
 800f8d0:	0800f951 	.word	0x0800f951
 800f8d4:	0800f951 	.word	0x0800f951
 800f8d8:	0800f951 	.word	0x0800f951
 800f8dc:	0800f951 	.word	0x0800f951
 800f8e0:	0800f951 	.word	0x0800f951
 800f8e4:	0800f951 	.word	0x0800f951
 800f8e8:	0800f951 	.word	0x0800f951
 800f8ec:	0800f951 	.word	0x0800f951
 800f8f0:	0800f951 	.word	0x0800f951
 800f8f4:	0800f951 	.word	0x0800f951
 800f8f8:	0800f951 	.word	0x0800f951
 800f8fc:	0800f951 	.word	0x0800f951
 800f900:	0800f951 	.word	0x0800f951
 800f904:	0800f951 	.word	0x0800f951
 800f908:	0800f951 	.word	0x0800f951
 800f90c:	0800f951 	.word	0x0800f951
 800f910:	0800f951 	.word	0x0800f951
 800f914:	0800f951 	.word	0x0800f951
 800f918:	0800f951 	.word	0x0800f951
 800f91c:	0800f951 	.word	0x0800f951
 800f920:	0800f951 	.word	0x0800f951
 800f924:	0800f951 	.word	0x0800f951
 800f928:	0800f951 	.word	0x0800f951
 800f92c:	0800f951 	.word	0x0800f951
 800f930:	0800f951 	.word	0x0800f951
 800f934:	0800f951 	.word	0x0800f951
 800f938:	0800f951 	.word	0x0800f951
 800f93c:	0800f951 	.word	0x0800f951
 800f940:	0800f951 	.word	0x0800f951
 800f944:	0800f951 	.word	0x0800f951
 800f948:	0800f951 	.word	0x0800f951
 800f94c:	0800f951 	.word	0x0800f951
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f950:	bf00      	nop
  }

  return (USBD_OK);
 800f952:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f954:	4618      	mov	r0, r3
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f96a:	6879      	ldr	r1, [r7, #4]
 800f96c:	4805      	ldr	r0, [pc, #20]	@ (800f984 <CDC_Receive_FS+0x24>)
 800f96e:	f7fb fd6b 	bl	800b448 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f972:	4804      	ldr	r0, [pc, #16]	@ (800f984 <CDC_Receive_FS+0x24>)
 800f974:	f7fb fdc6 	bl	800b504 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f978:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	24004f1c 	.word	0x24004f1c

0800f988 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	460b      	mov	r3, r1
 800f992:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f994:	2300      	movs	r3, #0
 800f996:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f998:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d0 <CDC_Transmit_FS+0x48>)
 800f99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f99e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e00b      	b.n	800f9c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f9ae:	887b      	ldrh	r3, [r7, #2]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	6879      	ldr	r1, [r7, #4]
 800f9b4:	4806      	ldr	r0, [pc, #24]	@ (800f9d0 <CDC_Transmit_FS+0x48>)
 800f9b6:	f7fb fd25 	bl	800b404 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f9ba:	4805      	ldr	r0, [pc, #20]	@ (800f9d0 <CDC_Transmit_FS+0x48>)
 800f9bc:	f7fb fd62 	bl	800b484 <USBD_CDC_TransmitPacket>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	24004f1c 	.word	0x24004f1c

0800f9d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b087      	sub	sp, #28
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	4613      	mov	r3, r2
 800f9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
	...

0800f9f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	4603      	mov	r3, r0
 800fa00:	6039      	str	r1, [r7, #0]
 800fa02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2212      	movs	r2, #18
 800fa08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa0a:	4b03      	ldr	r3, [pc, #12]	@ (800fa18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	240000d4 	.word	0x240000d4

0800fa1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	4603      	mov	r3, r0
 800fa24:	6039      	str	r1, [r7, #0]
 800fa26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	2204      	movs	r2, #4
 800fa2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa2e:	4b03      	ldr	r3, [pc, #12]	@ (800fa3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	240000e8 	.word	0x240000e8

0800fa40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	4603      	mov	r3, r0
 800fa48:	6039      	str	r1, [r7, #0]
 800fa4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d105      	bne.n	800fa5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	4907      	ldr	r1, [pc, #28]	@ (800fa74 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa56:	4808      	ldr	r0, [pc, #32]	@ (800fa78 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa58:	f7fc ffca 	bl	800c9f0 <USBD_GetString>
 800fa5c:	e004      	b.n	800fa68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	4904      	ldr	r1, [pc, #16]	@ (800fa74 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa62:	4805      	ldr	r0, [pc, #20]	@ (800fa78 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa64:	f7fc ffc4 	bl	800c9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa68:	4b02      	ldr	r3, [pc, #8]	@ (800fa74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	240061f8 	.word	0x240061f8
 800fa78:	08014b84 	.word	0x08014b84

0800fa7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	4603      	mov	r3, r0
 800fa84:	6039      	str	r1, [r7, #0]
 800fa86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	4904      	ldr	r1, [pc, #16]	@ (800fa9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fa8c:	4804      	ldr	r0, [pc, #16]	@ (800faa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fa8e:	f7fc ffaf 	bl	800c9f0 <USBD_GetString>
  return USBD_StrDesc;
 800fa92:	4b02      	ldr	r3, [pc, #8]	@ (800fa9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	240061f8 	.word	0x240061f8
 800faa0:	08014b9c 	.word	0x08014b9c

0800faa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	6039      	str	r1, [r7, #0]
 800faae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	221a      	movs	r2, #26
 800fab4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fab6:	f000 f843 	bl	800fb40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800faba:	4b02      	ldr	r3, [pc, #8]	@ (800fac4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	240000ec 	.word	0x240000ec

0800fac8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	4603      	mov	r3, r0
 800fad0:	6039      	str	r1, [r7, #0]
 800fad2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fad4:	79fb      	ldrb	r3, [r7, #7]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d105      	bne.n	800fae6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fada:	683a      	ldr	r2, [r7, #0]
 800fadc:	4907      	ldr	r1, [pc, #28]	@ (800fafc <USBD_FS_ConfigStrDescriptor+0x34>)
 800fade:	4808      	ldr	r0, [pc, #32]	@ (800fb00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fae0:	f7fc ff86 	bl	800c9f0 <USBD_GetString>
 800fae4:	e004      	b.n	800faf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fae6:	683a      	ldr	r2, [r7, #0]
 800fae8:	4904      	ldr	r1, [pc, #16]	@ (800fafc <USBD_FS_ConfigStrDescriptor+0x34>)
 800faea:	4805      	ldr	r0, [pc, #20]	@ (800fb00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800faec:	f7fc ff80 	bl	800c9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800faf0:	4b02      	ldr	r3, [pc, #8]	@ (800fafc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	240061f8 	.word	0x240061f8
 800fb00:	08014bb0 	.word	0x08014bb0

0800fb04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	6039      	str	r1, [r7, #0]
 800fb0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb10:	79fb      	ldrb	r3, [r7, #7]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d105      	bne.n	800fb22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	4907      	ldr	r1, [pc, #28]	@ (800fb38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb1a:	4808      	ldr	r0, [pc, #32]	@ (800fb3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb1c:	f7fc ff68 	bl	800c9f0 <USBD_GetString>
 800fb20:	e004      	b.n	800fb2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb22:	683a      	ldr	r2, [r7, #0]
 800fb24:	4904      	ldr	r1, [pc, #16]	@ (800fb38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb26:	4805      	ldr	r0, [pc, #20]	@ (800fb3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb28:	f7fc ff62 	bl	800c9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb2c:	4b02      	ldr	r3, [pc, #8]	@ (800fb38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	240061f8 	.word	0x240061f8
 800fb3c:	08014bbc 	.word	0x08014bbc

0800fb40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb46:	4b0f      	ldr	r3, [pc, #60]	@ (800fb84 <Get_SerialNum+0x44>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb4c:	4b0e      	ldr	r3, [pc, #56]	@ (800fb88 <Get_SerialNum+0x48>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb52:	4b0e      	ldr	r3, [pc, #56]	@ (800fb8c <Get_SerialNum+0x4c>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d009      	beq.n	800fb7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb66:	2208      	movs	r2, #8
 800fb68:	4909      	ldr	r1, [pc, #36]	@ (800fb90 <Get_SerialNum+0x50>)
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	f000 f814 	bl	800fb98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb70:	2204      	movs	r2, #4
 800fb72:	4908      	ldr	r1, [pc, #32]	@ (800fb94 <Get_SerialNum+0x54>)
 800fb74:	68b8      	ldr	r0, [r7, #8]
 800fb76:	f000 f80f 	bl	800fb98 <IntToUnicode>
  }
}
 800fb7a:	bf00      	nop
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	1ff1e800 	.word	0x1ff1e800
 800fb88:	1ff1e804 	.word	0x1ff1e804
 800fb8c:	1ff1e808 	.word	0x1ff1e808
 800fb90:	240000ee 	.word	0x240000ee
 800fb94:	240000fe 	.word	0x240000fe

0800fb98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	4613      	mov	r3, r2
 800fba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbaa:	2300      	movs	r3, #0
 800fbac:	75fb      	strb	r3, [r7, #23]
 800fbae:	e027      	b.n	800fc00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	0f1b      	lsrs	r3, r3, #28
 800fbb4:	2b09      	cmp	r3, #9
 800fbb6:	d80b      	bhi.n	800fbd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	0f1b      	lsrs	r3, r3, #28
 800fbbc:	b2da      	uxtb	r2, r3
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
 800fbc0:	005b      	lsls	r3, r3, #1
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	440b      	add	r3, r1
 800fbc8:	3230      	adds	r2, #48	@ 0x30
 800fbca:	b2d2      	uxtb	r2, r2
 800fbcc:	701a      	strb	r2, [r3, #0]
 800fbce:	e00a      	b.n	800fbe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	0f1b      	lsrs	r3, r3, #28
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4619      	mov	r1, r3
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	440b      	add	r3, r1
 800fbe0:	3237      	adds	r2, #55	@ 0x37
 800fbe2:	b2d2      	uxtb	r2, r2
 800fbe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	011b      	lsls	r3, r3, #4
 800fbea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fbec:	7dfb      	ldrb	r3, [r7, #23]
 800fbee:	005b      	lsls	r3, r3, #1
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fbfa:	7dfb      	ldrb	r3, [r7, #23]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	75fb      	strb	r3, [r7, #23]
 800fc00:	7dfa      	ldrb	r2, [r7, #23]
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d3d3      	bcc.n	800fbb0 <IntToUnicode+0x18>
  }
}
 800fc08:	bf00      	nop
 800fc0a:	bf00      	nop
 800fc0c:	371c      	adds	r7, #28
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
	...

0800fc18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b0ba      	sub	sp, #232	@ 0xe8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	605a      	str	r2, [r3, #4]
 800fc2a:	609a      	str	r2, [r3, #8]
 800fc2c:	60da      	str	r2, [r3, #12]
 800fc2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fc30:	f107 0310 	add.w	r3, r7, #16
 800fc34:	22c0      	movs	r2, #192	@ 0xc0
 800fc36:	2100      	movs	r1, #0
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f002 fd1a 	bl	8012672 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4a2c      	ldr	r2, [pc, #176]	@ (800fcf4 <HAL_PCD_MspInit+0xdc>)
 800fc44:	4293      	cmp	r3, r2
 800fc46:	d151      	bne.n	800fcec <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fc48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fc4c:	f04f 0300 	mov.w	r3, #0
 800fc50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fc54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fc58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fc5c:	f107 0310 	add.w	r3, r7, #16
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7f5 feb9 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fc6c:	f7f1 fa11 	bl	8001092 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fc70:	f7f4 fe90 	bl	8004994 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc74:	4b20      	ldr	r3, [pc, #128]	@ (800fcf8 <HAL_PCD_MspInit+0xe0>)
 800fc76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc7a:	4a1f      	ldr	r2, [pc, #124]	@ (800fcf8 <HAL_PCD_MspInit+0xe0>)
 800fc7c:	f043 0301 	orr.w	r3, r3, #1
 800fc80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fc84:	4b1c      	ldr	r3, [pc, #112]	@ (800fcf8 <HAL_PCD_MspInit+0xe0>)
 800fc86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc8a:	f003 0301 	and.w	r3, r3, #1
 800fc8e:	60fb      	str	r3, [r7, #12]
 800fc90:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fc92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fc96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fca0:	2300      	movs	r3, #0
 800fca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fca6:	2300      	movs	r3, #0
 800fca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fcac:	230a      	movs	r3, #10
 800fcae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fcb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	4810      	ldr	r0, [pc, #64]	@ (800fcfc <HAL_PCD_MspInit+0xe4>)
 800fcba:	f7f2 fb71 	bl	80023a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fcbe:	4b0e      	ldr	r3, [pc, #56]	@ (800fcf8 <HAL_PCD_MspInit+0xe0>)
 800fcc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fcc4:	4a0c      	ldr	r2, [pc, #48]	@ (800fcf8 <HAL_PCD_MspInit+0xe0>)
 800fcc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fcca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fcce:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf8 <HAL_PCD_MspInit+0xe0>)
 800fcd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fcd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fcd8:	60bb      	str	r3, [r7, #8]
 800fcda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2105      	movs	r1, #5
 800fce0:	2065      	movs	r0, #101	@ 0x65
 800fce2:	f7f2 f86d 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fce6:	2065      	movs	r0, #101	@ 0x65
 800fce8:	f7f2 f884 	bl	8001df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fcec:	bf00      	nop
 800fcee:	37e8      	adds	r7, #232	@ 0xe8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	40080000 	.word	0x40080000
 800fcf8:	58024400 	.word	0x58024400
 800fcfc:	58020000 	.word	0x58020000

0800fd00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fd14:	4619      	mov	r1, r3
 800fd16:	4610      	mov	r0, r2
 800fd18:	f7fb fcdd 	bl	800b6d6 <USBD_LL_SetupStage>
}
 800fd1c:	bf00      	nop
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fd36:	78fa      	ldrb	r2, [r7, #3]
 800fd38:	6879      	ldr	r1, [r7, #4]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	00db      	lsls	r3, r3, #3
 800fd3e:	4413      	add	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	440b      	add	r3, r1
 800fd44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	78fb      	ldrb	r3, [r7, #3]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	f7fb fd17 	bl	800b780 <USBD_LL_DataOutStage>
}
 800fd52:	bf00      	nop
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	460b      	mov	r3, r1
 800fd64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fd6c:	78fa      	ldrb	r2, [r7, #3]
 800fd6e:	6879      	ldr	r1, [r7, #4]
 800fd70:	4613      	mov	r3, r2
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	4413      	add	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	3320      	adds	r3, #32
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	78fb      	ldrb	r3, [r7, #3]
 800fd80:	4619      	mov	r1, r3
 800fd82:	f7fb fdb0 	bl	800b8e6 <USBD_LL_DataInStage>
}
 800fd86:	bf00      	nop
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b082      	sub	sp, #8
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fb feea 	bl	800bb76 <USBD_LL_SOF>
}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}

0800fdaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b084      	sub	sp, #16
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	79db      	ldrb	r3, [r3, #7]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d102      	bne.n	800fdc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]
 800fdc2:	e008      	b.n	800fdd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	79db      	ldrb	r3, [r3, #7]
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d102      	bne.n	800fdd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	73fb      	strb	r3, [r7, #15]
 800fdd0:	e001      	b.n	800fdd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fdd2:	f7f1 f95e 	bl	8001092 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fddc:	7bfa      	ldrb	r2, [r7, #15]
 800fdde:	4611      	mov	r1, r2
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fb fe84 	bl	800baee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fb fe2c 	bl	800ba4a <USBD_LL_Reset>
}
 800fdf2:	bf00      	nop
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
	...

0800fdfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fb fe7f 	bl	800bb0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	6812      	ldr	r2, [r2, #0]
 800fe1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fe22:	f043 0301 	orr.w	r3, r3, #1
 800fe26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7adb      	ldrb	r3, [r3, #11]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d005      	beq.n	800fe3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe30:	4b04      	ldr	r3, [pc, #16]	@ (800fe44 <HAL_PCD_SuspendCallback+0x48>)
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	4a03      	ldr	r2, [pc, #12]	@ (800fe44 <HAL_PCD_SuspendCallback+0x48>)
 800fe36:	f043 0306 	orr.w	r3, r3, #6
 800fe3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe3c:	bf00      	nop
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	e000ed00 	.word	0xe000ed00

0800fe48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fb fe75 	bl	800bb46 <USBD_LL_Resume>
}
 800fe5c:	bf00      	nop
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe76:	78fa      	ldrb	r2, [r7, #3]
 800fe78:	4611      	mov	r1, r2
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fb fecd 	bl	800bc1a <USBD_LL_IsoOUTIncomplete>
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe9a:	78fa      	ldrb	r2, [r7, #3]
 800fe9c:	4611      	mov	r1, r2
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fb fe89 	bl	800bbb6 <USBD_LL_IsoINIncomplete>
}
 800fea4:	bf00      	nop
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800feba:	4618      	mov	r0, r3
 800febc:	f7fb fedf 	bl	800bc7e <USBD_LL_DevConnected>
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fb fedc 	bl	800bc94 <USBD_LL_DevDisconnected>
}
 800fedc:	bf00      	nop
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d13e      	bne.n	800ff72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fef4:	4a21      	ldr	r2, [pc, #132]	@ (800ff7c <USBD_LL_Init+0x98>)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	4a1f      	ldr	r2, [pc, #124]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff04:	4b1d      	ldr	r3, [pc, #116]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff06:	4a1e      	ldr	r2, [pc, #120]	@ (800ff80 <USBD_LL_Init+0x9c>)
 800ff08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ff0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff0c:	2209      	movs	r2, #9
 800ff0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff10:	4b1a      	ldr	r3, [pc, #104]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff12:	2202      	movs	r2, #2
 800ff14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff16:	4b19      	ldr	r3, [pc, #100]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff1c:	4b17      	ldr	r3, [pc, #92]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff1e:	2202      	movs	r2, #2
 800ff20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff22:	4b16      	ldr	r3, [pc, #88]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff28:	4b14      	ldr	r3, [pc, #80]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff2e:	4b13      	ldr	r3, [pc, #76]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff30:	2200      	movs	r2, #0
 800ff32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ff34:	4b11      	ldr	r3, [pc, #68]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff36:	2200      	movs	r2, #0
 800ff38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff3a:	4b10      	ldr	r3, [pc, #64]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff40:	4b0e      	ldr	r3, [pc, #56]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff46:	480d      	ldr	r0, [pc, #52]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff48:	f7f3 fa4b 	bl	80033e2 <HAL_PCD_Init>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d001      	beq.n	800ff56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ff52:	f7f1 f89e 	bl	8001092 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff56:	2180      	movs	r1, #128	@ 0x80
 800ff58:	4808      	ldr	r0, [pc, #32]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff5a:	f7f4 fca0 	bl	800489e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff5e:	2240      	movs	r2, #64	@ 0x40
 800ff60:	2100      	movs	r1, #0
 800ff62:	4806      	ldr	r0, [pc, #24]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff64:	f7f4 fc54 	bl	8004810 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff68:	2280      	movs	r2, #128	@ 0x80
 800ff6a:	2101      	movs	r1, #1
 800ff6c:	4803      	ldr	r0, [pc, #12]	@ (800ff7c <USBD_LL_Init+0x98>)
 800ff6e:	f7f4 fc4f 	bl	8004810 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	240063f8 	.word	0x240063f8
 800ff80:	40080000 	.word	0x40080000

0800ff84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff90:	2300      	movs	r3, #0
 800ff92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f3 fb2d 	bl	80035fa <HAL_PCD_Start>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f000 f942 	bl	8010230 <USBD_Get_USB_Status>
 800ffac:	4603      	mov	r3, r0
 800ffae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
 800ffc2:	4608      	mov	r0, r1
 800ffc4:	4611      	mov	r1, r2
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	4603      	mov	r3, r0
 800ffca:	70fb      	strb	r3, [r7, #3]
 800ffcc:	460b      	mov	r3, r1
 800ffce:	70bb      	strb	r3, [r7, #2]
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ffe2:	78bb      	ldrb	r3, [r7, #2]
 800ffe4:	883a      	ldrh	r2, [r7, #0]
 800ffe6:	78f9      	ldrb	r1, [r7, #3]
 800ffe8:	f7f4 f82e 	bl	8004048 <HAL_PCD_EP_Open>
 800ffec:	4603      	mov	r3, r0
 800ffee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 f91c 	bl	8010230 <USBD_Get_USB_Status>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fffc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b084      	sub	sp, #16
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
 801000e:	460b      	mov	r3, r1
 8010010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010016:	2300      	movs	r3, #0
 8010018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010020:	78fa      	ldrb	r2, [r7, #3]
 8010022:	4611      	mov	r1, r2
 8010024:	4618      	mov	r0, r3
 8010026:	f7f4 f877 	bl	8004118 <HAL_PCD_EP_Close>
 801002a:	4603      	mov	r3, r0
 801002c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	4618      	mov	r0, r3
 8010032:	f000 f8fd 	bl	8010230 <USBD_Get_USB_Status>
 8010036:	4603      	mov	r3, r0
 8010038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801003a:	7bbb      	ldrb	r3, [r7, #14]
}
 801003c:	4618      	mov	r0, r3
 801003e:	3710      	adds	r7, #16
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	460b      	mov	r3, r1
 801004e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801005e:	78fa      	ldrb	r2, [r7, #3]
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7f4 f92f 	bl	80042c6 <HAL_PCD_EP_SetStall>
 8010068:	4603      	mov	r3, r0
 801006a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801006c:	7bfb      	ldrb	r3, [r7, #15]
 801006e:	4618      	mov	r0, r3
 8010070:	f000 f8de 	bl	8010230 <USBD_Get_USB_Status>
 8010074:	4603      	mov	r3, r0
 8010076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010078:	7bbb      	ldrb	r3, [r7, #14]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b084      	sub	sp, #16
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	460b      	mov	r3, r1
 801008c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801009c:	78fa      	ldrb	r2, [r7, #3]
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7f4 f973 	bl	800438c <HAL_PCD_EP_ClrStall>
 80100a6:	4603      	mov	r3, r0
 80100a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100aa:	7bfb      	ldrb	r3, [r7, #15]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 f8bf 	bl	8010230 <USBD_Get_USB_Status>
 80100b2:	4603      	mov	r3, r0
 80100b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	460b      	mov	r3, r1
 80100ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80100d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	da0b      	bge.n	80100f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80100dc:	78fb      	ldrb	r3, [r7, #3]
 80100de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80100e2:	68f9      	ldr	r1, [r7, #12]
 80100e4:	4613      	mov	r3, r2
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	4413      	add	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	440b      	add	r3, r1
 80100ee:	3316      	adds	r3, #22
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	e00b      	b.n	801010c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80100f4:	78fb      	ldrb	r3, [r7, #3]
 80100f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80100fa:	68f9      	ldr	r1, [r7, #12]
 80100fc:	4613      	mov	r3, r2
 80100fe:	00db      	lsls	r3, r3, #3
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	440b      	add	r3, r1
 8010106:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801010a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801010c:	4618      	mov	r0, r3
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	460b      	mov	r3, r1
 8010122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010124:	2300      	movs	r3, #0
 8010126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010128:	2300      	movs	r3, #0
 801012a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010132:	78fa      	ldrb	r2, [r7, #3]
 8010134:	4611      	mov	r1, r2
 8010136:	4618      	mov	r0, r3
 8010138:	f7f3 ff62 	bl	8004000 <HAL_PCD_SetAddress>
 801013c:	4603      	mov	r3, r0
 801013e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010140:	7bfb      	ldrb	r3, [r7, #15]
 8010142:	4618      	mov	r0, r3
 8010144:	f000 f874 	bl	8010230 <USBD_Get_USB_Status>
 8010148:	4603      	mov	r3, r0
 801014a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801014c:	7bbb      	ldrb	r3, [r7, #14]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b086      	sub	sp, #24
 801015a:	af00      	add	r7, sp, #0
 801015c:	60f8      	str	r0, [r7, #12]
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	603b      	str	r3, [r7, #0]
 8010162:	460b      	mov	r3, r1
 8010164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801016a:	2300      	movs	r3, #0
 801016c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010174:	7af9      	ldrb	r1, [r7, #11]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	f7f4 f86a 	bl	8004252 <HAL_PCD_EP_Transmit>
 801017e:	4603      	mov	r3, r0
 8010180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	4618      	mov	r0, r3
 8010186:	f000 f853 	bl	8010230 <USBD_Get_USB_Status>
 801018a:	4603      	mov	r3, r0
 801018c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801018e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	60f8      	str	r0, [r7, #12]
 80101a0:	607a      	str	r2, [r7, #4]
 80101a2:	603b      	str	r3, [r7, #0]
 80101a4:	460b      	mov	r3, r1
 80101a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101a8:	2300      	movs	r3, #0
 80101aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101ac:	2300      	movs	r3, #0
 80101ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80101b6:	7af9      	ldrb	r1, [r7, #11]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	f7f3 fff6 	bl	80041ac <HAL_PCD_EP_Receive>
 80101c0:	4603      	mov	r3, r0
 80101c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101c4:	7dfb      	ldrb	r3, [r7, #23]
 80101c6:	4618      	mov	r0, r3
 80101c8:	f000 f832 	bl	8010230 <USBD_Get_USB_Status>
 80101cc:	4603      	mov	r3, r0
 80101ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3718      	adds	r7, #24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b082      	sub	sp, #8
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	460b      	mov	r3, r1
 80101e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	4611      	mov	r1, r2
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7f4 f816 	bl	8004222 <HAL_PCD_EP_GetRxCount>
 80101f6:	4603      	mov	r3, r0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010208:	4b03      	ldr	r3, [pc, #12]	@ (8010218 <USBD_static_malloc+0x18>)
}
 801020a:	4618      	mov	r0, r3
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	240068dc 	.word	0x240068dc

0801021c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	4603      	mov	r3, r0
 8010238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801023a:	2300      	movs	r3, #0
 801023c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	2b03      	cmp	r3, #3
 8010242:	d817      	bhi.n	8010274 <USBD_Get_USB_Status+0x44>
 8010244:	a201      	add	r2, pc, #4	@ (adr r2, 801024c <USBD_Get_USB_Status+0x1c>)
 8010246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801024a:	bf00      	nop
 801024c:	0801025d 	.word	0x0801025d
 8010250:	08010263 	.word	0x08010263
 8010254:	08010269 	.word	0x08010269
 8010258:	0801026f 	.word	0x0801026f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]
    break;
 8010260:	e00b      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010262:	2303      	movs	r3, #3
 8010264:	73fb      	strb	r3, [r7, #15]
    break;
 8010266:	e008      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010268:	2301      	movs	r3, #1
 801026a:	73fb      	strb	r3, [r7, #15]
    break;
 801026c:	e005      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801026e:	2303      	movs	r3, #3
 8010270:	73fb      	strb	r3, [r7, #15]
    break;
 8010272:	e002      	b.n	801027a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010274:	2303      	movs	r3, #3
 8010276:	73fb      	strb	r3, [r7, #15]
    break;
 8010278:	bf00      	nop
  }
  return usb_status;
 801027a:	7bfb      	ldrb	r3, [r7, #15]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 801028c:	2200      	movs	r2, #0
 801028e:	2108      	movs	r1, #8
 8010290:	480a      	ldr	r0, [pc, #40]	@ (80102bc <ad7606_Init+0x34>)
 8010292:	f7f2 fa35 	bl	8002700 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010296:	2001      	movs	r0, #1
 8010298:	f7f1 fcaa 	bl	8001bf0 <HAL_Delay>
    AD7606_RST_SET();
 801029c:	2201      	movs	r2, #1
 801029e:	2108      	movs	r1, #8
 80102a0:	4806      	ldr	r0, [pc, #24]	@ (80102bc <ad7606_Init+0x34>)
 80102a2:	f7f2 fa2d 	bl	8002700 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80102a6:	2001      	movs	r0, #1
 80102a8:	f7f1 fca2 	bl	8001bf0 <HAL_Delay>
    AD7606_RST_RESET();
 80102ac:	2200      	movs	r2, #0
 80102ae:	2108      	movs	r1, #8
 80102b0:	4802      	ldr	r0, [pc, #8]	@ (80102bc <ad7606_Init+0x34>)
 80102b2:	f7f2 fa25 	bl	8002700 <HAL_GPIO_WritePin>
}
 80102b6:	bf00      	nop
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	58021800 	.word	0x58021800

080102c0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	4613      	mov	r3, r2
 80102cc:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 80102ce:	2200      	movs	r2, #0
 80102d0:	2180      	movs	r1, #128	@ 0x80
 80102d2:	4809      	ldr	r0, [pc, #36]	@ (80102f8 <ad7606_Read+0x38>)
 80102d4:	f7f2 fa14 	bl	8002700 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 80102d8:	88fa      	ldrh	r2, [r7, #6]
 80102da:	2364      	movs	r3, #100	@ 0x64
 80102dc:	68b9      	ldr	r1, [r7, #8]
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f7f7 f9fa 	bl	80076d8 <HAL_SPI_Receive>
    AD7606_CS_SET();
 80102e4:	2201      	movs	r2, #1
 80102e6:	2180      	movs	r1, #128	@ 0x80
 80102e8:	4803      	ldr	r0, [pc, #12]	@ (80102f8 <ad7606_Read+0x38>)
 80102ea:	f7f2 fa09 	bl	8002700 <HAL_GPIO_WritePin>
}
 80102ee:	bf00      	nop
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	58021800 	.word	0x58021800

080102fc <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7f7 fe71 	bl	8007ff0 <HAL_TIM_PWM_Start>
}
 801030e:	bf00      	nop
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
	...

08010318 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8010318:	b480      	push	{r7}
 801031a:	b087      	sub	sp, #28
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	460b      	mov	r3, r1
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8010326:	2300      	movs	r3, #0
 8010328:	617b      	str	r3, [r7, #20]
 801032a:	e03d      	b.n	80103a8 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	4413      	add	r3, r2
 8010334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010338:	2b00      	cmp	r3, #0
 801033a:	da0f      	bge.n	801035c <ad7606_Convert+0x44>
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	4413      	add	r3, r2
 8010344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010348:	b29b      	uxth	r3, r3
 801034a:	425b      	negs	r3, r3
 801034c:	b29b      	uxth	r3, r3
 801034e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010352:	b29b      	uxth	r3, r3
 8010354:	425b      	negs	r3, r3
 8010356:	b29b      	uxth	r3, r3
 8010358:	b21b      	sxth	r3, r3
 801035a:	e005      	b.n	8010368 <ad7606_Convert+0x50>
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	4413      	add	r3, r2
 8010364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010368:	697a      	ldr	r2, [r7, #20]
 801036a:	0052      	lsls	r2, r2, #1
 801036c:	68f9      	ldr	r1, [r7, #12]
 801036e:	440a      	add	r2, r1
 8010370:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	005b      	lsls	r3, r3, #1
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	4413      	add	r3, r2
 801037a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801037e:	ee07 3a90 	vmov	s15, r3
 8010382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010386:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801038a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	4413      	add	r3, r2
 8010396:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80103c0 <ad7606_Convert+0xa8>
 801039a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801039e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	3301      	adds	r3, #1
 80103a6:	617b      	str	r3, [r7, #20]
 80103a8:	897b      	ldrh	r3, [r7, #10]
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	dbbd      	blt.n	801032c <ad7606_Convert+0x14>
    }
}
 80103b0:	bf00      	nop
 80103b2:	bf00      	nop
 80103b4:	371c      	adds	r7, #28
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	47000000 	.word	0x47000000

080103c4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 80103c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103c8:	b087      	sub	sp, #28
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	60f8      	str	r0, [r7, #12]
 80103ce:	460b      	mov	r3, r1
 80103d0:	607a      	str	r2, [r7, #4]
 80103d2:	817b      	strh	r3, [r7, #10]
 80103d4:	466b      	mov	r3, sp
 80103d6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 80103d8:	8979      	ldrh	r1, [r7, #10]
 80103da:	460b      	mov	r3, r1
 80103dc:	3b01      	subs	r3, #1
 80103de:	617b      	str	r3, [r7, #20]
 80103e0:	b28b      	uxth	r3, r1
 80103e2:	2200      	movs	r2, #0
 80103e4:	4698      	mov	r8, r3
 80103e6:	4691      	mov	r9, r2
 80103e8:	f04f 0200 	mov.w	r2, #0
 80103ec:	f04f 0300 	mov.w	r3, #0
 80103f0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80103f4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80103f8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80103fc:	b28b      	uxth	r3, r1
 80103fe:	2200      	movs	r2, #0
 8010400:	461c      	mov	r4, r3
 8010402:	4615      	mov	r5, r2
 8010404:	f04f 0200 	mov.w	r2, #0
 8010408:	f04f 0300 	mov.w	r3, #0
 801040c:	012b      	lsls	r3, r5, #4
 801040e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010412:	0122      	lsls	r2, r4, #4
 8010414:	460b      	mov	r3, r1
 8010416:	005b      	lsls	r3, r3, #1
 8010418:	3307      	adds	r3, #7
 801041a:	08db      	lsrs	r3, r3, #3
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	ebad 0d03 	sub.w	sp, sp, r3
 8010422:	466b      	mov	r3, sp
 8010424:	3301      	adds	r3, #1
 8010426:	085b      	lsrs	r3, r3, #1
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 801042c:	897b      	ldrh	r3, [r7, #10]
 801042e:	461a      	mov	r2, r3
 8010430:	6939      	ldr	r1, [r7, #16]
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f7ff ff44 	bl	80102c0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8010438:	897b      	ldrh	r3, [r7, #10]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	4619      	mov	r1, r3
 801043e:	6938      	ldr	r0, [r7, #16]
 8010440:	f7ff ff6a 	bl	8010318 <ad7606_Convert>
 8010444:	46b5      	mov	sp, r6
}
 8010446:	bf00      	nop
 8010448:	371c      	adds	r7, #28
 801044a:	46bd      	mov	sp, r7
 801044c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010450 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af04      	add	r7, sp, #16
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	460b      	mov	r3, r1
 801045a:	70fb      	strb	r3, [r7, #3]
 801045c:	4613      	mov	r3, r2
 801045e:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8010460:	2300      	movs	r3, #0
 8010462:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8010464:	883b      	ldrh	r3, [r7, #0]
 8010466:	0a1b      	lsrs	r3, r3, #8
 8010468:	b29b      	uxth	r3, r3
 801046a:	b2db      	uxtb	r3, r3
 801046c:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 801046e:	883b      	ldrh	r3, [r7, #0]
 8010470:	b2db      	uxtb	r3, r3
 8010472:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	69d8      	ldr	r0, [r3, #28]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801047e:	4619      	mov	r1, r3
 8010480:	78fb      	ldrb	r3, [r7, #3]
 8010482:	b29a      	uxth	r2, r3
 8010484:	2364      	movs	r3, #100	@ 0x64
 8010486:	9302      	str	r3, [sp, #8]
 8010488:	2302      	movs	r3, #2
 801048a:	9301      	str	r3, [sp, #4]
 801048c:	f107 030c 	add.w	r3, r7, #12
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	2301      	movs	r3, #1
 8010494:	f7f2 fa1e 	bl	80028d4 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d105      	bne.n	80104aa <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 801049e:	883b      	ldrh	r3, [r7, #0]
 80104a0:	f003 0310 	and.w	r3, r3, #16
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	82da      	strh	r2, [r3, #22]
	}
}
 80104aa:	bf00      	nop
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b082      	sub	sp, #8
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	461a      	mov	r2, r3
 80104c0:	2100      	movs	r1, #0
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff ffc4 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	885b      	ldrh	r3, [r3, #2]
 80104cc:	461a      	mov	r2, r3
 80104ce:	2101      	movs	r1, #1
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7ff ffbd 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	889b      	ldrh	r3, [r3, #4]
 80104da:	461a      	mov	r2, r3
 80104dc:	2102      	movs	r1, #2
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff ffb6 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	88db      	ldrh	r3, [r3, #6]
 80104e8:	461a      	mov	r2, r3
 80104ea:	2103      	movs	r1, #3
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7ff ffaf 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	891b      	ldrh	r3, [r3, #8]
 80104f6:	461a      	mov	r2, r3
 80104f8:	210b      	movs	r1, #11
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7ff ffa8 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	895b      	ldrh	r3, [r3, #10]
 8010504:	461a      	mov	r2, r3
 8010506:	210c      	movs	r1, #12
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f7ff ffa1 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	899b      	ldrh	r3, [r3, #12]
 8010512:	461a      	mov	r2, r3
 8010514:	210d      	movs	r1, #13
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff ff9a 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	89db      	ldrh	r3, [r3, #14]
 8010520:	461a      	mov	r2, r3
 8010522:	210e      	movs	r1, #14
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff ff93 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8a1b      	ldrh	r3, [r3, #16]
 801052e:	461a      	mov	r2, r3
 8010530:	210f      	movs	r1, #15
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7ff ff8c 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	8a5b      	ldrh	r3, [r3, #18]
 801053c:	461a      	mov	r2, r3
 801053e:	2110      	movs	r1, #16
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff ff85 	bl	8010450 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	8a9b      	ldrh	r3, [r3, #20]
 801054a:	461a      	mov	r2, r3
 801054c:	2111      	movs	r1, #17
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7ff ff7e 	bl	8010450 <INA228_writeReg>
}
 8010554:	bf00      	nop
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 801055c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010560:	b08c      	sub	sp, #48	@ 0x30
 8010562:	af04      	add	r7, sp, #16
 8010564:	6078      	str	r0, [r7, #4]
 8010566:	460b      	mov	r3, r1
 8010568:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 801056a:	2300      	movs	r3, #0
 801056c:	60fb      	str	r3, [r7, #12]
 801056e:	2300      	movs	r3, #0
 8010570:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010578:	4618      	mov	r0, r3
 801057a:	78fb      	ldrb	r3, [r7, #3]
 801057c:	b29a      	uxth	r2, r3
 801057e:	78fb      	ldrb	r3, [r7, #3]
 8010580:	4921      	ldr	r1, [pc, #132]	@ (8010608 <INA228_readReg+0xac>)
 8010582:	5ccb      	ldrb	r3, [r1, r3]
 8010584:	4619      	mov	r1, r3
 8010586:	2364      	movs	r3, #100	@ 0x64
 8010588:	9302      	str	r3, [sp, #8]
 801058a:	9101      	str	r1, [sp, #4]
 801058c:	f107 030c 	add.w	r3, r7, #12
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	2301      	movs	r3, #1
 8010594:	4601      	mov	r1, r0
 8010596:	481d      	ldr	r0, [pc, #116]	@ (801060c <INA228_readReg+0xb0>)
 8010598:	f7f2 fab0 	bl	8002afc <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 801059c:	7b3b      	ldrb	r3, [r7, #12]
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2200      	movs	r2, #0
 80105a2:	469a      	mov	sl, r3
 80105a4:	4693      	mov	fp, r2
 80105a6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80105aa:	2301      	movs	r3, #1
 80105ac:	617b      	str	r3, [r7, #20]
 80105ae:	e01b      	b.n	80105e8 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 80105b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80105b4:	f04f 0200 	mov.w	r2, #0
 80105b8:	f04f 0300 	mov.w	r3, #0
 80105bc:	020b      	lsls	r3, r1, #8
 80105be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105c2:	0202      	lsls	r2, r0, #8
 80105c4:	f107 000c 	add.w	r0, r7, #12
 80105c8:	6979      	ldr	r1, [r7, #20]
 80105ca:	4401      	add	r1, r0
 80105cc:	7809      	ldrb	r1, [r1, #0]
 80105ce:	b2c9      	uxtb	r1, r1
 80105d0:	2000      	movs	r0, #0
 80105d2:	460c      	mov	r4, r1
 80105d4:	4605      	mov	r5, r0
 80105d6:	ea42 0804 	orr.w	r8, r2, r4
 80105da:	ea43 0905 	orr.w	r9, r3, r5
 80105de:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	3301      	adds	r3, #1
 80105e6:	617b      	str	r3, [r7, #20]
 80105e8:	78fb      	ldrb	r3, [r7, #3]
 80105ea:	4a07      	ldr	r2, [pc, #28]	@ (8010608 <INA228_readReg+0xac>)
 80105ec:	5cd3      	ldrb	r3, [r2, r3]
 80105ee:	461a      	mov	r2, r3
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	4293      	cmp	r3, r2
 80105f4:	dbdc      	blt.n	80105b0 <INA228_readReg+0x54>
	}

	return value;
 80105f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80105fa:	4610      	mov	r0, r2
 80105fc:	4619      	mov	r1, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010606:	bf00      	nop
 8010608:	08014c6c 	.word	0x08014c6c
 801060c:	24000378 	.word	0x24000378

08010610 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 8010618:	2105      	movs	r1, #5
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff ff9e 	bl	801055c <INA228_readReg>
 8010620:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010624:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010628:	f04f 0200 	mov.w	r2, #0
 801062c:	f04f 0300 	mov.w	r3, #0
 8010630:	0902      	lsrs	r2, r0, #4
 8010632:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010636:	090b      	lsrs	r3, r1, #4
 8010638:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 801063c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010640:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010644:	f173 0300 	sbcs.w	r3, r3, #0
 8010648:	d30c      	bcc.n	8010664 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 801064a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801064e:	f7ef ff67 	bl	8000520 <__aeabi_ul2f>
 8010652:	ee07 0a10 	vmov	s14, r0
 8010656:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010698 <INA228_getVBUS_V+0x88>
 801065a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801065e:	edc7 7a05 	vstr	s15, [r7, #20]
 8010662:	e005      	b.n	8010670 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 8010664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010668:	f7ef ff5a 	bl	8000520 <__aeabi_ul2f>
 801066c:	4603      	mov	r3, r0
 801066e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 8010670:	edd7 7a05 	vldr	s15, [r7, #20]
 8010674:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801069c <INA228_getVBUS_V+0x8c>
 8010678:	ee27 7a87 	vmul.f32	s14, s15, s14
 801067c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80106a0 <INA228_getVBUS_V+0x90>
 8010680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010684:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	ee07 3a90 	vmov	s15, r3
}
 801068e:	eeb0 0a67 	vmov.f32	s0, s15
 8010692:	3718      	adds	r7, #24
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	49800000 	.word	0x49800000
 801069c:	43435000 	.word	0x43435000
 80106a0:	49742400 	.word	0x49742400

080106a4 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b086      	sub	sp, #24
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 80106ac:	2107      	movs	r1, #7
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7ff ff54 	bl	801055c <INA228_readReg>
 80106b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 80106b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106bc:	f04f 0200 	mov.w	r2, #0
 80106c0:	f04f 0300 	mov.w	r3, #0
 80106c4:	0902      	lsrs	r2, r0, #4
 80106c6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80106ca:	090b      	lsrs	r3, r1, #4
 80106cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 80106d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80106d4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80106d8:	f173 0300 	sbcs.w	r3, r3, #0
 80106dc:	d30c      	bcc.n	80106f8 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 80106de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106e2:	f7ef ff1d 	bl	8000520 <__aeabi_ul2f>
 80106e6:	ee07 0a10 	vmov	s14, r0
 80106ea:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010714 <INA228_getCURRENT_signedLSB+0x70>
 80106ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106f2:	edc7 7a05 	vstr	s15, [r7, #20]
 80106f6:	e005      	b.n	8010704 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 80106f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106fc:	f7ef ff10 	bl	8000520 <__aeabi_ul2f>
 8010700:	4603      	mov	r3, r0
 8010702:	617b      	str	r3, [r7, #20]
	}

	return data;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	ee07 3a90 	vmov	s15, r3
}
 801070a:	eeb0 0a67 	vmov.f32	s0, s15
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	49800000 	.word	0x49800000

08010718 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7ff ffbf 	bl	80106a4 <INA228_getCURRENT_signedLSB>
 8010726:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010730:	ed97 7a03 	vldr	s14, [r7, #12]
 8010734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010738:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	ee07 3a90 	vmov	s15, r3
}
 8010742:	eeb0 0a67 	vmov.f32	s0, s15
 8010746:	3710      	adds	r7, #16
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	4603      	mov	r3, r0
 8010754:	460a      	mov	r2, r1
 8010756:	71fb      	strb	r3, [r7, #7]
 8010758:	4613      	mov	r3, r2
 801075a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 801075c:	1dfb      	adds	r3, r7, #7
 801075e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8010760:	79bb      	ldrb	r3, [r7, #6]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d005      	beq.n	8010772 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8010766:	2201      	movs	r2, #1
 8010768:	2140      	movs	r1, #64	@ 0x40
 801076a:	4811      	ldr	r0, [pc, #68]	@ (80107b0 <OLED_WR_Byte+0x64>)
 801076c:	f7f1 ffc8 	bl	8002700 <HAL_GPIO_WritePin>
 8010770:	e004      	b.n	801077c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8010772:	2200      	movs	r2, #0
 8010774:	2140      	movs	r1, #64	@ 0x40
 8010776:	480e      	ldr	r0, [pc, #56]	@ (80107b0 <OLED_WR_Byte+0x64>)
 8010778:	f7f1 ffc2 	bl	8002700 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 801077c:	2200      	movs	r2, #0
 801077e:	2102      	movs	r1, #2
 8010780:	480c      	ldr	r0, [pc, #48]	@ (80107b4 <OLED_WR_Byte+0x68>)
 8010782:	f7f1 ffbd 	bl	8002700 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8010786:	23c8      	movs	r3, #200	@ 0xc8
 8010788:	2201      	movs	r2, #1
 801078a:	68f9      	ldr	r1, [r7, #12]
 801078c:	480a      	ldr	r0, [pc, #40]	@ (80107b8 <OLED_WR_Byte+0x6c>)
 801078e:	f7f6 fdb5 	bl	80072fc <HAL_SPI_Transmit>

	OLED_CS_Set();
 8010792:	2201      	movs	r2, #1
 8010794:	2102      	movs	r1, #2
 8010796:	4807      	ldr	r0, [pc, #28]	@ (80107b4 <OLED_WR_Byte+0x68>)
 8010798:	f7f1 ffb2 	bl	8002700 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 801079c:	2201      	movs	r2, #1
 801079e:	2140      	movs	r1, #64	@ 0x40
 80107a0:	4803      	ldr	r0, [pc, #12]	@ (80107b0 <OLED_WR_Byte+0x64>)
 80107a2:	f7f1 ffad 	bl	8002700 <HAL_GPIO_WritePin>
}
 80107a6:	bf00      	nop
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	58022000 	.word	0x58022000
 80107b4:	58020400 	.word	0x58020400
 80107b8:	240003cc 	.word	0x240003cc

080107bc <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 80107c2:	2300      	movs	r3, #0
 80107c4:	71fb      	strb	r3, [r7, #7]
 80107c6:	e026      	b.n	8010816 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	3b50      	subs	r3, #80	@ 0x50
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2100      	movs	r1, #0
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7ff ffbb 	bl	801074c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 80107d6:	2100      	movs	r1, #0
 80107d8:	2000      	movs	r0, #0
 80107da:	f7ff ffb7 	bl	801074c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 80107de:	2100      	movs	r1, #0
 80107e0:	2010      	movs	r0, #16
 80107e2:	f7ff ffb3 	bl	801074c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80107e6:	2300      	movs	r3, #0
 80107e8:	71bb      	strb	r3, [r7, #6]
 80107ea:	e00d      	b.n	8010808 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 80107ec:	79ba      	ldrb	r2, [r7, #6]
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	490d      	ldr	r1, [pc, #52]	@ (8010828 <OLED_Refresh+0x6c>)
 80107f2:	00d2      	lsls	r2, r2, #3
 80107f4:	440a      	add	r2, r1
 80107f6:	4413      	add	r3, r2
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2101      	movs	r1, #1
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff ffa5 	bl	801074c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010802:	79bb      	ldrb	r3, [r7, #6]
 8010804:	3301      	adds	r3, #1
 8010806:	71bb      	strb	r3, [r7, #6]
 8010808:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801080c:	2b00      	cmp	r3, #0
 801080e:	daed      	bge.n	80107ec <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010810:	79fb      	ldrb	r3, [r7, #7]
 8010812:	3301      	adds	r3, #1
 8010814:	71fb      	strb	r3, [r7, #7]
 8010816:	79fb      	ldrb	r3, [r7, #7]
 8010818:	2b07      	cmp	r3, #7
 801081a:	d9d5      	bls.n	80107c8 <OLED_Refresh+0xc>
	}
}
 801081c:	bf00      	nop
 801081e:	bf00      	nop
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	24006afc 	.word	0x24006afc

0801082c <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010832:	2300      	movs	r3, #0
 8010834:	71fb      	strb	r3, [r7, #7]
 8010836:	e014      	b.n	8010862 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010838:	2300      	movs	r3, #0
 801083a:	71bb      	strb	r3, [r7, #6]
 801083c:	e00a      	b.n	8010854 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 801083e:	79ba      	ldrb	r2, [r7, #6]
 8010840:	79fb      	ldrb	r3, [r7, #7]
 8010842:	490c      	ldr	r1, [pc, #48]	@ (8010874 <OLED_Clear+0x48>)
 8010844:	00d2      	lsls	r2, r2, #3
 8010846:	440a      	add	r2, r1
 8010848:	4413      	add	r3, r2
 801084a:	2200      	movs	r2, #0
 801084c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 801084e:	79bb      	ldrb	r3, [r7, #6]
 8010850:	3301      	adds	r3, #1
 8010852:	71bb      	strb	r3, [r7, #6]
 8010854:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010858:	2b00      	cmp	r3, #0
 801085a:	daf0      	bge.n	801083e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 801085c:	79fb      	ldrb	r3, [r7, #7]
 801085e:	3301      	adds	r3, #1
 8010860:	71fb      	strb	r3, [r7, #7]
 8010862:	79fb      	ldrb	r3, [r7, #7]
 8010864:	2b07      	cmp	r3, #7
 8010866:	d9e7      	bls.n	8010838 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010868:	f7ff ffa8 	bl	80107bc <OLED_Refresh>
}
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	24006afc 	.word	0x24006afc

08010878 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	460a      	mov	r2, r1
 8010882:	71fb      	strb	r3, [r7, #7]
 8010884:	4613      	mov	r3, r2
 8010886:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010888:	79bb      	ldrb	r3, [r7, #6]
 801088a:	08db      	lsrs	r3, r3, #3
 801088c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 801088e:	79bb      	ldrb	r3, [r7, #6]
 8010890:	f003 0307 	and.w	r3, r3, #7
 8010894:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010896:	7bbb      	ldrb	r3, [r7, #14]
 8010898:	2201      	movs	r2, #1
 801089a:	fa02 f303 	lsl.w	r3, r2, r3
 801089e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 80108a0:	79fa      	ldrb	r2, [r7, #7]
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	490a      	ldr	r1, [pc, #40]	@ (80108d0 <OLED_DrawPoint+0x58>)
 80108a6:	00d2      	lsls	r2, r2, #3
 80108a8:	440a      	add	r2, r1
 80108aa:	4413      	add	r3, r2
 80108ac:	7818      	ldrb	r0, [r3, #0]
 80108ae:	79fa      	ldrb	r2, [r7, #7]
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	7b79      	ldrb	r1, [r7, #13]
 80108b4:	4301      	orrs	r1, r0
 80108b6:	b2c8      	uxtb	r0, r1
 80108b8:	4905      	ldr	r1, [pc, #20]	@ (80108d0 <OLED_DrawPoint+0x58>)
 80108ba:	00d2      	lsls	r2, r2, #3
 80108bc:	440a      	add	r2, r1
 80108be:	4413      	add	r3, r2
 80108c0:	4602      	mov	r2, r0
 80108c2:	701a      	strb	r2, [r3, #0]
}
 80108c4:	bf00      	nop
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr
 80108d0:	24006afc 	.word	0x24006afc

080108d4 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	460a      	mov	r2, r1
 80108de:	71fb      	strb	r3, [r7, #7]
 80108e0:	4613      	mov	r3, r2
 80108e2:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 80108e4:	79bb      	ldrb	r3, [r7, #6]
 80108e6:	08db      	lsrs	r3, r3, #3
 80108e8:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 80108ea:	79bb      	ldrb	r3, [r7, #6]
 80108ec:	f003 0307 	and.w	r3, r3, #7
 80108f0:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	2201      	movs	r2, #1
 80108f6:	fa02 f303 	lsl.w	r3, r2, r3
 80108fa:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80108fc:	79fa      	ldrb	r2, [r7, #7]
 80108fe:	7bfb      	ldrb	r3, [r7, #15]
 8010900:	491b      	ldr	r1, [pc, #108]	@ (8010970 <OLED_ClearPoint+0x9c>)
 8010902:	00d2      	lsls	r2, r2, #3
 8010904:	440a      	add	r2, r1
 8010906:	4413      	add	r3, r2
 8010908:	7819      	ldrb	r1, [r3, #0]
 801090a:	79fa      	ldrb	r2, [r7, #7]
 801090c:	7bfb      	ldrb	r3, [r7, #15]
 801090e:	43c9      	mvns	r1, r1
 8010910:	b2c8      	uxtb	r0, r1
 8010912:	4917      	ldr	r1, [pc, #92]	@ (8010970 <OLED_ClearPoint+0x9c>)
 8010914:	00d2      	lsls	r2, r2, #3
 8010916:	440a      	add	r2, r1
 8010918:	4413      	add	r3, r2
 801091a:	4602      	mov	r2, r0
 801091c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 801091e:	79fa      	ldrb	r2, [r7, #7]
 8010920:	7bfb      	ldrb	r3, [r7, #15]
 8010922:	4913      	ldr	r1, [pc, #76]	@ (8010970 <OLED_ClearPoint+0x9c>)
 8010924:	00d2      	lsls	r2, r2, #3
 8010926:	440a      	add	r2, r1
 8010928:	4413      	add	r3, r2
 801092a:	7818      	ldrb	r0, [r3, #0]
 801092c:	79fa      	ldrb	r2, [r7, #7]
 801092e:	7bfb      	ldrb	r3, [r7, #15]
 8010930:	7b79      	ldrb	r1, [r7, #13]
 8010932:	4301      	orrs	r1, r0
 8010934:	b2c8      	uxtb	r0, r1
 8010936:	490e      	ldr	r1, [pc, #56]	@ (8010970 <OLED_ClearPoint+0x9c>)
 8010938:	00d2      	lsls	r2, r2, #3
 801093a:	440a      	add	r2, r1
 801093c:	4413      	add	r3, r2
 801093e:	4602      	mov	r2, r0
 8010940:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010942:	79fa      	ldrb	r2, [r7, #7]
 8010944:	7bfb      	ldrb	r3, [r7, #15]
 8010946:	490a      	ldr	r1, [pc, #40]	@ (8010970 <OLED_ClearPoint+0x9c>)
 8010948:	00d2      	lsls	r2, r2, #3
 801094a:	440a      	add	r2, r1
 801094c:	4413      	add	r3, r2
 801094e:	7819      	ldrb	r1, [r3, #0]
 8010950:	79fa      	ldrb	r2, [r7, #7]
 8010952:	7bfb      	ldrb	r3, [r7, #15]
 8010954:	43c9      	mvns	r1, r1
 8010956:	b2c8      	uxtb	r0, r1
 8010958:	4905      	ldr	r1, [pc, #20]	@ (8010970 <OLED_ClearPoint+0x9c>)
 801095a:	00d2      	lsls	r2, r2, #3
 801095c:	440a      	add	r2, r1
 801095e:	4413      	add	r3, r2
 8010960:	4602      	mov	r2, r0
 8010962:	701a      	strb	r2, [r3, #0]
}
 8010964:	bf00      	nop
 8010966:	3714      	adds	r7, #20
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	24006afc 	.word	0x24006afc

08010974 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010974:	b590      	push	{r4, r7, lr}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	4604      	mov	r4, r0
 801097c:	4608      	mov	r0, r1
 801097e:	4611      	mov	r1, r2
 8010980:	461a      	mov	r2, r3
 8010982:	4623      	mov	r3, r4
 8010984:	71fb      	strb	r3, [r7, #7]
 8010986:	4603      	mov	r3, r0
 8010988:	71bb      	strb	r3, [r7, #6]
 801098a:	460b      	mov	r3, r1
 801098c:	717b      	strb	r3, [r7, #5]
 801098e:	4613      	mov	r3, r2
 8010990:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 8010992:	79bb      	ldrb	r3, [r7, #6]
 8010994:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8010996:	793b      	ldrb	r3, [r7, #4]
 8010998:	08db      	lsrs	r3, r3, #3
 801099a:	b2db      	uxtb	r3, r3
 801099c:	461a      	mov	r2, r3
 801099e:	793b      	ldrb	r3, [r7, #4]
 80109a0:	f003 0307 	and.w	r3, r3, #7
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	bf14      	ite	ne
 80109aa:	2301      	movne	r3, #1
 80109ac:	2300      	moveq	r3, #0
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	4413      	add	r3, r2
 80109b2:	b2da      	uxtb	r2, r3
 80109b4:	793b      	ldrb	r3, [r7, #4]
 80109b6:	085b      	lsrs	r3, r3, #1
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	fb12 f303 	smulbb	r3, r2, r3
 80109be:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 80109c0:	797b      	ldrb	r3, [r7, #5]
 80109c2:	3b20      	subs	r3, #32
 80109c4:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 80109c6:	2300      	movs	r3, #0
 80109c8:	73fb      	strb	r3, [r7, #15]
 80109ca:	e057      	b.n	8010a7c <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 80109cc:	793b      	ldrb	r3, [r7, #4]
 80109ce:	2b0c      	cmp	r3, #12
 80109d0:	d10b      	bne.n	80109ea <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 80109d2:	7aba      	ldrb	r2, [r7, #10]
 80109d4:	7bf9      	ldrb	r1, [r7, #15]
 80109d6:	482e      	ldr	r0, [pc, #184]	@ (8010a90 <OLED_ShowChar+0x11c>)
 80109d8:	4613      	mov	r3, r2
 80109da:	005b      	lsls	r3, r3, #1
 80109dc:	4413      	add	r3, r2
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4403      	add	r3, r0
 80109e2:	440b      	add	r3, r1
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	737b      	strb	r3, [r7, #13]
 80109e8:	e019      	b.n	8010a1e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 80109ea:	793b      	ldrb	r3, [r7, #4]
 80109ec:	2b10      	cmp	r3, #16
 80109ee:	d108      	bne.n	8010a02 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 80109f0:	7aba      	ldrb	r2, [r7, #10]
 80109f2:	7bfb      	ldrb	r3, [r7, #15]
 80109f4:	4927      	ldr	r1, [pc, #156]	@ (8010a94 <OLED_ShowChar+0x120>)
 80109f6:	0112      	lsls	r2, r2, #4
 80109f8:	440a      	add	r2, r1
 80109fa:	4413      	add	r3, r2
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	737b      	strb	r3, [r7, #13]
 8010a00:	e00d      	b.n	8010a1e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010a02:	793b      	ldrb	r3, [r7, #4]
 8010a04:	2b18      	cmp	r3, #24
 8010a06:	d13e      	bne.n	8010a86 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010a08:	7aba      	ldrb	r2, [r7, #10]
 8010a0a:	7bf9      	ldrb	r1, [r7, #15]
 8010a0c:	4822      	ldr	r0, [pc, #136]	@ (8010a98 <OLED_ShowChar+0x124>)
 8010a0e:	4613      	mov	r3, r2
 8010a10:	00db      	lsls	r3, r3, #3
 8010a12:	4413      	add	r3, r2
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	4403      	add	r3, r0
 8010a18:	440b      	add	r3, r1
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8010a1e:	2300      	movs	r3, #0
 8010a20:	73bb      	strb	r3, [r7, #14]
 8010a22:	e025      	b.n	8010a70 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010a24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	da06      	bge.n	8010a3a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8010a2c:	79ba      	ldrb	r2, [r7, #6]
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	4611      	mov	r1, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff ff20 	bl	8010878 <OLED_DrawPoint>
 8010a38:	e005      	b.n	8010a46 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 8010a3a:	79ba      	ldrb	r2, [r7, #6]
 8010a3c:	79fb      	ldrb	r3, [r7, #7]
 8010a3e:	4611      	mov	r1, r2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff ff47 	bl	80108d4 <OLED_ClearPoint>
			temp <<= 1;
 8010a46:	7b7b      	ldrb	r3, [r7, #13]
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	737b      	strb	r3, [r7, #13]
			y++;
 8010a4c:	79bb      	ldrb	r3, [r7, #6]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010a52:	79ba      	ldrb	r2, [r7, #6]
 8010a54:	7b3b      	ldrb	r3, [r7, #12]
 8010a56:	1ad2      	subs	r2, r2, r3
 8010a58:	793b      	ldrb	r3, [r7, #4]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d105      	bne.n	8010a6a <OLED_ShowChar+0xf6>
			{
				y = y0;
 8010a5e:	7b3b      	ldrb	r3, [r7, #12]
 8010a60:	71bb      	strb	r3, [r7, #6]
				x++;
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	3301      	adds	r3, #1
 8010a66:	71fb      	strb	r3, [r7, #7]
				break;
 8010a68:	e005      	b.n	8010a76 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 8010a6a:	7bbb      	ldrb	r3, [r7, #14]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	73bb      	strb	r3, [r7, #14]
 8010a70:	7bbb      	ldrb	r3, [r7, #14]
 8010a72:	2b07      	cmp	r3, #7
 8010a74:	d9d6      	bls.n	8010a24 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010a76:	7bfb      	ldrb	r3, [r7, #15]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	73fb      	strb	r3, [r7, #15]
 8010a7c:	7bfa      	ldrb	r2, [r7, #15]
 8010a7e:	7afb      	ldrb	r3, [r7, #11]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d3a3      	bcc.n	80109cc <OLED_ShowChar+0x58>
 8010a84:	e000      	b.n	8010a88 <OLED_ShowChar+0x114>
			return;
 8010a86:	bf00      	nop
			}
		}
	}
}
 8010a88:	3714      	adds	r7, #20
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd90      	pop	{r4, r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	08014cac 	.word	0x08014cac
 8010a94:	08015120 	.word	0x08015120
 8010a98:	08015710 	.word	0x08015710

08010a9c <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	603a      	str	r2, [r7, #0]
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	71fb      	strb	r3, [r7, #7]
 8010aaa:	460b      	mov	r3, r1
 8010aac:	71bb      	strb	r3, [r7, #6]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010ab2:	e01b      	b.n	8010aec <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	781a      	ldrb	r2, [r3, #0]
 8010ab8:	797b      	ldrb	r3, [r7, #5]
 8010aba:	79b9      	ldrb	r1, [r7, #6]
 8010abc:	79f8      	ldrb	r0, [r7, #7]
 8010abe:	f7ff ff59 	bl	8010974 <OLED_ShowChar>
		x += size1 / 2;
 8010ac2:	797b      	ldrb	r3, [r7, #5]
 8010ac4:	085b      	lsrs	r3, r3, #1
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	79fb      	ldrb	r3, [r7, #7]
 8010aca:	4413      	add	r3, r2
 8010acc:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 8010ace:	79fa      	ldrb	r2, [r7, #7]
 8010ad0:	797b      	ldrb	r3, [r7, #5]
 8010ad2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	dd05      	ble.n	8010ae6 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 8010ada:	2302      	movs	r3, #2
 8010adc:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8010ade:	79ba      	ldrb	r2, [r7, #6]
 8010ae0:	797b      	ldrb	r3, [r7, #5]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	2b1f      	cmp	r3, #31
 8010af2:	d903      	bls.n	8010afc <OLED_ShowString+0x60>
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b7e      	cmp	r3, #126	@ 0x7e
 8010afa:	d9db      	bls.n	8010ab4 <OLED_ShowString+0x18>
	}
}
 8010afc:	bf00      	nop
 8010afe:	3708      	adds	r7, #8
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010b08:	2200      	movs	r2, #0
 8010b0a:	2120      	movs	r1, #32
 8010b0c:	483f      	ldr	r0, [pc, #252]	@ (8010c0c <OLED_Init+0x108>)
 8010b0e:	f7f1 fdf7 	bl	8002700 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010b12:	20c8      	movs	r0, #200	@ 0xc8
 8010b14:	f7f1 f86c 	bl	8001bf0 <HAL_Delay>
	OLED_RES_Set();
 8010b18:	2201      	movs	r2, #1
 8010b1a:	2120      	movs	r1, #32
 8010b1c:	483b      	ldr	r0, [pc, #236]	@ (8010c0c <OLED_Init+0x108>)
 8010b1e:	f7f1 fdef 	bl	8002700 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010b22:	2100      	movs	r1, #0
 8010b24:	20ae      	movs	r0, #174	@ 0xae
 8010b26:	f7ff fe11 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	f7ff fe0d 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010b32:	2100      	movs	r1, #0
 8010b34:	2010      	movs	r0, #16
 8010b36:	f7ff fe09 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	2040      	movs	r0, #64	@ 0x40
 8010b3e:	f7ff fe05 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010b42:	2100      	movs	r1, #0
 8010b44:	2081      	movs	r0, #129	@ 0x81
 8010b46:	f7ff fe01 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	20cf      	movs	r0, #207	@ 0xcf
 8010b4e:	f7ff fdfd 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010b52:	2100      	movs	r1, #0
 8010b54:	20a1      	movs	r0, #161	@ 0xa1
 8010b56:	f7ff fdf9 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	20c8      	movs	r0, #200	@ 0xc8
 8010b5e:	f7ff fdf5 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010b62:	2100      	movs	r1, #0
 8010b64:	20a6      	movs	r0, #166	@ 0xa6
 8010b66:	f7ff fdf1 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	20a8      	movs	r0, #168	@ 0xa8
 8010b6e:	f7ff fded 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010b72:	2100      	movs	r1, #0
 8010b74:	203f      	movs	r0, #63	@ 0x3f
 8010b76:	f7ff fde9 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	20d3      	movs	r0, #211	@ 0xd3
 8010b7e:	f7ff fde5 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010b82:	2100      	movs	r1, #0
 8010b84:	2000      	movs	r0, #0
 8010b86:	f7ff fde1 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010b8a:	2100      	movs	r1, #0
 8010b8c:	20d5      	movs	r0, #213	@ 0xd5
 8010b8e:	f7ff fddd 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010b92:	2100      	movs	r1, #0
 8010b94:	2080      	movs	r0, #128	@ 0x80
 8010b96:	f7ff fdd9 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	20d9      	movs	r0, #217	@ 0xd9
 8010b9e:	f7ff fdd5 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	20f1      	movs	r0, #241	@ 0xf1
 8010ba6:	f7ff fdd1 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010baa:	2100      	movs	r1, #0
 8010bac:	20da      	movs	r0, #218	@ 0xda
 8010bae:	f7ff fdcd 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	2012      	movs	r0, #18
 8010bb6:	f7ff fdc9 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010bba:	2100      	movs	r1, #0
 8010bbc:	20db      	movs	r0, #219	@ 0xdb
 8010bbe:	f7ff fdc5 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	2040      	movs	r0, #64	@ 0x40
 8010bc6:	f7ff fdc1 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010bca:	2100      	movs	r1, #0
 8010bcc:	2020      	movs	r0, #32
 8010bce:	f7ff fdbd 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	2002      	movs	r0, #2
 8010bd6:	f7ff fdb9 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010bda:	2100      	movs	r1, #0
 8010bdc:	208d      	movs	r0, #141	@ 0x8d
 8010bde:	f7ff fdb5 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8010be2:	2100      	movs	r1, #0
 8010be4:	2014      	movs	r0, #20
 8010be6:	f7ff fdb1 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010bea:	2100      	movs	r1, #0
 8010bec:	20a4      	movs	r0, #164	@ 0xa4
 8010bee:	f7ff fdad 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	20a6      	movs	r0, #166	@ 0xa6
 8010bf6:	f7ff fda9 	bl	801074c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	20af      	movs	r0, #175	@ 0xaf
 8010bfe:	f7ff fda5 	bl	801074c <OLED_WR_Byte>
	OLED_Clear();
 8010c02:	f7ff fe13 	bl	801082c <OLED_Clear>
}
 8010c06:	bf00      	nop
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	58020800 	.word	0x58020800

08010c10 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010c10:	b480      	push	{r7}
 8010c12:	b087      	sub	sp, #28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6178      	str	r0, [r7, #20]
 8010c18:	ed87 0a04 	vstr	s0, [r7, #16]
 8010c1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8010c20:	ed87 1a02 	vstr	s2, [r7, #8]
 8010c24:	edc7 1a01 	vstr	s3, [r7, #4]
 8010c28:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	693a      	ldr	r2, [r7, #16]
 8010c30:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	f04f 0200 	mov.w	r2, #0
 8010c50:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	f04f 0200 	mov.w	r2, #0
 8010c58:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f04f 0200 	mov.w	r2, #0
 8010c60:	615a      	str	r2, [r3, #20]
}
 8010c62:	bf00      	nop
 8010c64:	371c      	adds	r7, #28
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b085      	sub	sp, #20
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	60f8      	str	r0, [r7, #12]
 8010c76:	ed87 0a02 	vstr	s0, [r7, #8]
 8010c7a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010c7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8010c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	ed93 7a06 	vldr	s14, [r3, #24]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	edd3 6a00 	vldr	s13, [r3]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	ed93 6a03 	vldr	s12, [r3, #12]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	edd3 7a04 	vldr	s15, [r3, #16]
 8010ca8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010cac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	ed93 6a01 	vldr	s12, [r3, #4]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8010cbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010cc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	ed93 6a02 	vldr	s12, [r3, #8]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	edd3 5a03 	vldr	s11, [r3, #12]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8010cd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010cda:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	edd3 7a05 	vldr	s15, [r3, #20]
 8010ce4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010ce8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	691a      	ldr	r2, [r3, #16]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	68da      	ldr	r2, [r3, #12]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	edd3 7a07 	vldr	s15, [r3, #28]
 8010d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1e:	dd04      	ble.n	8010d2a <pid+0xbc>
		pid->out = pid->Max;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	69da      	ldr	r2, [r3, #28]
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8010d28:	e00f      	b.n	8010d4a <pid+0xdc>
	else if (pid->out < pid->Min)
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	edd3 7a08 	vldr	s15, [r3, #32]
 8010d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3e:	d400      	bmi.n	8010d42 <pid+0xd4>
}
 8010d40:	e003      	b.n	8010d4a <pid+0xdc>
		pid->out = pid->Min;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6a1a      	ldr	r2, [r3, #32]
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	619a      	str	r2, [r3, #24]
}
 8010d4a:	bf00      	nop
 8010d4c:	3714      	adds	r7, #20
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
	...

08010d58 <svpwm_Control>:
 * @brief  SVPWM控制
 * @param  signal PLL信号输入结构体指针
 * @param  Udc 直流母线电压
 */
void svpwm_Control(pll_Signal_V *signal, float Udc)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b095      	sub	sp, #84	@ 0x54
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	ed87 0a00 	vstr	s0, [r7]
    // 电压标幺化
    float Ts = signal->basic->Ts;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6a1b      	ldr	r3, [r3, #32]
 8010d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    float Ubase = Udc / 1.7320508f;                     // 基础电压
 8010d6c:	ed97 7a00 	vldr	s14, [r7]
 8010d70:	eddf 6adb 	vldr	s13, [pc, #876]	@ 80110e0 <svpwm_Control+0x388>
 8010d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d78:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float Ualpha = signal->basic->clarke_alpha / Ubase; // 标幺化Clarke变换后的α轴电压
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	edd3 6a03 	vldr	s13, [r3, #12]
 8010d84:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d8c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float Ubeta = signal->basic->clarke_beta / Ubase;   // 标幺化Clarke变换后的β轴电压
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	edd3 6a04 	vldr	s13, [r3, #16]
 8010d98:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010da0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // 计算中间变量
    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 8010da4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8010da8:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 80110e0 <svpwm_Control+0x388>
 8010dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010db0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010db8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float Ubeta_ = Ubeta * Ts;
 8010dbc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010dc0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dc8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 计算XYZ
    float X = Ubeta_;
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dce:	623b      	str	r3, [r7, #32]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8010dd0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010dd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010ddc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010de0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010de4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dec:	edc7 7a07 	vstr	s15, [r7, #28]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 8010df0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010df4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010dfc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010e00:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e0c:	edc7 7a06 	vstr	s15, [r7, #24]

    // 通过XYZ做扇区判断
    uint8_t sector = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (Y < 0)
 8010e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e22:	d517      	bpl.n	8010e54 <svpwm_Control+0xfc>
    {
        if (Z < 0)
 8010e24:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e30:	d503      	bpl.n	8010e3a <svpwm_Control+0xe2>
            sector = 5;
 8010e32:	2305      	movs	r3, #5
 8010e34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010e38:	e023      	b.n	8010e82 <svpwm_Control+0x12a>
        else
            sector = (X < 0) ? 4 : 3;
 8010e3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e46:	d501      	bpl.n	8010e4c <svpwm_Control+0xf4>
 8010e48:	2304      	movs	r3, #4
 8010e4a:	e000      	b.n	8010e4e <svpwm_Control+0xf6>
 8010e4c:	2303      	movs	r3, #3
 8010e4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010e52:	e016      	b.n	8010e82 <svpwm_Control+0x12a>
    }
    else
    {
        if (Z > 0)
 8010e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e60:	dd03      	ble.n	8010e6a <svpwm_Control+0x112>
            sector = 2;
 8010e62:	2302      	movs	r3, #2
 8010e64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010e68:	e00b      	b.n	8010e82 <svpwm_Control+0x12a>
        else
            sector = (X < 0) ? 6 : 1;
 8010e6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e76:	d501      	bpl.n	8010e7c <svpwm_Control+0x124>
 8010e78:	2306      	movs	r3, #6
 8010e7a:	e000      	b.n	8010e7e <svpwm_Control+0x126>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8010e82:	f04f 0300 	mov.w	r3, #0
 8010e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e88:	f04f 0300 	mov.w	r3, #0
 8010e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e8e:	f04f 0300 	mov.w	r3, #0
 8010e92:	643b      	str	r3, [r7, #64]	@ 0x40
    switch (sector)
 8010e94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010e98:	3b01      	subs	r3, #1
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	f200 80f0 	bhi.w	8011080 <svpwm_Control+0x328>
 8010ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea8 <svpwm_Control+0x150>)
 8010ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea6:	bf00      	nop
 8010ea8:	08010ec1 	.word	0x08010ec1
 8010eac:	08010f0b 	.word	0x08010f0b
 8010eb0:	08010f55 	.word	0x08010f55
 8010eb4:	08010f9f 	.word	0x08010f9f
 8010eb8:	08010fe9 	.word	0x08010fe9
 8010ebc:	08011037 	.word	0x08011037
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 8010ec0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010ec4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010ec8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010ecc:	edd7 6a08 	vldr	s13, [r7, #32]
 8010ed0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ed4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010ed8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010edc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ee4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8010ee8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ef4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010ef8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010efc:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f04:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010f08:	e0ba      	b.n	8011080 <svpwm_Control+0x328>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 8010f0a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010f0e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f16:	edd7 6a06 	vldr	s13, [r7, #24]
 8010f1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010f22:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f26:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f2e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010f32:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010f36:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f3e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 8010f42:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010f46:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f4e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010f52:	e095      	b.n	8011080 <svpwm_Control+0x328>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 8010f54:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010f58:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f60:	edd7 6a08 	vldr	s13, [r7, #32]
 8010f64:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010f6c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f78:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010f7c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010f80:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f88:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8010f8c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010f90:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f98:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8010f9c:	e070      	b.n	8011080 <svpwm_Control+0x328>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 8010f9e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010fa2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010fa6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010faa:	edd7 6a06 	vldr	s13, [r7, #24]
 8010fae:	edd7 7a08 	vldr	s15, [r7, #32]
 8010fb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010fb6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010fba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fc2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 8010fc6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010fca:	edd7 7a08 	vldr	s15, [r7, #32]
 8010fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fd2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010fd6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010fda:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fe2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8010fe6:	e04b      	b.n	8011080 <svpwm_Control+0x328>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 8010fe8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010fec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010ff0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010ff4:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ff8:	eef1 6a67 	vneg.f32	s13, s15
 8010ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8011000:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011004:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011008:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011010:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8011014:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011018:	edd7 7a07 	vldr	s15, [r7, #28]
 801101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011020:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8011024:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8011028:	edd7 7a06 	vldr	s15, [r7, #24]
 801102c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011030:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 8011034:	e024      	b.n	8011080 <svpwm_Control+0x328>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 8011036:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801103a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801103e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011042:	edd7 6a07 	vldr	s13, [r7, #28]
 8011046:	edd7 7a08 	vldr	s15, [r7, #32]
 801104a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801104e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011052:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011056:	ee77 7a27 	vadd.f32	s15, s14, s15
 801105a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 801105e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8011062:	edd7 7a07 	vldr	s15, [r7, #28]
 8011066:	ee77 7a67 	vsub.f32	s15, s14, s15
 801106a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 801106e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011072:	edd7 7a08 	vldr	s15, [r7, #32]
 8011076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801107a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 801107e:	bf00      	nop
    }

    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 8011080:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8011084:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8011088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801108c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80110e4 <svpwm_Control+0x38c>
 8011090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011098:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 801109c:	60fb      	str	r3, [r7, #12]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 801109e:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80110a2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80110a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80110e4 <svpwm_Control+0x38c>
 80110ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80110b6:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 80110ba:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 80110bc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80110c0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80110c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110c8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80110e4 <svpwm_Control+0x38c>
 80110cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80110d4:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 80110d8:	617b      	str	r3, [r7, #20]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 80110da:	2300      	movs	r3, #0
 80110dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80110de:	e018      	b.n	8011112 <svpwm_Control+0x3ba>
 80110e0:	3fddb3d7 	.word	0x3fddb3d7
 80110e4:	45bb7800 	.word	0x45bb7800
    {
        if (ccr[i] > TIM_PERIOD)
 80110e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	3350      	adds	r3, #80	@ 0x50
 80110ee:	443b      	add	r3, r7
 80110f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80110f4:	f241 726f 	movw	r2, #5999	@ 0x176f
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d907      	bls.n	801110c <svpwm_Control+0x3b4>
        {
            ccr[i] = TIM_PERIOD;
 80110fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	3350      	adds	r3, #80	@ 0x50
 8011102:	443b      	add	r3, r7
 8011104:	f241 726f 	movw	r2, #5999	@ 0x176f
 8011108:	f843 2c44 	str.w	r2, [r3, #-68]
    for (int i = 0; i < 3; ++i)
 801110c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801110e:	3301      	adds	r3, #1
 8011110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011114:	2b02      	cmp	r3, #2
 8011116:	dde7      	ble.n	80110e8 <svpwm_Control+0x390>
            ccr[i] = 0;
        }
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 8011118:	4a07      	ldr	r2, [pc, #28]	@ (8011138 <svpwm_Control+0x3e0>)
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 801111e:	4a06      	ldr	r2, [pc, #24]	@ (8011138 <svpwm_Control+0x3e0>)
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 8011124:	4a04      	ldr	r2, [pc, #16]	@ (8011138 <svpwm_Control+0x3e0>)
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 801112a:	bf00      	nop
 801112c:	3754      	adds	r7, #84	@ 0x54
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	40010000 	.word	0x40010000
 801113c:	00000000 	.word	0x00000000

08011140 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F, float Umax)
{
 8011140:	b590      	push	{r4, r7, lr}
 8011142:	b087      	sub	sp, #28
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	ed87 0a02 	vstr	s0, [r7, #8]
 801114c:	460b      	mov	r3, r1
 801114e:	edc7 0a00 	vstr	s1, [r7]
 8011152:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 8011154:	200c      	movs	r0, #12
 8011156:	f000 fc79 	bl	8011a4c <malloc>
 801115a:	4603      	mov	r3, r0
 801115c:	461a      	mov	r2, r3
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681c      	ldr	r4, [r3, #0]
 8011166:	2044      	movs	r0, #68	@ 0x44
 8011168:	f000 fc70 	bl	8011a4c <malloc>
 801116c:	4603      	mov	r3, r0
 801116e:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681c      	ldr	r4, [r3, #0]
 8011174:	2024      	movs	r0, #36	@ 0x24
 8011176:	f000 fc69 	bl	8011a4c <malloc>
 801117a:	4603      	mov	r3, r0
 801117c:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f04f 0200 	mov.w	r2, #0
 8011188:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f04f 0200 	mov.w	r2, #0
 8011194:	605a      	str	r2, [r3, #4]

    (*signal)->theta = 0.f;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f04f 0200 	mov.w	r2, #0
 801119e:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80111aa:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8011260 <pll_Init_V+0x120>
 80111ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111b2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 80111b6:	88fb      	ldrh	r3, [r7, #6]
 80111b8:	ee07 3a90 	vmov	s15, r3
 80111bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ce:	edc3 7a08 	vstr	s15, [r3, #32]
    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0 / Umax;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80111e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80111ea:	ed97 7a00 	vldr	s14, [r7]
 80111ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111f2:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 80111f6:	ed97 7a00 	vldr	s14, [r7]
 80111fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80111fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011206:	eeb0 0b47 	vmov.f64	d0, d7
 801120a:	f003 f9fd 	bl	8014608 <sqrt>
 801120e:	eeb0 7b40 	vmov.f64	d7, d0
 8011212:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8011258 <pll_Init_V+0x118>
 8011216:	ee27 5b06 	vmul.f64	d5, d7, d6
 801121a:	edd7 7a00 	vldr	s15, [r7]
 801121e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8011222:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011226:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801122a:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 8011264 <pll_Init_V+0x124>
 8011238:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011268 <pll_Init_V+0x128>
 801123c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 801126c <pll_Init_V+0x12c>
 8011240:	edd7 0a05 	vldr	s1, [r7, #20]
 8011244:	ed97 0a04 	vldr	s0, [r7, #16]
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff fce1 	bl	8010c10 <pid_Init>
}
 801124e:	bf00      	nop
 8011250:	371c      	adds	r7, #28
 8011252:	46bd      	mov	sp, r7
 8011254:	bd90      	pop	{r4, r7, pc}
 8011256:	bf00      	nop
 8011258:	667f3bcd 	.word	0x667f3bcd
 801125c:	3ff6a09e 	.word	0x3ff6a09e
 8011260:	40c90fdb 	.word	0x40c90fdb
 8011264:	c27b53d2 	.word	0xc27b53d2
 8011268:	431d1463 	.word	0x431d1463
 801126c:	00000000 	.word	0x00000000

08011270 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011270:	b590      	push	{r4, r7, lr}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	ed87 0a02 	vstr	s0, [r7, #8]
 801127c:	460b      	mov	r3, r1
 801127e:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011280:	2028      	movs	r0, #40	@ 0x28
 8011282:	f000 fbe3 	bl	8011a4c <malloc>
 8011286:	4603      	mov	r3, r0
 8011288:	461a      	mov	r2, r3
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681c      	ldr	r4, [r3, #0]
 8011292:	2044      	movs	r0, #68	@ 0x44
 8011294:	f000 fbda 	bl	8011a4c <malloc>
 8011298:	4603      	mov	r3, r0
 801129a:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681c      	ldr	r4, [r3, #0]
 80112a0:	2024      	movs	r0, #36	@ 0x24
 80112a2:	f000 fbd3 	bl	8011a4c <malloc>
 80112a6:	4603      	mov	r3, r0
 80112a8:	6223      	str	r3, [r4, #32]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681c      	ldr	r4, [r3, #0]
 80112ae:	2024      	movs	r0, #36	@ 0x24
 80112b0:	f000 fbcc 	bl	8011a4c <malloc>
 80112b4:	4603      	mov	r3, r0
 80112b6:	6263      	str	r3, [r4, #36]	@ 0x24
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f04f 0200 	mov.w	r2, #0
 80112c2:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f04f 0200 	mov.w	r2, #0
 80112ce:	605a      	str	r2, [r3, #4]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80112da:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801135c <pll_Init_I+0xec>
 80112de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80112e2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 80112e6:	88fb      	ldrh	r3, [r7, #6]
 80112e8:	ee07 3a90 	vmov	s15, r3
 80112ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80112fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112fe:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;    // 0:感性 1:容性
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	2200      	movs	r2, #0
 8011308:	761a      	strb	r2, [r3, #24]
    (*signal)->L = 0.0043f; // 4.3mH
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a14      	ldr	r2, [pc, #80]	@ (8011360 <pll_Init_I+0xf0>)
 8011310:	61da      	str	r2, [r3, #28]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 0.5f, 0.01f, 0, -80.f, -160.f);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	6a1b      	ldr	r3, [r3, #32]
 8011318:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8011364 <pll_Init_I+0xf4>
 801131c:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8011368 <pll_Init_I+0xf8>
 8011320:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 801136c <pll_Init_I+0xfc>
 8011324:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8011370 <pll_Init_I+0x100>
 8011328:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801132c:	4618      	mov	r0, r3
 801132e:	f7ff fc6f 	bl	8010c10 <pid_Init>
    pid_Init((*signal)->pid_q, 0.5f, 0.01f, 0, 20.f, -10.f);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011338:	eeba 2a04 	vmov.f32	s4, #164	@ 0xc1200000 -10.0
 801133c:	eef3 1a04 	vmov.f32	s3, #52	@ 0x41a00000  20.0
 8011340:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 801136c <pll_Init_I+0xfc>
 8011344:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8011370 <pll_Init_I+0x100>
 8011348:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff fc5f 	bl	8010c10 <pid_Init>
}
 8011352:	bf00      	nop
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	bd90      	pop	{r4, r7, pc}
 801135a:	bf00      	nop
 801135c:	40c90fdb 	.word	0x40c90fdb
 8011360:	3b8ce704 	.word	0x3b8ce704
 8011364:	c3200000 	.word	0xc3200000
 8011368:	c2a00000 	.word	0xc2a00000
 801136c:	00000000 	.word	0x00000000
 8011370:	3c23d70a 	.word	0x3c23d70a
 8011374:	00000000 	.word	0x00000000

08011378 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 8011378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137c:	ed2d 8b02 	vpush	{d8}
 8011380:	b08c      	sub	sp, #48	@ 0x30
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_V->basic->input_a, signal_V->basic->input_b, &signal_V->basic->clarke_alpha, &signal_V->basic->clarke_beta);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6818      	ldr	r0, [r3, #0]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	6859      	ldr	r1, [r3, #4]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f103 020c 	add.w	r2, r3, #12
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3310      	adds	r3, #16
 80113a0:	6178      	str	r0, [r7, #20]
 80113a2:	6139      	str	r1, [r7, #16]
 80113a4:	60fa      	str	r2, [r7, #12]
 80113a6:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	697a      	ldr	r2, [r7, #20]
 80113ac:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 80113ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80113b2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80114f8 <pll_Control_V+0x180>
 80113b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80113ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80113be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80114fc <pll_Control_V+0x184>
 80113c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	edc3 7a00 	vstr	s15, [r3]
  }
 80113d0:	bf00      	nop
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	691e      	ldr	r6, [r3, #16]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f103 0514 	add.w	r5, r3, #20
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f103 0418 	add.w	r4, r3, #24
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80113f6:	eeb0 0a67 	vmov.f32	s0, s15
 80113fa:	f000 fa97 	bl	801192c <arm_sin_f32>
 80113fe:	eeb0 8a40 	vmov.f32	s16, s0
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	edd3 7a01 	vldr	s15, [r3, #4]
 8011408:	eeb0 0a67 	vmov.f32	s0, s15
 801140c:	f000 fad4 	bl	80119b8 <arm_cos_f32>
 8011410:	eef0 7a40 	vmov.f32	s15, s0
 8011414:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 8011418:	62be      	str	r6, [r7, #40]	@ 0x28
 801141a:	627d      	str	r5, [r7, #36]	@ 0x24
 801141c:	623c      	str	r4, [r7, #32]
 801141e:	ed87 8a07 	vstr	s16, [r7, #28]
 8011422:	edc7 7a06 	vstr	s15, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011426:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801142a:	edd7 7a06 	vldr	s15, [r7, #24]
 801142e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011432:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011436:	edd7 7a07 	vldr	s15, [r7, #28]
 801143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011444:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011448:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801144c:	eeb1 7a67 	vneg.f32	s14, s15
 8011450:	edd7 7a07 	vldr	s15, [r7, #28]
 8011454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011458:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	edc3 7a00 	vstr	s15, [r3]
  }
 801146e:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	689a      	ldr	r2, [r3, #8]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	edd3 7a06 	vldr	s15, [r3, #24]
 801147c:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8011500 <pll_Control_V+0x188>
 8011480:	eeb0 0a67 	vmov.f32	s0, s15
 8011484:	4610      	mov	r0, r2
 8011486:	f7ff fbf2 	bl	8010c6e <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	ed93 7a01 	vldr	s14, [r3, #4]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	689b      	ldr	r3, [r3, #8]
 8011494:	edd3 6a06 	vldr	s13, [r3, #24]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	edd3 7a07 	vldr	s15, [r3, #28]
 80114a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80114ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80114c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80114c4:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 80114f0 <pll_Control_V+0x178>
 80114c8:	eeb0 0b47 	vmov.f64	d0, d7
 80114cc:	f003 f878 	bl	80145c0 <fmod>
 80114d0:	eeb0 7b40 	vmov.f64	d7, d0
 80114d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80114de:	bf00      	nop
 80114e0:	3730      	adds	r7, #48	@ 0x30
 80114e2:	46bd      	mov	sp, r7
 80114e4:	ecbd 8b02 	vpop	{d8}
 80114e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114ec:	f3af 8000 	nop.w
 80114f0:	60000000 	.word	0x60000000
 80114f4:	401921fb 	.word	0x401921fb
 80114f8:	3f13cd3a 	.word	0x3f13cd3a
 80114fc:	3f93cd3a 	.word	0x3f93cd3a
 8011500:	00000000 	.word	0x00000000

08011504 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 8011504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011508:	ed2d 8b02 	vpush	{d8}
 801150c:	b094      	sub	sp, #80	@ 0x50
 801150e:	af00      	add	r7, sp, #0
 8011510:	60f8      	str	r0, [r7, #12]
 8011512:	60b9      	str	r1, [r7, #8]
 8011514:	ed87 0a01 	vstr	s0, [r7, #4]
 8011518:	edc7 0a00 	vstr	s1, [r7]
    static float Uabd;
    static float Uabq;
    static float PFTheta;
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_I->basic->input_a, signal_I->basic->input_b, &signal_I->basic->clarke_alpha, &signal_I->basic->clarke_beta);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	6818      	ldr	r0, [r3, #0]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	6859      	ldr	r1, [r3, #4]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f103 020c 	add.w	r2, r3, #12
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	3310      	adds	r3, #16
 8011536:	6378      	str	r0, [r7, #52]	@ 0x34
 8011538:	6339      	str	r1, [r7, #48]	@ 0x30
 801153a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801153c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pIalpha = Ia;
 801153e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011542:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8011544:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8011548:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80117f0 <pll_Control_I+0x2ec>
 801154c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011550:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011554:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80117f4 <pll_Control_I+0x2f0>
 8011558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011562:	edc3 7a00 	vstr	s15, [r3]
  }
 8011566:	bf00      	nop
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	691e      	ldr	r6, [r3, #16]
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f103 0514 	add.w	r5, r3, #20
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f103 0418 	add.w	r4, r3, #24
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	edd3 7a01 	vldr	s15, [r3, #4]
 801158c:	eeb0 0a67 	vmov.f32	s0, s15
 8011590:	f000 f9cc 	bl	801192c <arm_sin_f32>
 8011594:	eeb0 8a40 	vmov.f32	s16, s0
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	edd3 7a01 	vldr	s15, [r3, #4]
 801159e:	eeb0 0a67 	vmov.f32	s0, s15
 80115a2:	f000 fa09 	bl	80119b8 <arm_cos_f32>
 80115a6:	eef0 7a40 	vmov.f32	s15, s0
 80115aa:	f8c7 804c 	str.w	r8, [r7, #76]	@ 0x4c
 80115ae:	64be      	str	r6, [r7, #72]	@ 0x48
 80115b0:	647d      	str	r5, [r7, #68]	@ 0x44
 80115b2:	643c      	str	r4, [r7, #64]	@ 0x40
 80115b4:	ed87 8a0f 	vstr	s16, [r7, #60]	@ 0x3c
 80115b8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80115bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80115c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80115c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115c8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80115cc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80115d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115da:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80115de:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80115e2:	eeb1 7a67 	vneg.f32	s14, s15
 80115e6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80115ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115ee:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80115f2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80115f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011600:	edc3 7a00 	vstr	s15, [r3]
  }
 8011604:	bf00      	nop
    // PI控制
    PFTheta = acosf(PF);
 8011606:	ed97 0a00 	vldr	s0, [r7]
 801160a:	f003 f81d 	bl	8014648 <acosf>
 801160e:	eef0 7a40 	vmov.f32	s15, s0
 8011612:	4b79      	ldr	r3, [pc, #484]	@ (80117f8 <pll_Control_I+0x2f4>)
 8011614:	edc3 7a00 	vstr	s15, [r3]
    pid(signal_I->pid_d, Iset * 1.414f * arm_cos_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6a1c      	ldr	r4, [r3, #32]
 801161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8011620:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80117fc <pll_Control_I+0x2f8>
 8011624:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011628:	4b73      	ldr	r3, [pc, #460]	@ (80117f8 <pll_Control_I+0x2f4>)
 801162a:	edd3 7a00 	vldr	s15, [r3]
 801162e:	eeb0 0a67 	vmov.f32	s0, s15
 8011632:	f000 f9c1 	bl	80119b8 <arm_cos_f32>
 8011636:	eef0 7a40 	vmov.f32	s15, s0
 801163a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	ed93 7a05 	vldr	s14, [r3, #20]
 8011646:	eef0 0a47 	vmov.f32	s1, s14
 801164a:	eeb0 0a67 	vmov.f32	s0, s15
 801164e:	4620      	mov	r0, r4
 8011650:	f7ff fb0d 	bl	8010c6e <pid>
    if (signal_I->CorL == 1)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	7e1b      	ldrb	r3, [r3, #24]
 8011658:	2b01      	cmp	r3, #1
 801165a:	d11e      	bne.n	801169a <pll_Control_I+0x196>
    {
        pid(signal_I->pid_q, Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011660:	edd7 7a01 	vldr	s15, [r7, #4]
 8011664:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80117fc <pll_Control_I+0x2f8>
 8011668:	ee27 8a87 	vmul.f32	s16, s15, s14
 801166c:	4b62      	ldr	r3, [pc, #392]	@ (80117f8 <pll_Control_I+0x2f4>)
 801166e:	edd3 7a00 	vldr	s15, [r3]
 8011672:	eeb0 0a67 	vmov.f32	s0, s15
 8011676:	f000 f959 	bl	801192c <arm_sin_f32>
 801167a:	eef0 7a40 	vmov.f32	s15, s0
 801167e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	ed93 7a06 	vldr	s14, [r3, #24]
 801168a:	eef0 0a47 	vmov.f32	s1, s14
 801168e:	eeb0 0a67 	vmov.f32	s0, s15
 8011692:	4620      	mov	r0, r4
 8011694:	f7ff faeb 	bl	8010c6e <pid>
 8011698:	e01f      	b.n	80116da <pll_Control_I+0x1d6>
    }
    else
    {
        pid(signal_I->pid_q, -Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801169e:	edd7 7a01 	vldr	s15, [r7, #4]
 80116a2:	eef1 7a67 	vneg.f32	s15, s15
 80116a6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80117fc <pll_Control_I+0x2f8>
 80116aa:	ee27 8a87 	vmul.f32	s16, s15, s14
 80116ae:	4b52      	ldr	r3, [pc, #328]	@ (80117f8 <pll_Control_I+0x2f4>)
 80116b0:	edd3 7a00 	vldr	s15, [r3]
 80116b4:	eeb0 0a67 	vmov.f32	s0, s15
 80116b8:	f000 f938 	bl	801192c <arm_sin_f32>
 80116bc:	eef0 7a40 	vmov.f32	s15, s0
 80116c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80116cc:	eef0 0a47 	vmov.f32	s1, s14
 80116d0:	eeb0 0a67 	vmov.f32	s0, s15
 80116d4:	4620      	mov	r0, r4
 80116d6:	f7ff faca 	bl	8010c6e <pid>
    }
    // 解耦调制
    Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	ed93 7a05 	vldr	s14, [r3, #20]
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6a1b      	ldr	r3, [r3, #32]
 80116e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80116ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	edd3 6a06 	vldr	s13, [r3, #24]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80116fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	edd3 7a07 	vldr	s15, [r3, #28]
 8011708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011710:	4b3b      	ldr	r3, [pc, #236]	@ (8011800 <pll_Control_I+0x2fc>)
 8011712:	edc3 7a00 	vstr	s15, [r3]
    Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	ed93 7a06 	vldr	s14, [r3, #24]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011722:	edd3 7a06 	vldr	s15, [r3, #24]
 8011726:	ee37 7a67 	vsub.f32	s14, s14, s15
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	edd3 6a05 	vldr	s13, [r3, #20]
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	edd3 7a07 	vldr	s15, [r3, #28]
 801173a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	edd3 7a07 	vldr	s15, [r3, #28]
 8011744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011748:	ee77 7a67 	vsub.f32	s15, s14, s15
 801174c:	4b2d      	ldr	r3, [pc, #180]	@ (8011804 <pll_Control_I+0x300>)
 801174e:	edc3 7a00 	vstr	s15, [r3]
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011752:	4b2b      	ldr	r3, [pc, #172]	@ (8011800 <pll_Control_I+0x2fc>)
 8011754:	f8d3 8000 	ldr.w	r8, [r3]
 8011758:	4b2a      	ldr	r3, [pc, #168]	@ (8011804 <pll_Control_I+0x300>)
 801175a:	681e      	ldr	r6, [r3, #0]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	1d1d      	adds	r5, r3, #4
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f103 0408 	add.w	r4, r3, #8
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	edd3 7a01 	vldr	s15, [r3, #4]
 801176c:	eeb0 0a67 	vmov.f32	s0, s15
 8011770:	f000 f8dc 	bl	801192c <arm_sin_f32>
 8011774:	eeb0 8a40 	vmov.f32	s16, s0
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	edd3 7a01 	vldr	s15, [r3, #4]
 801177e:	eeb0 0a67 	vmov.f32	s0, s15
 8011782:	f000 f919 	bl	80119b8 <arm_cos_f32>
 8011786:	eef0 7a40 	vmov.f32	s15, s0
 801178a:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 801178e:	623e      	str	r6, [r7, #32]
 8011790:	61fd      	str	r5, [r7, #28]
 8011792:	61bc      	str	r4, [r7, #24]
 8011794:	ed87 8a05 	vstr	s16, [r7, #20]
 8011798:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 801179c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80117a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80117a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117a8:	edd7 6a08 	vldr	s13, [r7, #32]
 80117ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80117b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 80117be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80117c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80117c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117ca:	edd7 6a08 	vldr	s13, [r7, #32]
 80117ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80117d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	edc3 7a00 	vstr	s15, [r3]
  }
 80117e0:	bf00      	nop
}
 80117e2:	bf00      	nop
 80117e4:	3750      	adds	r7, #80	@ 0x50
 80117e6:	46bd      	mov	sp, r7
 80117e8:	ecbd 8b02 	vpop	{d8}
 80117ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f0:	3f13cd3a 	.word	0x3f13cd3a
 80117f4:	3f93cd3a 	.word	0x3f93cd3a
 80117f8:	24006f7c 	.word	0x24006f7c
 80117fc:	3fb4fdf4 	.word	0x3fb4fdf4
 8011800:	24006f80 	.word	0x24006f80
 8011804:	24006f84 	.word	0x24006f84

08011808 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	4603      	mov	r3, r0
 8011810:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 8011812:	88fb      	ldrh	r3, [r7, #6]
 8011814:	2b40      	cmp	r3, #64	@ 0x40
 8011816:	d160      	bne.n	80118da <HAL_GPIO_EXTI_Callback+0xd2>
    {
        // 读取AD7606数据
        ad7606_GetValue(&hspi2, 5, adcValue);
 8011818:	4a32      	ldr	r2, [pc, #200]	@ (80118e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 801181a:	2105      	movs	r1, #5
 801181c:	4832      	ldr	r0, [pc, #200]	@ (80118e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 801181e:	f7fe fdd1 	bl	80103c4 <ad7606_GetValue>
        signal_V->basic->input_a = adcValue[1] * 10.f;
 8011822:	4b30      	ldr	r3, [pc, #192]	@ (80118e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8011824:	edd3 7a01 	vldr	s15, [r3, #4]
 8011828:	4b30      	ldr	r3, [pc, #192]	@ (80118ec <HAL_GPIO_EXTI_Callback+0xe4>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8011832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011836:	edc3 7a00 	vstr	s15, [r3]
        signal_V->basic->input_b = adcValue[2] * 10.f;
 801183a:	4b2a      	ldr	r3, [pc, #168]	@ (80118e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 801183c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011840:	4b2a      	ldr	r3, [pc, #168]	@ (80118ec <HAL_GPIO_EXTI_Callback+0xe4>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801184a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801184e:	edc3 7a01 	vstr	s15, [r3, #4]
        signal_I->basic->input_a = adcValue[3];
 8011852:	4b27      	ldr	r3, [pc, #156]	@ (80118f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a22      	ldr	r2, [pc, #136]	@ (80118e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 801185a:	68d2      	ldr	r2, [r2, #12]
 801185c:	601a      	str	r2, [r3, #0]
        signal_I->basic->input_b = adcValue[4];
 801185e:	4b24      	ldr	r3, [pc, #144]	@ (80118f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4a1f      	ldr	r2, [pc, #124]	@ (80118e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8011866:	6912      	ldr	r2, [r2, #16]
 8011868:	605a      	str	r2, [r3, #4]
        // 锁相控制
        pll_Control_V(signal_V);
 801186a:	4b20      	ldr	r3, [pc, #128]	@ (80118ec <HAL_GPIO_EXTI_Callback+0xe4>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	4618      	mov	r0, r3
 8011870:	f7ff fd82 	bl	8011378 <pll_Control_V>
        // 电流内环控制
        pll_Control_I(signal_I, signal_V, 0.5f, 1.f);
 8011874:	4b1e      	ldr	r3, [pc, #120]	@ (80118f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a1c      	ldr	r2, [pc, #112]	@ (80118ec <HAL_GPIO_EXTI_Callback+0xe4>)
 801187a:	6812      	ldr	r2, [r2, #0]
 801187c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011880:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8011884:	4611      	mov	r1, r2
 8011886:	4618      	mov	r0, r3
 8011888:	f7ff fe3c 	bl	8011504 <pll_Control_I>
        // svpwm调制
        svpwm_Control(signal_V, 20.f);
 801188c:	4b17      	ldr	r3, [pc, #92]	@ (80118ec <HAL_GPIO_EXTI_Callback+0xe4>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff fa5f 	bl	8010d58 <svpwm_Control>
        // DAC输出
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f));
 801189a:	4b16      	ldr	r3, [pc, #88]	@ (80118f4 <HAL_GPIO_EXTI_Callback+0xec>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118a0:	ee07 3a90 	vmov	s15, r3
 80118a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118a8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80118f8 <HAL_GPIO_EXTI_Callback+0xf0>
 80118ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80118b0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80118f8 <HAL_GPIO_EXTI_Callback+0xf0>
 80118b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80118b8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80118fc <HAL_GPIO_EXTI_Callback+0xf4>
 80118bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8011900 <HAL_GPIO_EXTI_Callback+0xf8>
 80118c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118cc:	ee17 3a90 	vmov	r3, s15
 80118d0:	2200      	movs	r2, #0
 80118d2:	2100      	movs	r1, #0
 80118d4:	480b      	ldr	r0, [pc, #44]	@ (8011904 <HAL_GPIO_EXTI_Callback+0xfc>)
 80118d6:	f7f0 fbe2 	bl	800209e <HAL_DAC_SetValue>
    }
}
 80118da:	bf00      	nop
 80118dc:	3708      	adds	r7, #8
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	24006f88 	.word	0x24006f88
 80118e8:	24000454 	.word	0x24000454
 80118ec:	24006fb0 	.word	0x24006fb0
 80118f0:	24006fb4 	.word	0x24006fb4
 80118f4:	2400052c 	.word	0x2400052c
 80118f8:	453b8000 	.word	0x453b8000
 80118fc:	44fa0000 	.word	0x44fa0000
 8011900:	45000000 	.word	0x45000000
 8011904:	24000310 	.word	0x24000310

08011908 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  定时器中断
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a04      	ldr	r2, [pc, #16]	@ (8011928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d101      	bne.n	801191e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 801191a:	f7f0 f949 	bl	8001bb0 <HAL_IncTick>
    }
}
 801191e:	bf00      	nop
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	40001000 	.word	0x40001000

0801192c <arm_sin_f32>:
 801192c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80119ac <arm_sin_f32+0x80>
 8011930:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011934:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011938:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011940:	d504      	bpl.n	801194c <arm_sin_f32+0x20>
 8011942:	ee17 3a90 	vmov	r3, s15
 8011946:	3b01      	subs	r3, #1
 8011948:	ee07 3a90 	vmov	s15, r3
 801194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011950:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80119b0 <arm_sin_f32+0x84>
 8011954:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801195c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011960:	ee17 3a10 	vmov	r3, s14
 8011964:	b29b      	uxth	r3, r3
 8011966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801196a:	d21a      	bcs.n	80119a2 <arm_sin_f32+0x76>
 801196c:	ee07 3a10 	vmov	s14, r3
 8011970:	1c59      	adds	r1, r3, #1
 8011972:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011976:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801197a:	4a0e      	ldr	r2, [pc, #56]	@ (80119b4 <arm_sin_f32+0x88>)
 801197c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011980:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011984:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011988:	ee30 0a67 	vsub.f32	s0, s0, s15
 801198c:	edd3 6a00 	vldr	s13, [r3]
 8011990:	ed92 7a00 	vldr	s14, [r2]
 8011994:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011998:	ee67 7a87 	vmul.f32	s15, s15, s14
 801199c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80119a0:	4770      	bx	lr
 80119a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80119a6:	2101      	movs	r1, #1
 80119a8:	2300      	movs	r3, #0
 80119aa:	e7e6      	b.n	801197a <arm_sin_f32+0x4e>
 80119ac:	3e22f983 	.word	0x3e22f983
 80119b0:	44000000 	.word	0x44000000
 80119b4:	08016470 	.word	0x08016470

080119b8 <arm_cos_f32>:
 80119b8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8011a40 <arm_cos_f32+0x88>
 80119bc:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80119c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80119c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80119c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80119d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d4:	d504      	bpl.n	80119e0 <arm_cos_f32+0x28>
 80119d6:	ee17 3a90 	vmov	r3, s15
 80119da:	3b01      	subs	r3, #1
 80119dc:	ee07 3a90 	vmov	s15, r3
 80119e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119e4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011a44 <arm_cos_f32+0x8c>
 80119e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80119ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80119f0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80119f4:	ee17 3a10 	vmov	r3, s14
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119fe:	d21a      	bcs.n	8011a36 <arm_cos_f32+0x7e>
 8011a00:	ee07 3a10 	vmov	s14, r3
 8011a04:	1c59      	adds	r1, r3, #1
 8011a06:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011a0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8011a48 <arm_cos_f32+0x90>)
 8011a10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011a14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011a1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a20:	edd3 6a00 	vldr	s13, [r3]
 8011a24:	ed92 7a00 	vldr	s14, [r2]
 8011a28:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a30:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a34:	4770      	bx	lr
 8011a36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011a3a:	2101      	movs	r1, #1
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e7e6      	b.n	8011a0e <arm_cos_f32+0x56>
 8011a40:	3e22f983 	.word	0x3e22f983
 8011a44:	44000000 	.word	0x44000000
 8011a48:	08016470 	.word	0x08016470

08011a4c <malloc>:
 8011a4c:	4b02      	ldr	r3, [pc, #8]	@ (8011a58 <malloc+0xc>)
 8011a4e:	4601      	mov	r1, r0
 8011a50:	6818      	ldr	r0, [r3, #0]
 8011a52:	f000 b825 	b.w	8011aa0 <_malloc_r>
 8011a56:	bf00      	nop
 8011a58:	24000138 	.word	0x24000138

08011a5c <sbrk_aligned>:
 8011a5c:	b570      	push	{r4, r5, r6, lr}
 8011a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8011a9c <sbrk_aligned+0x40>)
 8011a60:	460c      	mov	r4, r1
 8011a62:	6831      	ldr	r1, [r6, #0]
 8011a64:	4605      	mov	r5, r0
 8011a66:	b911      	cbnz	r1, 8011a6e <sbrk_aligned+0x12>
 8011a68:	f000 fe44 	bl	80126f4 <_sbrk_r>
 8011a6c:	6030      	str	r0, [r6, #0]
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4628      	mov	r0, r5
 8011a72:	f000 fe3f 	bl	80126f4 <_sbrk_r>
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	d103      	bne.n	8011a82 <sbrk_aligned+0x26>
 8011a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8011a7e:	4620      	mov	r0, r4
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
 8011a82:	1cc4      	adds	r4, r0, #3
 8011a84:	f024 0403 	bic.w	r4, r4, #3
 8011a88:	42a0      	cmp	r0, r4
 8011a8a:	d0f8      	beq.n	8011a7e <sbrk_aligned+0x22>
 8011a8c:	1a21      	subs	r1, r4, r0
 8011a8e:	4628      	mov	r0, r5
 8011a90:	f000 fe30 	bl	80126f4 <_sbrk_r>
 8011a94:	3001      	adds	r0, #1
 8011a96:	d1f2      	bne.n	8011a7e <sbrk_aligned+0x22>
 8011a98:	e7ef      	b.n	8011a7a <sbrk_aligned+0x1e>
 8011a9a:	bf00      	nop
 8011a9c:	24006fb8 	.word	0x24006fb8

08011aa0 <_malloc_r>:
 8011aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa4:	1ccd      	adds	r5, r1, #3
 8011aa6:	f025 0503 	bic.w	r5, r5, #3
 8011aaa:	3508      	adds	r5, #8
 8011aac:	2d0c      	cmp	r5, #12
 8011aae:	bf38      	it	cc
 8011ab0:	250c      	movcc	r5, #12
 8011ab2:	2d00      	cmp	r5, #0
 8011ab4:	4606      	mov	r6, r0
 8011ab6:	db01      	blt.n	8011abc <_malloc_r+0x1c>
 8011ab8:	42a9      	cmp	r1, r5
 8011aba:	d904      	bls.n	8011ac6 <_malloc_r+0x26>
 8011abc:	230c      	movs	r3, #12
 8011abe:	6033      	str	r3, [r6, #0]
 8011ac0:	2000      	movs	r0, #0
 8011ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b9c <_malloc_r+0xfc>
 8011aca:	f000 f869 	bl	8011ba0 <__malloc_lock>
 8011ace:	f8d8 3000 	ldr.w	r3, [r8]
 8011ad2:	461c      	mov	r4, r3
 8011ad4:	bb44      	cbnz	r4, 8011b28 <_malloc_r+0x88>
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f7ff ffbf 	bl	8011a5c <sbrk_aligned>
 8011ade:	1c43      	adds	r3, r0, #1
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	d158      	bne.n	8011b96 <_malloc_r+0xf6>
 8011ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8011ae8:	4627      	mov	r7, r4
 8011aea:	2f00      	cmp	r7, #0
 8011aec:	d143      	bne.n	8011b76 <_malloc_r+0xd6>
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	d04b      	beq.n	8011b8a <_malloc_r+0xea>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	4639      	mov	r1, r7
 8011af6:	4630      	mov	r0, r6
 8011af8:	eb04 0903 	add.w	r9, r4, r3
 8011afc:	f000 fdfa 	bl	80126f4 <_sbrk_r>
 8011b00:	4581      	cmp	r9, r0
 8011b02:	d142      	bne.n	8011b8a <_malloc_r+0xea>
 8011b04:	6821      	ldr	r1, [r4, #0]
 8011b06:	1a6d      	subs	r5, r5, r1
 8011b08:	4629      	mov	r1, r5
 8011b0a:	4630      	mov	r0, r6
 8011b0c:	f7ff ffa6 	bl	8011a5c <sbrk_aligned>
 8011b10:	3001      	adds	r0, #1
 8011b12:	d03a      	beq.n	8011b8a <_malloc_r+0xea>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	442b      	add	r3, r5
 8011b18:	6023      	str	r3, [r4, #0]
 8011b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8011b1e:	685a      	ldr	r2, [r3, #4]
 8011b20:	bb62      	cbnz	r2, 8011b7c <_malloc_r+0xdc>
 8011b22:	f8c8 7000 	str.w	r7, [r8]
 8011b26:	e00f      	b.n	8011b48 <_malloc_r+0xa8>
 8011b28:	6822      	ldr	r2, [r4, #0]
 8011b2a:	1b52      	subs	r2, r2, r5
 8011b2c:	d420      	bmi.n	8011b70 <_malloc_r+0xd0>
 8011b2e:	2a0b      	cmp	r2, #11
 8011b30:	d917      	bls.n	8011b62 <_malloc_r+0xc2>
 8011b32:	1961      	adds	r1, r4, r5
 8011b34:	42a3      	cmp	r3, r4
 8011b36:	6025      	str	r5, [r4, #0]
 8011b38:	bf18      	it	ne
 8011b3a:	6059      	strne	r1, [r3, #4]
 8011b3c:	6863      	ldr	r3, [r4, #4]
 8011b3e:	bf08      	it	eq
 8011b40:	f8c8 1000 	streq.w	r1, [r8]
 8011b44:	5162      	str	r2, [r4, r5]
 8011b46:	604b      	str	r3, [r1, #4]
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f000 f82f 	bl	8011bac <__malloc_unlock>
 8011b4e:	f104 000b 	add.w	r0, r4, #11
 8011b52:	1d23      	adds	r3, r4, #4
 8011b54:	f020 0007 	bic.w	r0, r0, #7
 8011b58:	1ac2      	subs	r2, r0, r3
 8011b5a:	bf1c      	itt	ne
 8011b5c:	1a1b      	subne	r3, r3, r0
 8011b5e:	50a3      	strne	r3, [r4, r2]
 8011b60:	e7af      	b.n	8011ac2 <_malloc_r+0x22>
 8011b62:	6862      	ldr	r2, [r4, #4]
 8011b64:	42a3      	cmp	r3, r4
 8011b66:	bf0c      	ite	eq
 8011b68:	f8c8 2000 	streq.w	r2, [r8]
 8011b6c:	605a      	strne	r2, [r3, #4]
 8011b6e:	e7eb      	b.n	8011b48 <_malloc_r+0xa8>
 8011b70:	4623      	mov	r3, r4
 8011b72:	6864      	ldr	r4, [r4, #4]
 8011b74:	e7ae      	b.n	8011ad4 <_malloc_r+0x34>
 8011b76:	463c      	mov	r4, r7
 8011b78:	687f      	ldr	r7, [r7, #4]
 8011b7a:	e7b6      	b.n	8011aea <_malloc_r+0x4a>
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	42a3      	cmp	r3, r4
 8011b82:	d1fb      	bne.n	8011b7c <_malloc_r+0xdc>
 8011b84:	2300      	movs	r3, #0
 8011b86:	6053      	str	r3, [r2, #4]
 8011b88:	e7de      	b.n	8011b48 <_malloc_r+0xa8>
 8011b8a:	230c      	movs	r3, #12
 8011b8c:	6033      	str	r3, [r6, #0]
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f000 f80c 	bl	8011bac <__malloc_unlock>
 8011b94:	e794      	b.n	8011ac0 <_malloc_r+0x20>
 8011b96:	6005      	str	r5, [r0, #0]
 8011b98:	e7d6      	b.n	8011b48 <_malloc_r+0xa8>
 8011b9a:	bf00      	nop
 8011b9c:	24006fbc 	.word	0x24006fbc

08011ba0 <__malloc_lock>:
 8011ba0:	4801      	ldr	r0, [pc, #4]	@ (8011ba8 <__malloc_lock+0x8>)
 8011ba2:	f000 bdf4 	b.w	801278e <__retarget_lock_acquire_recursive>
 8011ba6:	bf00      	nop
 8011ba8:	24007100 	.word	0x24007100

08011bac <__malloc_unlock>:
 8011bac:	4801      	ldr	r0, [pc, #4]	@ (8011bb4 <__malloc_unlock+0x8>)
 8011bae:	f000 bdef 	b.w	8012790 <__retarget_lock_release_recursive>
 8011bb2:	bf00      	nop
 8011bb4:	24007100 	.word	0x24007100

08011bb8 <__cvt>:
 8011bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bba:	ed2d 8b02 	vpush	{d8}
 8011bbe:	eeb0 8b40 	vmov.f64	d8, d0
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	4617      	mov	r7, r2
 8011bc6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011bc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011bca:	ee18 2a90 	vmov	r2, s17
 8011bce:	f025 0520 	bic.w	r5, r5, #32
 8011bd2:	2a00      	cmp	r2, #0
 8011bd4:	bfb6      	itet	lt
 8011bd6:	222d      	movlt	r2, #45	@ 0x2d
 8011bd8:	2200      	movge	r2, #0
 8011bda:	eeb1 8b40 	vneglt.f64	d8, d0
 8011bde:	2d46      	cmp	r5, #70	@ 0x46
 8011be0:	460c      	mov	r4, r1
 8011be2:	701a      	strb	r2, [r3, #0]
 8011be4:	d004      	beq.n	8011bf0 <__cvt+0x38>
 8011be6:	2d45      	cmp	r5, #69	@ 0x45
 8011be8:	d100      	bne.n	8011bec <__cvt+0x34>
 8011bea:	3401      	adds	r4, #1
 8011bec:	2102      	movs	r1, #2
 8011bee:	e000      	b.n	8011bf2 <__cvt+0x3a>
 8011bf0:	2103      	movs	r1, #3
 8011bf2:	ab03      	add	r3, sp, #12
 8011bf4:	9301      	str	r3, [sp, #4]
 8011bf6:	ab02      	add	r3, sp, #8
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	4622      	mov	r2, r4
 8011bfc:	4633      	mov	r3, r6
 8011bfe:	eeb0 0b48 	vmov.f64	d0, d8
 8011c02:	f000 fe5d 	bl	80128c0 <_dtoa_r>
 8011c06:	2d47      	cmp	r5, #71	@ 0x47
 8011c08:	d114      	bne.n	8011c34 <__cvt+0x7c>
 8011c0a:	07fb      	lsls	r3, r7, #31
 8011c0c:	d50a      	bpl.n	8011c24 <__cvt+0x6c>
 8011c0e:	1902      	adds	r2, r0, r4
 8011c10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c18:	bf08      	it	eq
 8011c1a:	9203      	streq	r2, [sp, #12]
 8011c1c:	2130      	movs	r1, #48	@ 0x30
 8011c1e:	9b03      	ldr	r3, [sp, #12]
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d319      	bcc.n	8011c58 <__cvt+0xa0>
 8011c24:	9b03      	ldr	r3, [sp, #12]
 8011c26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c28:	1a1b      	subs	r3, r3, r0
 8011c2a:	6013      	str	r3, [r2, #0]
 8011c2c:	b005      	add	sp, #20
 8011c2e:	ecbd 8b02 	vpop	{d8}
 8011c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c34:	2d46      	cmp	r5, #70	@ 0x46
 8011c36:	eb00 0204 	add.w	r2, r0, r4
 8011c3a:	d1e9      	bne.n	8011c10 <__cvt+0x58>
 8011c3c:	7803      	ldrb	r3, [r0, #0]
 8011c3e:	2b30      	cmp	r3, #48	@ 0x30
 8011c40:	d107      	bne.n	8011c52 <__cvt+0x9a>
 8011c42:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4a:	bf1c      	itt	ne
 8011c4c:	f1c4 0401 	rsbne	r4, r4, #1
 8011c50:	6034      	strne	r4, [r6, #0]
 8011c52:	6833      	ldr	r3, [r6, #0]
 8011c54:	441a      	add	r2, r3
 8011c56:	e7db      	b.n	8011c10 <__cvt+0x58>
 8011c58:	1c5c      	adds	r4, r3, #1
 8011c5a:	9403      	str	r4, [sp, #12]
 8011c5c:	7019      	strb	r1, [r3, #0]
 8011c5e:	e7de      	b.n	8011c1e <__cvt+0x66>

08011c60 <__exponent>:
 8011c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c62:	2900      	cmp	r1, #0
 8011c64:	bfba      	itte	lt
 8011c66:	4249      	neglt	r1, r1
 8011c68:	232d      	movlt	r3, #45	@ 0x2d
 8011c6a:	232b      	movge	r3, #43	@ 0x2b
 8011c6c:	2909      	cmp	r1, #9
 8011c6e:	7002      	strb	r2, [r0, #0]
 8011c70:	7043      	strb	r3, [r0, #1]
 8011c72:	dd29      	ble.n	8011cc8 <__exponent+0x68>
 8011c74:	f10d 0307 	add.w	r3, sp, #7
 8011c78:	461d      	mov	r5, r3
 8011c7a:	270a      	movs	r7, #10
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011c82:	fb07 1416 	mls	r4, r7, r6, r1
 8011c86:	3430      	adds	r4, #48	@ 0x30
 8011c88:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011c8c:	460c      	mov	r4, r1
 8011c8e:	2c63      	cmp	r4, #99	@ 0x63
 8011c90:	f103 33ff 	add.w	r3, r3, #4294967295
 8011c94:	4631      	mov	r1, r6
 8011c96:	dcf1      	bgt.n	8011c7c <__exponent+0x1c>
 8011c98:	3130      	adds	r1, #48	@ 0x30
 8011c9a:	1e94      	subs	r4, r2, #2
 8011c9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011ca0:	1c41      	adds	r1, r0, #1
 8011ca2:	4623      	mov	r3, r4
 8011ca4:	42ab      	cmp	r3, r5
 8011ca6:	d30a      	bcc.n	8011cbe <__exponent+0x5e>
 8011ca8:	f10d 0309 	add.w	r3, sp, #9
 8011cac:	1a9b      	subs	r3, r3, r2
 8011cae:	42ac      	cmp	r4, r5
 8011cb0:	bf88      	it	hi
 8011cb2:	2300      	movhi	r3, #0
 8011cb4:	3302      	adds	r3, #2
 8011cb6:	4403      	add	r3, r0
 8011cb8:	1a18      	subs	r0, r3, r0
 8011cba:	b003      	add	sp, #12
 8011cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cbe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011cc2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011cc6:	e7ed      	b.n	8011ca4 <__exponent+0x44>
 8011cc8:	2330      	movs	r3, #48	@ 0x30
 8011cca:	3130      	adds	r1, #48	@ 0x30
 8011ccc:	7083      	strb	r3, [r0, #2]
 8011cce:	70c1      	strb	r1, [r0, #3]
 8011cd0:	1d03      	adds	r3, r0, #4
 8011cd2:	e7f1      	b.n	8011cb8 <__exponent+0x58>
 8011cd4:	0000      	movs	r0, r0
	...

08011cd8 <_printf_float>:
 8011cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cdc:	b08d      	sub	sp, #52	@ 0x34
 8011cde:	460c      	mov	r4, r1
 8011ce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011ce4:	4616      	mov	r6, r2
 8011ce6:	461f      	mov	r7, r3
 8011ce8:	4605      	mov	r5, r0
 8011cea:	f000 fccb 	bl	8012684 <_localeconv_r>
 8011cee:	f8d0 b000 	ldr.w	fp, [r0]
 8011cf2:	4658      	mov	r0, fp
 8011cf4:	f7ee fb44 	bl	8000380 <strlen>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8011d00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011d04:	6822      	ldr	r2, [r4, #0]
 8011d06:	9005      	str	r0, [sp, #20]
 8011d08:	3307      	adds	r3, #7
 8011d0a:	f023 0307 	bic.w	r3, r3, #7
 8011d0e:	f103 0108 	add.w	r1, r3, #8
 8011d12:	f8c8 1000 	str.w	r1, [r8]
 8011d16:	ed93 0b00 	vldr	d0, [r3]
 8011d1a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011f78 <_printf_float+0x2a0>
 8011d1e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011d22:	eeb4 7b46 	vcmp.f64	d7, d6
 8011d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011d2e:	dd24      	ble.n	8011d7a <_printf_float+0xa2>
 8011d30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d38:	d502      	bpl.n	8011d40 <_printf_float+0x68>
 8011d3a:	232d      	movs	r3, #45	@ 0x2d
 8011d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d40:	498f      	ldr	r1, [pc, #572]	@ (8011f80 <_printf_float+0x2a8>)
 8011d42:	4b90      	ldr	r3, [pc, #576]	@ (8011f84 <_printf_float+0x2ac>)
 8011d44:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011d48:	bf94      	ite	ls
 8011d4a:	4688      	movls	r8, r1
 8011d4c:	4698      	movhi	r8, r3
 8011d4e:	f022 0204 	bic.w	r2, r2, #4
 8011d52:	2303      	movs	r3, #3
 8011d54:	6123      	str	r3, [r4, #16]
 8011d56:	6022      	str	r2, [r4, #0]
 8011d58:	f04f 0a00 	mov.w	sl, #0
 8011d5c:	9700      	str	r7, [sp, #0]
 8011d5e:	4633      	mov	r3, r6
 8011d60:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011d62:	4621      	mov	r1, r4
 8011d64:	4628      	mov	r0, r5
 8011d66:	f000 f9d1 	bl	801210c <_printf_common>
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	f040 8089 	bne.w	8011e82 <_printf_float+0x1aa>
 8011d70:	f04f 30ff 	mov.w	r0, #4294967295
 8011d74:	b00d      	add	sp, #52	@ 0x34
 8011d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d82:	d709      	bvc.n	8011d98 <_printf_float+0xc0>
 8011d84:	ee10 3a90 	vmov	r3, s1
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	bfbc      	itt	lt
 8011d8c:	232d      	movlt	r3, #45	@ 0x2d
 8011d8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011d92:	497d      	ldr	r1, [pc, #500]	@ (8011f88 <_printf_float+0x2b0>)
 8011d94:	4b7d      	ldr	r3, [pc, #500]	@ (8011f8c <_printf_float+0x2b4>)
 8011d96:	e7d5      	b.n	8011d44 <_printf_float+0x6c>
 8011d98:	6863      	ldr	r3, [r4, #4]
 8011d9a:	1c59      	adds	r1, r3, #1
 8011d9c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011da0:	d139      	bne.n	8011e16 <_printf_float+0x13e>
 8011da2:	2306      	movs	r3, #6
 8011da4:	6063      	str	r3, [r4, #4]
 8011da6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011daa:	2300      	movs	r3, #0
 8011dac:	6022      	str	r2, [r4, #0]
 8011dae:	9303      	str	r3, [sp, #12]
 8011db0:	ab0a      	add	r3, sp, #40	@ 0x28
 8011db2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011db6:	ab09      	add	r3, sp, #36	@ 0x24
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	6861      	ldr	r1, [r4, #4]
 8011dbc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f7ff fef9 	bl	8011bb8 <__cvt>
 8011dc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011dca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011dcc:	4680      	mov	r8, r0
 8011dce:	d129      	bne.n	8011e24 <_printf_float+0x14c>
 8011dd0:	1cc8      	adds	r0, r1, #3
 8011dd2:	db02      	blt.n	8011dda <_printf_float+0x102>
 8011dd4:	6863      	ldr	r3, [r4, #4]
 8011dd6:	4299      	cmp	r1, r3
 8011dd8:	dd41      	ble.n	8011e5e <_printf_float+0x186>
 8011dda:	f1a9 0902 	sub.w	r9, r9, #2
 8011dde:	fa5f f989 	uxtb.w	r9, r9
 8011de2:	3901      	subs	r1, #1
 8011de4:	464a      	mov	r2, r9
 8011de6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011dea:	9109      	str	r1, [sp, #36]	@ 0x24
 8011dec:	f7ff ff38 	bl	8011c60 <__exponent>
 8011df0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011df2:	1813      	adds	r3, r2, r0
 8011df4:	2a01      	cmp	r2, #1
 8011df6:	4682      	mov	sl, r0
 8011df8:	6123      	str	r3, [r4, #16]
 8011dfa:	dc02      	bgt.n	8011e02 <_printf_float+0x12a>
 8011dfc:	6822      	ldr	r2, [r4, #0]
 8011dfe:	07d2      	lsls	r2, r2, #31
 8011e00:	d501      	bpl.n	8011e06 <_printf_float+0x12e>
 8011e02:	3301      	adds	r3, #1
 8011e04:	6123      	str	r3, [r4, #16]
 8011e06:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d0a6      	beq.n	8011d5c <_printf_float+0x84>
 8011e0e:	232d      	movs	r3, #45	@ 0x2d
 8011e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e14:	e7a2      	b.n	8011d5c <_printf_float+0x84>
 8011e16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011e1a:	d1c4      	bne.n	8011da6 <_printf_float+0xce>
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d1c2      	bne.n	8011da6 <_printf_float+0xce>
 8011e20:	2301      	movs	r3, #1
 8011e22:	e7bf      	b.n	8011da4 <_printf_float+0xcc>
 8011e24:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011e28:	d9db      	bls.n	8011de2 <_printf_float+0x10a>
 8011e2a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011e2e:	d118      	bne.n	8011e62 <_printf_float+0x18a>
 8011e30:	2900      	cmp	r1, #0
 8011e32:	6863      	ldr	r3, [r4, #4]
 8011e34:	dd0b      	ble.n	8011e4e <_printf_float+0x176>
 8011e36:	6121      	str	r1, [r4, #16]
 8011e38:	b913      	cbnz	r3, 8011e40 <_printf_float+0x168>
 8011e3a:	6822      	ldr	r2, [r4, #0]
 8011e3c:	07d0      	lsls	r0, r2, #31
 8011e3e:	d502      	bpl.n	8011e46 <_printf_float+0x16e>
 8011e40:	3301      	adds	r3, #1
 8011e42:	440b      	add	r3, r1
 8011e44:	6123      	str	r3, [r4, #16]
 8011e46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011e48:	f04f 0a00 	mov.w	sl, #0
 8011e4c:	e7db      	b.n	8011e06 <_printf_float+0x12e>
 8011e4e:	b913      	cbnz	r3, 8011e56 <_printf_float+0x17e>
 8011e50:	6822      	ldr	r2, [r4, #0]
 8011e52:	07d2      	lsls	r2, r2, #31
 8011e54:	d501      	bpl.n	8011e5a <_printf_float+0x182>
 8011e56:	3302      	adds	r3, #2
 8011e58:	e7f4      	b.n	8011e44 <_printf_float+0x16c>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e7f2      	b.n	8011e44 <_printf_float+0x16c>
 8011e5e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e64:	4299      	cmp	r1, r3
 8011e66:	db05      	blt.n	8011e74 <_printf_float+0x19c>
 8011e68:	6823      	ldr	r3, [r4, #0]
 8011e6a:	6121      	str	r1, [r4, #16]
 8011e6c:	07d8      	lsls	r0, r3, #31
 8011e6e:	d5ea      	bpl.n	8011e46 <_printf_float+0x16e>
 8011e70:	1c4b      	adds	r3, r1, #1
 8011e72:	e7e7      	b.n	8011e44 <_printf_float+0x16c>
 8011e74:	2900      	cmp	r1, #0
 8011e76:	bfd4      	ite	le
 8011e78:	f1c1 0202 	rsble	r2, r1, #2
 8011e7c:	2201      	movgt	r2, #1
 8011e7e:	4413      	add	r3, r2
 8011e80:	e7e0      	b.n	8011e44 <_printf_float+0x16c>
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	055a      	lsls	r2, r3, #21
 8011e86:	d407      	bmi.n	8011e98 <_printf_float+0x1c0>
 8011e88:	6923      	ldr	r3, [r4, #16]
 8011e8a:	4642      	mov	r2, r8
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	4628      	mov	r0, r5
 8011e90:	47b8      	blx	r7
 8011e92:	3001      	adds	r0, #1
 8011e94:	d12a      	bne.n	8011eec <_printf_float+0x214>
 8011e96:	e76b      	b.n	8011d70 <_printf_float+0x98>
 8011e98:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011e9c:	f240 80e0 	bls.w	8012060 <_printf_float+0x388>
 8011ea0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011ea4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eac:	d133      	bne.n	8011f16 <_printf_float+0x23e>
 8011eae:	4a38      	ldr	r2, [pc, #224]	@ (8011f90 <_printf_float+0x2b8>)
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	4631      	mov	r1, r6
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	47b8      	blx	r7
 8011eb8:	3001      	adds	r0, #1
 8011eba:	f43f af59 	beq.w	8011d70 <_printf_float+0x98>
 8011ebe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011ec2:	4543      	cmp	r3, r8
 8011ec4:	db02      	blt.n	8011ecc <_printf_float+0x1f4>
 8011ec6:	6823      	ldr	r3, [r4, #0]
 8011ec8:	07d8      	lsls	r0, r3, #31
 8011eca:	d50f      	bpl.n	8011eec <_printf_float+0x214>
 8011ecc:	9b05      	ldr	r3, [sp, #20]
 8011ece:	465a      	mov	r2, fp
 8011ed0:	4631      	mov	r1, r6
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	47b8      	blx	r7
 8011ed6:	3001      	adds	r0, #1
 8011ed8:	f43f af4a 	beq.w	8011d70 <_printf_float+0x98>
 8011edc:	f04f 0900 	mov.w	r9, #0
 8011ee0:	f108 38ff 	add.w	r8, r8, #4294967295
 8011ee4:	f104 0a1a 	add.w	sl, r4, #26
 8011ee8:	45c8      	cmp	r8, r9
 8011eea:	dc09      	bgt.n	8011f00 <_printf_float+0x228>
 8011eec:	6823      	ldr	r3, [r4, #0]
 8011eee:	079b      	lsls	r3, r3, #30
 8011ef0:	f100 8107 	bmi.w	8012102 <_printf_float+0x42a>
 8011ef4:	68e0      	ldr	r0, [r4, #12]
 8011ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ef8:	4298      	cmp	r0, r3
 8011efa:	bfb8      	it	lt
 8011efc:	4618      	movlt	r0, r3
 8011efe:	e739      	b.n	8011d74 <_printf_float+0x9c>
 8011f00:	2301      	movs	r3, #1
 8011f02:	4652      	mov	r2, sl
 8011f04:	4631      	mov	r1, r6
 8011f06:	4628      	mov	r0, r5
 8011f08:	47b8      	blx	r7
 8011f0a:	3001      	adds	r0, #1
 8011f0c:	f43f af30 	beq.w	8011d70 <_printf_float+0x98>
 8011f10:	f109 0901 	add.w	r9, r9, #1
 8011f14:	e7e8      	b.n	8011ee8 <_printf_float+0x210>
 8011f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	dc3b      	bgt.n	8011f94 <_printf_float+0x2bc>
 8011f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8011f90 <_printf_float+0x2b8>)
 8011f1e:	2301      	movs	r3, #1
 8011f20:	4631      	mov	r1, r6
 8011f22:	4628      	mov	r0, r5
 8011f24:	47b8      	blx	r7
 8011f26:	3001      	adds	r0, #1
 8011f28:	f43f af22 	beq.w	8011d70 <_printf_float+0x98>
 8011f2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011f30:	ea59 0303 	orrs.w	r3, r9, r3
 8011f34:	d102      	bne.n	8011f3c <_printf_float+0x264>
 8011f36:	6823      	ldr	r3, [r4, #0]
 8011f38:	07d9      	lsls	r1, r3, #31
 8011f3a:	d5d7      	bpl.n	8011eec <_printf_float+0x214>
 8011f3c:	9b05      	ldr	r3, [sp, #20]
 8011f3e:	465a      	mov	r2, fp
 8011f40:	4631      	mov	r1, r6
 8011f42:	4628      	mov	r0, r5
 8011f44:	47b8      	blx	r7
 8011f46:	3001      	adds	r0, #1
 8011f48:	f43f af12 	beq.w	8011d70 <_printf_float+0x98>
 8011f4c:	f04f 0a00 	mov.w	sl, #0
 8011f50:	f104 0b1a 	add.w	fp, r4, #26
 8011f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f56:	425b      	negs	r3, r3
 8011f58:	4553      	cmp	r3, sl
 8011f5a:	dc01      	bgt.n	8011f60 <_printf_float+0x288>
 8011f5c:	464b      	mov	r3, r9
 8011f5e:	e794      	b.n	8011e8a <_printf_float+0x1b2>
 8011f60:	2301      	movs	r3, #1
 8011f62:	465a      	mov	r2, fp
 8011f64:	4631      	mov	r1, r6
 8011f66:	4628      	mov	r0, r5
 8011f68:	47b8      	blx	r7
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	f43f af00 	beq.w	8011d70 <_printf_float+0x98>
 8011f70:	f10a 0a01 	add.w	sl, sl, #1
 8011f74:	e7ee      	b.n	8011f54 <_printf_float+0x27c>
 8011f76:	bf00      	nop
 8011f78:	ffffffff 	.word	0xffffffff
 8011f7c:	7fefffff 	.word	0x7fefffff
 8011f80:	08016c74 	.word	0x08016c74
 8011f84:	08016c78 	.word	0x08016c78
 8011f88:	08016c7c 	.word	0x08016c7c
 8011f8c:	08016c80 	.word	0x08016c80
 8011f90:	08016c84 	.word	0x08016c84
 8011f94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011f96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011f9a:	4553      	cmp	r3, sl
 8011f9c:	bfa8      	it	ge
 8011f9e:	4653      	movge	r3, sl
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	4699      	mov	r9, r3
 8011fa4:	dc37      	bgt.n	8012016 <_printf_float+0x33e>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	9307      	str	r3, [sp, #28]
 8011faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fae:	f104 021a 	add.w	r2, r4, #26
 8011fb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fb4:	9907      	ldr	r1, [sp, #28]
 8011fb6:	9306      	str	r3, [sp, #24]
 8011fb8:	eba3 0309 	sub.w	r3, r3, r9
 8011fbc:	428b      	cmp	r3, r1
 8011fbe:	dc31      	bgt.n	8012024 <_printf_float+0x34c>
 8011fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc2:	459a      	cmp	sl, r3
 8011fc4:	dc3b      	bgt.n	801203e <_printf_float+0x366>
 8011fc6:	6823      	ldr	r3, [r4, #0]
 8011fc8:	07da      	lsls	r2, r3, #31
 8011fca:	d438      	bmi.n	801203e <_printf_float+0x366>
 8011fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fce:	ebaa 0903 	sub.w	r9, sl, r3
 8011fd2:	9b06      	ldr	r3, [sp, #24]
 8011fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8011fd8:	4599      	cmp	r9, r3
 8011fda:	bfa8      	it	ge
 8011fdc:	4699      	movge	r9, r3
 8011fde:	f1b9 0f00 	cmp.w	r9, #0
 8011fe2:	dc34      	bgt.n	801204e <_printf_float+0x376>
 8011fe4:	f04f 0800 	mov.w	r8, #0
 8011fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fec:	f104 0b1a 	add.w	fp, r4, #26
 8011ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8011ff6:	eba3 0309 	sub.w	r3, r3, r9
 8011ffa:	4543      	cmp	r3, r8
 8011ffc:	f77f af76 	ble.w	8011eec <_printf_float+0x214>
 8012000:	2301      	movs	r3, #1
 8012002:	465a      	mov	r2, fp
 8012004:	4631      	mov	r1, r6
 8012006:	4628      	mov	r0, r5
 8012008:	47b8      	blx	r7
 801200a:	3001      	adds	r0, #1
 801200c:	f43f aeb0 	beq.w	8011d70 <_printf_float+0x98>
 8012010:	f108 0801 	add.w	r8, r8, #1
 8012014:	e7ec      	b.n	8011ff0 <_printf_float+0x318>
 8012016:	4642      	mov	r2, r8
 8012018:	4631      	mov	r1, r6
 801201a:	4628      	mov	r0, r5
 801201c:	47b8      	blx	r7
 801201e:	3001      	adds	r0, #1
 8012020:	d1c1      	bne.n	8011fa6 <_printf_float+0x2ce>
 8012022:	e6a5      	b.n	8011d70 <_printf_float+0x98>
 8012024:	2301      	movs	r3, #1
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	9206      	str	r2, [sp, #24]
 801202c:	47b8      	blx	r7
 801202e:	3001      	adds	r0, #1
 8012030:	f43f ae9e 	beq.w	8011d70 <_printf_float+0x98>
 8012034:	9b07      	ldr	r3, [sp, #28]
 8012036:	9a06      	ldr	r2, [sp, #24]
 8012038:	3301      	adds	r3, #1
 801203a:	9307      	str	r3, [sp, #28]
 801203c:	e7b9      	b.n	8011fb2 <_printf_float+0x2da>
 801203e:	9b05      	ldr	r3, [sp, #20]
 8012040:	465a      	mov	r2, fp
 8012042:	4631      	mov	r1, r6
 8012044:	4628      	mov	r0, r5
 8012046:	47b8      	blx	r7
 8012048:	3001      	adds	r0, #1
 801204a:	d1bf      	bne.n	8011fcc <_printf_float+0x2f4>
 801204c:	e690      	b.n	8011d70 <_printf_float+0x98>
 801204e:	9a06      	ldr	r2, [sp, #24]
 8012050:	464b      	mov	r3, r9
 8012052:	4442      	add	r2, r8
 8012054:	4631      	mov	r1, r6
 8012056:	4628      	mov	r0, r5
 8012058:	47b8      	blx	r7
 801205a:	3001      	adds	r0, #1
 801205c:	d1c2      	bne.n	8011fe4 <_printf_float+0x30c>
 801205e:	e687      	b.n	8011d70 <_printf_float+0x98>
 8012060:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012064:	f1b9 0f01 	cmp.w	r9, #1
 8012068:	dc01      	bgt.n	801206e <_printf_float+0x396>
 801206a:	07db      	lsls	r3, r3, #31
 801206c:	d536      	bpl.n	80120dc <_printf_float+0x404>
 801206e:	2301      	movs	r3, #1
 8012070:	4642      	mov	r2, r8
 8012072:	4631      	mov	r1, r6
 8012074:	4628      	mov	r0, r5
 8012076:	47b8      	blx	r7
 8012078:	3001      	adds	r0, #1
 801207a:	f43f ae79 	beq.w	8011d70 <_printf_float+0x98>
 801207e:	9b05      	ldr	r3, [sp, #20]
 8012080:	465a      	mov	r2, fp
 8012082:	4631      	mov	r1, r6
 8012084:	4628      	mov	r0, r5
 8012086:	47b8      	blx	r7
 8012088:	3001      	adds	r0, #1
 801208a:	f43f ae71 	beq.w	8011d70 <_printf_float+0x98>
 801208e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012092:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209a:	f109 39ff 	add.w	r9, r9, #4294967295
 801209e:	d018      	beq.n	80120d2 <_printf_float+0x3fa>
 80120a0:	464b      	mov	r3, r9
 80120a2:	f108 0201 	add.w	r2, r8, #1
 80120a6:	4631      	mov	r1, r6
 80120a8:	4628      	mov	r0, r5
 80120aa:	47b8      	blx	r7
 80120ac:	3001      	adds	r0, #1
 80120ae:	d10c      	bne.n	80120ca <_printf_float+0x3f2>
 80120b0:	e65e      	b.n	8011d70 <_printf_float+0x98>
 80120b2:	2301      	movs	r3, #1
 80120b4:	465a      	mov	r2, fp
 80120b6:	4631      	mov	r1, r6
 80120b8:	4628      	mov	r0, r5
 80120ba:	47b8      	blx	r7
 80120bc:	3001      	adds	r0, #1
 80120be:	f43f ae57 	beq.w	8011d70 <_printf_float+0x98>
 80120c2:	f108 0801 	add.w	r8, r8, #1
 80120c6:	45c8      	cmp	r8, r9
 80120c8:	dbf3      	blt.n	80120b2 <_printf_float+0x3da>
 80120ca:	4653      	mov	r3, sl
 80120cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80120d0:	e6dc      	b.n	8011e8c <_printf_float+0x1b4>
 80120d2:	f04f 0800 	mov.w	r8, #0
 80120d6:	f104 0b1a 	add.w	fp, r4, #26
 80120da:	e7f4      	b.n	80120c6 <_printf_float+0x3ee>
 80120dc:	2301      	movs	r3, #1
 80120de:	4642      	mov	r2, r8
 80120e0:	e7e1      	b.n	80120a6 <_printf_float+0x3ce>
 80120e2:	2301      	movs	r3, #1
 80120e4:	464a      	mov	r2, r9
 80120e6:	4631      	mov	r1, r6
 80120e8:	4628      	mov	r0, r5
 80120ea:	47b8      	blx	r7
 80120ec:	3001      	adds	r0, #1
 80120ee:	f43f ae3f 	beq.w	8011d70 <_printf_float+0x98>
 80120f2:	f108 0801 	add.w	r8, r8, #1
 80120f6:	68e3      	ldr	r3, [r4, #12]
 80120f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80120fa:	1a5b      	subs	r3, r3, r1
 80120fc:	4543      	cmp	r3, r8
 80120fe:	dcf0      	bgt.n	80120e2 <_printf_float+0x40a>
 8012100:	e6f8      	b.n	8011ef4 <_printf_float+0x21c>
 8012102:	f04f 0800 	mov.w	r8, #0
 8012106:	f104 0919 	add.w	r9, r4, #25
 801210a:	e7f4      	b.n	80120f6 <_printf_float+0x41e>

0801210c <_printf_common>:
 801210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012110:	4616      	mov	r6, r2
 8012112:	4698      	mov	r8, r3
 8012114:	688a      	ldr	r2, [r1, #8]
 8012116:	690b      	ldr	r3, [r1, #16]
 8012118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801211c:	4293      	cmp	r3, r2
 801211e:	bfb8      	it	lt
 8012120:	4613      	movlt	r3, r2
 8012122:	6033      	str	r3, [r6, #0]
 8012124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012128:	4607      	mov	r7, r0
 801212a:	460c      	mov	r4, r1
 801212c:	b10a      	cbz	r2, 8012132 <_printf_common+0x26>
 801212e:	3301      	adds	r3, #1
 8012130:	6033      	str	r3, [r6, #0]
 8012132:	6823      	ldr	r3, [r4, #0]
 8012134:	0699      	lsls	r1, r3, #26
 8012136:	bf42      	ittt	mi
 8012138:	6833      	ldrmi	r3, [r6, #0]
 801213a:	3302      	addmi	r3, #2
 801213c:	6033      	strmi	r3, [r6, #0]
 801213e:	6825      	ldr	r5, [r4, #0]
 8012140:	f015 0506 	ands.w	r5, r5, #6
 8012144:	d106      	bne.n	8012154 <_printf_common+0x48>
 8012146:	f104 0a19 	add.w	sl, r4, #25
 801214a:	68e3      	ldr	r3, [r4, #12]
 801214c:	6832      	ldr	r2, [r6, #0]
 801214e:	1a9b      	subs	r3, r3, r2
 8012150:	42ab      	cmp	r3, r5
 8012152:	dc26      	bgt.n	80121a2 <_printf_common+0x96>
 8012154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012158:	6822      	ldr	r2, [r4, #0]
 801215a:	3b00      	subs	r3, #0
 801215c:	bf18      	it	ne
 801215e:	2301      	movne	r3, #1
 8012160:	0692      	lsls	r2, r2, #26
 8012162:	d42b      	bmi.n	80121bc <_printf_common+0xb0>
 8012164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012168:	4641      	mov	r1, r8
 801216a:	4638      	mov	r0, r7
 801216c:	47c8      	blx	r9
 801216e:	3001      	adds	r0, #1
 8012170:	d01e      	beq.n	80121b0 <_printf_common+0xa4>
 8012172:	6823      	ldr	r3, [r4, #0]
 8012174:	6922      	ldr	r2, [r4, #16]
 8012176:	f003 0306 	and.w	r3, r3, #6
 801217a:	2b04      	cmp	r3, #4
 801217c:	bf02      	ittt	eq
 801217e:	68e5      	ldreq	r5, [r4, #12]
 8012180:	6833      	ldreq	r3, [r6, #0]
 8012182:	1aed      	subeq	r5, r5, r3
 8012184:	68a3      	ldr	r3, [r4, #8]
 8012186:	bf0c      	ite	eq
 8012188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801218c:	2500      	movne	r5, #0
 801218e:	4293      	cmp	r3, r2
 8012190:	bfc4      	itt	gt
 8012192:	1a9b      	subgt	r3, r3, r2
 8012194:	18ed      	addgt	r5, r5, r3
 8012196:	2600      	movs	r6, #0
 8012198:	341a      	adds	r4, #26
 801219a:	42b5      	cmp	r5, r6
 801219c:	d11a      	bne.n	80121d4 <_printf_common+0xc8>
 801219e:	2000      	movs	r0, #0
 80121a0:	e008      	b.n	80121b4 <_printf_common+0xa8>
 80121a2:	2301      	movs	r3, #1
 80121a4:	4652      	mov	r2, sl
 80121a6:	4641      	mov	r1, r8
 80121a8:	4638      	mov	r0, r7
 80121aa:	47c8      	blx	r9
 80121ac:	3001      	adds	r0, #1
 80121ae:	d103      	bne.n	80121b8 <_printf_common+0xac>
 80121b0:	f04f 30ff 	mov.w	r0, #4294967295
 80121b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b8:	3501      	adds	r5, #1
 80121ba:	e7c6      	b.n	801214a <_printf_common+0x3e>
 80121bc:	18e1      	adds	r1, r4, r3
 80121be:	1c5a      	adds	r2, r3, #1
 80121c0:	2030      	movs	r0, #48	@ 0x30
 80121c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80121c6:	4422      	add	r2, r4
 80121c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80121cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80121d0:	3302      	adds	r3, #2
 80121d2:	e7c7      	b.n	8012164 <_printf_common+0x58>
 80121d4:	2301      	movs	r3, #1
 80121d6:	4622      	mov	r2, r4
 80121d8:	4641      	mov	r1, r8
 80121da:	4638      	mov	r0, r7
 80121dc:	47c8      	blx	r9
 80121de:	3001      	adds	r0, #1
 80121e0:	d0e6      	beq.n	80121b0 <_printf_common+0xa4>
 80121e2:	3601      	adds	r6, #1
 80121e4:	e7d9      	b.n	801219a <_printf_common+0x8e>
	...

080121e8 <_printf_i>:
 80121e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121ec:	7e0f      	ldrb	r7, [r1, #24]
 80121ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80121f0:	2f78      	cmp	r7, #120	@ 0x78
 80121f2:	4691      	mov	r9, r2
 80121f4:	4680      	mov	r8, r0
 80121f6:	460c      	mov	r4, r1
 80121f8:	469a      	mov	sl, r3
 80121fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80121fe:	d807      	bhi.n	8012210 <_printf_i+0x28>
 8012200:	2f62      	cmp	r7, #98	@ 0x62
 8012202:	d80a      	bhi.n	801221a <_printf_i+0x32>
 8012204:	2f00      	cmp	r7, #0
 8012206:	f000 80d2 	beq.w	80123ae <_printf_i+0x1c6>
 801220a:	2f58      	cmp	r7, #88	@ 0x58
 801220c:	f000 80b9 	beq.w	8012382 <_printf_i+0x19a>
 8012210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012218:	e03a      	b.n	8012290 <_printf_i+0xa8>
 801221a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801221e:	2b15      	cmp	r3, #21
 8012220:	d8f6      	bhi.n	8012210 <_printf_i+0x28>
 8012222:	a101      	add	r1, pc, #4	@ (adr r1, 8012228 <_printf_i+0x40>)
 8012224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012228:	08012281 	.word	0x08012281
 801222c:	08012295 	.word	0x08012295
 8012230:	08012211 	.word	0x08012211
 8012234:	08012211 	.word	0x08012211
 8012238:	08012211 	.word	0x08012211
 801223c:	08012211 	.word	0x08012211
 8012240:	08012295 	.word	0x08012295
 8012244:	08012211 	.word	0x08012211
 8012248:	08012211 	.word	0x08012211
 801224c:	08012211 	.word	0x08012211
 8012250:	08012211 	.word	0x08012211
 8012254:	08012395 	.word	0x08012395
 8012258:	080122bf 	.word	0x080122bf
 801225c:	0801234f 	.word	0x0801234f
 8012260:	08012211 	.word	0x08012211
 8012264:	08012211 	.word	0x08012211
 8012268:	080123b7 	.word	0x080123b7
 801226c:	08012211 	.word	0x08012211
 8012270:	080122bf 	.word	0x080122bf
 8012274:	08012211 	.word	0x08012211
 8012278:	08012211 	.word	0x08012211
 801227c:	08012357 	.word	0x08012357
 8012280:	6833      	ldr	r3, [r6, #0]
 8012282:	1d1a      	adds	r2, r3, #4
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	6032      	str	r2, [r6, #0]
 8012288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801228c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012290:	2301      	movs	r3, #1
 8012292:	e09d      	b.n	80123d0 <_printf_i+0x1e8>
 8012294:	6833      	ldr	r3, [r6, #0]
 8012296:	6820      	ldr	r0, [r4, #0]
 8012298:	1d19      	adds	r1, r3, #4
 801229a:	6031      	str	r1, [r6, #0]
 801229c:	0606      	lsls	r6, r0, #24
 801229e:	d501      	bpl.n	80122a4 <_printf_i+0xbc>
 80122a0:	681d      	ldr	r5, [r3, #0]
 80122a2:	e003      	b.n	80122ac <_printf_i+0xc4>
 80122a4:	0645      	lsls	r5, r0, #25
 80122a6:	d5fb      	bpl.n	80122a0 <_printf_i+0xb8>
 80122a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80122ac:	2d00      	cmp	r5, #0
 80122ae:	da03      	bge.n	80122b8 <_printf_i+0xd0>
 80122b0:	232d      	movs	r3, #45	@ 0x2d
 80122b2:	426d      	negs	r5, r5
 80122b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122b8:	4859      	ldr	r0, [pc, #356]	@ (8012420 <_printf_i+0x238>)
 80122ba:	230a      	movs	r3, #10
 80122bc:	e011      	b.n	80122e2 <_printf_i+0xfa>
 80122be:	6821      	ldr	r1, [r4, #0]
 80122c0:	6833      	ldr	r3, [r6, #0]
 80122c2:	0608      	lsls	r0, r1, #24
 80122c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80122c8:	d402      	bmi.n	80122d0 <_printf_i+0xe8>
 80122ca:	0649      	lsls	r1, r1, #25
 80122cc:	bf48      	it	mi
 80122ce:	b2ad      	uxthmi	r5, r5
 80122d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80122d2:	4853      	ldr	r0, [pc, #332]	@ (8012420 <_printf_i+0x238>)
 80122d4:	6033      	str	r3, [r6, #0]
 80122d6:	bf14      	ite	ne
 80122d8:	230a      	movne	r3, #10
 80122da:	2308      	moveq	r3, #8
 80122dc:	2100      	movs	r1, #0
 80122de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80122e2:	6866      	ldr	r6, [r4, #4]
 80122e4:	60a6      	str	r6, [r4, #8]
 80122e6:	2e00      	cmp	r6, #0
 80122e8:	bfa2      	ittt	ge
 80122ea:	6821      	ldrge	r1, [r4, #0]
 80122ec:	f021 0104 	bicge.w	r1, r1, #4
 80122f0:	6021      	strge	r1, [r4, #0]
 80122f2:	b90d      	cbnz	r5, 80122f8 <_printf_i+0x110>
 80122f4:	2e00      	cmp	r6, #0
 80122f6:	d04b      	beq.n	8012390 <_printf_i+0x1a8>
 80122f8:	4616      	mov	r6, r2
 80122fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80122fe:	fb03 5711 	mls	r7, r3, r1, r5
 8012302:	5dc7      	ldrb	r7, [r0, r7]
 8012304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012308:	462f      	mov	r7, r5
 801230a:	42bb      	cmp	r3, r7
 801230c:	460d      	mov	r5, r1
 801230e:	d9f4      	bls.n	80122fa <_printf_i+0x112>
 8012310:	2b08      	cmp	r3, #8
 8012312:	d10b      	bne.n	801232c <_printf_i+0x144>
 8012314:	6823      	ldr	r3, [r4, #0]
 8012316:	07df      	lsls	r7, r3, #31
 8012318:	d508      	bpl.n	801232c <_printf_i+0x144>
 801231a:	6923      	ldr	r3, [r4, #16]
 801231c:	6861      	ldr	r1, [r4, #4]
 801231e:	4299      	cmp	r1, r3
 8012320:	bfde      	ittt	le
 8012322:	2330      	movle	r3, #48	@ 0x30
 8012324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012328:	f106 36ff 	addle.w	r6, r6, #4294967295
 801232c:	1b92      	subs	r2, r2, r6
 801232e:	6122      	str	r2, [r4, #16]
 8012330:	f8cd a000 	str.w	sl, [sp]
 8012334:	464b      	mov	r3, r9
 8012336:	aa03      	add	r2, sp, #12
 8012338:	4621      	mov	r1, r4
 801233a:	4640      	mov	r0, r8
 801233c:	f7ff fee6 	bl	801210c <_printf_common>
 8012340:	3001      	adds	r0, #1
 8012342:	d14a      	bne.n	80123da <_printf_i+0x1f2>
 8012344:	f04f 30ff 	mov.w	r0, #4294967295
 8012348:	b004      	add	sp, #16
 801234a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801234e:	6823      	ldr	r3, [r4, #0]
 8012350:	f043 0320 	orr.w	r3, r3, #32
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	4833      	ldr	r0, [pc, #204]	@ (8012424 <_printf_i+0x23c>)
 8012358:	2778      	movs	r7, #120	@ 0x78
 801235a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801235e:	6823      	ldr	r3, [r4, #0]
 8012360:	6831      	ldr	r1, [r6, #0]
 8012362:	061f      	lsls	r7, r3, #24
 8012364:	f851 5b04 	ldr.w	r5, [r1], #4
 8012368:	d402      	bmi.n	8012370 <_printf_i+0x188>
 801236a:	065f      	lsls	r7, r3, #25
 801236c:	bf48      	it	mi
 801236e:	b2ad      	uxthmi	r5, r5
 8012370:	6031      	str	r1, [r6, #0]
 8012372:	07d9      	lsls	r1, r3, #31
 8012374:	bf44      	itt	mi
 8012376:	f043 0320 	orrmi.w	r3, r3, #32
 801237a:	6023      	strmi	r3, [r4, #0]
 801237c:	b11d      	cbz	r5, 8012386 <_printf_i+0x19e>
 801237e:	2310      	movs	r3, #16
 8012380:	e7ac      	b.n	80122dc <_printf_i+0xf4>
 8012382:	4827      	ldr	r0, [pc, #156]	@ (8012420 <_printf_i+0x238>)
 8012384:	e7e9      	b.n	801235a <_printf_i+0x172>
 8012386:	6823      	ldr	r3, [r4, #0]
 8012388:	f023 0320 	bic.w	r3, r3, #32
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	e7f6      	b.n	801237e <_printf_i+0x196>
 8012390:	4616      	mov	r6, r2
 8012392:	e7bd      	b.n	8012310 <_printf_i+0x128>
 8012394:	6833      	ldr	r3, [r6, #0]
 8012396:	6825      	ldr	r5, [r4, #0]
 8012398:	6961      	ldr	r1, [r4, #20]
 801239a:	1d18      	adds	r0, r3, #4
 801239c:	6030      	str	r0, [r6, #0]
 801239e:	062e      	lsls	r6, r5, #24
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	d501      	bpl.n	80123a8 <_printf_i+0x1c0>
 80123a4:	6019      	str	r1, [r3, #0]
 80123a6:	e002      	b.n	80123ae <_printf_i+0x1c6>
 80123a8:	0668      	lsls	r0, r5, #25
 80123aa:	d5fb      	bpl.n	80123a4 <_printf_i+0x1bc>
 80123ac:	8019      	strh	r1, [r3, #0]
 80123ae:	2300      	movs	r3, #0
 80123b0:	6123      	str	r3, [r4, #16]
 80123b2:	4616      	mov	r6, r2
 80123b4:	e7bc      	b.n	8012330 <_printf_i+0x148>
 80123b6:	6833      	ldr	r3, [r6, #0]
 80123b8:	1d1a      	adds	r2, r3, #4
 80123ba:	6032      	str	r2, [r6, #0]
 80123bc:	681e      	ldr	r6, [r3, #0]
 80123be:	6862      	ldr	r2, [r4, #4]
 80123c0:	2100      	movs	r1, #0
 80123c2:	4630      	mov	r0, r6
 80123c4:	f7ed ff8c 	bl	80002e0 <memchr>
 80123c8:	b108      	cbz	r0, 80123ce <_printf_i+0x1e6>
 80123ca:	1b80      	subs	r0, r0, r6
 80123cc:	6060      	str	r0, [r4, #4]
 80123ce:	6863      	ldr	r3, [r4, #4]
 80123d0:	6123      	str	r3, [r4, #16]
 80123d2:	2300      	movs	r3, #0
 80123d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123d8:	e7aa      	b.n	8012330 <_printf_i+0x148>
 80123da:	6923      	ldr	r3, [r4, #16]
 80123dc:	4632      	mov	r2, r6
 80123de:	4649      	mov	r1, r9
 80123e0:	4640      	mov	r0, r8
 80123e2:	47d0      	blx	sl
 80123e4:	3001      	adds	r0, #1
 80123e6:	d0ad      	beq.n	8012344 <_printf_i+0x15c>
 80123e8:	6823      	ldr	r3, [r4, #0]
 80123ea:	079b      	lsls	r3, r3, #30
 80123ec:	d413      	bmi.n	8012416 <_printf_i+0x22e>
 80123ee:	68e0      	ldr	r0, [r4, #12]
 80123f0:	9b03      	ldr	r3, [sp, #12]
 80123f2:	4298      	cmp	r0, r3
 80123f4:	bfb8      	it	lt
 80123f6:	4618      	movlt	r0, r3
 80123f8:	e7a6      	b.n	8012348 <_printf_i+0x160>
 80123fa:	2301      	movs	r3, #1
 80123fc:	4632      	mov	r2, r6
 80123fe:	4649      	mov	r1, r9
 8012400:	4640      	mov	r0, r8
 8012402:	47d0      	blx	sl
 8012404:	3001      	adds	r0, #1
 8012406:	d09d      	beq.n	8012344 <_printf_i+0x15c>
 8012408:	3501      	adds	r5, #1
 801240a:	68e3      	ldr	r3, [r4, #12]
 801240c:	9903      	ldr	r1, [sp, #12]
 801240e:	1a5b      	subs	r3, r3, r1
 8012410:	42ab      	cmp	r3, r5
 8012412:	dcf2      	bgt.n	80123fa <_printf_i+0x212>
 8012414:	e7eb      	b.n	80123ee <_printf_i+0x206>
 8012416:	2500      	movs	r5, #0
 8012418:	f104 0619 	add.w	r6, r4, #25
 801241c:	e7f5      	b.n	801240a <_printf_i+0x222>
 801241e:	bf00      	nop
 8012420:	08016c86 	.word	0x08016c86
 8012424:	08016c97 	.word	0x08016c97

08012428 <std>:
 8012428:	2300      	movs	r3, #0
 801242a:	b510      	push	{r4, lr}
 801242c:	4604      	mov	r4, r0
 801242e:	e9c0 3300 	strd	r3, r3, [r0]
 8012432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012436:	6083      	str	r3, [r0, #8]
 8012438:	8181      	strh	r1, [r0, #12]
 801243a:	6643      	str	r3, [r0, #100]	@ 0x64
 801243c:	81c2      	strh	r2, [r0, #14]
 801243e:	6183      	str	r3, [r0, #24]
 8012440:	4619      	mov	r1, r3
 8012442:	2208      	movs	r2, #8
 8012444:	305c      	adds	r0, #92	@ 0x5c
 8012446:	f000 f914 	bl	8012672 <memset>
 801244a:	4b0d      	ldr	r3, [pc, #52]	@ (8012480 <std+0x58>)
 801244c:	6263      	str	r3, [r4, #36]	@ 0x24
 801244e:	4b0d      	ldr	r3, [pc, #52]	@ (8012484 <std+0x5c>)
 8012450:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012452:	4b0d      	ldr	r3, [pc, #52]	@ (8012488 <std+0x60>)
 8012454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012456:	4b0d      	ldr	r3, [pc, #52]	@ (801248c <std+0x64>)
 8012458:	6323      	str	r3, [r4, #48]	@ 0x30
 801245a:	4b0d      	ldr	r3, [pc, #52]	@ (8012490 <std+0x68>)
 801245c:	6224      	str	r4, [r4, #32]
 801245e:	429c      	cmp	r4, r3
 8012460:	d006      	beq.n	8012470 <std+0x48>
 8012462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012466:	4294      	cmp	r4, r2
 8012468:	d002      	beq.n	8012470 <std+0x48>
 801246a:	33d0      	adds	r3, #208	@ 0xd0
 801246c:	429c      	cmp	r4, r3
 801246e:	d105      	bne.n	801247c <std+0x54>
 8012470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012478:	f000 b988 	b.w	801278c <__retarget_lock_init_recursive>
 801247c:	bd10      	pop	{r4, pc}
 801247e:	bf00      	nop
 8012480:	080125ed 	.word	0x080125ed
 8012484:	0801260f 	.word	0x0801260f
 8012488:	08012647 	.word	0x08012647
 801248c:	0801266b 	.word	0x0801266b
 8012490:	24006fc0 	.word	0x24006fc0

08012494 <stdio_exit_handler>:
 8012494:	4a02      	ldr	r2, [pc, #8]	@ (80124a0 <stdio_exit_handler+0xc>)
 8012496:	4903      	ldr	r1, [pc, #12]	@ (80124a4 <stdio_exit_handler+0x10>)
 8012498:	4803      	ldr	r0, [pc, #12]	@ (80124a8 <stdio_exit_handler+0x14>)
 801249a:	f000 b869 	b.w	8012570 <_fwalk_sglue>
 801249e:	bf00      	nop
 80124a0:	2400012c 	.word	0x2400012c
 80124a4:	08013ebd 	.word	0x08013ebd
 80124a8:	2400013c 	.word	0x2400013c

080124ac <cleanup_stdio>:
 80124ac:	6841      	ldr	r1, [r0, #4]
 80124ae:	4b0c      	ldr	r3, [pc, #48]	@ (80124e0 <cleanup_stdio+0x34>)
 80124b0:	4299      	cmp	r1, r3
 80124b2:	b510      	push	{r4, lr}
 80124b4:	4604      	mov	r4, r0
 80124b6:	d001      	beq.n	80124bc <cleanup_stdio+0x10>
 80124b8:	f001 fd00 	bl	8013ebc <_fflush_r>
 80124bc:	68a1      	ldr	r1, [r4, #8]
 80124be:	4b09      	ldr	r3, [pc, #36]	@ (80124e4 <cleanup_stdio+0x38>)
 80124c0:	4299      	cmp	r1, r3
 80124c2:	d002      	beq.n	80124ca <cleanup_stdio+0x1e>
 80124c4:	4620      	mov	r0, r4
 80124c6:	f001 fcf9 	bl	8013ebc <_fflush_r>
 80124ca:	68e1      	ldr	r1, [r4, #12]
 80124cc:	4b06      	ldr	r3, [pc, #24]	@ (80124e8 <cleanup_stdio+0x3c>)
 80124ce:	4299      	cmp	r1, r3
 80124d0:	d004      	beq.n	80124dc <cleanup_stdio+0x30>
 80124d2:	4620      	mov	r0, r4
 80124d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124d8:	f001 bcf0 	b.w	8013ebc <_fflush_r>
 80124dc:	bd10      	pop	{r4, pc}
 80124de:	bf00      	nop
 80124e0:	24006fc0 	.word	0x24006fc0
 80124e4:	24007028 	.word	0x24007028
 80124e8:	24007090 	.word	0x24007090

080124ec <global_stdio_init.part.0>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	4b0b      	ldr	r3, [pc, #44]	@ (801251c <global_stdio_init.part.0+0x30>)
 80124f0:	4c0b      	ldr	r4, [pc, #44]	@ (8012520 <global_stdio_init.part.0+0x34>)
 80124f2:	4a0c      	ldr	r2, [pc, #48]	@ (8012524 <global_stdio_init.part.0+0x38>)
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	4620      	mov	r0, r4
 80124f8:	2200      	movs	r2, #0
 80124fa:	2104      	movs	r1, #4
 80124fc:	f7ff ff94 	bl	8012428 <std>
 8012500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012504:	2201      	movs	r2, #1
 8012506:	2109      	movs	r1, #9
 8012508:	f7ff ff8e 	bl	8012428 <std>
 801250c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012510:	2202      	movs	r2, #2
 8012512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012516:	2112      	movs	r1, #18
 8012518:	f7ff bf86 	b.w	8012428 <std>
 801251c:	240070f8 	.word	0x240070f8
 8012520:	24006fc0 	.word	0x24006fc0
 8012524:	08012495 	.word	0x08012495

08012528 <__sfp_lock_acquire>:
 8012528:	4801      	ldr	r0, [pc, #4]	@ (8012530 <__sfp_lock_acquire+0x8>)
 801252a:	f000 b930 	b.w	801278e <__retarget_lock_acquire_recursive>
 801252e:	bf00      	nop
 8012530:	24007101 	.word	0x24007101

08012534 <__sfp_lock_release>:
 8012534:	4801      	ldr	r0, [pc, #4]	@ (801253c <__sfp_lock_release+0x8>)
 8012536:	f000 b92b 	b.w	8012790 <__retarget_lock_release_recursive>
 801253a:	bf00      	nop
 801253c:	24007101 	.word	0x24007101

08012540 <__sinit>:
 8012540:	b510      	push	{r4, lr}
 8012542:	4604      	mov	r4, r0
 8012544:	f7ff fff0 	bl	8012528 <__sfp_lock_acquire>
 8012548:	6a23      	ldr	r3, [r4, #32]
 801254a:	b11b      	cbz	r3, 8012554 <__sinit+0x14>
 801254c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012550:	f7ff bff0 	b.w	8012534 <__sfp_lock_release>
 8012554:	4b04      	ldr	r3, [pc, #16]	@ (8012568 <__sinit+0x28>)
 8012556:	6223      	str	r3, [r4, #32]
 8012558:	4b04      	ldr	r3, [pc, #16]	@ (801256c <__sinit+0x2c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d1f5      	bne.n	801254c <__sinit+0xc>
 8012560:	f7ff ffc4 	bl	80124ec <global_stdio_init.part.0>
 8012564:	e7f2      	b.n	801254c <__sinit+0xc>
 8012566:	bf00      	nop
 8012568:	080124ad 	.word	0x080124ad
 801256c:	240070f8 	.word	0x240070f8

08012570 <_fwalk_sglue>:
 8012570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012574:	4607      	mov	r7, r0
 8012576:	4688      	mov	r8, r1
 8012578:	4614      	mov	r4, r2
 801257a:	2600      	movs	r6, #0
 801257c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012580:	f1b9 0901 	subs.w	r9, r9, #1
 8012584:	d505      	bpl.n	8012592 <_fwalk_sglue+0x22>
 8012586:	6824      	ldr	r4, [r4, #0]
 8012588:	2c00      	cmp	r4, #0
 801258a:	d1f7      	bne.n	801257c <_fwalk_sglue+0xc>
 801258c:	4630      	mov	r0, r6
 801258e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012592:	89ab      	ldrh	r3, [r5, #12]
 8012594:	2b01      	cmp	r3, #1
 8012596:	d907      	bls.n	80125a8 <_fwalk_sglue+0x38>
 8012598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801259c:	3301      	adds	r3, #1
 801259e:	d003      	beq.n	80125a8 <_fwalk_sglue+0x38>
 80125a0:	4629      	mov	r1, r5
 80125a2:	4638      	mov	r0, r7
 80125a4:	47c0      	blx	r8
 80125a6:	4306      	orrs	r6, r0
 80125a8:	3568      	adds	r5, #104	@ 0x68
 80125aa:	e7e9      	b.n	8012580 <_fwalk_sglue+0x10>

080125ac <siprintf>:
 80125ac:	b40e      	push	{r1, r2, r3}
 80125ae:	b500      	push	{lr}
 80125b0:	b09c      	sub	sp, #112	@ 0x70
 80125b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80125b4:	9002      	str	r0, [sp, #8]
 80125b6:	9006      	str	r0, [sp, #24]
 80125b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80125bc:	4809      	ldr	r0, [pc, #36]	@ (80125e4 <siprintf+0x38>)
 80125be:	9107      	str	r1, [sp, #28]
 80125c0:	9104      	str	r1, [sp, #16]
 80125c2:	4909      	ldr	r1, [pc, #36]	@ (80125e8 <siprintf+0x3c>)
 80125c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80125c8:	9105      	str	r1, [sp, #20]
 80125ca:	6800      	ldr	r0, [r0, #0]
 80125cc:	9301      	str	r3, [sp, #4]
 80125ce:	a902      	add	r1, sp, #8
 80125d0:	f001 faf4 	bl	8013bbc <_svfiprintf_r>
 80125d4:	9b02      	ldr	r3, [sp, #8]
 80125d6:	2200      	movs	r2, #0
 80125d8:	701a      	strb	r2, [r3, #0]
 80125da:	b01c      	add	sp, #112	@ 0x70
 80125dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80125e0:	b003      	add	sp, #12
 80125e2:	4770      	bx	lr
 80125e4:	24000138 	.word	0x24000138
 80125e8:	ffff0208 	.word	0xffff0208

080125ec <__sread>:
 80125ec:	b510      	push	{r4, lr}
 80125ee:	460c      	mov	r4, r1
 80125f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f4:	f000 f86c 	bl	80126d0 <_read_r>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	bfab      	itete	ge
 80125fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80125fe:	89a3      	ldrhlt	r3, [r4, #12]
 8012600:	181b      	addge	r3, r3, r0
 8012602:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012606:	bfac      	ite	ge
 8012608:	6563      	strge	r3, [r4, #84]	@ 0x54
 801260a:	81a3      	strhlt	r3, [r4, #12]
 801260c:	bd10      	pop	{r4, pc}

0801260e <__swrite>:
 801260e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012612:	461f      	mov	r7, r3
 8012614:	898b      	ldrh	r3, [r1, #12]
 8012616:	05db      	lsls	r3, r3, #23
 8012618:	4605      	mov	r5, r0
 801261a:	460c      	mov	r4, r1
 801261c:	4616      	mov	r6, r2
 801261e:	d505      	bpl.n	801262c <__swrite+0x1e>
 8012620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012624:	2302      	movs	r3, #2
 8012626:	2200      	movs	r2, #0
 8012628:	f000 f840 	bl	80126ac <_lseek_r>
 801262c:	89a3      	ldrh	r3, [r4, #12]
 801262e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012636:	81a3      	strh	r3, [r4, #12]
 8012638:	4632      	mov	r2, r6
 801263a:	463b      	mov	r3, r7
 801263c:	4628      	mov	r0, r5
 801263e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012642:	f000 b867 	b.w	8012714 <_write_r>

08012646 <__sseek>:
 8012646:	b510      	push	{r4, lr}
 8012648:	460c      	mov	r4, r1
 801264a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801264e:	f000 f82d 	bl	80126ac <_lseek_r>
 8012652:	1c43      	adds	r3, r0, #1
 8012654:	89a3      	ldrh	r3, [r4, #12]
 8012656:	bf15      	itete	ne
 8012658:	6560      	strne	r0, [r4, #84]	@ 0x54
 801265a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801265e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012662:	81a3      	strheq	r3, [r4, #12]
 8012664:	bf18      	it	ne
 8012666:	81a3      	strhne	r3, [r4, #12]
 8012668:	bd10      	pop	{r4, pc}

0801266a <__sclose>:
 801266a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801266e:	f000 b80d 	b.w	801268c <_close_r>

08012672 <memset>:
 8012672:	4402      	add	r2, r0
 8012674:	4603      	mov	r3, r0
 8012676:	4293      	cmp	r3, r2
 8012678:	d100      	bne.n	801267c <memset+0xa>
 801267a:	4770      	bx	lr
 801267c:	f803 1b01 	strb.w	r1, [r3], #1
 8012680:	e7f9      	b.n	8012676 <memset+0x4>
	...

08012684 <_localeconv_r>:
 8012684:	4800      	ldr	r0, [pc, #0]	@ (8012688 <_localeconv_r+0x4>)
 8012686:	4770      	bx	lr
 8012688:	24000278 	.word	0x24000278

0801268c <_close_r>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	4d06      	ldr	r5, [pc, #24]	@ (80126a8 <_close_r+0x1c>)
 8012690:	2300      	movs	r3, #0
 8012692:	4604      	mov	r4, r0
 8012694:	4608      	mov	r0, r1
 8012696:	602b      	str	r3, [r5, #0]
 8012698:	f7ee ff58 	bl	800154c <_close>
 801269c:	1c43      	adds	r3, r0, #1
 801269e:	d102      	bne.n	80126a6 <_close_r+0x1a>
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	b103      	cbz	r3, 80126a6 <_close_r+0x1a>
 80126a4:	6023      	str	r3, [r4, #0]
 80126a6:	bd38      	pop	{r3, r4, r5, pc}
 80126a8:	240070fc 	.word	0x240070fc

080126ac <_lseek_r>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	4d07      	ldr	r5, [pc, #28]	@ (80126cc <_lseek_r+0x20>)
 80126b0:	4604      	mov	r4, r0
 80126b2:	4608      	mov	r0, r1
 80126b4:	4611      	mov	r1, r2
 80126b6:	2200      	movs	r2, #0
 80126b8:	602a      	str	r2, [r5, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	f7ee ff6d 	bl	800159a <_lseek>
 80126c0:	1c43      	adds	r3, r0, #1
 80126c2:	d102      	bne.n	80126ca <_lseek_r+0x1e>
 80126c4:	682b      	ldr	r3, [r5, #0]
 80126c6:	b103      	cbz	r3, 80126ca <_lseek_r+0x1e>
 80126c8:	6023      	str	r3, [r4, #0]
 80126ca:	bd38      	pop	{r3, r4, r5, pc}
 80126cc:	240070fc 	.word	0x240070fc

080126d0 <_read_r>:
 80126d0:	b538      	push	{r3, r4, r5, lr}
 80126d2:	4d07      	ldr	r5, [pc, #28]	@ (80126f0 <_read_r+0x20>)
 80126d4:	4604      	mov	r4, r0
 80126d6:	4608      	mov	r0, r1
 80126d8:	4611      	mov	r1, r2
 80126da:	2200      	movs	r2, #0
 80126dc:	602a      	str	r2, [r5, #0]
 80126de:	461a      	mov	r2, r3
 80126e0:	f7ee fefb 	bl	80014da <_read>
 80126e4:	1c43      	adds	r3, r0, #1
 80126e6:	d102      	bne.n	80126ee <_read_r+0x1e>
 80126e8:	682b      	ldr	r3, [r5, #0]
 80126ea:	b103      	cbz	r3, 80126ee <_read_r+0x1e>
 80126ec:	6023      	str	r3, [r4, #0]
 80126ee:	bd38      	pop	{r3, r4, r5, pc}
 80126f0:	240070fc 	.word	0x240070fc

080126f4 <_sbrk_r>:
 80126f4:	b538      	push	{r3, r4, r5, lr}
 80126f6:	4d06      	ldr	r5, [pc, #24]	@ (8012710 <_sbrk_r+0x1c>)
 80126f8:	2300      	movs	r3, #0
 80126fa:	4604      	mov	r4, r0
 80126fc:	4608      	mov	r0, r1
 80126fe:	602b      	str	r3, [r5, #0]
 8012700:	f7ee ff58 	bl	80015b4 <_sbrk>
 8012704:	1c43      	adds	r3, r0, #1
 8012706:	d102      	bne.n	801270e <_sbrk_r+0x1a>
 8012708:	682b      	ldr	r3, [r5, #0]
 801270a:	b103      	cbz	r3, 801270e <_sbrk_r+0x1a>
 801270c:	6023      	str	r3, [r4, #0]
 801270e:	bd38      	pop	{r3, r4, r5, pc}
 8012710:	240070fc 	.word	0x240070fc

08012714 <_write_r>:
 8012714:	b538      	push	{r3, r4, r5, lr}
 8012716:	4d07      	ldr	r5, [pc, #28]	@ (8012734 <_write_r+0x20>)
 8012718:	4604      	mov	r4, r0
 801271a:	4608      	mov	r0, r1
 801271c:	4611      	mov	r1, r2
 801271e:	2200      	movs	r2, #0
 8012720:	602a      	str	r2, [r5, #0]
 8012722:	461a      	mov	r2, r3
 8012724:	f7ee fef6 	bl	8001514 <_write>
 8012728:	1c43      	adds	r3, r0, #1
 801272a:	d102      	bne.n	8012732 <_write_r+0x1e>
 801272c:	682b      	ldr	r3, [r5, #0]
 801272e:	b103      	cbz	r3, 8012732 <_write_r+0x1e>
 8012730:	6023      	str	r3, [r4, #0]
 8012732:	bd38      	pop	{r3, r4, r5, pc}
 8012734:	240070fc 	.word	0x240070fc

08012738 <__errno>:
 8012738:	4b01      	ldr	r3, [pc, #4]	@ (8012740 <__errno+0x8>)
 801273a:	6818      	ldr	r0, [r3, #0]
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	24000138 	.word	0x24000138

08012744 <__libc_init_array>:
 8012744:	b570      	push	{r4, r5, r6, lr}
 8012746:	4d0d      	ldr	r5, [pc, #52]	@ (801277c <__libc_init_array+0x38>)
 8012748:	4c0d      	ldr	r4, [pc, #52]	@ (8012780 <__libc_init_array+0x3c>)
 801274a:	1b64      	subs	r4, r4, r5
 801274c:	10a4      	asrs	r4, r4, #2
 801274e:	2600      	movs	r6, #0
 8012750:	42a6      	cmp	r6, r4
 8012752:	d109      	bne.n	8012768 <__libc_init_array+0x24>
 8012754:	4d0b      	ldr	r5, [pc, #44]	@ (8012784 <__libc_init_array+0x40>)
 8012756:	4c0c      	ldr	r4, [pc, #48]	@ (8012788 <__libc_init_array+0x44>)
 8012758:	f002 f9bc 	bl	8014ad4 <_init>
 801275c:	1b64      	subs	r4, r4, r5
 801275e:	10a4      	asrs	r4, r4, #2
 8012760:	2600      	movs	r6, #0
 8012762:	42a6      	cmp	r6, r4
 8012764:	d105      	bne.n	8012772 <__libc_init_array+0x2e>
 8012766:	bd70      	pop	{r4, r5, r6, pc}
 8012768:	f855 3b04 	ldr.w	r3, [r5], #4
 801276c:	4798      	blx	r3
 801276e:	3601      	adds	r6, #1
 8012770:	e7ee      	b.n	8012750 <__libc_init_array+0xc>
 8012772:	f855 3b04 	ldr.w	r3, [r5], #4
 8012776:	4798      	blx	r3
 8012778:	3601      	adds	r6, #1
 801277a:	e7f2      	b.n	8012762 <__libc_init_array+0x1e>
 801277c:	08017000 	.word	0x08017000
 8012780:	08017000 	.word	0x08017000
 8012784:	08017000 	.word	0x08017000
 8012788:	08017004 	.word	0x08017004

0801278c <__retarget_lock_init_recursive>:
 801278c:	4770      	bx	lr

0801278e <__retarget_lock_acquire_recursive>:
 801278e:	4770      	bx	lr

08012790 <__retarget_lock_release_recursive>:
 8012790:	4770      	bx	lr

08012792 <memcpy>:
 8012792:	440a      	add	r2, r1
 8012794:	4291      	cmp	r1, r2
 8012796:	f100 33ff 	add.w	r3, r0, #4294967295
 801279a:	d100      	bne.n	801279e <memcpy+0xc>
 801279c:	4770      	bx	lr
 801279e:	b510      	push	{r4, lr}
 80127a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127a8:	4291      	cmp	r1, r2
 80127aa:	d1f9      	bne.n	80127a0 <memcpy+0xe>
 80127ac:	bd10      	pop	{r4, pc}

080127ae <quorem>:
 80127ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b2:	6903      	ldr	r3, [r0, #16]
 80127b4:	690c      	ldr	r4, [r1, #16]
 80127b6:	42a3      	cmp	r3, r4
 80127b8:	4607      	mov	r7, r0
 80127ba:	db7e      	blt.n	80128ba <quorem+0x10c>
 80127bc:	3c01      	subs	r4, #1
 80127be:	f101 0814 	add.w	r8, r1, #20
 80127c2:	00a3      	lsls	r3, r4, #2
 80127c4:	f100 0514 	add.w	r5, r0, #20
 80127c8:	9300      	str	r3, [sp, #0]
 80127ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127ce:	9301      	str	r3, [sp, #4]
 80127d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80127d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127d8:	3301      	adds	r3, #1
 80127da:	429a      	cmp	r2, r3
 80127dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80127e4:	d32e      	bcc.n	8012844 <quorem+0x96>
 80127e6:	f04f 0a00 	mov.w	sl, #0
 80127ea:	46c4      	mov	ip, r8
 80127ec:	46ae      	mov	lr, r5
 80127ee:	46d3      	mov	fp, sl
 80127f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80127f4:	b298      	uxth	r0, r3
 80127f6:	fb06 a000 	mla	r0, r6, r0, sl
 80127fa:	0c02      	lsrs	r2, r0, #16
 80127fc:	0c1b      	lsrs	r3, r3, #16
 80127fe:	fb06 2303 	mla	r3, r6, r3, r2
 8012802:	f8de 2000 	ldr.w	r2, [lr]
 8012806:	b280      	uxth	r0, r0
 8012808:	b292      	uxth	r2, r2
 801280a:	1a12      	subs	r2, r2, r0
 801280c:	445a      	add	r2, fp
 801280e:	f8de 0000 	ldr.w	r0, [lr]
 8012812:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012816:	b29b      	uxth	r3, r3
 8012818:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801281c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012820:	b292      	uxth	r2, r2
 8012822:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012826:	45e1      	cmp	r9, ip
 8012828:	f84e 2b04 	str.w	r2, [lr], #4
 801282c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012830:	d2de      	bcs.n	80127f0 <quorem+0x42>
 8012832:	9b00      	ldr	r3, [sp, #0]
 8012834:	58eb      	ldr	r3, [r5, r3]
 8012836:	b92b      	cbnz	r3, 8012844 <quorem+0x96>
 8012838:	9b01      	ldr	r3, [sp, #4]
 801283a:	3b04      	subs	r3, #4
 801283c:	429d      	cmp	r5, r3
 801283e:	461a      	mov	r2, r3
 8012840:	d32f      	bcc.n	80128a2 <quorem+0xf4>
 8012842:	613c      	str	r4, [r7, #16]
 8012844:	4638      	mov	r0, r7
 8012846:	f001 f855 	bl	80138f4 <__mcmp>
 801284a:	2800      	cmp	r0, #0
 801284c:	db25      	blt.n	801289a <quorem+0xec>
 801284e:	4629      	mov	r1, r5
 8012850:	2000      	movs	r0, #0
 8012852:	f858 2b04 	ldr.w	r2, [r8], #4
 8012856:	f8d1 c000 	ldr.w	ip, [r1]
 801285a:	fa1f fe82 	uxth.w	lr, r2
 801285e:	fa1f f38c 	uxth.w	r3, ip
 8012862:	eba3 030e 	sub.w	r3, r3, lr
 8012866:	4403      	add	r3, r0
 8012868:	0c12      	lsrs	r2, r2, #16
 801286a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801286e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012872:	b29b      	uxth	r3, r3
 8012874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012878:	45c1      	cmp	r9, r8
 801287a:	f841 3b04 	str.w	r3, [r1], #4
 801287e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012882:	d2e6      	bcs.n	8012852 <quorem+0xa4>
 8012884:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801288c:	b922      	cbnz	r2, 8012898 <quorem+0xea>
 801288e:	3b04      	subs	r3, #4
 8012890:	429d      	cmp	r5, r3
 8012892:	461a      	mov	r2, r3
 8012894:	d30b      	bcc.n	80128ae <quorem+0x100>
 8012896:	613c      	str	r4, [r7, #16]
 8012898:	3601      	adds	r6, #1
 801289a:	4630      	mov	r0, r6
 801289c:	b003      	add	sp, #12
 801289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a2:	6812      	ldr	r2, [r2, #0]
 80128a4:	3b04      	subs	r3, #4
 80128a6:	2a00      	cmp	r2, #0
 80128a8:	d1cb      	bne.n	8012842 <quorem+0x94>
 80128aa:	3c01      	subs	r4, #1
 80128ac:	e7c6      	b.n	801283c <quorem+0x8e>
 80128ae:	6812      	ldr	r2, [r2, #0]
 80128b0:	3b04      	subs	r3, #4
 80128b2:	2a00      	cmp	r2, #0
 80128b4:	d1ef      	bne.n	8012896 <quorem+0xe8>
 80128b6:	3c01      	subs	r4, #1
 80128b8:	e7ea      	b.n	8012890 <quorem+0xe2>
 80128ba:	2000      	movs	r0, #0
 80128bc:	e7ee      	b.n	801289c <quorem+0xee>
	...

080128c0 <_dtoa_r>:
 80128c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c4:	ed2d 8b02 	vpush	{d8}
 80128c8:	69c7      	ldr	r7, [r0, #28]
 80128ca:	b091      	sub	sp, #68	@ 0x44
 80128cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80128d0:	ec55 4b10 	vmov	r4, r5, d0
 80128d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80128d6:	9107      	str	r1, [sp, #28]
 80128d8:	4681      	mov	r9, r0
 80128da:	9209      	str	r2, [sp, #36]	@ 0x24
 80128dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80128de:	b97f      	cbnz	r7, 8012900 <_dtoa_r+0x40>
 80128e0:	2010      	movs	r0, #16
 80128e2:	f7ff f8b3 	bl	8011a4c <malloc>
 80128e6:	4602      	mov	r2, r0
 80128e8:	f8c9 001c 	str.w	r0, [r9, #28]
 80128ec:	b920      	cbnz	r0, 80128f8 <_dtoa_r+0x38>
 80128ee:	4ba0      	ldr	r3, [pc, #640]	@ (8012b70 <_dtoa_r+0x2b0>)
 80128f0:	21ef      	movs	r1, #239	@ 0xef
 80128f2:	48a0      	ldr	r0, [pc, #640]	@ (8012b74 <_dtoa_r+0x2b4>)
 80128f4:	f001 fb24 	bl	8013f40 <__assert_func>
 80128f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80128fc:	6007      	str	r7, [r0, #0]
 80128fe:	60c7      	str	r7, [r0, #12]
 8012900:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012904:	6819      	ldr	r1, [r3, #0]
 8012906:	b159      	cbz	r1, 8012920 <_dtoa_r+0x60>
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	604a      	str	r2, [r1, #4]
 801290c:	2301      	movs	r3, #1
 801290e:	4093      	lsls	r3, r2
 8012910:	608b      	str	r3, [r1, #8]
 8012912:	4648      	mov	r0, r9
 8012914:	f000 fdb4 	bl	8013480 <_Bfree>
 8012918:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801291c:	2200      	movs	r2, #0
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	1e2b      	subs	r3, r5, #0
 8012922:	bfbb      	ittet	lt
 8012924:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012928:	9303      	strlt	r3, [sp, #12]
 801292a:	2300      	movge	r3, #0
 801292c:	2201      	movlt	r2, #1
 801292e:	bfac      	ite	ge
 8012930:	6033      	strge	r3, [r6, #0]
 8012932:	6032      	strlt	r2, [r6, #0]
 8012934:	4b90      	ldr	r3, [pc, #576]	@ (8012b78 <_dtoa_r+0x2b8>)
 8012936:	9e03      	ldr	r6, [sp, #12]
 8012938:	43b3      	bics	r3, r6
 801293a:	d110      	bne.n	801295e <_dtoa_r+0x9e>
 801293c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801293e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012942:	6013      	str	r3, [r2, #0]
 8012944:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012948:	4323      	orrs	r3, r4
 801294a:	f000 84de 	beq.w	801330a <_dtoa_r+0xa4a>
 801294e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012950:	4f8a      	ldr	r7, [pc, #552]	@ (8012b7c <_dtoa_r+0x2bc>)
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 84e0 	beq.w	8013318 <_dtoa_r+0xa58>
 8012958:	1cfb      	adds	r3, r7, #3
 801295a:	f000 bcdb 	b.w	8013314 <_dtoa_r+0xa54>
 801295e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012962:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296a:	d10a      	bne.n	8012982 <_dtoa_r+0xc2>
 801296c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801296e:	2301      	movs	r3, #1
 8012970:	6013      	str	r3, [r2, #0]
 8012972:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012974:	b113      	cbz	r3, 801297c <_dtoa_r+0xbc>
 8012976:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012978:	4b81      	ldr	r3, [pc, #516]	@ (8012b80 <_dtoa_r+0x2c0>)
 801297a:	6013      	str	r3, [r2, #0]
 801297c:	4f81      	ldr	r7, [pc, #516]	@ (8012b84 <_dtoa_r+0x2c4>)
 801297e:	f000 bccb 	b.w	8013318 <_dtoa_r+0xa58>
 8012982:	aa0e      	add	r2, sp, #56	@ 0x38
 8012984:	a90f      	add	r1, sp, #60	@ 0x3c
 8012986:	4648      	mov	r0, r9
 8012988:	eeb0 0b48 	vmov.f64	d0, d8
 801298c:	f001 f862 	bl	8013a54 <__d2b>
 8012990:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012996:	9001      	str	r0, [sp, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d045      	beq.n	8012a28 <_dtoa_r+0x168>
 801299c:	eeb0 7b48 	vmov.f64	d7, d8
 80129a0:	ee18 1a90 	vmov	r1, s17
 80129a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80129a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80129ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80129b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80129b4:	2500      	movs	r5, #0
 80129b6:	ee07 1a90 	vmov	s15, r1
 80129ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80129be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012b58 <_dtoa_r+0x298>
 80129c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80129c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012b60 <_dtoa_r+0x2a0>
 80129ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80129ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012b68 <_dtoa_r+0x2a8>
 80129d2:	ee07 3a90 	vmov	s15, r3
 80129d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80129da:	eeb0 7b46 	vmov.f64	d7, d6
 80129de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80129e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80129e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	ee16 8a90 	vmov	r8, s13
 80129f2:	d508      	bpl.n	8012a06 <_dtoa_r+0x146>
 80129f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80129f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80129fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a00:	bf18      	it	ne
 8012a02:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012a06:	f1b8 0f16 	cmp.w	r8, #22
 8012a0a:	d82b      	bhi.n	8012a64 <_dtoa_r+0x1a4>
 8012a0c:	495e      	ldr	r1, [pc, #376]	@ (8012b88 <_dtoa_r+0x2c8>)
 8012a0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012a12:	ed91 7b00 	vldr	d7, [r1]
 8012a16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1e:	d501      	bpl.n	8012a24 <_dtoa_r+0x164>
 8012a20:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a24:	2100      	movs	r1, #0
 8012a26:	e01e      	b.n	8012a66 <_dtoa_r+0x1a6>
 8012a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a2a:	4413      	add	r3, r2
 8012a2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012a30:	2920      	cmp	r1, #32
 8012a32:	bfc1      	itttt	gt
 8012a34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012a38:	408e      	lslgt	r6, r1
 8012a3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012a3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012a42:	bfd6      	itet	le
 8012a44:	f1c1 0120 	rsble	r1, r1, #32
 8012a48:	4331      	orrgt	r1, r6
 8012a4a:	fa04 f101 	lslle.w	r1, r4, r1
 8012a4e:	ee07 1a90 	vmov	s15, r1
 8012a52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012a56:	3b01      	subs	r3, #1
 8012a58:	ee17 1a90 	vmov	r1, s15
 8012a5c:	2501      	movs	r5, #1
 8012a5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012a62:	e7a8      	b.n	80129b6 <_dtoa_r+0xf6>
 8012a64:	2101      	movs	r1, #1
 8012a66:	1ad2      	subs	r2, r2, r3
 8012a68:	1e53      	subs	r3, r2, #1
 8012a6a:	9306      	str	r3, [sp, #24]
 8012a6c:	bf45      	ittet	mi
 8012a6e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012a72:	9305      	strmi	r3, [sp, #20]
 8012a74:	2300      	movpl	r3, #0
 8012a76:	2300      	movmi	r3, #0
 8012a78:	bf4c      	ite	mi
 8012a7a:	9306      	strmi	r3, [sp, #24]
 8012a7c:	9305      	strpl	r3, [sp, #20]
 8012a7e:	f1b8 0f00 	cmp.w	r8, #0
 8012a82:	910c      	str	r1, [sp, #48]	@ 0x30
 8012a84:	db18      	blt.n	8012ab8 <_dtoa_r+0x1f8>
 8012a86:	9b06      	ldr	r3, [sp, #24]
 8012a88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012a8c:	4443      	add	r3, r8
 8012a8e:	9306      	str	r3, [sp, #24]
 8012a90:	2300      	movs	r3, #0
 8012a92:	9a07      	ldr	r2, [sp, #28]
 8012a94:	2a09      	cmp	r2, #9
 8012a96:	d849      	bhi.n	8012b2c <_dtoa_r+0x26c>
 8012a98:	2a05      	cmp	r2, #5
 8012a9a:	bfc4      	itt	gt
 8012a9c:	3a04      	subgt	r2, #4
 8012a9e:	9207      	strgt	r2, [sp, #28]
 8012aa0:	9a07      	ldr	r2, [sp, #28]
 8012aa2:	f1a2 0202 	sub.w	r2, r2, #2
 8012aa6:	bfcc      	ite	gt
 8012aa8:	2400      	movgt	r4, #0
 8012aaa:	2401      	movle	r4, #1
 8012aac:	2a03      	cmp	r2, #3
 8012aae:	d848      	bhi.n	8012b42 <_dtoa_r+0x282>
 8012ab0:	e8df f002 	tbb	[pc, r2]
 8012ab4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012ab8:	9b05      	ldr	r3, [sp, #20]
 8012aba:	2200      	movs	r2, #0
 8012abc:	eba3 0308 	sub.w	r3, r3, r8
 8012ac0:	9305      	str	r3, [sp, #20]
 8012ac2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ac4:	f1c8 0300 	rsb	r3, r8, #0
 8012ac8:	e7e3      	b.n	8012a92 <_dtoa_r+0x1d2>
 8012aca:	2200      	movs	r2, #0
 8012acc:	9208      	str	r2, [sp, #32]
 8012ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ad0:	2a00      	cmp	r2, #0
 8012ad2:	dc39      	bgt.n	8012b48 <_dtoa_r+0x288>
 8012ad4:	f04f 0b01 	mov.w	fp, #1
 8012ad8:	46da      	mov	sl, fp
 8012ada:	465a      	mov	r2, fp
 8012adc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012ae0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	2004      	movs	r0, #4
 8012ae8:	f100 0614 	add.w	r6, r0, #20
 8012aec:	4296      	cmp	r6, r2
 8012aee:	d930      	bls.n	8012b52 <_dtoa_r+0x292>
 8012af0:	6079      	str	r1, [r7, #4]
 8012af2:	4648      	mov	r0, r9
 8012af4:	9304      	str	r3, [sp, #16]
 8012af6:	f000 fc83 	bl	8013400 <_Balloc>
 8012afa:	9b04      	ldr	r3, [sp, #16]
 8012afc:	4607      	mov	r7, r0
 8012afe:	2800      	cmp	r0, #0
 8012b00:	d146      	bne.n	8012b90 <_dtoa_r+0x2d0>
 8012b02:	4b22      	ldr	r3, [pc, #136]	@ (8012b8c <_dtoa_r+0x2cc>)
 8012b04:	4602      	mov	r2, r0
 8012b06:	f240 11af 	movw	r1, #431	@ 0x1af
 8012b0a:	e6f2      	b.n	80128f2 <_dtoa_r+0x32>
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	e7dd      	b.n	8012acc <_dtoa_r+0x20c>
 8012b10:	2200      	movs	r2, #0
 8012b12:	9208      	str	r2, [sp, #32]
 8012b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b16:	eb08 0b02 	add.w	fp, r8, r2
 8012b1a:	f10b 0a01 	add.w	sl, fp, #1
 8012b1e:	4652      	mov	r2, sl
 8012b20:	2a01      	cmp	r2, #1
 8012b22:	bfb8      	it	lt
 8012b24:	2201      	movlt	r2, #1
 8012b26:	e7db      	b.n	8012ae0 <_dtoa_r+0x220>
 8012b28:	2201      	movs	r2, #1
 8012b2a:	e7f2      	b.n	8012b12 <_dtoa_r+0x252>
 8012b2c:	2401      	movs	r4, #1
 8012b2e:	2200      	movs	r2, #0
 8012b30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012b34:	f04f 3bff 	mov.w	fp, #4294967295
 8012b38:	2100      	movs	r1, #0
 8012b3a:	46da      	mov	sl, fp
 8012b3c:	2212      	movs	r2, #18
 8012b3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012b40:	e7ce      	b.n	8012ae0 <_dtoa_r+0x220>
 8012b42:	2201      	movs	r2, #1
 8012b44:	9208      	str	r2, [sp, #32]
 8012b46:	e7f5      	b.n	8012b34 <_dtoa_r+0x274>
 8012b48:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012b4c:	46da      	mov	sl, fp
 8012b4e:	465a      	mov	r2, fp
 8012b50:	e7c6      	b.n	8012ae0 <_dtoa_r+0x220>
 8012b52:	3101      	adds	r1, #1
 8012b54:	0040      	lsls	r0, r0, #1
 8012b56:	e7c7      	b.n	8012ae8 <_dtoa_r+0x228>
 8012b58:	636f4361 	.word	0x636f4361
 8012b5c:	3fd287a7 	.word	0x3fd287a7
 8012b60:	8b60c8b3 	.word	0x8b60c8b3
 8012b64:	3fc68a28 	.word	0x3fc68a28
 8012b68:	509f79fb 	.word	0x509f79fb
 8012b6c:	3fd34413 	.word	0x3fd34413
 8012b70:	08016cb5 	.word	0x08016cb5
 8012b74:	08016ccc 	.word	0x08016ccc
 8012b78:	7ff00000 	.word	0x7ff00000
 8012b7c:	08016cb1 	.word	0x08016cb1
 8012b80:	08016c85 	.word	0x08016c85
 8012b84:	08016c84 	.word	0x08016c84
 8012b88:	08016dc8 	.word	0x08016dc8
 8012b8c:	08016d24 	.word	0x08016d24
 8012b90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012b94:	f1ba 0f0e 	cmp.w	sl, #14
 8012b98:	6010      	str	r0, [r2, #0]
 8012b9a:	d86f      	bhi.n	8012c7c <_dtoa_r+0x3bc>
 8012b9c:	2c00      	cmp	r4, #0
 8012b9e:	d06d      	beq.n	8012c7c <_dtoa_r+0x3bc>
 8012ba0:	f1b8 0f00 	cmp.w	r8, #0
 8012ba4:	f340 80c2 	ble.w	8012d2c <_dtoa_r+0x46c>
 8012ba8:	4aca      	ldr	r2, [pc, #808]	@ (8012ed4 <_dtoa_r+0x614>)
 8012baa:	f008 010f 	and.w	r1, r8, #15
 8012bae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012bb2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012bb6:	ed92 7b00 	vldr	d7, [r2]
 8012bba:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012bbe:	f000 80a9 	beq.w	8012d14 <_dtoa_r+0x454>
 8012bc2:	4ac5      	ldr	r2, [pc, #788]	@ (8012ed8 <_dtoa_r+0x618>)
 8012bc4:	ed92 6b08 	vldr	d6, [r2, #32]
 8012bc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012bcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012bd0:	f001 010f 	and.w	r1, r1, #15
 8012bd4:	2203      	movs	r2, #3
 8012bd6:	48c0      	ldr	r0, [pc, #768]	@ (8012ed8 <_dtoa_r+0x618>)
 8012bd8:	2900      	cmp	r1, #0
 8012bda:	f040 809d 	bne.w	8012d18 <_dtoa_r+0x458>
 8012bde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012be2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012be6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012bea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012bec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012bf0:	2900      	cmp	r1, #0
 8012bf2:	f000 80c1 	beq.w	8012d78 <_dtoa_r+0x4b8>
 8012bf6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012bfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c02:	f140 80b9 	bpl.w	8012d78 <_dtoa_r+0x4b8>
 8012c06:	f1ba 0f00 	cmp.w	sl, #0
 8012c0a:	f000 80b5 	beq.w	8012d78 <_dtoa_r+0x4b8>
 8012c0e:	f1bb 0f00 	cmp.w	fp, #0
 8012c12:	dd31      	ble.n	8012c78 <_dtoa_r+0x3b8>
 8012c14:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012c18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c20:	f108 31ff 	add.w	r1, r8, #4294967295
 8012c24:	9104      	str	r1, [sp, #16]
 8012c26:	3201      	adds	r2, #1
 8012c28:	465c      	mov	r4, fp
 8012c2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c2e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012c32:	ee07 2a90 	vmov	s15, r2
 8012c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012c3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012c3e:	ee15 2a90 	vmov	r2, s11
 8012c42:	ec51 0b15 	vmov	r0, r1, d5
 8012c46:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012c4a:	2c00      	cmp	r4, #0
 8012c4c:	f040 8098 	bne.w	8012d80 <_dtoa_r+0x4c0>
 8012c50:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012c54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012c58:	ec41 0b17 	vmov	d7, r0, r1
 8012c5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c64:	f300 8261 	bgt.w	801312a <_dtoa_r+0x86a>
 8012c68:	eeb1 7b47 	vneg.f64	d7, d7
 8012c6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c74:	f100 80f5 	bmi.w	8012e62 <_dtoa_r+0x5a2>
 8012c78:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012c7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012c7e:	2a00      	cmp	r2, #0
 8012c80:	f2c0 812c 	blt.w	8012edc <_dtoa_r+0x61c>
 8012c84:	f1b8 0f0e 	cmp.w	r8, #14
 8012c88:	f300 8128 	bgt.w	8012edc <_dtoa_r+0x61c>
 8012c8c:	4b91      	ldr	r3, [pc, #580]	@ (8012ed4 <_dtoa_r+0x614>)
 8012c8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012c92:	ed93 6b00 	vldr	d6, [r3]
 8012c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	da03      	bge.n	8012ca4 <_dtoa_r+0x3e4>
 8012c9c:	f1ba 0f00 	cmp.w	sl, #0
 8012ca0:	f340 80d2 	ble.w	8012e48 <_dtoa_r+0x588>
 8012ca4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012ca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cac:	463e      	mov	r6, r7
 8012cae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012cb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012cb6:	ee15 3a10 	vmov	r3, s10
 8012cba:	3330      	adds	r3, #48	@ 0x30
 8012cbc:	f806 3b01 	strb.w	r3, [r6], #1
 8012cc0:	1bf3      	subs	r3, r6, r7
 8012cc2:	459a      	cmp	sl, r3
 8012cc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012cc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012ccc:	f040 80f8 	bne.w	8012ec0 <_dtoa_r+0x600>
 8012cd0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012cd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cdc:	f300 80dd 	bgt.w	8012e9a <_dtoa_r+0x5da>
 8012ce0:	eeb4 7b46 	vcmp.f64	d7, d6
 8012ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce8:	d104      	bne.n	8012cf4 <_dtoa_r+0x434>
 8012cea:	ee15 3a10 	vmov	r3, s10
 8012cee:	07db      	lsls	r3, r3, #31
 8012cf0:	f100 80d3 	bmi.w	8012e9a <_dtoa_r+0x5da>
 8012cf4:	9901      	ldr	r1, [sp, #4]
 8012cf6:	4648      	mov	r0, r9
 8012cf8:	f000 fbc2 	bl	8013480 <_Bfree>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d00:	7033      	strb	r3, [r6, #0]
 8012d02:	f108 0301 	add.w	r3, r8, #1
 8012d06:	6013      	str	r3, [r2, #0]
 8012d08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	f000 8304 	beq.w	8013318 <_dtoa_r+0xa58>
 8012d10:	601e      	str	r6, [r3, #0]
 8012d12:	e301      	b.n	8013318 <_dtoa_r+0xa58>
 8012d14:	2202      	movs	r2, #2
 8012d16:	e75e      	b.n	8012bd6 <_dtoa_r+0x316>
 8012d18:	07cc      	lsls	r4, r1, #31
 8012d1a:	d504      	bpl.n	8012d26 <_dtoa_r+0x466>
 8012d1c:	ed90 6b00 	vldr	d6, [r0]
 8012d20:	3201      	adds	r2, #1
 8012d22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d26:	1049      	asrs	r1, r1, #1
 8012d28:	3008      	adds	r0, #8
 8012d2a:	e755      	b.n	8012bd8 <_dtoa_r+0x318>
 8012d2c:	d022      	beq.n	8012d74 <_dtoa_r+0x4b4>
 8012d2e:	f1c8 0100 	rsb	r1, r8, #0
 8012d32:	4a68      	ldr	r2, [pc, #416]	@ (8012ed4 <_dtoa_r+0x614>)
 8012d34:	f001 000f 	and.w	r0, r1, #15
 8012d38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012d3c:	ed92 7b00 	vldr	d7, [r2]
 8012d40:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d48:	4863      	ldr	r0, [pc, #396]	@ (8012ed8 <_dtoa_r+0x618>)
 8012d4a:	1109      	asrs	r1, r1, #4
 8012d4c:	2400      	movs	r4, #0
 8012d4e:	2202      	movs	r2, #2
 8012d50:	b929      	cbnz	r1, 8012d5e <_dtoa_r+0x49e>
 8012d52:	2c00      	cmp	r4, #0
 8012d54:	f43f af49 	beq.w	8012bea <_dtoa_r+0x32a>
 8012d58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d5c:	e745      	b.n	8012bea <_dtoa_r+0x32a>
 8012d5e:	07ce      	lsls	r6, r1, #31
 8012d60:	d505      	bpl.n	8012d6e <_dtoa_r+0x4ae>
 8012d62:	ed90 6b00 	vldr	d6, [r0]
 8012d66:	3201      	adds	r2, #1
 8012d68:	2401      	movs	r4, #1
 8012d6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d6e:	1049      	asrs	r1, r1, #1
 8012d70:	3008      	adds	r0, #8
 8012d72:	e7ed      	b.n	8012d50 <_dtoa_r+0x490>
 8012d74:	2202      	movs	r2, #2
 8012d76:	e738      	b.n	8012bea <_dtoa_r+0x32a>
 8012d78:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d7c:	4654      	mov	r4, sl
 8012d7e:	e754      	b.n	8012c2a <_dtoa_r+0x36a>
 8012d80:	4a54      	ldr	r2, [pc, #336]	@ (8012ed4 <_dtoa_r+0x614>)
 8012d82:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012d86:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012d8a:	9a08      	ldr	r2, [sp, #32]
 8012d8c:	ec41 0b17 	vmov	d7, r0, r1
 8012d90:	443c      	add	r4, r7
 8012d92:	b34a      	cbz	r2, 8012de8 <_dtoa_r+0x528>
 8012d94:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012d98:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012d9c:	463e      	mov	r6, r7
 8012d9e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012da2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012da6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012daa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012dae:	ee14 2a90 	vmov	r2, s9
 8012db2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012db6:	3230      	adds	r2, #48	@ 0x30
 8012db8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012dbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc4:	f806 2b01 	strb.w	r2, [r6], #1
 8012dc8:	d438      	bmi.n	8012e3c <_dtoa_r+0x57c>
 8012dca:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012dce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd6:	d462      	bmi.n	8012e9e <_dtoa_r+0x5de>
 8012dd8:	42a6      	cmp	r6, r4
 8012dda:	f43f af4d 	beq.w	8012c78 <_dtoa_r+0x3b8>
 8012dde:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012de2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012de6:	e7e0      	b.n	8012daa <_dtoa_r+0x4ea>
 8012de8:	4621      	mov	r1, r4
 8012dea:	463e      	mov	r6, r7
 8012dec:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012df0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012df4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012df8:	ee14 2a90 	vmov	r2, s9
 8012dfc:	3230      	adds	r2, #48	@ 0x30
 8012dfe:	f806 2b01 	strb.w	r2, [r6], #1
 8012e02:	42a6      	cmp	r6, r4
 8012e04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012e08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012e0c:	d119      	bne.n	8012e42 <_dtoa_r+0x582>
 8012e0e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012e12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012e16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1e:	dc3e      	bgt.n	8012e9e <_dtoa_r+0x5de>
 8012e20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012e24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e2c:	f57f af24 	bpl.w	8012c78 <_dtoa_r+0x3b8>
 8012e30:	460e      	mov	r6, r1
 8012e32:	3901      	subs	r1, #1
 8012e34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e38:	2b30      	cmp	r3, #48	@ 0x30
 8012e3a:	d0f9      	beq.n	8012e30 <_dtoa_r+0x570>
 8012e3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012e40:	e758      	b.n	8012cf4 <_dtoa_r+0x434>
 8012e42:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012e46:	e7d5      	b.n	8012df4 <_dtoa_r+0x534>
 8012e48:	d10b      	bne.n	8012e62 <_dtoa_r+0x5a2>
 8012e4a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012e4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012e52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e5e:	f2c0 8161 	blt.w	8013124 <_dtoa_r+0x864>
 8012e62:	2400      	movs	r4, #0
 8012e64:	4625      	mov	r5, r4
 8012e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e68:	43db      	mvns	r3, r3
 8012e6a:	9304      	str	r3, [sp, #16]
 8012e6c:	463e      	mov	r6, r7
 8012e6e:	f04f 0800 	mov.w	r8, #0
 8012e72:	4621      	mov	r1, r4
 8012e74:	4648      	mov	r0, r9
 8012e76:	f000 fb03 	bl	8013480 <_Bfree>
 8012e7a:	2d00      	cmp	r5, #0
 8012e7c:	d0de      	beq.n	8012e3c <_dtoa_r+0x57c>
 8012e7e:	f1b8 0f00 	cmp.w	r8, #0
 8012e82:	d005      	beq.n	8012e90 <_dtoa_r+0x5d0>
 8012e84:	45a8      	cmp	r8, r5
 8012e86:	d003      	beq.n	8012e90 <_dtoa_r+0x5d0>
 8012e88:	4641      	mov	r1, r8
 8012e8a:	4648      	mov	r0, r9
 8012e8c:	f000 faf8 	bl	8013480 <_Bfree>
 8012e90:	4629      	mov	r1, r5
 8012e92:	4648      	mov	r0, r9
 8012e94:	f000 faf4 	bl	8013480 <_Bfree>
 8012e98:	e7d0      	b.n	8012e3c <_dtoa_r+0x57c>
 8012e9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012e9e:	4633      	mov	r3, r6
 8012ea0:	461e      	mov	r6, r3
 8012ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ea6:	2a39      	cmp	r2, #57	@ 0x39
 8012ea8:	d106      	bne.n	8012eb8 <_dtoa_r+0x5f8>
 8012eaa:	429f      	cmp	r7, r3
 8012eac:	d1f8      	bne.n	8012ea0 <_dtoa_r+0x5e0>
 8012eae:	9a04      	ldr	r2, [sp, #16]
 8012eb0:	3201      	adds	r2, #1
 8012eb2:	9204      	str	r2, [sp, #16]
 8012eb4:	2230      	movs	r2, #48	@ 0x30
 8012eb6:	703a      	strb	r2, [r7, #0]
 8012eb8:	781a      	ldrb	r2, [r3, #0]
 8012eba:	3201      	adds	r2, #1
 8012ebc:	701a      	strb	r2, [r3, #0]
 8012ebe:	e7bd      	b.n	8012e3c <_dtoa_r+0x57c>
 8012ec0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012ec4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ecc:	f47f aeef 	bne.w	8012cae <_dtoa_r+0x3ee>
 8012ed0:	e710      	b.n	8012cf4 <_dtoa_r+0x434>
 8012ed2:	bf00      	nop
 8012ed4:	08016dc8 	.word	0x08016dc8
 8012ed8:	08016da0 	.word	0x08016da0
 8012edc:	9908      	ldr	r1, [sp, #32]
 8012ede:	2900      	cmp	r1, #0
 8012ee0:	f000 80e3 	beq.w	80130aa <_dtoa_r+0x7ea>
 8012ee4:	9907      	ldr	r1, [sp, #28]
 8012ee6:	2901      	cmp	r1, #1
 8012ee8:	f300 80c8 	bgt.w	801307c <_dtoa_r+0x7bc>
 8012eec:	2d00      	cmp	r5, #0
 8012eee:	f000 80c1 	beq.w	8013074 <_dtoa_r+0x7b4>
 8012ef2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012ef6:	9e05      	ldr	r6, [sp, #20]
 8012ef8:	461c      	mov	r4, r3
 8012efa:	9304      	str	r3, [sp, #16]
 8012efc:	9b05      	ldr	r3, [sp, #20]
 8012efe:	4413      	add	r3, r2
 8012f00:	9305      	str	r3, [sp, #20]
 8012f02:	9b06      	ldr	r3, [sp, #24]
 8012f04:	2101      	movs	r1, #1
 8012f06:	4413      	add	r3, r2
 8012f08:	4648      	mov	r0, r9
 8012f0a:	9306      	str	r3, [sp, #24]
 8012f0c:	f000 fb6c 	bl	80135e8 <__i2b>
 8012f10:	9b04      	ldr	r3, [sp, #16]
 8012f12:	4605      	mov	r5, r0
 8012f14:	b166      	cbz	r6, 8012f30 <_dtoa_r+0x670>
 8012f16:	9a06      	ldr	r2, [sp, #24]
 8012f18:	2a00      	cmp	r2, #0
 8012f1a:	dd09      	ble.n	8012f30 <_dtoa_r+0x670>
 8012f1c:	42b2      	cmp	r2, r6
 8012f1e:	9905      	ldr	r1, [sp, #20]
 8012f20:	bfa8      	it	ge
 8012f22:	4632      	movge	r2, r6
 8012f24:	1a89      	subs	r1, r1, r2
 8012f26:	9105      	str	r1, [sp, #20]
 8012f28:	9906      	ldr	r1, [sp, #24]
 8012f2a:	1ab6      	subs	r6, r6, r2
 8012f2c:	1a8a      	subs	r2, r1, r2
 8012f2e:	9206      	str	r2, [sp, #24]
 8012f30:	b1fb      	cbz	r3, 8012f72 <_dtoa_r+0x6b2>
 8012f32:	9a08      	ldr	r2, [sp, #32]
 8012f34:	2a00      	cmp	r2, #0
 8012f36:	f000 80bc 	beq.w	80130b2 <_dtoa_r+0x7f2>
 8012f3a:	b19c      	cbz	r4, 8012f64 <_dtoa_r+0x6a4>
 8012f3c:	4629      	mov	r1, r5
 8012f3e:	4622      	mov	r2, r4
 8012f40:	4648      	mov	r0, r9
 8012f42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f44:	f000 fc10 	bl	8013768 <__pow5mult>
 8012f48:	9a01      	ldr	r2, [sp, #4]
 8012f4a:	4601      	mov	r1, r0
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	4648      	mov	r0, r9
 8012f50:	f000 fb60 	bl	8013614 <__multiply>
 8012f54:	9901      	ldr	r1, [sp, #4]
 8012f56:	9004      	str	r0, [sp, #16]
 8012f58:	4648      	mov	r0, r9
 8012f5a:	f000 fa91 	bl	8013480 <_Bfree>
 8012f5e:	9a04      	ldr	r2, [sp, #16]
 8012f60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f62:	9201      	str	r2, [sp, #4]
 8012f64:	1b1a      	subs	r2, r3, r4
 8012f66:	d004      	beq.n	8012f72 <_dtoa_r+0x6b2>
 8012f68:	9901      	ldr	r1, [sp, #4]
 8012f6a:	4648      	mov	r0, r9
 8012f6c:	f000 fbfc 	bl	8013768 <__pow5mult>
 8012f70:	9001      	str	r0, [sp, #4]
 8012f72:	2101      	movs	r1, #1
 8012f74:	4648      	mov	r0, r9
 8012f76:	f000 fb37 	bl	80135e8 <__i2b>
 8012f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	f000 81d0 	beq.w	8013324 <_dtoa_r+0xa64>
 8012f84:	461a      	mov	r2, r3
 8012f86:	4601      	mov	r1, r0
 8012f88:	4648      	mov	r0, r9
 8012f8a:	f000 fbed 	bl	8013768 <__pow5mult>
 8012f8e:	9b07      	ldr	r3, [sp, #28]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	4604      	mov	r4, r0
 8012f94:	f300 8095 	bgt.w	80130c2 <_dtoa_r+0x802>
 8012f98:	9b02      	ldr	r3, [sp, #8]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	f040 808b 	bne.w	80130b6 <_dtoa_r+0x7f6>
 8012fa0:	9b03      	ldr	r3, [sp, #12]
 8012fa2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012fa6:	2a00      	cmp	r2, #0
 8012fa8:	f040 8087 	bne.w	80130ba <_dtoa_r+0x7fa>
 8012fac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012fb0:	0d12      	lsrs	r2, r2, #20
 8012fb2:	0512      	lsls	r2, r2, #20
 8012fb4:	2a00      	cmp	r2, #0
 8012fb6:	f000 8082 	beq.w	80130be <_dtoa_r+0x7fe>
 8012fba:	9b05      	ldr	r3, [sp, #20]
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	9305      	str	r3, [sp, #20]
 8012fc0:	9b06      	ldr	r3, [sp, #24]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	9306      	str	r3, [sp, #24]
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f000 81af 	beq.w	8013330 <_dtoa_r+0xa70>
 8012fd2:	6922      	ldr	r2, [r4, #16]
 8012fd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012fd8:	6910      	ldr	r0, [r2, #16]
 8012fda:	f000 fab9 	bl	8013550 <__hi0bits>
 8012fde:	f1c0 0020 	rsb	r0, r0, #32
 8012fe2:	9b06      	ldr	r3, [sp, #24]
 8012fe4:	4418      	add	r0, r3
 8012fe6:	f010 001f 	ands.w	r0, r0, #31
 8012fea:	d076      	beq.n	80130da <_dtoa_r+0x81a>
 8012fec:	f1c0 0220 	rsb	r2, r0, #32
 8012ff0:	2a04      	cmp	r2, #4
 8012ff2:	dd69      	ble.n	80130c8 <_dtoa_r+0x808>
 8012ff4:	9b05      	ldr	r3, [sp, #20]
 8012ff6:	f1c0 001c 	rsb	r0, r0, #28
 8012ffa:	4403      	add	r3, r0
 8012ffc:	9305      	str	r3, [sp, #20]
 8012ffe:	9b06      	ldr	r3, [sp, #24]
 8013000:	4406      	add	r6, r0
 8013002:	4403      	add	r3, r0
 8013004:	9306      	str	r3, [sp, #24]
 8013006:	9b05      	ldr	r3, [sp, #20]
 8013008:	2b00      	cmp	r3, #0
 801300a:	dd05      	ble.n	8013018 <_dtoa_r+0x758>
 801300c:	9901      	ldr	r1, [sp, #4]
 801300e:	461a      	mov	r2, r3
 8013010:	4648      	mov	r0, r9
 8013012:	f000 fc03 	bl	801381c <__lshift>
 8013016:	9001      	str	r0, [sp, #4]
 8013018:	9b06      	ldr	r3, [sp, #24]
 801301a:	2b00      	cmp	r3, #0
 801301c:	dd05      	ble.n	801302a <_dtoa_r+0x76a>
 801301e:	4621      	mov	r1, r4
 8013020:	461a      	mov	r2, r3
 8013022:	4648      	mov	r0, r9
 8013024:	f000 fbfa 	bl	801381c <__lshift>
 8013028:	4604      	mov	r4, r0
 801302a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801302c:	2b00      	cmp	r3, #0
 801302e:	d056      	beq.n	80130de <_dtoa_r+0x81e>
 8013030:	9801      	ldr	r0, [sp, #4]
 8013032:	4621      	mov	r1, r4
 8013034:	f000 fc5e 	bl	80138f4 <__mcmp>
 8013038:	2800      	cmp	r0, #0
 801303a:	da50      	bge.n	80130de <_dtoa_r+0x81e>
 801303c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013040:	9304      	str	r3, [sp, #16]
 8013042:	9901      	ldr	r1, [sp, #4]
 8013044:	2300      	movs	r3, #0
 8013046:	220a      	movs	r2, #10
 8013048:	4648      	mov	r0, r9
 801304a:	f000 fa3b 	bl	80134c4 <__multadd>
 801304e:	9b08      	ldr	r3, [sp, #32]
 8013050:	9001      	str	r0, [sp, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 816e 	beq.w	8013334 <_dtoa_r+0xa74>
 8013058:	4629      	mov	r1, r5
 801305a:	2300      	movs	r3, #0
 801305c:	220a      	movs	r2, #10
 801305e:	4648      	mov	r0, r9
 8013060:	f000 fa30 	bl	80134c4 <__multadd>
 8013064:	f1bb 0f00 	cmp.w	fp, #0
 8013068:	4605      	mov	r5, r0
 801306a:	dc64      	bgt.n	8013136 <_dtoa_r+0x876>
 801306c:	9b07      	ldr	r3, [sp, #28]
 801306e:	2b02      	cmp	r3, #2
 8013070:	dc3e      	bgt.n	80130f0 <_dtoa_r+0x830>
 8013072:	e060      	b.n	8013136 <_dtoa_r+0x876>
 8013074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013076:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801307a:	e73c      	b.n	8012ef6 <_dtoa_r+0x636>
 801307c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013080:	42a3      	cmp	r3, r4
 8013082:	bfbf      	itttt	lt
 8013084:	1ae2      	sublt	r2, r4, r3
 8013086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013088:	189b      	addlt	r3, r3, r2
 801308a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801308c:	bfae      	itee	ge
 801308e:	1b1c      	subge	r4, r3, r4
 8013090:	4623      	movlt	r3, r4
 8013092:	2400      	movlt	r4, #0
 8013094:	f1ba 0f00 	cmp.w	sl, #0
 8013098:	bfb5      	itete	lt
 801309a:	9a05      	ldrlt	r2, [sp, #20]
 801309c:	9e05      	ldrge	r6, [sp, #20]
 801309e:	eba2 060a 	sublt.w	r6, r2, sl
 80130a2:	4652      	movge	r2, sl
 80130a4:	bfb8      	it	lt
 80130a6:	2200      	movlt	r2, #0
 80130a8:	e727      	b.n	8012efa <_dtoa_r+0x63a>
 80130aa:	9e05      	ldr	r6, [sp, #20]
 80130ac:	9d08      	ldr	r5, [sp, #32]
 80130ae:	461c      	mov	r4, r3
 80130b0:	e730      	b.n	8012f14 <_dtoa_r+0x654>
 80130b2:	461a      	mov	r2, r3
 80130b4:	e758      	b.n	8012f68 <_dtoa_r+0x6a8>
 80130b6:	2300      	movs	r3, #0
 80130b8:	e786      	b.n	8012fc8 <_dtoa_r+0x708>
 80130ba:	9b02      	ldr	r3, [sp, #8]
 80130bc:	e784      	b.n	8012fc8 <_dtoa_r+0x708>
 80130be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80130c0:	e783      	b.n	8012fca <_dtoa_r+0x70a>
 80130c2:	2300      	movs	r3, #0
 80130c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130c6:	e784      	b.n	8012fd2 <_dtoa_r+0x712>
 80130c8:	d09d      	beq.n	8013006 <_dtoa_r+0x746>
 80130ca:	9b05      	ldr	r3, [sp, #20]
 80130cc:	321c      	adds	r2, #28
 80130ce:	4413      	add	r3, r2
 80130d0:	9305      	str	r3, [sp, #20]
 80130d2:	9b06      	ldr	r3, [sp, #24]
 80130d4:	4416      	add	r6, r2
 80130d6:	4413      	add	r3, r2
 80130d8:	e794      	b.n	8013004 <_dtoa_r+0x744>
 80130da:	4602      	mov	r2, r0
 80130dc:	e7f5      	b.n	80130ca <_dtoa_r+0x80a>
 80130de:	f1ba 0f00 	cmp.w	sl, #0
 80130e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80130e6:	46d3      	mov	fp, sl
 80130e8:	dc21      	bgt.n	801312e <_dtoa_r+0x86e>
 80130ea:	9b07      	ldr	r3, [sp, #28]
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	dd1e      	ble.n	801312e <_dtoa_r+0x86e>
 80130f0:	f1bb 0f00 	cmp.w	fp, #0
 80130f4:	f47f aeb7 	bne.w	8012e66 <_dtoa_r+0x5a6>
 80130f8:	4621      	mov	r1, r4
 80130fa:	465b      	mov	r3, fp
 80130fc:	2205      	movs	r2, #5
 80130fe:	4648      	mov	r0, r9
 8013100:	f000 f9e0 	bl	80134c4 <__multadd>
 8013104:	4601      	mov	r1, r0
 8013106:	4604      	mov	r4, r0
 8013108:	9801      	ldr	r0, [sp, #4]
 801310a:	f000 fbf3 	bl	80138f4 <__mcmp>
 801310e:	2800      	cmp	r0, #0
 8013110:	f77f aea9 	ble.w	8012e66 <_dtoa_r+0x5a6>
 8013114:	463e      	mov	r6, r7
 8013116:	2331      	movs	r3, #49	@ 0x31
 8013118:	f806 3b01 	strb.w	r3, [r6], #1
 801311c:	9b04      	ldr	r3, [sp, #16]
 801311e:	3301      	adds	r3, #1
 8013120:	9304      	str	r3, [sp, #16]
 8013122:	e6a4      	b.n	8012e6e <_dtoa_r+0x5ae>
 8013124:	f8cd 8010 	str.w	r8, [sp, #16]
 8013128:	4654      	mov	r4, sl
 801312a:	4625      	mov	r5, r4
 801312c:	e7f2      	b.n	8013114 <_dtoa_r+0x854>
 801312e:	9b08      	ldr	r3, [sp, #32]
 8013130:	2b00      	cmp	r3, #0
 8013132:	f000 8103 	beq.w	801333c <_dtoa_r+0xa7c>
 8013136:	2e00      	cmp	r6, #0
 8013138:	dd05      	ble.n	8013146 <_dtoa_r+0x886>
 801313a:	4629      	mov	r1, r5
 801313c:	4632      	mov	r2, r6
 801313e:	4648      	mov	r0, r9
 8013140:	f000 fb6c 	bl	801381c <__lshift>
 8013144:	4605      	mov	r5, r0
 8013146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013148:	2b00      	cmp	r3, #0
 801314a:	d058      	beq.n	80131fe <_dtoa_r+0x93e>
 801314c:	6869      	ldr	r1, [r5, #4]
 801314e:	4648      	mov	r0, r9
 8013150:	f000 f956 	bl	8013400 <_Balloc>
 8013154:	4606      	mov	r6, r0
 8013156:	b928      	cbnz	r0, 8013164 <_dtoa_r+0x8a4>
 8013158:	4b82      	ldr	r3, [pc, #520]	@ (8013364 <_dtoa_r+0xaa4>)
 801315a:	4602      	mov	r2, r0
 801315c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013160:	f7ff bbc7 	b.w	80128f2 <_dtoa_r+0x32>
 8013164:	692a      	ldr	r2, [r5, #16]
 8013166:	3202      	adds	r2, #2
 8013168:	0092      	lsls	r2, r2, #2
 801316a:	f105 010c 	add.w	r1, r5, #12
 801316e:	300c      	adds	r0, #12
 8013170:	f7ff fb0f 	bl	8012792 <memcpy>
 8013174:	2201      	movs	r2, #1
 8013176:	4631      	mov	r1, r6
 8013178:	4648      	mov	r0, r9
 801317a:	f000 fb4f 	bl	801381c <__lshift>
 801317e:	1c7b      	adds	r3, r7, #1
 8013180:	9305      	str	r3, [sp, #20]
 8013182:	eb07 030b 	add.w	r3, r7, fp
 8013186:	9309      	str	r3, [sp, #36]	@ 0x24
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	f003 0301 	and.w	r3, r3, #1
 801318e:	46a8      	mov	r8, r5
 8013190:	9308      	str	r3, [sp, #32]
 8013192:	4605      	mov	r5, r0
 8013194:	9b05      	ldr	r3, [sp, #20]
 8013196:	9801      	ldr	r0, [sp, #4]
 8013198:	4621      	mov	r1, r4
 801319a:	f103 3bff 	add.w	fp, r3, #4294967295
 801319e:	f7ff fb06 	bl	80127ae <quorem>
 80131a2:	4641      	mov	r1, r8
 80131a4:	9002      	str	r0, [sp, #8]
 80131a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80131aa:	9801      	ldr	r0, [sp, #4]
 80131ac:	f000 fba2 	bl	80138f4 <__mcmp>
 80131b0:	462a      	mov	r2, r5
 80131b2:	9006      	str	r0, [sp, #24]
 80131b4:	4621      	mov	r1, r4
 80131b6:	4648      	mov	r0, r9
 80131b8:	f000 fbb8 	bl	801392c <__mdiff>
 80131bc:	68c2      	ldr	r2, [r0, #12]
 80131be:	4606      	mov	r6, r0
 80131c0:	b9fa      	cbnz	r2, 8013202 <_dtoa_r+0x942>
 80131c2:	4601      	mov	r1, r0
 80131c4:	9801      	ldr	r0, [sp, #4]
 80131c6:	f000 fb95 	bl	80138f4 <__mcmp>
 80131ca:	4602      	mov	r2, r0
 80131cc:	4631      	mov	r1, r6
 80131ce:	4648      	mov	r0, r9
 80131d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80131d2:	f000 f955 	bl	8013480 <_Bfree>
 80131d6:	9b07      	ldr	r3, [sp, #28]
 80131d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80131da:	9e05      	ldr	r6, [sp, #20]
 80131dc:	ea43 0102 	orr.w	r1, r3, r2
 80131e0:	9b08      	ldr	r3, [sp, #32]
 80131e2:	4319      	orrs	r1, r3
 80131e4:	d10f      	bne.n	8013206 <_dtoa_r+0x946>
 80131e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80131ea:	d028      	beq.n	801323e <_dtoa_r+0x97e>
 80131ec:	9b06      	ldr	r3, [sp, #24]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	dd02      	ble.n	80131f8 <_dtoa_r+0x938>
 80131f2:	9b02      	ldr	r3, [sp, #8]
 80131f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80131f8:	f88b a000 	strb.w	sl, [fp]
 80131fc:	e639      	b.n	8012e72 <_dtoa_r+0x5b2>
 80131fe:	4628      	mov	r0, r5
 8013200:	e7bd      	b.n	801317e <_dtoa_r+0x8be>
 8013202:	2201      	movs	r2, #1
 8013204:	e7e2      	b.n	80131cc <_dtoa_r+0x90c>
 8013206:	9b06      	ldr	r3, [sp, #24]
 8013208:	2b00      	cmp	r3, #0
 801320a:	db04      	blt.n	8013216 <_dtoa_r+0x956>
 801320c:	9907      	ldr	r1, [sp, #28]
 801320e:	430b      	orrs	r3, r1
 8013210:	9908      	ldr	r1, [sp, #32]
 8013212:	430b      	orrs	r3, r1
 8013214:	d120      	bne.n	8013258 <_dtoa_r+0x998>
 8013216:	2a00      	cmp	r2, #0
 8013218:	ddee      	ble.n	80131f8 <_dtoa_r+0x938>
 801321a:	9901      	ldr	r1, [sp, #4]
 801321c:	2201      	movs	r2, #1
 801321e:	4648      	mov	r0, r9
 8013220:	f000 fafc 	bl	801381c <__lshift>
 8013224:	4621      	mov	r1, r4
 8013226:	9001      	str	r0, [sp, #4]
 8013228:	f000 fb64 	bl	80138f4 <__mcmp>
 801322c:	2800      	cmp	r0, #0
 801322e:	dc03      	bgt.n	8013238 <_dtoa_r+0x978>
 8013230:	d1e2      	bne.n	80131f8 <_dtoa_r+0x938>
 8013232:	f01a 0f01 	tst.w	sl, #1
 8013236:	d0df      	beq.n	80131f8 <_dtoa_r+0x938>
 8013238:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801323c:	d1d9      	bne.n	80131f2 <_dtoa_r+0x932>
 801323e:	2339      	movs	r3, #57	@ 0x39
 8013240:	f88b 3000 	strb.w	r3, [fp]
 8013244:	4633      	mov	r3, r6
 8013246:	461e      	mov	r6, r3
 8013248:	3b01      	subs	r3, #1
 801324a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801324e:	2a39      	cmp	r2, #57	@ 0x39
 8013250:	d053      	beq.n	80132fa <_dtoa_r+0xa3a>
 8013252:	3201      	adds	r2, #1
 8013254:	701a      	strb	r2, [r3, #0]
 8013256:	e60c      	b.n	8012e72 <_dtoa_r+0x5b2>
 8013258:	2a00      	cmp	r2, #0
 801325a:	dd07      	ble.n	801326c <_dtoa_r+0x9ac>
 801325c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013260:	d0ed      	beq.n	801323e <_dtoa_r+0x97e>
 8013262:	f10a 0301 	add.w	r3, sl, #1
 8013266:	f88b 3000 	strb.w	r3, [fp]
 801326a:	e602      	b.n	8012e72 <_dtoa_r+0x5b2>
 801326c:	9b05      	ldr	r3, [sp, #20]
 801326e:	9a05      	ldr	r2, [sp, #20]
 8013270:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013276:	4293      	cmp	r3, r2
 8013278:	d029      	beq.n	80132ce <_dtoa_r+0xa0e>
 801327a:	9901      	ldr	r1, [sp, #4]
 801327c:	2300      	movs	r3, #0
 801327e:	220a      	movs	r2, #10
 8013280:	4648      	mov	r0, r9
 8013282:	f000 f91f 	bl	80134c4 <__multadd>
 8013286:	45a8      	cmp	r8, r5
 8013288:	9001      	str	r0, [sp, #4]
 801328a:	f04f 0300 	mov.w	r3, #0
 801328e:	f04f 020a 	mov.w	r2, #10
 8013292:	4641      	mov	r1, r8
 8013294:	4648      	mov	r0, r9
 8013296:	d107      	bne.n	80132a8 <_dtoa_r+0x9e8>
 8013298:	f000 f914 	bl	80134c4 <__multadd>
 801329c:	4680      	mov	r8, r0
 801329e:	4605      	mov	r5, r0
 80132a0:	9b05      	ldr	r3, [sp, #20]
 80132a2:	3301      	adds	r3, #1
 80132a4:	9305      	str	r3, [sp, #20]
 80132a6:	e775      	b.n	8013194 <_dtoa_r+0x8d4>
 80132a8:	f000 f90c 	bl	80134c4 <__multadd>
 80132ac:	4629      	mov	r1, r5
 80132ae:	4680      	mov	r8, r0
 80132b0:	2300      	movs	r3, #0
 80132b2:	220a      	movs	r2, #10
 80132b4:	4648      	mov	r0, r9
 80132b6:	f000 f905 	bl	80134c4 <__multadd>
 80132ba:	4605      	mov	r5, r0
 80132bc:	e7f0      	b.n	80132a0 <_dtoa_r+0x9e0>
 80132be:	f1bb 0f00 	cmp.w	fp, #0
 80132c2:	bfcc      	ite	gt
 80132c4:	465e      	movgt	r6, fp
 80132c6:	2601      	movle	r6, #1
 80132c8:	443e      	add	r6, r7
 80132ca:	f04f 0800 	mov.w	r8, #0
 80132ce:	9901      	ldr	r1, [sp, #4]
 80132d0:	2201      	movs	r2, #1
 80132d2:	4648      	mov	r0, r9
 80132d4:	f000 faa2 	bl	801381c <__lshift>
 80132d8:	4621      	mov	r1, r4
 80132da:	9001      	str	r0, [sp, #4]
 80132dc:	f000 fb0a 	bl	80138f4 <__mcmp>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	dcaf      	bgt.n	8013244 <_dtoa_r+0x984>
 80132e4:	d102      	bne.n	80132ec <_dtoa_r+0xa2c>
 80132e6:	f01a 0f01 	tst.w	sl, #1
 80132ea:	d1ab      	bne.n	8013244 <_dtoa_r+0x984>
 80132ec:	4633      	mov	r3, r6
 80132ee:	461e      	mov	r6, r3
 80132f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132f4:	2a30      	cmp	r2, #48	@ 0x30
 80132f6:	d0fa      	beq.n	80132ee <_dtoa_r+0xa2e>
 80132f8:	e5bb      	b.n	8012e72 <_dtoa_r+0x5b2>
 80132fa:	429f      	cmp	r7, r3
 80132fc:	d1a3      	bne.n	8013246 <_dtoa_r+0x986>
 80132fe:	9b04      	ldr	r3, [sp, #16]
 8013300:	3301      	adds	r3, #1
 8013302:	9304      	str	r3, [sp, #16]
 8013304:	2331      	movs	r3, #49	@ 0x31
 8013306:	703b      	strb	r3, [r7, #0]
 8013308:	e5b3      	b.n	8012e72 <_dtoa_r+0x5b2>
 801330a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801330c:	4f16      	ldr	r7, [pc, #88]	@ (8013368 <_dtoa_r+0xaa8>)
 801330e:	b11b      	cbz	r3, 8013318 <_dtoa_r+0xa58>
 8013310:	f107 0308 	add.w	r3, r7, #8
 8013314:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013316:	6013      	str	r3, [r2, #0]
 8013318:	4638      	mov	r0, r7
 801331a:	b011      	add	sp, #68	@ 0x44
 801331c:	ecbd 8b02 	vpop	{d8}
 8013320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013324:	9b07      	ldr	r3, [sp, #28]
 8013326:	2b01      	cmp	r3, #1
 8013328:	f77f ae36 	ble.w	8012f98 <_dtoa_r+0x6d8>
 801332c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801332e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013330:	2001      	movs	r0, #1
 8013332:	e656      	b.n	8012fe2 <_dtoa_r+0x722>
 8013334:	f1bb 0f00 	cmp.w	fp, #0
 8013338:	f77f aed7 	ble.w	80130ea <_dtoa_r+0x82a>
 801333c:	463e      	mov	r6, r7
 801333e:	9801      	ldr	r0, [sp, #4]
 8013340:	4621      	mov	r1, r4
 8013342:	f7ff fa34 	bl	80127ae <quorem>
 8013346:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801334a:	f806 ab01 	strb.w	sl, [r6], #1
 801334e:	1bf2      	subs	r2, r6, r7
 8013350:	4593      	cmp	fp, r2
 8013352:	ddb4      	ble.n	80132be <_dtoa_r+0x9fe>
 8013354:	9901      	ldr	r1, [sp, #4]
 8013356:	2300      	movs	r3, #0
 8013358:	220a      	movs	r2, #10
 801335a:	4648      	mov	r0, r9
 801335c:	f000 f8b2 	bl	80134c4 <__multadd>
 8013360:	9001      	str	r0, [sp, #4]
 8013362:	e7ec      	b.n	801333e <_dtoa_r+0xa7e>
 8013364:	08016d24 	.word	0x08016d24
 8013368:	08016ca8 	.word	0x08016ca8

0801336c <_free_r>:
 801336c:	b538      	push	{r3, r4, r5, lr}
 801336e:	4605      	mov	r5, r0
 8013370:	2900      	cmp	r1, #0
 8013372:	d041      	beq.n	80133f8 <_free_r+0x8c>
 8013374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013378:	1f0c      	subs	r4, r1, #4
 801337a:	2b00      	cmp	r3, #0
 801337c:	bfb8      	it	lt
 801337e:	18e4      	addlt	r4, r4, r3
 8013380:	f7fe fc0e 	bl	8011ba0 <__malloc_lock>
 8013384:	4a1d      	ldr	r2, [pc, #116]	@ (80133fc <_free_r+0x90>)
 8013386:	6813      	ldr	r3, [r2, #0]
 8013388:	b933      	cbnz	r3, 8013398 <_free_r+0x2c>
 801338a:	6063      	str	r3, [r4, #4]
 801338c:	6014      	str	r4, [r2, #0]
 801338e:	4628      	mov	r0, r5
 8013390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013394:	f7fe bc0a 	b.w	8011bac <__malloc_unlock>
 8013398:	42a3      	cmp	r3, r4
 801339a:	d908      	bls.n	80133ae <_free_r+0x42>
 801339c:	6820      	ldr	r0, [r4, #0]
 801339e:	1821      	adds	r1, r4, r0
 80133a0:	428b      	cmp	r3, r1
 80133a2:	bf01      	itttt	eq
 80133a4:	6819      	ldreq	r1, [r3, #0]
 80133a6:	685b      	ldreq	r3, [r3, #4]
 80133a8:	1809      	addeq	r1, r1, r0
 80133aa:	6021      	streq	r1, [r4, #0]
 80133ac:	e7ed      	b.n	801338a <_free_r+0x1e>
 80133ae:	461a      	mov	r2, r3
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	b10b      	cbz	r3, 80133b8 <_free_r+0x4c>
 80133b4:	42a3      	cmp	r3, r4
 80133b6:	d9fa      	bls.n	80133ae <_free_r+0x42>
 80133b8:	6811      	ldr	r1, [r2, #0]
 80133ba:	1850      	adds	r0, r2, r1
 80133bc:	42a0      	cmp	r0, r4
 80133be:	d10b      	bne.n	80133d8 <_free_r+0x6c>
 80133c0:	6820      	ldr	r0, [r4, #0]
 80133c2:	4401      	add	r1, r0
 80133c4:	1850      	adds	r0, r2, r1
 80133c6:	4283      	cmp	r3, r0
 80133c8:	6011      	str	r1, [r2, #0]
 80133ca:	d1e0      	bne.n	801338e <_free_r+0x22>
 80133cc:	6818      	ldr	r0, [r3, #0]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	6053      	str	r3, [r2, #4]
 80133d2:	4408      	add	r0, r1
 80133d4:	6010      	str	r0, [r2, #0]
 80133d6:	e7da      	b.n	801338e <_free_r+0x22>
 80133d8:	d902      	bls.n	80133e0 <_free_r+0x74>
 80133da:	230c      	movs	r3, #12
 80133dc:	602b      	str	r3, [r5, #0]
 80133de:	e7d6      	b.n	801338e <_free_r+0x22>
 80133e0:	6820      	ldr	r0, [r4, #0]
 80133e2:	1821      	adds	r1, r4, r0
 80133e4:	428b      	cmp	r3, r1
 80133e6:	bf04      	itt	eq
 80133e8:	6819      	ldreq	r1, [r3, #0]
 80133ea:	685b      	ldreq	r3, [r3, #4]
 80133ec:	6063      	str	r3, [r4, #4]
 80133ee:	bf04      	itt	eq
 80133f0:	1809      	addeq	r1, r1, r0
 80133f2:	6021      	streq	r1, [r4, #0]
 80133f4:	6054      	str	r4, [r2, #4]
 80133f6:	e7ca      	b.n	801338e <_free_r+0x22>
 80133f8:	bd38      	pop	{r3, r4, r5, pc}
 80133fa:	bf00      	nop
 80133fc:	24006fbc 	.word	0x24006fbc

08013400 <_Balloc>:
 8013400:	b570      	push	{r4, r5, r6, lr}
 8013402:	69c6      	ldr	r6, [r0, #28]
 8013404:	4604      	mov	r4, r0
 8013406:	460d      	mov	r5, r1
 8013408:	b976      	cbnz	r6, 8013428 <_Balloc+0x28>
 801340a:	2010      	movs	r0, #16
 801340c:	f7fe fb1e 	bl	8011a4c <malloc>
 8013410:	4602      	mov	r2, r0
 8013412:	61e0      	str	r0, [r4, #28]
 8013414:	b920      	cbnz	r0, 8013420 <_Balloc+0x20>
 8013416:	4b18      	ldr	r3, [pc, #96]	@ (8013478 <_Balloc+0x78>)
 8013418:	4818      	ldr	r0, [pc, #96]	@ (801347c <_Balloc+0x7c>)
 801341a:	216b      	movs	r1, #107	@ 0x6b
 801341c:	f000 fd90 	bl	8013f40 <__assert_func>
 8013420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013424:	6006      	str	r6, [r0, #0]
 8013426:	60c6      	str	r6, [r0, #12]
 8013428:	69e6      	ldr	r6, [r4, #28]
 801342a:	68f3      	ldr	r3, [r6, #12]
 801342c:	b183      	cbz	r3, 8013450 <_Balloc+0x50>
 801342e:	69e3      	ldr	r3, [r4, #28]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013436:	b9b8      	cbnz	r0, 8013468 <_Balloc+0x68>
 8013438:	2101      	movs	r1, #1
 801343a:	fa01 f605 	lsl.w	r6, r1, r5
 801343e:	1d72      	adds	r2, r6, #5
 8013440:	0092      	lsls	r2, r2, #2
 8013442:	4620      	mov	r0, r4
 8013444:	f000 fd9a 	bl	8013f7c <_calloc_r>
 8013448:	b160      	cbz	r0, 8013464 <_Balloc+0x64>
 801344a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801344e:	e00e      	b.n	801346e <_Balloc+0x6e>
 8013450:	2221      	movs	r2, #33	@ 0x21
 8013452:	2104      	movs	r1, #4
 8013454:	4620      	mov	r0, r4
 8013456:	f000 fd91 	bl	8013f7c <_calloc_r>
 801345a:	69e3      	ldr	r3, [r4, #28]
 801345c:	60f0      	str	r0, [r6, #12]
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d1e4      	bne.n	801342e <_Balloc+0x2e>
 8013464:	2000      	movs	r0, #0
 8013466:	bd70      	pop	{r4, r5, r6, pc}
 8013468:	6802      	ldr	r2, [r0, #0]
 801346a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801346e:	2300      	movs	r3, #0
 8013470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013474:	e7f7      	b.n	8013466 <_Balloc+0x66>
 8013476:	bf00      	nop
 8013478:	08016cb5 	.word	0x08016cb5
 801347c:	08016d35 	.word	0x08016d35

08013480 <_Bfree>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	69c6      	ldr	r6, [r0, #28]
 8013484:	4605      	mov	r5, r0
 8013486:	460c      	mov	r4, r1
 8013488:	b976      	cbnz	r6, 80134a8 <_Bfree+0x28>
 801348a:	2010      	movs	r0, #16
 801348c:	f7fe fade 	bl	8011a4c <malloc>
 8013490:	4602      	mov	r2, r0
 8013492:	61e8      	str	r0, [r5, #28]
 8013494:	b920      	cbnz	r0, 80134a0 <_Bfree+0x20>
 8013496:	4b09      	ldr	r3, [pc, #36]	@ (80134bc <_Bfree+0x3c>)
 8013498:	4809      	ldr	r0, [pc, #36]	@ (80134c0 <_Bfree+0x40>)
 801349a:	218f      	movs	r1, #143	@ 0x8f
 801349c:	f000 fd50 	bl	8013f40 <__assert_func>
 80134a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80134a4:	6006      	str	r6, [r0, #0]
 80134a6:	60c6      	str	r6, [r0, #12]
 80134a8:	b13c      	cbz	r4, 80134ba <_Bfree+0x3a>
 80134aa:	69eb      	ldr	r3, [r5, #28]
 80134ac:	6862      	ldr	r2, [r4, #4]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80134b4:	6021      	str	r1, [r4, #0]
 80134b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80134ba:	bd70      	pop	{r4, r5, r6, pc}
 80134bc:	08016cb5 	.word	0x08016cb5
 80134c0:	08016d35 	.word	0x08016d35

080134c4 <__multadd>:
 80134c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c8:	690d      	ldr	r5, [r1, #16]
 80134ca:	4607      	mov	r7, r0
 80134cc:	460c      	mov	r4, r1
 80134ce:	461e      	mov	r6, r3
 80134d0:	f101 0c14 	add.w	ip, r1, #20
 80134d4:	2000      	movs	r0, #0
 80134d6:	f8dc 3000 	ldr.w	r3, [ip]
 80134da:	b299      	uxth	r1, r3
 80134dc:	fb02 6101 	mla	r1, r2, r1, r6
 80134e0:	0c1e      	lsrs	r6, r3, #16
 80134e2:	0c0b      	lsrs	r3, r1, #16
 80134e4:	fb02 3306 	mla	r3, r2, r6, r3
 80134e8:	b289      	uxth	r1, r1
 80134ea:	3001      	adds	r0, #1
 80134ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80134f0:	4285      	cmp	r5, r0
 80134f2:	f84c 1b04 	str.w	r1, [ip], #4
 80134f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80134fa:	dcec      	bgt.n	80134d6 <__multadd+0x12>
 80134fc:	b30e      	cbz	r6, 8013542 <__multadd+0x7e>
 80134fe:	68a3      	ldr	r3, [r4, #8]
 8013500:	42ab      	cmp	r3, r5
 8013502:	dc19      	bgt.n	8013538 <__multadd+0x74>
 8013504:	6861      	ldr	r1, [r4, #4]
 8013506:	4638      	mov	r0, r7
 8013508:	3101      	adds	r1, #1
 801350a:	f7ff ff79 	bl	8013400 <_Balloc>
 801350e:	4680      	mov	r8, r0
 8013510:	b928      	cbnz	r0, 801351e <__multadd+0x5a>
 8013512:	4602      	mov	r2, r0
 8013514:	4b0c      	ldr	r3, [pc, #48]	@ (8013548 <__multadd+0x84>)
 8013516:	480d      	ldr	r0, [pc, #52]	@ (801354c <__multadd+0x88>)
 8013518:	21ba      	movs	r1, #186	@ 0xba
 801351a:	f000 fd11 	bl	8013f40 <__assert_func>
 801351e:	6922      	ldr	r2, [r4, #16]
 8013520:	3202      	adds	r2, #2
 8013522:	f104 010c 	add.w	r1, r4, #12
 8013526:	0092      	lsls	r2, r2, #2
 8013528:	300c      	adds	r0, #12
 801352a:	f7ff f932 	bl	8012792 <memcpy>
 801352e:	4621      	mov	r1, r4
 8013530:	4638      	mov	r0, r7
 8013532:	f7ff ffa5 	bl	8013480 <_Bfree>
 8013536:	4644      	mov	r4, r8
 8013538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801353c:	3501      	adds	r5, #1
 801353e:	615e      	str	r6, [r3, #20]
 8013540:	6125      	str	r5, [r4, #16]
 8013542:	4620      	mov	r0, r4
 8013544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013548:	08016d24 	.word	0x08016d24
 801354c:	08016d35 	.word	0x08016d35

08013550 <__hi0bits>:
 8013550:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013554:	4603      	mov	r3, r0
 8013556:	bf36      	itet	cc
 8013558:	0403      	lslcc	r3, r0, #16
 801355a:	2000      	movcs	r0, #0
 801355c:	2010      	movcc	r0, #16
 801355e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013562:	bf3c      	itt	cc
 8013564:	021b      	lslcc	r3, r3, #8
 8013566:	3008      	addcc	r0, #8
 8013568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801356c:	bf3c      	itt	cc
 801356e:	011b      	lslcc	r3, r3, #4
 8013570:	3004      	addcc	r0, #4
 8013572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013576:	bf3c      	itt	cc
 8013578:	009b      	lslcc	r3, r3, #2
 801357a:	3002      	addcc	r0, #2
 801357c:	2b00      	cmp	r3, #0
 801357e:	db05      	blt.n	801358c <__hi0bits+0x3c>
 8013580:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013584:	f100 0001 	add.w	r0, r0, #1
 8013588:	bf08      	it	eq
 801358a:	2020      	moveq	r0, #32
 801358c:	4770      	bx	lr

0801358e <__lo0bits>:
 801358e:	6803      	ldr	r3, [r0, #0]
 8013590:	4602      	mov	r2, r0
 8013592:	f013 0007 	ands.w	r0, r3, #7
 8013596:	d00b      	beq.n	80135b0 <__lo0bits+0x22>
 8013598:	07d9      	lsls	r1, r3, #31
 801359a:	d421      	bmi.n	80135e0 <__lo0bits+0x52>
 801359c:	0798      	lsls	r0, r3, #30
 801359e:	bf49      	itett	mi
 80135a0:	085b      	lsrmi	r3, r3, #1
 80135a2:	089b      	lsrpl	r3, r3, #2
 80135a4:	2001      	movmi	r0, #1
 80135a6:	6013      	strmi	r3, [r2, #0]
 80135a8:	bf5c      	itt	pl
 80135aa:	6013      	strpl	r3, [r2, #0]
 80135ac:	2002      	movpl	r0, #2
 80135ae:	4770      	bx	lr
 80135b0:	b299      	uxth	r1, r3
 80135b2:	b909      	cbnz	r1, 80135b8 <__lo0bits+0x2a>
 80135b4:	0c1b      	lsrs	r3, r3, #16
 80135b6:	2010      	movs	r0, #16
 80135b8:	b2d9      	uxtb	r1, r3
 80135ba:	b909      	cbnz	r1, 80135c0 <__lo0bits+0x32>
 80135bc:	3008      	adds	r0, #8
 80135be:	0a1b      	lsrs	r3, r3, #8
 80135c0:	0719      	lsls	r1, r3, #28
 80135c2:	bf04      	itt	eq
 80135c4:	091b      	lsreq	r3, r3, #4
 80135c6:	3004      	addeq	r0, #4
 80135c8:	0799      	lsls	r1, r3, #30
 80135ca:	bf04      	itt	eq
 80135cc:	089b      	lsreq	r3, r3, #2
 80135ce:	3002      	addeq	r0, #2
 80135d0:	07d9      	lsls	r1, r3, #31
 80135d2:	d403      	bmi.n	80135dc <__lo0bits+0x4e>
 80135d4:	085b      	lsrs	r3, r3, #1
 80135d6:	f100 0001 	add.w	r0, r0, #1
 80135da:	d003      	beq.n	80135e4 <__lo0bits+0x56>
 80135dc:	6013      	str	r3, [r2, #0]
 80135de:	4770      	bx	lr
 80135e0:	2000      	movs	r0, #0
 80135e2:	4770      	bx	lr
 80135e4:	2020      	movs	r0, #32
 80135e6:	4770      	bx	lr

080135e8 <__i2b>:
 80135e8:	b510      	push	{r4, lr}
 80135ea:	460c      	mov	r4, r1
 80135ec:	2101      	movs	r1, #1
 80135ee:	f7ff ff07 	bl	8013400 <_Balloc>
 80135f2:	4602      	mov	r2, r0
 80135f4:	b928      	cbnz	r0, 8013602 <__i2b+0x1a>
 80135f6:	4b05      	ldr	r3, [pc, #20]	@ (801360c <__i2b+0x24>)
 80135f8:	4805      	ldr	r0, [pc, #20]	@ (8013610 <__i2b+0x28>)
 80135fa:	f240 1145 	movw	r1, #325	@ 0x145
 80135fe:	f000 fc9f 	bl	8013f40 <__assert_func>
 8013602:	2301      	movs	r3, #1
 8013604:	6144      	str	r4, [r0, #20]
 8013606:	6103      	str	r3, [r0, #16]
 8013608:	bd10      	pop	{r4, pc}
 801360a:	bf00      	nop
 801360c:	08016d24 	.word	0x08016d24
 8013610:	08016d35 	.word	0x08016d35

08013614 <__multiply>:
 8013614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013618:	4614      	mov	r4, r2
 801361a:	690a      	ldr	r2, [r1, #16]
 801361c:	6923      	ldr	r3, [r4, #16]
 801361e:	429a      	cmp	r2, r3
 8013620:	bfa8      	it	ge
 8013622:	4623      	movge	r3, r4
 8013624:	460f      	mov	r7, r1
 8013626:	bfa4      	itt	ge
 8013628:	460c      	movge	r4, r1
 801362a:	461f      	movge	r7, r3
 801362c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013630:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013634:	68a3      	ldr	r3, [r4, #8]
 8013636:	6861      	ldr	r1, [r4, #4]
 8013638:	eb0a 0609 	add.w	r6, sl, r9
 801363c:	42b3      	cmp	r3, r6
 801363e:	b085      	sub	sp, #20
 8013640:	bfb8      	it	lt
 8013642:	3101      	addlt	r1, #1
 8013644:	f7ff fedc 	bl	8013400 <_Balloc>
 8013648:	b930      	cbnz	r0, 8013658 <__multiply+0x44>
 801364a:	4602      	mov	r2, r0
 801364c:	4b44      	ldr	r3, [pc, #272]	@ (8013760 <__multiply+0x14c>)
 801364e:	4845      	ldr	r0, [pc, #276]	@ (8013764 <__multiply+0x150>)
 8013650:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013654:	f000 fc74 	bl	8013f40 <__assert_func>
 8013658:	f100 0514 	add.w	r5, r0, #20
 801365c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013660:	462b      	mov	r3, r5
 8013662:	2200      	movs	r2, #0
 8013664:	4543      	cmp	r3, r8
 8013666:	d321      	bcc.n	80136ac <__multiply+0x98>
 8013668:	f107 0114 	add.w	r1, r7, #20
 801366c:	f104 0214 	add.w	r2, r4, #20
 8013670:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013674:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013678:	9302      	str	r3, [sp, #8]
 801367a:	1b13      	subs	r3, r2, r4
 801367c:	3b15      	subs	r3, #21
 801367e:	f023 0303 	bic.w	r3, r3, #3
 8013682:	3304      	adds	r3, #4
 8013684:	f104 0715 	add.w	r7, r4, #21
 8013688:	42ba      	cmp	r2, r7
 801368a:	bf38      	it	cc
 801368c:	2304      	movcc	r3, #4
 801368e:	9301      	str	r3, [sp, #4]
 8013690:	9b02      	ldr	r3, [sp, #8]
 8013692:	9103      	str	r1, [sp, #12]
 8013694:	428b      	cmp	r3, r1
 8013696:	d80c      	bhi.n	80136b2 <__multiply+0x9e>
 8013698:	2e00      	cmp	r6, #0
 801369a:	dd03      	ble.n	80136a4 <__multiply+0x90>
 801369c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d05b      	beq.n	801375c <__multiply+0x148>
 80136a4:	6106      	str	r6, [r0, #16]
 80136a6:	b005      	add	sp, #20
 80136a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ac:	f843 2b04 	str.w	r2, [r3], #4
 80136b0:	e7d8      	b.n	8013664 <__multiply+0x50>
 80136b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80136b6:	f1ba 0f00 	cmp.w	sl, #0
 80136ba:	d024      	beq.n	8013706 <__multiply+0xf2>
 80136bc:	f104 0e14 	add.w	lr, r4, #20
 80136c0:	46a9      	mov	r9, r5
 80136c2:	f04f 0c00 	mov.w	ip, #0
 80136c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136ca:	f8d9 3000 	ldr.w	r3, [r9]
 80136ce:	fa1f fb87 	uxth.w	fp, r7
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80136d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80136dc:	f8d9 7000 	ldr.w	r7, [r9]
 80136e0:	4463      	add	r3, ip
 80136e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80136e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80136ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80136f4:	4572      	cmp	r2, lr
 80136f6:	f849 3b04 	str.w	r3, [r9], #4
 80136fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80136fe:	d8e2      	bhi.n	80136c6 <__multiply+0xb2>
 8013700:	9b01      	ldr	r3, [sp, #4]
 8013702:	f845 c003 	str.w	ip, [r5, r3]
 8013706:	9b03      	ldr	r3, [sp, #12]
 8013708:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801370c:	3104      	adds	r1, #4
 801370e:	f1b9 0f00 	cmp.w	r9, #0
 8013712:	d021      	beq.n	8013758 <__multiply+0x144>
 8013714:	682b      	ldr	r3, [r5, #0]
 8013716:	f104 0c14 	add.w	ip, r4, #20
 801371a:	46ae      	mov	lr, r5
 801371c:	f04f 0a00 	mov.w	sl, #0
 8013720:	f8bc b000 	ldrh.w	fp, [ip]
 8013724:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013728:	fb09 770b 	mla	r7, r9, fp, r7
 801372c:	4457      	add	r7, sl
 801372e:	b29b      	uxth	r3, r3
 8013730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013734:	f84e 3b04 	str.w	r3, [lr], #4
 8013738:	f85c 3b04 	ldr.w	r3, [ip], #4
 801373c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013740:	f8be 3000 	ldrh.w	r3, [lr]
 8013744:	fb09 330a 	mla	r3, r9, sl, r3
 8013748:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801374c:	4562      	cmp	r2, ip
 801374e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013752:	d8e5      	bhi.n	8013720 <__multiply+0x10c>
 8013754:	9f01      	ldr	r7, [sp, #4]
 8013756:	51eb      	str	r3, [r5, r7]
 8013758:	3504      	adds	r5, #4
 801375a:	e799      	b.n	8013690 <__multiply+0x7c>
 801375c:	3e01      	subs	r6, #1
 801375e:	e79b      	b.n	8013698 <__multiply+0x84>
 8013760:	08016d24 	.word	0x08016d24
 8013764:	08016d35 	.word	0x08016d35

08013768 <__pow5mult>:
 8013768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801376c:	4615      	mov	r5, r2
 801376e:	f012 0203 	ands.w	r2, r2, #3
 8013772:	4607      	mov	r7, r0
 8013774:	460e      	mov	r6, r1
 8013776:	d007      	beq.n	8013788 <__pow5mult+0x20>
 8013778:	4c25      	ldr	r4, [pc, #148]	@ (8013810 <__pow5mult+0xa8>)
 801377a:	3a01      	subs	r2, #1
 801377c:	2300      	movs	r3, #0
 801377e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013782:	f7ff fe9f 	bl	80134c4 <__multadd>
 8013786:	4606      	mov	r6, r0
 8013788:	10ad      	asrs	r5, r5, #2
 801378a:	d03d      	beq.n	8013808 <__pow5mult+0xa0>
 801378c:	69fc      	ldr	r4, [r7, #28]
 801378e:	b97c      	cbnz	r4, 80137b0 <__pow5mult+0x48>
 8013790:	2010      	movs	r0, #16
 8013792:	f7fe f95b 	bl	8011a4c <malloc>
 8013796:	4602      	mov	r2, r0
 8013798:	61f8      	str	r0, [r7, #28]
 801379a:	b928      	cbnz	r0, 80137a8 <__pow5mult+0x40>
 801379c:	4b1d      	ldr	r3, [pc, #116]	@ (8013814 <__pow5mult+0xac>)
 801379e:	481e      	ldr	r0, [pc, #120]	@ (8013818 <__pow5mult+0xb0>)
 80137a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80137a4:	f000 fbcc 	bl	8013f40 <__assert_func>
 80137a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80137ac:	6004      	str	r4, [r0, #0]
 80137ae:	60c4      	str	r4, [r0, #12]
 80137b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80137b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80137b8:	b94c      	cbnz	r4, 80137ce <__pow5mult+0x66>
 80137ba:	f240 2171 	movw	r1, #625	@ 0x271
 80137be:	4638      	mov	r0, r7
 80137c0:	f7ff ff12 	bl	80135e8 <__i2b>
 80137c4:	2300      	movs	r3, #0
 80137c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80137ca:	4604      	mov	r4, r0
 80137cc:	6003      	str	r3, [r0, #0]
 80137ce:	f04f 0900 	mov.w	r9, #0
 80137d2:	07eb      	lsls	r3, r5, #31
 80137d4:	d50a      	bpl.n	80137ec <__pow5mult+0x84>
 80137d6:	4631      	mov	r1, r6
 80137d8:	4622      	mov	r2, r4
 80137da:	4638      	mov	r0, r7
 80137dc:	f7ff ff1a 	bl	8013614 <__multiply>
 80137e0:	4631      	mov	r1, r6
 80137e2:	4680      	mov	r8, r0
 80137e4:	4638      	mov	r0, r7
 80137e6:	f7ff fe4b 	bl	8013480 <_Bfree>
 80137ea:	4646      	mov	r6, r8
 80137ec:	106d      	asrs	r5, r5, #1
 80137ee:	d00b      	beq.n	8013808 <__pow5mult+0xa0>
 80137f0:	6820      	ldr	r0, [r4, #0]
 80137f2:	b938      	cbnz	r0, 8013804 <__pow5mult+0x9c>
 80137f4:	4622      	mov	r2, r4
 80137f6:	4621      	mov	r1, r4
 80137f8:	4638      	mov	r0, r7
 80137fa:	f7ff ff0b 	bl	8013614 <__multiply>
 80137fe:	6020      	str	r0, [r4, #0]
 8013800:	f8c0 9000 	str.w	r9, [r0]
 8013804:	4604      	mov	r4, r0
 8013806:	e7e4      	b.n	80137d2 <__pow5mult+0x6a>
 8013808:	4630      	mov	r0, r6
 801380a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801380e:	bf00      	nop
 8013810:	08016d90 	.word	0x08016d90
 8013814:	08016cb5 	.word	0x08016cb5
 8013818:	08016d35 	.word	0x08016d35

0801381c <__lshift>:
 801381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013820:	460c      	mov	r4, r1
 8013822:	6849      	ldr	r1, [r1, #4]
 8013824:	6923      	ldr	r3, [r4, #16]
 8013826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	4607      	mov	r7, r0
 801382e:	4691      	mov	r9, r2
 8013830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013834:	f108 0601 	add.w	r6, r8, #1
 8013838:	42b3      	cmp	r3, r6
 801383a:	db0b      	blt.n	8013854 <__lshift+0x38>
 801383c:	4638      	mov	r0, r7
 801383e:	f7ff fddf 	bl	8013400 <_Balloc>
 8013842:	4605      	mov	r5, r0
 8013844:	b948      	cbnz	r0, 801385a <__lshift+0x3e>
 8013846:	4602      	mov	r2, r0
 8013848:	4b28      	ldr	r3, [pc, #160]	@ (80138ec <__lshift+0xd0>)
 801384a:	4829      	ldr	r0, [pc, #164]	@ (80138f0 <__lshift+0xd4>)
 801384c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013850:	f000 fb76 	bl	8013f40 <__assert_func>
 8013854:	3101      	adds	r1, #1
 8013856:	005b      	lsls	r3, r3, #1
 8013858:	e7ee      	b.n	8013838 <__lshift+0x1c>
 801385a:	2300      	movs	r3, #0
 801385c:	f100 0114 	add.w	r1, r0, #20
 8013860:	f100 0210 	add.w	r2, r0, #16
 8013864:	4618      	mov	r0, r3
 8013866:	4553      	cmp	r3, sl
 8013868:	db33      	blt.n	80138d2 <__lshift+0xb6>
 801386a:	6920      	ldr	r0, [r4, #16]
 801386c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013870:	f104 0314 	add.w	r3, r4, #20
 8013874:	f019 091f 	ands.w	r9, r9, #31
 8013878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801387c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013880:	d02b      	beq.n	80138da <__lshift+0xbe>
 8013882:	f1c9 0e20 	rsb	lr, r9, #32
 8013886:	468a      	mov	sl, r1
 8013888:	2200      	movs	r2, #0
 801388a:	6818      	ldr	r0, [r3, #0]
 801388c:	fa00 f009 	lsl.w	r0, r0, r9
 8013890:	4310      	orrs	r0, r2
 8013892:	f84a 0b04 	str.w	r0, [sl], #4
 8013896:	f853 2b04 	ldr.w	r2, [r3], #4
 801389a:	459c      	cmp	ip, r3
 801389c:	fa22 f20e 	lsr.w	r2, r2, lr
 80138a0:	d8f3      	bhi.n	801388a <__lshift+0x6e>
 80138a2:	ebac 0304 	sub.w	r3, ip, r4
 80138a6:	3b15      	subs	r3, #21
 80138a8:	f023 0303 	bic.w	r3, r3, #3
 80138ac:	3304      	adds	r3, #4
 80138ae:	f104 0015 	add.w	r0, r4, #21
 80138b2:	4584      	cmp	ip, r0
 80138b4:	bf38      	it	cc
 80138b6:	2304      	movcc	r3, #4
 80138b8:	50ca      	str	r2, [r1, r3]
 80138ba:	b10a      	cbz	r2, 80138c0 <__lshift+0xa4>
 80138bc:	f108 0602 	add.w	r6, r8, #2
 80138c0:	3e01      	subs	r6, #1
 80138c2:	4638      	mov	r0, r7
 80138c4:	612e      	str	r6, [r5, #16]
 80138c6:	4621      	mov	r1, r4
 80138c8:	f7ff fdda 	bl	8013480 <_Bfree>
 80138cc:	4628      	mov	r0, r5
 80138ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80138d6:	3301      	adds	r3, #1
 80138d8:	e7c5      	b.n	8013866 <__lshift+0x4a>
 80138da:	3904      	subs	r1, #4
 80138dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80138e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80138e4:	459c      	cmp	ip, r3
 80138e6:	d8f9      	bhi.n	80138dc <__lshift+0xc0>
 80138e8:	e7ea      	b.n	80138c0 <__lshift+0xa4>
 80138ea:	bf00      	nop
 80138ec:	08016d24 	.word	0x08016d24
 80138f0:	08016d35 	.word	0x08016d35

080138f4 <__mcmp>:
 80138f4:	690a      	ldr	r2, [r1, #16]
 80138f6:	4603      	mov	r3, r0
 80138f8:	6900      	ldr	r0, [r0, #16]
 80138fa:	1a80      	subs	r0, r0, r2
 80138fc:	b530      	push	{r4, r5, lr}
 80138fe:	d10e      	bne.n	801391e <__mcmp+0x2a>
 8013900:	3314      	adds	r3, #20
 8013902:	3114      	adds	r1, #20
 8013904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801390c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013914:	4295      	cmp	r5, r2
 8013916:	d003      	beq.n	8013920 <__mcmp+0x2c>
 8013918:	d205      	bcs.n	8013926 <__mcmp+0x32>
 801391a:	f04f 30ff 	mov.w	r0, #4294967295
 801391e:	bd30      	pop	{r4, r5, pc}
 8013920:	42a3      	cmp	r3, r4
 8013922:	d3f3      	bcc.n	801390c <__mcmp+0x18>
 8013924:	e7fb      	b.n	801391e <__mcmp+0x2a>
 8013926:	2001      	movs	r0, #1
 8013928:	e7f9      	b.n	801391e <__mcmp+0x2a>
	...

0801392c <__mdiff>:
 801392c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013930:	4689      	mov	r9, r1
 8013932:	4606      	mov	r6, r0
 8013934:	4611      	mov	r1, r2
 8013936:	4648      	mov	r0, r9
 8013938:	4614      	mov	r4, r2
 801393a:	f7ff ffdb 	bl	80138f4 <__mcmp>
 801393e:	1e05      	subs	r5, r0, #0
 8013940:	d112      	bne.n	8013968 <__mdiff+0x3c>
 8013942:	4629      	mov	r1, r5
 8013944:	4630      	mov	r0, r6
 8013946:	f7ff fd5b 	bl	8013400 <_Balloc>
 801394a:	4602      	mov	r2, r0
 801394c:	b928      	cbnz	r0, 801395a <__mdiff+0x2e>
 801394e:	4b3f      	ldr	r3, [pc, #252]	@ (8013a4c <__mdiff+0x120>)
 8013950:	f240 2137 	movw	r1, #567	@ 0x237
 8013954:	483e      	ldr	r0, [pc, #248]	@ (8013a50 <__mdiff+0x124>)
 8013956:	f000 faf3 	bl	8013f40 <__assert_func>
 801395a:	2301      	movs	r3, #1
 801395c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013960:	4610      	mov	r0, r2
 8013962:	b003      	add	sp, #12
 8013964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013968:	bfbc      	itt	lt
 801396a:	464b      	movlt	r3, r9
 801396c:	46a1      	movlt	r9, r4
 801396e:	4630      	mov	r0, r6
 8013970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013974:	bfba      	itte	lt
 8013976:	461c      	movlt	r4, r3
 8013978:	2501      	movlt	r5, #1
 801397a:	2500      	movge	r5, #0
 801397c:	f7ff fd40 	bl	8013400 <_Balloc>
 8013980:	4602      	mov	r2, r0
 8013982:	b918      	cbnz	r0, 801398c <__mdiff+0x60>
 8013984:	4b31      	ldr	r3, [pc, #196]	@ (8013a4c <__mdiff+0x120>)
 8013986:	f240 2145 	movw	r1, #581	@ 0x245
 801398a:	e7e3      	b.n	8013954 <__mdiff+0x28>
 801398c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013990:	6926      	ldr	r6, [r4, #16]
 8013992:	60c5      	str	r5, [r0, #12]
 8013994:	f109 0310 	add.w	r3, r9, #16
 8013998:	f109 0514 	add.w	r5, r9, #20
 801399c:	f104 0e14 	add.w	lr, r4, #20
 80139a0:	f100 0b14 	add.w	fp, r0, #20
 80139a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80139a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80139ac:	9301      	str	r3, [sp, #4]
 80139ae:	46d9      	mov	r9, fp
 80139b0:	f04f 0c00 	mov.w	ip, #0
 80139b4:	9b01      	ldr	r3, [sp, #4]
 80139b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80139ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80139be:	9301      	str	r3, [sp, #4]
 80139c0:	fa1f f38a 	uxth.w	r3, sl
 80139c4:	4619      	mov	r1, r3
 80139c6:	b283      	uxth	r3, r0
 80139c8:	1acb      	subs	r3, r1, r3
 80139ca:	0c00      	lsrs	r0, r0, #16
 80139cc:	4463      	add	r3, ip
 80139ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80139d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80139dc:	4576      	cmp	r6, lr
 80139de:	f849 3b04 	str.w	r3, [r9], #4
 80139e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80139e6:	d8e5      	bhi.n	80139b4 <__mdiff+0x88>
 80139e8:	1b33      	subs	r3, r6, r4
 80139ea:	3b15      	subs	r3, #21
 80139ec:	f023 0303 	bic.w	r3, r3, #3
 80139f0:	3415      	adds	r4, #21
 80139f2:	3304      	adds	r3, #4
 80139f4:	42a6      	cmp	r6, r4
 80139f6:	bf38      	it	cc
 80139f8:	2304      	movcc	r3, #4
 80139fa:	441d      	add	r5, r3
 80139fc:	445b      	add	r3, fp
 80139fe:	461e      	mov	r6, r3
 8013a00:	462c      	mov	r4, r5
 8013a02:	4544      	cmp	r4, r8
 8013a04:	d30e      	bcc.n	8013a24 <__mdiff+0xf8>
 8013a06:	f108 0103 	add.w	r1, r8, #3
 8013a0a:	1b49      	subs	r1, r1, r5
 8013a0c:	f021 0103 	bic.w	r1, r1, #3
 8013a10:	3d03      	subs	r5, #3
 8013a12:	45a8      	cmp	r8, r5
 8013a14:	bf38      	it	cc
 8013a16:	2100      	movcc	r1, #0
 8013a18:	440b      	add	r3, r1
 8013a1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013a1e:	b191      	cbz	r1, 8013a46 <__mdiff+0x11a>
 8013a20:	6117      	str	r7, [r2, #16]
 8013a22:	e79d      	b.n	8013960 <__mdiff+0x34>
 8013a24:	f854 1b04 	ldr.w	r1, [r4], #4
 8013a28:	46e6      	mov	lr, ip
 8013a2a:	0c08      	lsrs	r0, r1, #16
 8013a2c:	fa1c fc81 	uxtah	ip, ip, r1
 8013a30:	4471      	add	r1, lr
 8013a32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013a36:	b289      	uxth	r1, r1
 8013a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013a3c:	f846 1b04 	str.w	r1, [r6], #4
 8013a40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013a44:	e7dd      	b.n	8013a02 <__mdiff+0xd6>
 8013a46:	3f01      	subs	r7, #1
 8013a48:	e7e7      	b.n	8013a1a <__mdiff+0xee>
 8013a4a:	bf00      	nop
 8013a4c:	08016d24 	.word	0x08016d24
 8013a50:	08016d35 	.word	0x08016d35

08013a54 <__d2b>:
 8013a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a58:	460f      	mov	r7, r1
 8013a5a:	2101      	movs	r1, #1
 8013a5c:	ec59 8b10 	vmov	r8, r9, d0
 8013a60:	4616      	mov	r6, r2
 8013a62:	f7ff fccd 	bl	8013400 <_Balloc>
 8013a66:	4604      	mov	r4, r0
 8013a68:	b930      	cbnz	r0, 8013a78 <__d2b+0x24>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	4b23      	ldr	r3, [pc, #140]	@ (8013afc <__d2b+0xa8>)
 8013a6e:	4824      	ldr	r0, [pc, #144]	@ (8013b00 <__d2b+0xac>)
 8013a70:	f240 310f 	movw	r1, #783	@ 0x30f
 8013a74:	f000 fa64 	bl	8013f40 <__assert_func>
 8013a78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013a7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a80:	b10d      	cbz	r5, 8013a86 <__d2b+0x32>
 8013a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013a86:	9301      	str	r3, [sp, #4]
 8013a88:	f1b8 0300 	subs.w	r3, r8, #0
 8013a8c:	d023      	beq.n	8013ad6 <__d2b+0x82>
 8013a8e:	4668      	mov	r0, sp
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	f7ff fd7c 	bl	801358e <__lo0bits>
 8013a96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013a9a:	b1d0      	cbz	r0, 8013ad2 <__d2b+0x7e>
 8013a9c:	f1c0 0320 	rsb	r3, r0, #32
 8013aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8013aa4:	430b      	orrs	r3, r1
 8013aa6:	40c2      	lsrs	r2, r0
 8013aa8:	6163      	str	r3, [r4, #20]
 8013aaa:	9201      	str	r2, [sp, #4]
 8013aac:	9b01      	ldr	r3, [sp, #4]
 8013aae:	61a3      	str	r3, [r4, #24]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	bf0c      	ite	eq
 8013ab4:	2201      	moveq	r2, #1
 8013ab6:	2202      	movne	r2, #2
 8013ab8:	6122      	str	r2, [r4, #16]
 8013aba:	b1a5      	cbz	r5, 8013ae6 <__d2b+0x92>
 8013abc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013ac0:	4405      	add	r5, r0
 8013ac2:	603d      	str	r5, [r7, #0]
 8013ac4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013ac8:	6030      	str	r0, [r6, #0]
 8013aca:	4620      	mov	r0, r4
 8013acc:	b003      	add	sp, #12
 8013ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ad2:	6161      	str	r1, [r4, #20]
 8013ad4:	e7ea      	b.n	8013aac <__d2b+0x58>
 8013ad6:	a801      	add	r0, sp, #4
 8013ad8:	f7ff fd59 	bl	801358e <__lo0bits>
 8013adc:	9b01      	ldr	r3, [sp, #4]
 8013ade:	6163      	str	r3, [r4, #20]
 8013ae0:	3020      	adds	r0, #32
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	e7e8      	b.n	8013ab8 <__d2b+0x64>
 8013ae6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013aea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013aee:	6038      	str	r0, [r7, #0]
 8013af0:	6918      	ldr	r0, [r3, #16]
 8013af2:	f7ff fd2d 	bl	8013550 <__hi0bits>
 8013af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013afa:	e7e5      	b.n	8013ac8 <__d2b+0x74>
 8013afc:	08016d24 	.word	0x08016d24
 8013b00:	08016d35 	.word	0x08016d35

08013b04 <__ssputs_r>:
 8013b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b08:	688e      	ldr	r6, [r1, #8]
 8013b0a:	461f      	mov	r7, r3
 8013b0c:	42be      	cmp	r6, r7
 8013b0e:	680b      	ldr	r3, [r1, #0]
 8013b10:	4682      	mov	sl, r0
 8013b12:	460c      	mov	r4, r1
 8013b14:	4690      	mov	r8, r2
 8013b16:	d82d      	bhi.n	8013b74 <__ssputs_r+0x70>
 8013b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013b20:	d026      	beq.n	8013b70 <__ssputs_r+0x6c>
 8013b22:	6965      	ldr	r5, [r4, #20]
 8013b24:	6909      	ldr	r1, [r1, #16]
 8013b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b2a:	eba3 0901 	sub.w	r9, r3, r1
 8013b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b32:	1c7b      	adds	r3, r7, #1
 8013b34:	444b      	add	r3, r9
 8013b36:	106d      	asrs	r5, r5, #1
 8013b38:	429d      	cmp	r5, r3
 8013b3a:	bf38      	it	cc
 8013b3c:	461d      	movcc	r5, r3
 8013b3e:	0553      	lsls	r3, r2, #21
 8013b40:	d527      	bpl.n	8013b92 <__ssputs_r+0x8e>
 8013b42:	4629      	mov	r1, r5
 8013b44:	f7fd ffac 	bl	8011aa0 <_malloc_r>
 8013b48:	4606      	mov	r6, r0
 8013b4a:	b360      	cbz	r0, 8013ba6 <__ssputs_r+0xa2>
 8013b4c:	6921      	ldr	r1, [r4, #16]
 8013b4e:	464a      	mov	r2, r9
 8013b50:	f7fe fe1f 	bl	8012792 <memcpy>
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b5e:	81a3      	strh	r3, [r4, #12]
 8013b60:	6126      	str	r6, [r4, #16]
 8013b62:	6165      	str	r5, [r4, #20]
 8013b64:	444e      	add	r6, r9
 8013b66:	eba5 0509 	sub.w	r5, r5, r9
 8013b6a:	6026      	str	r6, [r4, #0]
 8013b6c:	60a5      	str	r5, [r4, #8]
 8013b6e:	463e      	mov	r6, r7
 8013b70:	42be      	cmp	r6, r7
 8013b72:	d900      	bls.n	8013b76 <__ssputs_r+0x72>
 8013b74:	463e      	mov	r6, r7
 8013b76:	6820      	ldr	r0, [r4, #0]
 8013b78:	4632      	mov	r2, r6
 8013b7a:	4641      	mov	r1, r8
 8013b7c:	f000 f9c6 	bl	8013f0c <memmove>
 8013b80:	68a3      	ldr	r3, [r4, #8]
 8013b82:	1b9b      	subs	r3, r3, r6
 8013b84:	60a3      	str	r3, [r4, #8]
 8013b86:	6823      	ldr	r3, [r4, #0]
 8013b88:	4433      	add	r3, r6
 8013b8a:	6023      	str	r3, [r4, #0]
 8013b8c:	2000      	movs	r0, #0
 8013b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b92:	462a      	mov	r2, r5
 8013b94:	f000 fa18 	bl	8013fc8 <_realloc_r>
 8013b98:	4606      	mov	r6, r0
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d1e0      	bne.n	8013b60 <__ssputs_r+0x5c>
 8013b9e:	6921      	ldr	r1, [r4, #16]
 8013ba0:	4650      	mov	r0, sl
 8013ba2:	f7ff fbe3 	bl	801336c <_free_r>
 8013ba6:	230c      	movs	r3, #12
 8013ba8:	f8ca 3000 	str.w	r3, [sl]
 8013bac:	89a3      	ldrh	r3, [r4, #12]
 8013bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bb2:	81a3      	strh	r3, [r4, #12]
 8013bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb8:	e7e9      	b.n	8013b8e <__ssputs_r+0x8a>
	...

08013bbc <_svfiprintf_r>:
 8013bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc0:	4698      	mov	r8, r3
 8013bc2:	898b      	ldrh	r3, [r1, #12]
 8013bc4:	061b      	lsls	r3, r3, #24
 8013bc6:	b09d      	sub	sp, #116	@ 0x74
 8013bc8:	4607      	mov	r7, r0
 8013bca:	460d      	mov	r5, r1
 8013bcc:	4614      	mov	r4, r2
 8013bce:	d510      	bpl.n	8013bf2 <_svfiprintf_r+0x36>
 8013bd0:	690b      	ldr	r3, [r1, #16]
 8013bd2:	b973      	cbnz	r3, 8013bf2 <_svfiprintf_r+0x36>
 8013bd4:	2140      	movs	r1, #64	@ 0x40
 8013bd6:	f7fd ff63 	bl	8011aa0 <_malloc_r>
 8013bda:	6028      	str	r0, [r5, #0]
 8013bdc:	6128      	str	r0, [r5, #16]
 8013bde:	b930      	cbnz	r0, 8013bee <_svfiprintf_r+0x32>
 8013be0:	230c      	movs	r3, #12
 8013be2:	603b      	str	r3, [r7, #0]
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	b01d      	add	sp, #116	@ 0x74
 8013bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bee:	2340      	movs	r3, #64	@ 0x40
 8013bf0:	616b      	str	r3, [r5, #20]
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bf6:	2320      	movs	r3, #32
 8013bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c00:	2330      	movs	r3, #48	@ 0x30
 8013c02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013da0 <_svfiprintf_r+0x1e4>
 8013c06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c0a:	f04f 0901 	mov.w	r9, #1
 8013c0e:	4623      	mov	r3, r4
 8013c10:	469a      	mov	sl, r3
 8013c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c16:	b10a      	cbz	r2, 8013c1c <_svfiprintf_r+0x60>
 8013c18:	2a25      	cmp	r2, #37	@ 0x25
 8013c1a:	d1f9      	bne.n	8013c10 <_svfiprintf_r+0x54>
 8013c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8013c20:	d00b      	beq.n	8013c3a <_svfiprintf_r+0x7e>
 8013c22:	465b      	mov	r3, fp
 8013c24:	4622      	mov	r2, r4
 8013c26:	4629      	mov	r1, r5
 8013c28:	4638      	mov	r0, r7
 8013c2a:	f7ff ff6b 	bl	8013b04 <__ssputs_r>
 8013c2e:	3001      	adds	r0, #1
 8013c30:	f000 80a7 	beq.w	8013d82 <_svfiprintf_r+0x1c6>
 8013c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c36:	445a      	add	r2, fp
 8013c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	f000 809f 	beq.w	8013d82 <_svfiprintf_r+0x1c6>
 8013c44:	2300      	movs	r3, #0
 8013c46:	f04f 32ff 	mov.w	r2, #4294967295
 8013c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c4e:	f10a 0a01 	add.w	sl, sl, #1
 8013c52:	9304      	str	r3, [sp, #16]
 8013c54:	9307      	str	r3, [sp, #28]
 8013c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c5c:	4654      	mov	r4, sl
 8013c5e:	2205      	movs	r2, #5
 8013c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c64:	484e      	ldr	r0, [pc, #312]	@ (8013da0 <_svfiprintf_r+0x1e4>)
 8013c66:	f7ec fb3b 	bl	80002e0 <memchr>
 8013c6a:	9a04      	ldr	r2, [sp, #16]
 8013c6c:	b9d8      	cbnz	r0, 8013ca6 <_svfiprintf_r+0xea>
 8013c6e:	06d0      	lsls	r0, r2, #27
 8013c70:	bf44      	itt	mi
 8013c72:	2320      	movmi	r3, #32
 8013c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c78:	0711      	lsls	r1, r2, #28
 8013c7a:	bf44      	itt	mi
 8013c7c:	232b      	movmi	r3, #43	@ 0x2b
 8013c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c82:	f89a 3000 	ldrb.w	r3, [sl]
 8013c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c88:	d015      	beq.n	8013cb6 <_svfiprintf_r+0xfa>
 8013c8a:	9a07      	ldr	r2, [sp, #28]
 8013c8c:	4654      	mov	r4, sl
 8013c8e:	2000      	movs	r0, #0
 8013c90:	f04f 0c0a 	mov.w	ip, #10
 8013c94:	4621      	mov	r1, r4
 8013c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c9a:	3b30      	subs	r3, #48	@ 0x30
 8013c9c:	2b09      	cmp	r3, #9
 8013c9e:	d94b      	bls.n	8013d38 <_svfiprintf_r+0x17c>
 8013ca0:	b1b0      	cbz	r0, 8013cd0 <_svfiprintf_r+0x114>
 8013ca2:	9207      	str	r2, [sp, #28]
 8013ca4:	e014      	b.n	8013cd0 <_svfiprintf_r+0x114>
 8013ca6:	eba0 0308 	sub.w	r3, r0, r8
 8013caa:	fa09 f303 	lsl.w	r3, r9, r3
 8013cae:	4313      	orrs	r3, r2
 8013cb0:	9304      	str	r3, [sp, #16]
 8013cb2:	46a2      	mov	sl, r4
 8013cb4:	e7d2      	b.n	8013c5c <_svfiprintf_r+0xa0>
 8013cb6:	9b03      	ldr	r3, [sp, #12]
 8013cb8:	1d19      	adds	r1, r3, #4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	9103      	str	r1, [sp, #12]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	bfbb      	ittet	lt
 8013cc2:	425b      	neglt	r3, r3
 8013cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8013cc8:	9307      	strge	r3, [sp, #28]
 8013cca:	9307      	strlt	r3, [sp, #28]
 8013ccc:	bfb8      	it	lt
 8013cce:	9204      	strlt	r2, [sp, #16]
 8013cd0:	7823      	ldrb	r3, [r4, #0]
 8013cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cd4:	d10a      	bne.n	8013cec <_svfiprintf_r+0x130>
 8013cd6:	7863      	ldrb	r3, [r4, #1]
 8013cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cda:	d132      	bne.n	8013d42 <_svfiprintf_r+0x186>
 8013cdc:	9b03      	ldr	r3, [sp, #12]
 8013cde:	1d1a      	adds	r2, r3, #4
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	9203      	str	r2, [sp, #12]
 8013ce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013ce8:	3402      	adds	r4, #2
 8013cea:	9305      	str	r3, [sp, #20]
 8013cec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013db0 <_svfiprintf_r+0x1f4>
 8013cf0:	7821      	ldrb	r1, [r4, #0]
 8013cf2:	2203      	movs	r2, #3
 8013cf4:	4650      	mov	r0, sl
 8013cf6:	f7ec faf3 	bl	80002e0 <memchr>
 8013cfa:	b138      	cbz	r0, 8013d0c <_svfiprintf_r+0x150>
 8013cfc:	9b04      	ldr	r3, [sp, #16]
 8013cfe:	eba0 000a 	sub.w	r0, r0, sl
 8013d02:	2240      	movs	r2, #64	@ 0x40
 8013d04:	4082      	lsls	r2, r0
 8013d06:	4313      	orrs	r3, r2
 8013d08:	3401      	adds	r4, #1
 8013d0a:	9304      	str	r3, [sp, #16]
 8013d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d10:	4824      	ldr	r0, [pc, #144]	@ (8013da4 <_svfiprintf_r+0x1e8>)
 8013d12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d16:	2206      	movs	r2, #6
 8013d18:	f7ec fae2 	bl	80002e0 <memchr>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d036      	beq.n	8013d8e <_svfiprintf_r+0x1d2>
 8013d20:	4b21      	ldr	r3, [pc, #132]	@ (8013da8 <_svfiprintf_r+0x1ec>)
 8013d22:	bb1b      	cbnz	r3, 8013d6c <_svfiprintf_r+0x1b0>
 8013d24:	9b03      	ldr	r3, [sp, #12]
 8013d26:	3307      	adds	r3, #7
 8013d28:	f023 0307 	bic.w	r3, r3, #7
 8013d2c:	3308      	adds	r3, #8
 8013d2e:	9303      	str	r3, [sp, #12]
 8013d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d32:	4433      	add	r3, r6
 8013d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d36:	e76a      	b.n	8013c0e <_svfiprintf_r+0x52>
 8013d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d3c:	460c      	mov	r4, r1
 8013d3e:	2001      	movs	r0, #1
 8013d40:	e7a8      	b.n	8013c94 <_svfiprintf_r+0xd8>
 8013d42:	2300      	movs	r3, #0
 8013d44:	3401      	adds	r4, #1
 8013d46:	9305      	str	r3, [sp, #20]
 8013d48:	4619      	mov	r1, r3
 8013d4a:	f04f 0c0a 	mov.w	ip, #10
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d54:	3a30      	subs	r2, #48	@ 0x30
 8013d56:	2a09      	cmp	r2, #9
 8013d58:	d903      	bls.n	8013d62 <_svfiprintf_r+0x1a6>
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d0c6      	beq.n	8013cec <_svfiprintf_r+0x130>
 8013d5e:	9105      	str	r1, [sp, #20]
 8013d60:	e7c4      	b.n	8013cec <_svfiprintf_r+0x130>
 8013d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d66:	4604      	mov	r4, r0
 8013d68:	2301      	movs	r3, #1
 8013d6a:	e7f0      	b.n	8013d4e <_svfiprintf_r+0x192>
 8013d6c:	ab03      	add	r3, sp, #12
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	462a      	mov	r2, r5
 8013d72:	4b0e      	ldr	r3, [pc, #56]	@ (8013dac <_svfiprintf_r+0x1f0>)
 8013d74:	a904      	add	r1, sp, #16
 8013d76:	4638      	mov	r0, r7
 8013d78:	f7fd ffae 	bl	8011cd8 <_printf_float>
 8013d7c:	1c42      	adds	r2, r0, #1
 8013d7e:	4606      	mov	r6, r0
 8013d80:	d1d6      	bne.n	8013d30 <_svfiprintf_r+0x174>
 8013d82:	89ab      	ldrh	r3, [r5, #12]
 8013d84:	065b      	lsls	r3, r3, #25
 8013d86:	f53f af2d 	bmi.w	8013be4 <_svfiprintf_r+0x28>
 8013d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d8c:	e72c      	b.n	8013be8 <_svfiprintf_r+0x2c>
 8013d8e:	ab03      	add	r3, sp, #12
 8013d90:	9300      	str	r3, [sp, #0]
 8013d92:	462a      	mov	r2, r5
 8013d94:	4b05      	ldr	r3, [pc, #20]	@ (8013dac <_svfiprintf_r+0x1f0>)
 8013d96:	a904      	add	r1, sp, #16
 8013d98:	4638      	mov	r0, r7
 8013d9a:	f7fe fa25 	bl	80121e8 <_printf_i>
 8013d9e:	e7ed      	b.n	8013d7c <_svfiprintf_r+0x1c0>
 8013da0:	08016e90 	.word	0x08016e90
 8013da4:	08016e9a 	.word	0x08016e9a
 8013da8:	08011cd9 	.word	0x08011cd9
 8013dac:	08013b05 	.word	0x08013b05
 8013db0:	08016e96 	.word	0x08016e96

08013db4 <__sflush_r>:
 8013db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbc:	0716      	lsls	r6, r2, #28
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	460c      	mov	r4, r1
 8013dc2:	d454      	bmi.n	8013e6e <__sflush_r+0xba>
 8013dc4:	684b      	ldr	r3, [r1, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	dc02      	bgt.n	8013dd0 <__sflush_r+0x1c>
 8013dca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	dd48      	ble.n	8013e62 <__sflush_r+0xae>
 8013dd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013dd2:	2e00      	cmp	r6, #0
 8013dd4:	d045      	beq.n	8013e62 <__sflush_r+0xae>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013ddc:	682f      	ldr	r7, [r5, #0]
 8013dde:	6a21      	ldr	r1, [r4, #32]
 8013de0:	602b      	str	r3, [r5, #0]
 8013de2:	d030      	beq.n	8013e46 <__sflush_r+0x92>
 8013de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013de6:	89a3      	ldrh	r3, [r4, #12]
 8013de8:	0759      	lsls	r1, r3, #29
 8013dea:	d505      	bpl.n	8013df8 <__sflush_r+0x44>
 8013dec:	6863      	ldr	r3, [r4, #4]
 8013dee:	1ad2      	subs	r2, r2, r3
 8013df0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013df2:	b10b      	cbz	r3, 8013df8 <__sflush_r+0x44>
 8013df4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013df6:	1ad2      	subs	r2, r2, r3
 8013df8:	2300      	movs	r3, #0
 8013dfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013dfc:	6a21      	ldr	r1, [r4, #32]
 8013dfe:	4628      	mov	r0, r5
 8013e00:	47b0      	blx	r6
 8013e02:	1c43      	adds	r3, r0, #1
 8013e04:	89a3      	ldrh	r3, [r4, #12]
 8013e06:	d106      	bne.n	8013e16 <__sflush_r+0x62>
 8013e08:	6829      	ldr	r1, [r5, #0]
 8013e0a:	291d      	cmp	r1, #29
 8013e0c:	d82b      	bhi.n	8013e66 <__sflush_r+0xb2>
 8013e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8013eb8 <__sflush_r+0x104>)
 8013e10:	410a      	asrs	r2, r1
 8013e12:	07d6      	lsls	r6, r2, #31
 8013e14:	d427      	bmi.n	8013e66 <__sflush_r+0xb2>
 8013e16:	2200      	movs	r2, #0
 8013e18:	6062      	str	r2, [r4, #4]
 8013e1a:	04d9      	lsls	r1, r3, #19
 8013e1c:	6922      	ldr	r2, [r4, #16]
 8013e1e:	6022      	str	r2, [r4, #0]
 8013e20:	d504      	bpl.n	8013e2c <__sflush_r+0x78>
 8013e22:	1c42      	adds	r2, r0, #1
 8013e24:	d101      	bne.n	8013e2a <__sflush_r+0x76>
 8013e26:	682b      	ldr	r3, [r5, #0]
 8013e28:	b903      	cbnz	r3, 8013e2c <__sflush_r+0x78>
 8013e2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e2e:	602f      	str	r7, [r5, #0]
 8013e30:	b1b9      	cbz	r1, 8013e62 <__sflush_r+0xae>
 8013e32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e36:	4299      	cmp	r1, r3
 8013e38:	d002      	beq.n	8013e40 <__sflush_r+0x8c>
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f7ff fa96 	bl	801336c <_free_r>
 8013e40:	2300      	movs	r3, #0
 8013e42:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e44:	e00d      	b.n	8013e62 <__sflush_r+0xae>
 8013e46:	2301      	movs	r3, #1
 8013e48:	4628      	mov	r0, r5
 8013e4a:	47b0      	blx	r6
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	1c50      	adds	r0, r2, #1
 8013e50:	d1c9      	bne.n	8013de6 <__sflush_r+0x32>
 8013e52:	682b      	ldr	r3, [r5, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d0c6      	beq.n	8013de6 <__sflush_r+0x32>
 8013e58:	2b1d      	cmp	r3, #29
 8013e5a:	d001      	beq.n	8013e60 <__sflush_r+0xac>
 8013e5c:	2b16      	cmp	r3, #22
 8013e5e:	d11e      	bne.n	8013e9e <__sflush_r+0xea>
 8013e60:	602f      	str	r7, [r5, #0]
 8013e62:	2000      	movs	r0, #0
 8013e64:	e022      	b.n	8013eac <__sflush_r+0xf8>
 8013e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e6a:	b21b      	sxth	r3, r3
 8013e6c:	e01b      	b.n	8013ea6 <__sflush_r+0xf2>
 8013e6e:	690f      	ldr	r7, [r1, #16]
 8013e70:	2f00      	cmp	r7, #0
 8013e72:	d0f6      	beq.n	8013e62 <__sflush_r+0xae>
 8013e74:	0793      	lsls	r3, r2, #30
 8013e76:	680e      	ldr	r6, [r1, #0]
 8013e78:	bf08      	it	eq
 8013e7a:	694b      	ldreq	r3, [r1, #20]
 8013e7c:	600f      	str	r7, [r1, #0]
 8013e7e:	bf18      	it	ne
 8013e80:	2300      	movne	r3, #0
 8013e82:	eba6 0807 	sub.w	r8, r6, r7
 8013e86:	608b      	str	r3, [r1, #8]
 8013e88:	f1b8 0f00 	cmp.w	r8, #0
 8013e8c:	dde9      	ble.n	8013e62 <__sflush_r+0xae>
 8013e8e:	6a21      	ldr	r1, [r4, #32]
 8013e90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013e92:	4643      	mov	r3, r8
 8013e94:	463a      	mov	r2, r7
 8013e96:	4628      	mov	r0, r5
 8013e98:	47b0      	blx	r6
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	dc08      	bgt.n	8013eb0 <__sflush_r+0xfc>
 8013e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ea6:	81a3      	strh	r3, [r4, #12]
 8013ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8013eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb0:	4407      	add	r7, r0
 8013eb2:	eba8 0800 	sub.w	r8, r8, r0
 8013eb6:	e7e7      	b.n	8013e88 <__sflush_r+0xd4>
 8013eb8:	dfbffffe 	.word	0xdfbffffe

08013ebc <_fflush_r>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	690b      	ldr	r3, [r1, #16]
 8013ec0:	4605      	mov	r5, r0
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	b913      	cbnz	r3, 8013ecc <_fflush_r+0x10>
 8013ec6:	2500      	movs	r5, #0
 8013ec8:	4628      	mov	r0, r5
 8013eca:	bd38      	pop	{r3, r4, r5, pc}
 8013ecc:	b118      	cbz	r0, 8013ed6 <_fflush_r+0x1a>
 8013ece:	6a03      	ldr	r3, [r0, #32]
 8013ed0:	b90b      	cbnz	r3, 8013ed6 <_fflush_r+0x1a>
 8013ed2:	f7fe fb35 	bl	8012540 <__sinit>
 8013ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d0f3      	beq.n	8013ec6 <_fflush_r+0xa>
 8013ede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ee0:	07d0      	lsls	r0, r2, #31
 8013ee2:	d404      	bmi.n	8013eee <_fflush_r+0x32>
 8013ee4:	0599      	lsls	r1, r3, #22
 8013ee6:	d402      	bmi.n	8013eee <_fflush_r+0x32>
 8013ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013eea:	f7fe fc50 	bl	801278e <__retarget_lock_acquire_recursive>
 8013eee:	4628      	mov	r0, r5
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	f7ff ff5f 	bl	8013db4 <__sflush_r>
 8013ef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ef8:	07da      	lsls	r2, r3, #31
 8013efa:	4605      	mov	r5, r0
 8013efc:	d4e4      	bmi.n	8013ec8 <_fflush_r+0xc>
 8013efe:	89a3      	ldrh	r3, [r4, #12]
 8013f00:	059b      	lsls	r3, r3, #22
 8013f02:	d4e1      	bmi.n	8013ec8 <_fflush_r+0xc>
 8013f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f06:	f7fe fc43 	bl	8012790 <__retarget_lock_release_recursive>
 8013f0a:	e7dd      	b.n	8013ec8 <_fflush_r+0xc>

08013f0c <memmove>:
 8013f0c:	4288      	cmp	r0, r1
 8013f0e:	b510      	push	{r4, lr}
 8013f10:	eb01 0402 	add.w	r4, r1, r2
 8013f14:	d902      	bls.n	8013f1c <memmove+0x10>
 8013f16:	4284      	cmp	r4, r0
 8013f18:	4623      	mov	r3, r4
 8013f1a:	d807      	bhi.n	8013f2c <memmove+0x20>
 8013f1c:	1e43      	subs	r3, r0, #1
 8013f1e:	42a1      	cmp	r1, r4
 8013f20:	d008      	beq.n	8013f34 <memmove+0x28>
 8013f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f2a:	e7f8      	b.n	8013f1e <memmove+0x12>
 8013f2c:	4402      	add	r2, r0
 8013f2e:	4601      	mov	r1, r0
 8013f30:	428a      	cmp	r2, r1
 8013f32:	d100      	bne.n	8013f36 <memmove+0x2a>
 8013f34:	bd10      	pop	{r4, pc}
 8013f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f3e:	e7f7      	b.n	8013f30 <memmove+0x24>

08013f40 <__assert_func>:
 8013f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f42:	4614      	mov	r4, r2
 8013f44:	461a      	mov	r2, r3
 8013f46:	4b09      	ldr	r3, [pc, #36]	@ (8013f6c <__assert_func+0x2c>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	4605      	mov	r5, r0
 8013f4c:	68d8      	ldr	r0, [r3, #12]
 8013f4e:	b954      	cbnz	r4, 8013f66 <__assert_func+0x26>
 8013f50:	4b07      	ldr	r3, [pc, #28]	@ (8013f70 <__assert_func+0x30>)
 8013f52:	461c      	mov	r4, r3
 8013f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f58:	9100      	str	r1, [sp, #0]
 8013f5a:	462b      	mov	r3, r5
 8013f5c:	4905      	ldr	r1, [pc, #20]	@ (8013f74 <__assert_func+0x34>)
 8013f5e:	f000 f86f 	bl	8014040 <fiprintf>
 8013f62:	f000 f87f 	bl	8014064 <abort>
 8013f66:	4b04      	ldr	r3, [pc, #16]	@ (8013f78 <__assert_func+0x38>)
 8013f68:	e7f4      	b.n	8013f54 <__assert_func+0x14>
 8013f6a:	bf00      	nop
 8013f6c:	24000138 	.word	0x24000138
 8013f70:	08016ee6 	.word	0x08016ee6
 8013f74:	08016eb8 	.word	0x08016eb8
 8013f78:	08016eab 	.word	0x08016eab

08013f7c <_calloc_r>:
 8013f7c:	b570      	push	{r4, r5, r6, lr}
 8013f7e:	fba1 5402 	umull	r5, r4, r1, r2
 8013f82:	b93c      	cbnz	r4, 8013f94 <_calloc_r+0x18>
 8013f84:	4629      	mov	r1, r5
 8013f86:	f7fd fd8b 	bl	8011aa0 <_malloc_r>
 8013f8a:	4606      	mov	r6, r0
 8013f8c:	b928      	cbnz	r0, 8013f9a <_calloc_r+0x1e>
 8013f8e:	2600      	movs	r6, #0
 8013f90:	4630      	mov	r0, r6
 8013f92:	bd70      	pop	{r4, r5, r6, pc}
 8013f94:	220c      	movs	r2, #12
 8013f96:	6002      	str	r2, [r0, #0]
 8013f98:	e7f9      	b.n	8013f8e <_calloc_r+0x12>
 8013f9a:	462a      	mov	r2, r5
 8013f9c:	4621      	mov	r1, r4
 8013f9e:	f7fe fb68 	bl	8012672 <memset>
 8013fa2:	e7f5      	b.n	8013f90 <_calloc_r+0x14>

08013fa4 <__ascii_mbtowc>:
 8013fa4:	b082      	sub	sp, #8
 8013fa6:	b901      	cbnz	r1, 8013faa <__ascii_mbtowc+0x6>
 8013fa8:	a901      	add	r1, sp, #4
 8013faa:	b142      	cbz	r2, 8013fbe <__ascii_mbtowc+0x1a>
 8013fac:	b14b      	cbz	r3, 8013fc2 <__ascii_mbtowc+0x1e>
 8013fae:	7813      	ldrb	r3, [r2, #0]
 8013fb0:	600b      	str	r3, [r1, #0]
 8013fb2:	7812      	ldrb	r2, [r2, #0]
 8013fb4:	1e10      	subs	r0, r2, #0
 8013fb6:	bf18      	it	ne
 8013fb8:	2001      	movne	r0, #1
 8013fba:	b002      	add	sp, #8
 8013fbc:	4770      	bx	lr
 8013fbe:	4610      	mov	r0, r2
 8013fc0:	e7fb      	b.n	8013fba <__ascii_mbtowc+0x16>
 8013fc2:	f06f 0001 	mvn.w	r0, #1
 8013fc6:	e7f8      	b.n	8013fba <__ascii_mbtowc+0x16>

08013fc8 <_realloc_r>:
 8013fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fcc:	4680      	mov	r8, r0
 8013fce:	4615      	mov	r5, r2
 8013fd0:	460c      	mov	r4, r1
 8013fd2:	b921      	cbnz	r1, 8013fde <_realloc_r+0x16>
 8013fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd8:	4611      	mov	r1, r2
 8013fda:	f7fd bd61 	b.w	8011aa0 <_malloc_r>
 8013fde:	b92a      	cbnz	r2, 8013fec <_realloc_r+0x24>
 8013fe0:	f7ff f9c4 	bl	801336c <_free_r>
 8013fe4:	2400      	movs	r4, #0
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fec:	f000 f841 	bl	8014072 <_malloc_usable_size_r>
 8013ff0:	4285      	cmp	r5, r0
 8013ff2:	4606      	mov	r6, r0
 8013ff4:	d802      	bhi.n	8013ffc <_realloc_r+0x34>
 8013ff6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013ffa:	d8f4      	bhi.n	8013fe6 <_realloc_r+0x1e>
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	4640      	mov	r0, r8
 8014000:	f7fd fd4e 	bl	8011aa0 <_malloc_r>
 8014004:	4607      	mov	r7, r0
 8014006:	2800      	cmp	r0, #0
 8014008:	d0ec      	beq.n	8013fe4 <_realloc_r+0x1c>
 801400a:	42b5      	cmp	r5, r6
 801400c:	462a      	mov	r2, r5
 801400e:	4621      	mov	r1, r4
 8014010:	bf28      	it	cs
 8014012:	4632      	movcs	r2, r6
 8014014:	f7fe fbbd 	bl	8012792 <memcpy>
 8014018:	4621      	mov	r1, r4
 801401a:	4640      	mov	r0, r8
 801401c:	f7ff f9a6 	bl	801336c <_free_r>
 8014020:	463c      	mov	r4, r7
 8014022:	e7e0      	b.n	8013fe6 <_realloc_r+0x1e>

08014024 <__ascii_wctomb>:
 8014024:	4603      	mov	r3, r0
 8014026:	4608      	mov	r0, r1
 8014028:	b141      	cbz	r1, 801403c <__ascii_wctomb+0x18>
 801402a:	2aff      	cmp	r2, #255	@ 0xff
 801402c:	d904      	bls.n	8014038 <__ascii_wctomb+0x14>
 801402e:	228a      	movs	r2, #138	@ 0x8a
 8014030:	601a      	str	r2, [r3, #0]
 8014032:	f04f 30ff 	mov.w	r0, #4294967295
 8014036:	4770      	bx	lr
 8014038:	700a      	strb	r2, [r1, #0]
 801403a:	2001      	movs	r0, #1
 801403c:	4770      	bx	lr
	...

08014040 <fiprintf>:
 8014040:	b40e      	push	{r1, r2, r3}
 8014042:	b503      	push	{r0, r1, lr}
 8014044:	4601      	mov	r1, r0
 8014046:	ab03      	add	r3, sp, #12
 8014048:	4805      	ldr	r0, [pc, #20]	@ (8014060 <fiprintf+0x20>)
 801404a:	f853 2b04 	ldr.w	r2, [r3], #4
 801404e:	6800      	ldr	r0, [r0, #0]
 8014050:	9301      	str	r3, [sp, #4]
 8014052:	f000 f83f 	bl	80140d4 <_vfiprintf_r>
 8014056:	b002      	add	sp, #8
 8014058:	f85d eb04 	ldr.w	lr, [sp], #4
 801405c:	b003      	add	sp, #12
 801405e:	4770      	bx	lr
 8014060:	24000138 	.word	0x24000138

08014064 <abort>:
 8014064:	b508      	push	{r3, lr}
 8014066:	2006      	movs	r0, #6
 8014068:	f000 fa08 	bl	801447c <raise>
 801406c:	2001      	movs	r0, #1
 801406e:	f7ed fa29 	bl	80014c4 <_exit>

08014072 <_malloc_usable_size_r>:
 8014072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014076:	1f18      	subs	r0, r3, #4
 8014078:	2b00      	cmp	r3, #0
 801407a:	bfbc      	itt	lt
 801407c:	580b      	ldrlt	r3, [r1, r0]
 801407e:	18c0      	addlt	r0, r0, r3
 8014080:	4770      	bx	lr

08014082 <__sfputc_r>:
 8014082:	6893      	ldr	r3, [r2, #8]
 8014084:	3b01      	subs	r3, #1
 8014086:	2b00      	cmp	r3, #0
 8014088:	b410      	push	{r4}
 801408a:	6093      	str	r3, [r2, #8]
 801408c:	da08      	bge.n	80140a0 <__sfputc_r+0x1e>
 801408e:	6994      	ldr	r4, [r2, #24]
 8014090:	42a3      	cmp	r3, r4
 8014092:	db01      	blt.n	8014098 <__sfputc_r+0x16>
 8014094:	290a      	cmp	r1, #10
 8014096:	d103      	bne.n	80140a0 <__sfputc_r+0x1e>
 8014098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801409c:	f000 b932 	b.w	8014304 <__swbuf_r>
 80140a0:	6813      	ldr	r3, [r2, #0]
 80140a2:	1c58      	adds	r0, r3, #1
 80140a4:	6010      	str	r0, [r2, #0]
 80140a6:	7019      	strb	r1, [r3, #0]
 80140a8:	4608      	mov	r0, r1
 80140aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140ae:	4770      	bx	lr

080140b0 <__sfputs_r>:
 80140b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140b2:	4606      	mov	r6, r0
 80140b4:	460f      	mov	r7, r1
 80140b6:	4614      	mov	r4, r2
 80140b8:	18d5      	adds	r5, r2, r3
 80140ba:	42ac      	cmp	r4, r5
 80140bc:	d101      	bne.n	80140c2 <__sfputs_r+0x12>
 80140be:	2000      	movs	r0, #0
 80140c0:	e007      	b.n	80140d2 <__sfputs_r+0x22>
 80140c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140c6:	463a      	mov	r2, r7
 80140c8:	4630      	mov	r0, r6
 80140ca:	f7ff ffda 	bl	8014082 <__sfputc_r>
 80140ce:	1c43      	adds	r3, r0, #1
 80140d0:	d1f3      	bne.n	80140ba <__sfputs_r+0xa>
 80140d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080140d4 <_vfiprintf_r>:
 80140d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d8:	460d      	mov	r5, r1
 80140da:	b09d      	sub	sp, #116	@ 0x74
 80140dc:	4614      	mov	r4, r2
 80140de:	4698      	mov	r8, r3
 80140e0:	4606      	mov	r6, r0
 80140e2:	b118      	cbz	r0, 80140ec <_vfiprintf_r+0x18>
 80140e4:	6a03      	ldr	r3, [r0, #32]
 80140e6:	b90b      	cbnz	r3, 80140ec <_vfiprintf_r+0x18>
 80140e8:	f7fe fa2a 	bl	8012540 <__sinit>
 80140ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140ee:	07d9      	lsls	r1, r3, #31
 80140f0:	d405      	bmi.n	80140fe <_vfiprintf_r+0x2a>
 80140f2:	89ab      	ldrh	r3, [r5, #12]
 80140f4:	059a      	lsls	r2, r3, #22
 80140f6:	d402      	bmi.n	80140fe <_vfiprintf_r+0x2a>
 80140f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140fa:	f7fe fb48 	bl	801278e <__retarget_lock_acquire_recursive>
 80140fe:	89ab      	ldrh	r3, [r5, #12]
 8014100:	071b      	lsls	r3, r3, #28
 8014102:	d501      	bpl.n	8014108 <_vfiprintf_r+0x34>
 8014104:	692b      	ldr	r3, [r5, #16]
 8014106:	b99b      	cbnz	r3, 8014130 <_vfiprintf_r+0x5c>
 8014108:	4629      	mov	r1, r5
 801410a:	4630      	mov	r0, r6
 801410c:	f000 f938 	bl	8014380 <__swsetup_r>
 8014110:	b170      	cbz	r0, 8014130 <_vfiprintf_r+0x5c>
 8014112:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014114:	07dc      	lsls	r4, r3, #31
 8014116:	d504      	bpl.n	8014122 <_vfiprintf_r+0x4e>
 8014118:	f04f 30ff 	mov.w	r0, #4294967295
 801411c:	b01d      	add	sp, #116	@ 0x74
 801411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014122:	89ab      	ldrh	r3, [r5, #12]
 8014124:	0598      	lsls	r0, r3, #22
 8014126:	d4f7      	bmi.n	8014118 <_vfiprintf_r+0x44>
 8014128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801412a:	f7fe fb31 	bl	8012790 <__retarget_lock_release_recursive>
 801412e:	e7f3      	b.n	8014118 <_vfiprintf_r+0x44>
 8014130:	2300      	movs	r3, #0
 8014132:	9309      	str	r3, [sp, #36]	@ 0x24
 8014134:	2320      	movs	r3, #32
 8014136:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801413a:	f8cd 800c 	str.w	r8, [sp, #12]
 801413e:	2330      	movs	r3, #48	@ 0x30
 8014140:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80142f0 <_vfiprintf_r+0x21c>
 8014144:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014148:	f04f 0901 	mov.w	r9, #1
 801414c:	4623      	mov	r3, r4
 801414e:	469a      	mov	sl, r3
 8014150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014154:	b10a      	cbz	r2, 801415a <_vfiprintf_r+0x86>
 8014156:	2a25      	cmp	r2, #37	@ 0x25
 8014158:	d1f9      	bne.n	801414e <_vfiprintf_r+0x7a>
 801415a:	ebba 0b04 	subs.w	fp, sl, r4
 801415e:	d00b      	beq.n	8014178 <_vfiprintf_r+0xa4>
 8014160:	465b      	mov	r3, fp
 8014162:	4622      	mov	r2, r4
 8014164:	4629      	mov	r1, r5
 8014166:	4630      	mov	r0, r6
 8014168:	f7ff ffa2 	bl	80140b0 <__sfputs_r>
 801416c:	3001      	adds	r0, #1
 801416e:	f000 80a7 	beq.w	80142c0 <_vfiprintf_r+0x1ec>
 8014172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014174:	445a      	add	r2, fp
 8014176:	9209      	str	r2, [sp, #36]	@ 0x24
 8014178:	f89a 3000 	ldrb.w	r3, [sl]
 801417c:	2b00      	cmp	r3, #0
 801417e:	f000 809f 	beq.w	80142c0 <_vfiprintf_r+0x1ec>
 8014182:	2300      	movs	r3, #0
 8014184:	f04f 32ff 	mov.w	r2, #4294967295
 8014188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801418c:	f10a 0a01 	add.w	sl, sl, #1
 8014190:	9304      	str	r3, [sp, #16]
 8014192:	9307      	str	r3, [sp, #28]
 8014194:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014198:	931a      	str	r3, [sp, #104]	@ 0x68
 801419a:	4654      	mov	r4, sl
 801419c:	2205      	movs	r2, #5
 801419e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141a2:	4853      	ldr	r0, [pc, #332]	@ (80142f0 <_vfiprintf_r+0x21c>)
 80141a4:	f7ec f89c 	bl	80002e0 <memchr>
 80141a8:	9a04      	ldr	r2, [sp, #16]
 80141aa:	b9d8      	cbnz	r0, 80141e4 <_vfiprintf_r+0x110>
 80141ac:	06d1      	lsls	r1, r2, #27
 80141ae:	bf44      	itt	mi
 80141b0:	2320      	movmi	r3, #32
 80141b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141b6:	0713      	lsls	r3, r2, #28
 80141b8:	bf44      	itt	mi
 80141ba:	232b      	movmi	r3, #43	@ 0x2b
 80141bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141c0:	f89a 3000 	ldrb.w	r3, [sl]
 80141c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80141c6:	d015      	beq.n	80141f4 <_vfiprintf_r+0x120>
 80141c8:	9a07      	ldr	r2, [sp, #28]
 80141ca:	4654      	mov	r4, sl
 80141cc:	2000      	movs	r0, #0
 80141ce:	f04f 0c0a 	mov.w	ip, #10
 80141d2:	4621      	mov	r1, r4
 80141d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141d8:	3b30      	subs	r3, #48	@ 0x30
 80141da:	2b09      	cmp	r3, #9
 80141dc:	d94b      	bls.n	8014276 <_vfiprintf_r+0x1a2>
 80141de:	b1b0      	cbz	r0, 801420e <_vfiprintf_r+0x13a>
 80141e0:	9207      	str	r2, [sp, #28]
 80141e2:	e014      	b.n	801420e <_vfiprintf_r+0x13a>
 80141e4:	eba0 0308 	sub.w	r3, r0, r8
 80141e8:	fa09 f303 	lsl.w	r3, r9, r3
 80141ec:	4313      	orrs	r3, r2
 80141ee:	9304      	str	r3, [sp, #16]
 80141f0:	46a2      	mov	sl, r4
 80141f2:	e7d2      	b.n	801419a <_vfiprintf_r+0xc6>
 80141f4:	9b03      	ldr	r3, [sp, #12]
 80141f6:	1d19      	adds	r1, r3, #4
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	9103      	str	r1, [sp, #12]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	bfbb      	ittet	lt
 8014200:	425b      	neglt	r3, r3
 8014202:	f042 0202 	orrlt.w	r2, r2, #2
 8014206:	9307      	strge	r3, [sp, #28]
 8014208:	9307      	strlt	r3, [sp, #28]
 801420a:	bfb8      	it	lt
 801420c:	9204      	strlt	r2, [sp, #16]
 801420e:	7823      	ldrb	r3, [r4, #0]
 8014210:	2b2e      	cmp	r3, #46	@ 0x2e
 8014212:	d10a      	bne.n	801422a <_vfiprintf_r+0x156>
 8014214:	7863      	ldrb	r3, [r4, #1]
 8014216:	2b2a      	cmp	r3, #42	@ 0x2a
 8014218:	d132      	bne.n	8014280 <_vfiprintf_r+0x1ac>
 801421a:	9b03      	ldr	r3, [sp, #12]
 801421c:	1d1a      	adds	r2, r3, #4
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	9203      	str	r2, [sp, #12]
 8014222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014226:	3402      	adds	r4, #2
 8014228:	9305      	str	r3, [sp, #20]
 801422a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014300 <_vfiprintf_r+0x22c>
 801422e:	7821      	ldrb	r1, [r4, #0]
 8014230:	2203      	movs	r2, #3
 8014232:	4650      	mov	r0, sl
 8014234:	f7ec f854 	bl	80002e0 <memchr>
 8014238:	b138      	cbz	r0, 801424a <_vfiprintf_r+0x176>
 801423a:	9b04      	ldr	r3, [sp, #16]
 801423c:	eba0 000a 	sub.w	r0, r0, sl
 8014240:	2240      	movs	r2, #64	@ 0x40
 8014242:	4082      	lsls	r2, r0
 8014244:	4313      	orrs	r3, r2
 8014246:	3401      	adds	r4, #1
 8014248:	9304      	str	r3, [sp, #16]
 801424a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801424e:	4829      	ldr	r0, [pc, #164]	@ (80142f4 <_vfiprintf_r+0x220>)
 8014250:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014254:	2206      	movs	r2, #6
 8014256:	f7ec f843 	bl	80002e0 <memchr>
 801425a:	2800      	cmp	r0, #0
 801425c:	d03f      	beq.n	80142de <_vfiprintf_r+0x20a>
 801425e:	4b26      	ldr	r3, [pc, #152]	@ (80142f8 <_vfiprintf_r+0x224>)
 8014260:	bb1b      	cbnz	r3, 80142aa <_vfiprintf_r+0x1d6>
 8014262:	9b03      	ldr	r3, [sp, #12]
 8014264:	3307      	adds	r3, #7
 8014266:	f023 0307 	bic.w	r3, r3, #7
 801426a:	3308      	adds	r3, #8
 801426c:	9303      	str	r3, [sp, #12]
 801426e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014270:	443b      	add	r3, r7
 8014272:	9309      	str	r3, [sp, #36]	@ 0x24
 8014274:	e76a      	b.n	801414c <_vfiprintf_r+0x78>
 8014276:	fb0c 3202 	mla	r2, ip, r2, r3
 801427a:	460c      	mov	r4, r1
 801427c:	2001      	movs	r0, #1
 801427e:	e7a8      	b.n	80141d2 <_vfiprintf_r+0xfe>
 8014280:	2300      	movs	r3, #0
 8014282:	3401      	adds	r4, #1
 8014284:	9305      	str	r3, [sp, #20]
 8014286:	4619      	mov	r1, r3
 8014288:	f04f 0c0a 	mov.w	ip, #10
 801428c:	4620      	mov	r0, r4
 801428e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014292:	3a30      	subs	r2, #48	@ 0x30
 8014294:	2a09      	cmp	r2, #9
 8014296:	d903      	bls.n	80142a0 <_vfiprintf_r+0x1cc>
 8014298:	2b00      	cmp	r3, #0
 801429a:	d0c6      	beq.n	801422a <_vfiprintf_r+0x156>
 801429c:	9105      	str	r1, [sp, #20]
 801429e:	e7c4      	b.n	801422a <_vfiprintf_r+0x156>
 80142a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80142a4:	4604      	mov	r4, r0
 80142a6:	2301      	movs	r3, #1
 80142a8:	e7f0      	b.n	801428c <_vfiprintf_r+0x1b8>
 80142aa:	ab03      	add	r3, sp, #12
 80142ac:	9300      	str	r3, [sp, #0]
 80142ae:	462a      	mov	r2, r5
 80142b0:	4b12      	ldr	r3, [pc, #72]	@ (80142fc <_vfiprintf_r+0x228>)
 80142b2:	a904      	add	r1, sp, #16
 80142b4:	4630      	mov	r0, r6
 80142b6:	f7fd fd0f 	bl	8011cd8 <_printf_float>
 80142ba:	4607      	mov	r7, r0
 80142bc:	1c78      	adds	r0, r7, #1
 80142be:	d1d6      	bne.n	801426e <_vfiprintf_r+0x19a>
 80142c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80142c2:	07d9      	lsls	r1, r3, #31
 80142c4:	d405      	bmi.n	80142d2 <_vfiprintf_r+0x1fe>
 80142c6:	89ab      	ldrh	r3, [r5, #12]
 80142c8:	059a      	lsls	r2, r3, #22
 80142ca:	d402      	bmi.n	80142d2 <_vfiprintf_r+0x1fe>
 80142cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80142ce:	f7fe fa5f 	bl	8012790 <__retarget_lock_release_recursive>
 80142d2:	89ab      	ldrh	r3, [r5, #12]
 80142d4:	065b      	lsls	r3, r3, #25
 80142d6:	f53f af1f 	bmi.w	8014118 <_vfiprintf_r+0x44>
 80142da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142dc:	e71e      	b.n	801411c <_vfiprintf_r+0x48>
 80142de:	ab03      	add	r3, sp, #12
 80142e0:	9300      	str	r3, [sp, #0]
 80142e2:	462a      	mov	r2, r5
 80142e4:	4b05      	ldr	r3, [pc, #20]	@ (80142fc <_vfiprintf_r+0x228>)
 80142e6:	a904      	add	r1, sp, #16
 80142e8:	4630      	mov	r0, r6
 80142ea:	f7fd ff7d 	bl	80121e8 <_printf_i>
 80142ee:	e7e4      	b.n	80142ba <_vfiprintf_r+0x1e6>
 80142f0:	08016e90 	.word	0x08016e90
 80142f4:	08016e9a 	.word	0x08016e9a
 80142f8:	08011cd9 	.word	0x08011cd9
 80142fc:	080140b1 	.word	0x080140b1
 8014300:	08016e96 	.word	0x08016e96

08014304 <__swbuf_r>:
 8014304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014306:	460e      	mov	r6, r1
 8014308:	4614      	mov	r4, r2
 801430a:	4605      	mov	r5, r0
 801430c:	b118      	cbz	r0, 8014316 <__swbuf_r+0x12>
 801430e:	6a03      	ldr	r3, [r0, #32]
 8014310:	b90b      	cbnz	r3, 8014316 <__swbuf_r+0x12>
 8014312:	f7fe f915 	bl	8012540 <__sinit>
 8014316:	69a3      	ldr	r3, [r4, #24]
 8014318:	60a3      	str	r3, [r4, #8]
 801431a:	89a3      	ldrh	r3, [r4, #12]
 801431c:	071a      	lsls	r2, r3, #28
 801431e:	d501      	bpl.n	8014324 <__swbuf_r+0x20>
 8014320:	6923      	ldr	r3, [r4, #16]
 8014322:	b943      	cbnz	r3, 8014336 <__swbuf_r+0x32>
 8014324:	4621      	mov	r1, r4
 8014326:	4628      	mov	r0, r5
 8014328:	f000 f82a 	bl	8014380 <__swsetup_r>
 801432c:	b118      	cbz	r0, 8014336 <__swbuf_r+0x32>
 801432e:	f04f 37ff 	mov.w	r7, #4294967295
 8014332:	4638      	mov	r0, r7
 8014334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	6922      	ldr	r2, [r4, #16]
 801433a:	1a98      	subs	r0, r3, r2
 801433c:	6963      	ldr	r3, [r4, #20]
 801433e:	b2f6      	uxtb	r6, r6
 8014340:	4283      	cmp	r3, r0
 8014342:	4637      	mov	r7, r6
 8014344:	dc05      	bgt.n	8014352 <__swbuf_r+0x4e>
 8014346:	4621      	mov	r1, r4
 8014348:	4628      	mov	r0, r5
 801434a:	f7ff fdb7 	bl	8013ebc <_fflush_r>
 801434e:	2800      	cmp	r0, #0
 8014350:	d1ed      	bne.n	801432e <__swbuf_r+0x2a>
 8014352:	68a3      	ldr	r3, [r4, #8]
 8014354:	3b01      	subs	r3, #1
 8014356:	60a3      	str	r3, [r4, #8]
 8014358:	6823      	ldr	r3, [r4, #0]
 801435a:	1c5a      	adds	r2, r3, #1
 801435c:	6022      	str	r2, [r4, #0]
 801435e:	701e      	strb	r6, [r3, #0]
 8014360:	6962      	ldr	r2, [r4, #20]
 8014362:	1c43      	adds	r3, r0, #1
 8014364:	429a      	cmp	r2, r3
 8014366:	d004      	beq.n	8014372 <__swbuf_r+0x6e>
 8014368:	89a3      	ldrh	r3, [r4, #12]
 801436a:	07db      	lsls	r3, r3, #31
 801436c:	d5e1      	bpl.n	8014332 <__swbuf_r+0x2e>
 801436e:	2e0a      	cmp	r6, #10
 8014370:	d1df      	bne.n	8014332 <__swbuf_r+0x2e>
 8014372:	4621      	mov	r1, r4
 8014374:	4628      	mov	r0, r5
 8014376:	f7ff fda1 	bl	8013ebc <_fflush_r>
 801437a:	2800      	cmp	r0, #0
 801437c:	d0d9      	beq.n	8014332 <__swbuf_r+0x2e>
 801437e:	e7d6      	b.n	801432e <__swbuf_r+0x2a>

08014380 <__swsetup_r>:
 8014380:	b538      	push	{r3, r4, r5, lr}
 8014382:	4b29      	ldr	r3, [pc, #164]	@ (8014428 <__swsetup_r+0xa8>)
 8014384:	4605      	mov	r5, r0
 8014386:	6818      	ldr	r0, [r3, #0]
 8014388:	460c      	mov	r4, r1
 801438a:	b118      	cbz	r0, 8014394 <__swsetup_r+0x14>
 801438c:	6a03      	ldr	r3, [r0, #32]
 801438e:	b90b      	cbnz	r3, 8014394 <__swsetup_r+0x14>
 8014390:	f7fe f8d6 	bl	8012540 <__sinit>
 8014394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014398:	0719      	lsls	r1, r3, #28
 801439a:	d422      	bmi.n	80143e2 <__swsetup_r+0x62>
 801439c:	06da      	lsls	r2, r3, #27
 801439e:	d407      	bmi.n	80143b0 <__swsetup_r+0x30>
 80143a0:	2209      	movs	r2, #9
 80143a2:	602a      	str	r2, [r5, #0]
 80143a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143a8:	81a3      	strh	r3, [r4, #12]
 80143aa:	f04f 30ff 	mov.w	r0, #4294967295
 80143ae:	e033      	b.n	8014418 <__swsetup_r+0x98>
 80143b0:	0758      	lsls	r0, r3, #29
 80143b2:	d512      	bpl.n	80143da <__swsetup_r+0x5a>
 80143b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80143b6:	b141      	cbz	r1, 80143ca <__swsetup_r+0x4a>
 80143b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80143bc:	4299      	cmp	r1, r3
 80143be:	d002      	beq.n	80143c6 <__swsetup_r+0x46>
 80143c0:	4628      	mov	r0, r5
 80143c2:	f7fe ffd3 	bl	801336c <_free_r>
 80143c6:	2300      	movs	r3, #0
 80143c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80143ca:	89a3      	ldrh	r3, [r4, #12]
 80143cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80143d0:	81a3      	strh	r3, [r4, #12]
 80143d2:	2300      	movs	r3, #0
 80143d4:	6063      	str	r3, [r4, #4]
 80143d6:	6923      	ldr	r3, [r4, #16]
 80143d8:	6023      	str	r3, [r4, #0]
 80143da:	89a3      	ldrh	r3, [r4, #12]
 80143dc:	f043 0308 	orr.w	r3, r3, #8
 80143e0:	81a3      	strh	r3, [r4, #12]
 80143e2:	6923      	ldr	r3, [r4, #16]
 80143e4:	b94b      	cbnz	r3, 80143fa <__swsetup_r+0x7a>
 80143e6:	89a3      	ldrh	r3, [r4, #12]
 80143e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80143ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80143f0:	d003      	beq.n	80143fa <__swsetup_r+0x7a>
 80143f2:	4621      	mov	r1, r4
 80143f4:	4628      	mov	r0, r5
 80143f6:	f000 f883 	bl	8014500 <__smakebuf_r>
 80143fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143fe:	f013 0201 	ands.w	r2, r3, #1
 8014402:	d00a      	beq.n	801441a <__swsetup_r+0x9a>
 8014404:	2200      	movs	r2, #0
 8014406:	60a2      	str	r2, [r4, #8]
 8014408:	6962      	ldr	r2, [r4, #20]
 801440a:	4252      	negs	r2, r2
 801440c:	61a2      	str	r2, [r4, #24]
 801440e:	6922      	ldr	r2, [r4, #16]
 8014410:	b942      	cbnz	r2, 8014424 <__swsetup_r+0xa4>
 8014412:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014416:	d1c5      	bne.n	80143a4 <__swsetup_r+0x24>
 8014418:	bd38      	pop	{r3, r4, r5, pc}
 801441a:	0799      	lsls	r1, r3, #30
 801441c:	bf58      	it	pl
 801441e:	6962      	ldrpl	r2, [r4, #20]
 8014420:	60a2      	str	r2, [r4, #8]
 8014422:	e7f4      	b.n	801440e <__swsetup_r+0x8e>
 8014424:	2000      	movs	r0, #0
 8014426:	e7f7      	b.n	8014418 <__swsetup_r+0x98>
 8014428:	24000138 	.word	0x24000138

0801442c <_raise_r>:
 801442c:	291f      	cmp	r1, #31
 801442e:	b538      	push	{r3, r4, r5, lr}
 8014430:	4605      	mov	r5, r0
 8014432:	460c      	mov	r4, r1
 8014434:	d904      	bls.n	8014440 <_raise_r+0x14>
 8014436:	2316      	movs	r3, #22
 8014438:	6003      	str	r3, [r0, #0]
 801443a:	f04f 30ff 	mov.w	r0, #4294967295
 801443e:	bd38      	pop	{r3, r4, r5, pc}
 8014440:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014442:	b112      	cbz	r2, 801444a <_raise_r+0x1e>
 8014444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014448:	b94b      	cbnz	r3, 801445e <_raise_r+0x32>
 801444a:	4628      	mov	r0, r5
 801444c:	f000 f830 	bl	80144b0 <_getpid_r>
 8014450:	4622      	mov	r2, r4
 8014452:	4601      	mov	r1, r0
 8014454:	4628      	mov	r0, r5
 8014456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801445a:	f000 b817 	b.w	801448c <_kill_r>
 801445e:	2b01      	cmp	r3, #1
 8014460:	d00a      	beq.n	8014478 <_raise_r+0x4c>
 8014462:	1c59      	adds	r1, r3, #1
 8014464:	d103      	bne.n	801446e <_raise_r+0x42>
 8014466:	2316      	movs	r3, #22
 8014468:	6003      	str	r3, [r0, #0]
 801446a:	2001      	movs	r0, #1
 801446c:	e7e7      	b.n	801443e <_raise_r+0x12>
 801446e:	2100      	movs	r1, #0
 8014470:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014474:	4620      	mov	r0, r4
 8014476:	4798      	blx	r3
 8014478:	2000      	movs	r0, #0
 801447a:	e7e0      	b.n	801443e <_raise_r+0x12>

0801447c <raise>:
 801447c:	4b02      	ldr	r3, [pc, #8]	@ (8014488 <raise+0xc>)
 801447e:	4601      	mov	r1, r0
 8014480:	6818      	ldr	r0, [r3, #0]
 8014482:	f7ff bfd3 	b.w	801442c <_raise_r>
 8014486:	bf00      	nop
 8014488:	24000138 	.word	0x24000138

0801448c <_kill_r>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	4d07      	ldr	r5, [pc, #28]	@ (80144ac <_kill_r+0x20>)
 8014490:	2300      	movs	r3, #0
 8014492:	4604      	mov	r4, r0
 8014494:	4608      	mov	r0, r1
 8014496:	4611      	mov	r1, r2
 8014498:	602b      	str	r3, [r5, #0]
 801449a:	f7ed f803 	bl	80014a4 <_kill>
 801449e:	1c43      	adds	r3, r0, #1
 80144a0:	d102      	bne.n	80144a8 <_kill_r+0x1c>
 80144a2:	682b      	ldr	r3, [r5, #0]
 80144a4:	b103      	cbz	r3, 80144a8 <_kill_r+0x1c>
 80144a6:	6023      	str	r3, [r4, #0]
 80144a8:	bd38      	pop	{r3, r4, r5, pc}
 80144aa:	bf00      	nop
 80144ac:	240070fc 	.word	0x240070fc

080144b0 <_getpid_r>:
 80144b0:	f7ec bff0 	b.w	8001494 <_getpid>

080144b4 <__swhatbuf_r>:
 80144b4:	b570      	push	{r4, r5, r6, lr}
 80144b6:	460c      	mov	r4, r1
 80144b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144bc:	2900      	cmp	r1, #0
 80144be:	b096      	sub	sp, #88	@ 0x58
 80144c0:	4615      	mov	r5, r2
 80144c2:	461e      	mov	r6, r3
 80144c4:	da0d      	bge.n	80144e2 <__swhatbuf_r+0x2e>
 80144c6:	89a3      	ldrh	r3, [r4, #12]
 80144c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80144cc:	f04f 0100 	mov.w	r1, #0
 80144d0:	bf14      	ite	ne
 80144d2:	2340      	movne	r3, #64	@ 0x40
 80144d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80144d8:	2000      	movs	r0, #0
 80144da:	6031      	str	r1, [r6, #0]
 80144dc:	602b      	str	r3, [r5, #0]
 80144de:	b016      	add	sp, #88	@ 0x58
 80144e0:	bd70      	pop	{r4, r5, r6, pc}
 80144e2:	466a      	mov	r2, sp
 80144e4:	f000 f848 	bl	8014578 <_fstat_r>
 80144e8:	2800      	cmp	r0, #0
 80144ea:	dbec      	blt.n	80144c6 <__swhatbuf_r+0x12>
 80144ec:	9901      	ldr	r1, [sp, #4]
 80144ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80144f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80144f6:	4259      	negs	r1, r3
 80144f8:	4159      	adcs	r1, r3
 80144fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80144fe:	e7eb      	b.n	80144d8 <__swhatbuf_r+0x24>

08014500 <__smakebuf_r>:
 8014500:	898b      	ldrh	r3, [r1, #12]
 8014502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014504:	079d      	lsls	r5, r3, #30
 8014506:	4606      	mov	r6, r0
 8014508:	460c      	mov	r4, r1
 801450a:	d507      	bpl.n	801451c <__smakebuf_r+0x1c>
 801450c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014510:	6023      	str	r3, [r4, #0]
 8014512:	6123      	str	r3, [r4, #16]
 8014514:	2301      	movs	r3, #1
 8014516:	6163      	str	r3, [r4, #20]
 8014518:	b003      	add	sp, #12
 801451a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801451c:	ab01      	add	r3, sp, #4
 801451e:	466a      	mov	r2, sp
 8014520:	f7ff ffc8 	bl	80144b4 <__swhatbuf_r>
 8014524:	9f00      	ldr	r7, [sp, #0]
 8014526:	4605      	mov	r5, r0
 8014528:	4639      	mov	r1, r7
 801452a:	4630      	mov	r0, r6
 801452c:	f7fd fab8 	bl	8011aa0 <_malloc_r>
 8014530:	b948      	cbnz	r0, 8014546 <__smakebuf_r+0x46>
 8014532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014536:	059a      	lsls	r2, r3, #22
 8014538:	d4ee      	bmi.n	8014518 <__smakebuf_r+0x18>
 801453a:	f023 0303 	bic.w	r3, r3, #3
 801453e:	f043 0302 	orr.w	r3, r3, #2
 8014542:	81a3      	strh	r3, [r4, #12]
 8014544:	e7e2      	b.n	801450c <__smakebuf_r+0xc>
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	6020      	str	r0, [r4, #0]
 801454a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801454e:	81a3      	strh	r3, [r4, #12]
 8014550:	9b01      	ldr	r3, [sp, #4]
 8014552:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014556:	b15b      	cbz	r3, 8014570 <__smakebuf_r+0x70>
 8014558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801455c:	4630      	mov	r0, r6
 801455e:	f000 f81d 	bl	801459c <_isatty_r>
 8014562:	b128      	cbz	r0, 8014570 <__smakebuf_r+0x70>
 8014564:	89a3      	ldrh	r3, [r4, #12]
 8014566:	f023 0303 	bic.w	r3, r3, #3
 801456a:	f043 0301 	orr.w	r3, r3, #1
 801456e:	81a3      	strh	r3, [r4, #12]
 8014570:	89a3      	ldrh	r3, [r4, #12]
 8014572:	431d      	orrs	r5, r3
 8014574:	81a5      	strh	r5, [r4, #12]
 8014576:	e7cf      	b.n	8014518 <__smakebuf_r+0x18>

08014578 <_fstat_r>:
 8014578:	b538      	push	{r3, r4, r5, lr}
 801457a:	4d07      	ldr	r5, [pc, #28]	@ (8014598 <_fstat_r+0x20>)
 801457c:	2300      	movs	r3, #0
 801457e:	4604      	mov	r4, r0
 8014580:	4608      	mov	r0, r1
 8014582:	4611      	mov	r1, r2
 8014584:	602b      	str	r3, [r5, #0]
 8014586:	f7ec ffed 	bl	8001564 <_fstat>
 801458a:	1c43      	adds	r3, r0, #1
 801458c:	d102      	bne.n	8014594 <_fstat_r+0x1c>
 801458e:	682b      	ldr	r3, [r5, #0]
 8014590:	b103      	cbz	r3, 8014594 <_fstat_r+0x1c>
 8014592:	6023      	str	r3, [r4, #0]
 8014594:	bd38      	pop	{r3, r4, r5, pc}
 8014596:	bf00      	nop
 8014598:	240070fc 	.word	0x240070fc

0801459c <_isatty_r>:
 801459c:	b538      	push	{r3, r4, r5, lr}
 801459e:	4d06      	ldr	r5, [pc, #24]	@ (80145b8 <_isatty_r+0x1c>)
 80145a0:	2300      	movs	r3, #0
 80145a2:	4604      	mov	r4, r0
 80145a4:	4608      	mov	r0, r1
 80145a6:	602b      	str	r3, [r5, #0]
 80145a8:	f7ec ffec 	bl	8001584 <_isatty>
 80145ac:	1c43      	adds	r3, r0, #1
 80145ae:	d102      	bne.n	80145b6 <_isatty_r+0x1a>
 80145b0:	682b      	ldr	r3, [r5, #0]
 80145b2:	b103      	cbz	r3, 80145b6 <_isatty_r+0x1a>
 80145b4:	6023      	str	r3, [r4, #0]
 80145b6:	bd38      	pop	{r3, r4, r5, pc}
 80145b8:	240070fc 	.word	0x240070fc
 80145bc:	00000000 	.word	0x00000000

080145c0 <fmod>:
 80145c0:	b508      	push	{r3, lr}
 80145c2:	ed2d 8b04 	vpush	{d8-d9}
 80145c6:	eeb0 9b40 	vmov.f64	d9, d0
 80145ca:	eeb0 8b41 	vmov.f64	d8, d1
 80145ce:	f000 f879 	bl	80146c4 <__ieee754_fmod>
 80145d2:	eeb4 9b48 	vcmp.f64	d9, d8
 80145d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145da:	d60c      	bvs.n	80145f6 <fmod+0x36>
 80145dc:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014600 <fmod+0x40>
 80145e0:	eeb4 8b49 	vcmp.f64	d8, d9
 80145e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e8:	d105      	bne.n	80145f6 <fmod+0x36>
 80145ea:	f7fe f8a5 	bl	8012738 <__errno>
 80145ee:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80145f2:	2321      	movs	r3, #33	@ 0x21
 80145f4:	6003      	str	r3, [r0, #0]
 80145f6:	ecbd 8b04 	vpop	{d8-d9}
 80145fa:	bd08      	pop	{r3, pc}
 80145fc:	f3af 8000 	nop.w
	...

08014608 <sqrt>:
 8014608:	b508      	push	{r3, lr}
 801460a:	ed2d 8b04 	vpush	{d8-d9}
 801460e:	eeb0 8b40 	vmov.f64	d8, d0
 8014612:	f000 f853 	bl	80146bc <__ieee754_sqrt>
 8014616:	eeb4 8b48 	vcmp.f64	d8, d8
 801461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461e:	d60c      	bvs.n	801463a <sqrt+0x32>
 8014620:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014640 <sqrt+0x38>
 8014624:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462c:	d505      	bpl.n	801463a <sqrt+0x32>
 801462e:	f7fe f883 	bl	8012738 <__errno>
 8014632:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014636:	2321      	movs	r3, #33	@ 0x21
 8014638:	6003      	str	r3, [r0, #0]
 801463a:	ecbd 8b04 	vpop	{d8-d9}
 801463e:	bd08      	pop	{r3, pc}
	...

08014648 <acosf>:
 8014648:	b508      	push	{r3, lr}
 801464a:	ed2d 8b02 	vpush	{d8}
 801464e:	eeb0 8a40 	vmov.f32	s16, s0
 8014652:	f000 f943 	bl	80148dc <__ieee754_acosf>
 8014656:	eeb4 8a48 	vcmp.f32	s16, s16
 801465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801465e:	eef0 8a40 	vmov.f32	s17, s0
 8014662:	d615      	bvs.n	8014690 <acosf+0x48>
 8014664:	eeb0 0a48 	vmov.f32	s0, s16
 8014668:	f000 f81a 	bl	80146a0 <fabsf>
 801466c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014670:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014678:	dd0a      	ble.n	8014690 <acosf+0x48>
 801467a:	f7fe f85d 	bl	8012738 <__errno>
 801467e:	ecbd 8b02 	vpop	{d8}
 8014682:	2321      	movs	r3, #33	@ 0x21
 8014684:	6003      	str	r3, [r0, #0]
 8014686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801468a:	4804      	ldr	r0, [pc, #16]	@ (801469c <acosf+0x54>)
 801468c:	f000 b810 	b.w	80146b0 <nanf>
 8014690:	eeb0 0a68 	vmov.f32	s0, s17
 8014694:	ecbd 8b02 	vpop	{d8}
 8014698:	bd08      	pop	{r3, pc}
 801469a:	bf00      	nop
 801469c:	08016ee6 	.word	0x08016ee6

080146a0 <fabsf>:
 80146a0:	ee10 3a10 	vmov	r3, s0
 80146a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80146a8:	ee00 3a10 	vmov	s0, r3
 80146ac:	4770      	bx	lr
	...

080146b0 <nanf>:
 80146b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80146b8 <nanf+0x8>
 80146b4:	4770      	bx	lr
 80146b6:	bf00      	nop
 80146b8:	7fc00000 	.word	0x7fc00000

080146bc <__ieee754_sqrt>:
 80146bc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80146c0:	4770      	bx	lr
	...

080146c4 <__ieee754_fmod>:
 80146c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146c8:	ed8d 1b00 	vstr	d1, [sp]
 80146cc:	e9dd 6500 	ldrd	r6, r5, [sp]
 80146d0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80146d4:	ea56 0307 	orrs.w	r3, r6, r7
 80146d8:	46b6      	mov	lr, r6
 80146da:	d00d      	beq.n	80146f8 <__ieee754_fmod+0x34>
 80146dc:	ee10 ca90 	vmov	ip, s1
 80146e0:	4b78      	ldr	r3, [pc, #480]	@ (80148c4 <__ieee754_fmod+0x200>)
 80146e2:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80146e6:	4598      	cmp	r8, r3
 80146e8:	d806      	bhi.n	80146f8 <__ieee754_fmod+0x34>
 80146ea:	4273      	negs	r3, r6
 80146ec:	4a76      	ldr	r2, [pc, #472]	@ (80148c8 <__ieee754_fmod+0x204>)
 80146ee:	4333      	orrs	r3, r6
 80146f0:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80146f4:	4293      	cmp	r3, r2
 80146f6:	d908      	bls.n	801470a <__ieee754_fmod+0x46>
 80146f8:	ed9d 7b00 	vldr	d7, [sp]
 80146fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014700:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014704:	b003      	add	sp, #12
 8014706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801470a:	ee10 9a10 	vmov	r9, s0
 801470e:	45b8      	cmp	r8, r7
 8014710:	4649      	mov	r1, r9
 8014712:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014716:	dc09      	bgt.n	801472c <__ieee754_fmod+0x68>
 8014718:	dbf4      	blt.n	8014704 <__ieee754_fmod+0x40>
 801471a:	454e      	cmp	r6, r9
 801471c:	d8f2      	bhi.n	8014704 <__ieee754_fmod+0x40>
 801471e:	d105      	bne.n	801472c <__ieee754_fmod+0x68>
 8014720:	4b6a      	ldr	r3, [pc, #424]	@ (80148cc <__ieee754_fmod+0x208>)
 8014722:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014726:	ed93 0b00 	vldr	d0, [r3]
 801472a:	e7eb      	b.n	8014704 <__ieee754_fmod+0x40>
 801472c:	4a66      	ldr	r2, [pc, #408]	@ (80148c8 <__ieee754_fmod+0x204>)
 801472e:	ea1c 0f02 	tst.w	ip, r2
 8014732:	d14a      	bne.n	80147ca <__ieee754_fmod+0x106>
 8014734:	f1b8 0f00 	cmp.w	r8, #0
 8014738:	d13f      	bne.n	80147ba <__ieee754_fmod+0xf6>
 801473a:	4865      	ldr	r0, [pc, #404]	@ (80148d0 <__ieee754_fmod+0x20c>)
 801473c:	464b      	mov	r3, r9
 801473e:	2b00      	cmp	r3, #0
 8014740:	dc38      	bgt.n	80147b4 <__ieee754_fmod+0xf0>
 8014742:	4215      	tst	r5, r2
 8014744:	d150      	bne.n	80147e8 <__ieee754_fmod+0x124>
 8014746:	2f00      	cmp	r7, #0
 8014748:	d147      	bne.n	80147da <__ieee754_fmod+0x116>
 801474a:	4a61      	ldr	r2, [pc, #388]	@ (80148d0 <__ieee754_fmod+0x20c>)
 801474c:	4633      	mov	r3, r6
 801474e:	2b00      	cmp	r3, #0
 8014750:	dc40      	bgt.n	80147d4 <__ieee754_fmod+0x110>
 8014752:	4b60      	ldr	r3, [pc, #384]	@ (80148d4 <__ieee754_fmod+0x210>)
 8014754:	4298      	cmp	r0, r3
 8014756:	db4b      	blt.n	80147f0 <__ieee754_fmod+0x12c>
 8014758:	f3cc 0313 	ubfx	r3, ip, #0, #20
 801475c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014760:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80148d4 <__ieee754_fmod+0x210>
 8014764:	4562      	cmp	r2, ip
 8014766:	db58      	blt.n	801481a <__ieee754_fmod+0x156>
 8014768:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801476c:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014770:	1a80      	subs	r0, r0, r2
 8014772:	1b5e      	subs	r6, r3, r5
 8014774:	eba1 070e 	sub.w	r7, r1, lr
 8014778:	2800      	cmp	r0, #0
 801477a:	d164      	bne.n	8014846 <__ieee754_fmod+0x182>
 801477c:	4571      	cmp	r1, lr
 801477e:	bf38      	it	cc
 8014780:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014784:	2e00      	cmp	r6, #0
 8014786:	bfa4      	itt	ge
 8014788:	4639      	movge	r1, r7
 801478a:	4633      	movge	r3, r6
 801478c:	ea53 0001 	orrs.w	r0, r3, r1
 8014790:	d0c6      	beq.n	8014720 <__ieee754_fmod+0x5c>
 8014792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014796:	db6b      	blt.n	8014870 <__ieee754_fmod+0x1ac>
 8014798:	484e      	ldr	r0, [pc, #312]	@ (80148d4 <__ieee754_fmod+0x210>)
 801479a:	4282      	cmp	r2, r0
 801479c:	db6e      	blt.n	801487c <__ieee754_fmod+0x1b8>
 801479e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80147a2:	4323      	orrs	r3, r4
 80147a4:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80147a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80147ac:	460c      	mov	r4, r1
 80147ae:	ec45 4b10 	vmov	d0, r4, r5
 80147b2:	e7a7      	b.n	8014704 <__ieee754_fmod+0x40>
 80147b4:	3801      	subs	r0, #1
 80147b6:	005b      	lsls	r3, r3, #1
 80147b8:	e7c1      	b.n	801473e <__ieee754_fmod+0x7a>
 80147ba:	4846      	ldr	r0, [pc, #280]	@ (80148d4 <__ieee754_fmod+0x210>)
 80147bc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	ddbe      	ble.n	8014742 <__ieee754_fmod+0x7e>
 80147c4:	3801      	subs	r0, #1
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	e7fa      	b.n	80147c0 <__ieee754_fmod+0xfc>
 80147ca:	ea4f 5028 	mov.w	r0, r8, asr #20
 80147ce:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80147d2:	e7b6      	b.n	8014742 <__ieee754_fmod+0x7e>
 80147d4:	3a01      	subs	r2, #1
 80147d6:	005b      	lsls	r3, r3, #1
 80147d8:	e7b9      	b.n	801474e <__ieee754_fmod+0x8a>
 80147da:	4a3e      	ldr	r2, [pc, #248]	@ (80148d4 <__ieee754_fmod+0x210>)
 80147dc:	02fb      	lsls	r3, r7, #11
 80147de:	2b00      	cmp	r3, #0
 80147e0:	ddb7      	ble.n	8014752 <__ieee754_fmod+0x8e>
 80147e2:	3a01      	subs	r2, #1
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	e7fa      	b.n	80147de <__ieee754_fmod+0x11a>
 80147e8:	153a      	asrs	r2, r7, #20
 80147ea:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80147ee:	e7b0      	b.n	8014752 <__ieee754_fmod+0x8e>
 80147f0:	eba3 0c00 	sub.w	ip, r3, r0
 80147f4:	f1bc 0f1f 	cmp.w	ip, #31
 80147f8:	dc09      	bgt.n	801480e <__ieee754_fmod+0x14a>
 80147fa:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80147fe:	fa08 f10c 	lsl.w	r1, r8, ip
 8014802:	fa29 f303 	lsr.w	r3, r9, r3
 8014806:	430b      	orrs	r3, r1
 8014808:	fa09 f10c 	lsl.w	r1, r9, ip
 801480c:	e7a8      	b.n	8014760 <__ieee754_fmod+0x9c>
 801480e:	4b32      	ldr	r3, [pc, #200]	@ (80148d8 <__ieee754_fmod+0x214>)
 8014810:	1a1b      	subs	r3, r3, r0
 8014812:	fa09 f303 	lsl.w	r3, r9, r3
 8014816:	2100      	movs	r1, #0
 8014818:	e7a2      	b.n	8014760 <__ieee754_fmod+0x9c>
 801481a:	ebac 0c02 	sub.w	ip, ip, r2
 801481e:	f1bc 0f1f 	cmp.w	ip, #31
 8014822:	dc09      	bgt.n	8014838 <__ieee754_fmod+0x174>
 8014824:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014828:	fa07 f70c 	lsl.w	r7, r7, ip
 801482c:	fa26 f505 	lsr.w	r5, r6, r5
 8014830:	433d      	orrs	r5, r7
 8014832:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014836:	e79b      	b.n	8014770 <__ieee754_fmod+0xac>
 8014838:	4d27      	ldr	r5, [pc, #156]	@ (80148d8 <__ieee754_fmod+0x214>)
 801483a:	1aad      	subs	r5, r5, r2
 801483c:	fa06 f505 	lsl.w	r5, r6, r5
 8014840:	f04f 0e00 	mov.w	lr, #0
 8014844:	e794      	b.n	8014770 <__ieee754_fmod+0xac>
 8014846:	4571      	cmp	r1, lr
 8014848:	bf38      	it	cc
 801484a:	f106 36ff 	addcc.w	r6, r6, #4294967295
 801484e:	2e00      	cmp	r6, #0
 8014850:	da05      	bge.n	801485e <__ieee754_fmod+0x19a>
 8014852:	0fce      	lsrs	r6, r1, #31
 8014854:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014858:	0049      	lsls	r1, r1, #1
 801485a:	3801      	subs	r0, #1
 801485c:	e789      	b.n	8014772 <__ieee754_fmod+0xae>
 801485e:	ea56 0307 	orrs.w	r3, r6, r7
 8014862:	f43f af5d 	beq.w	8014720 <__ieee754_fmod+0x5c>
 8014866:	0ffb      	lsrs	r3, r7, #31
 8014868:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801486c:	0079      	lsls	r1, r7, #1
 801486e:	e7f4      	b.n	801485a <__ieee754_fmod+0x196>
 8014870:	0fc8      	lsrs	r0, r1, #31
 8014872:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014876:	0049      	lsls	r1, r1, #1
 8014878:	3a01      	subs	r2, #1
 801487a:	e78a      	b.n	8014792 <__ieee754_fmod+0xce>
 801487c:	1a80      	subs	r0, r0, r2
 801487e:	2814      	cmp	r0, #20
 8014880:	dc0c      	bgt.n	801489c <__ieee754_fmod+0x1d8>
 8014882:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014886:	fa03 f202 	lsl.w	r2, r3, r2
 801488a:	40c1      	lsrs	r1, r0
 801488c:	430a      	orrs	r2, r1
 801488e:	4103      	asrs	r3, r0
 8014890:	ea43 0104 	orr.w	r1, r3, r4
 8014894:	4610      	mov	r0, r2
 8014896:	ec41 0b10 	vmov	d0, r0, r1
 801489a:	e733      	b.n	8014704 <__ieee754_fmod+0x40>
 801489c:	281f      	cmp	r0, #31
 801489e:	dc07      	bgt.n	80148b0 <__ieee754_fmod+0x1ec>
 80148a0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80148a4:	40c1      	lsrs	r1, r0
 80148a6:	fa03 f202 	lsl.w	r2, r3, r2
 80148aa:	430a      	orrs	r2, r1
 80148ac:	4623      	mov	r3, r4
 80148ae:	e7ef      	b.n	8014890 <__ieee754_fmod+0x1cc>
 80148b0:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80148b4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80148b8:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80148bc:	32e2      	adds	r2, #226	@ 0xe2
 80148be:	fa43 f202 	asr.w	r2, r3, r2
 80148c2:	e7f3      	b.n	80148ac <__ieee754_fmod+0x1e8>
 80148c4:	7fefffff 	.word	0x7fefffff
 80148c8:	7ff00000 	.word	0x7ff00000
 80148cc:	08016fe8 	.word	0x08016fe8
 80148d0:	fffffbed 	.word	0xfffffbed
 80148d4:	fffffc02 	.word	0xfffffc02
 80148d8:	fffffbe2 	.word	0xfffffbe2

080148dc <__ieee754_acosf>:
 80148dc:	b508      	push	{r3, lr}
 80148de:	ee10 3a10 	vmov	r3, s0
 80148e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80148e6:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80148ea:	ed2d 8b0c 	vpush	{d8-d13}
 80148ee:	d109      	bne.n	8014904 <__ieee754_acosf+0x28>
 80148f0:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8014a88 <__ieee754_acosf+0x1ac>
 80148f4:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8014a8c <__ieee754_acosf+0x1b0>
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	fe37 0a80 	vselgt.f32	s0, s15, s0
 80148fe:	ecbd 8b0c 	vpop	{d8-d13}
 8014902:	bd08      	pop	{r3, pc}
 8014904:	d904      	bls.n	8014910 <__ieee754_acosf+0x34>
 8014906:	ee30 8a40 	vsub.f32	s16, s0, s0
 801490a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801490e:	e7f6      	b.n	80148fe <__ieee754_acosf+0x22>
 8014910:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8014914:	d23c      	bcs.n	8014990 <__ieee754_acosf+0xb4>
 8014916:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801491a:	f240 80b1 	bls.w	8014a80 <__ieee754_acosf+0x1a4>
 801491e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014922:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8014a90 <__ieee754_acosf+0x1b4>
 8014926:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8014a94 <__ieee754_acosf+0x1b8>
 801492a:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 8014a98 <__ieee754_acosf+0x1bc>
 801492e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014932:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8014a9c <__ieee754_acosf+0x1c0>
 8014936:	eee7 6a27 	vfma.f32	s13, s14, s15
 801493a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014aa0 <__ieee754_acosf+0x1c4>
 801493e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014942:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8014aa4 <__ieee754_acosf+0x1c8>
 8014946:	eee7 6a27 	vfma.f32	s13, s14, s15
 801494a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8014aa8 <__ieee754_acosf+0x1cc>
 801494e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014952:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8014aac <__ieee754_acosf+0x1d0>
 8014956:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801495a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8014ab0 <__ieee754_acosf+0x1d4>
 801495e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014962:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8014ab4 <__ieee754_acosf+0x1d8>
 8014966:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801496a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801496e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014976:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8014ab8 <__ieee754_acosf+0x1dc>
 801497a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801497e:	eee0 7a46 	vfms.f32	s15, s0, s12
 8014982:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014986:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8014abc <__ieee754_acosf+0x1e0>
 801498a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801498e:	e7b6      	b.n	80148fe <__ieee754_acosf+0x22>
 8014990:	2b00      	cmp	r3, #0
 8014992:	eddf da3f 	vldr	s27, [pc, #252]	@ 8014a90 <__ieee754_acosf+0x1b4>
 8014996:	eddf ca3f 	vldr	s25, [pc, #252]	@ 8014a94 <__ieee754_acosf+0x1b8>
 801499a:	ed9f ca40 	vldr	s24, [pc, #256]	@ 8014a9c <__ieee754_acosf+0x1c0>
 801499e:	eddf ba40 	vldr	s23, [pc, #256]	@ 8014aa0 <__ieee754_acosf+0x1c4>
 80149a2:	ed9f ba40 	vldr	s22, [pc, #256]	@ 8014aa4 <__ieee754_acosf+0x1c8>
 80149a6:	eddf 8a40 	vldr	s17, [pc, #256]	@ 8014aa8 <__ieee754_acosf+0x1cc>
 80149aa:	ed9f da40 	vldr	s26, [pc, #256]	@ 8014aac <__ieee754_acosf+0x1d0>
 80149ae:	eddf aa3a 	vldr	s21, [pc, #232]	@ 8014a98 <__ieee754_acosf+0x1bc>
 80149b2:	ed9f aa3f 	vldr	s20, [pc, #252]	@ 8014ab0 <__ieee754_acosf+0x1d4>
 80149b6:	eddf 9a3f 	vldr	s19, [pc, #252]	@ 8014ab4 <__ieee754_acosf+0x1d8>
 80149ba:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80149be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80149c2:	da28      	bge.n	8014a16 <__ieee754_acosf+0x13a>
 80149c4:	ee30 8a09 	vadd.f32	s16, s0, s18
 80149c8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80149cc:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80149d0:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80149d4:	eeac ca80 	vfma.f32	s24, s25, s0
 80149d8:	eeaa aa80 	vfma.f32	s20, s21, s0
 80149dc:	eeec ba00 	vfma.f32	s23, s24, s0
 80149e0:	eeea 9a00 	vfma.f32	s19, s20, s0
 80149e4:	eeab ba80 	vfma.f32	s22, s23, s0
 80149e8:	eea9 9a80 	vfma.f32	s18, s19, s0
 80149ec:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80149f0:	ee68 8a80 	vmul.f32	s17, s17, s0
 80149f4:	f000 f86a 	bl	8014acc <__ieee754_sqrtf>
 80149f8:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80149fc:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8014ac0 <__ieee754_acosf+0x1e4>
 8014a00:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014a04:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8014a08:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014a0c:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8014ac4 <__ieee754_acosf+0x1e8>
 8014a10:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014a14:	e773      	b.n	80148fe <__ieee754_acosf+0x22>
 8014a16:	ee39 8a40 	vsub.f32	s16, s18, s0
 8014a1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8014a22:	f000 f853 	bl	8014acc <__ieee754_sqrtf>
 8014a26:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8014a2a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8014a2e:	eeac ca88 	vfma.f32	s24, s25, s16
 8014a32:	eeaa aa88 	vfma.f32	s20, s21, s16
 8014a36:	eeec ba08 	vfma.f32	s23, s24, s16
 8014a3a:	ee10 3a10 	vmov	r3, s0
 8014a3e:	eeab ba88 	vfma.f32	s22, s23, s16
 8014a42:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014a46:	f023 030f 	bic.w	r3, r3, #15
 8014a4a:	eeea 9a08 	vfma.f32	s19, s20, s16
 8014a4e:	ee07 3a90 	vmov	s15, r3
 8014a52:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8014a56:	eeb0 6a48 	vmov.f32	s12, s16
 8014a5a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8014a5e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8014a62:	ee70 6a27 	vadd.f32	s13, s0, s15
 8014a66:	ee68 8a88 	vmul.f32	s17, s17, s16
 8014a6a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014a6e:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8014a72:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014a76:	ee37 0a87 	vadd.f32	s0, s15, s14
 8014a7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014a7e:	e73e      	b.n	80148fe <__ieee754_acosf+0x22>
 8014a80:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8014ac8 <__ieee754_acosf+0x1ec>
 8014a84:	e73b      	b.n	80148fe <__ieee754_acosf+0x22>
 8014a86:	bf00      	nop
 8014a88:	40490fdb 	.word	0x40490fdb
 8014a8c:	00000000 	.word	0x00000000
 8014a90:	3811ef08 	.word	0x3811ef08
 8014a94:	3a4f7f04 	.word	0x3a4f7f04
 8014a98:	bf303361 	.word	0xbf303361
 8014a9c:	bd241146 	.word	0xbd241146
 8014aa0:	3e4e0aa8 	.word	0x3e4e0aa8
 8014aa4:	bea6b090 	.word	0xbea6b090
 8014aa8:	3e2aaaab 	.word	0x3e2aaaab
 8014aac:	3d9dc62e 	.word	0x3d9dc62e
 8014ab0:	4001572d 	.word	0x4001572d
 8014ab4:	c019d139 	.word	0xc019d139
 8014ab8:	33a22168 	.word	0x33a22168
 8014abc:	3fc90fda 	.word	0x3fc90fda
 8014ac0:	b3a22168 	.word	0xb3a22168
 8014ac4:	40490fda 	.word	0x40490fda
 8014ac8:	3fc90fdb 	.word	0x3fc90fdb

08014acc <__ieee754_sqrtf>:
 8014acc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014ad0:	4770      	bx	lr
	...

08014ad4 <_init>:
 8014ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ad6:	bf00      	nop
 8014ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ada:	bc08      	pop	{r3}
 8014adc:	469e      	mov	lr, r3
 8014ade:	4770      	bx	lr

08014ae0 <_fini>:
 8014ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae2:	bf00      	nop
 8014ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ae6:	bc08      	pop	{r3}
 8014ae8:	469e      	mov	lr, r3
 8014aea:	4770      	bx	lr
